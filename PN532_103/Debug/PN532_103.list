
PN532_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004364  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08004470  08004470  00014470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004720  08004720  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004720  08004720  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004720  08004720  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004720  08004720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004724  08004724  00014724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08004798  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004798  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100fa  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002575  00000000  00000000  00030193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00032708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00033650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197de  00000000  00000000  000344a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d38  00000000  00000000  0004dc7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea77  00000000  00000000  0005e9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed42d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004968  00000000  00000000  000ed480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004458 	.word	0x08004458

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004458 	.word	0x08004458

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b0ce      	sub	sp, #312	; 0x138
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f001 f94b 	bl	80013fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8a1 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f945 	bl	80003f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800016e:	f000 f8e3 	bl	8000338 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f917 	bl	80003a4 <MX_USART1_UART_Init>
//  HAL_TIM_Base_Start_IT(&htim2);
//  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);

  uint8_t buff[255];
  uint8_t uid[MIFARE_UID_MAX_LENGTH];
  int32_t uid_len = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

  PN532 pn532;
  PN532_SPI_Init(&pn532);
 800017c:	f107 030c 	add.w	r3, r7, #12
 8000180:	4618      	mov	r0, r3
 8000182:	f000 febf 	bl	8000f04 <PN532_SPI_Init>
  if (PN532_GetFirmwareVersion(&pn532, buff) != PN532_STATUS_OK)
 8000186:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800018a:	f107 030c 	add.w	r3, r7, #12
 800018e:	4611      	mov	r1, r2
 8000190:	4618      	mov	r0, r3
 8000192:	f000 fcc9 	bl	8000b28 <PN532_GetFirmwareVersion>
 8000196:	4603      	mov	r3, r0
 8000198:	2b00      	cmp	r3, #0
 800019a:	d012      	beq.n	80001c2 <main+0x66>
  {
    while(1)
    {
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 800019c:	2201      	movs	r2, #1
 800019e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a2:	483e      	ldr	r0, [pc, #248]	; (800029c <main+0x140>)
 80001a4:	f001 fbe4 	bl	8001970 <HAL_GPIO_WritePin>
    	HAL_Delay(250);
 80001a8:	20fa      	movs	r0, #250	; 0xfa
 80001aa:	f001 f959 	bl	8001460 <HAL_Delay>
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b4:	4839      	ldr	r0, [pc, #228]	; (800029c <main+0x140>)
 80001b6:	f001 fbdb 	bl	8001970 <HAL_GPIO_WritePin>
    	HAL_Delay(250);
 80001ba:	20fa      	movs	r0, #250	; 0xfa
 80001bc:	f001 f950 	bl	8001460 <HAL_Delay>
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 80001c0:	e7ec      	b.n	800019c <main+0x40>
    }
  }
  PN532_SamConfiguration(&pn532);
 80001c2:	f107 030c 	add.w	r3, r7, #12
 80001c6:	4618      	mov	r0, r3
 80001c8:	f000 fcd2 	bl	8000b70 <PN532_SamConfiguration>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	memset(uid, 0, sizeof(uid));
 80001cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80001d0:	220a      	movs	r2, #10
 80001d2:	2100      	movs	r1, #0
 80001d4:	4618      	mov	r0, r3
 80001d6:	f002 ff41 	bl	800305c <memset>
		    uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 80001da:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80001de:	f107 000c 	add.w	r0, r7, #12
 80001e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e6:	2200      	movs	r2, #0
 80001e8:	f000 fce4 	bl	8000bb4 <PN532_ReadPassiveTarget>
 80001ec:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
		    if (uid_len != PN532_STATUS_ERROR)
 80001f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80001f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80001f8:	d0e8      	beq.n	80001cc <main+0x70>
		    {
		    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80001fa:	2200      	movs	r2, #0
 80001fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000200:	4826      	ldr	r0, [pc, #152]	; (800029c <main+0x140>)
 8000202:	f001 fbb5 	bl	8001970 <HAL_GPIO_WritePin>
		    	memset(buffer, 0, sizeof(buffer));
 8000206:	2232      	movs	r2, #50	; 0x32
 8000208:	2100      	movs	r1, #0
 800020a:	4825      	ldr	r0, [pc, #148]	; (80002a0 <main+0x144>)
 800020c:	f002 ff26 	bl	800305c <memset>
		    	char stringForHex[5];
		    	for(uint8_t i=0; i<uid_len; i++)
 8000210:	2300      	movs	r3, #0
 8000212:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8000216:	e01c      	b.n	8000252 <main+0xf6>
		    	{
		    		memset(stringForHex, 0, sizeof(stringForHex));
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2205      	movs	r2, #5
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f002 ff1c 	bl	800305c <memset>
					#ifdef use_HEXADECIMAL
		    		sprintf(stringForHex, "%02X ", (unsigned char)uid[i]);
 8000224:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000228:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800022c:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8000230:	5cd3      	ldrb	r3, [r2, r3]
 8000232:	461a      	mov	r2, r3
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	491b      	ldr	r1, [pc, #108]	; (80002a4 <main+0x148>)
 8000238:	4618      	mov	r0, r3
 800023a:	f002 ffa5 	bl	8003188 <siprintf>
					#else
		    		sprintf(stringForHex, "%d ", (unsigned char)uid[i]);
					#endif
		    		strcat(buffer, stringForHex);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4619      	mov	r1, r3
 8000242:	4817      	ldr	r0, [pc, #92]	; (80002a0 <main+0x144>)
 8000244:	f002 ffc0 	bl	80031c8 <strcat>
		    	for(uint8_t i=0; i<uid_len; i++)
 8000248:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800024c:	3301      	adds	r3, #1
 800024e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8000252:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000256:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800025a:	429a      	cmp	r2, r3
 800025c:	dcdc      	bgt.n	8000218 <main+0xbc>
		    	}
		    	buffer[strlen(buffer)-1] = '\n';
 800025e:	4810      	ldr	r0, [pc, #64]	; (80002a0 <main+0x144>)
 8000260:	f7ff ff74 	bl	800014c <strlen>
 8000264:	4603      	mov	r3, r0
 8000266:	3b01      	subs	r3, #1
 8000268:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <main+0x144>)
 800026a:	210a      	movs	r1, #10
 800026c:	54d1      	strb	r1, [r2, r3]
		    	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 500);
 800026e:	480c      	ldr	r0, [pc, #48]	; (80002a0 <main+0x144>)
 8000270:	f7ff ff6c 	bl	800014c <strlen>
 8000274:	4603      	mov	r3, r0
 8000276:	b29a      	uxth	r2, r3
 8000278:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800027c:	4908      	ldr	r1, [pc, #32]	; (80002a0 <main+0x144>)
 800027e:	480a      	ldr	r0, [pc, #40]	; (80002a8 <main+0x14c>)
 8000280:	f002 fd42 	bl	8002d08 <HAL_UART_Transmit>
		    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028a:	4804      	ldr	r0, [pc, #16]	; (800029c <main+0x140>)
 800028c:	f001 fb70 	bl	8001970 <HAL_GPIO_WritePin>
		    	HAL_Delay(1000);
 8000290:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000294:	f001 f8e4 	bl	8001460 <HAL_Delay>
	  	memset(uid, 0, sizeof(uid));
 8000298:	e798      	b.n	80001cc <main+0x70>
 800029a:	bf00      	nop
 800029c:	40011000 	.word	0x40011000
 80002a0:	2000012c 	.word	0x2000012c
 80002a4:	08004470 	.word	0x08004470
 80002a8:	200000e4 	.word	0x200000e4

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b090      	sub	sp, #64	; 0x40
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0318 	add.w	r3, r7, #24
 80002b6:	2228      	movs	r2, #40	; 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 fece 	bl	800305c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ce:	2301      	movs	r3, #1
 80002d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002dc:	2301      	movs	r3, #1
 80002de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e0:	2302      	movs	r3, #2
 80002e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f0:	f107 0318 	add.w	r3, r7, #24
 80002f4:	4618      	mov	r0, r3
 80002f6:	f001 fb53 	bl	80019a0 <HAL_RCC_OscConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000300:	f000 f916 	bl	8000530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000304:	230f      	movs	r3, #15
 8000306:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000308:	2302      	movs	r3, #2
 800030a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2102      	movs	r1, #2
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fdc0 	bl	8001ea4 <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800032a:	f000 f901 	bl	8000530 <Error_Handler>
  }
}
 800032e:	bf00      	nop
 8000330:	3740      	adds	r7, #64	; 0x40
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800033c:	4b17      	ldr	r3, [pc, #92]	; (800039c <MX_SPI1_Init+0x64>)
 800033e:	4a18      	ldr	r2, [pc, #96]	; (80003a0 <MX_SPI1_Init+0x68>)
 8000340:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000342:	4b16      	ldr	r3, [pc, #88]	; (800039c <MX_SPI1_Init+0x64>)
 8000344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000348:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <MX_SPI1_Init+0x64>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_SPI1_Init+0x64>)
 8000352:	2200      	movs	r2, #0
 8000354:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_SPI1_Init+0x64>)
 8000358:	2200      	movs	r2, #0
 800035a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_SPI1_Init+0x64>)
 800035e:	2200      	movs	r2, #0
 8000360:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_SPI1_Init+0x64>)
 8000364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000368:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_SPI1_Init+0x64>)
 800036c:	2228      	movs	r2, #40	; 0x28
 800036e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <MX_SPI1_Init+0x64>)
 8000372:	2280      	movs	r2, #128	; 0x80
 8000374:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_SPI1_Init+0x64>)
 8000378:	2200      	movs	r2, #0
 800037a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <MX_SPI1_Init+0x64>)
 800037e:	2200      	movs	r2, #0
 8000380:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_SPI1_Init+0x64>)
 8000384:	220a      	movs	r2, #10
 8000386:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000388:	4804      	ldr	r0, [pc, #16]	; (800039c <MX_SPI1_Init+0x64>)
 800038a:	f001 ff49 	bl	8002220 <HAL_SPI_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000394:	f000 f8cc 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	2000008c 	.word	0x2000008c
 80003a0:	40013000 	.word	0x40013000

080003a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003aa:	4a12      	ldr	r2, [pc, #72]	; (80003f4 <MX_USART1_UART_Init+0x50>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003dc:	f002 fc44 	bl	8002c68 <HAL_UART_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003e6:	f000 f8a3 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	200000e4 	.word	0x200000e4
 80003f4:	40013800 	.word	0x40013800

080003f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040c:	4b33      	ldr	r3, [pc, #204]	; (80004dc <MX_GPIO_Init+0xe4>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a32      	ldr	r2, [pc, #200]	; (80004dc <MX_GPIO_Init+0xe4>)
 8000412:	f043 0310 	orr.w	r3, r3, #16
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b30      	ldr	r3, [pc, #192]	; (80004dc <MX_GPIO_Init+0xe4>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0310 	and.w	r3, r3, #16
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000424:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <MX_GPIO_Init+0xe4>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a2c      	ldr	r2, [pc, #176]	; (80004dc <MX_GPIO_Init+0xe4>)
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b2a      	ldr	r3, [pc, #168]	; (80004dc <MX_GPIO_Init+0xe4>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0320 	and.w	r3, r3, #32
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b27      	ldr	r3, [pc, #156]	; (80004dc <MX_GPIO_Init+0xe4>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a26      	ldr	r2, [pc, #152]	; (80004dc <MX_GPIO_Init+0xe4>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b24      	ldr	r3, [pc, #144]	; (80004dc <MX_GPIO_Init+0xe4>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000454:	4b21      	ldr	r3, [pc, #132]	; (80004dc <MX_GPIO_Init+0xe4>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a20      	ldr	r2, [pc, #128]	; (80004dc <MX_GPIO_Init+0xe4>)
 800045a:	f043 0308 	orr.w	r3, r3, #8
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <MX_GPIO_Init+0xe4>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0308 	and.w	r3, r3, #8
 8000468:	603b      	str	r3, [r7, #0]
 800046a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000472:	481b      	ldr	r0, [pc, #108]	; (80004e0 <MX_GPIO_Init+0xe8>)
 8000474:	f001 fa7c 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFID_SS_Pin|RFID_Reset_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2103      	movs	r1, #3
 800047c:	4819      	ldr	r0, [pc, #100]	; (80004e4 <MX_GPIO_Init+0xec>)
 800047e:	f001 fa77 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000490:	2303      	movs	r3, #3
 8000492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	4619      	mov	r1, r3
 800049a:	4811      	ldr	r0, [pc, #68]	; (80004e0 <MX_GPIO_Init+0xe8>)
 800049c:	f001 f8e4 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_SS_Pin RFID_Reset_Pin */
  GPIO_InitStruct.Pin = RFID_SS_Pin|RFID_Reset_Pin;
 80004a0:	2303      	movs	r3, #3
 80004a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	2301      	movs	r3, #1
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ac:	2303      	movs	r3, #3
 80004ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	480b      	ldr	r0, [pc, #44]	; (80004e4 <MX_GPIO_Init+0xec>)
 80004b8:	f001 f8d6 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFID_IRQ_Pin */
  GPIO_InitStruct.Pin = RFID_IRQ_Pin;
 80004bc:	2310      	movs	r3, #16
 80004be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RFID_IRQ_GPIO_Port, &GPIO_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4619      	mov	r1, r3
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_GPIO_Init+0xec>)
 80004d0:	f001 f8ca 	bl	8001668 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d4:	bf00      	nop
 80004d6:	3720      	adds	r7, #32
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40011000 	.word	0x40011000
 80004e4:	40010c00 	.word	0x40010c00

080004e8 <__io_putchar>:

/* USER CODE BEGIN 4 */
/* для printf */
PUTCHAR_PROTOTYPE
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80004f0:	1d39      	adds	r1, r7, #4
 80004f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004f6:	2201      	movs	r2, #1
 80004f8:	4803      	ldr	r0, [pc, #12]	; (8000508 <__io_putchar+0x20>)
 80004fa:	f002 fc05 	bl	8002d08 <HAL_UART_Transmit>
  return ch;
 80004fe:	687b      	ldr	r3, [r7, #4]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	200000e4 	.word	0x200000e4

0800050c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d101      	bne.n	8000522 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800051e:	f000 ff83 	bl	8001428 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40000800 	.word	0x40000800

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
}
 8000536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000538:	e7fe      	b.n	8000538 <Error_Handler+0x8>

0800053a <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 800053a:	b580      	push	{r7, lr}
 800053c:	b0c8      	sub	sp, #288	; 0x120
 800053e:	af00      	add	r7, sp, #0
 8000540:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000544:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000548:	6018      	str	r0, [r3, #0]
 800054a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800054e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000552:	6019      	str	r1, [r3, #0]
 8000554:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000558:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800055c:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 800055e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000562:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	2bff      	cmp	r3, #255	; 0xff
 800056a:	d806      	bhi.n	800057a <PN532_WriteFrame+0x40>
 800056c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000570:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d102      	bne.n	8000580 <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 800057a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800057e:	e0aa      	b.n	80006d6 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    frame[0] = PN532_PREAMBLE;
 8000586:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800058a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8000592:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000596:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800059a:	2200      	movs	r2, #0
 800059c:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 800059e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005a6:	22ff      	movs	r2, #255	; 0xff
 80005a8:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 80005aa:	2300      	movs	r3, #0
 80005ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80005b0:	e010      	b.n	80005d4 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 80005b2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80005b6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80005ba:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80005be:	5cd2      	ldrb	r2, [r2, r3]
 80005c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80005c4:	4413      	add	r3, r2
 80005c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 80005ca:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80005ce:	3301      	adds	r3, #1
 80005d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80005d4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d9ea      	bls.n	80005b2 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 80005dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005e0:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005f0:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 80005f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005f6:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	425b      	negs	r3, r3
 8000600:	b2da      	uxtb	r2, r3
 8000602:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000606:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800060a:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 800060c:	2300      	movs	r3, #0
 800060e:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000612:	e023      	b.n	800065c <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8000614:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000618:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800061c:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000620:	6812      	ldr	r2, [r2, #0]
 8000622:	441a      	add	r2, r3
 8000624:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000628:	3305      	adds	r3, #5
 800062a:	7811      	ldrb	r1, [r2, #0]
 800062c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000630:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000634:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000636:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800063a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800063e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000642:	6812      	ldr	r2, [r2, #0]
 8000644:	4413      	add	r3, r2
 8000646:	781a      	ldrb	r2, [r3, #0]
 8000648:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800064c:	4413      	add	r3, r2
 800064e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8000652:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000656:	3301      	adds	r3, #1
 8000658:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800065c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000660:	b29b      	uxth	r3, r3
 8000662:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000666:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 800066a:	8812      	ldrh	r2, [r2, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d8d1      	bhi.n	8000614 <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8000670:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000674:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	3305      	adds	r3, #5
 800067c:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8000680:	43d2      	mvns	r2, r2
 8000682:	b2d1      	uxtb	r1, r2
 8000684:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000688:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800068c:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 800068e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000692:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	3306      	adds	r3, #6
 800069a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800069e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80006a2:	2100      	movs	r1, #0
 80006a4:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 80006a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80006b6:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 80006ba:	8812      	ldrh	r2, [r2, #0]
 80006bc:	3207      	adds	r2, #7
 80006be:	b291      	uxth	r1, r2
 80006c0:	f107 0214 	add.w	r2, r7, #20
 80006c4:	4610      	mov	r0, r2
 80006c6:	4798      	blx	r3
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d002      	beq.n	80006d4 <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006d2:	e000      	b.n	80006d6 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b0c8      	sub	sp, #288	; 0x120
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80006ee:	6018      	str	r0, [r3, #0]
 80006f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80006f8:	6019      	str	r1, [r3, #0]
 80006fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006fe:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000702:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 800070a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800070e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800071a:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 800071e:	8812      	ldrh	r2, [r2, #0]
 8000720:	3207      	adds	r2, #7
 8000722:	b291      	uxth	r1, r2
 8000724:	f107 0214 	add.w	r2, r7, #20
 8000728:	4610      	mov	r0, r2
 800072a:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (buff[offset] == 0x00) {
 8000732:	e019      	b.n	8000768 <PN532_ReadFrame+0x88>
        offset += 1;
 8000734:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000738:	3301      	adds	r3, #1
 800073a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        if (offset >= length + 8){
 800073e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000742:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	1dda      	adds	r2, r3, #7
 800074a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800074e:	429a      	cmp	r2, r3
 8000750:	da0a      	bge.n	8000768 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8000752:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000756:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	485b      	ldr	r0, [pc, #364]	; (80008cc <PN532_ReadFrame+0x1ec>)
 8000760:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000766:	e0ab      	b.n	80008c0 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 8000768:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800076c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000770:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000774:	5cd3      	ldrb	r3, [r2, r3]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0dc      	beq.n	8000734 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 800077a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800077e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000782:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000786:	5cd3      	ldrb	r3, [r2, r3]
 8000788:	2bff      	cmp	r3, #255	; 0xff
 800078a:	d00a      	beq.n	80007a2 <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 800078c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000790:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	484c      	ldr	r0, [pc, #304]	; (80008cc <PN532_ReadFrame+0x1ec>)
 800079a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800079c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007a0:	e08e      	b.n	80008c0 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 80007a2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007a6:	3301      	adds	r3, #1
 80007a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    if (offset >= length + 8) {
 80007ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007b0:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	1dda      	adds	r2, r3, #7
 80007b8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007bc:	429a      	cmp	r2, r3
 80007be:	da0a      	bge.n	80007d6 <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 80007c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80007c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	4840      	ldr	r0, [pc, #256]	; (80008d0 <PN532_ReadFrame+0x1f0>)
 80007ce:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80007d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007d4:	e074      	b.n	80008c0 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 80007d6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007da:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80007de:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80007e2:	5cd3      	ldrb	r3, [r2, r3]
 80007e4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 80007e8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007ec:	3301      	adds	r3, #1
 80007ee:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80007f2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80007f6:	5cd2      	ldrb	r2, [r2, r3]
 80007f8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80007fc:	4413      	add	r3, r2
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00a      	beq.n	800081a <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8000804:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000808:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	4830      	ldr	r0, [pc, #192]	; (80008d4 <PN532_ReadFrame+0x1f4>)
 8000812:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000818:	e052      	b.n	80008c0 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 800081a:	2300      	movs	r3, #0
 800081c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000820:	e014      	b.n	800084c <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8000822:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000826:	1c9a      	adds	r2, r3, #2
 8000828:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800082c:	4413      	add	r3, r2
 800082e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000832:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000836:	5cd2      	ldrb	r2, [r2, r3]
 8000838:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800083c:	4413      	add	r3, r2
 800083e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000842:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000846:	3301      	adds	r3, #1
 8000848:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800084c:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 8000850:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000854:	429a      	cmp	r2, r3
 8000856:	d2e4      	bcs.n	8000822 <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8000858:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00a      	beq.n	8000876 <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 8000860:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000864:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	481a      	ldr	r0, [pc, #104]	; (80008d8 <PN532_ReadFrame+0x1f8>)
 800086e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000874:	e024      	b.n	80008c0 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8000876:	2300      	movs	r3, #0
 8000878:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 800087c:	e018      	b.n	80008b0 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 800087e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000882:	1c9a      	adds	r2, r3, #2
 8000884:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000888:	441a      	add	r2, r3
 800088a:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 800088e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000892:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8000896:	6809      	ldr	r1, [r1, #0]
 8000898:	440b      	add	r3, r1
 800089a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800089e:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80008a2:	5c8a      	ldrb	r2, [r1, r2]
 80008a4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 80008a6:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80008aa:	3301      	adds	r3, #1
 80008ac:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 80008b0:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 80008b4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d3e0      	bcc.n	800087e <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 80008bc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	08004478 	.word	0x08004478
 80008d0:	080044ac 	.word	0x080044ac
 80008d4:	080044c8 	.word	0x080044c8
 80008d8:	080044f8 	.word	0x080044f8

080008dc <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b0c7      	sub	sp, #284	; 0x11c
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	f507 748c 	add.w	r4, r7, #280	; 0x118
 80008e6:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 80008ea:	6020      	str	r0, [r4, #0]
 80008ec:	4608      	mov	r0, r1
 80008ee:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80008f2:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 80008f6:	600a      	str	r2, [r1, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008fe:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000902:	4602      	mov	r2, r0
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800090a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800090e:	460a      	mov	r2, r1
 8000910:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000912:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800091a:	22d4      	movs	r2, #212	; 0xd4
 800091c:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 800091e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000926:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800092a:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 800092e:	7812      	ldrb	r2, [r2, #0]
 8000930:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000932:	2300      	movs	r3, #0
 8000934:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000938:	e012      	b.n	8000960 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 800093a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800093e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000942:	441a      	add	r2, r3
 8000944:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000948:	3302      	adds	r3, #2
 800094a:	7811      	ldrb	r1, [r2, #0]
 800094c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000950:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000954:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8000956:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800095a:	3301      	adds	r3, #1
 800095c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000960:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000964:	b29b      	uxth	r3, r3
 8000966:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 800096a:	429a      	cmp	r2, r3
 800096c:	d8e5      	bhi.n	800093a <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 800096e:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8000972:	3302      	adds	r3, #2
 8000974:	b29a      	uxth	r2, r3
 8000976:	f107 0110 	add.w	r1, r7, #16
 800097a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800097e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	f7ff fdd9 	bl	800053a <PN532_WriteFrame>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d011      	beq.n	80009b2 <PN532_CallFunction+0xd6>
        pn532->wakeup();
 800098e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000992:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	691b      	ldr	r3, [r3, #16]
 800099a:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 800099c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	485b      	ldr	r0, [pc, #364]	; (8000b18 <PN532_CallFunction+0x23c>)
 80009aa:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009b0:	e0ac      	b.n	8000b0c <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 80009b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80009c2:	4798      	blx	r3
 80009c4:	4603      	mov	r3, r0
 80009c6:	f083 0301 	eor.w	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d002      	beq.n	80009d6 <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009d4:	e09a      	b.n	8000b0c <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 80009d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f107 0210 	add.w	r2, r7, #16
 80009e6:	2106      	movs	r1, #6
 80009e8:	4610      	mov	r0, r2
 80009ea:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 80009ec:	2300      	movs	r3, #0
 80009ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80009f2:	e01c      	b.n	8000a2e <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 80009f4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80009f8:	4a48      	ldr	r2, [pc, #288]	; (8000b1c <PN532_CallFunction+0x240>)
 80009fa:	5cd2      	ldrb	r2, [r2, r3]
 80009fc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000a00:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000a04:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8000a08:	5ccb      	ldrb	r3, [r1, r3]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d00a      	beq.n	8000a24 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 8000a0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	4841      	ldr	r0, [pc, #260]	; (8000b20 <PN532_CallFunction+0x244>)
 8000a1c:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a22:	e073      	b.n	8000b0c <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000a24:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000a28:	3301      	adds	r3, #1
 8000a2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000a2e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000a32:	2b05      	cmp	r3, #5
 8000a34:	d9de      	bls.n	80009f4 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000a36:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000a46:	4798      	blx	r3
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f083 0301 	eor.w	r3, r3, #1
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a58:	e058      	b.n	8000b0c <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000a5a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	3302      	adds	r3, #2
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	f107 0110 	add.w	r1, r7, #16
 8000a6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	f7ff fe33 	bl	80006e0 <PN532_ReadFrame>
 8000a7a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000a7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2bd5      	cmp	r3, #213	; 0xd5
 8000a8a:	d10d      	bne.n	8000aa8 <PN532_CallFunction+0x1cc>
 8000a8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a94:	785b      	ldrb	r3, [r3, #1]
 8000a96:	461a      	mov	r2, r3
 8000a98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a9c:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d00a      	beq.n	8000abe <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8000aa8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000aac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	481b      	ldr	r0, [pc, #108]	; (8000b24 <PN532_CallFunction+0x248>)
 8000ab6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000abc:	e026      	b.n	8000b0c <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000ac4:	e015      	b.n	8000af2 <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8000ac6:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000aca:	1c9a      	adds	r2, r3, #2
 8000acc:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000ad0:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000ad4:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8000ad8:	6809      	ldr	r1, [r1, #0]
 8000ada:	440b      	add	r3, r1
 8000adc:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000ae0:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8000ae4:	5c8a      	ldrb	r2, [r1, r2]
 8000ae6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8000ae8:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000aec:	3301      	adds	r3, #1
 8000aee:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000af2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000afc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000b00:	8812      	ldrh	r2, [r2, #0]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d8df      	bhi.n	8000ac6 <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8000b06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b0a:	3b02      	subs	r3, #2
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	0800452c 	.word	0x0800452c
 8000b1c:	08004654 	.word	0x08004654
 8000b20:	08004540 	.word	0x08004540
 8000b24:	0800456c 	.word	0x0800456c

08000b28 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af04      	add	r7, sp, #16
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8000b32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b36:	9302      	str	r3, [sp, #8]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2304      	movs	r3, #4
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	2102      	movs	r1, #2
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff fec8 	bl	80008dc <PN532_CallFunction>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b52:	d106      	bne.n	8000b62 <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <PN532_GetFirmwareVersion+0x44>)
 8000b5a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b60:	e000      	b.n	8000b64 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	08004594 	.word	0x08004594

08000b70 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af04      	add	r7, sp, #16
 8000b76:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <PN532_SamConfiguration+0x40>)
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	6812      	ldr	r2, [r2, #0]
 8000b80:	4611      	mov	r1, r2
 8000b82:	8019      	strh	r1, [r3, #0]
 8000b84:	3302      	adds	r3, #2
 8000b86:	0c12      	lsrs	r2, r2, #16
 8000b88:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	9302      	str	r3, [sp, #8]
 8000b90:	2303      	movs	r3, #3
 8000b92:	9301      	str	r3, [sp, #4]
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2114      	movs	r1, #20
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fe9b 	bl	80008dc <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	080045b0 	.word	0x080045b0

08000bb4 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b090      	sub	sp, #64	; 0x40
 8000bb8:	af04      	add	r7, sp, #16
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8000bd0:	f107 0210 	add.w	r2, r7, #16
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	9302      	str	r3, [sp, #8]
 8000bd8:	2302      	movs	r3, #2
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2313      	movs	r3, #19
 8000be4:	214a      	movs	r1, #74	; 0x4a
 8000be6:	68f8      	ldr	r0, [r7, #12]
 8000be8:	f7ff fe78 	bl	80008dc <PN532_CallFunction>
 8000bec:	62b8      	str	r0, [r7, #40]	; 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8000bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	da02      	bge.n	8000bfa <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bf8:	e02e      	b.n	8000c58 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8000bfa:	7c3b      	ldrb	r3, [r7, #16]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d006      	beq.n	8000c0e <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	4816      	ldr	r0, [pc, #88]	; (8000c60 <PN532_ReadPassiveTarget+0xac>)
 8000c06:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c0c:	e024      	b.n	8000c58 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8000c0e:	7d7b      	ldrb	r3, [r7, #21]
 8000c10:	2b07      	cmp	r3, #7
 8000c12:	d906      	bls.n	8000c22 <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	4812      	ldr	r0, [pc, #72]	; (8000c64 <PN532_ReadPassiveTarget+0xb0>)
 8000c1a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c20:	e01a      	b.n	8000c58 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000c22:	2300      	movs	r3, #0
 8000c24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c28:	e010      	b.n	8000c4c <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8000c2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c2e:	1d9a      	adds	r2, r3, #6
 8000c30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	440b      	add	r3, r1
 8000c38:	3230      	adds	r2, #48	; 0x30
 8000c3a:	443a      	add	r2, r7
 8000c3c:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000c40:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000c42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c46:	3301      	adds	r3, #1
 8000c48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c4c:	7d7b      	ldrb	r3, [r7, #21]
 8000c4e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d3e9      	bcc.n	8000c2a <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8000c56:	7d7b      	ldrb	r3, [r7, #21]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3730      	adds	r7, #48	; 0x30
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	080045b4 	.word	0x080045b4
 8000c64:	080045d4 	.word	0x080045d4

08000c68 <PN532_Reset>:
//extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2102      	movs	r1, #2
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <PN532_Reset+0x3c>)
 8000c72:	f000 fe7d 	bl	8001970 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000c76:	2064      	movs	r0, #100	; 0x64
 8000c78:	f000 fbf2 	bl	8001460 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2102      	movs	r1, #2
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <PN532_Reset+0x3c>)
 8000c82:	f000 fe75 	bl	8001970 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000c86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c8a:	f000 fbe9 	bl	8001460 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2102      	movs	r1, #2
 8000c92:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <PN532_Reset+0x3c>)
 8000c94:	f000 fe6c 	bl	8001970 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000c98:	2064      	movs	r0, #100	; 0x64
 8000c9a:	f000 fbe1 	bl	8001460 <HAL_Delay>
    return PN532_STATUS_OK;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010c00 	.word	0x40010c00

08000ca8 <PN532_Log>:

void PN532_Log(const char* log) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <PN532_Log+0x18>)
 8000cb4:	f002 f9da 	bl	800306c <iprintf>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	080045fc 	.word	0x080045fc

08000cc4 <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <spi_rw+0x48>)
 8000cd6:	f000 fe4b 	bl	8001970 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 fbc0 	bl	8001460 <HAL_Delay>
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	220a      	movs	r2, #10
 8000ce6:	9200      	str	r2, [sp, #0]
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	4808      	ldr	r0, [pc, #32]	; (8000d10 <spi_rw+0x4c>)
 8000cee:	f001 fb1b 	bl	8002328 <HAL_SPI_TransmitReceive>
#endif
    HAL_Delay(1);
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f000 fbb4 	bl	8001460 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4803      	ldr	r0, [pc, #12]	; (8000d0c <spi_rw+0x48>)
 8000cfe:	f000 fe37 	bl	8001970 <HAL_GPIO_WritePin>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40010c00 	.word	0x40010c00
 8000d10:	2000008c 	.word	0x2000008c

08000d14 <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 8000d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d18:	b087      	sub	sp, #28
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	807b      	strh	r3, [r7, #2]
 8000d22:	466b      	mov	r3, sp
 8000d24:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	1c59      	adds	r1, r3, #1
 8000d2a:	1e4b      	subs	r3, r1, #1
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	460a      	mov	r2, r1
 8000d30:	2300      	movs	r3, #0
 8000d32:	4690      	mov	r8, r2
 8000d34:	4699      	mov	r9, r3
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	f04f 0300 	mov.w	r3, #0
 8000d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d4a:	460a      	mov	r2, r1
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	4614      	mov	r4, r2
 8000d50:	461d      	mov	r5, r3
 8000d52:	f04f 0200 	mov.w	r2, #0
 8000d56:	f04f 0300 	mov.w	r3, #0
 8000d5a:	00eb      	lsls	r3, r5, #3
 8000d5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d60:	00e2      	lsls	r2, r4, #3
 8000d62:	460b      	mov	r3, r1
 8000d64:	3307      	adds	r3, #7
 8000d66:	08db      	lsrs	r3, r3, #3
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	ebad 0d03 	sub.w	sp, sp, r3
 8000d6e:	466b      	mov	r3, sp
 8000d70:	3300      	adds	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2203      	movs	r2, #3
 8000d78:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 8000d7a:	2005      	movs	r0, #5
 8000d7c:	f000 fb70 	bl	8001460 <HAL_Delay>
    spi_rw(frame, count + 1);
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	3301      	adds	r3, #1
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	4619      	mov	r1, r3
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f7ff ff9a 	bl	8000cc4 <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	75fb      	strb	r3, [r7, #23]
 8000d94:	e00a      	b.n	8000dac <PN532_SPI_ReadData+0x98>
        data[i] = frame[i + 1];
 8000d96:	7dfb      	ldrb	r3, [r7, #23]
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	7dfb      	ldrb	r3, [r7, #23]
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	440b      	add	r3, r1
 8000da0:	68f9      	ldr	r1, [r7, #12]
 8000da2:	5c8a      	ldrb	r2, [r1, r2]
 8000da4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000da6:	7dfb      	ldrb	r3, [r7, #23]
 8000da8:	3301      	adds	r3, #1
 8000daa:	75fb      	strb	r3, [r7, #23]
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	887a      	ldrh	r2, [r7, #2]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d8ef      	bhi.n	8000d96 <PN532_SPI_ReadData+0x82>
    }
    return PN532_STATUS_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	46b5      	mov	sp, r6
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	371c      	adds	r7, #28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000dc4 <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 8000dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dc8:	b087      	sub	sp, #28
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	460b      	mov	r3, r1
 8000dd0:	807b      	strh	r3, [r7, #2]
 8000dd2:	466b      	mov	r3, sp
 8000dd4:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	1c59      	adds	r1, r3, #1
 8000dda:	1e4b      	subs	r3, r1, #1
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	460a      	mov	r2, r1
 8000de0:	2300      	movs	r3, #0
 8000de2:	4690      	mov	r8, r2
 8000de4:	4699      	mov	r9, r3
 8000de6:	f04f 0200 	mov.w	r2, #0
 8000dea:	f04f 0300 	mov.w	r3, #0
 8000dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000dfa:	460a      	mov	r2, r1
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	4614      	mov	r4, r2
 8000e00:	461d      	mov	r5, r3
 8000e02:	f04f 0200 	mov.w	r2, #0
 8000e06:	f04f 0300 	mov.w	r3, #0
 8000e0a:	00eb      	lsls	r3, r5, #3
 8000e0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e10:	00e2      	lsls	r2, r4, #3
 8000e12:	460b      	mov	r3, r1
 8000e14:	3307      	adds	r3, #7
 8000e16:	08db      	lsrs	r3, r3, #3
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	ebad 0d03 	sub.w	sp, sp, r3
 8000e1e:	466b      	mov	r3, sp
 8000e20:	3300      	adds	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	75fb      	strb	r3, [r7, #23]
 8000e2e:	e00a      	b.n	8000e46 <PN532_SPI_WriteData+0x82>
        frame[i + 1] = data[i];
 8000e30:	7dfb      	ldrb	r3, [r7, #23]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	441a      	add	r2, r3
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	7811      	ldrb	r1, [r2, #0]
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8000e40:	7dfb      	ldrb	r3, [r7, #23]
 8000e42:	3301      	adds	r3, #1
 8000e44:	75fb      	strb	r3, [r7, #23]
 8000e46:	7dfb      	ldrb	r3, [r7, #23]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	887a      	ldrh	r2, [r7, #2]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d8ef      	bhi.n	8000e30 <PN532_SPI_WriteData+0x6c>
    }
    spi_rw(frame, count + 1);
 8000e50:	887b      	ldrh	r3, [r7, #2]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	3301      	adds	r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	4619      	mov	r1, r3
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff ff32 	bl	8000cc4 <spi_rw>
    return PN532_STATUS_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	46b5      	mov	sp, r6
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	371c      	adds	r7, #28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e6e <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b084      	sub	sp, #16
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 8000e76:	2302      	movs	r3, #2
 8000e78:	813b      	strh	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8000e7a:	f000 fae7 	bl	800144c <HAL_GetTick>
 8000e7e:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8000e80:	e010      	b.n	8000ea4 <PN532_SPI_WaitReady+0x36>
        HAL_Delay(10);
 8000e82:	200a      	movs	r0, #10
 8000e84:	f000 faec 	bl	8001460 <HAL_Delay>
        spi_rw(status, sizeof(status));
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff18 	bl	8000cc4 <spi_rw>
        if (status[1] == _SPI_READY) {
 8000e94:	7a7b      	ldrb	r3, [r7, #9]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d101      	bne.n	8000e9e <PN532_SPI_WaitReady+0x30>
            return true;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00b      	b.n	8000eb6 <PN532_SPI_WaitReady+0x48>
        } else {
            HAL_Delay(5);
 8000e9e:	2005      	movs	r0, #5
 8000ea0:	f000 fade 	bl	8001460 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8000ea4:	f000 fad2 	bl	800144c <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8e6      	bhi.n	8000e82 <PN532_SPI_WaitReady+0x14>
        }
    }
    return false;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	713b      	strb	r3, [r7, #4]
    HAL_Delay(1000);
 8000eca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ece:	f000 fac7 	bl	8001460 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	480a      	ldr	r0, [pc, #40]	; (8000f00 <PN532_SPI_Wakeup+0x40>)
 8000ed8:	f000 fd4a 	bl	8001970 <HAL_GPIO_WritePin>
    HAL_Delay(2); // T_osc_start
 8000edc:	2002      	movs	r0, #2
 8000ede:	f000 fabf 	bl	8001460 <HAL_Delay>
    spi_rw(data, 1);
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff feec 	bl	8000cc4 <spi_rw>
    HAL_Delay(1000);
 8000eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef0:	f000 fab6 	bl	8001460 <HAL_Delay>
    return PN532_STATUS_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40010c00 	.word	0x40010c00

08000f04 <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	int error;
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a11      	ldr	r2, [pc, #68]	; (8000f54 <PN532_SPI_Init+0x50>)
 8000f10:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <PN532_SPI_Init+0x54>)
 8000f16:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <PN532_SPI_Init+0x58>)
 8000f1c:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <PN532_SPI_Init+0x5c>)
 8000f22:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <PN532_SPI_Init+0x60>)
 8000f28:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <PN532_SPI_Init+0x64>)
 8000f2e:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    //pn532->wakeup();
    // hardware wakeup
	error = pn532->wakeup();
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	4798      	blx	r3
 8000f36:	60f8      	str	r0, [r7, #12]
	if (error != PN532_STATUS_OK) {
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d004      	beq.n	8000f48 <PN532_SPI_Init+0x44>
		printf("Error during hardware wakeup: %d\r\n", error);
 8000f3e:	68f9      	ldr	r1, [r7, #12]
 8000f40:	480a      	ldr	r0, [pc, #40]	; (8000f6c <PN532_SPI_Init+0x68>)
 8000f42:	f002 f893 	bl	800306c <iprintf>
		return;
 8000f46:	e002      	b.n	8000f4e <PN532_SPI_Init+0x4a>
	}
	printf("'PN532_SPI_Init' initialized successfully!\r\n");
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <PN532_SPI_Init+0x6c>)
 8000f4a:	f002 f915 	bl	8003178 <puts>
}
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	08000c69 	.word	0x08000c69
 8000f58:	08000d15 	.word	0x08000d15
 8000f5c:	08000dc5 	.word	0x08000dc5
 8000f60:	08000e6f 	.word	0x08000e6f
 8000f64:	08000ec1 	.word	0x08000ec1
 8000f68:	08000ca9 	.word	0x08000ca9
 8000f6c:	08004604 	.word	0x08004604
 8000f70:	08004628 	.word	0x08004628

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_MspInit+0x5c>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <HAL_MspInit+0x5c>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6193      	str	r3, [r2, #24]
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_MspInit+0x5c>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_MspInit+0x5c>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <HAL_MspInit+0x5c>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	61d3      	str	r3, [r2, #28]
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_MspInit+0x5c>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_MspInit+0x60>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_MspInit+0x60>)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010000 	.word	0x40010000

08000fd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <HAL_SPI_MspInit+0x88>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d12f      	bne.n	8001058 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_SPI_MspInit+0x8c>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a19      	ldr	r2, [pc, #100]	; (8001064 <HAL_SPI_MspInit+0x8c>)
 8000ffe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_SPI_MspInit+0x8c>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_SPI_MspInit+0x8c>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a13      	ldr	r2, [pc, #76]	; (8001064 <HAL_SPI_MspInit+0x8c>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_SPI_MspInit+0x8c>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001028:	23a0      	movs	r3, #160	; 0xa0
 800102a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	4619      	mov	r1, r3
 800103a:	480b      	ldr	r0, [pc, #44]	; (8001068 <HAL_SPI_MspInit+0x90>)
 800103c:	f000 fb14 	bl	8001668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001040:	2340      	movs	r3, #64	; 0x40
 8001042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4619      	mov	r1, r3
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <HAL_SPI_MspInit+0x90>)
 8001054:	f000 fb08 	bl	8001668 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40013000 	.word	0x40013000
 8001064:	40021000 	.word	0x40021000
 8001068:	40010800 	.word	0x40010800

0800106c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a1c      	ldr	r2, [pc, #112]	; (80010f8 <HAL_UART_MspInit+0x8c>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d131      	bne.n	80010f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_UART_MspInit+0x90>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <HAL_UART_MspInit+0x90>)
 8001092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <HAL_UART_MspInit+0x90>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_UART_MspInit+0x90>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <HAL_UART_MspInit+0x90>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_UART_MspInit+0x90>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4619      	mov	r1, r3
 80010d0:	480b      	ldr	r0, [pc, #44]	; (8001100 <HAL_UART_MspInit+0x94>)
 80010d2:	f000 fac9 	bl	8001668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4619      	mov	r1, r3
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <HAL_UART_MspInit+0x94>)
 80010ec:	f000 fabc 	bl	8001668 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010f0:	bf00      	nop
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40013800 	.word	0x40013800
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010800 	.word	0x40010800

08001104 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08e      	sub	sp, #56	; 0x38
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <HAL_InitTick+0xe8>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a33      	ldr	r2, [pc, #204]	; (80011ec <HAL_InitTick+0xe8>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <HAL_InitTick+0xe8>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001132:	f107 0210 	add.w	r2, r7, #16
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f001 f821 	bl	8002184 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001148:	2b00      	cmp	r3, #0
 800114a:	d103      	bne.n	8001154 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800114c:	f000 fff2 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8001150:	6378      	str	r0, [r7, #52]	; 0x34
 8001152:	e004      	b.n	800115e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001154:	f000 ffee 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8001158:	4603      	mov	r3, r0
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800115e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001160:	4a23      	ldr	r2, [pc, #140]	; (80011f0 <HAL_InitTick+0xec>)
 8001162:	fba2 2303 	umull	r2, r3, r2, r3
 8001166:	0c9b      	lsrs	r3, r3, #18
 8001168:	3b01      	subs	r3, #1
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800116c:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <HAL_InitTick+0xf0>)
 800116e:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <HAL_InitTick+0xf4>)
 8001170:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <HAL_InitTick+0xf0>)
 8001174:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001178:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800117a:	4a1e      	ldr	r2, [pc, #120]	; (80011f4 <HAL_InitTick+0xf0>)
 800117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_InitTick+0xf0>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <HAL_InitTick+0xf0>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_InitTick+0xf0>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001192:	4818      	ldr	r0, [pc, #96]	; (80011f4 <HAL_InitTick+0xf0>)
 8001194:	f001 fb1e 	bl	80027d4 <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800119e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d11b      	bne.n	80011de <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80011a6:	4813      	ldr	r0, [pc, #76]	; (80011f4 <HAL_InitTick+0xf0>)
 80011a8:	f001 fb6c 	bl	8002884 <HAL_TIM_Base_Start_IT>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d111      	bne.n	80011de <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011ba:	201e      	movs	r0, #30
 80011bc:	f000 fa45 	bl	800164a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	d808      	bhi.n	80011d8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80011c6:	2200      	movs	r2, #0
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	201e      	movs	r0, #30
 80011cc:	f000 fa21 	bl	8001612 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d0:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <HAL_InitTick+0xf8>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e002      	b.n	80011de <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3738      	adds	r7, #56	; 0x38
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	431bde83 	.word	0x431bde83
 80011f4:	20000160 	.word	0x20000160
 80011f8:	40000800 	.word	0x40000800
 80011fc:	20000004 	.word	0x20000004

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <NMI_Handler+0x4>

08001206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <MemManage_Handler+0x4>

08001212 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <BusFault_Handler+0x4>

08001218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <UsageFault_Handler+0x4>

0800121e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
	...

08001250 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <TIM4_IRQHandler+0x10>)
 8001256:	f001 fb67 	bl	8002928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000160 	.word	0x20000160

08001264 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	e00a      	b.n	800128c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001276:	f3af 8000 	nop.w
 800127a:	4601      	mov	r1, r0
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	60ba      	str	r2, [r7, #8]
 8001282:	b2ca      	uxtb	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbf0      	blt.n	8001276 <_read+0x12>
  }

  return len;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e009      	b.n	80012c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	60ba      	str	r2, [r7, #8]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f915 	bl	80004e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	3301      	adds	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dbf1      	blt.n	80012b0 <_write+0x12>
  }
  return len;
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_close>:

int _close(int file)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012fc:	605a      	str	r2, [r3, #4]
  return 0;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <_isatty>:

int _isatty(int file)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800131e:	b480      	push	{r7}
 8001320:	b085      	sub	sp, #20
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
	...

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f001 fe4e 	bl	8003008 <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20005000 	.word	0x20005000
 8001398:	00000400 	.word	0x00000400
 800139c:	200001a8 	.word	0x200001a8
 80013a0:	200001c0 	.word	0x200001c0

080013a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b0:	f7ff fff8 	bl	80013a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b4:	480b      	ldr	r0, [pc, #44]	; (80013e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013b6:	490c      	ldr	r1, [pc, #48]	; (80013e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013b8:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013cc:	4c09      	ldr	r4, [pc, #36]	; (80013f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013da:	f001 fe1b 	bl	8003014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013de:	f7fe febd 	bl	800015c <main>
  bx lr
 80013e2:	4770      	bx	lr
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013ec:	08004728 	.word	0x08004728
  ldr r2, =_sbss
 80013f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013f4:	200001c0 	.word	0x200001c0

080013f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC1_2_IRQHandler>
	...

080013fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_Init+0x28>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_Init+0x28>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140c:	2003      	movs	r0, #3
 800140e:	f000 f8f5 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001412:	200f      	movs	r0, #15
 8001414:	f7ff fe76 	bl	8001104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001418:	f7ff fdac 	bl	8000f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40022000 	.word	0x40022000

08001428 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x1c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x20>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a03      	ldr	r2, [pc, #12]	; (8001448 <HAL_IncTick+0x20>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	20000008 	.word	0x20000008
 8001448:	200001ac 	.word	0x200001ac

0800144c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b02      	ldr	r3, [pc, #8]	; (800145c <HAL_GetTick+0x10>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	200001ac 	.word	0x200001ac

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff fff0 	bl	800144c <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001478:	d005      	beq.n	8001486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_Delay+0x44>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001486:	bf00      	nop
 8001488:	f7ff ffe0 	bl	800144c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8f7      	bhi.n	8001488 <HAL_Delay+0x28>
  {
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000008 	.word	0x20000008

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4906      	ldr	r1, [pc, #24]	; (8001540 <__NVIC_EnableIRQ+0x34>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff4f 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001624:	f7ff ff64 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 8001628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7ff ffb2 	bl	8001598 <NVIC_EncodePriority>
 8001634:	4602      	mov	r2, r0
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff81 	bl	8001544 <__NVIC_SetPriority>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff57 	bl	800150c <__NVIC_EnableIRQ>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	e169      	b.n	8001950 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800167c:	2201      	movs	r2, #1
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	429a      	cmp	r2, r3
 8001696:	f040 8158 	bne.w	800194a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4a9a      	ldr	r2, [pc, #616]	; (8001908 <HAL_GPIO_Init+0x2a0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d05e      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016a4:	4a98      	ldr	r2, [pc, #608]	; (8001908 <HAL_GPIO_Init+0x2a0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d875      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016aa:	4a98      	ldr	r2, [pc, #608]	; (800190c <HAL_GPIO_Init+0x2a4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d058      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016b0:	4a96      	ldr	r2, [pc, #600]	; (800190c <HAL_GPIO_Init+0x2a4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d86f      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016b6:	4a96      	ldr	r2, [pc, #600]	; (8001910 <HAL_GPIO_Init+0x2a8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d052      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016bc:	4a94      	ldr	r2, [pc, #592]	; (8001910 <HAL_GPIO_Init+0x2a8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d869      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016c2:	4a94      	ldr	r2, [pc, #592]	; (8001914 <HAL_GPIO_Init+0x2ac>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d04c      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016c8:	4a92      	ldr	r2, [pc, #584]	; (8001914 <HAL_GPIO_Init+0x2ac>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d863      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016ce:	4a92      	ldr	r2, [pc, #584]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d046      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016d4:	4a90      	ldr	r2, [pc, #576]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d85d      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016da:	2b12      	cmp	r3, #18
 80016dc:	d82a      	bhi.n	8001734 <HAL_GPIO_Init+0xcc>
 80016de:	2b12      	cmp	r3, #18
 80016e0:	d859      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016e2:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <HAL_GPIO_Init+0x80>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	08001763 	.word	0x08001763
 80016ec:	0800173d 	.word	0x0800173d
 80016f0:	0800174f 	.word	0x0800174f
 80016f4:	08001791 	.word	0x08001791
 80016f8:	08001797 	.word	0x08001797
 80016fc:	08001797 	.word	0x08001797
 8001700:	08001797 	.word	0x08001797
 8001704:	08001797 	.word	0x08001797
 8001708:	08001797 	.word	0x08001797
 800170c:	08001797 	.word	0x08001797
 8001710:	08001797 	.word	0x08001797
 8001714:	08001797 	.word	0x08001797
 8001718:	08001797 	.word	0x08001797
 800171c:	08001797 	.word	0x08001797
 8001720:	08001797 	.word	0x08001797
 8001724:	08001797 	.word	0x08001797
 8001728:	08001797 	.word	0x08001797
 800172c:	08001745 	.word	0x08001745
 8001730:	08001759 	.word	0x08001759
 8001734:	4a79      	ldr	r2, [pc, #484]	; (800191c <HAL_GPIO_Init+0x2b4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800173a:	e02c      	b.n	8001796 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	623b      	str	r3, [r7, #32]
          break;
 8001742:	e029      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	3304      	adds	r3, #4
 800174a:	623b      	str	r3, [r7, #32]
          break;
 800174c:	e024      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	3308      	adds	r3, #8
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e01f      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	330c      	adds	r3, #12
 800175e:	623b      	str	r3, [r7, #32]
          break;
 8001760:	e01a      	b.n	8001798 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800176a:	2304      	movs	r3, #4
 800176c:	623b      	str	r3, [r7, #32]
          break;
 800176e:	e013      	b.n	8001798 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d105      	bne.n	8001784 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001778:	2308      	movs	r3, #8
 800177a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	611a      	str	r2, [r3, #16]
          break;
 8001782:	e009      	b.n	8001798 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001784:	2308      	movs	r3, #8
 8001786:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	615a      	str	r2, [r3, #20]
          break;
 800178e:	e003      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
          break;
 8001794:	e000      	b.n	8001798 <HAL_GPIO_Init+0x130>
          break;
 8001796:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2bff      	cmp	r3, #255	; 0xff
 800179c:	d801      	bhi.n	80017a2 <HAL_GPIO_Init+0x13a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	e001      	b.n	80017a6 <HAL_GPIO_Init+0x13e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3304      	adds	r3, #4
 80017a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d802      	bhi.n	80017b4 <HAL_GPIO_Init+0x14c>
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	e002      	b.n	80017ba <HAL_GPIO_Init+0x152>
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	3b08      	subs	r3, #8
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	210f      	movs	r1, #15
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	401a      	ands	r2, r3
 80017cc:	6a39      	ldr	r1, [r7, #32]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	431a      	orrs	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80b1 	beq.w	800194a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e8:	4b4d      	ldr	r3, [pc, #308]	; (8001920 <HAL_GPIO_Init+0x2b8>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a4c      	ldr	r2, [pc, #304]	; (8001920 <HAL_GPIO_Init+0x2b8>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <HAL_GPIO_Init+0x2b8>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001800:	4a48      	ldr	r2, [pc, #288]	; (8001924 <HAL_GPIO_Init+0x2bc>)
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4013      	ands	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a40      	ldr	r2, [pc, #256]	; (8001928 <HAL_GPIO_Init+0x2c0>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d013      	beq.n	8001854 <HAL_GPIO_Init+0x1ec>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a3f      	ldr	r2, [pc, #252]	; (800192c <HAL_GPIO_Init+0x2c4>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00d      	beq.n	8001850 <HAL_GPIO_Init+0x1e8>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a3e      	ldr	r2, [pc, #248]	; (8001930 <HAL_GPIO_Init+0x2c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d007      	beq.n	800184c <HAL_GPIO_Init+0x1e4>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a3d      	ldr	r2, [pc, #244]	; (8001934 <HAL_GPIO_Init+0x2cc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d101      	bne.n	8001848 <HAL_GPIO_Init+0x1e0>
 8001844:	2303      	movs	r3, #3
 8001846:	e006      	b.n	8001856 <HAL_GPIO_Init+0x1ee>
 8001848:	2304      	movs	r3, #4
 800184a:	e004      	b.n	8001856 <HAL_GPIO_Init+0x1ee>
 800184c:	2302      	movs	r3, #2
 800184e:	e002      	b.n	8001856 <HAL_GPIO_Init+0x1ee>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_GPIO_Init+0x1ee>
 8001854:	2300      	movs	r3, #0
 8001856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001858:	f002 0203 	and.w	r2, r2, #3
 800185c:	0092      	lsls	r2, r2, #2
 800185e:	4093      	lsls	r3, r2
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001866:	492f      	ldr	r1, [pc, #188]	; (8001924 <HAL_GPIO_Init+0x2bc>)
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	492c      	ldr	r1, [pc, #176]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800188e:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	43db      	mvns	r3, r3
 8001896:	4928      	ldr	r1, [pc, #160]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 8001898:	4013      	ands	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	4922      	ldr	r1, [pc, #136]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60cb      	str	r3, [r1, #12]
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	43db      	mvns	r3, r3
 80018be:	491e      	ldr	r1, [pc, #120]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4918      	ldr	r1, [pc, #96]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	4914      	ldr	r1, [pc, #80]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d021      	beq.n	800193c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	490e      	ldr	r1, [pc, #56]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
 8001904:	e021      	b.n	800194a <HAL_GPIO_Init+0x2e2>
 8001906:	bf00      	nop
 8001908:	10320000 	.word	0x10320000
 800190c:	10310000 	.word	0x10310000
 8001910:	10220000 	.word	0x10220000
 8001914:	10210000 	.word	0x10210000
 8001918:	10120000 	.word	0x10120000
 800191c:	10110000 	.word	0x10110000
 8001920:	40021000 	.word	0x40021000
 8001924:	40010000 	.word	0x40010000
 8001928:	40010800 	.word	0x40010800
 800192c:	40010c00 	.word	0x40010c00
 8001930:	40011000 	.word	0x40011000
 8001934:	40011400 	.word	0x40011400
 8001938:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_GPIO_Init+0x304>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	43db      	mvns	r3, r3
 8001944:	4909      	ldr	r1, [pc, #36]	; (800196c <HAL_GPIO_Init+0x304>)
 8001946:	4013      	ands	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	3301      	adds	r3, #1
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	fa22 f303 	lsr.w	r3, r2, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	f47f ae8e 	bne.w	800167c <HAL_GPIO_Init+0x14>
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	372c      	adds	r7, #44	; 0x2c
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	40010400 	.word	0x40010400

08001970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800198c:	e003      	b.n	8001996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	041a      	lsls	r2, r3, #16
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	611a      	str	r2, [r3, #16]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e272      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 8087 	beq.w	8001ace <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c0:	4b92      	ldr	r3, [pc, #584]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d00c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019cc:	4b8f      	ldr	r3, [pc, #572]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d112      	bne.n	80019fe <HAL_RCC_OscConfig+0x5e>
 80019d8:	4b8c      	ldr	r3, [pc, #560]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e4:	d10b      	bne.n	80019fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e6:	4b89      	ldr	r3, [pc, #548]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d06c      	beq.n	8001acc <HAL_RCC_OscConfig+0x12c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d168      	bne.n	8001acc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e24c      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x76>
 8001a08:	4b80      	ldr	r3, [pc, #512]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a7f      	ldr	r2, [pc, #508]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	e02e      	b.n	8001a74 <HAL_RCC_OscConfig+0xd4>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x98>
 8001a1e:	4b7b      	ldr	r3, [pc, #492]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a7a      	ldr	r2, [pc, #488]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b78      	ldr	r3, [pc, #480]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a77      	ldr	r2, [pc, #476]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e01d      	b.n	8001a74 <HAL_RCC_OscConfig+0xd4>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0xbc>
 8001a42:	4b72      	ldr	r3, [pc, #456]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a71      	ldr	r2, [pc, #452]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a6e      	ldr	r2, [pc, #440]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCC_OscConfig+0xd4>
 8001a5c:	4b6b      	ldr	r3, [pc, #428]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a6a      	ldr	r2, [pc, #424]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b68      	ldr	r3, [pc, #416]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a67      	ldr	r2, [pc, #412]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d013      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fce6 	bl	800144c <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff fce2 	bl	800144c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e200      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b5d      	ldr	r3, [pc, #372]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0xe4>
 8001aa2:	e014      	b.n	8001ace <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fcd2 	bl	800144c <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff fcce 	bl	800144c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	; 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1ec      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abe:	4b53      	ldr	r3, [pc, #332]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x10c>
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d063      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ada:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ae6:	4b49      	ldr	r3, [pc, #292]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d11c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x18c>
 8001af2:	4b46      	ldr	r3, [pc, #280]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d116      	bne.n	8001b2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_RCC_OscConfig+0x176>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e1c0      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4939      	ldr	r1, [pc, #228]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	e03a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fc87 	bl	800144c <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff fc83 	bl	800144c <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e1a1      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4927      	ldr	r1, [pc, #156]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
 8001b74:	e015      	b.n	8001ba2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b76:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fc66 	bl	800144c <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff fc62 	bl	800144c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e180      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d03a      	beq.n	8001c24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d019      	beq.n	8001bea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fc46 	bl	800144c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fc42 	bl	800144c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e160      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001be2:	2001      	movs	r0, #1
 8001be4:	f000 fafe 	bl	80021e4 <RCC_Delay>
 8001be8:	e01c      	b.n	8001c24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_RCC_OscConfig+0x274>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fc2c 	bl	800144c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf6:	e00f      	b.n	8001c18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fc28 	bl	800144c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d908      	bls.n	8001c18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e146      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	42420000 	.word	0x42420000
 8001c14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	4b92      	ldr	r3, [pc, #584]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1e9      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80a6 	beq.w	8001d7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c36:	4b8b      	ldr	r3, [pc, #556]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10d      	bne.n	8001c5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	4b88      	ldr	r3, [pc, #544]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	4a87      	ldr	r2, [pc, #540]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	61d3      	str	r3, [r2, #28]
 8001c4e:	4b85      	ldr	r3, [pc, #532]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5e:	4b82      	ldr	r3, [pc, #520]	; (8001e68 <HAL_RCC_OscConfig+0x4c8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d118      	bne.n	8001c9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6a:	4b7f      	ldr	r3, [pc, #508]	; (8001e68 <HAL_RCC_OscConfig+0x4c8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a7e      	ldr	r2, [pc, #504]	; (8001e68 <HAL_RCC_OscConfig+0x4c8>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c76:	f7ff fbe9 	bl	800144c <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7e:	f7ff fbe5 	bl	800144c <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b64      	cmp	r3, #100	; 0x64
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e103      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	4b75      	ldr	r3, [pc, #468]	; (8001e68 <HAL_RCC_OscConfig+0x4c8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x312>
 8001ca4:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4a6e      	ldr	r2, [pc, #440]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6213      	str	r3, [r2, #32]
 8001cb0:	e02d      	b.n	8001d0e <HAL_RCC_OscConfig+0x36e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x334>
 8001cba:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a69      	ldr	r2, [pc, #420]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	4b67      	ldr	r3, [pc, #412]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a66      	ldr	r2, [pc, #408]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	6213      	str	r3, [r2, #32]
 8001cd2:	e01c      	b.n	8001d0e <HAL_RCC_OscConfig+0x36e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d10c      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x356>
 8001cdc:	4b61      	ldr	r3, [pc, #388]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4a60      	ldr	r2, [pc, #384]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	6213      	str	r3, [r2, #32]
 8001ce8:	4b5e      	ldr	r3, [pc, #376]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4a5d      	ldr	r2, [pc, #372]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	e00b      	b.n	8001d0e <HAL_RCC_OscConfig+0x36e>
 8001cf6:	4b5b      	ldr	r3, [pc, #364]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4a5a      	ldr	r2, [pc, #360]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	6213      	str	r3, [r2, #32]
 8001d02:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a57      	ldr	r2, [pc, #348]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	f023 0304 	bic.w	r3, r3, #4
 8001d0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d015      	beq.n	8001d42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d16:	f7ff fb99 	bl	800144c <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fb95 	bl	800144c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0b1      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d34:	4b4b      	ldr	r3, [pc, #300]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ee      	beq.n	8001d1e <HAL_RCC_OscConfig+0x37e>
 8001d40:	e014      	b.n	8001d6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fb83 	bl	800144c <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7ff fb7f 	bl	800144c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e09b      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d60:	4b40      	ldr	r3, [pc, #256]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ee      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d105      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d72:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	4a3b      	ldr	r2, [pc, #236]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8087 	beq.w	8001e96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d88:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d061      	beq.n	8001e58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d146      	bne.n	8001e2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9c:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <HAL_RCC_OscConfig+0x4cc>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff fb53 	bl	800144c <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7ff fb4f 	bl	800144c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e06d      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd0:	d108      	bne.n	8001de4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	4921      	ldr	r1, [pc, #132]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de4:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a19      	ldr	r1, [r3, #32]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	430b      	orrs	r3, r1
 8001df6:	491b      	ldr	r1, [pc, #108]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <HAL_RCC_OscConfig+0x4cc>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff fb23 	bl	800144c <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7ff fb1f 	bl	800144c <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e03d      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x46a>
 8001e28:	e035      	b.n	8001e96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <HAL_RCC_OscConfig+0x4cc>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff fb0c 	bl	800144c <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff fb08 	bl	800144c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e026      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x498>
 8001e56:	e01e      	b.n	8001e96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d107      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e019      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_OscConfig+0x500>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0d0      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	4965      	ldr	r1, [pc, #404]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b63      	ldr	r3, [pc, #396]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0b8      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d020      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f00:	4b59      	ldr	r3, [pc, #356]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a58      	ldr	r2, [pc, #352]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f18:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4a52      	ldr	r2, [pc, #328]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f24:	4b50      	ldr	r3, [pc, #320]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	494d      	ldr	r1, [pc, #308]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d040      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d115      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e07f      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e073      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e06b      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f023 0203 	bic.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4936      	ldr	r1, [pc, #216]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f94:	f7ff fa5a 	bl	800144c <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9c:	f7ff fa56 	bl	800144c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e053      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 020c 	and.w	r2, r3, #12
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1eb      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d210      	bcs.n	8001ff4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0207 	bic.w	r2, r3, #7
 8001fda:	4922      	ldr	r1, [pc, #136]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e032      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4916      	ldr	r1, [pc, #88]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d009      	beq.n	8002032 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	490e      	ldr	r1, [pc, #56]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002032:	f000 f821 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8002036:	4602      	mov	r2, r0
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	490a      	ldr	r1, [pc, #40]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	5ccb      	ldrb	r3, [r1, r3]
 8002046:	fa22 f303 	lsr.w	r3, r2, r3
 800204a:	4a09      	ldr	r2, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x1cc>)
 800204c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x1d0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f856 	bl	8001104 <HAL_InitTick>

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40022000 	.word	0x40022000
 8002068:	40021000 	.word	0x40021000
 800206c:	0800465c 	.word	0x0800465c
 8002070:	20000000 	.word	0x20000000
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <HAL_RCC_GetSysClockFreq+0x94>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d002      	beq.n	80020a8 <HAL_RCC_GetSysClockFreq+0x30>
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d003      	beq.n	80020ae <HAL_RCC_GetSysClockFreq+0x36>
 80020a6:	e027      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_RCC_GetSysClockFreq+0x98>)
 80020aa:	613b      	str	r3, [r7, #16]
      break;
 80020ac:	e027      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	0c9b      	lsrs	r3, r3, #18
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020b8:	5cd3      	ldrb	r3, [r2, r3]
 80020ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d010      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_RCC_GetSysClockFreq+0x94>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	0c5b      	lsrs	r3, r3, #17
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	4a11      	ldr	r2, [pc, #68]	; (8002118 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <HAL_RCC_GetSysClockFreq+0x98>)
 80020da:	fb03 f202 	mul.w	r2, r3, r2
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e004      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a0c      	ldr	r2, [pc, #48]	; (800211c <HAL_RCC_GetSysClockFreq+0xa4>)
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	613b      	str	r3, [r7, #16]
      break;
 80020f6:	e002      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_RCC_GetSysClockFreq+0x98>)
 80020fa:	613b      	str	r3, [r7, #16]
      break;
 80020fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020fe:	693b      	ldr	r3, [r7, #16]
}
 8002100:	4618      	mov	r0, r3
 8002102:	371c      	adds	r7, #28
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
 8002110:	007a1200 	.word	0x007a1200
 8002114:	08004674 	.word	0x08004674
 8002118:	08004684 	.word	0x08004684
 800211c:	003d0900 	.word	0x003d0900

08002120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002124:	4b02      	ldr	r3, [pc, #8]	; (8002130 <HAL_RCC_GetHCLKFreq+0x10>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	20000000 	.word	0x20000000

08002134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002138:	f7ff fff2 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 800213c:	4602      	mov	r2, r0
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	4903      	ldr	r1, [pc, #12]	; (8002158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800214a:	5ccb      	ldrb	r3, [r1, r3]
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002150:	4618      	mov	r0, r3
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	0800466c 	.word	0x0800466c

0800215c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002160:	f7ff ffde 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002164:	4602      	mov	r2, r0
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	0adb      	lsrs	r3, r3, #11
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	4903      	ldr	r1, [pc, #12]	; (8002180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002172:	5ccb      	ldrb	r3, [r1, r3]
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	0800466c 	.word	0x0800466c

08002184 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	220f      	movs	r2, #15
 8002192:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	08db      	lsrs	r3, r3, #3
 80021be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_RCC_GetClockConfig+0x5c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0207 	and.w	r2, r3, #7
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40022000 	.word	0x40022000

080021e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <RCC_Delay+0x34>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <RCC_Delay+0x38>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0a5b      	lsrs	r3, r3, #9
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002200:	bf00      	nop
  }
  while (Delay --);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1e5a      	subs	r2, r3, #1
 8002206:	60fa      	str	r2, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f9      	bne.n	8002200 <RCC_Delay+0x1c>
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	20000000 	.word	0x20000000
 800221c:	10624dd3 	.word	0x10624dd3

08002220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e076      	b.n	8002320 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	2b00      	cmp	r3, #0
 8002238:	d108      	bne.n	800224c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002242:	d009      	beq.n	8002258 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
 800224a:	e005      	b.n	8002258 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe feb0 	bl	8000fd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800228e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022dc:	ea42 0103 	orr.w	r1, r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	0c1a      	lsrs	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f002 0204 	and.w	r2, r2, #4
 80022fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69da      	ldr	r2, [r3, #28]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800230e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08c      	sub	sp, #48	; 0x30
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002336:	2301      	movs	r3, #1
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_SPI_TransmitReceive+0x26>
 800234a:	2302      	movs	r3, #2
 800234c:	e198      	b.n	8002680 <HAL_SPI_TransmitReceive+0x358>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002356:	f7ff f879 	bl	800144c <HAL_GetTick>
 800235a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002370:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002374:	2b01      	cmp	r3, #1
 8002376:	d00f      	beq.n	8002398 <HAL_SPI_TransmitReceive+0x70>
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800237e:	d107      	bne.n	8002390 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d103      	bne.n	8002390 <HAL_SPI_TransmitReceive+0x68>
 8002388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800238c:	2b04      	cmp	r3, #4
 800238e:	d003      	beq.n	8002398 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002390:	2302      	movs	r3, #2
 8002392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002396:	e16d      	b.n	8002674 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_SPI_TransmitReceive+0x82>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_SPI_TransmitReceive+0x82>
 80023a4:	887b      	ldrh	r3, [r7, #2]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d103      	bne.n	80023b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023b0:	e160      	b.n	8002674 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d003      	beq.n	80023c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2205      	movs	r2, #5
 80023c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	887a      	ldrh	r2, [r7, #2]
 80023d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	887a      	ldrh	r2, [r7, #2]
 80023ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002406:	2b40      	cmp	r3, #64	; 0x40
 8002408:	d007      	beq.n	800241a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002418:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002422:	d17c      	bne.n	800251e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <HAL_SPI_TransmitReceive+0x10a>
 800242c:	8b7b      	ldrh	r3, [r7, #26]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d16a      	bne.n	8002508 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	881a      	ldrh	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	1c9a      	adds	r2, r3, #2
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002456:	e057      	b.n	8002508 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b02      	cmp	r3, #2
 8002464:	d11b      	bne.n	800249e <HAL_SPI_TransmitReceive+0x176>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d016      	beq.n	800249e <HAL_SPI_TransmitReceive+0x176>
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	2b01      	cmp	r3, #1
 8002474:	d113      	bne.n	800249e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	881a      	ldrh	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	1c9a      	adds	r2, r3, #2
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d119      	bne.n	80024e0 <HAL_SPI_TransmitReceive+0x1b8>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d014      	beq.n	80024e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c0:	b292      	uxth	r2, r2
 80024c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	1c9a      	adds	r2, r3, #2
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024dc:	2301      	movs	r3, #1
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024e0:	f7fe ffb4 	bl	800144c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d80b      	bhi.n	8002508 <HAL_SPI_TransmitReceive+0x1e0>
 80024f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024f6:	d007      	beq.n	8002508 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002506:	e0b5      	b.n	8002674 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1a2      	bne.n	8002458 <HAL_SPI_TransmitReceive+0x130>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d19d      	bne.n	8002458 <HAL_SPI_TransmitReceive+0x130>
 800251c:	e080      	b.n	8002620 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_SPI_TransmitReceive+0x204>
 8002526:	8b7b      	ldrh	r3, [r7, #26]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d16f      	bne.n	800260c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	330c      	adds	r3, #12
 8002536:	7812      	ldrb	r2, [r2, #0]
 8002538:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002552:	e05b      	b.n	800260c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b02      	cmp	r3, #2
 8002560:	d11c      	bne.n	800259c <HAL_SPI_TransmitReceive+0x274>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d017      	beq.n	800259c <HAL_SPI_TransmitReceive+0x274>
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d114      	bne.n	800259c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	330c      	adds	r3, #12
 800257c:	7812      	ldrb	r2, [r2, #0]
 800257e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d119      	bne.n	80025de <HAL_SPI_TransmitReceive+0x2b6>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d014      	beq.n	80025de <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025da:	2301      	movs	r3, #1
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025de:	f7fe ff35 	bl	800144c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d803      	bhi.n	80025f6 <HAL_SPI_TransmitReceive+0x2ce>
 80025ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025f4:	d102      	bne.n	80025fc <HAL_SPI_TransmitReceive+0x2d4>
 80025f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800260a:	e033      	b.n	8002674 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d19e      	bne.n	8002554 <HAL_SPI_TransmitReceive+0x22c>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d199      	bne.n	8002554 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002622:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f8b7 	bl	8002798 <SPI_EndRxTxTransaction>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d006      	beq.n	800263e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2220      	movs	r2, #32
 800263a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800263c:	e01a      	b.n	8002674 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10a      	bne.n	800265c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800266a:	e003      	b.n	8002674 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800267c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002680:	4618      	mov	r0, r3
 8002682:	3730      	adds	r7, #48	; 0x30
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002698:	f7fe fed8 	bl	800144c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	4413      	add	r3, r2
 80026a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026a8:	f7fe fed0 	bl	800144c <HAL_GetTick>
 80026ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026ae:	4b39      	ldr	r3, [pc, #228]	; (8002794 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	015b      	lsls	r3, r3, #5
 80026b4:	0d1b      	lsrs	r3, r3, #20
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026be:	e054      	b.n	800276a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c6:	d050      	beq.n	800276a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026c8:	f7fe fec0 	bl	800144c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d902      	bls.n	80026de <SPI_WaitFlagStateUntilTimeout+0x56>
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d13d      	bne.n	800275a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026f6:	d111      	bne.n	800271c <SPI_WaitFlagStateUntilTimeout+0x94>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002700:	d004      	beq.n	800270c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270a:	d107      	bne.n	800271c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800271a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002724:	d10f      	bne.n	8002746 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002744:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e017      	b.n	800278a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	3b01      	subs	r3, #1
 8002768:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4013      	ands	r3, r2
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	429a      	cmp	r2, r3
 8002778:	bf0c      	ite	eq
 800277a:	2301      	moveq	r3, #1
 800277c:	2300      	movne	r3, #0
 800277e:	b2db      	uxtb	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	429a      	cmp	r2, r3
 8002786:	d19b      	bne.n	80026c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3720      	adds	r7, #32
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000000 	.word	0x20000000

08002798 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2200      	movs	r2, #0
 80027ac:	2180      	movs	r1, #128	; 0x80
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f7ff ff6a 	bl	8002688 <SPI_WaitFlagStateUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	f043 0220 	orr.w	r2, r3, #32
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e000      	b.n	80027cc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e041      	b.n	800286a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f839 	bl	8002872 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f000 f9b4 	bl	8002b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d001      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e03a      	b.n	8002912 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a18      	ldr	r2, [pc, #96]	; (800291c <HAL_TIM_Base_Start_IT+0x98>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00e      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x58>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c6:	d009      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x58>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a14      	ldr	r2, [pc, #80]	; (8002920 <HAL_TIM_Base_Start_IT+0x9c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x58>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a13      	ldr	r2, [pc, #76]	; (8002924 <HAL_TIM_Base_Start_IT+0xa0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d111      	bne.n	8002900 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d010      	beq.n	8002910 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fe:	e007      	b.n	8002910 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	40012c00 	.word	0x40012c00
 8002920:	40000400 	.word	0x40000400
 8002924:	40000800 	.word	0x40000800

08002928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d122      	bne.n	8002984 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b02      	cmp	r3, #2
 800294a:	d11b      	bne.n	8002984 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0202 	mvn.w	r2, #2
 8002954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f8ed 	bl	8002b4a <HAL_TIM_IC_CaptureCallback>
 8002970:	e005      	b.n	800297e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f8e0 	bl	8002b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f8ef 	bl	8002b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b04      	cmp	r3, #4
 8002990:	d122      	bne.n	80029d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b04      	cmp	r3, #4
 800299e:	d11b      	bne.n	80029d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0204 	mvn.w	r2, #4
 80029a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2202      	movs	r2, #2
 80029ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f8c3 	bl	8002b4a <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f8b6 	bl	8002b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f8c5 	bl	8002b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d122      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d11b      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0208 	mvn.w	r2, #8
 80029fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2204      	movs	r2, #4
 8002a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f899 	bl	8002b4a <HAL_TIM_IC_CaptureCallback>
 8002a18:	e005      	b.n	8002a26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f88c 	bl	8002b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f89b 	bl	8002b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d122      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d11b      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0210 	mvn.w	r2, #16
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2208      	movs	r2, #8
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f86f 	bl	8002b4a <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f862 	bl	8002b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f871 	bl	8002b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d10e      	bne.n	8002aac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d107      	bne.n	8002aac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0201 	mvn.w	r2, #1
 8002aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fd fd30 	bl	800050c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab6:	2b80      	cmp	r3, #128	; 0x80
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac4:	2b80      	cmp	r3, #128	; 0x80
 8002ac6:	d107      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8bf 	bl	8002c56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d10e      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d107      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f835 	bl	8002b6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d10e      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d107      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0220 	mvn.w	r2, #32
 8002b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f88a 	bl	8002c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a29      	ldr	r2, [pc, #164]	; (8002c38 <TIM_Base_SetConfig+0xb8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00b      	beq.n	8002bb0 <TIM_Base_SetConfig+0x30>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d007      	beq.n	8002bb0 <TIM_Base_SetConfig+0x30>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a26      	ldr	r2, [pc, #152]	; (8002c3c <TIM_Base_SetConfig+0xbc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d003      	beq.n	8002bb0 <TIM_Base_SetConfig+0x30>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a25      	ldr	r2, [pc, #148]	; (8002c40 <TIM_Base_SetConfig+0xc0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d108      	bne.n	8002bc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <TIM_Base_SetConfig+0xb8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00b      	beq.n	8002be2 <TIM_Base_SetConfig+0x62>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd0:	d007      	beq.n	8002be2 <TIM_Base_SetConfig+0x62>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a19      	ldr	r2, [pc, #100]	; (8002c3c <TIM_Base_SetConfig+0xbc>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d003      	beq.n	8002be2 <TIM_Base_SetConfig+0x62>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <TIM_Base_SetConfig+0xc0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d108      	bne.n	8002bf4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a07      	ldr	r2, [pc, #28]	; (8002c38 <TIM_Base_SetConfig+0xb8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d103      	bne.n	8002c28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	615a      	str	r2, [r3, #20]
}
 8002c2e:	bf00      	nop
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40000800 	.word	0x40000800

08002c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e042      	b.n	8002d00 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe f9ec 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2224      	movs	r2, #36	; 0x24
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f91d 	bl	8002eec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	; 0x28
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d16d      	bne.n	8002e04 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_UART_Transmit+0x2c>
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e066      	b.n	8002e06 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2221      	movs	r2, #33	; 0x21
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d46:	f7fe fb81 	bl	800144c <HAL_GetTick>
 8002d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	88fa      	ldrh	r2, [r7, #6]
 8002d56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d60:	d108      	bne.n	8002d74 <HAL_UART_Transmit+0x6c>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d104      	bne.n	8002d74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	e003      	b.n	8002d7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d7c:	e02a      	b.n	8002dd4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f840 	bl	8002e0e <UART_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e036      	b.n	8002e06 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10b      	bne.n	8002db6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	3302      	adds	r3, #2
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	e007      	b.n	8002dc6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1cf      	bne.n	8002d7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2200      	movs	r2, #0
 8002de6:	2140      	movs	r1, #64	; 0x40
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f810 	bl	8002e0e <UART_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e006      	b.n	8002e06 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e000      	b.n	8002e06 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
  }
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b090      	sub	sp, #64	; 0x40
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	603b      	str	r3, [r7, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1e:	e050      	b.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e26:	d04c      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e2e:	f7fe fb0d 	bl	800144c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d241      	bcs.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	330c      	adds	r3, #12
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	330c      	adds	r3, #12
 8002e5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e5e:	637a      	str	r2, [r7, #52]	; 0x34
 8002e60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1e5      	bne.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3314      	adds	r3, #20
 8002e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	e853 3f00 	ldrex	r3, [r3]
 8002e80:	613b      	str	r3, [r7, #16]
   return(result);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3314      	adds	r3, #20
 8002e90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e92:	623a      	str	r2, [r7, #32]
 8002e94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e96:	69f9      	ldr	r1, [r7, #28]
 8002e98:	6a3a      	ldr	r2, [r7, #32]
 8002e9a:	e841 2300 	strex	r3, r2, [r1]
 8002e9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1e5      	bne.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e00f      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d09f      	beq.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3740      	adds	r7, #64	; 0x40
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f26:	f023 030c 	bic.w	r3, r3, #12
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	430b      	orrs	r3, r1
 8002f32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2c      	ldr	r2, [pc, #176]	; (8003000 <UART_SetConfig+0x114>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d103      	bne.n	8002f5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f54:	f7ff f902 	bl	800215c <HAL_RCC_GetPCLK2Freq>
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	e002      	b.n	8002f62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f5c:	f7ff f8ea 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8002f60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	009a      	lsls	r2, r3, #2
 8002f6c:	441a      	add	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	4a22      	ldr	r2, [pc, #136]	; (8003004 <UART_SetConfig+0x118>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	0119      	lsls	r1, r3, #4
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009a      	lsls	r2, r3, #2
 8002f8c:	441a      	add	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f98:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <UART_SetConfig+0x118>)
 8002f9a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2064      	movs	r0, #100	; 0x64
 8002fa2:	fb00 f303 	mul.w	r3, r0, r3
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	3332      	adds	r3, #50	; 0x32
 8002fac:	4a15      	ldr	r2, [pc, #84]	; (8003004 <UART_SetConfig+0x118>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb8:	4419      	add	r1, r3
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009a      	lsls	r2, r3, #2
 8002fc4:	441a      	add	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <UART_SetConfig+0x118>)
 8002fd2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2064      	movs	r0, #100	; 0x64
 8002fda:	fb00 f303 	mul.w	r3, r0, r3
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	3332      	adds	r3, #50	; 0x32
 8002fe4:	4a07      	ldr	r2, [pc, #28]	; (8003004 <UART_SetConfig+0x118>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	f003 020f 	and.w	r2, r3, #15
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	440a      	add	r2, r1
 8002ff6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40013800 	.word	0x40013800
 8003004:	51eb851f 	.word	0x51eb851f

08003008 <__errno>:
 8003008:	4b01      	ldr	r3, [pc, #4]	; (8003010 <__errno+0x8>)
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	2000000c 	.word	0x2000000c

08003014 <__libc_init_array>:
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	2600      	movs	r6, #0
 8003018:	4d0c      	ldr	r5, [pc, #48]	; (800304c <__libc_init_array+0x38>)
 800301a:	4c0d      	ldr	r4, [pc, #52]	; (8003050 <__libc_init_array+0x3c>)
 800301c:	1b64      	subs	r4, r4, r5
 800301e:	10a4      	asrs	r4, r4, #2
 8003020:	42a6      	cmp	r6, r4
 8003022:	d109      	bne.n	8003038 <__libc_init_array+0x24>
 8003024:	f001 fa18 	bl	8004458 <_init>
 8003028:	2600      	movs	r6, #0
 800302a:	4d0a      	ldr	r5, [pc, #40]	; (8003054 <__libc_init_array+0x40>)
 800302c:	4c0a      	ldr	r4, [pc, #40]	; (8003058 <__libc_init_array+0x44>)
 800302e:	1b64      	subs	r4, r4, r5
 8003030:	10a4      	asrs	r4, r4, #2
 8003032:	42a6      	cmp	r6, r4
 8003034:	d105      	bne.n	8003042 <__libc_init_array+0x2e>
 8003036:	bd70      	pop	{r4, r5, r6, pc}
 8003038:	f855 3b04 	ldr.w	r3, [r5], #4
 800303c:	4798      	blx	r3
 800303e:	3601      	adds	r6, #1
 8003040:	e7ee      	b.n	8003020 <__libc_init_array+0xc>
 8003042:	f855 3b04 	ldr.w	r3, [r5], #4
 8003046:	4798      	blx	r3
 8003048:	3601      	adds	r6, #1
 800304a:	e7f2      	b.n	8003032 <__libc_init_array+0x1e>
 800304c:	08004720 	.word	0x08004720
 8003050:	08004720 	.word	0x08004720
 8003054:	08004720 	.word	0x08004720
 8003058:	08004724 	.word	0x08004724

0800305c <memset>:
 800305c:	4603      	mov	r3, r0
 800305e:	4402      	add	r2, r0
 8003060:	4293      	cmp	r3, r2
 8003062:	d100      	bne.n	8003066 <memset+0xa>
 8003064:	4770      	bx	lr
 8003066:	f803 1b01 	strb.w	r1, [r3], #1
 800306a:	e7f9      	b.n	8003060 <memset+0x4>

0800306c <iprintf>:
 800306c:	b40f      	push	{r0, r1, r2, r3}
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <iprintf+0x2c>)
 8003070:	b513      	push	{r0, r1, r4, lr}
 8003072:	681c      	ldr	r4, [r3, #0]
 8003074:	b124      	cbz	r4, 8003080 <iprintf+0x14>
 8003076:	69a3      	ldr	r3, [r4, #24]
 8003078:	b913      	cbnz	r3, 8003080 <iprintf+0x14>
 800307a:	4620      	mov	r0, r4
 800307c:	f000 fa8a 	bl	8003594 <__sinit>
 8003080:	ab05      	add	r3, sp, #20
 8003082:	4620      	mov	r0, r4
 8003084:	9a04      	ldr	r2, [sp, #16]
 8003086:	68a1      	ldr	r1, [r4, #8]
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	f000 fde9 	bl	8003c60 <_vfiprintf_r>
 800308e:	b002      	add	sp, #8
 8003090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003094:	b004      	add	sp, #16
 8003096:	4770      	bx	lr
 8003098:	2000000c 	.word	0x2000000c

0800309c <_puts_r>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	460e      	mov	r6, r1
 80030a0:	4605      	mov	r5, r0
 80030a2:	b118      	cbz	r0, 80030ac <_puts_r+0x10>
 80030a4:	6983      	ldr	r3, [r0, #24]
 80030a6:	b90b      	cbnz	r3, 80030ac <_puts_r+0x10>
 80030a8:	f000 fa74 	bl	8003594 <__sinit>
 80030ac:	69ab      	ldr	r3, [r5, #24]
 80030ae:	68ac      	ldr	r4, [r5, #8]
 80030b0:	b913      	cbnz	r3, 80030b8 <_puts_r+0x1c>
 80030b2:	4628      	mov	r0, r5
 80030b4:	f000 fa6e 	bl	8003594 <__sinit>
 80030b8:	4b2c      	ldr	r3, [pc, #176]	; (800316c <_puts_r+0xd0>)
 80030ba:	429c      	cmp	r4, r3
 80030bc:	d120      	bne.n	8003100 <_puts_r+0x64>
 80030be:	686c      	ldr	r4, [r5, #4]
 80030c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030c2:	07db      	lsls	r3, r3, #31
 80030c4:	d405      	bmi.n	80030d2 <_puts_r+0x36>
 80030c6:	89a3      	ldrh	r3, [r4, #12]
 80030c8:	0598      	lsls	r0, r3, #22
 80030ca:	d402      	bmi.n	80030d2 <_puts_r+0x36>
 80030cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ce:	f000 faff 	bl	80036d0 <__retarget_lock_acquire_recursive>
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	0719      	lsls	r1, r3, #28
 80030d6:	d51d      	bpl.n	8003114 <_puts_r+0x78>
 80030d8:	6923      	ldr	r3, [r4, #16]
 80030da:	b1db      	cbz	r3, 8003114 <_puts_r+0x78>
 80030dc:	3e01      	subs	r6, #1
 80030de:	68a3      	ldr	r3, [r4, #8]
 80030e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030e4:	3b01      	subs	r3, #1
 80030e6:	60a3      	str	r3, [r4, #8]
 80030e8:	bb39      	cbnz	r1, 800313a <_puts_r+0x9e>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	da38      	bge.n	8003160 <_puts_r+0xc4>
 80030ee:	4622      	mov	r2, r4
 80030f0:	210a      	movs	r1, #10
 80030f2:	4628      	mov	r0, r5
 80030f4:	f000 f878 	bl	80031e8 <__swbuf_r>
 80030f8:	3001      	adds	r0, #1
 80030fa:	d011      	beq.n	8003120 <_puts_r+0x84>
 80030fc:	250a      	movs	r5, #10
 80030fe:	e011      	b.n	8003124 <_puts_r+0x88>
 8003100:	4b1b      	ldr	r3, [pc, #108]	; (8003170 <_puts_r+0xd4>)
 8003102:	429c      	cmp	r4, r3
 8003104:	d101      	bne.n	800310a <_puts_r+0x6e>
 8003106:	68ac      	ldr	r4, [r5, #8]
 8003108:	e7da      	b.n	80030c0 <_puts_r+0x24>
 800310a:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <_puts_r+0xd8>)
 800310c:	429c      	cmp	r4, r3
 800310e:	bf08      	it	eq
 8003110:	68ec      	ldreq	r4, [r5, #12]
 8003112:	e7d5      	b.n	80030c0 <_puts_r+0x24>
 8003114:	4621      	mov	r1, r4
 8003116:	4628      	mov	r0, r5
 8003118:	f000 f8b8 	bl	800328c <__swsetup_r>
 800311c:	2800      	cmp	r0, #0
 800311e:	d0dd      	beq.n	80030dc <_puts_r+0x40>
 8003120:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003126:	07da      	lsls	r2, r3, #31
 8003128:	d405      	bmi.n	8003136 <_puts_r+0x9a>
 800312a:	89a3      	ldrh	r3, [r4, #12]
 800312c:	059b      	lsls	r3, r3, #22
 800312e:	d402      	bmi.n	8003136 <_puts_r+0x9a>
 8003130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003132:	f000 face 	bl	80036d2 <__retarget_lock_release_recursive>
 8003136:	4628      	mov	r0, r5
 8003138:	bd70      	pop	{r4, r5, r6, pc}
 800313a:	2b00      	cmp	r3, #0
 800313c:	da04      	bge.n	8003148 <_puts_r+0xac>
 800313e:	69a2      	ldr	r2, [r4, #24]
 8003140:	429a      	cmp	r2, r3
 8003142:	dc06      	bgt.n	8003152 <_puts_r+0xb6>
 8003144:	290a      	cmp	r1, #10
 8003146:	d004      	beq.n	8003152 <_puts_r+0xb6>
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	6022      	str	r2, [r4, #0]
 800314e:	7019      	strb	r1, [r3, #0]
 8003150:	e7c5      	b.n	80030de <_puts_r+0x42>
 8003152:	4622      	mov	r2, r4
 8003154:	4628      	mov	r0, r5
 8003156:	f000 f847 	bl	80031e8 <__swbuf_r>
 800315a:	3001      	adds	r0, #1
 800315c:	d1bf      	bne.n	80030de <_puts_r+0x42>
 800315e:	e7df      	b.n	8003120 <_puts_r+0x84>
 8003160:	250a      	movs	r5, #10
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	6022      	str	r2, [r4, #0]
 8003168:	701d      	strb	r5, [r3, #0]
 800316a:	e7db      	b.n	8003124 <_puts_r+0x88>
 800316c:	080046ac 	.word	0x080046ac
 8003170:	080046cc 	.word	0x080046cc
 8003174:	0800468c 	.word	0x0800468c

08003178 <puts>:
 8003178:	4b02      	ldr	r3, [pc, #8]	; (8003184 <puts+0xc>)
 800317a:	4601      	mov	r1, r0
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	f7ff bf8d 	b.w	800309c <_puts_r>
 8003182:	bf00      	nop
 8003184:	2000000c 	.word	0x2000000c

08003188 <siprintf>:
 8003188:	b40e      	push	{r1, r2, r3}
 800318a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800318e:	b500      	push	{lr}
 8003190:	b09c      	sub	sp, #112	; 0x70
 8003192:	ab1d      	add	r3, sp, #116	; 0x74
 8003194:	9002      	str	r0, [sp, #8]
 8003196:	9006      	str	r0, [sp, #24]
 8003198:	9107      	str	r1, [sp, #28]
 800319a:	9104      	str	r1, [sp, #16]
 800319c:	4808      	ldr	r0, [pc, #32]	; (80031c0 <siprintf+0x38>)
 800319e:	4909      	ldr	r1, [pc, #36]	; (80031c4 <siprintf+0x3c>)
 80031a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80031a4:	9105      	str	r1, [sp, #20]
 80031a6:	6800      	ldr	r0, [r0, #0]
 80031a8:	a902      	add	r1, sp, #8
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	f000 fc30 	bl	8003a10 <_svfiprintf_r>
 80031b0:	2200      	movs	r2, #0
 80031b2:	9b02      	ldr	r3, [sp, #8]
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	b01c      	add	sp, #112	; 0x70
 80031b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80031bc:	b003      	add	sp, #12
 80031be:	4770      	bx	lr
 80031c0:	2000000c 	.word	0x2000000c
 80031c4:	ffff0208 	.word	0xffff0208

080031c8 <strcat>:
 80031c8:	4602      	mov	r2, r0
 80031ca:	b510      	push	{r4, lr}
 80031cc:	7814      	ldrb	r4, [r2, #0]
 80031ce:	4613      	mov	r3, r2
 80031d0:	3201      	adds	r2, #1
 80031d2:	2c00      	cmp	r4, #0
 80031d4:	d1fa      	bne.n	80031cc <strcat+0x4>
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031e0:	2a00      	cmp	r2, #0
 80031e2:	d1f9      	bne.n	80031d8 <strcat+0x10>
 80031e4:	bd10      	pop	{r4, pc}
	...

080031e8 <__swbuf_r>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	460e      	mov	r6, r1
 80031ec:	4614      	mov	r4, r2
 80031ee:	4605      	mov	r5, r0
 80031f0:	b118      	cbz	r0, 80031fa <__swbuf_r+0x12>
 80031f2:	6983      	ldr	r3, [r0, #24]
 80031f4:	b90b      	cbnz	r3, 80031fa <__swbuf_r+0x12>
 80031f6:	f000 f9cd 	bl	8003594 <__sinit>
 80031fa:	4b21      	ldr	r3, [pc, #132]	; (8003280 <__swbuf_r+0x98>)
 80031fc:	429c      	cmp	r4, r3
 80031fe:	d12b      	bne.n	8003258 <__swbuf_r+0x70>
 8003200:	686c      	ldr	r4, [r5, #4]
 8003202:	69a3      	ldr	r3, [r4, #24]
 8003204:	60a3      	str	r3, [r4, #8]
 8003206:	89a3      	ldrh	r3, [r4, #12]
 8003208:	071a      	lsls	r2, r3, #28
 800320a:	d52f      	bpl.n	800326c <__swbuf_r+0x84>
 800320c:	6923      	ldr	r3, [r4, #16]
 800320e:	b36b      	cbz	r3, 800326c <__swbuf_r+0x84>
 8003210:	6923      	ldr	r3, [r4, #16]
 8003212:	6820      	ldr	r0, [r4, #0]
 8003214:	b2f6      	uxtb	r6, r6
 8003216:	1ac0      	subs	r0, r0, r3
 8003218:	6963      	ldr	r3, [r4, #20]
 800321a:	4637      	mov	r7, r6
 800321c:	4283      	cmp	r3, r0
 800321e:	dc04      	bgt.n	800322a <__swbuf_r+0x42>
 8003220:	4621      	mov	r1, r4
 8003222:	4628      	mov	r0, r5
 8003224:	f000 f922 	bl	800346c <_fflush_r>
 8003228:	bb30      	cbnz	r0, 8003278 <__swbuf_r+0x90>
 800322a:	68a3      	ldr	r3, [r4, #8]
 800322c:	3001      	adds	r0, #1
 800322e:	3b01      	subs	r3, #1
 8003230:	60a3      	str	r3, [r4, #8]
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	6022      	str	r2, [r4, #0]
 8003238:	701e      	strb	r6, [r3, #0]
 800323a:	6963      	ldr	r3, [r4, #20]
 800323c:	4283      	cmp	r3, r0
 800323e:	d004      	beq.n	800324a <__swbuf_r+0x62>
 8003240:	89a3      	ldrh	r3, [r4, #12]
 8003242:	07db      	lsls	r3, r3, #31
 8003244:	d506      	bpl.n	8003254 <__swbuf_r+0x6c>
 8003246:	2e0a      	cmp	r6, #10
 8003248:	d104      	bne.n	8003254 <__swbuf_r+0x6c>
 800324a:	4621      	mov	r1, r4
 800324c:	4628      	mov	r0, r5
 800324e:	f000 f90d 	bl	800346c <_fflush_r>
 8003252:	b988      	cbnz	r0, 8003278 <__swbuf_r+0x90>
 8003254:	4638      	mov	r0, r7
 8003256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <__swbuf_r+0x9c>)
 800325a:	429c      	cmp	r4, r3
 800325c:	d101      	bne.n	8003262 <__swbuf_r+0x7a>
 800325e:	68ac      	ldr	r4, [r5, #8]
 8003260:	e7cf      	b.n	8003202 <__swbuf_r+0x1a>
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <__swbuf_r+0xa0>)
 8003264:	429c      	cmp	r4, r3
 8003266:	bf08      	it	eq
 8003268:	68ec      	ldreq	r4, [r5, #12]
 800326a:	e7ca      	b.n	8003202 <__swbuf_r+0x1a>
 800326c:	4621      	mov	r1, r4
 800326e:	4628      	mov	r0, r5
 8003270:	f000 f80c 	bl	800328c <__swsetup_r>
 8003274:	2800      	cmp	r0, #0
 8003276:	d0cb      	beq.n	8003210 <__swbuf_r+0x28>
 8003278:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800327c:	e7ea      	b.n	8003254 <__swbuf_r+0x6c>
 800327e:	bf00      	nop
 8003280:	080046ac 	.word	0x080046ac
 8003284:	080046cc 	.word	0x080046cc
 8003288:	0800468c 	.word	0x0800468c

0800328c <__swsetup_r>:
 800328c:	4b32      	ldr	r3, [pc, #200]	; (8003358 <__swsetup_r+0xcc>)
 800328e:	b570      	push	{r4, r5, r6, lr}
 8003290:	681d      	ldr	r5, [r3, #0]
 8003292:	4606      	mov	r6, r0
 8003294:	460c      	mov	r4, r1
 8003296:	b125      	cbz	r5, 80032a2 <__swsetup_r+0x16>
 8003298:	69ab      	ldr	r3, [r5, #24]
 800329a:	b913      	cbnz	r3, 80032a2 <__swsetup_r+0x16>
 800329c:	4628      	mov	r0, r5
 800329e:	f000 f979 	bl	8003594 <__sinit>
 80032a2:	4b2e      	ldr	r3, [pc, #184]	; (800335c <__swsetup_r+0xd0>)
 80032a4:	429c      	cmp	r4, r3
 80032a6:	d10f      	bne.n	80032c8 <__swsetup_r+0x3c>
 80032a8:	686c      	ldr	r4, [r5, #4]
 80032aa:	89a3      	ldrh	r3, [r4, #12]
 80032ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032b0:	0719      	lsls	r1, r3, #28
 80032b2:	d42c      	bmi.n	800330e <__swsetup_r+0x82>
 80032b4:	06dd      	lsls	r5, r3, #27
 80032b6:	d411      	bmi.n	80032dc <__swsetup_r+0x50>
 80032b8:	2309      	movs	r3, #9
 80032ba:	6033      	str	r3, [r6, #0]
 80032bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032c4:	81a3      	strh	r3, [r4, #12]
 80032c6:	e03e      	b.n	8003346 <__swsetup_r+0xba>
 80032c8:	4b25      	ldr	r3, [pc, #148]	; (8003360 <__swsetup_r+0xd4>)
 80032ca:	429c      	cmp	r4, r3
 80032cc:	d101      	bne.n	80032d2 <__swsetup_r+0x46>
 80032ce:	68ac      	ldr	r4, [r5, #8]
 80032d0:	e7eb      	b.n	80032aa <__swsetup_r+0x1e>
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <__swsetup_r+0xd8>)
 80032d4:	429c      	cmp	r4, r3
 80032d6:	bf08      	it	eq
 80032d8:	68ec      	ldreq	r4, [r5, #12]
 80032da:	e7e6      	b.n	80032aa <__swsetup_r+0x1e>
 80032dc:	0758      	lsls	r0, r3, #29
 80032de:	d512      	bpl.n	8003306 <__swsetup_r+0x7a>
 80032e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032e2:	b141      	cbz	r1, 80032f6 <__swsetup_r+0x6a>
 80032e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032e8:	4299      	cmp	r1, r3
 80032ea:	d002      	beq.n	80032f2 <__swsetup_r+0x66>
 80032ec:	4630      	mov	r0, r6
 80032ee:	f000 fa57 	bl	80037a0 <_free_r>
 80032f2:	2300      	movs	r3, #0
 80032f4:	6363      	str	r3, [r4, #52]	; 0x34
 80032f6:	89a3      	ldrh	r3, [r4, #12]
 80032f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032fc:	81a3      	strh	r3, [r4, #12]
 80032fe:	2300      	movs	r3, #0
 8003300:	6063      	str	r3, [r4, #4]
 8003302:	6923      	ldr	r3, [r4, #16]
 8003304:	6023      	str	r3, [r4, #0]
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	f043 0308 	orr.w	r3, r3, #8
 800330c:	81a3      	strh	r3, [r4, #12]
 800330e:	6923      	ldr	r3, [r4, #16]
 8003310:	b94b      	cbnz	r3, 8003326 <__swsetup_r+0x9a>
 8003312:	89a3      	ldrh	r3, [r4, #12]
 8003314:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800331c:	d003      	beq.n	8003326 <__swsetup_r+0x9a>
 800331e:	4621      	mov	r1, r4
 8003320:	4630      	mov	r0, r6
 8003322:	f000 f9fd 	bl	8003720 <__smakebuf_r>
 8003326:	89a0      	ldrh	r0, [r4, #12]
 8003328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800332c:	f010 0301 	ands.w	r3, r0, #1
 8003330:	d00a      	beq.n	8003348 <__swsetup_r+0xbc>
 8003332:	2300      	movs	r3, #0
 8003334:	60a3      	str	r3, [r4, #8]
 8003336:	6963      	ldr	r3, [r4, #20]
 8003338:	425b      	negs	r3, r3
 800333a:	61a3      	str	r3, [r4, #24]
 800333c:	6923      	ldr	r3, [r4, #16]
 800333e:	b943      	cbnz	r3, 8003352 <__swsetup_r+0xc6>
 8003340:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003344:	d1ba      	bne.n	80032bc <__swsetup_r+0x30>
 8003346:	bd70      	pop	{r4, r5, r6, pc}
 8003348:	0781      	lsls	r1, r0, #30
 800334a:	bf58      	it	pl
 800334c:	6963      	ldrpl	r3, [r4, #20]
 800334e:	60a3      	str	r3, [r4, #8]
 8003350:	e7f4      	b.n	800333c <__swsetup_r+0xb0>
 8003352:	2000      	movs	r0, #0
 8003354:	e7f7      	b.n	8003346 <__swsetup_r+0xba>
 8003356:	bf00      	nop
 8003358:	2000000c 	.word	0x2000000c
 800335c:	080046ac 	.word	0x080046ac
 8003360:	080046cc 	.word	0x080046cc
 8003364:	0800468c 	.word	0x0800468c

08003368 <__sflush_r>:
 8003368:	898a      	ldrh	r2, [r1, #12]
 800336a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336c:	4605      	mov	r5, r0
 800336e:	0710      	lsls	r0, r2, #28
 8003370:	460c      	mov	r4, r1
 8003372:	d457      	bmi.n	8003424 <__sflush_r+0xbc>
 8003374:	684b      	ldr	r3, [r1, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	dc04      	bgt.n	8003384 <__sflush_r+0x1c>
 800337a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	dc01      	bgt.n	8003384 <__sflush_r+0x1c>
 8003380:	2000      	movs	r0, #0
 8003382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003386:	2e00      	cmp	r6, #0
 8003388:	d0fa      	beq.n	8003380 <__sflush_r+0x18>
 800338a:	2300      	movs	r3, #0
 800338c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003390:	682f      	ldr	r7, [r5, #0]
 8003392:	602b      	str	r3, [r5, #0]
 8003394:	d032      	beq.n	80033fc <__sflush_r+0x94>
 8003396:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003398:	89a3      	ldrh	r3, [r4, #12]
 800339a:	075a      	lsls	r2, r3, #29
 800339c:	d505      	bpl.n	80033aa <__sflush_r+0x42>
 800339e:	6863      	ldr	r3, [r4, #4]
 80033a0:	1ac0      	subs	r0, r0, r3
 80033a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033a4:	b10b      	cbz	r3, 80033aa <__sflush_r+0x42>
 80033a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033a8:	1ac0      	subs	r0, r0, r3
 80033aa:	2300      	movs	r3, #0
 80033ac:	4602      	mov	r2, r0
 80033ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033b0:	4628      	mov	r0, r5
 80033b2:	6a21      	ldr	r1, [r4, #32]
 80033b4:	47b0      	blx	r6
 80033b6:	1c43      	adds	r3, r0, #1
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	d106      	bne.n	80033ca <__sflush_r+0x62>
 80033bc:	6829      	ldr	r1, [r5, #0]
 80033be:	291d      	cmp	r1, #29
 80033c0:	d82c      	bhi.n	800341c <__sflush_r+0xb4>
 80033c2:	4a29      	ldr	r2, [pc, #164]	; (8003468 <__sflush_r+0x100>)
 80033c4:	40ca      	lsrs	r2, r1
 80033c6:	07d6      	lsls	r6, r2, #31
 80033c8:	d528      	bpl.n	800341c <__sflush_r+0xb4>
 80033ca:	2200      	movs	r2, #0
 80033cc:	6062      	str	r2, [r4, #4]
 80033ce:	6922      	ldr	r2, [r4, #16]
 80033d0:	04d9      	lsls	r1, r3, #19
 80033d2:	6022      	str	r2, [r4, #0]
 80033d4:	d504      	bpl.n	80033e0 <__sflush_r+0x78>
 80033d6:	1c42      	adds	r2, r0, #1
 80033d8:	d101      	bne.n	80033de <__sflush_r+0x76>
 80033da:	682b      	ldr	r3, [r5, #0]
 80033dc:	b903      	cbnz	r3, 80033e0 <__sflush_r+0x78>
 80033de:	6560      	str	r0, [r4, #84]	; 0x54
 80033e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033e2:	602f      	str	r7, [r5, #0]
 80033e4:	2900      	cmp	r1, #0
 80033e6:	d0cb      	beq.n	8003380 <__sflush_r+0x18>
 80033e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033ec:	4299      	cmp	r1, r3
 80033ee:	d002      	beq.n	80033f6 <__sflush_r+0x8e>
 80033f0:	4628      	mov	r0, r5
 80033f2:	f000 f9d5 	bl	80037a0 <_free_r>
 80033f6:	2000      	movs	r0, #0
 80033f8:	6360      	str	r0, [r4, #52]	; 0x34
 80033fa:	e7c2      	b.n	8003382 <__sflush_r+0x1a>
 80033fc:	6a21      	ldr	r1, [r4, #32]
 80033fe:	2301      	movs	r3, #1
 8003400:	4628      	mov	r0, r5
 8003402:	47b0      	blx	r6
 8003404:	1c41      	adds	r1, r0, #1
 8003406:	d1c7      	bne.n	8003398 <__sflush_r+0x30>
 8003408:	682b      	ldr	r3, [r5, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0c4      	beq.n	8003398 <__sflush_r+0x30>
 800340e:	2b1d      	cmp	r3, #29
 8003410:	d001      	beq.n	8003416 <__sflush_r+0xae>
 8003412:	2b16      	cmp	r3, #22
 8003414:	d101      	bne.n	800341a <__sflush_r+0xb2>
 8003416:	602f      	str	r7, [r5, #0]
 8003418:	e7b2      	b.n	8003380 <__sflush_r+0x18>
 800341a:	89a3      	ldrh	r3, [r4, #12]
 800341c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003420:	81a3      	strh	r3, [r4, #12]
 8003422:	e7ae      	b.n	8003382 <__sflush_r+0x1a>
 8003424:	690f      	ldr	r7, [r1, #16]
 8003426:	2f00      	cmp	r7, #0
 8003428:	d0aa      	beq.n	8003380 <__sflush_r+0x18>
 800342a:	0793      	lsls	r3, r2, #30
 800342c:	bf18      	it	ne
 800342e:	2300      	movne	r3, #0
 8003430:	680e      	ldr	r6, [r1, #0]
 8003432:	bf08      	it	eq
 8003434:	694b      	ldreq	r3, [r1, #20]
 8003436:	1bf6      	subs	r6, r6, r7
 8003438:	600f      	str	r7, [r1, #0]
 800343a:	608b      	str	r3, [r1, #8]
 800343c:	2e00      	cmp	r6, #0
 800343e:	dd9f      	ble.n	8003380 <__sflush_r+0x18>
 8003440:	4633      	mov	r3, r6
 8003442:	463a      	mov	r2, r7
 8003444:	4628      	mov	r0, r5
 8003446:	6a21      	ldr	r1, [r4, #32]
 8003448:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800344c:	47e0      	blx	ip
 800344e:	2800      	cmp	r0, #0
 8003450:	dc06      	bgt.n	8003460 <__sflush_r+0xf8>
 8003452:	89a3      	ldrh	r3, [r4, #12]
 8003454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800345c:	81a3      	strh	r3, [r4, #12]
 800345e:	e790      	b.n	8003382 <__sflush_r+0x1a>
 8003460:	4407      	add	r7, r0
 8003462:	1a36      	subs	r6, r6, r0
 8003464:	e7ea      	b.n	800343c <__sflush_r+0xd4>
 8003466:	bf00      	nop
 8003468:	20400001 	.word	0x20400001

0800346c <_fflush_r>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	690b      	ldr	r3, [r1, #16]
 8003470:	4605      	mov	r5, r0
 8003472:	460c      	mov	r4, r1
 8003474:	b913      	cbnz	r3, 800347c <_fflush_r+0x10>
 8003476:	2500      	movs	r5, #0
 8003478:	4628      	mov	r0, r5
 800347a:	bd38      	pop	{r3, r4, r5, pc}
 800347c:	b118      	cbz	r0, 8003486 <_fflush_r+0x1a>
 800347e:	6983      	ldr	r3, [r0, #24]
 8003480:	b90b      	cbnz	r3, 8003486 <_fflush_r+0x1a>
 8003482:	f000 f887 	bl	8003594 <__sinit>
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <_fflush_r+0x6c>)
 8003488:	429c      	cmp	r4, r3
 800348a:	d11b      	bne.n	80034c4 <_fflush_r+0x58>
 800348c:	686c      	ldr	r4, [r5, #4]
 800348e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0ef      	beq.n	8003476 <_fflush_r+0xa>
 8003496:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003498:	07d0      	lsls	r0, r2, #31
 800349a:	d404      	bmi.n	80034a6 <_fflush_r+0x3a>
 800349c:	0599      	lsls	r1, r3, #22
 800349e:	d402      	bmi.n	80034a6 <_fflush_r+0x3a>
 80034a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034a2:	f000 f915 	bl	80036d0 <__retarget_lock_acquire_recursive>
 80034a6:	4628      	mov	r0, r5
 80034a8:	4621      	mov	r1, r4
 80034aa:	f7ff ff5d 	bl	8003368 <__sflush_r>
 80034ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034b0:	4605      	mov	r5, r0
 80034b2:	07da      	lsls	r2, r3, #31
 80034b4:	d4e0      	bmi.n	8003478 <_fflush_r+0xc>
 80034b6:	89a3      	ldrh	r3, [r4, #12]
 80034b8:	059b      	lsls	r3, r3, #22
 80034ba:	d4dd      	bmi.n	8003478 <_fflush_r+0xc>
 80034bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034be:	f000 f908 	bl	80036d2 <__retarget_lock_release_recursive>
 80034c2:	e7d9      	b.n	8003478 <_fflush_r+0xc>
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <_fflush_r+0x70>)
 80034c6:	429c      	cmp	r4, r3
 80034c8:	d101      	bne.n	80034ce <_fflush_r+0x62>
 80034ca:	68ac      	ldr	r4, [r5, #8]
 80034cc:	e7df      	b.n	800348e <_fflush_r+0x22>
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <_fflush_r+0x74>)
 80034d0:	429c      	cmp	r4, r3
 80034d2:	bf08      	it	eq
 80034d4:	68ec      	ldreq	r4, [r5, #12]
 80034d6:	e7da      	b.n	800348e <_fflush_r+0x22>
 80034d8:	080046ac 	.word	0x080046ac
 80034dc:	080046cc 	.word	0x080046cc
 80034e0:	0800468c 	.word	0x0800468c

080034e4 <std>:
 80034e4:	2300      	movs	r3, #0
 80034e6:	b510      	push	{r4, lr}
 80034e8:	4604      	mov	r4, r0
 80034ea:	e9c0 3300 	strd	r3, r3, [r0]
 80034ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034f2:	6083      	str	r3, [r0, #8]
 80034f4:	8181      	strh	r1, [r0, #12]
 80034f6:	6643      	str	r3, [r0, #100]	; 0x64
 80034f8:	81c2      	strh	r2, [r0, #14]
 80034fa:	6183      	str	r3, [r0, #24]
 80034fc:	4619      	mov	r1, r3
 80034fe:	2208      	movs	r2, #8
 8003500:	305c      	adds	r0, #92	; 0x5c
 8003502:	f7ff fdab 	bl	800305c <memset>
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <std+0x38>)
 8003508:	6224      	str	r4, [r4, #32]
 800350a:	6263      	str	r3, [r4, #36]	; 0x24
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <std+0x3c>)
 800350e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <std+0x40>)
 8003512:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <std+0x44>)
 8003516:	6323      	str	r3, [r4, #48]	; 0x30
 8003518:	bd10      	pop	{r4, pc}
 800351a:	bf00      	nop
 800351c:	0800420d 	.word	0x0800420d
 8003520:	0800422f 	.word	0x0800422f
 8003524:	08004267 	.word	0x08004267
 8003528:	0800428b 	.word	0x0800428b

0800352c <_cleanup_r>:
 800352c:	4901      	ldr	r1, [pc, #4]	; (8003534 <_cleanup_r+0x8>)
 800352e:	f000 b8af 	b.w	8003690 <_fwalk_reent>
 8003532:	bf00      	nop
 8003534:	0800346d 	.word	0x0800346d

08003538 <__sfmoreglue>:
 8003538:	2268      	movs	r2, #104	; 0x68
 800353a:	b570      	push	{r4, r5, r6, lr}
 800353c:	1e4d      	subs	r5, r1, #1
 800353e:	4355      	muls	r5, r2
 8003540:	460e      	mov	r6, r1
 8003542:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003546:	f000 f993 	bl	8003870 <_malloc_r>
 800354a:	4604      	mov	r4, r0
 800354c:	b140      	cbz	r0, 8003560 <__sfmoreglue+0x28>
 800354e:	2100      	movs	r1, #0
 8003550:	e9c0 1600 	strd	r1, r6, [r0]
 8003554:	300c      	adds	r0, #12
 8003556:	60a0      	str	r0, [r4, #8]
 8003558:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800355c:	f7ff fd7e 	bl	800305c <memset>
 8003560:	4620      	mov	r0, r4
 8003562:	bd70      	pop	{r4, r5, r6, pc}

08003564 <__sfp_lock_acquire>:
 8003564:	4801      	ldr	r0, [pc, #4]	; (800356c <__sfp_lock_acquire+0x8>)
 8003566:	f000 b8b3 	b.w	80036d0 <__retarget_lock_acquire_recursive>
 800356a:	bf00      	nop
 800356c:	200001b1 	.word	0x200001b1

08003570 <__sfp_lock_release>:
 8003570:	4801      	ldr	r0, [pc, #4]	; (8003578 <__sfp_lock_release+0x8>)
 8003572:	f000 b8ae 	b.w	80036d2 <__retarget_lock_release_recursive>
 8003576:	bf00      	nop
 8003578:	200001b1 	.word	0x200001b1

0800357c <__sinit_lock_acquire>:
 800357c:	4801      	ldr	r0, [pc, #4]	; (8003584 <__sinit_lock_acquire+0x8>)
 800357e:	f000 b8a7 	b.w	80036d0 <__retarget_lock_acquire_recursive>
 8003582:	bf00      	nop
 8003584:	200001b2 	.word	0x200001b2

08003588 <__sinit_lock_release>:
 8003588:	4801      	ldr	r0, [pc, #4]	; (8003590 <__sinit_lock_release+0x8>)
 800358a:	f000 b8a2 	b.w	80036d2 <__retarget_lock_release_recursive>
 800358e:	bf00      	nop
 8003590:	200001b2 	.word	0x200001b2

08003594 <__sinit>:
 8003594:	b510      	push	{r4, lr}
 8003596:	4604      	mov	r4, r0
 8003598:	f7ff fff0 	bl	800357c <__sinit_lock_acquire>
 800359c:	69a3      	ldr	r3, [r4, #24]
 800359e:	b11b      	cbz	r3, 80035a8 <__sinit+0x14>
 80035a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035a4:	f7ff bff0 	b.w	8003588 <__sinit_lock_release>
 80035a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80035ac:	6523      	str	r3, [r4, #80]	; 0x50
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <__sinit+0x68>)
 80035b0:	4a13      	ldr	r2, [pc, #76]	; (8003600 <__sinit+0x6c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80035b6:	42a3      	cmp	r3, r4
 80035b8:	bf08      	it	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	4620      	mov	r0, r4
 80035be:	bf08      	it	eq
 80035c0:	61a3      	streq	r3, [r4, #24]
 80035c2:	f000 f81f 	bl	8003604 <__sfp>
 80035c6:	6060      	str	r0, [r4, #4]
 80035c8:	4620      	mov	r0, r4
 80035ca:	f000 f81b 	bl	8003604 <__sfp>
 80035ce:	60a0      	str	r0, [r4, #8]
 80035d0:	4620      	mov	r0, r4
 80035d2:	f000 f817 	bl	8003604 <__sfp>
 80035d6:	2200      	movs	r2, #0
 80035d8:	2104      	movs	r1, #4
 80035da:	60e0      	str	r0, [r4, #12]
 80035dc:	6860      	ldr	r0, [r4, #4]
 80035de:	f7ff ff81 	bl	80034e4 <std>
 80035e2:	2201      	movs	r2, #1
 80035e4:	2109      	movs	r1, #9
 80035e6:	68a0      	ldr	r0, [r4, #8]
 80035e8:	f7ff ff7c 	bl	80034e4 <std>
 80035ec:	2202      	movs	r2, #2
 80035ee:	2112      	movs	r1, #18
 80035f0:	68e0      	ldr	r0, [r4, #12]
 80035f2:	f7ff ff77 	bl	80034e4 <std>
 80035f6:	2301      	movs	r3, #1
 80035f8:	61a3      	str	r3, [r4, #24]
 80035fa:	e7d1      	b.n	80035a0 <__sinit+0xc>
 80035fc:	08004688 	.word	0x08004688
 8003600:	0800352d 	.word	0x0800352d

08003604 <__sfp>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	4607      	mov	r7, r0
 8003608:	f7ff ffac 	bl	8003564 <__sfp_lock_acquire>
 800360c:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <__sfp+0x84>)
 800360e:	681e      	ldr	r6, [r3, #0]
 8003610:	69b3      	ldr	r3, [r6, #24]
 8003612:	b913      	cbnz	r3, 800361a <__sfp+0x16>
 8003614:	4630      	mov	r0, r6
 8003616:	f7ff ffbd 	bl	8003594 <__sinit>
 800361a:	3648      	adds	r6, #72	; 0x48
 800361c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003620:	3b01      	subs	r3, #1
 8003622:	d503      	bpl.n	800362c <__sfp+0x28>
 8003624:	6833      	ldr	r3, [r6, #0]
 8003626:	b30b      	cbz	r3, 800366c <__sfp+0x68>
 8003628:	6836      	ldr	r6, [r6, #0]
 800362a:	e7f7      	b.n	800361c <__sfp+0x18>
 800362c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003630:	b9d5      	cbnz	r5, 8003668 <__sfp+0x64>
 8003632:	4b16      	ldr	r3, [pc, #88]	; (800368c <__sfp+0x88>)
 8003634:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003638:	60e3      	str	r3, [r4, #12]
 800363a:	6665      	str	r5, [r4, #100]	; 0x64
 800363c:	f000 f847 	bl	80036ce <__retarget_lock_init_recursive>
 8003640:	f7ff ff96 	bl	8003570 <__sfp_lock_release>
 8003644:	2208      	movs	r2, #8
 8003646:	4629      	mov	r1, r5
 8003648:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800364c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003650:	6025      	str	r5, [r4, #0]
 8003652:	61a5      	str	r5, [r4, #24]
 8003654:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003658:	f7ff fd00 	bl	800305c <memset>
 800365c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003660:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003664:	4620      	mov	r0, r4
 8003666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003668:	3468      	adds	r4, #104	; 0x68
 800366a:	e7d9      	b.n	8003620 <__sfp+0x1c>
 800366c:	2104      	movs	r1, #4
 800366e:	4638      	mov	r0, r7
 8003670:	f7ff ff62 	bl	8003538 <__sfmoreglue>
 8003674:	4604      	mov	r4, r0
 8003676:	6030      	str	r0, [r6, #0]
 8003678:	2800      	cmp	r0, #0
 800367a:	d1d5      	bne.n	8003628 <__sfp+0x24>
 800367c:	f7ff ff78 	bl	8003570 <__sfp_lock_release>
 8003680:	230c      	movs	r3, #12
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	e7ee      	b.n	8003664 <__sfp+0x60>
 8003686:	bf00      	nop
 8003688:	08004688 	.word	0x08004688
 800368c:	ffff0001 	.word	0xffff0001

08003690 <_fwalk_reent>:
 8003690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003694:	4606      	mov	r6, r0
 8003696:	4688      	mov	r8, r1
 8003698:	2700      	movs	r7, #0
 800369a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800369e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036a2:	f1b9 0901 	subs.w	r9, r9, #1
 80036a6:	d505      	bpl.n	80036b4 <_fwalk_reent+0x24>
 80036a8:	6824      	ldr	r4, [r4, #0]
 80036aa:	2c00      	cmp	r4, #0
 80036ac:	d1f7      	bne.n	800369e <_fwalk_reent+0xe>
 80036ae:	4638      	mov	r0, r7
 80036b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036b4:	89ab      	ldrh	r3, [r5, #12]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d907      	bls.n	80036ca <_fwalk_reent+0x3a>
 80036ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036be:	3301      	adds	r3, #1
 80036c0:	d003      	beq.n	80036ca <_fwalk_reent+0x3a>
 80036c2:	4629      	mov	r1, r5
 80036c4:	4630      	mov	r0, r6
 80036c6:	47c0      	blx	r8
 80036c8:	4307      	orrs	r7, r0
 80036ca:	3568      	adds	r5, #104	; 0x68
 80036cc:	e7e9      	b.n	80036a2 <_fwalk_reent+0x12>

080036ce <__retarget_lock_init_recursive>:
 80036ce:	4770      	bx	lr

080036d0 <__retarget_lock_acquire_recursive>:
 80036d0:	4770      	bx	lr

080036d2 <__retarget_lock_release_recursive>:
 80036d2:	4770      	bx	lr

080036d4 <__swhatbuf_r>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	460e      	mov	r6, r1
 80036d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036dc:	4614      	mov	r4, r2
 80036de:	2900      	cmp	r1, #0
 80036e0:	461d      	mov	r5, r3
 80036e2:	b096      	sub	sp, #88	; 0x58
 80036e4:	da08      	bge.n	80036f8 <__swhatbuf_r+0x24>
 80036e6:	2200      	movs	r2, #0
 80036e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80036ec:	602a      	str	r2, [r5, #0]
 80036ee:	061a      	lsls	r2, r3, #24
 80036f0:	d410      	bmi.n	8003714 <__swhatbuf_r+0x40>
 80036f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036f6:	e00e      	b.n	8003716 <__swhatbuf_r+0x42>
 80036f8:	466a      	mov	r2, sp
 80036fa:	f000 fded 	bl	80042d8 <_fstat_r>
 80036fe:	2800      	cmp	r0, #0
 8003700:	dbf1      	blt.n	80036e6 <__swhatbuf_r+0x12>
 8003702:	9a01      	ldr	r2, [sp, #4]
 8003704:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003708:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800370c:	425a      	negs	r2, r3
 800370e:	415a      	adcs	r2, r3
 8003710:	602a      	str	r2, [r5, #0]
 8003712:	e7ee      	b.n	80036f2 <__swhatbuf_r+0x1e>
 8003714:	2340      	movs	r3, #64	; 0x40
 8003716:	2000      	movs	r0, #0
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	b016      	add	sp, #88	; 0x58
 800371c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003720 <__smakebuf_r>:
 8003720:	898b      	ldrh	r3, [r1, #12]
 8003722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003724:	079d      	lsls	r5, r3, #30
 8003726:	4606      	mov	r6, r0
 8003728:	460c      	mov	r4, r1
 800372a:	d507      	bpl.n	800373c <__smakebuf_r+0x1c>
 800372c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003730:	6023      	str	r3, [r4, #0]
 8003732:	6123      	str	r3, [r4, #16]
 8003734:	2301      	movs	r3, #1
 8003736:	6163      	str	r3, [r4, #20]
 8003738:	b002      	add	sp, #8
 800373a:	bd70      	pop	{r4, r5, r6, pc}
 800373c:	466a      	mov	r2, sp
 800373e:	ab01      	add	r3, sp, #4
 8003740:	f7ff ffc8 	bl	80036d4 <__swhatbuf_r>
 8003744:	9900      	ldr	r1, [sp, #0]
 8003746:	4605      	mov	r5, r0
 8003748:	4630      	mov	r0, r6
 800374a:	f000 f891 	bl	8003870 <_malloc_r>
 800374e:	b948      	cbnz	r0, 8003764 <__smakebuf_r+0x44>
 8003750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003754:	059a      	lsls	r2, r3, #22
 8003756:	d4ef      	bmi.n	8003738 <__smakebuf_r+0x18>
 8003758:	f023 0303 	bic.w	r3, r3, #3
 800375c:	f043 0302 	orr.w	r3, r3, #2
 8003760:	81a3      	strh	r3, [r4, #12]
 8003762:	e7e3      	b.n	800372c <__smakebuf_r+0xc>
 8003764:	4b0d      	ldr	r3, [pc, #52]	; (800379c <__smakebuf_r+0x7c>)
 8003766:	62b3      	str	r3, [r6, #40]	; 0x28
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	6020      	str	r0, [r4, #0]
 800376c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003770:	81a3      	strh	r3, [r4, #12]
 8003772:	9b00      	ldr	r3, [sp, #0]
 8003774:	6120      	str	r0, [r4, #16]
 8003776:	6163      	str	r3, [r4, #20]
 8003778:	9b01      	ldr	r3, [sp, #4]
 800377a:	b15b      	cbz	r3, 8003794 <__smakebuf_r+0x74>
 800377c:	4630      	mov	r0, r6
 800377e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003782:	f000 fdbb 	bl	80042fc <_isatty_r>
 8003786:	b128      	cbz	r0, 8003794 <__smakebuf_r+0x74>
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	f023 0303 	bic.w	r3, r3, #3
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	81a3      	strh	r3, [r4, #12]
 8003794:	89a0      	ldrh	r0, [r4, #12]
 8003796:	4305      	orrs	r5, r0
 8003798:	81a5      	strh	r5, [r4, #12]
 800379a:	e7cd      	b.n	8003738 <__smakebuf_r+0x18>
 800379c:	0800352d 	.word	0x0800352d

080037a0 <_free_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	4605      	mov	r5, r0
 80037a4:	2900      	cmp	r1, #0
 80037a6:	d040      	beq.n	800382a <_free_r+0x8a>
 80037a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037ac:	1f0c      	subs	r4, r1, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	bfb8      	it	lt
 80037b2:	18e4      	addlt	r4, r4, r3
 80037b4:	f000 fdfa 	bl	80043ac <__malloc_lock>
 80037b8:	4a1c      	ldr	r2, [pc, #112]	; (800382c <_free_r+0x8c>)
 80037ba:	6813      	ldr	r3, [r2, #0]
 80037bc:	b933      	cbnz	r3, 80037cc <_free_r+0x2c>
 80037be:	6063      	str	r3, [r4, #4]
 80037c0:	6014      	str	r4, [r2, #0]
 80037c2:	4628      	mov	r0, r5
 80037c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037c8:	f000 bdf6 	b.w	80043b8 <__malloc_unlock>
 80037cc:	42a3      	cmp	r3, r4
 80037ce:	d908      	bls.n	80037e2 <_free_r+0x42>
 80037d0:	6820      	ldr	r0, [r4, #0]
 80037d2:	1821      	adds	r1, r4, r0
 80037d4:	428b      	cmp	r3, r1
 80037d6:	bf01      	itttt	eq
 80037d8:	6819      	ldreq	r1, [r3, #0]
 80037da:	685b      	ldreq	r3, [r3, #4]
 80037dc:	1809      	addeq	r1, r1, r0
 80037de:	6021      	streq	r1, [r4, #0]
 80037e0:	e7ed      	b.n	80037be <_free_r+0x1e>
 80037e2:	461a      	mov	r2, r3
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	b10b      	cbz	r3, 80037ec <_free_r+0x4c>
 80037e8:	42a3      	cmp	r3, r4
 80037ea:	d9fa      	bls.n	80037e2 <_free_r+0x42>
 80037ec:	6811      	ldr	r1, [r2, #0]
 80037ee:	1850      	adds	r0, r2, r1
 80037f0:	42a0      	cmp	r0, r4
 80037f2:	d10b      	bne.n	800380c <_free_r+0x6c>
 80037f4:	6820      	ldr	r0, [r4, #0]
 80037f6:	4401      	add	r1, r0
 80037f8:	1850      	adds	r0, r2, r1
 80037fa:	4283      	cmp	r3, r0
 80037fc:	6011      	str	r1, [r2, #0]
 80037fe:	d1e0      	bne.n	80037c2 <_free_r+0x22>
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4401      	add	r1, r0
 8003806:	6011      	str	r1, [r2, #0]
 8003808:	6053      	str	r3, [r2, #4]
 800380a:	e7da      	b.n	80037c2 <_free_r+0x22>
 800380c:	d902      	bls.n	8003814 <_free_r+0x74>
 800380e:	230c      	movs	r3, #12
 8003810:	602b      	str	r3, [r5, #0]
 8003812:	e7d6      	b.n	80037c2 <_free_r+0x22>
 8003814:	6820      	ldr	r0, [r4, #0]
 8003816:	1821      	adds	r1, r4, r0
 8003818:	428b      	cmp	r3, r1
 800381a:	bf01      	itttt	eq
 800381c:	6819      	ldreq	r1, [r3, #0]
 800381e:	685b      	ldreq	r3, [r3, #4]
 8003820:	1809      	addeq	r1, r1, r0
 8003822:	6021      	streq	r1, [r4, #0]
 8003824:	6063      	str	r3, [r4, #4]
 8003826:	6054      	str	r4, [r2, #4]
 8003828:	e7cb      	b.n	80037c2 <_free_r+0x22>
 800382a:	bd38      	pop	{r3, r4, r5, pc}
 800382c:	200001b4 	.word	0x200001b4

08003830 <sbrk_aligned>:
 8003830:	b570      	push	{r4, r5, r6, lr}
 8003832:	4e0e      	ldr	r6, [pc, #56]	; (800386c <sbrk_aligned+0x3c>)
 8003834:	460c      	mov	r4, r1
 8003836:	6831      	ldr	r1, [r6, #0]
 8003838:	4605      	mov	r5, r0
 800383a:	b911      	cbnz	r1, 8003842 <sbrk_aligned+0x12>
 800383c:	f000 fcd6 	bl	80041ec <_sbrk_r>
 8003840:	6030      	str	r0, [r6, #0]
 8003842:	4621      	mov	r1, r4
 8003844:	4628      	mov	r0, r5
 8003846:	f000 fcd1 	bl	80041ec <_sbrk_r>
 800384a:	1c43      	adds	r3, r0, #1
 800384c:	d00a      	beq.n	8003864 <sbrk_aligned+0x34>
 800384e:	1cc4      	adds	r4, r0, #3
 8003850:	f024 0403 	bic.w	r4, r4, #3
 8003854:	42a0      	cmp	r0, r4
 8003856:	d007      	beq.n	8003868 <sbrk_aligned+0x38>
 8003858:	1a21      	subs	r1, r4, r0
 800385a:	4628      	mov	r0, r5
 800385c:	f000 fcc6 	bl	80041ec <_sbrk_r>
 8003860:	3001      	adds	r0, #1
 8003862:	d101      	bne.n	8003868 <sbrk_aligned+0x38>
 8003864:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003868:	4620      	mov	r0, r4
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	200001b8 	.word	0x200001b8

08003870 <_malloc_r>:
 8003870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003874:	1ccd      	adds	r5, r1, #3
 8003876:	f025 0503 	bic.w	r5, r5, #3
 800387a:	3508      	adds	r5, #8
 800387c:	2d0c      	cmp	r5, #12
 800387e:	bf38      	it	cc
 8003880:	250c      	movcc	r5, #12
 8003882:	2d00      	cmp	r5, #0
 8003884:	4607      	mov	r7, r0
 8003886:	db01      	blt.n	800388c <_malloc_r+0x1c>
 8003888:	42a9      	cmp	r1, r5
 800388a:	d905      	bls.n	8003898 <_malloc_r+0x28>
 800388c:	230c      	movs	r3, #12
 800388e:	2600      	movs	r6, #0
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	4630      	mov	r0, r6
 8003894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003898:	4e2e      	ldr	r6, [pc, #184]	; (8003954 <_malloc_r+0xe4>)
 800389a:	f000 fd87 	bl	80043ac <__malloc_lock>
 800389e:	6833      	ldr	r3, [r6, #0]
 80038a0:	461c      	mov	r4, r3
 80038a2:	bb34      	cbnz	r4, 80038f2 <_malloc_r+0x82>
 80038a4:	4629      	mov	r1, r5
 80038a6:	4638      	mov	r0, r7
 80038a8:	f7ff ffc2 	bl	8003830 <sbrk_aligned>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	4604      	mov	r4, r0
 80038b0:	d14d      	bne.n	800394e <_malloc_r+0xde>
 80038b2:	6834      	ldr	r4, [r6, #0]
 80038b4:	4626      	mov	r6, r4
 80038b6:	2e00      	cmp	r6, #0
 80038b8:	d140      	bne.n	800393c <_malloc_r+0xcc>
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	4631      	mov	r1, r6
 80038be:	4638      	mov	r0, r7
 80038c0:	eb04 0803 	add.w	r8, r4, r3
 80038c4:	f000 fc92 	bl	80041ec <_sbrk_r>
 80038c8:	4580      	cmp	r8, r0
 80038ca:	d13a      	bne.n	8003942 <_malloc_r+0xd2>
 80038cc:	6821      	ldr	r1, [r4, #0]
 80038ce:	3503      	adds	r5, #3
 80038d0:	1a6d      	subs	r5, r5, r1
 80038d2:	f025 0503 	bic.w	r5, r5, #3
 80038d6:	3508      	adds	r5, #8
 80038d8:	2d0c      	cmp	r5, #12
 80038da:	bf38      	it	cc
 80038dc:	250c      	movcc	r5, #12
 80038de:	4638      	mov	r0, r7
 80038e0:	4629      	mov	r1, r5
 80038e2:	f7ff ffa5 	bl	8003830 <sbrk_aligned>
 80038e6:	3001      	adds	r0, #1
 80038e8:	d02b      	beq.n	8003942 <_malloc_r+0xd2>
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	442b      	add	r3, r5
 80038ee:	6023      	str	r3, [r4, #0]
 80038f0:	e00e      	b.n	8003910 <_malloc_r+0xa0>
 80038f2:	6822      	ldr	r2, [r4, #0]
 80038f4:	1b52      	subs	r2, r2, r5
 80038f6:	d41e      	bmi.n	8003936 <_malloc_r+0xc6>
 80038f8:	2a0b      	cmp	r2, #11
 80038fa:	d916      	bls.n	800392a <_malloc_r+0xba>
 80038fc:	1961      	adds	r1, r4, r5
 80038fe:	42a3      	cmp	r3, r4
 8003900:	6025      	str	r5, [r4, #0]
 8003902:	bf18      	it	ne
 8003904:	6059      	strne	r1, [r3, #4]
 8003906:	6863      	ldr	r3, [r4, #4]
 8003908:	bf08      	it	eq
 800390a:	6031      	streq	r1, [r6, #0]
 800390c:	5162      	str	r2, [r4, r5]
 800390e:	604b      	str	r3, [r1, #4]
 8003910:	4638      	mov	r0, r7
 8003912:	f104 060b 	add.w	r6, r4, #11
 8003916:	f000 fd4f 	bl	80043b8 <__malloc_unlock>
 800391a:	f026 0607 	bic.w	r6, r6, #7
 800391e:	1d23      	adds	r3, r4, #4
 8003920:	1af2      	subs	r2, r6, r3
 8003922:	d0b6      	beq.n	8003892 <_malloc_r+0x22>
 8003924:	1b9b      	subs	r3, r3, r6
 8003926:	50a3      	str	r3, [r4, r2]
 8003928:	e7b3      	b.n	8003892 <_malloc_r+0x22>
 800392a:	6862      	ldr	r2, [r4, #4]
 800392c:	42a3      	cmp	r3, r4
 800392e:	bf0c      	ite	eq
 8003930:	6032      	streq	r2, [r6, #0]
 8003932:	605a      	strne	r2, [r3, #4]
 8003934:	e7ec      	b.n	8003910 <_malloc_r+0xa0>
 8003936:	4623      	mov	r3, r4
 8003938:	6864      	ldr	r4, [r4, #4]
 800393a:	e7b2      	b.n	80038a2 <_malloc_r+0x32>
 800393c:	4634      	mov	r4, r6
 800393e:	6876      	ldr	r6, [r6, #4]
 8003940:	e7b9      	b.n	80038b6 <_malloc_r+0x46>
 8003942:	230c      	movs	r3, #12
 8003944:	4638      	mov	r0, r7
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	f000 fd36 	bl	80043b8 <__malloc_unlock>
 800394c:	e7a1      	b.n	8003892 <_malloc_r+0x22>
 800394e:	6025      	str	r5, [r4, #0]
 8003950:	e7de      	b.n	8003910 <_malloc_r+0xa0>
 8003952:	bf00      	nop
 8003954:	200001b4 	.word	0x200001b4

08003958 <__ssputs_r>:
 8003958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800395c:	688e      	ldr	r6, [r1, #8]
 800395e:	4682      	mov	sl, r0
 8003960:	429e      	cmp	r6, r3
 8003962:	460c      	mov	r4, r1
 8003964:	4690      	mov	r8, r2
 8003966:	461f      	mov	r7, r3
 8003968:	d838      	bhi.n	80039dc <__ssputs_r+0x84>
 800396a:	898a      	ldrh	r2, [r1, #12]
 800396c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003970:	d032      	beq.n	80039d8 <__ssputs_r+0x80>
 8003972:	6825      	ldr	r5, [r4, #0]
 8003974:	6909      	ldr	r1, [r1, #16]
 8003976:	3301      	adds	r3, #1
 8003978:	eba5 0901 	sub.w	r9, r5, r1
 800397c:	6965      	ldr	r5, [r4, #20]
 800397e:	444b      	add	r3, r9
 8003980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003984:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003988:	106d      	asrs	r5, r5, #1
 800398a:	429d      	cmp	r5, r3
 800398c:	bf38      	it	cc
 800398e:	461d      	movcc	r5, r3
 8003990:	0553      	lsls	r3, r2, #21
 8003992:	d531      	bpl.n	80039f8 <__ssputs_r+0xa0>
 8003994:	4629      	mov	r1, r5
 8003996:	f7ff ff6b 	bl	8003870 <_malloc_r>
 800399a:	4606      	mov	r6, r0
 800399c:	b950      	cbnz	r0, 80039b4 <__ssputs_r+0x5c>
 800399e:	230c      	movs	r3, #12
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039a4:	f8ca 3000 	str.w	r3, [sl]
 80039a8:	89a3      	ldrh	r3, [r4, #12]
 80039aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ae:	81a3      	strh	r3, [r4, #12]
 80039b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039b4:	464a      	mov	r2, r9
 80039b6:	6921      	ldr	r1, [r4, #16]
 80039b8:	f000 fcd0 	bl	800435c <memcpy>
 80039bc:	89a3      	ldrh	r3, [r4, #12]
 80039be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c6:	81a3      	strh	r3, [r4, #12]
 80039c8:	6126      	str	r6, [r4, #16]
 80039ca:	444e      	add	r6, r9
 80039cc:	6026      	str	r6, [r4, #0]
 80039ce:	463e      	mov	r6, r7
 80039d0:	6165      	str	r5, [r4, #20]
 80039d2:	eba5 0509 	sub.w	r5, r5, r9
 80039d6:	60a5      	str	r5, [r4, #8]
 80039d8:	42be      	cmp	r6, r7
 80039da:	d900      	bls.n	80039de <__ssputs_r+0x86>
 80039dc:	463e      	mov	r6, r7
 80039de:	4632      	mov	r2, r6
 80039e0:	4641      	mov	r1, r8
 80039e2:	6820      	ldr	r0, [r4, #0]
 80039e4:	f000 fcc8 	bl	8004378 <memmove>
 80039e8:	68a3      	ldr	r3, [r4, #8]
 80039ea:	2000      	movs	r0, #0
 80039ec:	1b9b      	subs	r3, r3, r6
 80039ee:	60a3      	str	r3, [r4, #8]
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	4433      	add	r3, r6
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	e7db      	b.n	80039b0 <__ssputs_r+0x58>
 80039f8:	462a      	mov	r2, r5
 80039fa:	f000 fce3 	bl	80043c4 <_realloc_r>
 80039fe:	4606      	mov	r6, r0
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d1e1      	bne.n	80039c8 <__ssputs_r+0x70>
 8003a04:	4650      	mov	r0, sl
 8003a06:	6921      	ldr	r1, [r4, #16]
 8003a08:	f7ff feca 	bl	80037a0 <_free_r>
 8003a0c:	e7c7      	b.n	800399e <__ssputs_r+0x46>
	...

08003a10 <_svfiprintf_r>:
 8003a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a14:	4698      	mov	r8, r3
 8003a16:	898b      	ldrh	r3, [r1, #12]
 8003a18:	4607      	mov	r7, r0
 8003a1a:	061b      	lsls	r3, r3, #24
 8003a1c:	460d      	mov	r5, r1
 8003a1e:	4614      	mov	r4, r2
 8003a20:	b09d      	sub	sp, #116	; 0x74
 8003a22:	d50e      	bpl.n	8003a42 <_svfiprintf_r+0x32>
 8003a24:	690b      	ldr	r3, [r1, #16]
 8003a26:	b963      	cbnz	r3, 8003a42 <_svfiprintf_r+0x32>
 8003a28:	2140      	movs	r1, #64	; 0x40
 8003a2a:	f7ff ff21 	bl	8003870 <_malloc_r>
 8003a2e:	6028      	str	r0, [r5, #0]
 8003a30:	6128      	str	r0, [r5, #16]
 8003a32:	b920      	cbnz	r0, 8003a3e <_svfiprintf_r+0x2e>
 8003a34:	230c      	movs	r3, #12
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a3c:	e0d1      	b.n	8003be2 <_svfiprintf_r+0x1d2>
 8003a3e:	2340      	movs	r3, #64	; 0x40
 8003a40:	616b      	str	r3, [r5, #20]
 8003a42:	2300      	movs	r3, #0
 8003a44:	9309      	str	r3, [sp, #36]	; 0x24
 8003a46:	2320      	movs	r3, #32
 8003a48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a4c:	2330      	movs	r3, #48	; 0x30
 8003a4e:	f04f 0901 	mov.w	r9, #1
 8003a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003bfc <_svfiprintf_r+0x1ec>
 8003a5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a5e:	4623      	mov	r3, r4
 8003a60:	469a      	mov	sl, r3
 8003a62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a66:	b10a      	cbz	r2, 8003a6c <_svfiprintf_r+0x5c>
 8003a68:	2a25      	cmp	r2, #37	; 0x25
 8003a6a:	d1f9      	bne.n	8003a60 <_svfiprintf_r+0x50>
 8003a6c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a70:	d00b      	beq.n	8003a8a <_svfiprintf_r+0x7a>
 8003a72:	465b      	mov	r3, fp
 8003a74:	4622      	mov	r2, r4
 8003a76:	4629      	mov	r1, r5
 8003a78:	4638      	mov	r0, r7
 8003a7a:	f7ff ff6d 	bl	8003958 <__ssputs_r>
 8003a7e:	3001      	adds	r0, #1
 8003a80:	f000 80aa 	beq.w	8003bd8 <_svfiprintf_r+0x1c8>
 8003a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a86:	445a      	add	r2, fp
 8003a88:	9209      	str	r2, [sp, #36]	; 0x24
 8003a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 80a2 	beq.w	8003bd8 <_svfiprintf_r+0x1c8>
 8003a94:	2300      	movs	r3, #0
 8003a96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a9e:	f10a 0a01 	add.w	sl, sl, #1
 8003aa2:	9304      	str	r3, [sp, #16]
 8003aa4:	9307      	str	r3, [sp, #28]
 8003aa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8003aac:	4654      	mov	r4, sl
 8003aae:	2205      	movs	r2, #5
 8003ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ab4:	4851      	ldr	r0, [pc, #324]	; (8003bfc <_svfiprintf_r+0x1ec>)
 8003ab6:	f000 fc43 	bl	8004340 <memchr>
 8003aba:	9a04      	ldr	r2, [sp, #16]
 8003abc:	b9d8      	cbnz	r0, 8003af6 <_svfiprintf_r+0xe6>
 8003abe:	06d0      	lsls	r0, r2, #27
 8003ac0:	bf44      	itt	mi
 8003ac2:	2320      	movmi	r3, #32
 8003ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ac8:	0711      	lsls	r1, r2, #28
 8003aca:	bf44      	itt	mi
 8003acc:	232b      	movmi	r3, #43	; 0x2b
 8003ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ad8:	d015      	beq.n	8003b06 <_svfiprintf_r+0xf6>
 8003ada:	4654      	mov	r4, sl
 8003adc:	2000      	movs	r0, #0
 8003ade:	f04f 0c0a 	mov.w	ip, #10
 8003ae2:	9a07      	ldr	r2, [sp, #28]
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aea:	3b30      	subs	r3, #48	; 0x30
 8003aec:	2b09      	cmp	r3, #9
 8003aee:	d94e      	bls.n	8003b8e <_svfiprintf_r+0x17e>
 8003af0:	b1b0      	cbz	r0, 8003b20 <_svfiprintf_r+0x110>
 8003af2:	9207      	str	r2, [sp, #28]
 8003af4:	e014      	b.n	8003b20 <_svfiprintf_r+0x110>
 8003af6:	eba0 0308 	sub.w	r3, r0, r8
 8003afa:	fa09 f303 	lsl.w	r3, r9, r3
 8003afe:	4313      	orrs	r3, r2
 8003b00:	46a2      	mov	sl, r4
 8003b02:	9304      	str	r3, [sp, #16]
 8003b04:	e7d2      	b.n	8003aac <_svfiprintf_r+0x9c>
 8003b06:	9b03      	ldr	r3, [sp, #12]
 8003b08:	1d19      	adds	r1, r3, #4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	9103      	str	r1, [sp, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	bfbb      	ittet	lt
 8003b12:	425b      	neglt	r3, r3
 8003b14:	f042 0202 	orrlt.w	r2, r2, #2
 8003b18:	9307      	strge	r3, [sp, #28]
 8003b1a:	9307      	strlt	r3, [sp, #28]
 8003b1c:	bfb8      	it	lt
 8003b1e:	9204      	strlt	r2, [sp, #16]
 8003b20:	7823      	ldrb	r3, [r4, #0]
 8003b22:	2b2e      	cmp	r3, #46	; 0x2e
 8003b24:	d10c      	bne.n	8003b40 <_svfiprintf_r+0x130>
 8003b26:	7863      	ldrb	r3, [r4, #1]
 8003b28:	2b2a      	cmp	r3, #42	; 0x2a
 8003b2a:	d135      	bne.n	8003b98 <_svfiprintf_r+0x188>
 8003b2c:	9b03      	ldr	r3, [sp, #12]
 8003b2e:	3402      	adds	r4, #2
 8003b30:	1d1a      	adds	r2, r3, #4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	9203      	str	r2, [sp, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bfb8      	it	lt
 8003b3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003b3e:	9305      	str	r3, [sp, #20]
 8003b40:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003c00 <_svfiprintf_r+0x1f0>
 8003b44:	2203      	movs	r2, #3
 8003b46:	4650      	mov	r0, sl
 8003b48:	7821      	ldrb	r1, [r4, #0]
 8003b4a:	f000 fbf9 	bl	8004340 <memchr>
 8003b4e:	b140      	cbz	r0, 8003b62 <_svfiprintf_r+0x152>
 8003b50:	2340      	movs	r3, #64	; 0x40
 8003b52:	eba0 000a 	sub.w	r0, r0, sl
 8003b56:	fa03 f000 	lsl.w	r0, r3, r0
 8003b5a:	9b04      	ldr	r3, [sp, #16]
 8003b5c:	3401      	adds	r4, #1
 8003b5e:	4303      	orrs	r3, r0
 8003b60:	9304      	str	r3, [sp, #16]
 8003b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b66:	2206      	movs	r2, #6
 8003b68:	4826      	ldr	r0, [pc, #152]	; (8003c04 <_svfiprintf_r+0x1f4>)
 8003b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b6e:	f000 fbe7 	bl	8004340 <memchr>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d038      	beq.n	8003be8 <_svfiprintf_r+0x1d8>
 8003b76:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <_svfiprintf_r+0x1f8>)
 8003b78:	bb1b      	cbnz	r3, 8003bc2 <_svfiprintf_r+0x1b2>
 8003b7a:	9b03      	ldr	r3, [sp, #12]
 8003b7c:	3307      	adds	r3, #7
 8003b7e:	f023 0307 	bic.w	r3, r3, #7
 8003b82:	3308      	adds	r3, #8
 8003b84:	9303      	str	r3, [sp, #12]
 8003b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b88:	4433      	add	r3, r6
 8003b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b8c:	e767      	b.n	8003a5e <_svfiprintf_r+0x4e>
 8003b8e:	460c      	mov	r4, r1
 8003b90:	2001      	movs	r0, #1
 8003b92:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b96:	e7a5      	b.n	8003ae4 <_svfiprintf_r+0xd4>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f04f 0c0a 	mov.w	ip, #10
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	3401      	adds	r4, #1
 8003ba2:	9305      	str	r3, [sp, #20]
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003baa:	3a30      	subs	r2, #48	; 0x30
 8003bac:	2a09      	cmp	r2, #9
 8003bae:	d903      	bls.n	8003bb8 <_svfiprintf_r+0x1a8>
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0c5      	beq.n	8003b40 <_svfiprintf_r+0x130>
 8003bb4:	9105      	str	r1, [sp, #20]
 8003bb6:	e7c3      	b.n	8003b40 <_svfiprintf_r+0x130>
 8003bb8:	4604      	mov	r4, r0
 8003bba:	2301      	movs	r3, #1
 8003bbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bc0:	e7f0      	b.n	8003ba4 <_svfiprintf_r+0x194>
 8003bc2:	ab03      	add	r3, sp, #12
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	462a      	mov	r2, r5
 8003bc8:	4638      	mov	r0, r7
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <_svfiprintf_r+0x1fc>)
 8003bcc:	a904      	add	r1, sp, #16
 8003bce:	f3af 8000 	nop.w
 8003bd2:	1c42      	adds	r2, r0, #1
 8003bd4:	4606      	mov	r6, r0
 8003bd6:	d1d6      	bne.n	8003b86 <_svfiprintf_r+0x176>
 8003bd8:	89ab      	ldrh	r3, [r5, #12]
 8003bda:	065b      	lsls	r3, r3, #25
 8003bdc:	f53f af2c 	bmi.w	8003a38 <_svfiprintf_r+0x28>
 8003be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003be2:	b01d      	add	sp, #116	; 0x74
 8003be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be8:	ab03      	add	r3, sp, #12
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	462a      	mov	r2, r5
 8003bee:	4638      	mov	r0, r7
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <_svfiprintf_r+0x1fc>)
 8003bf2:	a904      	add	r1, sp, #16
 8003bf4:	f000 f9d4 	bl	8003fa0 <_printf_i>
 8003bf8:	e7eb      	b.n	8003bd2 <_svfiprintf_r+0x1c2>
 8003bfa:	bf00      	nop
 8003bfc:	080046ec 	.word	0x080046ec
 8003c00:	080046f2 	.word	0x080046f2
 8003c04:	080046f6 	.word	0x080046f6
 8003c08:	00000000 	.word	0x00000000
 8003c0c:	08003959 	.word	0x08003959

08003c10 <__sfputc_r>:
 8003c10:	6893      	ldr	r3, [r2, #8]
 8003c12:	b410      	push	{r4}
 8003c14:	3b01      	subs	r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	6093      	str	r3, [r2, #8]
 8003c1a:	da07      	bge.n	8003c2c <__sfputc_r+0x1c>
 8003c1c:	6994      	ldr	r4, [r2, #24]
 8003c1e:	42a3      	cmp	r3, r4
 8003c20:	db01      	blt.n	8003c26 <__sfputc_r+0x16>
 8003c22:	290a      	cmp	r1, #10
 8003c24:	d102      	bne.n	8003c2c <__sfputc_r+0x1c>
 8003c26:	bc10      	pop	{r4}
 8003c28:	f7ff bade 	b.w	80031e8 <__swbuf_r>
 8003c2c:	6813      	ldr	r3, [r2, #0]
 8003c2e:	1c58      	adds	r0, r3, #1
 8003c30:	6010      	str	r0, [r2, #0]
 8003c32:	7019      	strb	r1, [r3, #0]
 8003c34:	4608      	mov	r0, r1
 8003c36:	bc10      	pop	{r4}
 8003c38:	4770      	bx	lr

08003c3a <__sfputs_r>:
 8003c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3c:	4606      	mov	r6, r0
 8003c3e:	460f      	mov	r7, r1
 8003c40:	4614      	mov	r4, r2
 8003c42:	18d5      	adds	r5, r2, r3
 8003c44:	42ac      	cmp	r4, r5
 8003c46:	d101      	bne.n	8003c4c <__sfputs_r+0x12>
 8003c48:	2000      	movs	r0, #0
 8003c4a:	e007      	b.n	8003c5c <__sfputs_r+0x22>
 8003c4c:	463a      	mov	r2, r7
 8003c4e:	4630      	mov	r0, r6
 8003c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c54:	f7ff ffdc 	bl	8003c10 <__sfputc_r>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d1f3      	bne.n	8003c44 <__sfputs_r+0xa>
 8003c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c60 <_vfiprintf_r>:
 8003c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c64:	460d      	mov	r5, r1
 8003c66:	4614      	mov	r4, r2
 8003c68:	4698      	mov	r8, r3
 8003c6a:	4606      	mov	r6, r0
 8003c6c:	b09d      	sub	sp, #116	; 0x74
 8003c6e:	b118      	cbz	r0, 8003c78 <_vfiprintf_r+0x18>
 8003c70:	6983      	ldr	r3, [r0, #24]
 8003c72:	b90b      	cbnz	r3, 8003c78 <_vfiprintf_r+0x18>
 8003c74:	f7ff fc8e 	bl	8003594 <__sinit>
 8003c78:	4b89      	ldr	r3, [pc, #548]	; (8003ea0 <_vfiprintf_r+0x240>)
 8003c7a:	429d      	cmp	r5, r3
 8003c7c:	d11b      	bne.n	8003cb6 <_vfiprintf_r+0x56>
 8003c7e:	6875      	ldr	r5, [r6, #4]
 8003c80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c82:	07d9      	lsls	r1, r3, #31
 8003c84:	d405      	bmi.n	8003c92 <_vfiprintf_r+0x32>
 8003c86:	89ab      	ldrh	r3, [r5, #12]
 8003c88:	059a      	lsls	r2, r3, #22
 8003c8a:	d402      	bmi.n	8003c92 <_vfiprintf_r+0x32>
 8003c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c8e:	f7ff fd1f 	bl	80036d0 <__retarget_lock_acquire_recursive>
 8003c92:	89ab      	ldrh	r3, [r5, #12]
 8003c94:	071b      	lsls	r3, r3, #28
 8003c96:	d501      	bpl.n	8003c9c <_vfiprintf_r+0x3c>
 8003c98:	692b      	ldr	r3, [r5, #16]
 8003c9a:	b9eb      	cbnz	r3, 8003cd8 <_vfiprintf_r+0x78>
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f7ff faf4 	bl	800328c <__swsetup_r>
 8003ca4:	b1c0      	cbz	r0, 8003cd8 <_vfiprintf_r+0x78>
 8003ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ca8:	07dc      	lsls	r4, r3, #31
 8003caa:	d50e      	bpl.n	8003cca <_vfiprintf_r+0x6a>
 8003cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cb0:	b01d      	add	sp, #116	; 0x74
 8003cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cb6:	4b7b      	ldr	r3, [pc, #492]	; (8003ea4 <_vfiprintf_r+0x244>)
 8003cb8:	429d      	cmp	r5, r3
 8003cba:	d101      	bne.n	8003cc0 <_vfiprintf_r+0x60>
 8003cbc:	68b5      	ldr	r5, [r6, #8]
 8003cbe:	e7df      	b.n	8003c80 <_vfiprintf_r+0x20>
 8003cc0:	4b79      	ldr	r3, [pc, #484]	; (8003ea8 <_vfiprintf_r+0x248>)
 8003cc2:	429d      	cmp	r5, r3
 8003cc4:	bf08      	it	eq
 8003cc6:	68f5      	ldreq	r5, [r6, #12]
 8003cc8:	e7da      	b.n	8003c80 <_vfiprintf_r+0x20>
 8003cca:	89ab      	ldrh	r3, [r5, #12]
 8003ccc:	0598      	lsls	r0, r3, #22
 8003cce:	d4ed      	bmi.n	8003cac <_vfiprintf_r+0x4c>
 8003cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cd2:	f7ff fcfe 	bl	80036d2 <__retarget_lock_release_recursive>
 8003cd6:	e7e9      	b.n	8003cac <_vfiprintf_r+0x4c>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9309      	str	r3, [sp, #36]	; 0x24
 8003cdc:	2320      	movs	r3, #32
 8003cde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ce2:	2330      	movs	r3, #48	; 0x30
 8003ce4:	f04f 0901 	mov.w	r9, #1
 8003ce8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003eac <_vfiprintf_r+0x24c>
 8003cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cf4:	4623      	mov	r3, r4
 8003cf6:	469a      	mov	sl, r3
 8003cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cfc:	b10a      	cbz	r2, 8003d02 <_vfiprintf_r+0xa2>
 8003cfe:	2a25      	cmp	r2, #37	; 0x25
 8003d00:	d1f9      	bne.n	8003cf6 <_vfiprintf_r+0x96>
 8003d02:	ebba 0b04 	subs.w	fp, sl, r4
 8003d06:	d00b      	beq.n	8003d20 <_vfiprintf_r+0xc0>
 8003d08:	465b      	mov	r3, fp
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	4630      	mov	r0, r6
 8003d10:	f7ff ff93 	bl	8003c3a <__sfputs_r>
 8003d14:	3001      	adds	r0, #1
 8003d16:	f000 80aa 	beq.w	8003e6e <_vfiprintf_r+0x20e>
 8003d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d1c:	445a      	add	r2, fp
 8003d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8003d20:	f89a 3000 	ldrb.w	r3, [sl]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80a2 	beq.w	8003e6e <_vfiprintf_r+0x20e>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d34:	f10a 0a01 	add.w	sl, sl, #1
 8003d38:	9304      	str	r3, [sp, #16]
 8003d3a:	9307      	str	r3, [sp, #28]
 8003d3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d40:	931a      	str	r3, [sp, #104]	; 0x68
 8003d42:	4654      	mov	r4, sl
 8003d44:	2205      	movs	r2, #5
 8003d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d4a:	4858      	ldr	r0, [pc, #352]	; (8003eac <_vfiprintf_r+0x24c>)
 8003d4c:	f000 faf8 	bl	8004340 <memchr>
 8003d50:	9a04      	ldr	r2, [sp, #16]
 8003d52:	b9d8      	cbnz	r0, 8003d8c <_vfiprintf_r+0x12c>
 8003d54:	06d1      	lsls	r1, r2, #27
 8003d56:	bf44      	itt	mi
 8003d58:	2320      	movmi	r3, #32
 8003d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d5e:	0713      	lsls	r3, r2, #28
 8003d60:	bf44      	itt	mi
 8003d62:	232b      	movmi	r3, #43	; 0x2b
 8003d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d68:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d6e:	d015      	beq.n	8003d9c <_vfiprintf_r+0x13c>
 8003d70:	4654      	mov	r4, sl
 8003d72:	2000      	movs	r0, #0
 8003d74:	f04f 0c0a 	mov.w	ip, #10
 8003d78:	9a07      	ldr	r2, [sp, #28]
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d80:	3b30      	subs	r3, #48	; 0x30
 8003d82:	2b09      	cmp	r3, #9
 8003d84:	d94e      	bls.n	8003e24 <_vfiprintf_r+0x1c4>
 8003d86:	b1b0      	cbz	r0, 8003db6 <_vfiprintf_r+0x156>
 8003d88:	9207      	str	r2, [sp, #28]
 8003d8a:	e014      	b.n	8003db6 <_vfiprintf_r+0x156>
 8003d8c:	eba0 0308 	sub.w	r3, r0, r8
 8003d90:	fa09 f303 	lsl.w	r3, r9, r3
 8003d94:	4313      	orrs	r3, r2
 8003d96:	46a2      	mov	sl, r4
 8003d98:	9304      	str	r3, [sp, #16]
 8003d9a:	e7d2      	b.n	8003d42 <_vfiprintf_r+0xe2>
 8003d9c:	9b03      	ldr	r3, [sp, #12]
 8003d9e:	1d19      	adds	r1, r3, #4
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	9103      	str	r1, [sp, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bfbb      	ittet	lt
 8003da8:	425b      	neglt	r3, r3
 8003daa:	f042 0202 	orrlt.w	r2, r2, #2
 8003dae:	9307      	strge	r3, [sp, #28]
 8003db0:	9307      	strlt	r3, [sp, #28]
 8003db2:	bfb8      	it	lt
 8003db4:	9204      	strlt	r2, [sp, #16]
 8003db6:	7823      	ldrb	r3, [r4, #0]
 8003db8:	2b2e      	cmp	r3, #46	; 0x2e
 8003dba:	d10c      	bne.n	8003dd6 <_vfiprintf_r+0x176>
 8003dbc:	7863      	ldrb	r3, [r4, #1]
 8003dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8003dc0:	d135      	bne.n	8003e2e <_vfiprintf_r+0x1ce>
 8003dc2:	9b03      	ldr	r3, [sp, #12]
 8003dc4:	3402      	adds	r4, #2
 8003dc6:	1d1a      	adds	r2, r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	9203      	str	r2, [sp, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bfb8      	it	lt
 8003dd0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003dd4:	9305      	str	r3, [sp, #20]
 8003dd6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003eb0 <_vfiprintf_r+0x250>
 8003dda:	2203      	movs	r2, #3
 8003ddc:	4650      	mov	r0, sl
 8003dde:	7821      	ldrb	r1, [r4, #0]
 8003de0:	f000 faae 	bl	8004340 <memchr>
 8003de4:	b140      	cbz	r0, 8003df8 <_vfiprintf_r+0x198>
 8003de6:	2340      	movs	r3, #64	; 0x40
 8003de8:	eba0 000a 	sub.w	r0, r0, sl
 8003dec:	fa03 f000 	lsl.w	r0, r3, r0
 8003df0:	9b04      	ldr	r3, [sp, #16]
 8003df2:	3401      	adds	r4, #1
 8003df4:	4303      	orrs	r3, r0
 8003df6:	9304      	str	r3, [sp, #16]
 8003df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dfc:	2206      	movs	r2, #6
 8003dfe:	482d      	ldr	r0, [pc, #180]	; (8003eb4 <_vfiprintf_r+0x254>)
 8003e00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e04:	f000 fa9c 	bl	8004340 <memchr>
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	d03f      	beq.n	8003e8c <_vfiprintf_r+0x22c>
 8003e0c:	4b2a      	ldr	r3, [pc, #168]	; (8003eb8 <_vfiprintf_r+0x258>)
 8003e0e:	bb1b      	cbnz	r3, 8003e58 <_vfiprintf_r+0x1f8>
 8003e10:	9b03      	ldr	r3, [sp, #12]
 8003e12:	3307      	adds	r3, #7
 8003e14:	f023 0307 	bic.w	r3, r3, #7
 8003e18:	3308      	adds	r3, #8
 8003e1a:	9303      	str	r3, [sp, #12]
 8003e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e1e:	443b      	add	r3, r7
 8003e20:	9309      	str	r3, [sp, #36]	; 0x24
 8003e22:	e767      	b.n	8003cf4 <_vfiprintf_r+0x94>
 8003e24:	460c      	mov	r4, r1
 8003e26:	2001      	movs	r0, #1
 8003e28:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e2c:	e7a5      	b.n	8003d7a <_vfiprintf_r+0x11a>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f04f 0c0a 	mov.w	ip, #10
 8003e34:	4619      	mov	r1, r3
 8003e36:	3401      	adds	r4, #1
 8003e38:	9305      	str	r3, [sp, #20]
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e40:	3a30      	subs	r2, #48	; 0x30
 8003e42:	2a09      	cmp	r2, #9
 8003e44:	d903      	bls.n	8003e4e <_vfiprintf_r+0x1ee>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0c5      	beq.n	8003dd6 <_vfiprintf_r+0x176>
 8003e4a:	9105      	str	r1, [sp, #20]
 8003e4c:	e7c3      	b.n	8003dd6 <_vfiprintf_r+0x176>
 8003e4e:	4604      	mov	r4, r0
 8003e50:	2301      	movs	r3, #1
 8003e52:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e56:	e7f0      	b.n	8003e3a <_vfiprintf_r+0x1da>
 8003e58:	ab03      	add	r3, sp, #12
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	462a      	mov	r2, r5
 8003e5e:	4630      	mov	r0, r6
 8003e60:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <_vfiprintf_r+0x25c>)
 8003e62:	a904      	add	r1, sp, #16
 8003e64:	f3af 8000 	nop.w
 8003e68:	4607      	mov	r7, r0
 8003e6a:	1c78      	adds	r0, r7, #1
 8003e6c:	d1d6      	bne.n	8003e1c <_vfiprintf_r+0x1bc>
 8003e6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e70:	07d9      	lsls	r1, r3, #31
 8003e72:	d405      	bmi.n	8003e80 <_vfiprintf_r+0x220>
 8003e74:	89ab      	ldrh	r3, [r5, #12]
 8003e76:	059a      	lsls	r2, r3, #22
 8003e78:	d402      	bmi.n	8003e80 <_vfiprintf_r+0x220>
 8003e7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e7c:	f7ff fc29 	bl	80036d2 <__retarget_lock_release_recursive>
 8003e80:	89ab      	ldrh	r3, [r5, #12]
 8003e82:	065b      	lsls	r3, r3, #25
 8003e84:	f53f af12 	bmi.w	8003cac <_vfiprintf_r+0x4c>
 8003e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e8a:	e711      	b.n	8003cb0 <_vfiprintf_r+0x50>
 8003e8c:	ab03      	add	r3, sp, #12
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	462a      	mov	r2, r5
 8003e92:	4630      	mov	r0, r6
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <_vfiprintf_r+0x25c>)
 8003e96:	a904      	add	r1, sp, #16
 8003e98:	f000 f882 	bl	8003fa0 <_printf_i>
 8003e9c:	e7e4      	b.n	8003e68 <_vfiprintf_r+0x208>
 8003e9e:	bf00      	nop
 8003ea0:	080046ac 	.word	0x080046ac
 8003ea4:	080046cc 	.word	0x080046cc
 8003ea8:	0800468c 	.word	0x0800468c
 8003eac:	080046ec 	.word	0x080046ec
 8003eb0:	080046f2 	.word	0x080046f2
 8003eb4:	080046f6 	.word	0x080046f6
 8003eb8:	00000000 	.word	0x00000000
 8003ebc:	08003c3b 	.word	0x08003c3b

08003ec0 <_printf_common>:
 8003ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec4:	4616      	mov	r6, r2
 8003ec6:	4699      	mov	r9, r3
 8003ec8:	688a      	ldr	r2, [r1, #8]
 8003eca:	690b      	ldr	r3, [r1, #16]
 8003ecc:	4607      	mov	r7, r0
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	bfb8      	it	lt
 8003ed2:	4613      	movlt	r3, r2
 8003ed4:	6033      	str	r3, [r6, #0]
 8003ed6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003eda:	460c      	mov	r4, r1
 8003edc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ee0:	b10a      	cbz	r2, 8003ee6 <_printf_common+0x26>
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	6033      	str	r3, [r6, #0]
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	0699      	lsls	r1, r3, #26
 8003eea:	bf42      	ittt	mi
 8003eec:	6833      	ldrmi	r3, [r6, #0]
 8003eee:	3302      	addmi	r3, #2
 8003ef0:	6033      	strmi	r3, [r6, #0]
 8003ef2:	6825      	ldr	r5, [r4, #0]
 8003ef4:	f015 0506 	ands.w	r5, r5, #6
 8003ef8:	d106      	bne.n	8003f08 <_printf_common+0x48>
 8003efa:	f104 0a19 	add.w	sl, r4, #25
 8003efe:	68e3      	ldr	r3, [r4, #12]
 8003f00:	6832      	ldr	r2, [r6, #0]
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	42ab      	cmp	r3, r5
 8003f06:	dc28      	bgt.n	8003f5a <_printf_common+0x9a>
 8003f08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f0c:	1e13      	subs	r3, r2, #0
 8003f0e:	6822      	ldr	r2, [r4, #0]
 8003f10:	bf18      	it	ne
 8003f12:	2301      	movne	r3, #1
 8003f14:	0692      	lsls	r2, r2, #26
 8003f16:	d42d      	bmi.n	8003f74 <_printf_common+0xb4>
 8003f18:	4649      	mov	r1, r9
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f20:	47c0      	blx	r8
 8003f22:	3001      	adds	r0, #1
 8003f24:	d020      	beq.n	8003f68 <_printf_common+0xa8>
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	68e5      	ldr	r5, [r4, #12]
 8003f2a:	f003 0306 	and.w	r3, r3, #6
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	bf18      	it	ne
 8003f32:	2500      	movne	r5, #0
 8003f34:	6832      	ldr	r2, [r6, #0]
 8003f36:	f04f 0600 	mov.w	r6, #0
 8003f3a:	68a3      	ldr	r3, [r4, #8]
 8003f3c:	bf08      	it	eq
 8003f3e:	1aad      	subeq	r5, r5, r2
 8003f40:	6922      	ldr	r2, [r4, #16]
 8003f42:	bf08      	it	eq
 8003f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	bfc4      	itt	gt
 8003f4c:	1a9b      	subgt	r3, r3, r2
 8003f4e:	18ed      	addgt	r5, r5, r3
 8003f50:	341a      	adds	r4, #26
 8003f52:	42b5      	cmp	r5, r6
 8003f54:	d11a      	bne.n	8003f8c <_printf_common+0xcc>
 8003f56:	2000      	movs	r0, #0
 8003f58:	e008      	b.n	8003f6c <_printf_common+0xac>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	4652      	mov	r2, sl
 8003f5e:	4649      	mov	r1, r9
 8003f60:	4638      	mov	r0, r7
 8003f62:	47c0      	blx	r8
 8003f64:	3001      	adds	r0, #1
 8003f66:	d103      	bne.n	8003f70 <_printf_common+0xb0>
 8003f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f70:	3501      	adds	r5, #1
 8003f72:	e7c4      	b.n	8003efe <_printf_common+0x3e>
 8003f74:	2030      	movs	r0, #48	; 0x30
 8003f76:	18e1      	adds	r1, r4, r3
 8003f78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f82:	4422      	add	r2, r4
 8003f84:	3302      	adds	r3, #2
 8003f86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f8a:	e7c5      	b.n	8003f18 <_printf_common+0x58>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	4622      	mov	r2, r4
 8003f90:	4649      	mov	r1, r9
 8003f92:	4638      	mov	r0, r7
 8003f94:	47c0      	blx	r8
 8003f96:	3001      	adds	r0, #1
 8003f98:	d0e6      	beq.n	8003f68 <_printf_common+0xa8>
 8003f9a:	3601      	adds	r6, #1
 8003f9c:	e7d9      	b.n	8003f52 <_printf_common+0x92>
	...

08003fa0 <_printf_i>:
 8003fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa4:	7e0f      	ldrb	r7, [r1, #24]
 8003fa6:	4691      	mov	r9, r2
 8003fa8:	2f78      	cmp	r7, #120	; 0x78
 8003faa:	4680      	mov	r8, r0
 8003fac:	460c      	mov	r4, r1
 8003fae:	469a      	mov	sl, r3
 8003fb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fb6:	d807      	bhi.n	8003fc8 <_printf_i+0x28>
 8003fb8:	2f62      	cmp	r7, #98	; 0x62
 8003fba:	d80a      	bhi.n	8003fd2 <_printf_i+0x32>
 8003fbc:	2f00      	cmp	r7, #0
 8003fbe:	f000 80d9 	beq.w	8004174 <_printf_i+0x1d4>
 8003fc2:	2f58      	cmp	r7, #88	; 0x58
 8003fc4:	f000 80a4 	beq.w	8004110 <_printf_i+0x170>
 8003fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fd0:	e03a      	b.n	8004048 <_printf_i+0xa8>
 8003fd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fd6:	2b15      	cmp	r3, #21
 8003fd8:	d8f6      	bhi.n	8003fc8 <_printf_i+0x28>
 8003fda:	a101      	add	r1, pc, #4	; (adr r1, 8003fe0 <_printf_i+0x40>)
 8003fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fe0:	08004039 	.word	0x08004039
 8003fe4:	0800404d 	.word	0x0800404d
 8003fe8:	08003fc9 	.word	0x08003fc9
 8003fec:	08003fc9 	.word	0x08003fc9
 8003ff0:	08003fc9 	.word	0x08003fc9
 8003ff4:	08003fc9 	.word	0x08003fc9
 8003ff8:	0800404d 	.word	0x0800404d
 8003ffc:	08003fc9 	.word	0x08003fc9
 8004000:	08003fc9 	.word	0x08003fc9
 8004004:	08003fc9 	.word	0x08003fc9
 8004008:	08003fc9 	.word	0x08003fc9
 800400c:	0800415b 	.word	0x0800415b
 8004010:	0800407d 	.word	0x0800407d
 8004014:	0800413d 	.word	0x0800413d
 8004018:	08003fc9 	.word	0x08003fc9
 800401c:	08003fc9 	.word	0x08003fc9
 8004020:	0800417d 	.word	0x0800417d
 8004024:	08003fc9 	.word	0x08003fc9
 8004028:	0800407d 	.word	0x0800407d
 800402c:	08003fc9 	.word	0x08003fc9
 8004030:	08003fc9 	.word	0x08003fc9
 8004034:	08004145 	.word	0x08004145
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	1d1a      	adds	r2, r3, #4
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	602a      	str	r2, [r5, #0]
 8004040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004048:	2301      	movs	r3, #1
 800404a:	e0a4      	b.n	8004196 <_printf_i+0x1f6>
 800404c:	6820      	ldr	r0, [r4, #0]
 800404e:	6829      	ldr	r1, [r5, #0]
 8004050:	0606      	lsls	r6, r0, #24
 8004052:	f101 0304 	add.w	r3, r1, #4
 8004056:	d50a      	bpl.n	800406e <_printf_i+0xce>
 8004058:	680e      	ldr	r6, [r1, #0]
 800405a:	602b      	str	r3, [r5, #0]
 800405c:	2e00      	cmp	r6, #0
 800405e:	da03      	bge.n	8004068 <_printf_i+0xc8>
 8004060:	232d      	movs	r3, #45	; 0x2d
 8004062:	4276      	negs	r6, r6
 8004064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004068:	230a      	movs	r3, #10
 800406a:	485e      	ldr	r0, [pc, #376]	; (80041e4 <_printf_i+0x244>)
 800406c:	e019      	b.n	80040a2 <_printf_i+0x102>
 800406e:	680e      	ldr	r6, [r1, #0]
 8004070:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004074:	602b      	str	r3, [r5, #0]
 8004076:	bf18      	it	ne
 8004078:	b236      	sxthne	r6, r6
 800407a:	e7ef      	b.n	800405c <_printf_i+0xbc>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	6820      	ldr	r0, [r4, #0]
 8004080:	1d19      	adds	r1, r3, #4
 8004082:	6029      	str	r1, [r5, #0]
 8004084:	0601      	lsls	r1, r0, #24
 8004086:	d501      	bpl.n	800408c <_printf_i+0xec>
 8004088:	681e      	ldr	r6, [r3, #0]
 800408a:	e002      	b.n	8004092 <_printf_i+0xf2>
 800408c:	0646      	lsls	r6, r0, #25
 800408e:	d5fb      	bpl.n	8004088 <_printf_i+0xe8>
 8004090:	881e      	ldrh	r6, [r3, #0]
 8004092:	2f6f      	cmp	r7, #111	; 0x6f
 8004094:	bf0c      	ite	eq
 8004096:	2308      	moveq	r3, #8
 8004098:	230a      	movne	r3, #10
 800409a:	4852      	ldr	r0, [pc, #328]	; (80041e4 <_printf_i+0x244>)
 800409c:	2100      	movs	r1, #0
 800409e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040a2:	6865      	ldr	r5, [r4, #4]
 80040a4:	2d00      	cmp	r5, #0
 80040a6:	bfa8      	it	ge
 80040a8:	6821      	ldrge	r1, [r4, #0]
 80040aa:	60a5      	str	r5, [r4, #8]
 80040ac:	bfa4      	itt	ge
 80040ae:	f021 0104 	bicge.w	r1, r1, #4
 80040b2:	6021      	strge	r1, [r4, #0]
 80040b4:	b90e      	cbnz	r6, 80040ba <_printf_i+0x11a>
 80040b6:	2d00      	cmp	r5, #0
 80040b8:	d04d      	beq.n	8004156 <_printf_i+0x1b6>
 80040ba:	4615      	mov	r5, r2
 80040bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80040c0:	fb03 6711 	mls	r7, r3, r1, r6
 80040c4:	5dc7      	ldrb	r7, [r0, r7]
 80040c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040ca:	4637      	mov	r7, r6
 80040cc:	42bb      	cmp	r3, r7
 80040ce:	460e      	mov	r6, r1
 80040d0:	d9f4      	bls.n	80040bc <_printf_i+0x11c>
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d10b      	bne.n	80040ee <_printf_i+0x14e>
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	07de      	lsls	r6, r3, #31
 80040da:	d508      	bpl.n	80040ee <_printf_i+0x14e>
 80040dc:	6923      	ldr	r3, [r4, #16]
 80040de:	6861      	ldr	r1, [r4, #4]
 80040e0:	4299      	cmp	r1, r3
 80040e2:	bfde      	ittt	le
 80040e4:	2330      	movle	r3, #48	; 0x30
 80040e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040ea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80040ee:	1b52      	subs	r2, r2, r5
 80040f0:	6122      	str	r2, [r4, #16]
 80040f2:	464b      	mov	r3, r9
 80040f4:	4621      	mov	r1, r4
 80040f6:	4640      	mov	r0, r8
 80040f8:	f8cd a000 	str.w	sl, [sp]
 80040fc:	aa03      	add	r2, sp, #12
 80040fe:	f7ff fedf 	bl	8003ec0 <_printf_common>
 8004102:	3001      	adds	r0, #1
 8004104:	d14c      	bne.n	80041a0 <_printf_i+0x200>
 8004106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800410a:	b004      	add	sp, #16
 800410c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004110:	4834      	ldr	r0, [pc, #208]	; (80041e4 <_printf_i+0x244>)
 8004112:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004116:	6829      	ldr	r1, [r5, #0]
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	f851 6b04 	ldr.w	r6, [r1], #4
 800411e:	6029      	str	r1, [r5, #0]
 8004120:	061d      	lsls	r5, r3, #24
 8004122:	d514      	bpl.n	800414e <_printf_i+0x1ae>
 8004124:	07df      	lsls	r7, r3, #31
 8004126:	bf44      	itt	mi
 8004128:	f043 0320 	orrmi.w	r3, r3, #32
 800412c:	6023      	strmi	r3, [r4, #0]
 800412e:	b91e      	cbnz	r6, 8004138 <_printf_i+0x198>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	f023 0320 	bic.w	r3, r3, #32
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	2310      	movs	r3, #16
 800413a:	e7af      	b.n	800409c <_printf_i+0xfc>
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	f043 0320 	orr.w	r3, r3, #32
 8004142:	6023      	str	r3, [r4, #0]
 8004144:	2378      	movs	r3, #120	; 0x78
 8004146:	4828      	ldr	r0, [pc, #160]	; (80041e8 <_printf_i+0x248>)
 8004148:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800414c:	e7e3      	b.n	8004116 <_printf_i+0x176>
 800414e:	0659      	lsls	r1, r3, #25
 8004150:	bf48      	it	mi
 8004152:	b2b6      	uxthmi	r6, r6
 8004154:	e7e6      	b.n	8004124 <_printf_i+0x184>
 8004156:	4615      	mov	r5, r2
 8004158:	e7bb      	b.n	80040d2 <_printf_i+0x132>
 800415a:	682b      	ldr	r3, [r5, #0]
 800415c:	6826      	ldr	r6, [r4, #0]
 800415e:	1d18      	adds	r0, r3, #4
 8004160:	6961      	ldr	r1, [r4, #20]
 8004162:	6028      	str	r0, [r5, #0]
 8004164:	0635      	lsls	r5, r6, #24
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	d501      	bpl.n	800416e <_printf_i+0x1ce>
 800416a:	6019      	str	r1, [r3, #0]
 800416c:	e002      	b.n	8004174 <_printf_i+0x1d4>
 800416e:	0670      	lsls	r0, r6, #25
 8004170:	d5fb      	bpl.n	800416a <_printf_i+0x1ca>
 8004172:	8019      	strh	r1, [r3, #0]
 8004174:	2300      	movs	r3, #0
 8004176:	4615      	mov	r5, r2
 8004178:	6123      	str	r3, [r4, #16]
 800417a:	e7ba      	b.n	80040f2 <_printf_i+0x152>
 800417c:	682b      	ldr	r3, [r5, #0]
 800417e:	2100      	movs	r1, #0
 8004180:	1d1a      	adds	r2, r3, #4
 8004182:	602a      	str	r2, [r5, #0]
 8004184:	681d      	ldr	r5, [r3, #0]
 8004186:	6862      	ldr	r2, [r4, #4]
 8004188:	4628      	mov	r0, r5
 800418a:	f000 f8d9 	bl	8004340 <memchr>
 800418e:	b108      	cbz	r0, 8004194 <_printf_i+0x1f4>
 8004190:	1b40      	subs	r0, r0, r5
 8004192:	6060      	str	r0, [r4, #4]
 8004194:	6863      	ldr	r3, [r4, #4]
 8004196:	6123      	str	r3, [r4, #16]
 8004198:	2300      	movs	r3, #0
 800419a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800419e:	e7a8      	b.n	80040f2 <_printf_i+0x152>
 80041a0:	462a      	mov	r2, r5
 80041a2:	4649      	mov	r1, r9
 80041a4:	4640      	mov	r0, r8
 80041a6:	6923      	ldr	r3, [r4, #16]
 80041a8:	47d0      	blx	sl
 80041aa:	3001      	adds	r0, #1
 80041ac:	d0ab      	beq.n	8004106 <_printf_i+0x166>
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	079b      	lsls	r3, r3, #30
 80041b2:	d413      	bmi.n	80041dc <_printf_i+0x23c>
 80041b4:	68e0      	ldr	r0, [r4, #12]
 80041b6:	9b03      	ldr	r3, [sp, #12]
 80041b8:	4298      	cmp	r0, r3
 80041ba:	bfb8      	it	lt
 80041bc:	4618      	movlt	r0, r3
 80041be:	e7a4      	b.n	800410a <_printf_i+0x16a>
 80041c0:	2301      	movs	r3, #1
 80041c2:	4632      	mov	r2, r6
 80041c4:	4649      	mov	r1, r9
 80041c6:	4640      	mov	r0, r8
 80041c8:	47d0      	blx	sl
 80041ca:	3001      	adds	r0, #1
 80041cc:	d09b      	beq.n	8004106 <_printf_i+0x166>
 80041ce:	3501      	adds	r5, #1
 80041d0:	68e3      	ldr	r3, [r4, #12]
 80041d2:	9903      	ldr	r1, [sp, #12]
 80041d4:	1a5b      	subs	r3, r3, r1
 80041d6:	42ab      	cmp	r3, r5
 80041d8:	dcf2      	bgt.n	80041c0 <_printf_i+0x220>
 80041da:	e7eb      	b.n	80041b4 <_printf_i+0x214>
 80041dc:	2500      	movs	r5, #0
 80041de:	f104 0619 	add.w	r6, r4, #25
 80041e2:	e7f5      	b.n	80041d0 <_printf_i+0x230>
 80041e4:	080046fd 	.word	0x080046fd
 80041e8:	0800470e 	.word	0x0800470e

080041ec <_sbrk_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	2300      	movs	r3, #0
 80041f0:	4d05      	ldr	r5, [pc, #20]	; (8004208 <_sbrk_r+0x1c>)
 80041f2:	4604      	mov	r4, r0
 80041f4:	4608      	mov	r0, r1
 80041f6:	602b      	str	r3, [r5, #0]
 80041f8:	f7fd f89e 	bl	8001338 <_sbrk>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	d102      	bne.n	8004206 <_sbrk_r+0x1a>
 8004200:	682b      	ldr	r3, [r5, #0]
 8004202:	b103      	cbz	r3, 8004206 <_sbrk_r+0x1a>
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	bd38      	pop	{r3, r4, r5, pc}
 8004208:	200001bc 	.word	0x200001bc

0800420c <__sread>:
 800420c:	b510      	push	{r4, lr}
 800420e:	460c      	mov	r4, r1
 8004210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004214:	f000 f906 	bl	8004424 <_read_r>
 8004218:	2800      	cmp	r0, #0
 800421a:	bfab      	itete	ge
 800421c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800421e:	89a3      	ldrhlt	r3, [r4, #12]
 8004220:	181b      	addge	r3, r3, r0
 8004222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004226:	bfac      	ite	ge
 8004228:	6563      	strge	r3, [r4, #84]	; 0x54
 800422a:	81a3      	strhlt	r3, [r4, #12]
 800422c:	bd10      	pop	{r4, pc}

0800422e <__swrite>:
 800422e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004232:	461f      	mov	r7, r3
 8004234:	898b      	ldrh	r3, [r1, #12]
 8004236:	4605      	mov	r5, r0
 8004238:	05db      	lsls	r3, r3, #23
 800423a:	460c      	mov	r4, r1
 800423c:	4616      	mov	r6, r2
 800423e:	d505      	bpl.n	800424c <__swrite+0x1e>
 8004240:	2302      	movs	r3, #2
 8004242:	2200      	movs	r2, #0
 8004244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004248:	f000 f868 	bl	800431c <_lseek_r>
 800424c:	89a3      	ldrh	r3, [r4, #12]
 800424e:	4632      	mov	r2, r6
 8004250:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004254:	81a3      	strh	r3, [r4, #12]
 8004256:	4628      	mov	r0, r5
 8004258:	463b      	mov	r3, r7
 800425a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800425e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004262:	f000 b817 	b.w	8004294 <_write_r>

08004266 <__sseek>:
 8004266:	b510      	push	{r4, lr}
 8004268:	460c      	mov	r4, r1
 800426a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800426e:	f000 f855 	bl	800431c <_lseek_r>
 8004272:	1c43      	adds	r3, r0, #1
 8004274:	89a3      	ldrh	r3, [r4, #12]
 8004276:	bf15      	itete	ne
 8004278:	6560      	strne	r0, [r4, #84]	; 0x54
 800427a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800427e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004282:	81a3      	strheq	r3, [r4, #12]
 8004284:	bf18      	it	ne
 8004286:	81a3      	strhne	r3, [r4, #12]
 8004288:	bd10      	pop	{r4, pc}

0800428a <__sclose>:
 800428a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800428e:	f000 b813 	b.w	80042b8 <_close_r>
	...

08004294 <_write_r>:
 8004294:	b538      	push	{r3, r4, r5, lr}
 8004296:	4604      	mov	r4, r0
 8004298:	4608      	mov	r0, r1
 800429a:	4611      	mov	r1, r2
 800429c:	2200      	movs	r2, #0
 800429e:	4d05      	ldr	r5, [pc, #20]	; (80042b4 <_write_r+0x20>)
 80042a0:	602a      	str	r2, [r5, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	f7fc fffb 	bl	800129e <_write>
 80042a8:	1c43      	adds	r3, r0, #1
 80042aa:	d102      	bne.n	80042b2 <_write_r+0x1e>
 80042ac:	682b      	ldr	r3, [r5, #0]
 80042ae:	b103      	cbz	r3, 80042b2 <_write_r+0x1e>
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	bd38      	pop	{r3, r4, r5, pc}
 80042b4:	200001bc 	.word	0x200001bc

080042b8 <_close_r>:
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	2300      	movs	r3, #0
 80042bc:	4d05      	ldr	r5, [pc, #20]	; (80042d4 <_close_r+0x1c>)
 80042be:	4604      	mov	r4, r0
 80042c0:	4608      	mov	r0, r1
 80042c2:	602b      	str	r3, [r5, #0]
 80042c4:	f7fd f807 	bl	80012d6 <_close>
 80042c8:	1c43      	adds	r3, r0, #1
 80042ca:	d102      	bne.n	80042d2 <_close_r+0x1a>
 80042cc:	682b      	ldr	r3, [r5, #0]
 80042ce:	b103      	cbz	r3, 80042d2 <_close_r+0x1a>
 80042d0:	6023      	str	r3, [r4, #0]
 80042d2:	bd38      	pop	{r3, r4, r5, pc}
 80042d4:	200001bc 	.word	0x200001bc

080042d8 <_fstat_r>:
 80042d8:	b538      	push	{r3, r4, r5, lr}
 80042da:	2300      	movs	r3, #0
 80042dc:	4d06      	ldr	r5, [pc, #24]	; (80042f8 <_fstat_r+0x20>)
 80042de:	4604      	mov	r4, r0
 80042e0:	4608      	mov	r0, r1
 80042e2:	4611      	mov	r1, r2
 80042e4:	602b      	str	r3, [r5, #0]
 80042e6:	f7fd f801 	bl	80012ec <_fstat>
 80042ea:	1c43      	adds	r3, r0, #1
 80042ec:	d102      	bne.n	80042f4 <_fstat_r+0x1c>
 80042ee:	682b      	ldr	r3, [r5, #0]
 80042f0:	b103      	cbz	r3, 80042f4 <_fstat_r+0x1c>
 80042f2:	6023      	str	r3, [r4, #0]
 80042f4:	bd38      	pop	{r3, r4, r5, pc}
 80042f6:	bf00      	nop
 80042f8:	200001bc 	.word	0x200001bc

080042fc <_isatty_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	2300      	movs	r3, #0
 8004300:	4d05      	ldr	r5, [pc, #20]	; (8004318 <_isatty_r+0x1c>)
 8004302:	4604      	mov	r4, r0
 8004304:	4608      	mov	r0, r1
 8004306:	602b      	str	r3, [r5, #0]
 8004308:	f7fc ffff 	bl	800130a <_isatty>
 800430c:	1c43      	adds	r3, r0, #1
 800430e:	d102      	bne.n	8004316 <_isatty_r+0x1a>
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	b103      	cbz	r3, 8004316 <_isatty_r+0x1a>
 8004314:	6023      	str	r3, [r4, #0]
 8004316:	bd38      	pop	{r3, r4, r5, pc}
 8004318:	200001bc 	.word	0x200001bc

0800431c <_lseek_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4604      	mov	r4, r0
 8004320:	4608      	mov	r0, r1
 8004322:	4611      	mov	r1, r2
 8004324:	2200      	movs	r2, #0
 8004326:	4d05      	ldr	r5, [pc, #20]	; (800433c <_lseek_r+0x20>)
 8004328:	602a      	str	r2, [r5, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	f7fc fff7 	bl	800131e <_lseek>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d102      	bne.n	800433a <_lseek_r+0x1e>
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	b103      	cbz	r3, 800433a <_lseek_r+0x1e>
 8004338:	6023      	str	r3, [r4, #0]
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	200001bc 	.word	0x200001bc

08004340 <memchr>:
 8004340:	4603      	mov	r3, r0
 8004342:	b510      	push	{r4, lr}
 8004344:	b2c9      	uxtb	r1, r1
 8004346:	4402      	add	r2, r0
 8004348:	4293      	cmp	r3, r2
 800434a:	4618      	mov	r0, r3
 800434c:	d101      	bne.n	8004352 <memchr+0x12>
 800434e:	2000      	movs	r0, #0
 8004350:	e003      	b.n	800435a <memchr+0x1a>
 8004352:	7804      	ldrb	r4, [r0, #0]
 8004354:	3301      	adds	r3, #1
 8004356:	428c      	cmp	r4, r1
 8004358:	d1f6      	bne.n	8004348 <memchr+0x8>
 800435a:	bd10      	pop	{r4, pc}

0800435c <memcpy>:
 800435c:	440a      	add	r2, r1
 800435e:	4291      	cmp	r1, r2
 8004360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004364:	d100      	bne.n	8004368 <memcpy+0xc>
 8004366:	4770      	bx	lr
 8004368:	b510      	push	{r4, lr}
 800436a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800436e:	4291      	cmp	r1, r2
 8004370:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004374:	d1f9      	bne.n	800436a <memcpy+0xe>
 8004376:	bd10      	pop	{r4, pc}

08004378 <memmove>:
 8004378:	4288      	cmp	r0, r1
 800437a:	b510      	push	{r4, lr}
 800437c:	eb01 0402 	add.w	r4, r1, r2
 8004380:	d902      	bls.n	8004388 <memmove+0x10>
 8004382:	4284      	cmp	r4, r0
 8004384:	4623      	mov	r3, r4
 8004386:	d807      	bhi.n	8004398 <memmove+0x20>
 8004388:	1e43      	subs	r3, r0, #1
 800438a:	42a1      	cmp	r1, r4
 800438c:	d008      	beq.n	80043a0 <memmove+0x28>
 800438e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004396:	e7f8      	b.n	800438a <memmove+0x12>
 8004398:	4601      	mov	r1, r0
 800439a:	4402      	add	r2, r0
 800439c:	428a      	cmp	r2, r1
 800439e:	d100      	bne.n	80043a2 <memmove+0x2a>
 80043a0:	bd10      	pop	{r4, pc}
 80043a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043aa:	e7f7      	b.n	800439c <memmove+0x24>

080043ac <__malloc_lock>:
 80043ac:	4801      	ldr	r0, [pc, #4]	; (80043b4 <__malloc_lock+0x8>)
 80043ae:	f7ff b98f 	b.w	80036d0 <__retarget_lock_acquire_recursive>
 80043b2:	bf00      	nop
 80043b4:	200001b0 	.word	0x200001b0

080043b8 <__malloc_unlock>:
 80043b8:	4801      	ldr	r0, [pc, #4]	; (80043c0 <__malloc_unlock+0x8>)
 80043ba:	f7ff b98a 	b.w	80036d2 <__retarget_lock_release_recursive>
 80043be:	bf00      	nop
 80043c0:	200001b0 	.word	0x200001b0

080043c4 <_realloc_r>:
 80043c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c8:	4680      	mov	r8, r0
 80043ca:	4614      	mov	r4, r2
 80043cc:	460e      	mov	r6, r1
 80043ce:	b921      	cbnz	r1, 80043da <_realloc_r+0x16>
 80043d0:	4611      	mov	r1, r2
 80043d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043d6:	f7ff ba4b 	b.w	8003870 <_malloc_r>
 80043da:	b92a      	cbnz	r2, 80043e8 <_realloc_r+0x24>
 80043dc:	f7ff f9e0 	bl	80037a0 <_free_r>
 80043e0:	4625      	mov	r5, r4
 80043e2:	4628      	mov	r0, r5
 80043e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e8:	f000 f82e 	bl	8004448 <_malloc_usable_size_r>
 80043ec:	4284      	cmp	r4, r0
 80043ee:	4607      	mov	r7, r0
 80043f0:	d802      	bhi.n	80043f8 <_realloc_r+0x34>
 80043f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043f6:	d812      	bhi.n	800441e <_realloc_r+0x5a>
 80043f8:	4621      	mov	r1, r4
 80043fa:	4640      	mov	r0, r8
 80043fc:	f7ff fa38 	bl	8003870 <_malloc_r>
 8004400:	4605      	mov	r5, r0
 8004402:	2800      	cmp	r0, #0
 8004404:	d0ed      	beq.n	80043e2 <_realloc_r+0x1e>
 8004406:	42bc      	cmp	r4, r7
 8004408:	4622      	mov	r2, r4
 800440a:	4631      	mov	r1, r6
 800440c:	bf28      	it	cs
 800440e:	463a      	movcs	r2, r7
 8004410:	f7ff ffa4 	bl	800435c <memcpy>
 8004414:	4631      	mov	r1, r6
 8004416:	4640      	mov	r0, r8
 8004418:	f7ff f9c2 	bl	80037a0 <_free_r>
 800441c:	e7e1      	b.n	80043e2 <_realloc_r+0x1e>
 800441e:	4635      	mov	r5, r6
 8004420:	e7df      	b.n	80043e2 <_realloc_r+0x1e>
	...

08004424 <_read_r>:
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	4604      	mov	r4, r0
 8004428:	4608      	mov	r0, r1
 800442a:	4611      	mov	r1, r2
 800442c:	2200      	movs	r2, #0
 800442e:	4d05      	ldr	r5, [pc, #20]	; (8004444 <_read_r+0x20>)
 8004430:	602a      	str	r2, [r5, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	f7fc ff16 	bl	8001264 <_read>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d102      	bne.n	8004442 <_read_r+0x1e>
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	b103      	cbz	r3, 8004442 <_read_r+0x1e>
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	bd38      	pop	{r3, r4, r5, pc}
 8004444:	200001bc 	.word	0x200001bc

08004448 <_malloc_usable_size_r>:
 8004448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800444c:	1f18      	subs	r0, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	bfbc      	itt	lt
 8004452:	580b      	ldrlt	r3, [r1, r0]
 8004454:	18c0      	addlt	r0, r0, r3
 8004456:	4770      	bx	lr

08004458 <_init>:
 8004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445a:	bf00      	nop
 800445c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445e:	bc08      	pop	{r3}
 8004460:	469e      	mov	lr, r3
 8004462:	4770      	bx	lr

08004464 <_fini>:
 8004464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004466:	bf00      	nop
 8004468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446a:	bc08      	pop	{r3}
 800446c:	469e      	mov	lr, r3
 800446e:	4770      	bx	lr
