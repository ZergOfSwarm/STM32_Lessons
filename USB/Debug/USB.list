
USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006efc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800708c  0800708c  0001708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e0  080070e0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080070e0  080070e0  000170e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070e8  080070e8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070ec  080070ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080070f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007a0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000830  20000830  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b2c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f0b  00000000  00000000  00033bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  00036af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000948  00000000  00000000  00037578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ab0  00000000  00000000  00037ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dcf7  00000000  00000000  0005a970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4e55  00000000  00000000  00068667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012d4bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d64  00000000  00000000  0012d510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007074 	.word	0x08007074

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08007074 	.word	0x08007074

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <CDC_HANDLE>:

CDC_StateTypedef CDC_STATE = CDC_STATE_IDLE;

uint8_t i=0;
void CDC_HANDLE (void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	switch (CDC_STATE)
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <CDC_HANDLE+0x78>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d002      	beq.n	800057c <CDC_HANDLE+0x14>
 8000576:	2b01      	cmp	r3, #1
 8000578:	d01e      	beq.n	80005b8 <CDC_HANDLE+0x50>
		  CDC_STATE = CDC_IDLE;
		  break;
	}

	default:
		  break;
 800057a:	e02d      	b.n	80005d8 <CDC_HANDLE+0x70>
		  USBH_CDC_Stop(&hUsbHostFS);
 800057c:	4819      	ldr	r0, [pc, #100]	; (80005e4 <CDC_HANDLE+0x7c>)
 800057e:	f004 f8f6 	bl	800476e <USBH_CDC_Stop>
		  int len = sprintf ((char *)CDC_TX_Buffer, "DATA = %d", i);
 8000582:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <CDC_HANDLE+0x80>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	4918      	ldr	r1, [pc, #96]	; (80005ec <CDC_HANDLE+0x84>)
 800058a:	4819      	ldr	r0, [pc, #100]	; (80005f0 <CDC_HANDLE+0x88>)
 800058c:	f006 f9fe 	bl	800698c <siprintf>
 8000590:	6078      	str	r0, [r7, #4]
		  if (USBH_CDC_Transmit (&hUsbHostFS, CDC_TX_Buffer, len) == USBH_OK)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	461a      	mov	r2, r3
 8000596:	4916      	ldr	r1, [pc, #88]	; (80005f0 <CDC_HANDLE+0x88>)
 8000598:	4812      	ldr	r0, [pc, #72]	; (80005e4 <CDC_HANDLE+0x7c>)
 800059a:	f004 f94f 	bl	800483c <USBH_CDC_Transmit>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d102      	bne.n	80005aa <CDC_HANDLE+0x42>
			  CDC_STATE = CDC_RECEIVE;
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <CDC_HANDLE+0x78>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
		  i++;
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <CDC_HANDLE+0x80>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	3301      	adds	r3, #1
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <CDC_HANDLE+0x80>)
 80005b4:	701a      	strb	r2, [r3, #0]
		  break;
 80005b6:	e00f      	b.n	80005d8 <CDC_HANDLE+0x70>
		  USBH_CDC_Stop(&hUsbHostFS);
 80005b8:	480a      	ldr	r0, [pc, #40]	; (80005e4 <CDC_HANDLE+0x7c>)
 80005ba:	f004 f8d8 	bl	800476e <USBH_CDC_Stop>
		  USBH_CDC_Receive(&hUsbHostFS, (uint8_t *) CDC_RX_Buffer, RX_BUFF_SIZE);
 80005be:	2240      	movs	r2, #64	; 0x40
 80005c0:	490c      	ldr	r1, [pc, #48]	; (80005f4 <CDC_HANDLE+0x8c>)
 80005c2:	4808      	ldr	r0, [pc, #32]	; (80005e4 <CDC_HANDLE+0x7c>)
 80005c4:	f004 f968 	bl	8004898 <USBH_CDC_Receive>
		  HAL_Delay (1000);
 80005c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005cc:	f000 fa38 	bl	8000a40 <HAL_Delay>
		  CDC_STATE = CDC_IDLE;
 80005d0:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <CDC_HANDLE+0x78>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
		  break;
 80005d6:	bf00      	nop
	}
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200000ac 	.word	0x200000ac
 80005e4:	20000144 	.word	0x20000144
 80005e8:	200000ad 	.word	0x200000ad
 80005ec:	0800708c 	.word	0x0800708c
 80005f0:	200000c0 	.word	0x200000c0
 80005f4:	20000100 	.word	0x20000100

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 f9ae 	bl	800095c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f810 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 f878 	bl	80006f8 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000608:	f005 fdbc 	bl	8006184 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800060c:	f005 fde0 	bl	80061d0 <MX_USB_HOST_Process>

        if (Appli_state == APPLICATION_READY)
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <main+0x28>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d1f9      	bne.n	800060c <main+0x14>
        {
        	CDC_HANDLE();
 8000618:	f7ff ffa6 	bl	8000568 <CDC_HANDLE>
    MX_USB_HOST_Process();
 800061c:	e7f6      	b.n	800060c <main+0x14>
 800061e:	bf00      	nop
 8000620:	200000b4 	.word	0x200000b4

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f006 f8e8 	bl	8006808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a27      	ldr	r2, [pc, #156]	; (80006f0 <SystemClock_Config+0xcc>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemClock_Config+0xd0>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000694:	2319      	movs	r3, #25
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000698:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800069c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a2:	2307      	movs	r3, #7
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 fa24 	bl	8002af8 <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006b6:	f000 f87d 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2302      	movs	r3, #2
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2105      	movs	r1, #5
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 fc85 	bl	8002fe8 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e4:	f000 f866 	bl	80007b4 <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3750      	adds	r7, #80	; 0x50
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b26      	ldr	r3, [pc, #152]	; (80007ac <MX_GPIO_Init+0xb4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a25      	ldr	r2, [pc, #148]	; (80007ac <MX_GPIO_Init+0xb4>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <MX_GPIO_Init+0xb4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_GPIO_Init+0xb4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <MX_GPIO_Init+0xb4>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_GPIO_Init+0xb4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_GPIO_Init+0xb4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <MX_GPIO_Init+0xb4>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_GPIO_Init+0xb4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_GPIO_Init+0xb4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a10      	ldr	r2, [pc, #64]	; (80007ac <MX_GPIO_Init+0xb4>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_GPIO_Init+0xb4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2101      	movs	r1, #1
 8000782:	480b      	ldr	r0, [pc, #44]	; (80007b0 <MX_GPIO_Init+0xb8>)
 8000784:	f000 fc2e 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000788:	2301      	movs	r3, #1
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_GPIO_Init+0xb8>)
 80007a0:	f000 fa84 	bl	8000cac <HAL_GPIO_Init>

}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020800 	.word	0x40020800

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	e7fe      	b.n	80007bc <Error_Handler+0x8>
	...

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	4a0f      	ldr	r2, [pc, #60]	; (800080c <HAL_MspInit+0x4c>)
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d4:	6453      	str	r3, [r2, #68]	; 0x44
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <HAL_MspInit+0x4c>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <HAL_MspInit+0x4c>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_MspInit+0x4c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <NMI_Handler+0x4>

08000816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <HardFault_Handler+0x4>

0800081c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <MemManage_Handler+0x4>

08000822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <UsageFault_Handler+0x4>

0800082e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085c:	f000 f8d0 	bl	8000a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <OTG_FS_IRQHandler+0x10>)
 800086a:	f000 fe3f 	bl	80014ec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000051c 	.word	0x2000051c

08000878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <_sbrk+0x5c>)
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <_sbrk+0x60>)
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <_sbrk+0x64>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <_sbrk+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d207      	bcs.n	80008b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a8:	f005 ff74 	bl	8006794 <__errno>
 80008ac:	4603      	mov	r3, r0
 80008ae:	220c      	movs	r2, #12
 80008b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008b6:	e009      	b.n	80008cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <_sbrk+0x64>)
 80008c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20020000 	.word	0x20020000
 80008d8:	00000400 	.word	0x00000400
 80008dc:	200000b0 	.word	0x200000b0
 80008e0:	20000830 	.word	0x20000830

080008e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <SystemInit+0x20>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a05      	ldr	r2, [pc, #20]	; (8000904 <SystemInit+0x20>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000940 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800090e:	490e      	ldr	r1, [pc, #56]	; (8000948 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000910:	4a0e      	ldr	r2, [pc, #56]	; (800094c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000924:	4c0b      	ldr	r4, [pc, #44]	; (8000954 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000932:	f7ff ffd7 	bl	80008e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000936:	f005 ff33 	bl	80067a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093a:	f7ff fe5d 	bl	80005f8 <main>
  bx  lr    
 800093e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800094c:	080070f0 	.word	0x080070f0
  ldr r2, =_sbss
 8000950:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000954:	20000830 	.word	0x20000830

08000958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC_IRQHandler>
	...

0800095c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0d      	ldr	r2, [pc, #52]	; (800099c <HAL_Init+0x40>)
 8000966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800096a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <HAL_Init+0x40>)
 8000972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a07      	ldr	r2, [pc, #28]	; (800099c <HAL_Init+0x40>)
 800097e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 f94f 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098a:	200f      	movs	r0, #15
 800098c:	f000 f808 	bl	80009a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000990:	f7ff ff16 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023c00 	.word	0x40023c00

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_InitTick+0x54>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_InitTick+0x58>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f967 	bl	8000c92 <HAL_SYSTICK_Config>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00e      	b.n	80009ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d80a      	bhi.n	80009ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009dc:	f000 f92f 	bl	8000c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e0:	4a06      	ldr	r2, [pc, #24]	; (80009fc <HAL_InitTick+0x5c>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e000      	b.n	80009ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000004 	.word	0x20000004

08000a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_IncTick+0x20>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_IncTick+0x24>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_IncTick+0x24>)
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000140 	.word	0x20000140

08000a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_GetTick+0x14>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000140 	.word	0x20000140

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a48:	f7ff ffee 	bl	8000a28 <HAL_GetTick>
 8000a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a58:	d005      	beq.n	8000a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <HAL_Delay+0x44>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a66:	bf00      	nop
 8000a68:	f7ff ffde 	bl	8000a28 <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d8f7      	bhi.n	8000a68 <HAL_Delay+0x28>
  {
  }
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db0b      	blt.n	8000b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f003 021f 	and.w	r2, r3, #31
 8000b04:	4907      	ldr	r1, [pc, #28]	; (8000b24 <__NVIC_EnableIRQ+0x38>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	; (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4908      	ldr	r1, [pc, #32]	; (8000b78 <__NVIC_SetPriority+0x50>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
         );
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	; 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf4:	d301      	bcc.n	8000bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00f      	b.n	8000c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <SysTick_Config+0x40>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c02:	210f      	movs	r1, #15
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c08:	f7ff ff8e 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <SysTick_Config+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SysTick_Config+0x40>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff29 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c50:	f7ff ff3e 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	6978      	ldr	r0, [r7, #20]
 8000c5c:	f7ff ff8e 	bl	8000b7c <NVIC_EncodePriority>
 8000c60:	4602      	mov	r2, r0
 8000c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff5d 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff31 	bl	8000aec <__NVIC_EnableIRQ>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffa2 	bl	8000be4 <SysTick_Config>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	e16b      	b.n	8000fa0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f040 815a 	bne.w	8000f9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d005      	beq.n	8000cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d130      	bne.n	8000d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	091b      	lsrs	r3, r3, #4
 8000d4a:	f003 0201 	and.w	r2, r3, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d017      	beq.n	8000d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d123      	bne.n	8000df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	08da      	lsrs	r2, r3, #3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3208      	adds	r2, #8
 8000db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	08da      	lsrs	r2, r3, #3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3208      	adds	r2, #8
 8000dea:	69b9      	ldr	r1, [r7, #24]
 8000dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0203 	and.w	r2, r3, #3
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 80b4 	beq.w	8000f9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b60      	ldr	r3, [pc, #384]	; (8000fb8 <HAL_GPIO_Init+0x30c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a5f      	ldr	r2, [pc, #380]	; (8000fb8 <HAL_GPIO_Init+0x30c>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b5d      	ldr	r3, [pc, #372]	; (8000fb8 <HAL_GPIO_Init+0x30c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4e:	4a5b      	ldr	r2, [pc, #364]	; (8000fbc <HAL_GPIO_Init+0x310>)
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a52      	ldr	r2, [pc, #328]	; (8000fc0 <HAL_GPIO_Init+0x314>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d02b      	beq.n	8000ed2 <HAL_GPIO_Init+0x226>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a51      	ldr	r2, [pc, #324]	; (8000fc4 <HAL_GPIO_Init+0x318>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d025      	beq.n	8000ece <HAL_GPIO_Init+0x222>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a50      	ldr	r2, [pc, #320]	; (8000fc8 <HAL_GPIO_Init+0x31c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d01f      	beq.n	8000eca <HAL_GPIO_Init+0x21e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4f      	ldr	r2, [pc, #316]	; (8000fcc <HAL_GPIO_Init+0x320>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d019      	beq.n	8000ec6 <HAL_GPIO_Init+0x21a>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4e      	ldr	r2, [pc, #312]	; (8000fd0 <HAL_GPIO_Init+0x324>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d013      	beq.n	8000ec2 <HAL_GPIO_Init+0x216>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4d      	ldr	r2, [pc, #308]	; (8000fd4 <HAL_GPIO_Init+0x328>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00d      	beq.n	8000ebe <HAL_GPIO_Init+0x212>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4c      	ldr	r2, [pc, #304]	; (8000fd8 <HAL_GPIO_Init+0x32c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d007      	beq.n	8000eba <HAL_GPIO_Init+0x20e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4b      	ldr	r2, [pc, #300]	; (8000fdc <HAL_GPIO_Init+0x330>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_GPIO_Init+0x20a>
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	e00e      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	e00c      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000eba:	2306      	movs	r3, #6
 8000ebc:	e00a      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	e008      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e006      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e004      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	e002      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	69fa      	ldr	r2, [r7, #28]
 8000ed6:	f002 0203 	and.w	r2, r2, #3
 8000eda:	0092      	lsls	r2, r2, #2
 8000edc:	4093      	lsls	r3, r2
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ee4:	4935      	ldr	r1, [pc, #212]	; (8000fbc <HAL_GPIO_Init+0x310>)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef2:	4b3b      	ldr	r3, [pc, #236]	; (8000fe0 <HAL_GPIO_Init+0x334>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f16:	4a32      	ldr	r2, [pc, #200]	; (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f40:	4a27      	ldr	r2, [pc, #156]	; (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6a:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f94:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	2b0f      	cmp	r3, #15
 8000fa4:	f67f ae90 	bls.w	8000cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40013800 	.word	0x40013800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020c00 	.word	0x40020c00
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40021400 	.word	0x40021400
 8000fd8:	40021800 	.word	0x40021800
 8000fdc:	40021c00 	.word	0x40021c00
 8000fe0:	40013c00 	.word	0x40013c00

08000fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff4:	787b      	ldrb	r3, [r7, #1]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001000:	e003      	b.n	800100a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	041a      	lsls	r2, r3, #16
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	619a      	str	r2, [r3, #24]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001016:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001018:	b08f      	sub	sp, #60	; 0x3c
 800101a:	af0a      	add	r7, sp, #40	; 0x28
 800101c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e054      	b.n	80010d2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d106      	bne.n	8001048 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f005 f8fc 	bl	8006240 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2203      	movs	r2, #3
 800104c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f002 f9cc 	bl	8003404 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	687e      	ldr	r6, [r7, #4]
 8001074:	466d      	mov	r5, sp
 8001076:	f106 0410 	add.w	r4, r6, #16
 800107a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800107c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800107e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001082:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001086:	e885 0003 	stmia.w	r5, {r0, r1}
 800108a:	1d33      	adds	r3, r6, #4
 800108c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800108e:	6838      	ldr	r0, [r7, #0]
 8001090:	f002 f946 	bl	8003320 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	4618      	mov	r0, r3
 800109c:	f002 f9c3 	bl	8003426 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	687e      	ldr	r6, [r7, #4]
 80010a8:	466d      	mov	r5, sp
 80010aa:	f106 0410 	add.w	r4, r6, #16
 80010ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80010be:	1d33      	adds	r3, r6, #4
 80010c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c2:	6838      	ldr	r0, [r7, #0]
 80010c4:	f002 fb2a 	bl	800371c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010da <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80010da:	b590      	push	{r4, r7, lr}
 80010dc:	b089      	sub	sp, #36	; 0x24
 80010de:	af04      	add	r7, sp, #16
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	4608      	mov	r0, r1
 80010e4:	4611      	mov	r1, r2
 80010e6:	461a      	mov	r2, r3
 80010e8:	4603      	mov	r3, r0
 80010ea:	70fb      	strb	r3, [r7, #3]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70bb      	strb	r3, [r7, #2]
 80010f0:	4613      	mov	r3, r2
 80010f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_HCD_HC_Init+0x28>
 80010fe:	2302      	movs	r3, #2
 8001100:	e076      	b.n	80011f0 <HAL_HCD_HC_Init+0x116>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	212c      	movs	r1, #44	; 0x2c
 8001110:	fb01 f303 	mul.w	r3, r1, r3
 8001114:	4413      	add	r3, r2
 8001116:	333d      	adds	r3, #61	; 0x3d
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	212c      	movs	r1, #44	; 0x2c
 8001122:	fb01 f303 	mul.w	r3, r1, r3
 8001126:	4413      	add	r3, r2
 8001128:	3338      	adds	r3, #56	; 0x38
 800112a:	787a      	ldrb	r2, [r7, #1]
 800112c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	212c      	movs	r1, #44	; 0x2c
 8001134:	fb01 f303 	mul.w	r3, r1, r3
 8001138:	4413      	add	r3, r2
 800113a:	3340      	adds	r3, #64	; 0x40
 800113c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800113e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	212c      	movs	r1, #44	; 0x2c
 8001146:	fb01 f303 	mul.w	r3, r1, r3
 800114a:	4413      	add	r3, r2
 800114c:	3339      	adds	r3, #57	; 0x39
 800114e:	78fa      	ldrb	r2, [r7, #3]
 8001150:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	212c      	movs	r1, #44	; 0x2c
 8001158:	fb01 f303 	mul.w	r3, r1, r3
 800115c:	4413      	add	r3, r2
 800115e:	333f      	adds	r3, #63	; 0x3f
 8001160:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001164:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	78ba      	ldrb	r2, [r7, #2]
 800116a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800116e:	b2d0      	uxtb	r0, r2
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	212c      	movs	r1, #44	; 0x2c
 8001174:	fb01 f303 	mul.w	r3, r1, r3
 8001178:	4413      	add	r3, r2
 800117a:	333a      	adds	r3, #58	; 0x3a
 800117c:	4602      	mov	r2, r0
 800117e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001180:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001184:	2b00      	cmp	r3, #0
 8001186:	da09      	bge.n	800119c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	212c      	movs	r1, #44	; 0x2c
 800118e:	fb01 f303 	mul.w	r3, r1, r3
 8001192:	4413      	add	r3, r2
 8001194:	333b      	adds	r3, #59	; 0x3b
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	e008      	b.n	80011ae <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	212c      	movs	r1, #44	; 0x2c
 80011a2:	fb01 f303 	mul.w	r3, r1, r3
 80011a6:	4413      	add	r3, r2
 80011a8:	333b      	adds	r3, #59	; 0x3b
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	212c      	movs	r1, #44	; 0x2c
 80011b4:	fb01 f303 	mul.w	r3, r1, r3
 80011b8:	4413      	add	r3, r2
 80011ba:	333c      	adds	r3, #60	; 0x3c
 80011bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011c0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	787c      	ldrb	r4, [r7, #1]
 80011c8:	78ba      	ldrb	r2, [r7, #2]
 80011ca:	78f9      	ldrb	r1, [r7, #3]
 80011cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	4623      	mov	r3, r4
 80011de:	f002 fc17 	bl	8003a10 <USB_HC_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd90      	pop	{r4, r7, pc}

080011f8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800120e:	2b01      	cmp	r3, #1
 8001210:	d101      	bne.n	8001216 <HAL_HCD_HC_Halt+0x1e>
 8001212:	2302      	movs	r3, #2
 8001214:	e00f      	b.n	8001236 <HAL_HCD_HC_Halt+0x3e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	78fa      	ldrb	r2, [r7, #3]
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f002 fe53 	bl	8003ed2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001234:	7bfb      	ldrb	r3, [r7, #15]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	4608      	mov	r0, r1
 800124a:	4611      	mov	r1, r2
 800124c:	461a      	mov	r2, r3
 800124e:	4603      	mov	r3, r0
 8001250:	70fb      	strb	r3, [r7, #3]
 8001252:	460b      	mov	r3, r1
 8001254:	70bb      	strb	r3, [r7, #2]
 8001256:	4613      	mov	r3, r2
 8001258:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	212c      	movs	r1, #44	; 0x2c
 8001260:	fb01 f303 	mul.w	r3, r1, r3
 8001264:	4413      	add	r3, r2
 8001266:	333b      	adds	r3, #59	; 0x3b
 8001268:	78ba      	ldrb	r2, [r7, #2]
 800126a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	212c      	movs	r1, #44	; 0x2c
 8001272:	fb01 f303 	mul.w	r3, r1, r3
 8001276:	4413      	add	r3, r2
 8001278:	333f      	adds	r3, #63	; 0x3f
 800127a:	787a      	ldrb	r2, [r7, #1]
 800127c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800127e:	7c3b      	ldrb	r3, [r7, #16]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d112      	bne.n	80012aa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	212c      	movs	r1, #44	; 0x2c
 800128a:	fb01 f303 	mul.w	r3, r1, r3
 800128e:	4413      	add	r3, r2
 8001290:	3342      	adds	r3, #66	; 0x42
 8001292:	2203      	movs	r2, #3
 8001294:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	212c      	movs	r1, #44	; 0x2c
 800129c:	fb01 f303 	mul.w	r3, r1, r3
 80012a0:	4413      	add	r3, r2
 80012a2:	333d      	adds	r3, #61	; 0x3d
 80012a4:	7f3a      	ldrb	r2, [r7, #28]
 80012a6:	701a      	strb	r2, [r3, #0]
 80012a8:	e008      	b.n	80012bc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	212c      	movs	r1, #44	; 0x2c
 80012b0:	fb01 f303 	mul.w	r3, r1, r3
 80012b4:	4413      	add	r3, r2
 80012b6:	3342      	adds	r3, #66	; 0x42
 80012b8:	2202      	movs	r2, #2
 80012ba:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80012bc:	787b      	ldrb	r3, [r7, #1]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	f200 80c6 	bhi.w	8001450 <HAL_HCD_HC_SubmitRequest+0x210>
 80012c4:	a201      	add	r2, pc, #4	; (adr r2, 80012cc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80012c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ca:	bf00      	nop
 80012cc:	080012dd 	.word	0x080012dd
 80012d0:	0800143d 	.word	0x0800143d
 80012d4:	08001341 	.word	0x08001341
 80012d8:	080013bf 	.word	0x080013bf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80012dc:	7c3b      	ldrb	r3, [r7, #16]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	f040 80b8 	bne.w	8001454 <HAL_HCD_HC_SubmitRequest+0x214>
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 80b4 	bne.w	8001454 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80012ec:	8b3b      	ldrh	r3, [r7, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d108      	bne.n	8001304 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80012f2:	78fb      	ldrb	r3, [r7, #3]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	212c      	movs	r1, #44	; 0x2c
 80012f8:	fb01 f303 	mul.w	r3, r1, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	3355      	adds	r3, #85	; 0x55
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	212c      	movs	r1, #44	; 0x2c
 800130a:	fb01 f303 	mul.w	r3, r1, r3
 800130e:	4413      	add	r3, r2
 8001310:	3355      	adds	r3, #85	; 0x55
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d109      	bne.n	800132c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	212c      	movs	r1, #44	; 0x2c
 800131e:	fb01 f303 	mul.w	r3, r1, r3
 8001322:	4413      	add	r3, r2
 8001324:	3342      	adds	r3, #66	; 0x42
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800132a:	e093      	b.n	8001454 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	212c      	movs	r1, #44	; 0x2c
 8001332:	fb01 f303 	mul.w	r3, r1, r3
 8001336:	4413      	add	r3, r2
 8001338:	3342      	adds	r3, #66	; 0x42
 800133a:	2202      	movs	r2, #2
 800133c:	701a      	strb	r2, [r3, #0]
      break;
 800133e:	e089      	b.n	8001454 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001340:	78bb      	ldrb	r3, [r7, #2]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d11d      	bne.n	8001382 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	212c      	movs	r1, #44	; 0x2c
 800134c:	fb01 f303 	mul.w	r3, r1, r3
 8001350:	4413      	add	r3, r2
 8001352:	3355      	adds	r3, #85	; 0x55
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d109      	bne.n	800136e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	212c      	movs	r1, #44	; 0x2c
 8001360:	fb01 f303 	mul.w	r3, r1, r3
 8001364:	4413      	add	r3, r2
 8001366:	3342      	adds	r3, #66	; 0x42
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800136c:	e073      	b.n	8001456 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	212c      	movs	r1, #44	; 0x2c
 8001374:	fb01 f303 	mul.w	r3, r1, r3
 8001378:	4413      	add	r3, r2
 800137a:	3342      	adds	r3, #66	; 0x42
 800137c:	2202      	movs	r2, #2
 800137e:	701a      	strb	r2, [r3, #0]
      break;
 8001380:	e069      	b.n	8001456 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	212c      	movs	r1, #44	; 0x2c
 8001388:	fb01 f303 	mul.w	r3, r1, r3
 800138c:	4413      	add	r3, r2
 800138e:	3354      	adds	r3, #84	; 0x54
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001396:	78fb      	ldrb	r3, [r7, #3]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	212c      	movs	r1, #44	; 0x2c
 800139c:	fb01 f303 	mul.w	r3, r1, r3
 80013a0:	4413      	add	r3, r2
 80013a2:	3342      	adds	r3, #66	; 0x42
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
      break;
 80013a8:	e055      	b.n	8001456 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	212c      	movs	r1, #44	; 0x2c
 80013b0:	fb01 f303 	mul.w	r3, r1, r3
 80013b4:	4413      	add	r3, r2
 80013b6:	3342      	adds	r3, #66	; 0x42
 80013b8:	2202      	movs	r2, #2
 80013ba:	701a      	strb	r2, [r3, #0]
      break;
 80013bc:	e04b      	b.n	8001456 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80013be:	78bb      	ldrb	r3, [r7, #2]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d11d      	bne.n	8001400 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	212c      	movs	r1, #44	; 0x2c
 80013ca:	fb01 f303 	mul.w	r3, r1, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	3355      	adds	r3, #85	; 0x55
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d109      	bne.n	80013ec <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	212c      	movs	r1, #44	; 0x2c
 80013de:	fb01 f303 	mul.w	r3, r1, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	3342      	adds	r3, #66	; 0x42
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80013ea:	e034      	b.n	8001456 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	212c      	movs	r1, #44	; 0x2c
 80013f2:	fb01 f303 	mul.w	r3, r1, r3
 80013f6:	4413      	add	r3, r2
 80013f8:	3342      	adds	r3, #66	; 0x42
 80013fa:	2202      	movs	r2, #2
 80013fc:	701a      	strb	r2, [r3, #0]
      break;
 80013fe:	e02a      	b.n	8001456 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	212c      	movs	r1, #44	; 0x2c
 8001406:	fb01 f303 	mul.w	r3, r1, r3
 800140a:	4413      	add	r3, r2
 800140c:	3354      	adds	r3, #84	; 0x54
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d109      	bne.n	8001428 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	212c      	movs	r1, #44	; 0x2c
 800141a:	fb01 f303 	mul.w	r3, r1, r3
 800141e:	4413      	add	r3, r2
 8001420:	3342      	adds	r3, #66	; 0x42
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
      break;
 8001426:	e016      	b.n	8001456 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	212c      	movs	r1, #44	; 0x2c
 800142e:	fb01 f303 	mul.w	r3, r1, r3
 8001432:	4413      	add	r3, r2
 8001434:	3342      	adds	r3, #66	; 0x42
 8001436:	2202      	movs	r2, #2
 8001438:	701a      	strb	r2, [r3, #0]
      break;
 800143a:	e00c      	b.n	8001456 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	212c      	movs	r1, #44	; 0x2c
 8001442:	fb01 f303 	mul.w	r3, r1, r3
 8001446:	4413      	add	r3, r2
 8001448:	3342      	adds	r3, #66	; 0x42
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
      break;
 800144e:	e002      	b.n	8001456 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001450:	bf00      	nop
 8001452:	e000      	b.n	8001456 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001454:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	212c      	movs	r1, #44	; 0x2c
 800145c:	fb01 f303 	mul.w	r3, r1, r3
 8001460:	4413      	add	r3, r2
 8001462:	3344      	adds	r3, #68	; 0x44
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	8b3a      	ldrh	r2, [r7, #24]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	202c      	movs	r0, #44	; 0x2c
 8001470:	fb00 f303 	mul.w	r3, r0, r3
 8001474:	440b      	add	r3, r1
 8001476:	334c      	adds	r3, #76	; 0x4c
 8001478:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	212c      	movs	r1, #44	; 0x2c
 8001480:	fb01 f303 	mul.w	r3, r1, r3
 8001484:	4413      	add	r3, r2
 8001486:	3360      	adds	r3, #96	; 0x60
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	212c      	movs	r1, #44	; 0x2c
 8001492:	fb01 f303 	mul.w	r3, r1, r3
 8001496:	4413      	add	r3, r2
 8001498:	3350      	adds	r3, #80	; 0x50
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	212c      	movs	r1, #44	; 0x2c
 80014a4:	fb01 f303 	mul.w	r3, r1, r3
 80014a8:	4413      	add	r3, r2
 80014aa:	3339      	adds	r3, #57	; 0x39
 80014ac:	78fa      	ldrb	r2, [r7, #3]
 80014ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	212c      	movs	r1, #44	; 0x2c
 80014b6:	fb01 f303 	mul.w	r3, r1, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	3361      	adds	r3, #97	; 0x61
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6818      	ldr	r0, [r3, #0]
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	222c      	movs	r2, #44	; 0x2c
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	3338      	adds	r3, #56	; 0x38
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	18d1      	adds	r1, r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	f002 fba6 	bl	8003c2c <USB_HC_StartXfer>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop

080014ec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f002 f8c9 	bl	800369a <USB_GetMode>
 8001508:	4603      	mov	r3, r0
 800150a:	2b01      	cmp	r3, #1
 800150c:	f040 80f6 	bne.w	80016fc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f002 f8ad 	bl	8003674 <USB_ReadInterrupts>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 80ec 	beq.w	80016fa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f002 f8a4 	bl	8003674 <USB_ReadInterrupts>
 800152c:	4603      	mov	r3, r0
 800152e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001532:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001536:	d104      	bne.n	8001542 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001540:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f002 f894 	bl	8003674 <USB_ReadInterrupts>
 800154c:	4603      	mov	r3, r0
 800154e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001556:	d104      	bne.n	8001562 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001560:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f002 f884 	bl	8003674 <USB_ReadInterrupts>
 800156c:	4603      	mov	r3, r0
 800156e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001572:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001576:	d104      	bne.n	8001582 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001580:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f002 f874 	bl	8003674 <USB_ReadInterrupts>
 800158c:	4603      	mov	r3, r0
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b02      	cmp	r3, #2
 8001594:	d103      	bne.n	800159e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2202      	movs	r2, #2
 800159c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 f866 	bl	8003674 <USB_ReadInterrupts>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015b2:	d11c      	bne.n	80015ee <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015bc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10f      	bne.n	80015ee <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80015ce:	2110      	movs	r1, #16
 80015d0:	6938      	ldr	r0, [r7, #16]
 80015d2:	f001 ff75 	bl	80034c0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80015d6:	6938      	ldr	r0, [r7, #16]
 80015d8:	f001 ff96 	bl	8003508 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2101      	movs	r1, #1
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 f94e 	bl	8003884 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f004 fea7 	bl	800633c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 f83e 	bl	8003674 <USB_ReadInterrupts>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001602:	d102      	bne.n	800160a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f001 fa03 	bl	8002a10 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f002 f830 	bl	8003674 <USB_ReadInterrupts>
 8001614:	4603      	mov	r3, r0
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b08      	cmp	r3, #8
 800161c:	d106      	bne.n	800162c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f004 fe70 	bl	8006304 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2208      	movs	r2, #8
 800162a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f002 f81f 	bl	8003674 <USB_ReadInterrupts>
 8001636:	4603      	mov	r3, r0
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b10      	cmp	r3, #16
 800163e:	d101      	bne.n	8001644 <HAL_HCD_IRQHandler+0x158>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_HCD_IRQHandler+0x15a>
 8001644:	2300      	movs	r3, #0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d012      	beq.n	8001670 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699a      	ldr	r2, [r3, #24]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0210 	bic.w	r2, r2, #16
 8001658:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f001 f906 	bl	800286c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	699a      	ldr	r2, [r3, #24]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0210 	orr.w	r2, r2, #16
 800166e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f001 fffd 	bl	8003674 <USB_ReadInterrupts>
 800167a:	4603      	mov	r3, r0
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001684:	d13a      	bne.n	80016fc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f002 fc10 	bl	8003eb0 <USB_HC_ReadInterrupt>
 8001690:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e025      	b.n	80016e4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d018      	beq.n	80016de <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	015a      	lsls	r2, r3, #5
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016c2:	d106      	bne.n	80016d2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	4619      	mov	r1, r3
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f8ab 	bl	8001826 <HCD_HC_IN_IRQHandler>
 80016d0:	e005      	b.n	80016de <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 fcc6 	bl	800206a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d3d4      	bcc.n	8001698 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016f6:	615a      	str	r2, [r3, #20]
 80016f8:	e000      	b.n	80016fc <HAL_HCD_IRQHandler+0x210>
      return;
 80016fa:	bf00      	nop
    }
  }
}
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_HCD_Start+0x16>
 8001714:	2302      	movs	r3, #2
 8001716:	e013      	b.n	8001740 <HAL_HCD_Start+0x3e>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	4618      	mov	r0, r3
 8001728:	f002 f910 	bl	800394c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f001 fe56 	bl	80033e2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_HCD_Stop+0x16>
 800175a:	2302      	movs	r3, #2
 800175c:	e00d      	b.n	800177a <HAL_HCD_Stop+0x32>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fd0a 	bl	8004184 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f002 f8b2 	bl	80038f8 <USB_ResetPort>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	212c      	movs	r1, #44	; 0x2c
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	3360      	adds	r3, #96	; 0x60
 80017b8:	781b      	ldrb	r3, [r3, #0]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	212c      	movs	r1, #44	; 0x2c
 80017d8:	fb01 f303 	mul.w	r3, r1, r3
 80017dc:	4413      	add	r3, r2
 80017de:	3350      	adds	r3, #80	; 0x50
 80017e0:	681b      	ldr	r3, [r3, #0]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 f8f6 	bl	80039ec <USB_GetCurrentFrame>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f002 f8d1 	bl	80039be <USB_GetHostSpeed>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	015a      	lsls	r2, r3, #5
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4413      	add	r3, r2
 8001848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b04      	cmp	r3, #4
 8001854:	d119      	bne.n	800188a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	015a      	lsls	r2, r3, #5
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4413      	add	r3, r2
 800185e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001862:	461a      	mov	r2, r3
 8001864:	2304      	movs	r3, #4
 8001866:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	015a      	lsls	r2, r3, #5
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4413      	add	r3, r2
 8001870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	0151      	lsls	r1, r2, #5
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	440a      	add	r2, r1
 800187e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001882:	f043 0302 	orr.w	r3, r3, #2
 8001886:	60d3      	str	r3, [r2, #12]
 8001888:	e101      	b.n	8001a8e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4413      	add	r3, r2
 8001892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018a0:	d12b      	bne.n	80018fa <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	015a      	lsls	r2, r3, #5
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4413      	add	r3, r2
 80018aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ae:	461a      	mov	r2, r3
 80018b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	3361      	adds	r3, #97	; 0x61
 80018c4:	2207      	movs	r2, #7
 80018c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	015a      	lsls	r2, r3, #5
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	0151      	lsls	r1, r2, #5
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	440a      	add	r2, r1
 80018de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 faed 	bl	8003ed2 <USB_HC_Halt>
 80018f8:	e0c9      	b.n	8001a8e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	015a      	lsls	r2, r3, #5
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4413      	add	r3, r2
 8001902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0320 	and.w	r3, r3, #32
 800190c:	2b20      	cmp	r3, #32
 800190e:	d109      	bne.n	8001924 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	015a      	lsls	r2, r3, #5
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4413      	add	r3, r2
 8001918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800191c:	461a      	mov	r2, r3
 800191e:	2320      	movs	r3, #32
 8001920:	6093      	str	r3, [r2, #8]
 8001922:	e0b4      	b.n	8001a8e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	015a      	lsls	r2, r3, #5
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4413      	add	r3, r2
 800192c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b08      	cmp	r3, #8
 8001938:	d133      	bne.n	80019a2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4413      	add	r3, r2
 8001942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	0151      	lsls	r1, r2, #5
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	440a      	add	r2, r1
 8001950:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	212c      	movs	r1, #44	; 0x2c
 8001960:	fb01 f303 	mul.w	r3, r1, r3
 8001964:	4413      	add	r3, r2
 8001966:	3361      	adds	r3, #97	; 0x61
 8001968:	2205      	movs	r2, #5
 800196a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	015a      	lsls	r2, r3, #5
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4413      	add	r3, r2
 8001974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001978:	461a      	mov	r2, r3
 800197a:	2310      	movs	r3, #16
 800197c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	015a      	lsls	r2, r3, #5
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4413      	add	r3, r2
 8001986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800198a:	461a      	mov	r2, r3
 800198c:	2308      	movs	r3, #8
 800198e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f002 fa99 	bl	8003ed2 <USB_HC_Halt>
 80019a0:	e075      	b.n	8001a8e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b8:	d134      	bne.n	8001a24 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	0151      	lsls	r1, r2, #5
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	440a      	add	r2, r1
 80019d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	212c      	movs	r1, #44	; 0x2c
 80019e0:	fb01 f303 	mul.w	r3, r1, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	3361      	adds	r3, #97	; 0x61
 80019e8:	2208      	movs	r2, #8
 80019ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	015a      	lsls	r2, r3, #5
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4413      	add	r3, r2
 80019f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f8:	461a      	mov	r2, r3
 80019fa:	2310      	movs	r3, #16
 80019fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a10:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 fa58 	bl	8003ed2 <USB_HC_Halt>
 8001a22:	e034      	b.n	8001a8e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	015a      	lsls	r2, r3, #5
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a36:	2b80      	cmp	r3, #128	; 0x80
 8001a38:	d129      	bne.n	8001a8e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	015a      	lsls	r2, r3, #5
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4413      	add	r3, r2
 8001a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	0151      	lsls	r1, r2, #5
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	440a      	add	r2, r1
 8001a50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	212c      	movs	r1, #44	; 0x2c
 8001a60:	fb01 f303 	mul.w	r3, r1, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	3361      	adds	r3, #97	; 0x61
 8001a68:	2206      	movs	r2, #6
 8001a6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f002 fa2b 	bl	8003ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	015a      	lsls	r2, r3, #5
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	015a      	lsls	r2, r3, #5
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa4:	d122      	bne.n	8001aec <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	015a      	lsls	r2, r3, #5
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	0151      	lsls	r1, r2, #5
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	440a      	add	r2, r1
 8001abc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 f9fe 	bl	8003ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	015a      	lsls	r2, r3, #5
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001aea:	e2ba      	b.n	8002062 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	015a      	lsls	r2, r3, #5
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4413      	add	r3, r2
 8001af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	f040 811b 	bne.w	8001d3a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d019      	beq.n	8001b40 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	212c      	movs	r1, #44	; 0x2c
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	3348      	adds	r3, #72	; 0x48
 8001b1a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	0159      	lsls	r1, r3, #5
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	440b      	add	r3, r1
 8001b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b2e:	1ad2      	subs	r2, r2, r3
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	202c      	movs	r0, #44	; 0x2c
 8001b36:	fb00 f303 	mul.w	r3, r0, r3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3350      	adds	r3, #80	; 0x50
 8001b3e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	212c      	movs	r1, #44	; 0x2c
 8001b46:	fb01 f303 	mul.w	r3, r1, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3361      	adds	r3, #97	; 0x61
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	212c      	movs	r1, #44	; 0x2c
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	335c      	adds	r3, #92	; 0x5c
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	015a      	lsls	r2, r3, #5
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b70:	461a      	mov	r2, r3
 8001b72:	2301      	movs	r3, #1
 8001b74:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	212c      	movs	r1, #44	; 0x2c
 8001b7c:	fb01 f303 	mul.w	r3, r1, r3
 8001b80:	4413      	add	r3, r2
 8001b82:	333f      	adds	r3, #63	; 0x3f
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d009      	beq.n	8001b9e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	212c      	movs	r1, #44	; 0x2c
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	333f      	adds	r3, #63	; 0x3f
 8001b98:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d121      	bne.n	8001be2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	015a      	lsls	r2, r3, #5
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	0151      	lsls	r1, r2, #5
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	440a      	add	r2, r1
 8001bb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f002 f982 	bl	8003ed2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	015a      	lsls	r2, r3, #5
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bda:	461a      	mov	r2, r3
 8001bdc:	2310      	movs	r3, #16
 8001bde:	6093      	str	r3, [r2, #8]
 8001be0:	e066      	b.n	8001cb0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	212c      	movs	r1, #44	; 0x2c
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	333f      	adds	r3, #63	; 0x3f
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d127      	bne.n	8001c46 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	015a      	lsls	r2, r3, #5
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	0151      	lsls	r1, r2, #5
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	440a      	add	r2, r1
 8001c0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c14:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3360      	adds	r3, #96	; 0x60
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	b2d9      	uxtb	r1, r3
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	202c      	movs	r0, #44	; 0x2c
 8001c32:	fb00 f303 	mul.w	r3, r0, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	3360      	adds	r3, #96	; 0x60
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f004 fb8a 	bl	8006358 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001c44:	e034      	b.n	8001cb0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	212c      	movs	r1, #44	; 0x2c
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	333f      	adds	r3, #63	; 0x3f
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d12a      	bne.n	8001cb0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	212c      	movs	r1, #44	; 0x2c
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	3360      	adds	r3, #96	; 0x60
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	212c      	movs	r1, #44	; 0x2c
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	3354      	adds	r3, #84	; 0x54
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	f083 0301 	eor.w	r3, r3, #1
 8001c80:	b2d8      	uxtb	r0, r3
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	212c      	movs	r1, #44	; 0x2c
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3354      	adds	r3, #84	; 0x54
 8001c90:	4602      	mov	r2, r0
 8001c92:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	b2d9      	uxtb	r1, r3
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	202c      	movs	r0, #44	; 0x2c
 8001c9e:	fb00 f303 	mul.w	r3, r0, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3360      	adds	r3, #96	; 0x60
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f004 fb54 	bl	8006358 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d12b      	bne.n	8001d10 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	212c      	movs	r1, #44	; 0x2c
 8001cbe:	fb01 f303 	mul.w	r3, r1, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3348      	adds	r3, #72	; 0x48
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	202c      	movs	r0, #44	; 0x2c
 8001cce:	fb00 f202 	mul.w	r2, r0, r2
 8001cd2:	440a      	add	r2, r1
 8001cd4:	3240      	adds	r2, #64	; 0x40
 8001cd6:	8812      	ldrh	r2, [r2, #0]
 8001cd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 81be 	beq.w	8002062 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	212c      	movs	r1, #44	; 0x2c
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3354      	adds	r3, #84	; 0x54
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	f083 0301 	eor.w	r3, r3, #1
 8001cfa:	b2d8      	uxtb	r0, r3
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	212c      	movs	r1, #44	; 0x2c
 8001d02:	fb01 f303 	mul.w	r3, r1, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	3354      	adds	r3, #84	; 0x54
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	701a      	strb	r2, [r3, #0]
}
 8001d0e:	e1a8      	b.n	8002062 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	212c      	movs	r1, #44	; 0x2c
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3354      	adds	r3, #84	; 0x54
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	f083 0301 	eor.w	r3, r3, #1
 8001d24:	b2d8      	uxtb	r0, r3
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	212c      	movs	r1, #44	; 0x2c
 8001d2c:	fb01 f303 	mul.w	r3, r1, r3
 8001d30:	4413      	add	r3, r2
 8001d32:	3354      	adds	r3, #84	; 0x54
 8001d34:	4602      	mov	r2, r0
 8001d36:	701a      	strb	r2, [r3, #0]
}
 8001d38:	e193      	b.n	8002062 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	f040 8106 	bne.w	8001f5e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	0151      	lsls	r1, r2, #5
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	440a      	add	r2, r1
 8001d68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d6c:	f023 0302 	bic.w	r3, r3, #2
 8001d70:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3361      	adds	r3, #97	; 0x61
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d109      	bne.n	8001d9a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	212c      	movs	r1, #44	; 0x2c
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	3360      	adds	r3, #96	; 0x60
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	e0c9      	b.n	8001f2e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	212c      	movs	r1, #44	; 0x2c
 8001da0:	fb01 f303 	mul.w	r3, r1, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	3361      	adds	r3, #97	; 0x61
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d109      	bne.n	8001dc2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	3360      	adds	r3, #96	; 0x60
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e0b5      	b.n	8001f2e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	212c      	movs	r1, #44	; 0x2c
 8001dc8:	fb01 f303 	mul.w	r3, r1, r3
 8001dcc:	4413      	add	r3, r2
 8001dce:	3361      	adds	r3, #97	; 0x61
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d009      	beq.n	8001dea <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	212c      	movs	r1, #44	; 0x2c
 8001ddc:	fb01 f303 	mul.w	r3, r1, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	3361      	adds	r3, #97	; 0x61
 8001de4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d150      	bne.n	8001e8c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	212c      	movs	r1, #44	; 0x2c
 8001df0:	fb01 f303 	mul.w	r3, r1, r3
 8001df4:	4413      	add	r3, r2
 8001df6:	335c      	adds	r3, #92	; 0x5c
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	202c      	movs	r0, #44	; 0x2c
 8001e02:	fb00 f303 	mul.w	r3, r0, r3
 8001e06:	440b      	add	r3, r1
 8001e08:	335c      	adds	r3, #92	; 0x5c
 8001e0a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	212c      	movs	r1, #44	; 0x2c
 8001e12:	fb01 f303 	mul.w	r3, r1, r3
 8001e16:	4413      	add	r3, r2
 8001e18:	335c      	adds	r3, #92	; 0x5c
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d912      	bls.n	8001e46 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	212c      	movs	r1, #44	; 0x2c
 8001e26:	fb01 f303 	mul.w	r3, r1, r3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	335c      	adds	r3, #92	; 0x5c
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	212c      	movs	r1, #44	; 0x2c
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3360      	adds	r3, #96	; 0x60
 8001e40:	2204      	movs	r2, #4
 8001e42:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e44:	e073      	b.n	8001f2e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	212c      	movs	r1, #44	; 0x2c
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	3360      	adds	r3, #96	; 0x60
 8001e54:	2202      	movs	r2, #2
 8001e56:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e6e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e76:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e84:	461a      	mov	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e8a:	e050      	b.n	8001f2e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	212c      	movs	r1, #44	; 0x2c
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	3361      	adds	r3, #97	; 0x61
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d122      	bne.n	8001ee6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	212c      	movs	r1, #44	; 0x2c
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	3360      	adds	r3, #96	; 0x60
 8001eae:	2202      	movs	r2, #2
 8001eb0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ec8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ed0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	e023      	b.n	8001f2e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	212c      	movs	r1, #44	; 0x2c
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3361      	adds	r3, #97	; 0x61
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b07      	cmp	r3, #7
 8001ef8:	d119      	bne.n	8001f2e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	335c      	adds	r3, #92	; 0x5c
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	fb00 f303 	mul.w	r3, r0, r3
 8001f16:	440b      	add	r3, r1
 8001f18:	335c      	adds	r3, #92	; 0x5c
 8001f1a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	212c      	movs	r1, #44	; 0x2c
 8001f22:	fb01 f303 	mul.w	r3, r1, r3
 8001f26:	4413      	add	r3, r2
 8001f28:	3360      	adds	r3, #96	; 0x60
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	b2d9      	uxtb	r1, r3
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	202c      	movs	r0, #44	; 0x2c
 8001f4a:	fb00 f303 	mul.w	r3, r0, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	3360      	adds	r3, #96	; 0x60
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f004 f9fe 	bl	8006358 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001f5c:	e081      	b.n	8002062 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b10      	cmp	r3, #16
 8001f72:	d176      	bne.n	8002062 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	212c      	movs	r1, #44	; 0x2c
 8001f7a:	fb01 f303 	mul.w	r3, r1, r3
 8001f7e:	4413      	add	r3, r2
 8001f80:	333f      	adds	r3, #63	; 0x3f
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d121      	bne.n	8001fcc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	212c      	movs	r1, #44	; 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	335c      	adds	r3, #92	; 0x5c
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	0151      	lsls	r1, r2, #5
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	440a      	add	r2, r1
 8001fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f001 ff84 	bl	8003ed2 <USB_HC_Halt>
 8001fca:	e041      	b.n	8002050 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	212c      	movs	r1, #44	; 0x2c
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	333f      	adds	r3, #63	; 0x3f
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	212c      	movs	r1, #44	; 0x2c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	333f      	adds	r3, #63	; 0x3f
 8001fee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d12d      	bne.n	8002050 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	335c      	adds	r3, #92	; 0x5c
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d120      	bne.n	8002050 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	212c      	movs	r1, #44	; 0x2c
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	4413      	add	r3, r2
 800201a:	3361      	adds	r3, #97	; 0x61
 800201c:	2203      	movs	r2, #3
 800201e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	0151      	lsls	r1, r2, #5
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	440a      	add	r2, r1
 8002036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f001 ff41 	bl	8003ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	461a      	mov	r2, r3
 800205e:	2310      	movs	r3, #16
 8002060:	6093      	str	r3, [r2, #8]
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b088      	sub	sp, #32
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	4413      	add	r3, r2
 800208c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d119      	bne.n	80020ce <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a6:	461a      	mov	r2, r3
 80020a8:	2304      	movs	r3, #4
 80020aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	0151      	lsls	r1, r2, #5
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	440a      	add	r2, r1
 80020c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020c6:	f043 0302 	orr.w	r3, r3, #2
 80020ca:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80020cc:	e3ca      	b.n	8002864 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d13e      	bne.n	8002162 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	461a      	mov	r2, r3
 80020f2:	2320      	movs	r3, #32
 80020f4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	212c      	movs	r1, #44	; 0x2c
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	4413      	add	r3, r2
 8002102:	333d      	adds	r3, #61	; 0x3d
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b01      	cmp	r3, #1
 8002108:	f040 83ac 	bne.w	8002864 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	333d      	adds	r3, #61	; 0x3d
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	212c      	movs	r1, #44	; 0x2c
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	3360      	adds	r3, #96	; 0x60
 800212c:	2202      	movs	r2, #2
 800212e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	4413      	add	r3, r2
 8002138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	0151      	lsls	r1, r2, #5
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	440a      	add	r2, r1
 8002146:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f001 feb9 	bl	8003ed2 <USB_HC_Halt>
}
 8002160:	e380      	b.n	8002864 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002178:	d122      	bne.n	80021c0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	4413      	add	r3, r2
 8002182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	0151      	lsls	r1, r2, #5
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	440a      	add	r2, r1
 8002190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f001 fe94 	bl	8003ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	461a      	mov	r2, r3
 80021b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021bc:	6093      	str	r3, [r2, #8]
}
 80021be:	e351      	b.n	8002864 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d150      	bne.n	8002278 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	212c      	movs	r1, #44	; 0x2c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	335c      	adds	r3, #92	; 0x5c
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fa:	2b40      	cmp	r3, #64	; 0x40
 80021fc:	d111      	bne.n	8002222 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	333d      	adds	r3, #61	; 0x3d
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221c:	461a      	mov	r2, r3
 800221e:	2340      	movs	r3, #64	; 0x40
 8002220:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	4413      	add	r3, r2
 800222a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	0151      	lsls	r1, r2, #5
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	440a      	add	r2, r1
 8002238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f001 fe40 	bl	8003ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4413      	add	r3, r2
 800225a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225e:	461a      	mov	r2, r3
 8002260:	2301      	movs	r3, #1
 8002262:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	3361      	adds	r3, #97	; 0x61
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
}
 8002276:	e2f5      	b.n	8002864 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228a:	2b40      	cmp	r3, #64	; 0x40
 800228c:	d13c      	bne.n	8002308 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	212c      	movs	r1, #44	; 0x2c
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	4413      	add	r3, r2
 800229a:	3361      	adds	r3, #97	; 0x61
 800229c:	2204      	movs	r2, #4
 800229e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	333d      	adds	r3, #61	; 0x3d
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	335c      	adds	r3, #92	; 0x5c
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	0151      	lsls	r1, r2, #5
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	440a      	add	r2, r1
 80022da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022de:	f043 0302 	orr.w	r3, r3, #2
 80022e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f001 fdef 	bl	8003ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002300:	461a      	mov	r2, r3
 8002302:	2340      	movs	r3, #64	; 0x40
 8002304:	6093      	str	r3, [r2, #8]
}
 8002306:	e2ad      	b.n	8002864 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b08      	cmp	r3, #8
 800231c:	d12a      	bne.n	8002374 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	4413      	add	r3, r2
 8002326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232a:	461a      	mov	r2, r3
 800232c:	2308      	movs	r3, #8
 800232e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	4413      	add	r3, r2
 8002338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	0151      	lsls	r1, r2, #5
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	440a      	add	r2, r1
 8002346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f001 fdb9 	bl	8003ed2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	3361      	adds	r3, #97	; 0x61
 800236e:	2205      	movs	r2, #5
 8002370:	701a      	strb	r2, [r3, #0]
}
 8002372:	e277      	b.n	8002864 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b10      	cmp	r3, #16
 8002388:	d150      	bne.n	800242c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	212c      	movs	r1, #44	; 0x2c
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	4413      	add	r3, r2
 8002396:	335c      	adds	r3, #92	; 0x5c
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	3361      	adds	r3, #97	; 0x61
 80023aa:	2203      	movs	r2, #3
 80023ac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	212c      	movs	r1, #44	; 0x2c
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	333d      	adds	r3, #61	; 0x3d
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d112      	bne.n	80023e8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	212c      	movs	r1, #44	; 0x2c
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	333c      	adds	r3, #60	; 0x3c
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d108      	bne.n	80023e8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	333d      	adds	r3, #61	; 0x3d
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	0151      	lsls	r1, r2, #5
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	440a      	add	r2, r1
 80023fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f001 fd5d 	bl	8003ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002424:	461a      	mov	r2, r3
 8002426:	2310      	movs	r3, #16
 8002428:	6093      	str	r3, [r2, #8]
}
 800242a:	e21b      	b.n	8002864 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4413      	add	r3, r2
 8002434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243e:	2b80      	cmp	r3, #128	; 0x80
 8002440:	d174      	bne.n	800252c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d121      	bne.n	800248e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	3361      	adds	r3, #97	; 0x61
 8002458:	2206      	movs	r2, #6
 800245a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	0151      	lsls	r1, r2, #5
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	440a      	add	r2, r1
 8002472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	4611      	mov	r1, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f001 fd23 	bl	8003ed2 <USB_HC_Halt>
 800248c:	e044      	b.n	8002518 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	212c      	movs	r1, #44	; 0x2c
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	335c      	adds	r3, #92	; 0x5c
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	202c      	movs	r0, #44	; 0x2c
 80024a6:	fb00 f303 	mul.w	r3, r0, r3
 80024aa:	440b      	add	r3, r1
 80024ac:	335c      	adds	r3, #92	; 0x5c
 80024ae:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	335c      	adds	r3, #92	; 0x5c
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d920      	bls.n	8002506 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	212c      	movs	r1, #44	; 0x2c
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	335c      	adds	r3, #92	; 0x5c
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	3360      	adds	r3, #96	; 0x60
 80024e4:	2204      	movs	r2, #4
 80024e6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	b2d9      	uxtb	r1, r3
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	202c      	movs	r0, #44	; 0x2c
 80024f2:	fb00 f303 	mul.w	r3, r0, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	3360      	adds	r3, #96	; 0x60
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f003 ff2a 	bl	8006358 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002504:	e008      	b.n	8002518 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	3360      	adds	r3, #96	; 0x60
 8002514:	2202      	movs	r2, #2
 8002516:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	461a      	mov	r2, r3
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	6093      	str	r3, [r2, #8]
}
 800252a:	e19b      	b.n	8002864 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	4413      	add	r3, r2
 8002534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002542:	d134      	bne.n	80025ae <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	0151      	lsls	r1, r2, #5
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	440a      	add	r2, r1
 800255a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f001 fcaf 	bl	8003ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	461a      	mov	r2, r3
 8002582:	2310      	movs	r3, #16
 8002584:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	461a      	mov	r2, r3
 8002594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002598:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3361      	adds	r3, #97	; 0x61
 80025a8:	2208      	movs	r2, #8
 80025aa:	701a      	strb	r2, [r3, #0]
}
 80025ac:	e15a      	b.n	8002864 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	f040 814f 	bne.w	8002864 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	0151      	lsls	r1, r2, #5
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	440a      	add	r2, r1
 80025dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025e0:	f023 0302 	bic.w	r3, r3, #2
 80025e4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3361      	adds	r3, #97	; 0x61
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d17d      	bne.n	80026f6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	3360      	adds	r3, #96	; 0x60
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	333f      	adds	r3, #63	; 0x3f
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d00a      	beq.n	8002636 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	333f      	adds	r3, #63	; 0x3f
 800262e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002630:	2b03      	cmp	r3, #3
 8002632:	f040 8100 	bne.w	8002836 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d113      	bne.n	8002666 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3355      	adds	r3, #85	; 0x55
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f083 0301 	eor.w	r3, r3, #1
 8002652:	b2d8      	uxtb	r0, r3
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3355      	adds	r3, #85	; 0x55
 8002662:	4602      	mov	r2, r0
 8002664:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b01      	cmp	r3, #1
 800266c:	f040 80e3 	bne.w	8002836 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	212c      	movs	r1, #44	; 0x2c
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4413      	add	r3, r2
 800267c:	334c      	adds	r3, #76	; 0x4c
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80d8 	beq.w	8002836 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	334c      	adds	r3, #76	; 0x4c
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	202c      	movs	r0, #44	; 0x2c
 800269c:	fb00 f202 	mul.w	r2, r0, r2
 80026a0:	440a      	add	r2, r1
 80026a2:	3240      	adds	r2, #64	; 0x40
 80026a4:	8812      	ldrh	r2, [r2, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	3b01      	subs	r3, #1
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	202c      	movs	r0, #44	; 0x2c
 80026b0:	fb00 f202 	mul.w	r2, r0, r2
 80026b4:	440a      	add	r2, r1
 80026b6:	3240      	adds	r2, #64	; 0x40
 80026b8:	8812      	ldrh	r2, [r2, #0]
 80026ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 80b5 	beq.w	8002836 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	3355      	adds	r3, #85	; 0x55
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	f083 0301 	eor.w	r3, r3, #1
 80026e0:	b2d8      	uxtb	r0, r3
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	3355      	adds	r3, #85	; 0x55
 80026f0:	4602      	mov	r2, r0
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	e09f      	b.n	8002836 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	3361      	adds	r3, #97	; 0x61
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d109      	bne.n	800271e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	3360      	adds	r3, #96	; 0x60
 8002718:	2202      	movs	r2, #2
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e08b      	b.n	8002836 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	3361      	adds	r3, #97	; 0x61
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b04      	cmp	r3, #4
 8002730:	d109      	bne.n	8002746 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	3360      	adds	r3, #96	; 0x60
 8002740:	2202      	movs	r2, #2
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	e077      	b.n	8002836 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	3361      	adds	r3, #97	; 0x61
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d109      	bne.n	800276e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	3360      	adds	r3, #96	; 0x60
 8002768:	2205      	movs	r2, #5
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	e063      	b.n	8002836 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	3361      	adds	r3, #97	; 0x61
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b06      	cmp	r3, #6
 8002780:	d009      	beq.n	8002796 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	212c      	movs	r1, #44	; 0x2c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	3361      	adds	r3, #97	; 0x61
 8002790:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002792:	2b08      	cmp	r3, #8
 8002794:	d14f      	bne.n	8002836 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	335c      	adds	r3, #92	; 0x5c
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	202c      	movs	r0, #44	; 0x2c
 80027ae:	fb00 f303 	mul.w	r3, r0, r3
 80027b2:	440b      	add	r3, r1
 80027b4:	335c      	adds	r3, #92	; 0x5c
 80027b6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	212c      	movs	r1, #44	; 0x2c
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	335c      	adds	r3, #92	; 0x5c
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d912      	bls.n	80027f2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	335c      	adds	r3, #92	; 0x5c
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	3360      	adds	r3, #96	; 0x60
 80027ec:	2204      	movs	r2, #4
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	e021      	b.n	8002836 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3360      	adds	r3, #96	; 0x60
 8002800:	2202      	movs	r2, #2
 8002802:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800281a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002822:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	461a      	mov	r2, r3
 8002844:	2302      	movs	r3, #2
 8002846:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	b2d9      	uxtb	r1, r3
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	202c      	movs	r0, #44	; 0x2c
 8002852:	fb00 f303 	mul.w	r3, r0, r3
 8002856:	4413      	add	r3, r2
 8002858:	3360      	adds	r3, #96	; 0x60
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f003 fd7a 	bl	8006358 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002864:	bf00      	nop
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	0c5b      	lsrs	r3, r3, #17
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028a0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d004      	beq.n	80028b2 <HCD_RXQLVL_IRQHandler+0x46>
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b05      	cmp	r3, #5
 80028ac:	f000 80a9 	beq.w	8002a02 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80028b0:	e0aa      	b.n	8002a08 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80a6 	beq.w	8002a06 <HCD_RXQLVL_IRQHandler+0x19a>
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3344      	adds	r3, #68	; 0x44
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 809b 	beq.w	8002a06 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3350      	adds	r3, #80	; 0x50
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	441a      	add	r2, r3
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	202c      	movs	r0, #44	; 0x2c
 80028ea:	fb00 f303 	mul.w	r3, r0, r3
 80028ee:	440b      	add	r3, r1
 80028f0:	334c      	adds	r3, #76	; 0x4c
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d87a      	bhi.n	80029ee <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3344      	adds	r3, #68	; 0x44
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	b292      	uxth	r2, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f000 fe57 	bl	80035c4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3344      	adds	r3, #68	; 0x44
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	441a      	add	r2, r3
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	202c      	movs	r0, #44	; 0x2c
 8002930:	fb00 f303 	mul.w	r3, r0, r3
 8002934:	440b      	add	r3, r1
 8002936:	3344      	adds	r3, #68	; 0x44
 8002938:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3350      	adds	r3, #80	; 0x50
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	441a      	add	r2, r3
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	202c      	movs	r0, #44	; 0x2c
 8002954:	fb00 f303 	mul.w	r3, r0, r3
 8002958:	440b      	add	r3, r1
 800295a:	3350      	adds	r3, #80	; 0x50
 800295c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	4413      	add	r3, r2
 8002966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	0cdb      	lsrs	r3, r3, #19
 800296e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002972:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3340      	adds	r3, #64	; 0x40
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4293      	cmp	r3, r2
 800298a:	d13c      	bne.n	8002a06 <HCD_RXQLVL_IRQHandler+0x19a>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d039      	beq.n	8002a06 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029a8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029b0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3354      	adds	r3, #84	; 0x54
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	f083 0301 	eor.w	r3, r3, #1
 80029d8:	b2d8      	uxtb	r0, r3
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	3354      	adds	r3, #84	; 0x54
 80029e8:	4602      	mov	r2, r0
 80029ea:	701a      	strb	r2, [r3, #0]
      break;
 80029ec:	e00b      	b.n	8002a06 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	3360      	adds	r3, #96	; 0x60
 80029fc:	2204      	movs	r2, #4
 80029fe:	701a      	strb	r2, [r3, #0]
      break;
 8002a00:	e001      	b.n	8002a06 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002a02:	bf00      	nop
 8002a04:	e000      	b.n	8002a08 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002a06:	bf00      	nop
  }
}
 8002a08:	bf00      	nop
 8002a0a:	3728      	adds	r7, #40	; 0x28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a3c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d10b      	bne.n	8002a60 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d102      	bne.n	8002a58 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f003 fc64 	bl	8006320 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f043 0302 	orr.w	r3, r3, #2
 8002a5e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d132      	bne.n	8002ad0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f043 0308 	orr.w	r3, r3, #8
 8002a70:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d126      	bne.n	8002aca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d113      	bne.n	8002aac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002a8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a8e:	d106      	bne.n	8002a9e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2102      	movs	r1, #2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fef4 	bl	8003884 <USB_InitFSLSPClkSel>
 8002a9c:	e011      	b.n	8002ac2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 feed 	bl	8003884 <USB_InitFSLSPClkSel>
 8002aaa:	e00a      	b.n	8002ac2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d106      	bne.n	8002ac2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aba:	461a      	mov	r2, r3
 8002abc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ac0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f003 fc56 	bl	8006374 <HAL_HCD_PortEnabled_Callback>
 8002ac8:	e002      	b.n	8002ad0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f003 fc60 	bl	8006390 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d103      	bne.n	8002ae2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f043 0320 	orr.w	r3, r3, #32
 8002ae0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	6013      	str	r3, [r2, #0]
}
 8002aee:	bf00      	nop
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e264      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d075      	beq.n	8002c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b16:	4ba3      	ldr	r3, [pc, #652]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d00c      	beq.n	8002b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b22:	4ba0      	ldr	r3, [pc, #640]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d112      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2e:	4b9d      	ldr	r3, [pc, #628]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b3a:	d10b      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	4b99      	ldr	r3, [pc, #612]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d05b      	beq.n	8002c00 <HAL_RCC_OscConfig+0x108>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d157      	bne.n	8002c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e23f      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5c:	d106      	bne.n	8002b6c <HAL_RCC_OscConfig+0x74>
 8002b5e:	4b91      	ldr	r3, [pc, #580]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a90      	ldr	r2, [pc, #576]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e01d      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x98>
 8002b76:	4b8b      	ldr	r3, [pc, #556]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a8a      	ldr	r2, [pc, #552]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b88      	ldr	r3, [pc, #544]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a87      	ldr	r2, [pc, #540]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b90:	4b84      	ldr	r3, [pc, #528]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a83      	ldr	r2, [pc, #524]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b81      	ldr	r3, [pc, #516]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a80      	ldr	r2, [pc, #512]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d013      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fd ff3a 	bl	8000a28 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7fd ff36 	bl	8000a28 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	; 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e204      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xc0>
 8002bd6:	e014      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fd ff26 	bl	8000a28 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be0:	f7fd ff22 	bl	8000a28 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e1f0      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	4b6c      	ldr	r3, [pc, #432]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0xe8>
 8002bfe:	e000      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d063      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c0e:	4b65      	ldr	r3, [pc, #404]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1a:	4b62      	ldr	r3, [pc, #392]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d11c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c26:	4b5f      	ldr	r3, [pc, #380]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d116      	bne.n	8002c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c32:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_RCC_OscConfig+0x152>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e1c4      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4a:	4b56      	ldr	r3, [pc, #344]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4952      	ldr	r1, [pc, #328]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5e:	e03a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c68:	4b4f      	ldr	r3, [pc, #316]	; (8002da8 <HAL_RCC_OscConfig+0x2b0>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7fd fedb 	bl	8000a28 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c76:	f7fd fed7 	bl	8000a28 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e1a5      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c94:	4b43      	ldr	r3, [pc, #268]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4940      	ldr	r1, [pc, #256]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
 8002ca8:	e015      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002caa:	4b3f      	ldr	r3, [pc, #252]	; (8002da8 <HAL_RCC_OscConfig+0x2b0>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fd feba 	bl	8000a28 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb8:	f7fd feb6 	bl	8000a28 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e184      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	4b36      	ldr	r3, [pc, #216]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d030      	beq.n	8002d44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cea:	4b30      	ldr	r3, [pc, #192]	; (8002dac <HAL_RCC_OscConfig+0x2b4>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fd fe9a 	bl	8000a28 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fd fe96 	bl	8000a28 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e164      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	4b26      	ldr	r3, [pc, #152]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x200>
 8002d16:	e015      	b.n	8002d44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d18:	4b24      	ldr	r3, [pc, #144]	; (8002dac <HAL_RCC_OscConfig+0x2b4>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7fd fe83 	bl	8000a28 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d26:	f7fd fe7f 	bl	8000a28 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e14d      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f0      	bne.n	8002d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80a0 	beq.w	8002e92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10f      	bne.n	8002d82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	4a0e      	ldr	r2, [pc, #56]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d70:	6413      	str	r3, [r2, #64]	; 0x40
 8002d72:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_OscConfig+0x2b8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d121      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <HAL_RCC_OscConfig+0x2b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a07      	ldr	r2, [pc, #28]	; (8002db0 <HAL_RCC_OscConfig+0x2b8>)
 8002d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9a:	f7fd fe45 	bl	8000a28 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	e011      	b.n	8002dc6 <HAL_RCC_OscConfig+0x2ce>
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	42470000 	.word	0x42470000
 8002dac:	42470e80 	.word	0x42470e80
 8002db0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db4:	f7fd fe38 	bl	8000a28 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e106      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc6:	4b85      	ldr	r3, [pc, #532]	; (8002fdc <HAL_RCC_OscConfig+0x4e4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d106      	bne.n	8002de8 <HAL_RCC_OscConfig+0x2f0>
 8002dda:	4b81      	ldr	r3, [pc, #516]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	4a80      	ldr	r2, [pc, #512]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70
 8002de6:	e01c      	b.n	8002e22 <HAL_RCC_OscConfig+0x32a>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b05      	cmp	r3, #5
 8002dee:	d10c      	bne.n	8002e0a <HAL_RCC_OscConfig+0x312>
 8002df0:	4b7b      	ldr	r3, [pc, #492]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a7a      	ldr	r2, [pc, #488]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfc:	4b78      	ldr	r3, [pc, #480]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	4a77      	ldr	r2, [pc, #476]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6713      	str	r3, [r2, #112]	; 0x70
 8002e08:	e00b      	b.n	8002e22 <HAL_RCC_OscConfig+0x32a>
 8002e0a:	4b75      	ldr	r3, [pc, #468]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a74      	ldr	r2, [pc, #464]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
 8002e16:	4b72      	ldr	r3, [pc, #456]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	4a71      	ldr	r2, [pc, #452]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d015      	beq.n	8002e56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2a:	f7fd fdfd 	bl	8000a28 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fd fdf9 	bl	8000a28 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e0c5      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e48:	4b65      	ldr	r3, [pc, #404]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ee      	beq.n	8002e32 <HAL_RCC_OscConfig+0x33a>
 8002e54:	e014      	b.n	8002e80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e56:	f7fd fde7 	bl	8000a28 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f7fd fde3 	bl	8000a28 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0af      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e74:	4b5a      	ldr	r3, [pc, #360]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ee      	bne.n	8002e5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d105      	bne.n	8002e92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e86:	4b56      	ldr	r3, [pc, #344]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	4a55      	ldr	r2, [pc, #340]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 809b 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e9c:	4b50      	ldr	r3, [pc, #320]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d05c      	beq.n	8002f62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d141      	bne.n	8002f34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb0:	4b4c      	ldr	r3, [pc, #304]	; (8002fe4 <HAL_RCC_OscConfig+0x4ec>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb6:	f7fd fdb7 	bl	8000a28 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ebe:	f7fd fdb3 	bl	8000a28 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e081      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed0:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f0      	bne.n	8002ebe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	019b      	lsls	r3, r3, #6
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	085b      	lsrs	r3, r3, #1
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	041b      	lsls	r3, r3, #16
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	061b      	lsls	r3, r3, #24
 8002f00:	4937      	ldr	r1, [pc, #220]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f06:	4b37      	ldr	r3, [pc, #220]	; (8002fe4 <HAL_RCC_OscConfig+0x4ec>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fd fd8c 	bl	8000a28 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fd fd88 	bl	8000a28 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e056      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	4b2e      	ldr	r3, [pc, #184]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x41c>
 8002f32:	e04e      	b.n	8002fd2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f34:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <HAL_RCC_OscConfig+0x4ec>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7fd fd75 	bl	8000a28 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fd fd71 	bl	8000a28 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e03f      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f54:	4b22      	ldr	r3, [pc, #136]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x44a>
 8002f60:	e037      	b.n	8002fd2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e032      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f6e:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <HAL_RCC_OscConfig+0x4e8>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d028      	beq.n	8002fce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d121      	bne.n	8002fce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d11a      	bne.n	8002fce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fa4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d111      	bne.n	8002fce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40007000 	.word	0x40007000
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	42470060 	.word	0x42470060

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0cc      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b68      	ldr	r3, [pc, #416]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d90c      	bls.n	8003024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b65      	ldr	r3, [pc, #404]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0b8      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800303c:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a58      	ldr	r2, [pc, #352]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003054:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a52      	ldr	r2, [pc, #328]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800305e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	494d      	ldr	r1, [pc, #308]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d044      	beq.n	8003108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	4b47      	ldr	r3, [pc, #284]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d119      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e07f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	4b3f      	ldr	r3, [pc, #252]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e06f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e067      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4934      	ldr	r1, [pc, #208]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d8:	f7fd fca6 	bl	8000a28 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e0:	f7fd fca2 	bl	8000a28 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e04f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 020c 	and.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	429a      	cmp	r2, r3
 8003106:	d1eb      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003108:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d20c      	bcs.n	8003130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e032      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4916      	ldr	r1, [pc, #88]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	490e      	ldr	r1, [pc, #56]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800316e:	f000 f821 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003172:	4602      	mov	r2, r0
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	490a      	ldr	r1, [pc, #40]	; (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	5ccb      	ldrb	r3, [r1, r3]
 8003182:	fa22 f303 	lsr.w	r3, r2, r3
 8003186:	4a09      	ldr	r2, [pc, #36]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd fc06 	bl	80009a0 <HAL_InitTick>

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023c00 	.word	0x40023c00
 80031a4:	40023800 	.word	0x40023800
 80031a8:	0800709c 	.word	0x0800709c
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	b5b0      	push	{r4, r5, r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031ba:	2100      	movs	r1, #0
 80031bc:	6079      	str	r1, [r7, #4]
 80031be:	2100      	movs	r1, #0
 80031c0:	60f9      	str	r1, [r7, #12]
 80031c2:	2100      	movs	r1, #0
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031c6:	2100      	movs	r1, #0
 80031c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ca:	4952      	ldr	r1, [pc, #328]	; (8003314 <HAL_RCC_GetSysClockFreq+0x160>)
 80031cc:	6889      	ldr	r1, [r1, #8]
 80031ce:	f001 010c 	and.w	r1, r1, #12
 80031d2:	2908      	cmp	r1, #8
 80031d4:	d00d      	beq.n	80031f2 <HAL_RCC_GetSysClockFreq+0x3e>
 80031d6:	2908      	cmp	r1, #8
 80031d8:	f200 8094 	bhi.w	8003304 <HAL_RCC_GetSysClockFreq+0x150>
 80031dc:	2900      	cmp	r1, #0
 80031de:	d002      	beq.n	80031e6 <HAL_RCC_GetSysClockFreq+0x32>
 80031e0:	2904      	cmp	r1, #4
 80031e2:	d003      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x38>
 80031e4:	e08e      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e6:	4b4c      	ldr	r3, [pc, #304]	; (8003318 <HAL_RCC_GetSysClockFreq+0x164>)
 80031e8:	60bb      	str	r3, [r7, #8]
       break;
 80031ea:	e08e      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ec:	4b4b      	ldr	r3, [pc, #300]	; (800331c <HAL_RCC_GetSysClockFreq+0x168>)
 80031ee:	60bb      	str	r3, [r7, #8]
      break;
 80031f0:	e08b      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f2:	4948      	ldr	r1, [pc, #288]	; (8003314 <HAL_RCC_GetSysClockFreq+0x160>)
 80031f4:	6849      	ldr	r1, [r1, #4]
 80031f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80031fa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031fc:	4945      	ldr	r1, [pc, #276]	; (8003314 <HAL_RCC_GetSysClockFreq+0x160>)
 80031fe:	6849      	ldr	r1, [r1, #4]
 8003200:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003204:	2900      	cmp	r1, #0
 8003206:	d024      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003208:	4942      	ldr	r1, [pc, #264]	; (8003314 <HAL_RCC_GetSysClockFreq+0x160>)
 800320a:	6849      	ldr	r1, [r1, #4]
 800320c:	0989      	lsrs	r1, r1, #6
 800320e:	4608      	mov	r0, r1
 8003210:	f04f 0100 	mov.w	r1, #0
 8003214:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003218:	f04f 0500 	mov.w	r5, #0
 800321c:	ea00 0204 	and.w	r2, r0, r4
 8003220:	ea01 0305 	and.w	r3, r1, r5
 8003224:	493d      	ldr	r1, [pc, #244]	; (800331c <HAL_RCC_GetSysClockFreq+0x168>)
 8003226:	fb01 f003 	mul.w	r0, r1, r3
 800322a:	2100      	movs	r1, #0
 800322c:	fb01 f102 	mul.w	r1, r1, r2
 8003230:	1844      	adds	r4, r0, r1
 8003232:	493a      	ldr	r1, [pc, #232]	; (800331c <HAL_RCC_GetSysClockFreq+0x168>)
 8003234:	fba2 0101 	umull	r0, r1, r2, r1
 8003238:	1863      	adds	r3, r4, r1
 800323a:	4619      	mov	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	461a      	mov	r2, r3
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	f7fd f814 	bl	8000270 <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4613      	mov	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	e04a      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003252:	4b30      	ldr	r3, [pc, #192]	; (8003314 <HAL_RCC_GetSysClockFreq+0x160>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	099b      	lsrs	r3, r3, #6
 8003258:	461a      	mov	r2, r3
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003262:	f04f 0100 	mov.w	r1, #0
 8003266:	ea02 0400 	and.w	r4, r2, r0
 800326a:	ea03 0501 	and.w	r5, r3, r1
 800326e:	4620      	mov	r0, r4
 8003270:	4629      	mov	r1, r5
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	014b      	lsls	r3, r1, #5
 800327c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003280:	0142      	lsls	r2, r0, #5
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	1b00      	subs	r0, r0, r4
 8003288:	eb61 0105 	sbc.w	r1, r1, r5
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	018b      	lsls	r3, r1, #6
 8003296:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800329a:	0182      	lsls	r2, r0, #6
 800329c:	1a12      	subs	r2, r2, r0
 800329e:	eb63 0301 	sbc.w	r3, r3, r1
 80032a2:	f04f 0000 	mov.w	r0, #0
 80032a6:	f04f 0100 	mov.w	r1, #0
 80032aa:	00d9      	lsls	r1, r3, #3
 80032ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032b0:	00d0      	lsls	r0, r2, #3
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	1912      	adds	r2, r2, r4
 80032b8:	eb45 0303 	adc.w	r3, r5, r3
 80032bc:	f04f 0000 	mov.w	r0, #0
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	0299      	lsls	r1, r3, #10
 80032c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032ca:	0290      	lsls	r0, r2, #10
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	f7fc ffc8 	bl	8000270 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4613      	mov	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032e8:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <HAL_RCC_GetSysClockFreq+0x160>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	3301      	adds	r3, #1
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	60bb      	str	r3, [r7, #8]
      break;
 8003302:	e002      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <HAL_RCC_GetSysClockFreq+0x164>)
 8003306:	60bb      	str	r3, [r7, #8]
      break;
 8003308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800330a:	68bb      	ldr	r3, [r7, #8]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bdb0      	pop	{r4, r5, r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	00f42400 	.word	0x00f42400
 800331c:	017d7840 	.word	0x017d7840

08003320 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003320:	b084      	sub	sp, #16
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	f107 001c 	add.w	r0, r7, #28
 800332e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	2b01      	cmp	r3, #1
 8003336:	d122      	bne.n	800337e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800334c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f9a0 	bl	80036b8 <USB_CoreReset>
 8003378:	4603      	mov	r3, r0
 800337a:	73fb      	strb	r3, [r7, #15]
 800337c:	e01a      	b.n	80033b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f994 	bl	80036b8 <USB_CoreReset>
 8003390:	4603      	mov	r3, r0
 8003392:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38
 80033a6:	e005      	b.n	80033b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d10b      	bne.n	80033d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f043 0206 	orr.w	r2, r3, #6
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f043 0220 	orr.w	r2, r3, #32
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033de:	b004      	add	sp, #16
 80033e0:	4770      	bx	lr

080033e2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f043 0201 	orr.w	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f023 0201 	bic.w	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d115      	bne.n	8003474 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003454:	2001      	movs	r0, #1
 8003456:	f7fd faf3 	bl	8000a40 <HAL_Delay>
      ms++;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3301      	adds	r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f91a 	bl	800369a <USB_GetMode>
 8003466:	4603      	mov	r3, r0
 8003468:	2b01      	cmp	r3, #1
 800346a:	d01e      	beq.n	80034aa <USB_SetCurrentMode+0x84>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b31      	cmp	r3, #49	; 0x31
 8003470:	d9f0      	bls.n	8003454 <USB_SetCurrentMode+0x2e>
 8003472:	e01a      	b.n	80034aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d115      	bne.n	80034a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003486:	2001      	movs	r0, #1
 8003488:	f7fd fada 	bl	8000a40 <HAL_Delay>
      ms++;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3301      	adds	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f901 	bl	800369a <USB_GetMode>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <USB_SetCurrentMode+0x84>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b31      	cmp	r3, #49	; 0x31
 80034a2:	d9f0      	bls.n	8003486 <USB_SetCurrentMode+0x60>
 80034a4:	e001      	b.n	80034aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e005      	b.n	80034b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b32      	cmp	r3, #50	; 0x32
 80034ae:	d101      	bne.n	80034b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	019b      	lsls	r3, r3, #6
 80034d2:	f043 0220 	orr.w	r2, r3, #32
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3301      	adds	r3, #1
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	4a08      	ldr	r2, [pc, #32]	; (8003504 <USB_FlushTxFifo+0x44>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e006      	b.n	80034f8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d0f1      	beq.n	80034da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	00030d40 	.word	0x00030d40

08003508 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2210      	movs	r2, #16
 8003518:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3301      	adds	r3, #1
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	4a08      	ldr	r2, [pc, #32]	; (8003544 <USB_FlushRxFifo+0x3c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e006      	b.n	8003538 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b10      	cmp	r3, #16
 8003534:	d0f1      	beq.n	800351a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	00030d40 	.word	0x00030d40

08003548 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003548:	b480      	push	{r7}
 800354a:	b089      	sub	sp, #36	; 0x24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	4611      	mov	r1, r2
 8003554:	461a      	mov	r2, r3
 8003556:	460b      	mov	r3, r1
 8003558:	71fb      	strb	r3, [r7, #7]
 800355a:	4613      	mov	r3, r2
 800355c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003566:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800356a:	2b00      	cmp	r3, #0
 800356c:	d123      	bne.n	80035b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800356e:	88bb      	ldrh	r3, [r7, #4]
 8003570:	3303      	adds	r3, #3
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	e018      	b.n	80035ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	031a      	lsls	r2, r3, #12
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	4413      	add	r3, r2
 8003584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003588:	461a      	mov	r2, r3
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	3301      	adds	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	3301      	adds	r3, #1
 800359a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	3301      	adds	r3, #1
 80035a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3301      	adds	r3, #1
 80035a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	3301      	adds	r3, #1
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d3e2      	bcc.n	800357c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3724      	adds	r7, #36	; 0x24
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b08b      	sub	sp, #44	; 0x2c
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	4613      	mov	r3, r2
 80035d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	b29b      	uxth	r3, r3
 80035e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80035ea:	2300      	movs	r3, #0
 80035ec:	623b      	str	r3, [r7, #32]
 80035ee:	e014      	b.n	800361a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	3301      	adds	r3, #1
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	3301      	adds	r3, #1
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	3301      	adds	r3, #1
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	3301      	adds	r3, #1
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	3301      	adds	r3, #1
 8003618:	623b      	str	r3, [r7, #32]
 800361a:	6a3a      	ldr	r2, [r7, #32]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	429a      	cmp	r2, r3
 8003620:	d3e6      	bcc.n	80035f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003622:	8bfb      	ldrh	r3, [r7, #30]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01e      	beq.n	8003666 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003632:	461a      	mov	r2, r3
 8003634:	f107 0310 	add.w	r3, r7, #16
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
 8003648:	b2da      	uxtb	r2, r3
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	701a      	strb	r2, [r3, #0]
      i++;
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	3301      	adds	r3, #1
 8003652:	623b      	str	r3, [r7, #32]
      pDest++;
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	3301      	adds	r3, #1
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800365a:	8bfb      	ldrh	r3, [r7, #30]
 800365c:	3b01      	subs	r3, #1
 800365e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003660:	8bfb      	ldrh	r3, [r7, #30]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1ea      	bne.n	800363c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003668:	4618      	mov	r0, r3
 800366a:	372c      	adds	r7, #44	; 0x2c
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4013      	ands	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800368c:	68fb      	ldr	r3, [r7, #12]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0301 	and.w	r3, r3, #1
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3301      	adds	r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	4a13      	ldr	r2, [pc, #76]	; (8003718 <USB_CoreReset+0x60>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e01a      	b.n	800370a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	daf3      	bge.n	80036c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f043 0201 	orr.w	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3301      	adds	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	4a09      	ldr	r2, [pc, #36]	; (8003718 <USB_CoreReset+0x60>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d901      	bls.n	80036fc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e006      	b.n	800370a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d0f1      	beq.n	80036ec <USB_CoreReset+0x34>

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	00030d40 	.word	0x00030d40

0800371c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800371c:	b084      	sub	sp, #16
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	f107 001c 	add.w	r0, r7, #28
 800372a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003738:	461a      	mov	r2, r3
 800373a:	2300      	movs	r3, #0
 800373c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d018      	beq.n	80037a0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	2b01      	cmp	r3, #1
 8003772:	d10a      	bne.n	800378a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003782:	f043 0304 	orr.w	r3, r3, #4
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	e014      	b.n	80037b4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003798:	f023 0304 	bic.w	r3, r3, #4
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e009      	b.n	80037b4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037ae:	f023 0304 	bic.w	r3, r3, #4
 80037b2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80037b4:	2110      	movs	r1, #16
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fe82 	bl	80034c0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff fea3 	bl	8003508 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e015      	b.n	80037f4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d4:	461a      	mov	r2, r3
 80037d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037da:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	461a      	mov	r2, r3
 80037ea:	2300      	movs	r3, #0
 80037ec:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3301      	adds	r3, #1
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d3e5      	bcc.n	80037c8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003808:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800381c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a13      	ldr	r2, [pc, #76]	; (8003870 <USB_HostInit+0x154>)
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a13      	ldr	r2, [pc, #76]	; (8003874 <USB_HostInit+0x158>)
 8003828:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800382c:	e009      	b.n	8003842 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2280      	movs	r2, #128	; 0x80
 8003832:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a10      	ldr	r2, [pc, #64]	; (8003878 <USB_HostInit+0x15c>)
 8003838:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a0f      	ldr	r2, [pc, #60]	; (800387c <USB_HostInit+0x160>)
 800383e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	2b00      	cmp	r3, #0
 8003846:	d105      	bne.n	8003854 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f043 0210 	orr.w	r2, r3, #16
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699a      	ldr	r2, [r3, #24]
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <USB_HostInit+0x164>)
 800385a:	4313      	orrs	r3, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800386c:	b004      	add	sp, #16
 800386e:	4770      	bx	lr
 8003870:	01000200 	.word	0x01000200
 8003874:	00e00300 	.word	0x00e00300
 8003878:	00600080 	.word	0x00600080
 800387c:	004000e0 	.word	0x004000e0
 8003880:	a3200008 	.word	0xa3200008

08003884 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038a2:	f023 0303 	bic.w	r3, r3, #3
 80038a6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	68f9      	ldr	r1, [r7, #12]
 80038b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80038bc:	4313      	orrs	r3, r2
 80038be:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d107      	bne.n	80038d6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038cc:	461a      	mov	r2, r3
 80038ce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80038d2:	6053      	str	r3, [r2, #4]
 80038d4:	e009      	b.n	80038ea <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d106      	bne.n	80038ea <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038e2:	461a      	mov	r2, r3
 80038e4:	f241 7370 	movw	r3, #6000	; 0x1770
 80038e8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003918:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003926:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8003928:	2064      	movs	r0, #100	; 0x64
 800392a:	f7fd f889 	bl	8000a40 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003936:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800393a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800393c:	200a      	movs	r0, #10
 800393e:	f7fd f87f 	bl	8000a40 <HAL_Delay>

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003970:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <USB_DriveVbus+0x44>
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d106      	bne.n	8003990 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800398a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800398e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399a:	d109      	bne.n	80039b0 <USB_DriveVbus+0x64>
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80039aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039ae:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	0c5b      	lsrs	r3, r3, #17
 80039dc:	f003 0303 	and.w	r3, r3, #3
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	b29b      	uxth	r3, r3
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	4608      	mov	r0, r1
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4603      	mov	r3, r0
 8003a20:	70fb      	strb	r3, [r7, #3]
 8003a22:	460b      	mov	r3, r1
 8003a24:	70bb      	strb	r3, [r7, #2]
 8003a26:	4613      	mov	r3, r2
 8003a28:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a44:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003a46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d87e      	bhi.n	8003b4c <USB_HC_Init+0x13c>
 8003a4e:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <USB_HC_Init+0x44>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003b0f 	.word	0x08003b0f
 8003a5c:	08003a65 	.word	0x08003a65
 8003a60:	08003ad1 	.word	0x08003ad1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a70:	461a      	mov	r2, r3
 8003a72:	f240 439d 	movw	r3, #1181	; 0x49d
 8003a76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003a78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	da10      	bge.n	8003aa2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	0151      	lsls	r1, r2, #5
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	440a      	add	r2, r1
 8003a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8003aa0:	e057      	b.n	8003b52 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d051      	beq.n	8003b52 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	0151      	lsls	r1, r2, #5
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	440a      	add	r2, r1
 8003ac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ac8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003acc:	60d3      	str	r3, [r2, #12]
      break;
 8003ace:	e040      	b.n	8003b52 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003adc:	461a      	mov	r2, r3
 8003ade:	f240 639d 	movw	r3, #1693	; 0x69d
 8003ae2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003ae4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	da34      	bge.n	8003b56 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	0151      	lsls	r1, r2, #5
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	440a      	add	r2, r1
 8003b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8003b0c:	e023      	b.n	8003b56 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f240 2325 	movw	r3, #549	; 0x225
 8003b20:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003b22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	da17      	bge.n	8003b5a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	0151      	lsls	r1, r2, #5
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	440a      	add	r2, r1
 8003b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b44:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8003b48:	60d3      	str	r3, [r2, #12]
      }
      break;
 8003b4a:	e006      	b.n	8003b5a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	77fb      	strb	r3, [r7, #31]
      break;
 8003b50:	e004      	b.n	8003b5c <USB_HC_Init+0x14c>
      break;
 8003b52:	bf00      	nop
 8003b54:	e002      	b.n	8003b5c <USB_HC_Init+0x14c>
      break;
 8003b56:	bf00      	nop
 8003b58:	e000      	b.n	8003b5c <USB_HC_Init+0x14c>
      break;
 8003b5a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b70:	6939      	ldr	r1, [r7, #16]
 8003b72:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003b76:	4313      	orrs	r3, r2
 8003b78:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8003b86:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	da03      	bge.n	8003b96 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8003b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	e001      	b.n	8003b9a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff ff0f 	bl	80039be <USB_GetHostSpeed>
 8003ba0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8003ba2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d106      	bne.n	8003bb8 <USB_HC_Init+0x1a8>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d003      	beq.n	8003bb8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	e001      	b.n	8003bbc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003bbc:	787b      	ldrb	r3, [r7, #1]
 8003bbe:	059b      	lsls	r3, r3, #22
 8003bc0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003bc4:	78bb      	ldrb	r3, [r7, #2]
 8003bc6:	02db      	lsls	r3, r3, #11
 8003bc8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003bcc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003bce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bd2:	049b      	lsls	r3, r3, #18
 8003bd4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003bd8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003bda:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003bdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003be0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	0159      	lsls	r1, r3, #5
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	440b      	add	r3, r1
 8003bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003bf8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8003bfa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d10f      	bne.n	8003c22 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	0151      	lsls	r1, r2, #5
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	440a      	add	r2, r1
 8003c18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c20:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8003c22:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3720      	adds	r7, #32
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08c      	sub	sp, #48	; 0x30
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	4613      	mov	r3, r2
 8003c38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	785b      	ldrb	r3, [r3, #1]
 8003c42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8003c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c48:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d02d      	beq.n	8003cb2 <USB_HC_StartXfer+0x86>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	791b      	ldrb	r3, [r3, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d129      	bne.n	8003cb2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d117      	bne.n	8003c94 <USB_HC_StartXfer+0x68>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	79db      	ldrb	r3, [r3, #7]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <USB_HC_StartXfer+0x48>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	79db      	ldrb	r3, [r3, #7]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d10f      	bne.n	8003c94 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	0151      	lsls	r1, r2, #5
 8003c86:	6a3a      	ldr	r2, [r7, #32]
 8003c88:	440a      	add	r2, r1
 8003c8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10b      	bne.n	8003cb2 <USB_HC_StartXfer+0x86>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	795b      	ldrb	r3, [r3, #5]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d107      	bne.n	8003cb2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	785b      	ldrb	r3, [r3, #1]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 fa2f 	bl	800410c <USB_DoPing>
      return HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e0f8      	b.n	8003ea4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d018      	beq.n	8003cec <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	8912      	ldrh	r2, [r2, #8]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	8912      	ldrh	r2, [r2, #8]
 8003cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cce:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8003cd0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003cd2:	8b7b      	ldrh	r3, [r7, #26]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d90b      	bls.n	8003cf0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8003cd8:	8b7b      	ldrh	r3, [r7, #26]
 8003cda:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003cdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	8912      	ldrh	r2, [r2, #8]
 8003ce2:	fb02 f203 	mul.w	r2, r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	611a      	str	r2, [r3, #16]
 8003cea:	e001      	b.n	8003cf0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8003cec:	2301      	movs	r3, #1
 8003cee:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	78db      	ldrb	r3, [r3, #3]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003cf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	8912      	ldrh	r2, [r2, #8]
 8003cfe:	fb02 f203 	mul.w	r2, r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	611a      	str	r2, [r3, #16]
 8003d06:	e003      	b.n	8003d10 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003d18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d1a:	04d9      	lsls	r1, r3, #19
 8003d1c:	4b63      	ldr	r3, [pc, #396]	; (8003eac <USB_HC_StartXfer+0x280>)
 8003d1e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003d20:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	7a9b      	ldrb	r3, [r3, #10]
 8003d26:	075b      	lsls	r3, r3, #29
 8003d28:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003d2c:	69f9      	ldr	r1, [r7, #28]
 8003d2e:	0148      	lsls	r0, r1, #5
 8003d30:	6a39      	ldr	r1, [r7, #32]
 8003d32:	4401      	add	r1, r0
 8003d34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003d38:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003d3a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	68d9      	ldr	r1, [r3, #12]
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d52:	460a      	mov	r2, r1
 8003d54:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf0c      	ite	eq
 8003d66:	2301      	moveq	r3, #1
 8003d68:	2300      	movne	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	0151      	lsls	r1, r2, #5
 8003d80:	6a3a      	ldr	r2, [r7, #32]
 8003d82:	440a      	add	r2, r1
 8003d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003d8c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	7e7b      	ldrb	r3, [r7, #25]
 8003d9e:	075b      	lsls	r3, r3, #29
 8003da0:	69f9      	ldr	r1, [r7, #28]
 8003da2:	0148      	lsls	r0, r1, #5
 8003da4:	6a39      	ldr	r1, [r7, #32]
 8003da6:	4401      	add	r1, r0
 8003da8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8003dac:	4313      	orrs	r3, r2
 8003dae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dc6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	78db      	ldrb	r3, [r3, #3]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d004      	beq.n	8003dda <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	e003      	b.n	8003de2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003de0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003de8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df6:	461a      	mov	r2, r3
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e04e      	b.n	8003ea4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	78db      	ldrb	r3, [r3, #3]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d149      	bne.n	8003ea2 <USB_HC_StartXfer+0x276>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d045      	beq.n	8003ea2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	79db      	ldrb	r3, [r3, #7]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d830      	bhi.n	8003e80 <USB_HC_StartXfer+0x254>
 8003e1e:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <USB_HC_StartXfer+0x1f8>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003e35 	.word	0x08003e35
 8003e28:	08003e59 	.word	0x08003e59
 8003e2c:	08003e35 	.word	0x08003e35
 8003e30:	08003e59 	.word	0x08003e59
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	3303      	adds	r3, #3
 8003e3a:	089b      	lsrs	r3, r3, #2
 8003e3c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003e3e:	8afa      	ldrh	r2, [r7, #22]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d91c      	bls.n	8003e84 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	f043 0220 	orr.w	r2, r3, #32
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	619a      	str	r2, [r3, #24]
        }
        break;
 8003e56:	e015      	b.n	8003e84 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	3303      	adds	r3, #3
 8003e5e:	089b      	lsrs	r3, r3, #2
 8003e60:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003e62:	8afa      	ldrh	r2, [r7, #22]
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d90a      	bls.n	8003e88 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	619a      	str	r2, [r3, #24]
        }
        break;
 8003e7e:	e003      	b.n	8003e88 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8003e80:	bf00      	nop
 8003e82:	e002      	b.n	8003e8a <USB_HC_StartXfer+0x25e>
        break;
 8003e84:	bf00      	nop
 8003e86:	e000      	b.n	8003e8a <USB_HC_StartXfer+0x25e>
        break;
 8003e88:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	68d9      	ldr	r1, [r3, #12]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	785a      	ldrb	r2, [r3, #1]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2000      	movs	r0, #0
 8003e9a:	9000      	str	r0, [sp, #0]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f7ff fb53 	bl	8003548 <USB_WritePacket>
  }

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3728      	adds	r7, #40	; 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	1ff80000 	.word	0x1ff80000

08003eb0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	b29b      	uxth	r3, r3
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b089      	sub	sp, #36	; 0x24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	460b      	mov	r3, r1
 8003edc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	0c9b      	lsrs	r3, r3, #18
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	0fdb      	lsrs	r3, r3, #31
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d104      	bne.n	8003f2c <USB_HC_Halt+0x5a>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e0e8      	b.n	80040fe <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <USB_HC_Halt+0x66>
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d173      	bne.n	8004020 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	0151      	lsls	r1, r2, #5
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	440a      	add	r2, r1
 8003f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f56:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f040 80cb 	bne.w	80040fc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d143      	bne.n	8003ffa <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	0151      	lsls	r1, r2, #5
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	440a      	add	r2, r1
 8003f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f90:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	0151      	lsls	r1, r2, #5
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	440a      	add	r2, r1
 8003fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fb0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	0151      	lsls	r1, r2, #5
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	440a      	add	r2, r1
 8003fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fd0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	61fb      	str	r3, [r7, #28]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fde:	d81d      	bhi.n	800401c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ff6:	d0ec      	beq.n	8003fd2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003ff8:	e080      	b.n	80040fc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	4413      	add	r3, r2
 8004002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	0151      	lsls	r1, r2, #5
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	440a      	add	r2, r1
 8004010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004014:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004018:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800401a:	e06f      	b.n	80040fc <USB_HC_Halt+0x22a>
            break;
 800401c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800401e:	e06d      	b.n	80040fc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	4413      	add	r3, r2
 8004028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	0151      	lsls	r1, r2, #5
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	440a      	add	r2, r1
 8004036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800403a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800403e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d143      	bne.n	80040d8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	4413      	add	r3, r2
 8004058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	0151      	lsls	r1, r2, #5
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	440a      	add	r2, r1
 8004066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800406a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800406e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	4413      	add	r3, r2
 8004078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	0151      	lsls	r1, r2, #5
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	440a      	add	r2, r1
 8004086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800408a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800408e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	4413      	add	r3, r2
 8004098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	0151      	lsls	r1, r2, #5
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	440a      	add	r2, r1
 80040a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040ae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	3301      	adds	r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040bc:	d81d      	bhi.n	80040fa <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040d4:	d0ec      	beq.n	80040b0 <USB_HC_Halt+0x1de>
 80040d6:	e011      	b.n	80040fc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	0151      	lsls	r1, r2, #5
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	440a      	add	r2, r1
 80040ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	e000      	b.n	80040fc <USB_HC_Halt+0x22a>
          break;
 80040fa:	bf00      	nop
    }
  }

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3724      	adds	r7, #36	; 0x24
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004120:	2301      	movs	r3, #1
 8004122:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	04da      	lsls	r2, r3, #19
 8004128:	4b15      	ldr	r3, [pc, #84]	; (8004180 <USB_DoPing+0x74>)
 800412a:	4013      	ands	r3, r2
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	0151      	lsls	r1, r2, #5
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	440a      	add	r2, r1
 8004134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800413c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004154:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800415c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	4413      	add	r3, r2
 8004166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416a:	461a      	mov	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	1ff80000 	.word	0x1ff80000

08004184 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff f935 	bl	8003404 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800419a:	2110      	movs	r1, #16
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff f98f 	bl	80034c0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff f9b0 	bl	8003508 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	e01f      	b.n	80041ee <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041d4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e2:	461a      	mov	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	3301      	adds	r3, #1
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b0f      	cmp	r3, #15
 80041f2:	d9dc      	bls.n	80041ae <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	e034      	b.n	8004264 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4413      	add	r3, r2
 8004202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004210:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004218:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004220:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422e:	461a      	mov	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	3301      	adds	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004240:	d80c      	bhi.n	800425c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4413      	add	r3, r2
 800424a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004258:	d0ec      	beq.n	8004234 <USB_StopHost+0xb0>
 800425a:	e000      	b.n	800425e <USB_StopHost+0xda>
        break;
 800425c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	3301      	adds	r3, #1
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b0f      	cmp	r3, #15
 8004268:	d9c7      	bls.n	80041fa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004270:	461a      	mov	r2, r3
 8004272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004276:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800427e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff f8ae 	bl	80033e2 <USB_EnableGlobalInt>

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004290:	b590      	push	{r4, r7, lr}
 8004292:	b089      	sub	sp, #36	; 0x24
 8004294:	af04      	add	r7, sp, #16
 8004296:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8004298:	2301      	movs	r3, #1
 800429a:	2202      	movs	r2, #2
 800429c:	2102      	movs	r1, #2
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fceb 	bl	8004c7a <USBH_FindInterface>
 80042a4:	4603      	mov	r3, r0
 80042a6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2bff      	cmp	r3, #255	; 0xff
 80042ac:	d002      	beq.n	80042b4 <USBH_CDC_InterfaceInit+0x24>
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d901      	bls.n	80042b8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80042b4:	2302      	movs	r3, #2
 80042b6:	e13d      	b.n	8004534 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	4619      	mov	r1, r3
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fcc0 	bl	8004c42 <USBH_SelectInterface>
 80042c2:	4603      	mov	r3, r0
 80042c4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80042c6:	7bbb      	ldrb	r3, [r7, #14]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80042cc:	2302      	movs	r3, #2
 80042ce:	e131      	b.n	8004534 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80042d6:	2050      	movs	r0, #80	; 0x50
 80042d8:	f002 fa86 	bl	80067e8 <malloc>
 80042dc:	4603      	mov	r3, r0
 80042de:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80042f0:	2302      	movs	r3, #2
 80042f2:	e11f      	b.n	8004534 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80042f4:	2250      	movs	r2, #80	; 0x50
 80042f6:	2100      	movs	r1, #0
 80042f8:	68b8      	ldr	r0, [r7, #8]
 80042fa:	f002 fa85 	bl	8006808 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	211a      	movs	r1, #26
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	4413      	add	r3, r2
 800430a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	b25b      	sxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	da15      	bge.n	8004342 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	211a      	movs	r1, #26
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	4413      	add	r3, r2
 8004322:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004326:	781a      	ldrb	r2, [r3, #0]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	211a      	movs	r1, #26
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	4413      	add	r3, r2
 8004338:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800433c:	881a      	ldrh	r2, [r3, #0]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	785b      	ldrb	r3, [r3, #1]
 8004346:	4619      	mov	r1, r3
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f001 feb8 	bl	80060be <USBH_AllocPipe>
 800434e:	4603      	mov	r3, r0
 8004350:	461a      	mov	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	7819      	ldrb	r1, [r3, #0]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	7858      	ldrb	r0, [r3, #1]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	8952      	ldrh	r2, [r2, #10]
 800436e:	9202      	str	r2, [sp, #8]
 8004370:	2203      	movs	r2, #3
 8004372:	9201      	str	r2, [sp, #4]
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	4623      	mov	r3, r4
 8004378:	4602      	mov	r2, r0
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f001 fe70 	bl	8006060 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2200      	movs	r2, #0
 8004386:	4619      	mov	r1, r3
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f002 f97f 	bl	800668c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800438e:	2300      	movs	r3, #0
 8004390:	2200      	movs	r2, #0
 8004392:	210a      	movs	r1, #10
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fc70 	bl	8004c7a <USBH_FindInterface>
 800439a:	4603      	mov	r3, r0
 800439c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2bff      	cmp	r3, #255	; 0xff
 80043a2:	d002      	beq.n	80043aa <USBH_CDC_InterfaceInit+0x11a>
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d901      	bls.n	80043ae <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80043aa:	2302      	movs	r3, #2
 80043ac:	e0c2      	b.n	8004534 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	211a      	movs	r1, #26
 80043b4:	fb01 f303 	mul.w	r3, r1, r3
 80043b8:	4413      	add	r3, r2
 80043ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	b25b      	sxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	da16      	bge.n	80043f4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	211a      	movs	r1, #26
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	4413      	add	r3, r2
 80043d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80043d6:	781a      	ldrb	r2, [r3, #0]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	211a      	movs	r1, #26
 80043e2:	fb01 f303 	mul.w	r3, r1, r3
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80043ec:	881a      	ldrh	r2, [r3, #0]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	835a      	strh	r2, [r3, #26]
 80043f2:	e015      	b.n	8004420 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	211a      	movs	r1, #26
 80043fa:	fb01 f303 	mul.w	r3, r1, r3
 80043fe:	4413      	add	r3, r2
 8004400:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004404:	781a      	ldrb	r2, [r3, #0]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	211a      	movs	r1, #26
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	4413      	add	r3, r2
 8004416:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800441a:	881a      	ldrh	r2, [r3, #0]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	211a      	movs	r1, #26
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	4413      	add	r3, r2
 800442c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	b25b      	sxtb	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	da16      	bge.n	8004466 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	211a      	movs	r1, #26
 800443e:	fb01 f303 	mul.w	r3, r1, r3
 8004442:	4413      	add	r3, r2
 8004444:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004448:	781a      	ldrb	r2, [r3, #0]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	211a      	movs	r1, #26
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	4413      	add	r3, r2
 800445a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800445e:	881a      	ldrh	r2, [r3, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	835a      	strh	r2, [r3, #26]
 8004464:	e015      	b.n	8004492 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	211a      	movs	r1, #26
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	4413      	add	r3, r2
 8004472:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004476:	781a      	ldrb	r2, [r3, #0]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	211a      	movs	r1, #26
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800448c:	881a      	ldrh	r2, [r3, #0]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	7b9b      	ldrb	r3, [r3, #14]
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f001 fe10 	bl	80060be <USBH_AllocPipe>
 800449e:	4603      	mov	r3, r0
 80044a0:	461a      	mov	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	7bdb      	ldrb	r3, [r3, #15]
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f001 fe06 	bl	80060be <USBH_AllocPipe>
 80044b2:	4603      	mov	r3, r0
 80044b4:	461a      	mov	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	7b59      	ldrb	r1, [r3, #13]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	7b98      	ldrb	r0, [r3, #14]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	8b12      	ldrh	r2, [r2, #24]
 80044d2:	9202      	str	r2, [sp, #8]
 80044d4:	2202      	movs	r2, #2
 80044d6:	9201      	str	r2, [sp, #4]
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	4623      	mov	r3, r4
 80044dc:	4602      	mov	r2, r0
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f001 fdbe 	bl	8006060 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	7b19      	ldrb	r1, [r3, #12]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	7bd8      	ldrb	r0, [r3, #15]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	8b52      	ldrh	r2, [r2, #26]
 80044fc:	9202      	str	r2, [sp, #8]
 80044fe:	2202      	movs	r2, #2
 8004500:	9201      	str	r2, [sp, #4]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	4623      	mov	r3, r4
 8004506:	4602      	mov	r2, r0
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f001 fda9 	bl	8006060 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	7b5b      	ldrb	r3, [r3, #13]
 800451a:	2200      	movs	r2, #0
 800451c:	4619      	mov	r1, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f002 f8b4 	bl	800668c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	7b1b      	ldrb	r3, [r3, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	4619      	mov	r1, r3
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f002 f8ad 	bl	800668c <USBH_LL_SetToggle>

  return USBH_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	bd90      	pop	{r4, r7, pc}

0800453c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00e      	beq.n	8004574 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	4619      	mov	r1, r3
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f001 fd9e 	bl	800609e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	4619      	mov	r1, r3
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f001 fdc9 	bl	8006100 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	7b1b      	ldrb	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00e      	beq.n	800459a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	7b1b      	ldrb	r3, [r3, #12]
 8004580:	4619      	mov	r1, r3
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f001 fd8b 	bl	800609e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	7b1b      	ldrb	r3, [r3, #12]
 800458c:	4619      	mov	r1, r3
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f001 fdb6 	bl	8006100 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	7b5b      	ldrb	r3, [r3, #13]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00e      	beq.n	80045c0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	7b5b      	ldrb	r3, [r3, #13]
 80045a6:	4619      	mov	r1, r3
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f001 fd78 	bl	800609e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	7b5b      	ldrb	r3, [r3, #13]
 80045b2:	4619      	mov	r1, r3
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f001 fda3 	bl	8006100 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f002 f90f 	bl	80067f8 <free>
    phost->pActiveClass->pData = 0U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80045e0:	2200      	movs	r2, #0
 80045e2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3340      	adds	r3, #64	; 0x40
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f8da 	bl	80047c0 <GetLineCoding>
 800460c:	4603      	mov	r3, r0
 800460e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8004610:	7afb      	ldrb	r3, [r7, #11]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800461c:	2102      	movs	r1, #2
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8004622:	7afb      	ldrb	r3, [r7, #11]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004634:	2301      	movs	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800464c:	2b04      	cmp	r3, #4
 800464e:	d877      	bhi.n	8004740 <USBH_CDC_Process+0x114>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <USBH_CDC_Process+0x2c>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	0800466d 	.word	0x0800466d
 800465c:	08004673 	.word	0x08004673
 8004660:	080046a3 	.word	0x080046a3
 8004664:	08004717 	.word	0x08004717
 8004668:	08004725 	.word	0x08004725
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	73fb      	strb	r3, [r7, #15]
      break;
 8004670:	e06d      	b.n	800474e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004676:	4619      	mov	r1, r3
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f8c0 	bl	80047fe <SetLineCoding>
 800467e:	4603      	mov	r3, r0
 8004680:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004682:	7bbb      	ldrb	r3, [r7, #14]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004690:	e058      	b.n	8004744 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8004692:	7bbb      	ldrb	r3, [r7, #14]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d055      	beq.n	8004744 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2204      	movs	r2, #4
 800469c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80046a0:	e050      	b.n	8004744 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	3340      	adds	r3, #64	; 0x40
 80046a6:	4619      	mov	r1, r3
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f889 	bl	80047c0 <GetLineCoding>
 80046ae:	4603      	mov	r3, r0
 80046b0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80046b2:	7bbb      	ldrb	r3, [r7, #14]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d126      	bne.n	8004706 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ca:	791b      	ldrb	r3, [r3, #4]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d13b      	bne.n	8004748 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046da:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80046dc:	429a      	cmp	r2, r3
 80046de:	d133      	bne.n	8004748 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ea:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d12b      	bne.n	8004748 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d124      	bne.n	8004748 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f9dd 	bl	8004abe <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004704:	e020      	b.n	8004748 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8004706:	7bbb      	ldrb	r3, [r7, #14]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d01d      	beq.n	8004748 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2204      	movs	r2, #4
 8004710:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004714:	e018      	b.n	8004748 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f8ec 	bl	80048f4 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f95f 	bl	80049e0 <CDC_ProcessReception>
      break;
 8004722:	e014      	b.n	800474e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8004724:	2100      	movs	r1, #0
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f001 f869 	bl	80057fe <USBH_ClrFeature>
 800472c:	4603      	mov	r3, r0
 800472e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004730:	7bbb      	ldrb	r3, [r7, #14]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800473e:	e005      	b.n	800474c <USBH_CDC_Process+0x120>

    default:
      break;
 8004740:	bf00      	nop
 8004742:	e004      	b.n	800474e <USBH_CDC_Process+0x122>
      break;
 8004744:	bf00      	nop
 8004746:	e002      	b.n	800474e <USBH_CDC_Process+0x122>
      break;
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <USBH_CDC_Process+0x122>
      break;
 800474c:	bf00      	nop

  }

  return status;
 800474e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b0b      	cmp	r3, #11
 8004788:	d115      	bne.n	80047b6 <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	4619      	mov	r1, r3
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 fc80 	bl	800609e <USBH_ClosePipe>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	7b1b      	ldrb	r3, [r3, #12]
 80047a2:	4619      	mov	r1, r3
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f001 fc7a 	bl	800609e <USBH_ClosePipe>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	7b5b      	ldrb	r3, [r3, #13]
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f001 fc74 	bl	800609e <USBH_ClosePipe>
  }
  return USBH_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	22a1      	movs	r2, #161	; 0xa1
 80047ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2221      	movs	r2, #33	; 0x21
 80047d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2207      	movs	r2, #7
 80047e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2207      	movs	r2, #7
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f001 f9e5 	bl	8005bbe <USBH_CtlReq>
 80047f4:	4603      	mov	r3, r0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2221      	movs	r2, #33	; 0x21
 800480c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2220      	movs	r2, #32
 8004812:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2207      	movs	r2, #7
 8004824:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2207      	movs	r2, #7
 800482a:	4619      	mov	r1, r3
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f001 f9c6 	bl	8005bbe <USBH_CtlReq>
 8004832:	4603      	mov	r3, r0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004848:	2301      	movs	r3, #1
 800484a:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d004      	beq.n	800486a <USBH_CDC_Transmit+0x2e>
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004866:	2b03      	cmp	r3, #3
 8004868:	d10f      	bne.n	800488a <USBH_CDC_Transmit+0x4e>
  {
    CDC_Handle->pTxData = pbuff;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2203      	movs	r2, #3
 800487a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800488a:	7dfb      	ldrb	r3, [r7, #23]
}
 800488c:	4618      	mov	r0, r3
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <USBH_CDC_Receive>:
* @brief  This function prepares the state before issuing the class specific commands
* @param  None
* @retval None
*/
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80048a4:	2301      	movs	r3, #1
 80048a6:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d004      	beq.n	80048c6 <USBH_CDC_Receive+0x2e>
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d10f      	bne.n	80048e6 <USBH_CDC_Receive+0x4e>
  {
    CDC_Handle->pRxData = pbuff;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2203      	movs	r2, #3
 80048d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2203      	movs	r2, #3
 80048de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	371c      	adds	r7, #28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004906:	2300      	movs	r3, #0
 8004908:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004910:	2b01      	cmp	r3, #1
 8004912:	d002      	beq.n	800491a <CDC_ProcessTransmission+0x26>
 8004914:	2b02      	cmp	r3, #2
 8004916:	d023      	beq.n	8004960 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8004918:	e05e      	b.n	80049d8 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	8b12      	ldrh	r2, [r2, #24]
 8004922:	4293      	cmp	r3, r2
 8004924:	d90b      	bls.n	800493e <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	69d9      	ldr	r1, [r3, #28]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8b1a      	ldrh	r2, [r3, #24]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	7b5b      	ldrb	r3, [r3, #13]
 8004932:	2001      	movs	r0, #1
 8004934:	9000      	str	r0, [sp, #0]
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f001 fb4f 	bl	8005fda <USBH_BulkSendData>
 800493c:	e00b      	b.n	8004956 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	7b5b      	ldrb	r3, [r3, #13]
 800494c:	2001      	movs	r0, #1
 800494e:	9000      	str	r0, [sp, #0]
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f001 fb42 	bl	8005fda <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800495e:	e03b      	b.n	80049d8 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	7b5b      	ldrb	r3, [r3, #13]
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f001 fe66 	bl	8006638 <USBH_LL_GetURBState>
 800496c:	4603      	mov	r3, r0
 800496e:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8004970:	7afb      	ldrb	r3, [r7, #11]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d128      	bne.n	80049c8 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	8b12      	ldrh	r2, [r2, #24]
 800497e:	4293      	cmp	r3, r2
 8004980:	d90e      	bls.n	80049a0 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	8b12      	ldrh	r2, [r2, #24]
 800498a:	1a9a      	subs	r2, r3, r2
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	8b12      	ldrh	r2, [r2, #24]
 8004998:	441a      	add	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	61da      	str	r2, [r3, #28]
 800499e:	e002      	b.n	80049a6 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d004      	beq.n	80049b8 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80049b6:	e00e      	b.n	80049d6 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f868 	bl	8004a96 <USBH_CDC_TransmitCallback>
      break;
 80049c6:	e006      	b.n	80049d6 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80049c8:	7afb      	ldrb	r3, [r7, #11]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d103      	bne.n	80049d6 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80049d6:	bf00      	nop
  }
}
 80049d8:	bf00      	nop
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80049f2:	2300      	movs	r3, #0
 80049f4:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d002      	beq.n	8004a06 <CDC_ProcessReception+0x26>
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d00e      	beq.n	8004a22 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8004a04:	e043      	b.n	8004a8e <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	6a19      	ldr	r1, [r3, #32]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	8b5a      	ldrh	r2, [r3, #26]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	7b1b      	ldrb	r3, [r3, #12]
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f001 fb06 	bl	8006024 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004a20:	e035      	b.n	8004a8e <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	7b1b      	ldrb	r3, [r3, #12]
 8004a26:	4619      	mov	r1, r3
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f001 fe05 	bl	8006638 <USBH_LL_GetURBState>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8004a32:	7cfb      	ldrb	r3, [r7, #19]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d129      	bne.n	8004a8c <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	7b1b      	ldrb	r3, [r3, #12]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f001 fd68 	bl	8006514 <USBH_LL_GetLastXferSize>
 8004a44:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d016      	beq.n	8004a7e <CDC_ProcessReception+0x9e>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	8b5b      	ldrh	r3, [r3, #26]
 8004a54:	461a      	mov	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d910      	bls.n	8004a7e <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	1ad2      	subs	r2, r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	6a1a      	ldr	r2, [r3, #32]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	441a      	add	r2, r3
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2203      	movs	r2, #3
 8004a78:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004a7c:	e006      	b.n	8004a8c <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f80f 	bl	8004aaa <USBH_CDC_ReceiveCallback>
      break;
 8004a8c:	bf00      	nop
  }
}
 8004a8e:	bf00      	nop
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	4613      	mov	r3, r2
 8004ade:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e029      	b.n	8004b3e <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	79fa      	ldrb	r2, [r7, #7]
 8004aee:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f81f 	bl	8004b46 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f001 fc38 	bl	80063ac <USBH_LL_Init>

  return USBH_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b085      	sub	sp, #20
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	e009      	b.n	8004b6c <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	33e0      	adds	r3, #224	; 0xe0
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	2200      	movs	r2, #0
 8004b64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b0e      	cmp	r3, #14
 8004b70:	d9f2      	bls.n	8004b58 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e009      	b.n	8004b8c <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b92:	d3f1      	bcc.n	8004b78 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2240      	movs	r2, #64	; 0x40
 8004bb8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b085      	sub	sp, #20
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d016      	beq.n	8004c30 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10e      	bne.n	8004c2a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004c12:	1c59      	adds	r1, r3, #1
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	33de      	adds	r3, #222	; 0xde
 8004c1e:	6839      	ldr	r1, [r7, #0]
 8004c20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	73fb      	strb	r3, [r7, #15]
 8004c28:	e004      	b.n	8004c34 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	73fb      	strb	r3, [r7, #15]
 8004c2e:	e001      	b.n	8004c34 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8004c30:	2302      	movs	r3, #2
 8004c32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8004c58:	78fa      	ldrb	r2, [r7, #3]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d204      	bcs.n	8004c68 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	78fa      	ldrb	r2, [r7, #3]
 8004c62:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8004c66:	e001      	b.n	8004c6c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8004c68:	2302      	movs	r3, #2
 8004c6a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b087      	sub	sp, #28
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	4608      	mov	r0, r1
 8004c84:	4611      	mov	r1, r2
 8004c86:	461a      	mov	r2, r3
 8004c88:	4603      	mov	r3, r0
 8004c8a:	70fb      	strb	r3, [r7, #3]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	70bb      	strb	r3, [r7, #2]
 8004c90:	4613      	mov	r3, r2
 8004c92:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8004ca2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004ca4:	e025      	b.n	8004cf2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
 8004ca8:	221a      	movs	r2, #26
 8004caa:	fb02 f303 	mul.w	r3, r2, r3
 8004cae:	3308      	adds	r3, #8
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	795b      	ldrb	r3, [r3, #5]
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d002      	beq.n	8004cc8 <USBH_FindInterface+0x4e>
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	2bff      	cmp	r3, #255	; 0xff
 8004cc6:	d111      	bne.n	8004cec <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004ccc:	78ba      	ldrb	r2, [r7, #2]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d002      	beq.n	8004cd8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004cd2:	78bb      	ldrb	r3, [r7, #2]
 8004cd4:	2bff      	cmp	r3, #255	; 0xff
 8004cd6:	d109      	bne.n	8004cec <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004cdc:	787a      	ldrb	r2, [r7, #1]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d002      	beq.n	8004ce8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004ce2:	787b      	ldrb	r3, [r7, #1]
 8004ce4:	2bff      	cmp	r3, #255	; 0xff
 8004ce6:	d101      	bne.n	8004cec <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8004ce8:	7dfb      	ldrb	r3, [r7, #23]
 8004cea:	e006      	b.n	8004cfa <USBH_FindInterface+0x80>
    }
    if_ix++;
 8004cec:	7dfb      	ldrb	r3, [r7, #23]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d9d6      	bls.n	8004ca6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8004cf8:	23ff      	movs	r3, #255	; 0xff
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f001 fb88 	bl	8006424 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8004d14:	2101      	movs	r1, #1
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f001 fca1 	bl	800665e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af04      	add	r7, sp, #16
 8004d2e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004d30:	2302      	movs	r3, #2
 8004d32:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d102      	bne.n	8004d4a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2203      	movs	r2, #3
 8004d48:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b0b      	cmp	r3, #11
 8004d52:	f200 81b3 	bhi.w	80050bc <USBH_Process+0x394>
 8004d56:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <USBH_Process+0x34>)
 8004d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5c:	08004d8d 	.word	0x08004d8d
 8004d60:	08004dbf 	.word	0x08004dbf
 8004d64:	08004e27 	.word	0x08004e27
 8004d68:	08005057 	.word	0x08005057
 8004d6c:	080050bd 	.word	0x080050bd
 8004d70:	08004ecb 	.word	0x08004ecb
 8004d74:	08004ffd 	.word	0x08004ffd
 8004d78:	08004f01 	.word	0x08004f01
 8004d7c:	08004f21 	.word	0x08004f21
 8004d80:	08004f41 	.word	0x08004f41
 8004d84:	08004f6f 	.word	0x08004f6f
 8004d88:	0800503f 	.word	0x0800503f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8193 	beq.w	80050c0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8004da0:	20c8      	movs	r0, #200	; 0xc8
 8004da2:	f001 fca3 	bl	80066ec <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f001 fb99 	bl	80064de <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8004dbc:	e180      	b.n	80050c0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d107      	bne.n	8004dd8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004dd6:	e182      	b.n	80050de <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004de2:	d914      	bls.n	8004e0e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004dea:	3301      	adds	r3, #1
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d903      	bls.n	8004e06 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	220d      	movs	r2, #13
 8004e02:	701a      	strb	r2, [r3, #0]
      break;
 8004e04:	e16b      	b.n	80050de <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	701a      	strb	r2, [r3, #0]
      break;
 8004e0c:	e167      	b.n	80050de <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004e14:	f103 020a 	add.w	r2, r3, #10
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8004e1e:	200a      	movs	r0, #10
 8004e20:	f001 fc64 	bl	80066ec <USBH_Delay>
      break;
 8004e24:	e15b      	b.n	80050de <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004e36:	2104      	movs	r1, #4
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8004e3c:	2064      	movs	r0, #100	; 0x64
 8004e3e:	f001 fc55 	bl	80066ec <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f001 fb24 	bl	8006490 <USBH_LL_GetSpeed>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2205      	movs	r2, #5
 8004e56:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8004e58:	2100      	movs	r1, #0
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f001 f92f 	bl	80060be <USBH_AllocPipe>
 8004e60:	4603      	mov	r3, r0
 8004e62:	461a      	mov	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8004e68:	2180      	movs	r1, #128	; 0x80
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f001 f927 	bl	80060be <USBH_AllocPipe>
 8004e70:	4603      	mov	r3, r0
 8004e72:	461a      	mov	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	7919      	ldrb	r1, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004e8c:	b292      	uxth	r2, r2
 8004e8e:	9202      	str	r2, [sp, #8]
 8004e90:	2200      	movs	r2, #0
 8004e92:	9201      	str	r2, [sp, #4]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	4603      	mov	r3, r0
 8004e98:	2280      	movs	r2, #128	; 0x80
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f001 f8e0 	bl	8006060 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	7959      	ldrb	r1, [r3, #5]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004eb4:	b292      	uxth	r2, r2
 8004eb6:	9202      	str	r2, [sp, #8]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	9201      	str	r2, [sp, #4]
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f001 f8cc 	bl	8006060 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004ec8:	e109      	b.n	80050de <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f90c 	bl	80050e8 <USBH_HandleEnum>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8004ed4:	7bbb      	ldrb	r3, [r7, #14]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f040 80f3 	bne.w	80050c4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d103      	bne.n	8004ef8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2208      	movs	r2, #8
 8004ef4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8004ef6:	e0e5      	b.n	80050c4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2207      	movs	r2, #7
 8004efc:	701a      	strb	r2, [r3, #0]
      break;
 8004efe:	e0e1      	b.n	80050c4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 80de 	beq.w	80050c8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004f12:	2101      	movs	r1, #1
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8004f1e:	e0d3      	b.n	80050c8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	4619      	mov	r1, r3
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fc20 	bl	8005770 <USBH_SetCfg>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f040 80ca 	bne.w	80050cc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2209      	movs	r2, #9
 8004f3c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004f3e:	e0c5      	b.n	80050cc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8004f4e:	2101      	movs	r1, #1
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fc30 	bl	80057b6 <USBH_SetFeature>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f040 80b9 	bne.w	80050d0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	220a      	movs	r2, #10
 8004f62:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004f64:	e0b4      	b.n	80050d0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	220a      	movs	r2, #10
 8004f6a:	701a      	strb	r2, [r3, #0]
      break;
 8004f6c:	e0b0      	b.n	80050d0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80ad 	beq.w	80050d4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004f82:	2300      	movs	r3, #0
 8004f84:	73fb      	strb	r3, [r7, #15]
 8004f86:	e016      	b.n	8004fb6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004f88:	7bfa      	ldrb	r2, [r7, #15]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	32de      	adds	r2, #222	; 0xde
 8004f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f92:	791a      	ldrb	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d108      	bne.n	8004fb0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8004f9e:	7bfa      	ldrb	r2, [r7, #15]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	32de      	adds	r2, #222	; 0xde
 8004fa4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8004fae:	e005      	b.n	8004fbc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	73fb      	strb	r3, [r7, #15]
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0e5      	beq.n	8004f88 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d016      	beq.n	8004ff4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	4798      	blx	r3
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d109      	bne.n	8004fec <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2206      	movs	r2, #6
 8004fdc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004fe4:	2103      	movs	r1, #3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004fea:	e073      	b.n	80050d4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	220d      	movs	r2, #13
 8004ff0:	701a      	strb	r2, [r3, #0]
      break;
 8004ff2:	e06f      	b.n	80050d4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	220d      	movs	r2, #13
 8004ff8:	701a      	strb	r2, [r3, #0]
      break;
 8004ffa:	e06b      	b.n	80050d4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005002:	2b00      	cmp	r3, #0
 8005004:	d017      	beq.n	8005036 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	4798      	blx	r3
 8005012:	4603      	mov	r3, r0
 8005014:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005016:	7bbb      	ldrb	r3, [r7, #14]
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d103      	bne.n	8005026 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	220b      	movs	r2, #11
 8005022:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005024:	e058      	b.n	80050d8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8005026:	7bbb      	ldrb	r3, [r7, #14]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d154      	bne.n	80050d8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	220d      	movs	r2, #13
 8005032:	701a      	strb	r2, [r3, #0]
      break;
 8005034:	e050      	b.n	80050d8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	220d      	movs	r2, #13
 800503a:	701a      	strb	r2, [r3, #0]
      break;
 800503c:	e04c      	b.n	80050d8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d049      	beq.n	80050dc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	4798      	blx	r3
      }
      break;
 8005054:	e042      	b.n	80050dc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff fd71 	bl	8004b46 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005092:	2105      	movs	r1, #5
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d107      	bne.n	80050b4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff fe2a 	bl	8004d06 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80050b2:	e014      	b.n	80050de <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f001 f9b5 	bl	8006424 <USBH_LL_Start>
      break;
 80050ba:	e010      	b.n	80050de <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80050bc:	bf00      	nop
 80050be:	e00e      	b.n	80050de <USBH_Process+0x3b6>
      break;
 80050c0:	bf00      	nop
 80050c2:	e00c      	b.n	80050de <USBH_Process+0x3b6>
      break;
 80050c4:	bf00      	nop
 80050c6:	e00a      	b.n	80050de <USBH_Process+0x3b6>
    break;
 80050c8:	bf00      	nop
 80050ca:	e008      	b.n	80050de <USBH_Process+0x3b6>
      break;
 80050cc:	bf00      	nop
 80050ce:	e006      	b.n	80050de <USBH_Process+0x3b6>
      break;
 80050d0:	bf00      	nop
 80050d2:	e004      	b.n	80050de <USBH_Process+0x3b6>
      break;
 80050d4:	bf00      	nop
 80050d6:	e002      	b.n	80050de <USBH_Process+0x3b6>
      break;
 80050d8:	bf00      	nop
 80050da:	e000      	b.n	80050de <USBH_Process+0x3b6>
      break;
 80050dc:	bf00      	nop
  }
  return USBH_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af04      	add	r7, sp, #16
 80050ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80050f4:	2301      	movs	r3, #1
 80050f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	785b      	ldrb	r3, [r3, #1]
 80050fc:	2b07      	cmp	r3, #7
 80050fe:	f200 81c1 	bhi.w	8005484 <USBH_HandleEnum+0x39c>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <USBH_HandleEnum+0x20>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	08005129 	.word	0x08005129
 800510c:	080051e7 	.word	0x080051e7
 8005110:	08005251 	.word	0x08005251
 8005114:	080052df 	.word	0x080052df
 8005118:	08005349 	.word	0x08005349
 800511c:	080053b9 	.word	0x080053b9
 8005120:	080053ff 	.word	0x080053ff
 8005124:	08005445 	.word	0x08005445
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005128:	2108      	movs	r1, #8
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fa50 	bl	80055d0 <USBH_Get_DevDesc>
 8005130:	4603      	mov	r3, r0
 8005132:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005134:	7bbb      	ldrb	r3, [r7, #14]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d130      	bne.n	800519c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	7919      	ldrb	r1, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800515e:	b292      	uxth	r2, r2
 8005160:	9202      	str	r2, [sp, #8]
 8005162:	2200      	movs	r2, #0
 8005164:	9201      	str	r2, [sp, #4]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	4603      	mov	r3, r0
 800516a:	2280      	movs	r2, #128	; 0x80
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 ff77 	bl	8006060 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	7959      	ldrb	r1, [r3, #5]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005186:	b292      	uxth	r2, r2
 8005188:	9202      	str	r2, [sp, #8]
 800518a:	2200      	movs	r2, #0
 800518c:	9201      	str	r2, [sp, #4]
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	4603      	mov	r3, r0
 8005192:	2200      	movs	r2, #0
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 ff63 	bl	8006060 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800519a:	e175      	b.n	8005488 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800519c:	7bbb      	ldrb	r3, [r7, #14]
 800519e:	2b03      	cmp	r3, #3
 80051a0:	f040 8172 	bne.w	8005488 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80051aa:	3301      	adds	r3, #1
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d903      	bls.n	80051c6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	220d      	movs	r2, #13
 80051c2:	701a      	strb	r2, [r3, #0]
      break;
 80051c4:	e160      	b.n	8005488 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	795b      	ldrb	r3, [r3, #5]
 80051ca:	4619      	mov	r1, r3
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 ff97 	bl	8006100 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	791b      	ldrb	r3, [r3, #4]
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 ff91 	bl	8006100 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
      break;
 80051e4:	e150      	b.n	8005488 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80051e6:	2112      	movs	r1, #18
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f9f1 	bl	80055d0 <USBH_Get_DevDesc>
 80051ee:	4603      	mov	r3, r0
 80051f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80051f2:	7bbb      	ldrb	r3, [r7, #14]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d103      	bne.n	8005200 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80051fe:	e145      	b.n	800548c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005200:	7bbb      	ldrb	r3, [r7, #14]
 8005202:	2b03      	cmp	r3, #3
 8005204:	f040 8142 	bne.w	800548c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800520e:	3301      	adds	r3, #1
 8005210:	b2da      	uxtb	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800521e:	2b03      	cmp	r3, #3
 8005220:	d903      	bls.n	800522a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	220d      	movs	r2, #13
 8005226:	701a      	strb	r2, [r3, #0]
      break;
 8005228:	e130      	b.n	800548c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	795b      	ldrb	r3, [r3, #5]
 800522e:	4619      	mov	r1, r3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 ff65 	bl	8006100 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	791b      	ldrb	r3, [r3, #4]
 800523a:	4619      	mov	r1, r3
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 ff5f 	bl	8006100 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	701a      	strb	r2, [r3, #0]
      break;
 800524e:	e11d      	b.n	800548c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005250:	2101      	movs	r1, #1
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fa68 	bl	8005728 <USBH_SetAddress>
 8005258:	4603      	mov	r3, r0
 800525a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800525c:	7bbb      	ldrb	r3, [r7, #14]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d132      	bne.n	80052c8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005262:	2002      	movs	r0, #2
 8005264:	f001 fa42 	bl	80066ec <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2203      	movs	r2, #3
 8005274:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	7919      	ldrb	r1, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800528a:	b292      	uxth	r2, r2
 800528c:	9202      	str	r2, [sp, #8]
 800528e:	2200      	movs	r2, #0
 8005290:	9201      	str	r2, [sp, #4]
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	4603      	mov	r3, r0
 8005296:	2280      	movs	r2, #128	; 0x80
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fee1 	bl	8006060 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	7959      	ldrb	r1, [r3, #5]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80052b2:	b292      	uxth	r2, r2
 80052b4:	9202      	str	r2, [sp, #8]
 80052b6:	2200      	movs	r2, #0
 80052b8:	9201      	str	r2, [sp, #4]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	4603      	mov	r3, r0
 80052be:	2200      	movs	r2, #0
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fecd 	bl	8006060 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80052c6:	e0e3      	b.n	8005490 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80052c8:	7bbb      	ldrb	r3, [r7, #14]
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	f040 80e0 	bne.w	8005490 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	220d      	movs	r2, #13
 80052d4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	705a      	strb	r2, [r3, #1]
      break;
 80052dc:	e0d8      	b.n	8005490 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80052de:	2109      	movs	r1, #9
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f99d 	bl	8005620 <USBH_Get_CfgDesc>
 80052e6:	4603      	mov	r3, r0
 80052e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80052ea:	7bbb      	ldrb	r3, [r7, #14]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d103      	bne.n	80052f8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2204      	movs	r2, #4
 80052f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80052f6:	e0cd      	b.n	8005494 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80052f8:	7bbb      	ldrb	r3, [r7, #14]
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	f040 80ca 	bne.w	8005494 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005306:	3301      	adds	r3, #1
 8005308:	b2da      	uxtb	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005316:	2b03      	cmp	r3, #3
 8005318:	d903      	bls.n	8005322 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	220d      	movs	r2, #13
 800531e:	701a      	strb	r2, [r3, #0]
      break;
 8005320:	e0b8      	b.n	8005494 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	795b      	ldrb	r3, [r3, #5]
 8005326:	4619      	mov	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fee9 	bl	8006100 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	791b      	ldrb	r3, [r3, #4]
 8005332:	4619      	mov	r1, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fee3 	bl	8006100 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]
      break;
 8005346:	e0a5      	b.n	8005494 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800534e:	4619      	mov	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f965 	bl	8005620 <USBH_Get_CfgDesc>
 8005356:	4603      	mov	r3, r0
 8005358:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800535a:	7bbb      	ldrb	r3, [r7, #14]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d103      	bne.n	8005368 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2205      	movs	r2, #5
 8005364:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005366:	e097      	b.n	8005498 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005368:	7bbb      	ldrb	r3, [r7, #14]
 800536a:	2b03      	cmp	r3, #3
 800536c:	f040 8094 	bne.w	8005498 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005376:	3301      	adds	r3, #1
 8005378:	b2da      	uxtb	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005386:	2b03      	cmp	r3, #3
 8005388:	d903      	bls.n	8005392 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	220d      	movs	r2, #13
 800538e:	701a      	strb	r2, [r3, #0]
      break;
 8005390:	e082      	b.n	8005498 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	795b      	ldrb	r3, [r3, #5]
 8005396:	4619      	mov	r1, r3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 feb1 	bl	8006100 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	791b      	ldrb	r3, [r3, #4]
 80053a2:	4619      	mov	r1, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 feab 	bl	8006100 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]
      break;
 80053b6:	e06f      	b.n	8005498 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d019      	beq.n	80053f6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80053ce:	23ff      	movs	r3, #255	; 0xff
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f949 	bl	8005668 <USBH_Get_StringDesc>
 80053d6:	4603      	mov	r3, r0
 80053d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80053da:	7bbb      	ldrb	r3, [r7, #14]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d103      	bne.n	80053e8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2206      	movs	r2, #6
 80053e4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80053e6:	e059      	b.n	800549c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80053e8:	7bbb      	ldrb	r3, [r7, #14]
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d156      	bne.n	800549c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2206      	movs	r2, #6
 80053f2:	705a      	strb	r2, [r3, #1]
      break;
 80053f4:	e052      	b.n	800549c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2206      	movs	r2, #6
 80053fa:	705a      	strb	r2, [r3, #1]
      break;
 80053fc:	e04e      	b.n	800549c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8005404:	2b00      	cmp	r3, #0
 8005406:	d019      	beq.n	800543c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005414:	23ff      	movs	r3, #255	; 0xff
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f926 	bl	8005668 <USBH_Get_StringDesc>
 800541c:	4603      	mov	r3, r0
 800541e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005420:	7bbb      	ldrb	r3, [r7, #14]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d103      	bne.n	800542e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2207      	movs	r2, #7
 800542a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800542c:	e038      	b.n	80054a0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800542e:	7bbb      	ldrb	r3, [r7, #14]
 8005430:	2b03      	cmp	r3, #3
 8005432:	d135      	bne.n	80054a0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2207      	movs	r2, #7
 8005438:	705a      	strb	r2, [r3, #1]
      break;
 800543a:	e031      	b.n	80054a0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2207      	movs	r2, #7
 8005440:	705a      	strb	r2, [r3, #1]
      break;
 8005442:	e02d      	b.n	80054a0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800544a:	2b00      	cmp	r3, #0
 800544c:	d017      	beq.n	800547e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800545a:	23ff      	movs	r3, #255	; 0xff
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f903 	bl	8005668 <USBH_Get_StringDesc>
 8005462:	4603      	mov	r3, r0
 8005464:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005466:	7bbb      	ldrb	r3, [r7, #14]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d102      	bne.n	8005472 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8005470:	e018      	b.n	80054a4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005472:	7bbb      	ldrb	r3, [r7, #14]
 8005474:	2b03      	cmp	r3, #3
 8005476:	d115      	bne.n	80054a4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	73fb      	strb	r3, [r7, #15]
      break;
 800547c:	e012      	b.n	80054a4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	73fb      	strb	r3, [r7, #15]
      break;
 8005482:	e00f      	b.n	80054a4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8005484:	bf00      	nop
 8005486:	e00e      	b.n	80054a6 <USBH_HandleEnum+0x3be>
      break;
 8005488:	bf00      	nop
 800548a:	e00c      	b.n	80054a6 <USBH_HandleEnum+0x3be>
      break;
 800548c:	bf00      	nop
 800548e:	e00a      	b.n	80054a6 <USBH_HandleEnum+0x3be>
      break;
 8005490:	bf00      	nop
 8005492:	e008      	b.n	80054a6 <USBH_HandleEnum+0x3be>
      break;
 8005494:	bf00      	nop
 8005496:	e006      	b.n	80054a6 <USBH_HandleEnum+0x3be>
      break;
 8005498:	bf00      	nop
 800549a:	e004      	b.n	80054a6 <USBH_HandleEnum+0x3be>
      break;
 800549c:	bf00      	nop
 800549e:	e002      	b.n	80054a6 <USBH_HandleEnum+0x3be>
      break;
 80054a0:	bf00      	nop
 80054a2:	e000      	b.n	80054a6 <USBH_HandleEnum+0x3be>
      break;
 80054a4:	bf00      	nop
  }
  return Status;
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b082      	sub	sp, #8
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f804 	bl	80054f2 <USBH_HandleSof>
}
 80054ea:	bf00      	nop
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b0b      	cmp	r3, #11
 8005502:	d10a      	bne.n	800551a <USBH_HandleSof+0x28>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	4798      	blx	r3
  }
}
 800551a:	bf00      	nop
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8005532:	bf00      	nop
}
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800554e:	bf00      	nop
}
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 ff56 	bl	800645a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	791b      	ldrb	r3, [r3, #4]
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fda3 	bl	8006100 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	795b      	ldrb	r3, [r3, #5]
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fd9d 	bl	8006100 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	4613      	mov	r3, r2
 80055ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055ee:	2100      	movs	r1, #0
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f864 	bl	80056be <USBH_GetDescriptor>
 80055f6:	4603      	mov	r3, r0
 80055f8:	73fb      	strb	r3, [r7, #15]
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10a      	bne.n	8005616 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f203 3026 	addw	r0, r3, #806	; 0x326
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800560c:	78fa      	ldrb	r2, [r7, #3]
 800560e:	b292      	uxth	r2, r2
 8005610:	4619      	mov	r1, r3
 8005612:	f000 f918 	bl	8005846 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8005616:	7bfb      	ldrb	r3, [r7, #15]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af02      	add	r7, sp, #8
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	331c      	adds	r3, #28
 8005630:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8005632:	887b      	ldrh	r3, [r7, #2]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800563c:	2100      	movs	r1, #0
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f83d 	bl	80056be <USBH_GetDescriptor>
 8005644:	4603      	mov	r3, r0
 8005646:	72fb      	strb	r3, [r7, #11]
 8005648:	7afb      	ldrb	r3, [r7, #11]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d107      	bne.n	800565e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005654:	887a      	ldrh	r2, [r7, #2]
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	4618      	mov	r0, r3
 800565a:	f000 f964 	bl	8005926 <USBH_ParseCfgDesc>
  }

  return status;
 800565e:	7afb      	ldrb	r3, [r7, #11]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	607a      	str	r2, [r7, #4]
 8005672:	461a      	mov	r2, r3
 8005674:	460b      	mov	r3, r1
 8005676:	72fb      	strb	r3, [r7, #11]
 8005678:	4613      	mov	r3, r2
 800567a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800567c:	7afb      	ldrb	r3, [r7, #11]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005684:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800568c:	893b      	ldrh	r3, [r7, #8]
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	460b      	mov	r3, r1
 8005692:	2100      	movs	r1, #0
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 f812 	bl	80056be <USBH_GetDescriptor>
 800569a:	4603      	mov	r3, r0
 800569c:	75fb      	strb	r3, [r7, #23]
 800569e:	7dfb      	ldrb	r3, [r7, #23]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d107      	bne.n	80056b4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80056aa:	893a      	ldrh	r2, [r7, #8]
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fa37 	bl	8005b22 <USBH_ParseStringDesc>
  }

  return status;
 80056b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	607b      	str	r3, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	72fb      	strb	r3, [r7, #11]
 80056cc:	4613      	mov	r3, r2
 80056ce:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	789b      	ldrb	r3, [r3, #2]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d11c      	bne.n	8005712 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80056d8:	7afb      	ldrb	r3, [r7, #11]
 80056da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2206      	movs	r2, #6
 80056e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	893a      	ldrh	r2, [r7, #8]
 80056ee:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80056f0:	893b      	ldrh	r3, [r7, #8]
 80056f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056fa:	d104      	bne.n	8005706 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f240 4209 	movw	r2, #1033	; 0x409
 8005702:	829a      	strh	r2, [r3, #20]
 8005704:	e002      	b.n	800570c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8b3a      	ldrh	r2, [r7, #24]
 8005710:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8005712:	8b3b      	ldrh	r3, [r7, #24]
 8005714:	461a      	mov	r2, r3
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fa50 	bl	8005bbe <USBH_CtlReq>
 800571e:	4603      	mov	r3, r0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	460b      	mov	r3, r1
 8005732:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	789b      	ldrb	r3, [r3, #2]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d10f      	bne.n	800575c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2205      	movs	r2, #5
 8005746:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	b29a      	uxth	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800575c:	2200      	movs	r2, #0
 800575e:	2100      	movs	r1, #0
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fa2c 	bl	8005bbe <USBH_CtlReq>
 8005766:	4603      	mov	r3, r0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	789b      	ldrb	r3, [r3, #2]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d10e      	bne.n	80057a2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2209      	movs	r2, #9
 800578e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	887a      	ldrh	r2, [r7, #2]
 8005794:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80057a2:	2200      	movs	r2, #0
 80057a4:	2100      	movs	r1, #0
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fa09 	bl	8005bbe <USBH_CtlReq>
 80057ac:	4603      	mov	r3, r0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b082      	sub	sp, #8
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	460b      	mov	r3, r1
 80057c0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	789b      	ldrb	r3, [r3, #2]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d10f      	bne.n	80057ea <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2203      	movs	r2, #3
 80057d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	b29a      	uxth	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80057ea:	2200      	movs	r2, #0
 80057ec:	2100      	movs	r1, #0
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f9e5 	bl	8005bbe <USBH_CtlReq>
 80057f4:	4603      	mov	r3, r0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	460b      	mov	r3, r1
 8005808:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	789b      	ldrb	r3, [r3, #2]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d10f      	bne.n	8005832 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2202      	movs	r2, #2
 8005816:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	b29a      	uxth	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8005832:	2200      	movs	r2, #0
 8005834:	2100      	movs	r1, #0
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f9c1 	bl	8005bbe <USBH_CtlReq>
 800583c:	4603      	mov	r3, r0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8005846:	b480      	push	{r7}
 8005848:	b085      	sub	sp, #20
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	4613      	mov	r3, r2
 8005852:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	781a      	ldrb	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	785a      	ldrb	r2, [r3, #1]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	3302      	adds	r3, #2
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	b29a      	uxth	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	3303      	adds	r3, #3
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	b29b      	uxth	r3, r3
 8005874:	021b      	lsls	r3, r3, #8
 8005876:	b29b      	uxth	r3, r3
 8005878:	4313      	orrs	r3, r2
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	791a      	ldrb	r2, [r3, #4]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	795a      	ldrb	r2, [r3, #5]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	799a      	ldrb	r2, [r3, #6]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	79da      	ldrb	r2, [r3, #7]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d939      	bls.n	800591a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	3308      	adds	r3, #8
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	3309      	adds	r3, #9
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	4313      	orrs	r3, r2
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	330a      	adds	r3, #10
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	330b      	adds	r3, #11
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	4313      	orrs	r3, r2
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	330c      	adds	r3, #12
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	330d      	adds	r3, #13
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	4313      	orrs	r3, r2
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	7b9a      	ldrb	r2, [r3, #14]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	7bda      	ldrb	r2, [r3, #15]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	7c1a      	ldrb	r2, [r3, #16]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	7c5a      	ldrb	r2, [r3, #17]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	745a      	strb	r2, [r3, #17]
  }
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b08a      	sub	sp, #40	; 0x28
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	4613      	mov	r3, r2
 8005932:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	781a      	ldrb	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	785a      	ldrb	r2, [r3, #1]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	3302      	adds	r3, #2
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	b29a      	uxth	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	3303      	adds	r3, #3
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	b29b      	uxth	r3, r3
 800596c:	4313      	orrs	r3, r2
 800596e:	b29a      	uxth	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	791a      	ldrb	r2, [r3, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	795a      	ldrb	r2, [r3, #5]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	799a      	ldrb	r2, [r3, #6]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	79da      	ldrb	r2, [r3, #7]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	7a1a      	ldrb	r2, [r3, #8]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800599c:	88fb      	ldrh	r3, [r7, #6]
 800599e:	2b09      	cmp	r3, #9
 80059a0:	d95f      	bls.n	8005a62 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80059a2:	2309      	movs	r3, #9
 80059a4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80059aa:	e051      	b.n	8005a50 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80059ac:	f107 0316 	add.w	r3, r7, #22
 80059b0:	4619      	mov	r1, r3
 80059b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059b4:	f000 f8e8 	bl	8005b88 <USBH_GetNextDesc>
 80059b8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d146      	bne.n	8005a50 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80059c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059c6:	221a      	movs	r2, #26
 80059c8:	fb02 f303 	mul.w	r3, r2, r3
 80059cc:	3308      	adds	r3, #8
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	3302      	adds	r3, #2
 80059d4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80059d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059d8:	69f8      	ldr	r0, [r7, #28]
 80059da:	f000 f846 	bl	8005a6a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80059e8:	e022      	b.n	8005a30 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80059ea:	f107 0316 	add.w	r3, r7, #22
 80059ee:	4619      	mov	r1, r3
 80059f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059f2:	f000 f8c9 	bl	8005b88 <USBH_GetNextDesc>
 80059f6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	785b      	ldrb	r3, [r3, #1]
 80059fc:	2b05      	cmp	r3, #5
 80059fe:	d117      	bne.n	8005a30 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8005a00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a04:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8005a08:	3201      	adds	r2, #1
 8005a0a:	00d2      	lsls	r2, r2, #3
 8005a0c:	211a      	movs	r1, #26
 8005a0e:	fb01 f303 	mul.w	r3, r1, r3
 8005a12:	4413      	add	r3, r2
 8005a14:	3308      	adds	r3, #8
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8005a1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a20:	69b8      	ldr	r0, [r7, #24]
 8005a22:	f000 f851 	bl	8005ac8 <USBH_ParseEPDesc>
            ep_ix++;
 8005a26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	791b      	ldrb	r3, [r3, #4]
 8005a34:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d204      	bcs.n	8005a46 <USBH_ParseCfgDesc+0x120>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	885a      	ldrh	r2, [r3, #2]
 8005a40:	8afb      	ldrh	r3, [r7, #22]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d8d1      	bhi.n	80059ea <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8005a46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005a50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d804      	bhi.n	8005a62 <USBH_ParseCfgDesc+0x13c>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	885a      	ldrh	r2, [r3, #2]
 8005a5c:	8afb      	ldrh	r3, [r7, #22]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d8a4      	bhi.n	80059ac <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8005a62:	bf00      	nop
 8005a64:	3728      	adds	r7, #40	; 0x28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781a      	ldrb	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	785a      	ldrb	r2, [r3, #1]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	789a      	ldrb	r2, [r3, #2]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	78da      	ldrb	r2, [r3, #3]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	791a      	ldrb	r2, [r3, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	795a      	ldrb	r2, [r3, #5]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	799a      	ldrb	r2, [r3, #6]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	79da      	ldrb	r2, [r3, #7]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	7a1a      	ldrb	r2, [r3, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	721a      	strb	r2, [r3, #8]
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781a      	ldrb	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	785a      	ldrb	r2, [r3, #1]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	789a      	ldrb	r2, [r3, #2]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	78da      	ldrb	r2, [r3, #3]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	3304      	adds	r3, #4
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	3305      	adds	r3, #5
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	4313      	orrs	r3, r2
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	799a      	ldrb	r2, [r3, #6]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	719a      	strb	r2, [r3, #6]
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b087      	sub	sp, #28
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3301      	adds	r3, #1
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d120      	bne.n	8005b7c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	1e9a      	subs	r2, r3, #2
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	4293      	cmp	r3, r2
 8005b44:	bf28      	it	cs
 8005b46:	4613      	movcs	r3, r2
 8005b48:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3302      	adds	r3, #2
 8005b4e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8005b50:	2300      	movs	r3, #0
 8005b52:	82fb      	strh	r3, [r7, #22]
 8005b54:	e00b      	b.n	8005b6e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8005b56:	8afb      	ldrh	r3, [r7, #22]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	781a      	ldrb	r2, [r3, #0]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	701a      	strb	r2, [r3, #0]
      pdest++;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	3301      	adds	r3, #1
 8005b66:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8005b68:	8afb      	ldrh	r3, [r7, #22]
 8005b6a:	3302      	adds	r3, #2
 8005b6c:	82fb      	strh	r3, [r7, #22]
 8005b6e:	8afa      	ldrh	r2, [r7, #22]
 8005b70:	8abb      	ldrh	r3, [r7, #20]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d3ef      	bcc.n	8005b56 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	701a      	strb	r2, [r3, #0]
  }
}
 8005b7c:	bf00      	nop
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	881a      	ldrh	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4413      	add	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	789b      	ldrb	r3, [r3, #2]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d002      	beq.n	8005bde <USBH_CtlReq+0x20>
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d00f      	beq.n	8005bfc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8005bdc:	e027      	b.n	8005c2e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	88fa      	ldrh	r2, [r7, #6]
 8005be8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bfa:	e018      	b.n	8005c2e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f81b 	bl	8005c38 <USBH_HandleControl>
 8005c02:	4603      	mov	r3, r0
 8005c04:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <USBH_CtlReq+0x54>
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d106      	bne.n	8005c20 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	761a      	strb	r2, [r3, #24]
      break;
 8005c1e:	e005      	b.n	8005c2c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d102      	bne.n	8005c2c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	709a      	strb	r2, [r3, #2]
      break;
 8005c2c:	bf00      	nop
  }
  return status;
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c40:	2301      	movs	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c44:	2300      	movs	r3, #0
 8005c46:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	7e1b      	ldrb	r3, [r3, #24]
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	2b0a      	cmp	r3, #10
 8005c50:	f200 8156 	bhi.w	8005f00 <USBH_HandleControl+0x2c8>
 8005c54:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <USBH_HandleControl+0x24>)
 8005c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5a:	bf00      	nop
 8005c5c:	08005c89 	.word	0x08005c89
 8005c60:	08005ca3 	.word	0x08005ca3
 8005c64:	08005d0d 	.word	0x08005d0d
 8005c68:	08005d33 	.word	0x08005d33
 8005c6c:	08005d6b 	.word	0x08005d6b
 8005c70:	08005d95 	.word	0x08005d95
 8005c74:	08005de7 	.word	0x08005de7
 8005c78:	08005e09 	.word	0x08005e09
 8005c7c:	08005e45 	.word	0x08005e45
 8005c80:	08005e6b 	.word	0x08005e6b
 8005c84:	08005ea9 	.word	0x08005ea9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f103 0110 	add.w	r1, r3, #16
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	795b      	ldrb	r3, [r3, #5]
 8005c92:	461a      	mov	r2, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f943 	bl	8005f20 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	761a      	strb	r2, [r3, #24]
      break;
 8005ca0:	e139      	b.n	8005f16 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	795b      	ldrb	r3, [r3, #5]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fcc5 	bl	8006638 <USBH_LL_GetURBState>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8005cb2:	7bbb      	ldrb	r3, [r7, #14]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d11e      	bne.n	8005cf6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	7c1b      	ldrb	r3, [r3, #16]
 8005cbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005cc0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	8adb      	ldrh	r3, [r3, #22]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8005cca:	7b7b      	ldrb	r3, [r7, #13]
 8005ccc:	2b80      	cmp	r3, #128	; 0x80
 8005cce:	d103      	bne.n	8005cd8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2203      	movs	r2, #3
 8005cd4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005cd6:	e115      	b.n	8005f04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2205      	movs	r2, #5
 8005cdc:	761a      	strb	r2, [r3, #24]
      break;
 8005cde:	e111      	b.n	8005f04 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8005ce0:	7b7b      	ldrb	r3, [r7, #13]
 8005ce2:	2b80      	cmp	r3, #128	; 0x80
 8005ce4:	d103      	bne.n	8005cee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2209      	movs	r2, #9
 8005cea:	761a      	strb	r2, [r3, #24]
      break;
 8005cec:	e10a      	b.n	8005f04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2207      	movs	r2, #7
 8005cf2:	761a      	strb	r2, [r3, #24]
      break;
 8005cf4:	e106      	b.n	8005f04 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005cf6:	7bbb      	ldrb	r3, [r7, #14]
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d003      	beq.n	8005d04 <USBH_HandleControl+0xcc>
 8005cfc:	7bbb      	ldrb	r3, [r7, #14]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	f040 8100 	bne.w	8005f04 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	220b      	movs	r2, #11
 8005d08:	761a      	strb	r2, [r3, #24]
      break;
 8005d0a:	e0fb      	b.n	8005f04 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6899      	ldr	r1, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	899a      	ldrh	r2, [r3, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	791b      	ldrb	r3, [r3, #4]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f93a 	bl	8005f9e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	761a      	strb	r2, [r3, #24]
      break;
 8005d30:	e0f1      	b.n	8005f16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	791b      	ldrb	r3, [r3, #4]
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fc7d 	bl	8006638 <USBH_LL_GetURBState>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8005d42:	7bbb      	ldrb	r3, [r7, #14]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d102      	bne.n	8005d4e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2209      	movs	r2, #9
 8005d4c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8005d4e:	7bbb      	ldrb	r3, [r7, #14]
 8005d50:	2b05      	cmp	r3, #5
 8005d52:	d102      	bne.n	8005d5a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8005d54:	2303      	movs	r3, #3
 8005d56:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005d58:	e0d6      	b.n	8005f08 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8005d5a:	7bbb      	ldrb	r3, [r7, #14]
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	f040 80d3 	bne.w	8005f08 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	220b      	movs	r2, #11
 8005d66:	761a      	strb	r2, [r3, #24]
      break;
 8005d68:	e0ce      	b.n	8005f08 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6899      	ldr	r1, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	899a      	ldrh	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	795b      	ldrb	r3, [r3, #5]
 8005d76:	2001      	movs	r0, #1
 8005d78:	9000      	str	r0, [sp, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f8ea 	bl	8005f54 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2206      	movs	r2, #6
 8005d90:	761a      	strb	r2, [r3, #24]
      break;
 8005d92:	e0c0      	b.n	8005f16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	795b      	ldrb	r3, [r3, #5]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fc4c 	bl	8006638 <USBH_LL_GetURBState>
 8005da0:	4603      	mov	r3, r0
 8005da2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005da4:	7bbb      	ldrb	r3, [r7, #14]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d103      	bne.n	8005db2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2207      	movs	r2, #7
 8005dae:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005db0:	e0ac      	b.n	8005f0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8005db2:	7bbb      	ldrb	r3, [r7, #14]
 8005db4:	2b05      	cmp	r3, #5
 8005db6:	d105      	bne.n	8005dc4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	220c      	movs	r2, #12
 8005dbc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc2:	e0a3      	b.n	8005f0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005dc4:	7bbb      	ldrb	r3, [r7, #14]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d103      	bne.n	8005dd2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2205      	movs	r2, #5
 8005dce:	761a      	strb	r2, [r3, #24]
      break;
 8005dd0:	e09c      	b.n	8005f0c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8005dd2:	7bbb      	ldrb	r3, [r7, #14]
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	f040 8099 	bne.w	8005f0c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	220b      	movs	r2, #11
 8005dde:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8005de0:	2302      	movs	r3, #2
 8005de2:	73fb      	strb	r3, [r7, #15]
      break;
 8005de4:	e092      	b.n	8005f0c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	791b      	ldrb	r3, [r3, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	2100      	movs	r1, #0
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f8d5 	bl	8005f9e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2208      	movs	r2, #8
 8005e04:	761a      	strb	r2, [r3, #24]

      break;
 8005e06:	e086      	b.n	8005f16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	791b      	ldrb	r3, [r3, #4]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fc12 	bl	8006638 <USBH_LL_GetURBState>
 8005e14:	4603      	mov	r3, r0
 8005e16:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005e18:	7bbb      	ldrb	r3, [r7, #14]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d105      	bne.n	8005e2a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	220d      	movs	r2, #13
 8005e22:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005e28:	e072      	b.n	8005f10 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8005e2a:	7bbb      	ldrb	r3, [r7, #14]
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d103      	bne.n	8005e38 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	220b      	movs	r2, #11
 8005e34:	761a      	strb	r2, [r3, #24]
      break;
 8005e36:	e06b      	b.n	8005f10 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8005e38:	7bbb      	ldrb	r3, [r7, #14]
 8005e3a:	2b05      	cmp	r3, #5
 8005e3c:	d168      	bne.n	8005f10 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	73fb      	strb	r3, [r7, #15]
      break;
 8005e42:	e065      	b.n	8005f10 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	795b      	ldrb	r3, [r3, #5]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	9200      	str	r2, [sp, #0]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2100      	movs	r1, #0
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f87f 	bl	8005f54 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	220a      	movs	r2, #10
 8005e66:	761a      	strb	r2, [r3, #24]
      break;
 8005e68:	e055      	b.n	8005f16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	795b      	ldrb	r3, [r3, #5]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fbe1 	bl	8006638 <USBH_LL_GetURBState>
 8005e76:	4603      	mov	r3, r0
 8005e78:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8005e7a:	7bbb      	ldrb	r3, [r7, #14]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d105      	bne.n	8005e8c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	220d      	movs	r2, #13
 8005e88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005e8a:	e043      	b.n	8005f14 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005e8c:	7bbb      	ldrb	r3, [r7, #14]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d103      	bne.n	8005e9a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2209      	movs	r2, #9
 8005e96:	761a      	strb	r2, [r3, #24]
      break;
 8005e98:	e03c      	b.n	8005f14 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8005e9a:	7bbb      	ldrb	r3, [r7, #14]
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d139      	bne.n	8005f14 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	220b      	movs	r2, #11
 8005ea4:	761a      	strb	r2, [r3, #24]
      break;
 8005ea6:	e035      	b.n	8005f14 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	7e5b      	ldrb	r3, [r3, #25]
 8005eac:	3301      	adds	r3, #1
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	765a      	strb	r2, [r3, #25]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	7e5b      	ldrb	r3, [r3, #25]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d806      	bhi.n	8005eca <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8005ec8:	e025      	b.n	8005f16 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ed0:	2106      	movs	r1, #6
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	795b      	ldrb	r3, [r3, #5]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f90c 	bl	8006100 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	791b      	ldrb	r3, [r3, #4]
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f906 	bl	8006100 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8005efa:	2302      	movs	r3, #2
 8005efc:	73fb      	strb	r3, [r7, #15]
      break;
 8005efe:	e00a      	b.n	8005f16 <USBH_HandleControl+0x2de>

    default:
      break;
 8005f00:	bf00      	nop
 8005f02:	e008      	b.n	8005f16 <USBH_HandleControl+0x2de>
      break;
 8005f04:	bf00      	nop
 8005f06:	e006      	b.n	8005f16 <USBH_HandleControl+0x2de>
      break;
 8005f08:	bf00      	nop
 8005f0a:	e004      	b.n	8005f16 <USBH_HandleControl+0x2de>
      break;
 8005f0c:	bf00      	nop
 8005f0e:	e002      	b.n	8005f16 <USBH_HandleControl+0x2de>
      break;
 8005f10:	bf00      	nop
 8005f12:	e000      	b.n	8005f16 <USBH_HandleControl+0x2de>
      break;
 8005f14:	bf00      	nop
  }

  return status;
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b088      	sub	sp, #32
 8005f24:	af04      	add	r7, sp, #16
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005f2e:	79f9      	ldrb	r1, [r7, #7]
 8005f30:	2300      	movs	r3, #0
 8005f32:	9303      	str	r3, [sp, #12]
 8005f34:	2308      	movs	r3, #8
 8005f36:	9302      	str	r3, [sp, #8]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	9301      	str	r3, [sp, #4]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	2300      	movs	r3, #0
 8005f42:	2200      	movs	r2, #0
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fb46 	bl	80065d6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af04      	add	r7, sp, #16
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	4611      	mov	r1, r2
 8005f60:	461a      	mov	r2, r3
 8005f62:	460b      	mov	r3, r1
 8005f64:	80fb      	strh	r3, [r7, #6]
 8005f66:	4613      	mov	r3, r2
 8005f68:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005f78:	7979      	ldrb	r1, [r7, #5]
 8005f7a:	7e3b      	ldrb	r3, [r7, #24]
 8005f7c:	9303      	str	r3, [sp, #12]
 8005f7e:	88fb      	ldrh	r3, [r7, #6]
 8005f80:	9302      	str	r3, [sp, #8]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	2301      	movs	r3, #1
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 fb21 	bl	80065d6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b088      	sub	sp, #32
 8005fa2:	af04      	add	r7, sp, #16
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	4611      	mov	r1, r2
 8005faa:	461a      	mov	r2, r3
 8005fac:	460b      	mov	r3, r1
 8005fae:	80fb      	strh	r3, [r7, #6]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005fb4:	7979      	ldrb	r1, [r7, #5]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	9303      	str	r3, [sp, #12]
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	9302      	str	r3, [sp, #8]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	2201      	movs	r2, #1
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 fb03 	bl	80065d6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8005fd0:	2300      	movs	r3, #0

}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b088      	sub	sp, #32
 8005fde:	af04      	add	r7, sp, #16
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	460b      	mov	r3, r1
 8005fea:	80fb      	strh	r3, [r7, #6]
 8005fec:	4613      	mov	r3, r2
 8005fee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005ffe:	7979      	ldrb	r1, [r7, #5]
 8006000:	7e3b      	ldrb	r3, [r7, #24]
 8006002:	9303      	str	r3, [sp, #12]
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	9302      	str	r3, [sp, #8]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	2301      	movs	r3, #1
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	2302      	movs	r3, #2
 8006012:	2200      	movs	r2, #0
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 fade 	bl	80065d6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af04      	add	r7, sp, #16
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	4611      	mov	r1, r2
 8006030:	461a      	mov	r2, r3
 8006032:	460b      	mov	r3, r1
 8006034:	80fb      	strh	r3, [r7, #6]
 8006036:	4613      	mov	r3, r2
 8006038:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800603a:	7979      	ldrb	r1, [r7, #5]
 800603c:	2300      	movs	r3, #0
 800603e:	9303      	str	r3, [sp, #12]
 8006040:	88fb      	ldrh	r3, [r7, #6]
 8006042:	9302      	str	r3, [sp, #8]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	2301      	movs	r3, #1
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	2302      	movs	r3, #2
 800604e:	2201      	movs	r2, #1
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 fac0 	bl	80065d6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af04      	add	r7, sp, #16
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	4608      	mov	r0, r1
 800606a:	4611      	mov	r1, r2
 800606c:	461a      	mov	r2, r3
 800606e:	4603      	mov	r3, r0
 8006070:	70fb      	strb	r3, [r7, #3]
 8006072:	460b      	mov	r3, r1
 8006074:	70bb      	strb	r3, [r7, #2]
 8006076:	4613      	mov	r3, r2
 8006078:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800607a:	7878      	ldrb	r0, [r7, #1]
 800607c:	78ba      	ldrb	r2, [r7, #2]
 800607e:	78f9      	ldrb	r1, [r7, #3]
 8006080:	8b3b      	ldrh	r3, [r7, #24]
 8006082:	9302      	str	r3, [sp, #8]
 8006084:	7d3b      	ldrb	r3, [r7, #20]
 8006086:	9301      	str	r3, [sp, #4]
 8006088:	7c3b      	ldrb	r3, [r7, #16]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	4603      	mov	r3, r0
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fa53 	bl	800653a <USBH_LL_OpenPipe>

  return USBH_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa72 	bl	8006598 <USBH_LL_ClosePipe>

  return USBH_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b084      	sub	sp, #16
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	460b      	mov	r3, r1
 80060c8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f836 	bl	800613c <USBH_GetFreePipe>
 80060d0:	4603      	mov	r3, r0
 80060d2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80060d4:	89fb      	ldrh	r3, [r7, #14]
 80060d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00a      	beq.n	80060f4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80060de:	78fa      	ldrb	r2, [r7, #3]
 80060e0:	89fb      	ldrh	r3, [r7, #14]
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	33e0      	adds	r3, #224	; 0xe0
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80060f4:	89fb      	ldrh	r3, [r7, #14]
 80060f6:	b2db      	uxtb	r3, r3
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	2b0a      	cmp	r3, #10
 8006110:	d80d      	bhi.n	800612e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	33e0      	adds	r3, #224	; 0xe0
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	33e0      	adds	r3, #224	; 0xe0
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	440b      	add	r3, r1
 800612c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006148:	2300      	movs	r3, #0
 800614a:	73fb      	strb	r3, [r7, #15]
 800614c:	e00f      	b.n	800616e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800614e:	7bfb      	ldrb	r3, [r7, #15]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	33e0      	adds	r3, #224	; 0xe0
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d102      	bne.n	8006168 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	b29b      	uxth	r3, r3
 8006166:	e007      	b.n	8006178 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	3301      	adds	r3, #1
 800616c:	73fb      	strb	r3, [r7, #15]
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	2b0a      	cmp	r3, #10
 8006172:	d9ec      	bls.n	800614e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006174:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006188:	2201      	movs	r2, #1
 800618a:	490e      	ldr	r1, [pc, #56]	; (80061c4 <MX_USB_HOST_Init+0x40>)
 800618c:	480e      	ldr	r0, [pc, #56]	; (80061c8 <MX_USB_HOST_Init+0x44>)
 800618e:	f7fe fca0 	bl	8004ad2 <USBH_Init>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006198:	f7fa fb0c 	bl	80007b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800619c:	490b      	ldr	r1, [pc, #44]	; (80061cc <MX_USB_HOST_Init+0x48>)
 800619e:	480a      	ldr	r0, [pc, #40]	; (80061c8 <MX_USB_HOST_Init+0x44>)
 80061a0:	f7fe fd25 	bl	8004bee <USBH_RegisterClass>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80061aa:	f7fa fb03 	bl	80007b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80061ae:	4806      	ldr	r0, [pc, #24]	; (80061c8 <MX_USB_HOST_Init+0x44>)
 80061b0:	f7fe fda9 	bl	8004d06 <USBH_Start>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80061ba:	f7fa fafb 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80061be:	bf00      	nop
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	080061e5 	.word	0x080061e5
 80061c8:	20000144 	.word	0x20000144
 80061cc:	2000000c 	.word	0x2000000c

080061d0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80061d4:	4802      	ldr	r0, [pc, #8]	; (80061e0 <MX_USB_HOST_Process+0x10>)
 80061d6:	f7fe fda7 	bl	8004d28 <USBH_Process>
}
 80061da:	bf00      	nop
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000144 	.word	0x20000144

080061e4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d819      	bhi.n	800622c <USBH_UserProcess+0x48>
 80061f8:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <USBH_UserProcess+0x1c>)
 80061fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fe:	bf00      	nop
 8006200:	0800622d 	.word	0x0800622d
 8006204:	0800621d 	.word	0x0800621d
 8006208:	0800622d 	.word	0x0800622d
 800620c:	08006225 	.word	0x08006225
 8006210:	08006215 	.word	0x08006215
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006214:	4b09      	ldr	r3, [pc, #36]	; (800623c <USBH_UserProcess+0x58>)
 8006216:	2203      	movs	r2, #3
 8006218:	701a      	strb	r2, [r3, #0]
  break;
 800621a:	e008      	b.n	800622e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800621c:	4b07      	ldr	r3, [pc, #28]	; (800623c <USBH_UserProcess+0x58>)
 800621e:	2202      	movs	r2, #2
 8006220:	701a      	strb	r2, [r3, #0]
  break;
 8006222:	e004      	b.n	800622e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006224:	4b05      	ldr	r3, [pc, #20]	; (800623c <USBH_UserProcess+0x58>)
 8006226:	2201      	movs	r2, #1
 8006228:	701a      	strb	r2, [r3, #0]
  break;
 800622a:	e000      	b.n	800622e <USBH_UserProcess+0x4a>

  default:
  break;
 800622c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800622e:	bf00      	nop
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	200000b4 	.word	0x200000b4

08006240 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08a      	sub	sp, #40	; 0x28
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006248:	f107 0314 	add.w	r3, r7, #20
 800624c:	2200      	movs	r2, #0
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	605a      	str	r2, [r3, #4]
 8006252:	609a      	str	r2, [r3, #8]
 8006254:	60da      	str	r2, [r3, #12]
 8006256:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006260:	d147      	bne.n	80062f2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006262:	2300      	movs	r3, #0
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	4b25      	ldr	r3, [pc, #148]	; (80062fc <HAL_HCD_MspInit+0xbc>)
 8006268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626a:	4a24      	ldr	r2, [pc, #144]	; (80062fc <HAL_HCD_MspInit+0xbc>)
 800626c:	f043 0301 	orr.w	r3, r3, #1
 8006270:	6313      	str	r3, [r2, #48]	; 0x30
 8006272:	4b22      	ldr	r3, [pc, #136]	; (80062fc <HAL_HCD_MspInit+0xbc>)
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800627e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006284:	2300      	movs	r3, #0
 8006286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006288:	2300      	movs	r3, #0
 800628a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800628c:	f107 0314 	add.w	r3, r7, #20
 8006290:	4619      	mov	r1, r3
 8006292:	481b      	ldr	r0, [pc, #108]	; (8006300 <HAL_HCD_MspInit+0xc0>)
 8006294:	f7fa fd0a 	bl	8000cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006298:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800629c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800629e:	2302      	movs	r3, #2
 80062a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062a6:	2303      	movs	r3, #3
 80062a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80062aa:	230a      	movs	r3, #10
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062ae:	f107 0314 	add.w	r3, r7, #20
 80062b2:	4619      	mov	r1, r3
 80062b4:	4812      	ldr	r0, [pc, #72]	; (8006300 <HAL_HCD_MspInit+0xc0>)
 80062b6:	f7fa fcf9 	bl	8000cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80062ba:	4b10      	ldr	r3, [pc, #64]	; (80062fc <HAL_HCD_MspInit+0xbc>)
 80062bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062be:	4a0f      	ldr	r2, [pc, #60]	; (80062fc <HAL_HCD_MspInit+0xbc>)
 80062c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c4:	6353      	str	r3, [r2, #52]	; 0x34
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	4b0c      	ldr	r3, [pc, #48]	; (80062fc <HAL_HCD_MspInit+0xbc>)
 80062cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ce:	4a0b      	ldr	r2, [pc, #44]	; (80062fc <HAL_HCD_MspInit+0xbc>)
 80062d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062d4:	6453      	str	r3, [r2, #68]	; 0x44
 80062d6:	4b09      	ldr	r3, [pc, #36]	; (80062fc <HAL_HCD_MspInit+0xbc>)
 80062d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80062e2:	2200      	movs	r2, #0
 80062e4:	2100      	movs	r1, #0
 80062e6:	2043      	movs	r0, #67	; 0x43
 80062e8:	f7fa fca9 	bl	8000c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80062ec:	2043      	movs	r0, #67	; 0x43
 80062ee:	f7fa fcc2 	bl	8000c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80062f2:	bf00      	nop
 80062f4:	3728      	adds	r7, #40	; 0x28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	40023800 	.word	0x40023800
 8006300:	40020000 	.word	0x40020000

08006304 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff f8db 	bl	80054ce <USBH_LL_IncTimer>
}
 8006318:	bf00      	nop
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff f913 	bl	800555a <USBH_LL_Connect>
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff f91c 	bl	8005588 <USBH_LL_Disconnect>
}
 8006350:	bf00      	nop
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	70fb      	strb	r3, [r7, #3]
 8006364:	4613      	mov	r3, r2
 8006366:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff f8cd 	bl	8005522 <USBH_LL_PortEnabled>
}
 8006388:	bf00      	nop
 800638a:	3708      	adds	r7, #8
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff f8cd 	bl	800553e <USBH_LL_PortDisabled>
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d12a      	bne.n	8006414 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80063be:	4a18      	ldr	r2, [pc, #96]	; (8006420 <USBH_LL_Init+0x74>)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a15      	ldr	r2, [pc, #84]	; (8006420 <USBH_LL_Init+0x74>)
 80063ca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80063ce:	4b14      	ldr	r3, [pc, #80]	; (8006420 <USBH_LL_Init+0x74>)
 80063d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80063d4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80063d6:	4b12      	ldr	r3, [pc, #72]	; (8006420 <USBH_LL_Init+0x74>)
 80063d8:	2208      	movs	r2, #8
 80063da:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80063dc:	4b10      	ldr	r3, [pc, #64]	; (8006420 <USBH_LL_Init+0x74>)
 80063de:	2201      	movs	r2, #1
 80063e0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80063e2:	4b0f      	ldr	r3, [pc, #60]	; (8006420 <USBH_LL_Init+0x74>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80063e8:	4b0d      	ldr	r3, [pc, #52]	; (8006420 <USBH_LL_Init+0x74>)
 80063ea:	2202      	movs	r2, #2
 80063ec:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80063ee:	4b0c      	ldr	r3, [pc, #48]	; (8006420 <USBH_LL_Init+0x74>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80063f4:	480a      	ldr	r0, [pc, #40]	; (8006420 <USBH_LL_Init+0x74>)
 80063f6:	f7fa fe0e 	bl	8001016 <HAL_HCD_Init>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006400:	f7fa f9d8 	bl	80007b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006404:	4806      	ldr	r0, [pc, #24]	; (8006420 <USBH_LL_Init+0x74>)
 8006406:	f7fb f9f2 	bl	80017ee <HAL_HCD_GetCurrentFrame>
 800640a:	4603      	mov	r3, r0
 800640c:	4619      	mov	r1, r3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff f84e 	bl	80054b0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	2000051c 	.word	0x2000051c

08006424 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800643a:	4618      	mov	r0, r3
 800643c:	f7fb f961 	bl	8001702 <HAL_HCD_Start>
 8006440:	4603      	mov	r3, r0
 8006442:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	4618      	mov	r0, r3
 8006448:	f000 f95c 	bl	8006704 <USBH_Get_USB_Status>
 800644c:	4603      	mov	r3, r0
 800644e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006450:	7bbb      	ldrb	r3, [r7, #14]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006470:	4618      	mov	r0, r3
 8006472:	f7fb f969 	bl	8001748 <HAL_HCD_Stop>
 8006476:	4603      	mov	r3, r0
 8006478:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	4618      	mov	r0, r3
 800647e:	f000 f941 	bl	8006704 <USBH_Get_USB_Status>
 8006482:	4603      	mov	r3, r0
 8006484:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006486:	7bbb      	ldrb	r3, [r7, #14]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8006498:	2301      	movs	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fb f9b1 	bl	800180a <HAL_HCD_GetCurrentSpeed>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d00c      	beq.n	80064c8 <USBH_LL_GetSpeed+0x38>
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d80d      	bhi.n	80064ce <USBH_LL_GetSpeed+0x3e>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <USBH_LL_GetSpeed+0x2c>
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d003      	beq.n	80064c2 <USBH_LL_GetSpeed+0x32>
 80064ba:	e008      	b.n	80064ce <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80064bc:	2300      	movs	r3, #0
 80064be:	73fb      	strb	r3, [r7, #15]
    break;
 80064c0:	e008      	b.n	80064d4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80064c2:	2301      	movs	r3, #1
 80064c4:	73fb      	strb	r3, [r7, #15]
    break;
 80064c6:	e005      	b.n	80064d4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80064c8:	2302      	movs	r3, #2
 80064ca:	73fb      	strb	r3, [r7, #15]
    break;
 80064cc:	e002      	b.n	80064d4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80064ce:	2301      	movs	r3, #1
 80064d0:	73fb      	strb	r3, [r7, #15]
    break;
 80064d2:	bf00      	nop
  }
  return  speed;
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fb f944 	bl	8001782 <HAL_HCD_ResetPort>
 80064fa:	4603      	mov	r3, r0
 80064fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
 8006500:	4618      	mov	r0, r3
 8006502:	f000 f8ff 	bl	8006704 <USBH_Get_USB_Status>
 8006506:	4603      	mov	r3, r0
 8006508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800650a:	7bbb      	ldrb	r3, [r7, #14]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	460b      	mov	r3, r1
 800651e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006526:	78fa      	ldrb	r2, [r7, #3]
 8006528:	4611      	mov	r1, r2
 800652a:	4618      	mov	r0, r3
 800652c:	f7fb f94b 	bl	80017c6 <HAL_HCD_HC_GetXferCount>
 8006530:	4603      	mov	r3, r0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800653a:	b590      	push	{r4, r7, lr}
 800653c:	b089      	sub	sp, #36	; 0x24
 800653e:	af04      	add	r7, sp, #16
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	4608      	mov	r0, r1
 8006544:	4611      	mov	r1, r2
 8006546:	461a      	mov	r2, r3
 8006548:	4603      	mov	r3, r0
 800654a:	70fb      	strb	r3, [r7, #3]
 800654c:	460b      	mov	r3, r1
 800654e:	70bb      	strb	r3, [r7, #2]
 8006550:	4613      	mov	r3, r2
 8006552:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006558:	2300      	movs	r3, #0
 800655a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006562:	787c      	ldrb	r4, [r7, #1]
 8006564:	78ba      	ldrb	r2, [r7, #2]
 8006566:	78f9      	ldrb	r1, [r7, #3]
 8006568:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800656a:	9302      	str	r3, [sp, #8]
 800656c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	4623      	mov	r3, r4
 800657a:	f7fa fdae 	bl	80010da <HAL_HCD_HC_Init>
 800657e:	4603      	mov	r3, r0
 8006580:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	4618      	mov	r0, r3
 8006586:	f000 f8bd 	bl	8006704 <USBH_Get_USB_Status>
 800658a:	4603      	mov	r3, r0
 800658c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800658e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	bd90      	pop	{r4, r7, pc}

08006598 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80065b2:	78fa      	ldrb	r2, [r7, #3]
 80065b4:	4611      	mov	r1, r2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fa fe1e 	bl	80011f8 <HAL_HCD_HC_Halt>
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 f89e 	bl	8006704 <USBH_Get_USB_Status>
 80065c8:	4603      	mov	r3, r0
 80065ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80065d6:	b590      	push	{r4, r7, lr}
 80065d8:	b089      	sub	sp, #36	; 0x24
 80065da:	af04      	add	r7, sp, #16
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	4608      	mov	r0, r1
 80065e0:	4611      	mov	r1, r2
 80065e2:	461a      	mov	r2, r3
 80065e4:	4603      	mov	r3, r0
 80065e6:	70fb      	strb	r3, [r7, #3]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70bb      	strb	r3, [r7, #2]
 80065ec:	4613      	mov	r3, r2
 80065ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80065fe:	787c      	ldrb	r4, [r7, #1]
 8006600:	78ba      	ldrb	r2, [r7, #2]
 8006602:	78f9      	ldrb	r1, [r7, #3]
 8006604:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006608:	9303      	str	r3, [sp, #12]
 800660a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800660c:	9302      	str	r3, [sp, #8]
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	4623      	mov	r3, r4
 800661a:	f7fa fe11 	bl	8001240 <HAL_HCD_HC_SubmitRequest>
 800661e:	4603      	mov	r3, r0
 8006620:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	4618      	mov	r0, r3
 8006626:	f000 f86d 	bl	8006704 <USBH_Get_USB_Status>
 800662a:	4603      	mov	r3, r0
 800662c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800662e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	bd90      	pop	{r4, r7, pc}

08006638 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800664a:	78fa      	ldrb	r2, [r7, #3]
 800664c:	4611      	mov	r1, r2
 800664e:	4618      	mov	r0, r3
 8006650:	f7fb f8a5 	bl	800179e <HAL_HCD_HC_GetURBState>
 8006654:	4603      	mov	r3, r0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	460b      	mov	r3, r1
 8006668:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006670:	2b01      	cmp	r3, #1
 8006672:	d103      	bne.n	800667c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006674:	78fb      	ldrb	r3, [r7, #3]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 f870 	bl	800675c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800667c:	20c8      	movs	r0, #200	; 0xc8
 800667e:	f7fa f9df 	bl	8000a40 <HAL_Delay>
  return USBH_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
 8006698:	4613      	mov	r3, r2
 800669a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80066a2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	212c      	movs	r1, #44	; 0x2c
 80066aa:	fb01 f303 	mul.w	r3, r1, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	333b      	adds	r3, #59	; 0x3b
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d009      	beq.n	80066cc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	212c      	movs	r1, #44	; 0x2c
 80066be:	fb01 f303 	mul.w	r3, r1, r3
 80066c2:	4413      	add	r3, r2
 80066c4:	3354      	adds	r3, #84	; 0x54
 80066c6:	78ba      	ldrb	r2, [r7, #2]
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	e008      	b.n	80066de <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	212c      	movs	r1, #44	; 0x2c
 80066d2:	fb01 f303 	mul.w	r3, r1, r3
 80066d6:	4413      	add	r3, r2
 80066d8:	3355      	adds	r3, #85	; 0x55
 80066da:	78ba      	ldrb	r2, [r7, #2]
 80066dc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7fa f9a3 	bl	8000a40 <HAL_Delay>
}
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	2b03      	cmp	r3, #3
 8006716:	d817      	bhi.n	8006748 <USBH_Get_USB_Status+0x44>
 8006718:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <USBH_Get_USB_Status+0x1c>)
 800671a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671e:	bf00      	nop
 8006720:	08006731 	.word	0x08006731
 8006724:	08006737 	.word	0x08006737
 8006728:	0800673d 	.word	0x0800673d
 800672c:	08006743 	.word	0x08006743
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]
    break;
 8006734:	e00b      	b.n	800674e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006736:	2302      	movs	r3, #2
 8006738:	73fb      	strb	r3, [r7, #15]
    break;
 800673a:	e008      	b.n	800674e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800673c:	2301      	movs	r3, #1
 800673e:	73fb      	strb	r3, [r7, #15]
    break;
 8006740:	e005      	b.n	800674e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006742:	2302      	movs	r3, #2
 8006744:	73fb      	strb	r3, [r7, #15]
    break;
 8006746:	e002      	b.n	800674e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006748:	2302      	movs	r3, #2
 800674a:	73fb      	strb	r3, [r7, #15]
    break;
 800674c:	bf00      	nop
  }
  return usb_status;
 800674e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006766:	79fb      	ldrb	r3, [r7, #7]
 8006768:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d102      	bne.n	8006776 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8006770:	2300      	movs	r3, #0
 8006772:	73fb      	strb	r3, [r7, #15]
 8006774:	e001      	b.n	800677a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8006776:	2301      	movs	r3, #1
 8006778:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	461a      	mov	r2, r3
 800677e:	2101      	movs	r1, #1
 8006780:	4803      	ldr	r0, [pc, #12]	; (8006790 <MX_DriverVbusFS+0x34>)
 8006782:	f7fa fc2f 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 8006786:	bf00      	nop
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40020800 	.word	0x40020800

08006794 <__errno>:
 8006794:	4b01      	ldr	r3, [pc, #4]	; (800679c <__errno+0x8>)
 8006796:	6818      	ldr	r0, [r3, #0]
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	2000002c 	.word	0x2000002c

080067a0 <__libc_init_array>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	4d0d      	ldr	r5, [pc, #52]	; (80067d8 <__libc_init_array+0x38>)
 80067a4:	4c0d      	ldr	r4, [pc, #52]	; (80067dc <__libc_init_array+0x3c>)
 80067a6:	1b64      	subs	r4, r4, r5
 80067a8:	10a4      	asrs	r4, r4, #2
 80067aa:	2600      	movs	r6, #0
 80067ac:	42a6      	cmp	r6, r4
 80067ae:	d109      	bne.n	80067c4 <__libc_init_array+0x24>
 80067b0:	4d0b      	ldr	r5, [pc, #44]	; (80067e0 <__libc_init_array+0x40>)
 80067b2:	4c0c      	ldr	r4, [pc, #48]	; (80067e4 <__libc_init_array+0x44>)
 80067b4:	f000 fc5e 	bl	8007074 <_init>
 80067b8:	1b64      	subs	r4, r4, r5
 80067ba:	10a4      	asrs	r4, r4, #2
 80067bc:	2600      	movs	r6, #0
 80067be:	42a6      	cmp	r6, r4
 80067c0:	d105      	bne.n	80067ce <__libc_init_array+0x2e>
 80067c2:	bd70      	pop	{r4, r5, r6, pc}
 80067c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c8:	4798      	blx	r3
 80067ca:	3601      	adds	r6, #1
 80067cc:	e7ee      	b.n	80067ac <__libc_init_array+0xc>
 80067ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d2:	4798      	blx	r3
 80067d4:	3601      	adds	r6, #1
 80067d6:	e7f2      	b.n	80067be <__libc_init_array+0x1e>
 80067d8:	080070e8 	.word	0x080070e8
 80067dc:	080070e8 	.word	0x080070e8
 80067e0:	080070e8 	.word	0x080070e8
 80067e4:	080070ec 	.word	0x080070ec

080067e8 <malloc>:
 80067e8:	4b02      	ldr	r3, [pc, #8]	; (80067f4 <malloc+0xc>)
 80067ea:	4601      	mov	r1, r0
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	f000 b863 	b.w	80068b8 <_malloc_r>
 80067f2:	bf00      	nop
 80067f4:	2000002c 	.word	0x2000002c

080067f8 <free>:
 80067f8:	4b02      	ldr	r3, [pc, #8]	; (8006804 <free+0xc>)
 80067fa:	4601      	mov	r1, r0
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	f000 b80b 	b.w	8006818 <_free_r>
 8006802:	bf00      	nop
 8006804:	2000002c 	.word	0x2000002c

08006808 <memset>:
 8006808:	4402      	add	r2, r0
 800680a:	4603      	mov	r3, r0
 800680c:	4293      	cmp	r3, r2
 800680e:	d100      	bne.n	8006812 <memset+0xa>
 8006810:	4770      	bx	lr
 8006812:	f803 1b01 	strb.w	r1, [r3], #1
 8006816:	e7f9      	b.n	800680c <memset+0x4>

08006818 <_free_r>:
 8006818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800681a:	2900      	cmp	r1, #0
 800681c:	d048      	beq.n	80068b0 <_free_r+0x98>
 800681e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006822:	9001      	str	r0, [sp, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	f1a1 0404 	sub.w	r4, r1, #4
 800682a:	bfb8      	it	lt
 800682c:	18e4      	addlt	r4, r4, r3
 800682e:	f000 f8cd 	bl	80069cc <__malloc_lock>
 8006832:	4a20      	ldr	r2, [pc, #128]	; (80068b4 <_free_r+0x9c>)
 8006834:	9801      	ldr	r0, [sp, #4]
 8006836:	6813      	ldr	r3, [r2, #0]
 8006838:	4615      	mov	r5, r2
 800683a:	b933      	cbnz	r3, 800684a <_free_r+0x32>
 800683c:	6063      	str	r3, [r4, #4]
 800683e:	6014      	str	r4, [r2, #0]
 8006840:	b003      	add	sp, #12
 8006842:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006846:	f000 b8c7 	b.w	80069d8 <__malloc_unlock>
 800684a:	42a3      	cmp	r3, r4
 800684c:	d90b      	bls.n	8006866 <_free_r+0x4e>
 800684e:	6821      	ldr	r1, [r4, #0]
 8006850:	1862      	adds	r2, r4, r1
 8006852:	4293      	cmp	r3, r2
 8006854:	bf04      	itt	eq
 8006856:	681a      	ldreq	r2, [r3, #0]
 8006858:	685b      	ldreq	r3, [r3, #4]
 800685a:	6063      	str	r3, [r4, #4]
 800685c:	bf04      	itt	eq
 800685e:	1852      	addeq	r2, r2, r1
 8006860:	6022      	streq	r2, [r4, #0]
 8006862:	602c      	str	r4, [r5, #0]
 8006864:	e7ec      	b.n	8006840 <_free_r+0x28>
 8006866:	461a      	mov	r2, r3
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	b10b      	cbz	r3, 8006870 <_free_r+0x58>
 800686c:	42a3      	cmp	r3, r4
 800686e:	d9fa      	bls.n	8006866 <_free_r+0x4e>
 8006870:	6811      	ldr	r1, [r2, #0]
 8006872:	1855      	adds	r5, r2, r1
 8006874:	42a5      	cmp	r5, r4
 8006876:	d10b      	bne.n	8006890 <_free_r+0x78>
 8006878:	6824      	ldr	r4, [r4, #0]
 800687a:	4421      	add	r1, r4
 800687c:	1854      	adds	r4, r2, r1
 800687e:	42a3      	cmp	r3, r4
 8006880:	6011      	str	r1, [r2, #0]
 8006882:	d1dd      	bne.n	8006840 <_free_r+0x28>
 8006884:	681c      	ldr	r4, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	6053      	str	r3, [r2, #4]
 800688a:	4421      	add	r1, r4
 800688c:	6011      	str	r1, [r2, #0]
 800688e:	e7d7      	b.n	8006840 <_free_r+0x28>
 8006890:	d902      	bls.n	8006898 <_free_r+0x80>
 8006892:	230c      	movs	r3, #12
 8006894:	6003      	str	r3, [r0, #0]
 8006896:	e7d3      	b.n	8006840 <_free_r+0x28>
 8006898:	6825      	ldr	r5, [r4, #0]
 800689a:	1961      	adds	r1, r4, r5
 800689c:	428b      	cmp	r3, r1
 800689e:	bf04      	itt	eq
 80068a0:	6819      	ldreq	r1, [r3, #0]
 80068a2:	685b      	ldreq	r3, [r3, #4]
 80068a4:	6063      	str	r3, [r4, #4]
 80068a6:	bf04      	itt	eq
 80068a8:	1949      	addeq	r1, r1, r5
 80068aa:	6021      	streq	r1, [r4, #0]
 80068ac:	6054      	str	r4, [r2, #4]
 80068ae:	e7c7      	b.n	8006840 <_free_r+0x28>
 80068b0:	b003      	add	sp, #12
 80068b2:	bd30      	pop	{r4, r5, pc}
 80068b4:	200000b8 	.word	0x200000b8

080068b8 <_malloc_r>:
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	1ccd      	adds	r5, r1, #3
 80068bc:	f025 0503 	bic.w	r5, r5, #3
 80068c0:	3508      	adds	r5, #8
 80068c2:	2d0c      	cmp	r5, #12
 80068c4:	bf38      	it	cc
 80068c6:	250c      	movcc	r5, #12
 80068c8:	2d00      	cmp	r5, #0
 80068ca:	4606      	mov	r6, r0
 80068cc:	db01      	blt.n	80068d2 <_malloc_r+0x1a>
 80068ce:	42a9      	cmp	r1, r5
 80068d0:	d903      	bls.n	80068da <_malloc_r+0x22>
 80068d2:	230c      	movs	r3, #12
 80068d4:	6033      	str	r3, [r6, #0]
 80068d6:	2000      	movs	r0, #0
 80068d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068da:	f000 f877 	bl	80069cc <__malloc_lock>
 80068de:	4921      	ldr	r1, [pc, #132]	; (8006964 <_malloc_r+0xac>)
 80068e0:	680a      	ldr	r2, [r1, #0]
 80068e2:	4614      	mov	r4, r2
 80068e4:	b99c      	cbnz	r4, 800690e <_malloc_r+0x56>
 80068e6:	4f20      	ldr	r7, [pc, #128]	; (8006968 <_malloc_r+0xb0>)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	b923      	cbnz	r3, 80068f6 <_malloc_r+0x3e>
 80068ec:	4621      	mov	r1, r4
 80068ee:	4630      	mov	r0, r6
 80068f0:	f000 f83c 	bl	800696c <_sbrk_r>
 80068f4:	6038      	str	r0, [r7, #0]
 80068f6:	4629      	mov	r1, r5
 80068f8:	4630      	mov	r0, r6
 80068fa:	f000 f837 	bl	800696c <_sbrk_r>
 80068fe:	1c43      	adds	r3, r0, #1
 8006900:	d123      	bne.n	800694a <_malloc_r+0x92>
 8006902:	230c      	movs	r3, #12
 8006904:	6033      	str	r3, [r6, #0]
 8006906:	4630      	mov	r0, r6
 8006908:	f000 f866 	bl	80069d8 <__malloc_unlock>
 800690c:	e7e3      	b.n	80068d6 <_malloc_r+0x1e>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	1b5b      	subs	r3, r3, r5
 8006912:	d417      	bmi.n	8006944 <_malloc_r+0x8c>
 8006914:	2b0b      	cmp	r3, #11
 8006916:	d903      	bls.n	8006920 <_malloc_r+0x68>
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	441c      	add	r4, r3
 800691c:	6025      	str	r5, [r4, #0]
 800691e:	e004      	b.n	800692a <_malloc_r+0x72>
 8006920:	6863      	ldr	r3, [r4, #4]
 8006922:	42a2      	cmp	r2, r4
 8006924:	bf0c      	ite	eq
 8006926:	600b      	streq	r3, [r1, #0]
 8006928:	6053      	strne	r3, [r2, #4]
 800692a:	4630      	mov	r0, r6
 800692c:	f000 f854 	bl	80069d8 <__malloc_unlock>
 8006930:	f104 000b 	add.w	r0, r4, #11
 8006934:	1d23      	adds	r3, r4, #4
 8006936:	f020 0007 	bic.w	r0, r0, #7
 800693a:	1ac2      	subs	r2, r0, r3
 800693c:	d0cc      	beq.n	80068d8 <_malloc_r+0x20>
 800693e:	1a1b      	subs	r3, r3, r0
 8006940:	50a3      	str	r3, [r4, r2]
 8006942:	e7c9      	b.n	80068d8 <_malloc_r+0x20>
 8006944:	4622      	mov	r2, r4
 8006946:	6864      	ldr	r4, [r4, #4]
 8006948:	e7cc      	b.n	80068e4 <_malloc_r+0x2c>
 800694a:	1cc4      	adds	r4, r0, #3
 800694c:	f024 0403 	bic.w	r4, r4, #3
 8006950:	42a0      	cmp	r0, r4
 8006952:	d0e3      	beq.n	800691c <_malloc_r+0x64>
 8006954:	1a21      	subs	r1, r4, r0
 8006956:	4630      	mov	r0, r6
 8006958:	f000 f808 	bl	800696c <_sbrk_r>
 800695c:	3001      	adds	r0, #1
 800695e:	d1dd      	bne.n	800691c <_malloc_r+0x64>
 8006960:	e7cf      	b.n	8006902 <_malloc_r+0x4a>
 8006962:	bf00      	nop
 8006964:	200000b8 	.word	0x200000b8
 8006968:	200000bc 	.word	0x200000bc

0800696c <_sbrk_r>:
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	4d06      	ldr	r5, [pc, #24]	; (8006988 <_sbrk_r+0x1c>)
 8006970:	2300      	movs	r3, #0
 8006972:	4604      	mov	r4, r0
 8006974:	4608      	mov	r0, r1
 8006976:	602b      	str	r3, [r5, #0]
 8006978:	f7f9 ff7e 	bl	8000878 <_sbrk>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d102      	bne.n	8006986 <_sbrk_r+0x1a>
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	b103      	cbz	r3, 8006986 <_sbrk_r+0x1a>
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	20000820 	.word	0x20000820

0800698c <siprintf>:
 800698c:	b40e      	push	{r1, r2, r3}
 800698e:	b500      	push	{lr}
 8006990:	b09c      	sub	sp, #112	; 0x70
 8006992:	ab1d      	add	r3, sp, #116	; 0x74
 8006994:	9002      	str	r0, [sp, #8]
 8006996:	9006      	str	r0, [sp, #24]
 8006998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800699c:	4809      	ldr	r0, [pc, #36]	; (80069c4 <siprintf+0x38>)
 800699e:	9107      	str	r1, [sp, #28]
 80069a0:	9104      	str	r1, [sp, #16]
 80069a2:	4909      	ldr	r1, [pc, #36]	; (80069c8 <siprintf+0x3c>)
 80069a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a8:	9105      	str	r1, [sp, #20]
 80069aa:	6800      	ldr	r0, [r0, #0]
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	a902      	add	r1, sp, #8
 80069b0:	f000 f874 	bl	8006a9c <_svfiprintf_r>
 80069b4:	9b02      	ldr	r3, [sp, #8]
 80069b6:	2200      	movs	r2, #0
 80069b8:	701a      	strb	r2, [r3, #0]
 80069ba:	b01c      	add	sp, #112	; 0x70
 80069bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80069c0:	b003      	add	sp, #12
 80069c2:	4770      	bx	lr
 80069c4:	2000002c 	.word	0x2000002c
 80069c8:	ffff0208 	.word	0xffff0208

080069cc <__malloc_lock>:
 80069cc:	4801      	ldr	r0, [pc, #4]	; (80069d4 <__malloc_lock+0x8>)
 80069ce:	f000 baf9 	b.w	8006fc4 <__retarget_lock_acquire_recursive>
 80069d2:	bf00      	nop
 80069d4:	20000828 	.word	0x20000828

080069d8 <__malloc_unlock>:
 80069d8:	4801      	ldr	r0, [pc, #4]	; (80069e0 <__malloc_unlock+0x8>)
 80069da:	f000 baf4 	b.w	8006fc6 <__retarget_lock_release_recursive>
 80069de:	bf00      	nop
 80069e0:	20000828 	.word	0x20000828

080069e4 <__ssputs_r>:
 80069e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	688e      	ldr	r6, [r1, #8]
 80069ea:	429e      	cmp	r6, r3
 80069ec:	4682      	mov	sl, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	4690      	mov	r8, r2
 80069f2:	461f      	mov	r7, r3
 80069f4:	d838      	bhi.n	8006a68 <__ssputs_r+0x84>
 80069f6:	898a      	ldrh	r2, [r1, #12]
 80069f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069fc:	d032      	beq.n	8006a64 <__ssputs_r+0x80>
 80069fe:	6825      	ldr	r5, [r4, #0]
 8006a00:	6909      	ldr	r1, [r1, #16]
 8006a02:	eba5 0901 	sub.w	r9, r5, r1
 8006a06:	6965      	ldr	r5, [r4, #20]
 8006a08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a10:	3301      	adds	r3, #1
 8006a12:	444b      	add	r3, r9
 8006a14:	106d      	asrs	r5, r5, #1
 8006a16:	429d      	cmp	r5, r3
 8006a18:	bf38      	it	cc
 8006a1a:	461d      	movcc	r5, r3
 8006a1c:	0553      	lsls	r3, r2, #21
 8006a1e:	d531      	bpl.n	8006a84 <__ssputs_r+0xa0>
 8006a20:	4629      	mov	r1, r5
 8006a22:	f7ff ff49 	bl	80068b8 <_malloc_r>
 8006a26:	4606      	mov	r6, r0
 8006a28:	b950      	cbnz	r0, 8006a40 <__ssputs_r+0x5c>
 8006a2a:	230c      	movs	r3, #12
 8006a2c:	f8ca 3000 	str.w	r3, [sl]
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a36:	81a3      	strh	r3, [r4, #12]
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a40:	6921      	ldr	r1, [r4, #16]
 8006a42:	464a      	mov	r2, r9
 8006a44:	f000 fac0 	bl	8006fc8 <memcpy>
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a52:	81a3      	strh	r3, [r4, #12]
 8006a54:	6126      	str	r6, [r4, #16]
 8006a56:	6165      	str	r5, [r4, #20]
 8006a58:	444e      	add	r6, r9
 8006a5a:	eba5 0509 	sub.w	r5, r5, r9
 8006a5e:	6026      	str	r6, [r4, #0]
 8006a60:	60a5      	str	r5, [r4, #8]
 8006a62:	463e      	mov	r6, r7
 8006a64:	42be      	cmp	r6, r7
 8006a66:	d900      	bls.n	8006a6a <__ssputs_r+0x86>
 8006a68:	463e      	mov	r6, r7
 8006a6a:	4632      	mov	r2, r6
 8006a6c:	6820      	ldr	r0, [r4, #0]
 8006a6e:	4641      	mov	r1, r8
 8006a70:	f000 fab8 	bl	8006fe4 <memmove>
 8006a74:	68a3      	ldr	r3, [r4, #8]
 8006a76:	6822      	ldr	r2, [r4, #0]
 8006a78:	1b9b      	subs	r3, r3, r6
 8006a7a:	4432      	add	r2, r6
 8006a7c:	60a3      	str	r3, [r4, #8]
 8006a7e:	6022      	str	r2, [r4, #0]
 8006a80:	2000      	movs	r0, #0
 8006a82:	e7db      	b.n	8006a3c <__ssputs_r+0x58>
 8006a84:	462a      	mov	r2, r5
 8006a86:	f000 fac7 	bl	8007018 <_realloc_r>
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d1e1      	bne.n	8006a54 <__ssputs_r+0x70>
 8006a90:	6921      	ldr	r1, [r4, #16]
 8006a92:	4650      	mov	r0, sl
 8006a94:	f7ff fec0 	bl	8006818 <_free_r>
 8006a98:	e7c7      	b.n	8006a2a <__ssputs_r+0x46>
	...

08006a9c <_svfiprintf_r>:
 8006a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa0:	4698      	mov	r8, r3
 8006aa2:	898b      	ldrh	r3, [r1, #12]
 8006aa4:	061b      	lsls	r3, r3, #24
 8006aa6:	b09d      	sub	sp, #116	; 0x74
 8006aa8:	4607      	mov	r7, r0
 8006aaa:	460d      	mov	r5, r1
 8006aac:	4614      	mov	r4, r2
 8006aae:	d50e      	bpl.n	8006ace <_svfiprintf_r+0x32>
 8006ab0:	690b      	ldr	r3, [r1, #16]
 8006ab2:	b963      	cbnz	r3, 8006ace <_svfiprintf_r+0x32>
 8006ab4:	2140      	movs	r1, #64	; 0x40
 8006ab6:	f7ff feff 	bl	80068b8 <_malloc_r>
 8006aba:	6028      	str	r0, [r5, #0]
 8006abc:	6128      	str	r0, [r5, #16]
 8006abe:	b920      	cbnz	r0, 8006aca <_svfiprintf_r+0x2e>
 8006ac0:	230c      	movs	r3, #12
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ac8:	e0d1      	b.n	8006c6e <_svfiprintf_r+0x1d2>
 8006aca:	2340      	movs	r3, #64	; 0x40
 8006acc:	616b      	str	r3, [r5, #20]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad2:	2320      	movs	r3, #32
 8006ad4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ad8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006adc:	2330      	movs	r3, #48	; 0x30
 8006ade:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c88 <_svfiprintf_r+0x1ec>
 8006ae2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ae6:	f04f 0901 	mov.w	r9, #1
 8006aea:	4623      	mov	r3, r4
 8006aec:	469a      	mov	sl, r3
 8006aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006af2:	b10a      	cbz	r2, 8006af8 <_svfiprintf_r+0x5c>
 8006af4:	2a25      	cmp	r2, #37	; 0x25
 8006af6:	d1f9      	bne.n	8006aec <_svfiprintf_r+0x50>
 8006af8:	ebba 0b04 	subs.w	fp, sl, r4
 8006afc:	d00b      	beq.n	8006b16 <_svfiprintf_r+0x7a>
 8006afe:	465b      	mov	r3, fp
 8006b00:	4622      	mov	r2, r4
 8006b02:	4629      	mov	r1, r5
 8006b04:	4638      	mov	r0, r7
 8006b06:	f7ff ff6d 	bl	80069e4 <__ssputs_r>
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	f000 80aa 	beq.w	8006c64 <_svfiprintf_r+0x1c8>
 8006b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b12:	445a      	add	r2, fp
 8006b14:	9209      	str	r2, [sp, #36]	; 0x24
 8006b16:	f89a 3000 	ldrb.w	r3, [sl]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 80a2 	beq.w	8006c64 <_svfiprintf_r+0x1c8>
 8006b20:	2300      	movs	r3, #0
 8006b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b2a:	f10a 0a01 	add.w	sl, sl, #1
 8006b2e:	9304      	str	r3, [sp, #16]
 8006b30:	9307      	str	r3, [sp, #28]
 8006b32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b36:	931a      	str	r3, [sp, #104]	; 0x68
 8006b38:	4654      	mov	r4, sl
 8006b3a:	2205      	movs	r2, #5
 8006b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b40:	4851      	ldr	r0, [pc, #324]	; (8006c88 <_svfiprintf_r+0x1ec>)
 8006b42:	f7f9 fb45 	bl	80001d0 <memchr>
 8006b46:	9a04      	ldr	r2, [sp, #16]
 8006b48:	b9d8      	cbnz	r0, 8006b82 <_svfiprintf_r+0xe6>
 8006b4a:	06d0      	lsls	r0, r2, #27
 8006b4c:	bf44      	itt	mi
 8006b4e:	2320      	movmi	r3, #32
 8006b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b54:	0711      	lsls	r1, r2, #28
 8006b56:	bf44      	itt	mi
 8006b58:	232b      	movmi	r3, #43	; 0x2b
 8006b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b62:	2b2a      	cmp	r3, #42	; 0x2a
 8006b64:	d015      	beq.n	8006b92 <_svfiprintf_r+0xf6>
 8006b66:	9a07      	ldr	r2, [sp, #28]
 8006b68:	4654      	mov	r4, sl
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	f04f 0c0a 	mov.w	ip, #10
 8006b70:	4621      	mov	r1, r4
 8006b72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b76:	3b30      	subs	r3, #48	; 0x30
 8006b78:	2b09      	cmp	r3, #9
 8006b7a:	d94e      	bls.n	8006c1a <_svfiprintf_r+0x17e>
 8006b7c:	b1b0      	cbz	r0, 8006bac <_svfiprintf_r+0x110>
 8006b7e:	9207      	str	r2, [sp, #28]
 8006b80:	e014      	b.n	8006bac <_svfiprintf_r+0x110>
 8006b82:	eba0 0308 	sub.w	r3, r0, r8
 8006b86:	fa09 f303 	lsl.w	r3, r9, r3
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	9304      	str	r3, [sp, #16]
 8006b8e:	46a2      	mov	sl, r4
 8006b90:	e7d2      	b.n	8006b38 <_svfiprintf_r+0x9c>
 8006b92:	9b03      	ldr	r3, [sp, #12]
 8006b94:	1d19      	adds	r1, r3, #4
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	9103      	str	r1, [sp, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	bfbb      	ittet	lt
 8006b9e:	425b      	neglt	r3, r3
 8006ba0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ba4:	9307      	strge	r3, [sp, #28]
 8006ba6:	9307      	strlt	r3, [sp, #28]
 8006ba8:	bfb8      	it	lt
 8006baa:	9204      	strlt	r2, [sp, #16]
 8006bac:	7823      	ldrb	r3, [r4, #0]
 8006bae:	2b2e      	cmp	r3, #46	; 0x2e
 8006bb0:	d10c      	bne.n	8006bcc <_svfiprintf_r+0x130>
 8006bb2:	7863      	ldrb	r3, [r4, #1]
 8006bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006bb6:	d135      	bne.n	8006c24 <_svfiprintf_r+0x188>
 8006bb8:	9b03      	ldr	r3, [sp, #12]
 8006bba:	1d1a      	adds	r2, r3, #4
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	9203      	str	r2, [sp, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	bfb8      	it	lt
 8006bc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006bc8:	3402      	adds	r4, #2
 8006bca:	9305      	str	r3, [sp, #20]
 8006bcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c98 <_svfiprintf_r+0x1fc>
 8006bd0:	7821      	ldrb	r1, [r4, #0]
 8006bd2:	2203      	movs	r2, #3
 8006bd4:	4650      	mov	r0, sl
 8006bd6:	f7f9 fafb 	bl	80001d0 <memchr>
 8006bda:	b140      	cbz	r0, 8006bee <_svfiprintf_r+0x152>
 8006bdc:	2340      	movs	r3, #64	; 0x40
 8006bde:	eba0 000a 	sub.w	r0, r0, sl
 8006be2:	fa03 f000 	lsl.w	r0, r3, r0
 8006be6:	9b04      	ldr	r3, [sp, #16]
 8006be8:	4303      	orrs	r3, r0
 8006bea:	3401      	adds	r4, #1
 8006bec:	9304      	str	r3, [sp, #16]
 8006bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf2:	4826      	ldr	r0, [pc, #152]	; (8006c8c <_svfiprintf_r+0x1f0>)
 8006bf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bf8:	2206      	movs	r2, #6
 8006bfa:	f7f9 fae9 	bl	80001d0 <memchr>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	d038      	beq.n	8006c74 <_svfiprintf_r+0x1d8>
 8006c02:	4b23      	ldr	r3, [pc, #140]	; (8006c90 <_svfiprintf_r+0x1f4>)
 8006c04:	bb1b      	cbnz	r3, 8006c4e <_svfiprintf_r+0x1b2>
 8006c06:	9b03      	ldr	r3, [sp, #12]
 8006c08:	3307      	adds	r3, #7
 8006c0a:	f023 0307 	bic.w	r3, r3, #7
 8006c0e:	3308      	adds	r3, #8
 8006c10:	9303      	str	r3, [sp, #12]
 8006c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c14:	4433      	add	r3, r6
 8006c16:	9309      	str	r3, [sp, #36]	; 0x24
 8006c18:	e767      	b.n	8006aea <_svfiprintf_r+0x4e>
 8006c1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c1e:	460c      	mov	r4, r1
 8006c20:	2001      	movs	r0, #1
 8006c22:	e7a5      	b.n	8006b70 <_svfiprintf_r+0xd4>
 8006c24:	2300      	movs	r3, #0
 8006c26:	3401      	adds	r4, #1
 8006c28:	9305      	str	r3, [sp, #20]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	f04f 0c0a 	mov.w	ip, #10
 8006c30:	4620      	mov	r0, r4
 8006c32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c36:	3a30      	subs	r2, #48	; 0x30
 8006c38:	2a09      	cmp	r2, #9
 8006c3a:	d903      	bls.n	8006c44 <_svfiprintf_r+0x1a8>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0c5      	beq.n	8006bcc <_svfiprintf_r+0x130>
 8006c40:	9105      	str	r1, [sp, #20]
 8006c42:	e7c3      	b.n	8006bcc <_svfiprintf_r+0x130>
 8006c44:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c48:	4604      	mov	r4, r0
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e7f0      	b.n	8006c30 <_svfiprintf_r+0x194>
 8006c4e:	ab03      	add	r3, sp, #12
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	462a      	mov	r2, r5
 8006c54:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <_svfiprintf_r+0x1f8>)
 8006c56:	a904      	add	r1, sp, #16
 8006c58:	4638      	mov	r0, r7
 8006c5a:	f3af 8000 	nop.w
 8006c5e:	1c42      	adds	r2, r0, #1
 8006c60:	4606      	mov	r6, r0
 8006c62:	d1d6      	bne.n	8006c12 <_svfiprintf_r+0x176>
 8006c64:	89ab      	ldrh	r3, [r5, #12]
 8006c66:	065b      	lsls	r3, r3, #25
 8006c68:	f53f af2c 	bmi.w	8006ac4 <_svfiprintf_r+0x28>
 8006c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c6e:	b01d      	add	sp, #116	; 0x74
 8006c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c74:	ab03      	add	r3, sp, #12
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	462a      	mov	r2, r5
 8006c7a:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <_svfiprintf_r+0x1f8>)
 8006c7c:	a904      	add	r1, sp, #16
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f000 f87a 	bl	8006d78 <_printf_i>
 8006c84:	e7eb      	b.n	8006c5e <_svfiprintf_r+0x1c2>
 8006c86:	bf00      	nop
 8006c88:	080070ac 	.word	0x080070ac
 8006c8c:	080070b6 	.word	0x080070b6
 8006c90:	00000000 	.word	0x00000000
 8006c94:	080069e5 	.word	0x080069e5
 8006c98:	080070b2 	.word	0x080070b2

08006c9c <_printf_common>:
 8006c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca0:	4616      	mov	r6, r2
 8006ca2:	4699      	mov	r9, r3
 8006ca4:	688a      	ldr	r2, [r1, #8]
 8006ca6:	690b      	ldr	r3, [r1, #16]
 8006ca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cac:	4293      	cmp	r3, r2
 8006cae:	bfb8      	it	lt
 8006cb0:	4613      	movlt	r3, r2
 8006cb2:	6033      	str	r3, [r6, #0]
 8006cb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cb8:	4607      	mov	r7, r0
 8006cba:	460c      	mov	r4, r1
 8006cbc:	b10a      	cbz	r2, 8006cc2 <_printf_common+0x26>
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	6033      	str	r3, [r6, #0]
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	0699      	lsls	r1, r3, #26
 8006cc6:	bf42      	ittt	mi
 8006cc8:	6833      	ldrmi	r3, [r6, #0]
 8006cca:	3302      	addmi	r3, #2
 8006ccc:	6033      	strmi	r3, [r6, #0]
 8006cce:	6825      	ldr	r5, [r4, #0]
 8006cd0:	f015 0506 	ands.w	r5, r5, #6
 8006cd4:	d106      	bne.n	8006ce4 <_printf_common+0x48>
 8006cd6:	f104 0a19 	add.w	sl, r4, #25
 8006cda:	68e3      	ldr	r3, [r4, #12]
 8006cdc:	6832      	ldr	r2, [r6, #0]
 8006cde:	1a9b      	subs	r3, r3, r2
 8006ce0:	42ab      	cmp	r3, r5
 8006ce2:	dc26      	bgt.n	8006d32 <_printf_common+0x96>
 8006ce4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ce8:	1e13      	subs	r3, r2, #0
 8006cea:	6822      	ldr	r2, [r4, #0]
 8006cec:	bf18      	it	ne
 8006cee:	2301      	movne	r3, #1
 8006cf0:	0692      	lsls	r2, r2, #26
 8006cf2:	d42b      	bmi.n	8006d4c <_printf_common+0xb0>
 8006cf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	47c0      	blx	r8
 8006cfe:	3001      	adds	r0, #1
 8006d00:	d01e      	beq.n	8006d40 <_printf_common+0xa4>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	68e5      	ldr	r5, [r4, #12]
 8006d06:	6832      	ldr	r2, [r6, #0]
 8006d08:	f003 0306 	and.w	r3, r3, #6
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	bf08      	it	eq
 8006d10:	1aad      	subeq	r5, r5, r2
 8006d12:	68a3      	ldr	r3, [r4, #8]
 8006d14:	6922      	ldr	r2, [r4, #16]
 8006d16:	bf0c      	ite	eq
 8006d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d1c:	2500      	movne	r5, #0
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	bfc4      	itt	gt
 8006d22:	1a9b      	subgt	r3, r3, r2
 8006d24:	18ed      	addgt	r5, r5, r3
 8006d26:	2600      	movs	r6, #0
 8006d28:	341a      	adds	r4, #26
 8006d2a:	42b5      	cmp	r5, r6
 8006d2c:	d11a      	bne.n	8006d64 <_printf_common+0xc8>
 8006d2e:	2000      	movs	r0, #0
 8006d30:	e008      	b.n	8006d44 <_printf_common+0xa8>
 8006d32:	2301      	movs	r3, #1
 8006d34:	4652      	mov	r2, sl
 8006d36:	4649      	mov	r1, r9
 8006d38:	4638      	mov	r0, r7
 8006d3a:	47c0      	blx	r8
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d103      	bne.n	8006d48 <_printf_common+0xac>
 8006d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d48:	3501      	adds	r5, #1
 8006d4a:	e7c6      	b.n	8006cda <_printf_common+0x3e>
 8006d4c:	18e1      	adds	r1, r4, r3
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	2030      	movs	r0, #48	; 0x30
 8006d52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d56:	4422      	add	r2, r4
 8006d58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d60:	3302      	adds	r3, #2
 8006d62:	e7c7      	b.n	8006cf4 <_printf_common+0x58>
 8006d64:	2301      	movs	r3, #1
 8006d66:	4622      	mov	r2, r4
 8006d68:	4649      	mov	r1, r9
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	47c0      	blx	r8
 8006d6e:	3001      	adds	r0, #1
 8006d70:	d0e6      	beq.n	8006d40 <_printf_common+0xa4>
 8006d72:	3601      	adds	r6, #1
 8006d74:	e7d9      	b.n	8006d2a <_printf_common+0x8e>
	...

08006d78 <_printf_i>:
 8006d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	4691      	mov	r9, r2
 8006d80:	7e27      	ldrb	r7, [r4, #24]
 8006d82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d84:	2f78      	cmp	r7, #120	; 0x78
 8006d86:	4680      	mov	r8, r0
 8006d88:	469a      	mov	sl, r3
 8006d8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d8e:	d807      	bhi.n	8006da0 <_printf_i+0x28>
 8006d90:	2f62      	cmp	r7, #98	; 0x62
 8006d92:	d80a      	bhi.n	8006daa <_printf_i+0x32>
 8006d94:	2f00      	cmp	r7, #0
 8006d96:	f000 80d8 	beq.w	8006f4a <_printf_i+0x1d2>
 8006d9a:	2f58      	cmp	r7, #88	; 0x58
 8006d9c:	f000 80a3 	beq.w	8006ee6 <_printf_i+0x16e>
 8006da0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006da4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006da8:	e03a      	b.n	8006e20 <_printf_i+0xa8>
 8006daa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dae:	2b15      	cmp	r3, #21
 8006db0:	d8f6      	bhi.n	8006da0 <_printf_i+0x28>
 8006db2:	a001      	add	r0, pc, #4	; (adr r0, 8006db8 <_printf_i+0x40>)
 8006db4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006db8:	08006e11 	.word	0x08006e11
 8006dbc:	08006e25 	.word	0x08006e25
 8006dc0:	08006da1 	.word	0x08006da1
 8006dc4:	08006da1 	.word	0x08006da1
 8006dc8:	08006da1 	.word	0x08006da1
 8006dcc:	08006da1 	.word	0x08006da1
 8006dd0:	08006e25 	.word	0x08006e25
 8006dd4:	08006da1 	.word	0x08006da1
 8006dd8:	08006da1 	.word	0x08006da1
 8006ddc:	08006da1 	.word	0x08006da1
 8006de0:	08006da1 	.word	0x08006da1
 8006de4:	08006f31 	.word	0x08006f31
 8006de8:	08006e55 	.word	0x08006e55
 8006dec:	08006f13 	.word	0x08006f13
 8006df0:	08006da1 	.word	0x08006da1
 8006df4:	08006da1 	.word	0x08006da1
 8006df8:	08006f53 	.word	0x08006f53
 8006dfc:	08006da1 	.word	0x08006da1
 8006e00:	08006e55 	.word	0x08006e55
 8006e04:	08006da1 	.word	0x08006da1
 8006e08:	08006da1 	.word	0x08006da1
 8006e0c:	08006f1b 	.word	0x08006f1b
 8006e10:	680b      	ldr	r3, [r1, #0]
 8006e12:	1d1a      	adds	r2, r3, #4
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	600a      	str	r2, [r1, #0]
 8006e18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e20:	2301      	movs	r3, #1
 8006e22:	e0a3      	b.n	8006f6c <_printf_i+0x1f4>
 8006e24:	6825      	ldr	r5, [r4, #0]
 8006e26:	6808      	ldr	r0, [r1, #0]
 8006e28:	062e      	lsls	r6, r5, #24
 8006e2a:	f100 0304 	add.w	r3, r0, #4
 8006e2e:	d50a      	bpl.n	8006e46 <_printf_i+0xce>
 8006e30:	6805      	ldr	r5, [r0, #0]
 8006e32:	600b      	str	r3, [r1, #0]
 8006e34:	2d00      	cmp	r5, #0
 8006e36:	da03      	bge.n	8006e40 <_printf_i+0xc8>
 8006e38:	232d      	movs	r3, #45	; 0x2d
 8006e3a:	426d      	negs	r5, r5
 8006e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e40:	485e      	ldr	r0, [pc, #376]	; (8006fbc <_printf_i+0x244>)
 8006e42:	230a      	movs	r3, #10
 8006e44:	e019      	b.n	8006e7a <_printf_i+0x102>
 8006e46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e4a:	6805      	ldr	r5, [r0, #0]
 8006e4c:	600b      	str	r3, [r1, #0]
 8006e4e:	bf18      	it	ne
 8006e50:	b22d      	sxthne	r5, r5
 8006e52:	e7ef      	b.n	8006e34 <_printf_i+0xbc>
 8006e54:	680b      	ldr	r3, [r1, #0]
 8006e56:	6825      	ldr	r5, [r4, #0]
 8006e58:	1d18      	adds	r0, r3, #4
 8006e5a:	6008      	str	r0, [r1, #0]
 8006e5c:	0628      	lsls	r0, r5, #24
 8006e5e:	d501      	bpl.n	8006e64 <_printf_i+0xec>
 8006e60:	681d      	ldr	r5, [r3, #0]
 8006e62:	e002      	b.n	8006e6a <_printf_i+0xf2>
 8006e64:	0669      	lsls	r1, r5, #25
 8006e66:	d5fb      	bpl.n	8006e60 <_printf_i+0xe8>
 8006e68:	881d      	ldrh	r5, [r3, #0]
 8006e6a:	4854      	ldr	r0, [pc, #336]	; (8006fbc <_printf_i+0x244>)
 8006e6c:	2f6f      	cmp	r7, #111	; 0x6f
 8006e6e:	bf0c      	ite	eq
 8006e70:	2308      	moveq	r3, #8
 8006e72:	230a      	movne	r3, #10
 8006e74:	2100      	movs	r1, #0
 8006e76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e7a:	6866      	ldr	r6, [r4, #4]
 8006e7c:	60a6      	str	r6, [r4, #8]
 8006e7e:	2e00      	cmp	r6, #0
 8006e80:	bfa2      	ittt	ge
 8006e82:	6821      	ldrge	r1, [r4, #0]
 8006e84:	f021 0104 	bicge.w	r1, r1, #4
 8006e88:	6021      	strge	r1, [r4, #0]
 8006e8a:	b90d      	cbnz	r5, 8006e90 <_printf_i+0x118>
 8006e8c:	2e00      	cmp	r6, #0
 8006e8e:	d04d      	beq.n	8006f2c <_printf_i+0x1b4>
 8006e90:	4616      	mov	r6, r2
 8006e92:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e96:	fb03 5711 	mls	r7, r3, r1, r5
 8006e9a:	5dc7      	ldrb	r7, [r0, r7]
 8006e9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ea0:	462f      	mov	r7, r5
 8006ea2:	42bb      	cmp	r3, r7
 8006ea4:	460d      	mov	r5, r1
 8006ea6:	d9f4      	bls.n	8006e92 <_printf_i+0x11a>
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d10b      	bne.n	8006ec4 <_printf_i+0x14c>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	07df      	lsls	r7, r3, #31
 8006eb0:	d508      	bpl.n	8006ec4 <_printf_i+0x14c>
 8006eb2:	6923      	ldr	r3, [r4, #16]
 8006eb4:	6861      	ldr	r1, [r4, #4]
 8006eb6:	4299      	cmp	r1, r3
 8006eb8:	bfde      	ittt	le
 8006eba:	2330      	movle	r3, #48	; 0x30
 8006ebc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ec0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006ec4:	1b92      	subs	r2, r2, r6
 8006ec6:	6122      	str	r2, [r4, #16]
 8006ec8:	f8cd a000 	str.w	sl, [sp]
 8006ecc:	464b      	mov	r3, r9
 8006ece:	aa03      	add	r2, sp, #12
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	f7ff fee2 	bl	8006c9c <_printf_common>
 8006ed8:	3001      	adds	r0, #1
 8006eda:	d14c      	bne.n	8006f76 <_printf_i+0x1fe>
 8006edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ee0:	b004      	add	sp, #16
 8006ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee6:	4835      	ldr	r0, [pc, #212]	; (8006fbc <_printf_i+0x244>)
 8006ee8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	680e      	ldr	r6, [r1, #0]
 8006ef0:	061f      	lsls	r7, r3, #24
 8006ef2:	f856 5b04 	ldr.w	r5, [r6], #4
 8006ef6:	600e      	str	r6, [r1, #0]
 8006ef8:	d514      	bpl.n	8006f24 <_printf_i+0x1ac>
 8006efa:	07d9      	lsls	r1, r3, #31
 8006efc:	bf44      	itt	mi
 8006efe:	f043 0320 	orrmi.w	r3, r3, #32
 8006f02:	6023      	strmi	r3, [r4, #0]
 8006f04:	b91d      	cbnz	r5, 8006f0e <_printf_i+0x196>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	f023 0320 	bic.w	r3, r3, #32
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	2310      	movs	r3, #16
 8006f10:	e7b0      	b.n	8006e74 <_printf_i+0xfc>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	f043 0320 	orr.w	r3, r3, #32
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	2378      	movs	r3, #120	; 0x78
 8006f1c:	4828      	ldr	r0, [pc, #160]	; (8006fc0 <_printf_i+0x248>)
 8006f1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f22:	e7e3      	b.n	8006eec <_printf_i+0x174>
 8006f24:	065e      	lsls	r6, r3, #25
 8006f26:	bf48      	it	mi
 8006f28:	b2ad      	uxthmi	r5, r5
 8006f2a:	e7e6      	b.n	8006efa <_printf_i+0x182>
 8006f2c:	4616      	mov	r6, r2
 8006f2e:	e7bb      	b.n	8006ea8 <_printf_i+0x130>
 8006f30:	680b      	ldr	r3, [r1, #0]
 8006f32:	6826      	ldr	r6, [r4, #0]
 8006f34:	6960      	ldr	r0, [r4, #20]
 8006f36:	1d1d      	adds	r5, r3, #4
 8006f38:	600d      	str	r5, [r1, #0]
 8006f3a:	0635      	lsls	r5, r6, #24
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	d501      	bpl.n	8006f44 <_printf_i+0x1cc>
 8006f40:	6018      	str	r0, [r3, #0]
 8006f42:	e002      	b.n	8006f4a <_printf_i+0x1d2>
 8006f44:	0671      	lsls	r1, r6, #25
 8006f46:	d5fb      	bpl.n	8006f40 <_printf_i+0x1c8>
 8006f48:	8018      	strh	r0, [r3, #0]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	6123      	str	r3, [r4, #16]
 8006f4e:	4616      	mov	r6, r2
 8006f50:	e7ba      	b.n	8006ec8 <_printf_i+0x150>
 8006f52:	680b      	ldr	r3, [r1, #0]
 8006f54:	1d1a      	adds	r2, r3, #4
 8006f56:	600a      	str	r2, [r1, #0]
 8006f58:	681e      	ldr	r6, [r3, #0]
 8006f5a:	6862      	ldr	r2, [r4, #4]
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4630      	mov	r0, r6
 8006f60:	f7f9 f936 	bl	80001d0 <memchr>
 8006f64:	b108      	cbz	r0, 8006f6a <_printf_i+0x1f2>
 8006f66:	1b80      	subs	r0, r0, r6
 8006f68:	6060      	str	r0, [r4, #4]
 8006f6a:	6863      	ldr	r3, [r4, #4]
 8006f6c:	6123      	str	r3, [r4, #16]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f74:	e7a8      	b.n	8006ec8 <_printf_i+0x150>
 8006f76:	6923      	ldr	r3, [r4, #16]
 8006f78:	4632      	mov	r2, r6
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	4640      	mov	r0, r8
 8006f7e:	47d0      	blx	sl
 8006f80:	3001      	adds	r0, #1
 8006f82:	d0ab      	beq.n	8006edc <_printf_i+0x164>
 8006f84:	6823      	ldr	r3, [r4, #0]
 8006f86:	079b      	lsls	r3, r3, #30
 8006f88:	d413      	bmi.n	8006fb2 <_printf_i+0x23a>
 8006f8a:	68e0      	ldr	r0, [r4, #12]
 8006f8c:	9b03      	ldr	r3, [sp, #12]
 8006f8e:	4298      	cmp	r0, r3
 8006f90:	bfb8      	it	lt
 8006f92:	4618      	movlt	r0, r3
 8006f94:	e7a4      	b.n	8006ee0 <_printf_i+0x168>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4632      	mov	r2, r6
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	47d0      	blx	sl
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d09b      	beq.n	8006edc <_printf_i+0x164>
 8006fa4:	3501      	adds	r5, #1
 8006fa6:	68e3      	ldr	r3, [r4, #12]
 8006fa8:	9903      	ldr	r1, [sp, #12]
 8006faa:	1a5b      	subs	r3, r3, r1
 8006fac:	42ab      	cmp	r3, r5
 8006fae:	dcf2      	bgt.n	8006f96 <_printf_i+0x21e>
 8006fb0:	e7eb      	b.n	8006f8a <_printf_i+0x212>
 8006fb2:	2500      	movs	r5, #0
 8006fb4:	f104 0619 	add.w	r6, r4, #25
 8006fb8:	e7f5      	b.n	8006fa6 <_printf_i+0x22e>
 8006fba:	bf00      	nop
 8006fbc:	080070bd 	.word	0x080070bd
 8006fc0:	080070ce 	.word	0x080070ce

08006fc4 <__retarget_lock_acquire_recursive>:
 8006fc4:	4770      	bx	lr

08006fc6 <__retarget_lock_release_recursive>:
 8006fc6:	4770      	bx	lr

08006fc8 <memcpy>:
 8006fc8:	440a      	add	r2, r1
 8006fca:	4291      	cmp	r1, r2
 8006fcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006fd0:	d100      	bne.n	8006fd4 <memcpy+0xc>
 8006fd2:	4770      	bx	lr
 8006fd4:	b510      	push	{r4, lr}
 8006fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fde:	4291      	cmp	r1, r2
 8006fe0:	d1f9      	bne.n	8006fd6 <memcpy+0xe>
 8006fe2:	bd10      	pop	{r4, pc}

08006fe4 <memmove>:
 8006fe4:	4288      	cmp	r0, r1
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	eb01 0402 	add.w	r4, r1, r2
 8006fec:	d902      	bls.n	8006ff4 <memmove+0x10>
 8006fee:	4284      	cmp	r4, r0
 8006ff0:	4623      	mov	r3, r4
 8006ff2:	d807      	bhi.n	8007004 <memmove+0x20>
 8006ff4:	1e43      	subs	r3, r0, #1
 8006ff6:	42a1      	cmp	r1, r4
 8006ff8:	d008      	beq.n	800700c <memmove+0x28>
 8006ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007002:	e7f8      	b.n	8006ff6 <memmove+0x12>
 8007004:	4402      	add	r2, r0
 8007006:	4601      	mov	r1, r0
 8007008:	428a      	cmp	r2, r1
 800700a:	d100      	bne.n	800700e <memmove+0x2a>
 800700c:	bd10      	pop	{r4, pc}
 800700e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007016:	e7f7      	b.n	8007008 <memmove+0x24>

08007018 <_realloc_r>:
 8007018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701a:	4607      	mov	r7, r0
 800701c:	4614      	mov	r4, r2
 800701e:	460e      	mov	r6, r1
 8007020:	b921      	cbnz	r1, 800702c <_realloc_r+0x14>
 8007022:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007026:	4611      	mov	r1, r2
 8007028:	f7ff bc46 	b.w	80068b8 <_malloc_r>
 800702c:	b922      	cbnz	r2, 8007038 <_realloc_r+0x20>
 800702e:	f7ff fbf3 	bl	8006818 <_free_r>
 8007032:	4625      	mov	r5, r4
 8007034:	4628      	mov	r0, r5
 8007036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007038:	f000 f814 	bl	8007064 <_malloc_usable_size_r>
 800703c:	42a0      	cmp	r0, r4
 800703e:	d20f      	bcs.n	8007060 <_realloc_r+0x48>
 8007040:	4621      	mov	r1, r4
 8007042:	4638      	mov	r0, r7
 8007044:	f7ff fc38 	bl	80068b8 <_malloc_r>
 8007048:	4605      	mov	r5, r0
 800704a:	2800      	cmp	r0, #0
 800704c:	d0f2      	beq.n	8007034 <_realloc_r+0x1c>
 800704e:	4631      	mov	r1, r6
 8007050:	4622      	mov	r2, r4
 8007052:	f7ff ffb9 	bl	8006fc8 <memcpy>
 8007056:	4631      	mov	r1, r6
 8007058:	4638      	mov	r0, r7
 800705a:	f7ff fbdd 	bl	8006818 <_free_r>
 800705e:	e7e9      	b.n	8007034 <_realloc_r+0x1c>
 8007060:	4635      	mov	r5, r6
 8007062:	e7e7      	b.n	8007034 <_realloc_r+0x1c>

08007064 <_malloc_usable_size_r>:
 8007064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007068:	1f18      	subs	r0, r3, #4
 800706a:	2b00      	cmp	r3, #0
 800706c:	bfbc      	itt	lt
 800706e:	580b      	ldrlt	r3, [r1, r0]
 8007070:	18c0      	addlt	r0, r0, r3
 8007072:	4770      	bx	lr

08007074 <_init>:
 8007074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007076:	bf00      	nop
 8007078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707a:	bc08      	pop	{r3}
 800707c:	469e      	mov	lr, r3
 800707e:	4770      	bx	lr

08007080 <_fini>:
 8007080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007082:	bf00      	nop
 8007084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007086:	bc08      	pop	{r3}
 8007088:	469e      	mov	lr, r3
 800708a:	4770      	bx	lr
