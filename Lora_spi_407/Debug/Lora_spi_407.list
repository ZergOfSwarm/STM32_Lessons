
Lora_spi_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004780  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac4  08004ac4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004acc  08004acc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ad0  08004ad0  00014ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000418  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000490  20000490  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f115  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000235a  00000000  00000000  0002f1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  00031518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000930  00000000  00000000  00031f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002222b  00000000  00000000  00032860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c634  00000000  00000000  00054a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c69d6  00000000  00000000  000610bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00127a95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003120  00000000  00000000  00127ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048f8 	.word	0x080048f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080048f8 	.word	0x080048f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	78fa      	ldrb	r2, [r7, #3]
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fbd0 	bl	8000d22 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fbeb 	bl	8000d62 <SX1278_hw_SPIReadByte>
 800058c:	4603      	mov	r3, r0
 800058e:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2101      	movs	r1, #1
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fb88 	bl	8000cac <SX1278_hw_SetNSS>
	return tmp;
 800059c:	7bfb      	ldrb	r3, [r7, #15]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	460b      	mov	r3, r1
 80005b0:	70fb      	strb	r3, [r7, #3]
 80005b2:	4613      	mov	r3, r2
 80005b4:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fb75 	bl	8000cac <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	78fb      	ldrb	r3, [r7, #3]
 80005c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	4619      	mov	r1, r3
 80005d0:	4610      	mov	r0, r2
 80005d2:	f000 fba6 	bl	8000d22 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	78ba      	ldrb	r2, [r7, #2]
 80005dc:	4611      	mov	r1, r2
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fb9f 	bl	8000d22 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2101      	movs	r1, #1
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fb5e 	bl	8000cac <SX1278_hw_SetNSS>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	607a      	str	r2, [r7, #4]
 8000602:	461a      	mov	r2, r3
 8000604:	460b      	mov	r3, r1
 8000606:	72fb      	strb	r3, [r7, #11]
 8000608:	4613      	mov	r3, r2
 800060a:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 800060c:	7abb      	ldrb	r3, [r7, #10]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d927      	bls.n	8000662 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fb47 	bl	8000cac <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	7afa      	ldrb	r2, [r7, #11]
 8000624:	4611      	mov	r1, r2
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fb7b 	bl	8000d22 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800062c:	2300      	movs	r3, #0
 800062e:	75fb      	strb	r3, [r7, #23]
 8000630:	e00c      	b.n	800064c <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	6819      	ldr	r1, [r3, #0]
 8000636:	7dfb      	ldrb	r3, [r7, #23]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	18d4      	adds	r4, r2, r3
 800063c:	4608      	mov	r0, r1
 800063e:	f000 fb90 	bl	8000d62 <SX1278_hw_SPIReadByte>
 8000642:	4603      	mov	r3, r0
 8000644:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000646:	7dfb      	ldrb	r3, [r7, #23]
 8000648:	3301      	adds	r3, #1
 800064a:	75fb      	strb	r3, [r7, #23]
 800064c:	7dfa      	ldrb	r2, [r7, #23]
 800064e:	7abb      	ldrb	r3, [r7, #10]
 8000650:	429a      	cmp	r2, r3
 8000652:	d3ee      	bcc.n	8000632 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2101      	movs	r1, #1
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fb26 	bl	8000cac <SX1278_hw_SetNSS>
 8000660:	e000      	b.n	8000664 <SX1278_SPIBurstRead+0x6c>
		return;
 8000662:	bf00      	nop
	}
}
 8000664:	371c      	adds	r7, #28
 8000666:	46bd      	mov	sp, r7
 8000668:	bd90      	pop	{r4, r7, pc}

0800066a <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800066a:	b580      	push	{r7, lr}
 800066c:	b086      	sub	sp, #24
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	607a      	str	r2, [r7, #4]
 8000674:	461a      	mov	r2, r3
 8000676:	460b      	mov	r3, r1
 8000678:	72fb      	strb	r3, [r7, #11]
 800067a:	4613      	mov	r3, r2
 800067c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800067e:	7abb      	ldrb	r3, [r7, #10]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d929      	bls.n	80006d8 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fb0e 	bl	8000cac <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4619      	mov	r1, r3
 800069e:	4610      	mov	r0, r2
 80006a0:	f000 fb3f 	bl	8000d22 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80006a4:	2300      	movs	r3, #0
 80006a6:	75fb      	strb	r3, [r7, #23]
 80006a8:	e00b      	b.n	80006c2 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	7dfb      	ldrb	r3, [r7, #23]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	4619      	mov	r1, r3
 80006b8:	f000 fb33 	bl	8000d22 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80006bc:	7dfb      	ldrb	r3, [r7, #23]
 80006be:	3301      	adds	r3, #1
 80006c0:	75fb      	strb	r3, [r7, #23]
 80006c2:	7dfa      	ldrb	r2, [r7, #23]
 80006c4:	7abb      	ldrb	r3, [r7, #10]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d3ef      	bcc.n	80006aa <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2101      	movs	r1, #1
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 faeb 	bl	8000cac <SX1278_hw_SetNSS>
 80006d6:	e000      	b.n	80006da <SX1278_SPIBurstWrite+0x70>
		return;
 80006d8:	bf00      	nop
	}
}
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f000 f90d 	bl	8000908 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80006ee:	200f      	movs	r0, #15
 80006f0:	f000 fb5d 	bl	8000dae <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 f917 	bl	8000928 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	04d9      	lsls	r1, r3, #19
 800070a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800070e:	04d0      	lsls	r0, r2, #19
 8000710:	4a6f      	ldr	r2, [pc, #444]	; (80008d0 <SX1278_config+0x1f0>)
 8000712:	f04f 0300 	mov.w	r3, #0
 8000716:	f7ff fdab 	bl	8000270 <__aeabi_uldivmod>
 800071a:	4602      	mov	r2, r0
 800071c:	460b      	mov	r3, r1
 800071e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000722:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000726:	f04f 0200 	mov.w	r2, #0
 800072a:	f04f 0300 	mov.w	r3, #0
 800072e:	0c02      	lsrs	r2, r0, #16
 8000730:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000734:	0c0b      	lsrs	r3, r1, #16
 8000736:	b2d3      	uxtb	r3, r2
 8000738:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800073a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800073e:	f04f 0200 	mov.w	r2, #0
 8000742:	f04f 0300 	mov.w	r3, #0
 8000746:	0a02      	lsrs	r2, r0, #8
 8000748:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800074c:	0a0b      	lsrs	r3, r1, #8
 800074e:	b2d3      	uxtb	r3, r2
 8000750:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000752:	7c3b      	ldrb	r3, [r7, #16]
 8000754:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8000756:	f107 020c 	add.w	r2, r7, #12
 800075a:	2303      	movs	r3, #3
 800075c:	2106      	movs	r1, #6
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff83 	bl	800066a <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000764:	2234      	movs	r2, #52	; 0x34
 8000766:	2139      	movs	r1, #57	; 0x39
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff1c 	bl	80005a6 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	7c1b      	ldrb	r3, [r3, #16]
 8000772:	461a      	mov	r2, r3
 8000774:	4b57      	ldr	r3, [pc, #348]	; (80008d4 <SX1278_config+0x1f4>)
 8000776:	5c9b      	ldrb	r3, [r3, r2]
 8000778:	461a      	mov	r2, r3
 800077a:	2109      	movs	r1, #9
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff12 	bl	80005a6 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000782:	220b      	movs	r2, #11
 8000784:	210b      	movs	r1, #11
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff ff0d 	bl	80005a6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800078c:	2223      	movs	r2, #35	; 0x23
 800078e:	210c      	movs	r1, #12
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff08 	bl	80005a6 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	7c5b      	ldrb	r3, [r3, #17]
 800079a:	461a      	mov	r2, r3
 800079c:	4b4e      	ldr	r3, [pc, #312]	; (80008d8 <SX1278_config+0x1f8>)
 800079e:	5c9b      	ldrb	r3, [r3, r2]
 80007a0:	2b06      	cmp	r3, #6
 80007a2:	d147      	bne.n	8000834 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	7c9b      	ldrb	r3, [r3, #18]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b4c      	ldr	r3, [pc, #304]	; (80008dc <SX1278_config+0x1fc>)
 80007ac:	5c9b      	ldrb	r3, [r3, r2]
 80007ae:	011b      	lsls	r3, r3, #4
 80007b0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	7cdb      	ldrb	r3, [r3, #19]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4b49      	ldr	r3, [pc, #292]	; (80008e0 <SX1278_config+0x200>)
 80007ba:	5c5b      	ldrb	r3, [r3, r1]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4413      	add	r3, r2
 80007c2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80007c4:	3301      	adds	r3, #1
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	211d      	movs	r1, #29
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff feea 	bl	80005a6 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7c5b      	ldrb	r3, [r3, #17]
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b3f      	ldr	r3, [pc, #252]	; (80008d8 <SX1278_config+0x1f8>)
 80007da:	5c9b      	ldrb	r3, [r3, r2]
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	7d1b      	ldrb	r3, [r3, #20]
 80007e4:	4619      	mov	r1, r3
 80007e6:	4b3f      	ldr	r3, [pc, #252]	; (80008e4 <SX1278_config+0x204>)
 80007e8:	5c5b      	ldrb	r3, [r3, r1]
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4413      	add	r3, r2
 80007f0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80007f2:	3303      	adds	r3, #3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	211e      	movs	r1, #30
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff fed3 	bl	80005a6 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8000800:	2131      	movs	r1, #49	; 0x31
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff feb0 	bl	8000568 <SX1278_SPIRead>
 8000808:	4603      	mov	r3, r0
 800080a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	f023 0307 	bic.w	r3, r3, #7
 8000812:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	f043 0305 	orr.w	r3, r3, #5
 800081a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	461a      	mov	r2, r3
 8000820:	2131      	movs	r1, #49	; 0x31
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff febf 	bl	80005a6 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000828:	220c      	movs	r2, #12
 800082a:	2137      	movs	r1, #55	; 0x37
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff feba 	bl	80005a6 <SX1278_SPIWrite>
 8000832:	e029      	b.n	8000888 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7c9b      	ldrb	r3, [r3, #18]
 8000838:	461a      	mov	r2, r3
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <SX1278_config+0x1fc>)
 800083c:	5c9b      	ldrb	r3, [r3, r2]
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	7cdb      	ldrb	r3, [r3, #19]
 8000846:	4619      	mov	r1, r3
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <SX1278_config+0x200>)
 800084a:	5c5b      	ldrb	r3, [r3, r1]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000850:	4413      	add	r3, r2
 8000852:	b2db      	uxtb	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	211d      	movs	r1, #29
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff fea4 	bl	80005a6 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	7c5b      	ldrb	r3, [r3, #17]
 8000862:	461a      	mov	r2, r3
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <SX1278_config+0x1f8>)
 8000866:	5c9b      	ldrb	r3, [r3, r2]
 8000868:	011b      	lsls	r3, r3, #4
 800086a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	7d1b      	ldrb	r3, [r3, #20]
 8000870:	4619      	mov	r1, r3
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <SX1278_config+0x204>)
 8000874:	5c5b      	ldrb	r3, [r3, r1]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800087a:	4413      	add	r3, r2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	461a      	mov	r2, r3
 8000880:	211e      	movs	r1, #30
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff fe8f 	bl	80005a6 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000888:	2204      	movs	r2, #4
 800088a:	2126      	movs	r1, #38	; 0x26
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff fe8a 	bl	80005a6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000892:	2208      	movs	r2, #8
 8000894:	211f      	movs	r1, #31
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff fe85 	bl	80005a6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800089c:	2200      	movs	r2, #0
 800089e:	2120      	movs	r1, #32
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff fe80 	bl	80005a6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 80008a6:	2208      	movs	r2, #8
 80008a8:	2121      	movs	r1, #33	; 0x21
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff fe7b 	bl	80005a6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80008b0:	2201      	movs	r2, #1
 80008b2:	2141      	movs	r1, #65	; 0x41
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff fe76 	bl	80005a6 <SX1278_SPIWrite>
	module->readBytes = 0;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f000 f810 	bl	80008e8 <SX1278_standby>
}
 80008c8:	bf00      	nop
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	01e84800 	.word	0x01e84800
 80008d4:	080049f4 	.word	0x080049f4
 80008d8:	080049f8 	.word	0x080049f8
 80008dc:	08004a00 	.word	0x08004a00
 80008e0:	08004a0c 	.word	0x08004a0c
 80008e4:	08004a10 	.word	0x08004a10

080008e8 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80008f0:	2209      	movs	r2, #9
 80008f2:	2101      	movs	r1, #1
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fe56 	bl	80005a6 <SX1278_SPIWrite>
	module->status = STANDBY;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2201      	movs	r2, #1
 80008fe:	759a      	strb	r2, [r3, #22]
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000910:	2208      	movs	r2, #8
 8000912:	2101      	movs	r1, #1
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fe46 	bl	80005a6 <SX1278_SPIWrite>
	module->status = SLEEP;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	759a      	strb	r2, [r3, #22]
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000930:	2288      	movs	r2, #136	; 0x88
 8000932:	2101      	movs	r1, #1
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff fe36 	bl	80005a6 <SX1278_SPIWrite>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800094a:	22ff      	movs	r2, #255	; 0xff
 800094c:	2112      	movs	r1, #18
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff fe29 	bl	80005a6 <SX1278_SPIWrite>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	460b      	mov	r3, r1
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	7afa      	ldrb	r2, [r7, #11]
 800096e:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f7ff feb5 	bl	80006e0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000976:	2284      	movs	r2, #132	; 0x84
 8000978:	214d      	movs	r1, #77	; 0x4d
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f7ff fe13 	bl	80005a6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000980:	22ff      	movs	r2, #255	; 0xff
 8000982:	2124      	movs	r1, #36	; 0x24
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f7ff fe0e 	bl	80005a6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800098a:	2201      	movs	r2, #1
 800098c:	2140      	movs	r1, #64	; 0x40
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f7ff fe09 	bl	80005a6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000994:	223f      	movs	r2, #63	; 0x3f
 8000996:	2111      	movs	r1, #17
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f7ff fe04 	bl	80005a6 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff ffcf 	bl	8000942 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 80009a4:	7afb      	ldrb	r3, [r7, #11]
 80009a6:	461a      	mov	r2, r3
 80009a8:	2122      	movs	r1, #34	; 0x22
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff fdfb 	bl	80005a6 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80009b0:	210f      	movs	r1, #15
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f7ff fdd8 	bl	8000568 <SX1278_SPIRead>
 80009b8:	4603      	mov	r3, r0
 80009ba:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80009bc:	7dfb      	ldrb	r3, [r7, #23]
 80009be:	461a      	mov	r2, r3
 80009c0:	210d      	movs	r1, #13
 80009c2:	68f8      	ldr	r0, [r7, #12]
 80009c4:	f7ff fdef 	bl	80005a6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80009c8:	228d      	movs	r2, #141	; 0x8d
 80009ca:	2101      	movs	r1, #1
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f7ff fdea 	bl	80005a6 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80009da:	2118      	movs	r1, #24
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f7ff fdc3 	bl	8000568 <SX1278_SPIRead>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	2b04      	cmp	r3, #4
 80009ea:	d104      	bne.n	80009f6 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2203      	movs	r2, #3
 80009f0:	759a      	strb	r2, [r3, #22]
			return 1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e013      	b.n	8000a1e <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3b01      	subs	r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d109      	bne.n	8000a16 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f967 	bl	8000cda <SX1278_hw_Reset>
			SX1278_config(module);
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f7ff fe67 	bl	80006e0 <SX1278_config>
			return 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e003      	b.n	8000a1e <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000a16:	2001      	movs	r0, #1
 8000a18:	f000 f9c9 	bl	8000dae <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000a1c:	e7dd      	b.n	80009da <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b084      	sub	sp, #16
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f9c6 	bl	8000dc4 <SX1278_hw_GetDIO0>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d030      	beq.n	8000aa0 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3317      	adds	r3, #23
 8000a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 fdbd 	bl	80035c8 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000a4e:	2110      	movs	r1, #16
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff fd89 	bl	8000568 <SX1278_SPIRead>
 8000a56:	4603      	mov	r3, r0
 8000a58:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000a5a:	7bbb      	ldrb	r3, [r7, #14]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	210d      	movs	r1, #13
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff fda0 	bl	80005a6 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	7c5b      	ldrb	r3, [r3, #17]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d103      	bne.n	8000a76 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7d5b      	ldrb	r3, [r3, #21]
 8000a72:	73fb      	strb	r3, [r7, #15]
 8000a74:	e005      	b.n	8000a82 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000a76:	2113      	movs	r1, #19
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff fd75 	bl	8000568 <SX1278_SPIRead>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f103 0217 	add.w	r2, r3, #23
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff fdb3 	bl	80005f8 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	7bfa      	ldrb	r2, [r7, #15]
 8000a96:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ff51 	bl	8000942 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	60f8      	str	r0, [r7, #12]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	607a      	str	r2, [r7, #4]
 8000aba:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	7afa      	ldrb	r2, [r7, #11]
 8000ac0:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f7ff fe0c 	bl	80006e0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8000ac8:	2287      	movs	r2, #135	; 0x87
 8000aca:	214d      	movs	r1, #77	; 0x4d
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f7ff fd6a 	bl	80005a6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2124      	movs	r1, #36	; 0x24
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f7ff fd65 	bl	80005a6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000adc:	2241      	movs	r2, #65	; 0x41
 8000ade:	2140      	movs	r1, #64	; 0x40
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f7ff fd60 	bl	80005a6 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f7ff ff2b 	bl	8000942 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000aec:	22f7      	movs	r2, #247	; 0xf7
 8000aee:	2111      	movs	r1, #17
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff fd58 	bl	80005a6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000af6:	7afb      	ldrb	r3, [r7, #11]
 8000af8:	461a      	mov	r2, r3
 8000afa:	2122      	movs	r1, #34	; 0x22
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f7ff fd52 	bl	80005a6 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000b02:	210e      	movs	r1, #14
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f7ff fd2f 	bl	8000568 <SX1278_SPIRead>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000b0e:	7dfb      	ldrb	r3, [r7, #23]
 8000b10:	461a      	mov	r2, r3
 8000b12:	210d      	movs	r1, #13
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff fd46 	bl	80005a6 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000b1a:	2122      	movs	r1, #34	; 0x22
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f7ff fd23 	bl	8000568 <SX1278_SPIRead>
 8000b22:	4603      	mov	r3, r0
 8000b24:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000b26:	7dba      	ldrb	r2, [r7, #22]
 8000b28:	7afb      	ldrb	r3, [r7, #11]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d104      	bne.n	8000b38 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2202      	movs	r2, #2
 8000b32:	759a      	strb	r2, [r3, #22]
			return 1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e00e      	b.n	8000b56 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1ea      	bne.n	8000b1a <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 f8c6 	bl	8000cda <SX1278_hw_Reset>
			SX1278_config(module);
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	f7ff fdc6 	bl	80006e0 <SX1278_config>
			return 0;
 8000b54:	2300      	movs	r3, #0
		}
	}
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b084      	sub	sp, #16
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	68ba      	ldr	r2, [r7, #8]
 8000b72:	2100      	movs	r1, #0
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f7ff fd78 	bl	800066a <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000b7a:	228b      	movs	r2, #139	; 0x8b
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f7ff fd11 	bl	80005a6 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f91b 	bl	8000dc4 <SX1278_hw_GetDIO0>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00b      	beq.n	8000bac <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000b94:	2112      	movs	r1, #18
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f7ff fce6 	bl	8000568 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff fed0 	bl	8000942 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f7ff fea0 	bl	80008e8 <SX1278_standby>
			return 1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e013      	b.n	8000bd4 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d109      	bne.n	8000bcc <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 f88c 	bl	8000cda <SX1278_hw_Reset>
			SX1278_config(module);
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f7ff fd8c 	bl	80006e0 <SX1278_config>
			return 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e003      	b.n	8000bd4 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f000 f8ee 	bl	8000dae <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000bd2:	e7d7      	b.n	8000b84 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f848 	bl	8000c82 <SX1278_hw_init>
	module->frequency = frequency;
 8000bf2:	68f9      	ldr	r1, [r7, #12]
 8000bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bf8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	7e3a      	ldrb	r2, [r7, #24]
 8000c00:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	7f3a      	ldrb	r2, [r7, #28]
 8000c06:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c0e:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000c16:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000c1e:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000c26:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f7ff fd59 	bl	80006e0 <SX1278_config>
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b084      	sub	sp, #16
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	4613      	mov	r3, r2
 8000c42:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000c4a:	79fa      	ldrb	r2, [r7, #7]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d003      	beq.n	8000c58 <SX1278_read+0x22>
		length = module->readBytes;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000c56:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3317      	adds	r3, #23
 8000c5c:	79fa      	ldrb	r2, [r7, #7]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	68b8      	ldr	r0, [r7, #8]
 8000c62:	f002 fca3 	bl	80035ac <memcpy>
	rxBuf[length] = '\0';
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f000 f80d 	bl	8000cac <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6858      	ldr	r0, [r3, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f001 f876 	bl	8001d90 <HAL_GPIO_WritePin>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6958      	ldr	r0, [r3, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	b299      	uxth	r1, r3
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	bf0c      	ite	eq
 8000cc6:	2301      	moveq	r3, #1
 8000cc8:	2300      	movne	r3, #0
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	461a      	mov	r2, r3
 8000cce:	f001 f85f 	bl	8001d90 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ffe1 	bl	8000cac <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6858      	ldr	r0, [r3, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f001 f84a 	bl	8001d90 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f000 f856 	bl	8000dae <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6858      	ldr	r0, [r3, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f001 f83e 	bl	8001d90 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000d14:	2064      	movs	r0, #100	; 0x64
 8000d16:	f000 f84a 	bl	8000dae <SX1278_hw_DelayMs>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000d2e:	2100      	movs	r1, #0
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ffbb 	bl	8000cac <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6998      	ldr	r0, [r3, #24]
 8000d3a:	1cf9      	adds	r1, r7, #3
 8000d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d40:	2201      	movs	r2, #1
 8000d42:	f001 fd3c 	bl	80027be <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000d46:	bf00      	nop
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 f814 	bl	8002d7a <HAL_SPI_GetState>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d1f7      	bne.n	8000d48 <SX1278_hw_SPICommand+0x26>
		;
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af02      	add	r7, sp, #8
 8000d68:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000d72:	2100      	movs	r1, #0
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff99 	bl	8000cac <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6998      	ldr	r0, [r3, #24]
 8000d7e:	f107 020e 	add.w	r2, r7, #14
 8000d82:	f107 010f 	add.w	r1, r7, #15
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	f001 fe52 	bl	8002a36 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000d92:	bf00      	nop
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f001 ffee 	bl	8002d7a <HAL_SPI_GetState>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d1f7      	bne.n	8000d94 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 fd2c 	bl	8001814 <HAL_Delay>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4610      	mov	r0, r2
 8000dda:	f000 ffc1 	bl	8001d60 <HAL_GPIO_ReadPin>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	bf0c      	ite	eq
 8000de4:	2301      	moveq	r3, #1
 8000de6:	2300      	movne	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	4b38      	ldr	r3, [pc, #224]	; (8000ef0 <MX_GPIO_Init+0xfc>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a37      	ldr	r2, [pc, #220]	; (8000ef0 <MX_GPIO_Init+0xfc>)
 8000e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <MX_GPIO_Init+0xfc>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <MX_GPIO_Init+0xfc>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a30      	ldr	r2, [pc, #192]	; (8000ef0 <MX_GPIO_Init+0xfc>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b2e      	ldr	r3, [pc, #184]	; (8000ef0 <MX_GPIO_Init+0xfc>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <MX_GPIO_Init+0xfc>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a29      	ldr	r2, [pc, #164]	; (8000ef0 <MX_GPIO_Init+0xfc>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <MX_GPIO_Init+0xfc>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2102      	movs	r1, #2
 8000e62:	4824      	ldr	r0, [pc, #144]	; (8000ef4 <MX_GPIO_Init+0x100>)
 8000e64:	f000 ff94 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	4821      	ldr	r0, [pc, #132]	; (8000ef4 <MX_GPIO_Init+0x100>)
 8000e6e:	f000 ff8f 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2102      	movs	r1, #2
 8000e76:	4820      	ldr	r0, [pc, #128]	; (8000ef8 <MX_GPIO_Init+0x104>)
 8000e78:	f000 ff8a 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e84:	2302      	movs	r3, #2
 8000e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	4818      	ldr	r0, [pc, #96]	; (8000ef4 <MX_GPIO_Init+0x100>)
 8000e94:	f000 fdc8 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4619      	mov	r1, r3
 8000eae:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <MX_GPIO_Init+0x100>)
 8000eb0:	f000 fdba 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|MODE_Pin;
 8000eb4:	2305      	movs	r3, #5
 8000eb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <MX_GPIO_Init+0x104>)
 8000ec8:	f000 fdae 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_GPIO_Init+0x104>)
 8000ee4:	f000 fda0 	bl	8001a28 <HAL_GPIO_Init>

}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020400 	.word	0x40020400

08000efc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f08:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d013      	beq.n	8000f3c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f18:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f1c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00b      	beq.n	8000f3c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f24:	e000      	b.n	8000f28 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f26:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0f9      	beq.n	8000f26 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f32:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f3c:	687b      	ldr	r3, [r7, #4]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <_write>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	2332      	movs	r3, #50	; 0x32
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <_write+0x48>)
 8000f62:	f002 f830 	bl	8002fc6 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	e009      	b.n	8000f80 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	60ba      	str	r2, [r7, #8]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ffc1 	bl	8000efc <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbf1      	blt.n	8000f6c <_write+0x20>
	}
	return len;
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000438 	.word	0x20000438

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9e:	f000 fbc7 	bl	8001730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 f94f 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa6:	f7ff ff25 	bl	8000df4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000faa:	f000 f9bb 	bl	8001324 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000fae:	f000 fb23 	bl	80015f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	//master = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
	if (master == 1) {
 8000fb2:	4b8d      	ldr	r3, [pc, #564]	; (80011e8 <main+0x250>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d103      	bne.n	8000fc2 <main+0x2a>
		printf("Mode: Master-407\r\n");
 8000fba:	488c      	ldr	r0, [pc, #560]	; (80011ec <main+0x254>)
 8000fbc:	f002 fb92 	bl	80036e4 <puts>
 8000fc0:	e002      	b.n	8000fc8 <main+0x30>
		//HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
	} else {
		printf("Mode: Slave-407\r\n");
 8000fc2:	488b      	ldr	r0, [pc, #556]	; (80011f0 <main+0x258>)
 8000fc4:	f002 fb8e 	bl	80036e4 <puts>
		//HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
	}

	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000fc8:	4b8a      	ldr	r3, [pc, #552]	; (80011f4 <main+0x25c>)
 8000fca:	4a8b      	ldr	r2, [pc, #556]	; (80011f8 <main+0x260>)
 8000fcc:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8000fce:	4b89      	ldr	r3, [pc, #548]	; (80011f4 <main+0x25c>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 8000fd4:	4b87      	ldr	r3, [pc, #540]	; (80011f4 <main+0x25c>)
 8000fd6:	4a89      	ldr	r2, [pc, #548]	; (80011fc <main+0x264>)
 8000fd8:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8000fda:	4b86      	ldr	r3, [pc, #536]	; (80011f4 <main+0x25c>)
 8000fdc:	2210      	movs	r2, #16
 8000fde:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 8000fe0:	4b84      	ldr	r3, [pc, #528]	; (80011f4 <main+0x25c>)
 8000fe2:	4a85      	ldr	r2, [pc, #532]	; (80011f8 <main+0x260>)
 8000fe4:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 8000fe6:	4b83      	ldr	r3, [pc, #524]	; (80011f4 <main+0x25c>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 8000fec:	4b81      	ldr	r3, [pc, #516]	; (80011f4 <main+0x25c>)
 8000fee:	4a84      	ldr	r2, [pc, #528]	; (8001200 <main+0x268>)
 8000ff0:	619a      	str	r2, [r3, #24]

	SX1278.hw = &SX1278_hw;
 8000ff2:	4b84      	ldr	r3, [pc, #528]	; (8001204 <main+0x26c>)
 8000ff4:	4a7f      	ldr	r2, [pc, #508]	; (80011f4 <main+0x25c>)
 8000ff6:	601a      	str	r2, [r3, #0]

	printf("Configuring LoRa module\r\n");
 8000ff8:	4883      	ldr	r0, [pc, #524]	; (8001208 <main+0x270>)
 8000ffa:	f002 fb73 	bl	80036e4 <puts>
	SX1278_init(&SX1278, 868000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8000ffe:	230a      	movs	r3, #10
 8001000:	9305      	str	r3, [sp, #20]
 8001002:	2300      	movs	r3, #0
 8001004:	9304      	str	r3, [sp, #16]
 8001006:	2300      	movs	r3, #0
 8001008:	9303      	str	r3, [sp, #12]
 800100a:	2307      	movs	r3, #7
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2301      	movs	r3, #1
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	2301      	movs	r3, #1
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	a372      	add	r3, pc, #456	; (adr r3, 80011e0 <main+0x248>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	4879      	ldr	r0, [pc, #484]	; (8001204 <main+0x26c>)
 800101e:	f7ff fddd 	bl	8000bdc <SX1278_init>
	SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
	printf("Done configuring LoRaModule\r\n");
 8001022:	487a      	ldr	r0, [pc, #488]	; (800120c <main+0x274>)
 8001024:	f002 fb5e 	bl	80036e4 <puts>

	if (master == 1) {
 8001028:	4b6f      	ldr	r3, [pc, #444]	; (80011e8 <main+0x250>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d10e      	bne.n	800104e <main+0xb6>
		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8001030:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001034:	2110      	movs	r1, #16
 8001036:	4873      	ldr	r0, [pc, #460]	; (8001204 <main+0x26c>)
 8001038:	f7ff fd39 	bl	8000aae <SX1278_LoRaEntryTx>
 800103c:	4603      	mov	r3, r0
 800103e:	4a74      	ldr	r2, [pc, #464]	; (8001210 <main+0x278>)
 8001040:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2102      	movs	r1, #2
 8001046:	486d      	ldr	r0, [pc, #436]	; (80011fc <main+0x264>)
 8001048:	f000 fea2 	bl	8001d90 <HAL_GPIO_WritePin>
 800104c:	e00d      	b.n	800106a <main+0xd2>
	} else {
		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 800104e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001052:	2110      	movs	r1, #16
 8001054:	486b      	ldr	r0, [pc, #428]	; (8001204 <main+0x26c>)
 8001056:	f7ff fc81 	bl	800095c <SX1278_LoRaEntryRx>
 800105a:	4603      	mov	r3, r0
 800105c:	4a6c      	ldr	r2, [pc, #432]	; (8001210 <main+0x278>)
 800105e:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2102      	movs	r1, #2
 8001064:	4865      	ldr	r0, [pc, #404]	; (80011fc <main+0x264>)
 8001066:	f000 fe93 	bl	8001d90 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { // Master-BluePill
  		if (master == 1) {
 800106a:	4b5f      	ldr	r3, [pc, #380]	; (80011e8 <main+0x250>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d16b      	bne.n	800114a <main+0x1b2>
  			printf("Master-407...\r\n");
 8001072:	4868      	ldr	r0, [pc, #416]	; (8001214 <main+0x27c>)
 8001074:	f002 fb36 	bl	80036e4 <puts>
  			HAL_Delay(1000);
 8001078:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107c:	f000 fbca 	bl	8001814 <HAL_Delay>
  			printf("Sending package...\r\n");
 8001080:	4865      	ldr	r0, [pc, #404]	; (8001218 <main+0x280>)
 8001082:	f002 fb2f 	bl	80036e4 <puts>
  			if (flag == 1) {
 8001086:	4b65      	ldr	r3, [pc, #404]	; (800121c <main+0x284>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d12a      	bne.n	80010e4 <main+0x14c>
  				message_length = sprintf(buffer, "1%d",message);
 800108e:	4b64      	ldr	r3, [pc, #400]	; (8001220 <main+0x288>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	4963      	ldr	r1, [pc, #396]	; (8001224 <main+0x28c>)
 8001096:	4864      	ldr	r0, [pc, #400]	; (8001228 <main+0x290>)
 8001098:	f002 fb2c 	bl	80036f4 <siprintf>
 800109c:	4603      	mov	r3, r0
 800109e:	4a63      	ldr	r2, [pc, #396]	; (800122c <main+0x294>)
 80010a0:	6013      	str	r3, [r2, #0]
  				ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 80010a2:	4b62      	ldr	r3, [pc, #392]	; (800122c <main+0x294>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010ac:	4619      	mov	r1, r3
 80010ae:	4855      	ldr	r0, [pc, #340]	; (8001204 <main+0x26c>)
 80010b0:	f7ff fcfd 	bl	8000aae <SX1278_LoRaEntryTx>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4a56      	ldr	r2, [pc, #344]	; (8001210 <main+0x278>)
 80010b8:	6013      	str	r3, [r2, #0]
  				//printf("Entry: %d\r\n", ret);
  				//printf("Sending %s\r\n", buffer);
  				ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,message_length, 2000);
 80010ba:	4b5c      	ldr	r3, [pc, #368]	; (800122c <main+0x294>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010c4:	4958      	ldr	r1, [pc, #352]	; (8001228 <main+0x290>)
 80010c6:	484f      	ldr	r0, [pc, #316]	; (8001204 <main+0x26c>)
 80010c8:	f7ff fd49 	bl	8000b5e <SX1278_LoRaTxPacket>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a50      	ldr	r2, [pc, #320]	; (8001210 <main+0x278>)
 80010d0:	6013      	str	r3, [r2, #0]
  				message += 1;
 80010d2:	4b53      	ldr	r3, [pc, #332]	; (8001220 <main+0x288>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	4a51      	ldr	r2, [pc, #324]	; (8001220 <main+0x288>)
 80010da:	6013      	str	r3, [r2, #0]
  				//printf("Transmission: %d\r\n", ret);
  				flag = 0;
 80010dc:	4b4f      	ldr	r3, [pc, #316]	; (800121c <main+0x284>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	e053      	b.n	800118c <main+0x1f4>
  			} else if (flag == 0) {
 80010e4:	4b4d      	ldr	r3, [pc, #308]	; (800121c <main+0x284>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d12a      	bne.n	8001142 <main+0x1aa>
  				message_length = sprintf(buffer, "0%d",message);
 80010ec:	4b4c      	ldr	r3, [pc, #304]	; (8001220 <main+0x288>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	494f      	ldr	r1, [pc, #316]	; (8001230 <main+0x298>)
 80010f4:	484c      	ldr	r0, [pc, #304]	; (8001228 <main+0x290>)
 80010f6:	f002 fafd 	bl	80036f4 <siprintf>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a4b      	ldr	r2, [pc, #300]	; (800122c <main+0x294>)
 80010fe:	6013      	str	r3, [r2, #0]
  				ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8001100:	4b4a      	ldr	r3, [pc, #296]	; (800122c <main+0x294>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800110a:	4619      	mov	r1, r3
 800110c:	483d      	ldr	r0, [pc, #244]	; (8001204 <main+0x26c>)
 800110e:	f7ff fcce 	bl	8000aae <SX1278_LoRaEntryTx>
 8001112:	4603      	mov	r3, r0
 8001114:	4a3e      	ldr	r2, [pc, #248]	; (8001210 <main+0x278>)
 8001116:	6013      	str	r3, [r2, #0]
  				//printf("Entry: %d\r\n", ret);
  				//printf("Sending %s\r\n", buffer);
  				ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,message_length, 2000);
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <main+0x294>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001122:	4941      	ldr	r1, [pc, #260]	; (8001228 <main+0x290>)
 8001124:	4837      	ldr	r0, [pc, #220]	; (8001204 <main+0x26c>)
 8001126:	f7ff fd1a 	bl	8000b5e <SX1278_LoRaTxPacket>
 800112a:	4603      	mov	r3, r0
 800112c:	4a38      	ldr	r2, [pc, #224]	; (8001210 <main+0x278>)
 800112e:	6013      	str	r3, [r2, #0]
  				message += 1;
 8001130:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <main+0x288>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a3a      	ldr	r2, [pc, #232]	; (8001220 <main+0x288>)
 8001138:	6013      	str	r3, [r2, #0]
  				//printf("Transmission: %d\r\n", ret);
  				flag = 1;
 800113a:	4b38      	ldr	r3, [pc, #224]	; (800121c <main+0x284>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e024      	b.n	800118c <main+0x1f4>
  			}else {
  				printf("No matching!\r\n");
 8001142:	483c      	ldr	r0, [pc, #240]	; (8001234 <main+0x29c>)
 8001144:	f002 face 	bl	80036e4 <puts>
 8001148:	e020      	b.n	800118c <main+0x1f4>
  			}

  		} else {
  			printf("Slave-407...\r\n");
 800114a:	483b      	ldr	r0, [pc, #236]	; (8001238 <main+0x2a0>)
 800114c:	f002 faca 	bl	80036e4 <puts>
  			HAL_Delay(800);
 8001150:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001154:	f000 fb5e 	bl	8001814 <HAL_Delay>
  			//printf("Receiving package...\r\n");

  			ret = SX1278_LoRaRxPacket(&SX1278);
 8001158:	482a      	ldr	r0, [pc, #168]	; (8001204 <main+0x26c>)
 800115a:	f7ff fc64 	bl	8000a26 <SX1278_LoRaRxPacket>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <main+0x278>)
 8001164:	601a      	str	r2, [r3, #0]
  			//printf("Received: %d\r\n", ret);
  			if (ret > 0) {
 8001166:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <main+0x278>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	dd0e      	ble.n	800118c <main+0x1f4>
  				SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <main+0x278>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	492c      	ldr	r1, [pc, #176]	; (8001228 <main+0x290>)
 8001178:	4822      	ldr	r0, [pc, #136]	; (8001204 <main+0x26c>)
 800117a:	f7ff fd5c 	bl	8000c36 <SX1278_read>
  				printf("Content from BluePill (%d): %s\r\n", ret, buffer);
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <main+0x278>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a29      	ldr	r2, [pc, #164]	; (8001228 <main+0x290>)
 8001184:	4619      	mov	r1, r3
 8001186:	482d      	ldr	r0, [pc, #180]	; (800123c <main+0x2a4>)
 8001188:	f002 fa26 	bl	80035d8 <iprintf>

  		}

  		//change mode
  		//if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin)) {
  		printf("Changing mode\r\n");
 800118c:	482c      	ldr	r0, [pc, #176]	; (8001240 <main+0x2a8>)
 800118e:	f002 faa9 	bl	80036e4 <puts>
  		//master = ~master & 0x01;
  		if (master == 1) {
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <main+0x250>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d10e      	bne.n	80011b8 <main+0x220>
  			ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 800119a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800119e:	2110      	movs	r1, #16
 80011a0:	4818      	ldr	r0, [pc, #96]	; (8001204 <main+0x26c>)
 80011a2:	f7ff fc84 	bl	8000aae <SX1278_LoRaEntryTx>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a19      	ldr	r2, [pc, #100]	; (8001210 <main+0x278>)
 80011aa:	6013      	str	r3, [r2, #0]
  			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2102      	movs	r1, #2
 80011b0:	4812      	ldr	r0, [pc, #72]	; (80011fc <main+0x264>)
 80011b2:	f000 fded 	bl	8001d90 <HAL_GPIO_WritePin>
 80011b6:	e00d      	b.n	80011d4 <main+0x23c>
  		} else {
  			ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 80011b8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011bc:	2110      	movs	r1, #16
 80011be:	4811      	ldr	r0, [pc, #68]	; (8001204 <main+0x26c>)
 80011c0:	f7ff fbcc 	bl	800095c <SX1278_LoRaEntryRx>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <main+0x278>)
 80011c8:	6013      	str	r3, [r2, #0]
  			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2102      	movs	r1, #2
 80011ce:	480b      	ldr	r0, [pc, #44]	; (80011fc <main+0x264>)
 80011d0:	f000 fdde 	bl	8001d90 <HAL_GPIO_WritePin>
  		}
  		HAL_Delay(1000);
 80011d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d8:	f000 fb1c 	bl	8001814 <HAL_Delay>
  		if (master == 1) {
 80011dc:	e745      	b.n	800106a <main+0xd2>
 80011de:	bf00      	nop
 80011e0:	33bca100 	.word	0x33bca100
 80011e4:	00000000 	.word	0x00000000
 80011e8:	20000000 	.word	0x20000000
 80011ec:	08004910 	.word	0x08004910
 80011f0:	08004924 	.word	0x08004924
 80011f4:	200003c4 	.word	0x200003c4
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020000 	.word	0x40020000
 8001200:	200003e0 	.word	0x200003e0
 8001204:	200002a8 	.word	0x200002a8
 8001208:	08004938 	.word	0x08004938
 800120c:	08004954 	.word	0x08004954
 8001210:	200003c0 	.word	0x200003c0
 8001214:	08004974 	.word	0x08004974
 8001218:	08004984 	.word	0x08004984
 800121c:	20000004 	.word	0x20000004
 8001220:	200000a4 	.word	0x200000a4
 8001224:	08004998 	.word	0x08004998
 8001228:	200000a8 	.word	0x200000a8
 800122c:	200000a0 	.word	0x200000a0
 8001230:	0800499c 	.word	0x0800499c
 8001234:	080049a0 	.word	0x080049a0
 8001238:	080049b0 	.word	0x080049b0
 800123c:	080049c0 	.word	0x080049c0
 8001240:	080049e4 	.word	0x080049e4

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	; 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	2230      	movs	r2, #48	; 0x30
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f002 f9b8 	bl	80035c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <SystemClock_Config+0xcc>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	4a27      	ldr	r2, [pc, #156]	; (8001310 <SystemClock_Config+0xcc>)
 8001272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	; 0x40
 8001278:	4b25      	ldr	r3, [pc, #148]	; (8001310 <SystemClock_Config+0xcc>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <SystemClock_Config+0xd0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a21      	ldr	r2, [pc, #132]	; (8001314 <SystemClock_Config+0xd0>)
 800128e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <SystemClock_Config+0xd0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a0:	2301      	movs	r3, #1
 80012a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012aa:	2302      	movs	r3, #2
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012b4:	2304      	movs	r3, #4
 80012b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012b8:	23a8      	movs	r3, #168	; 0xa8
 80012ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012bc:	2302      	movs	r3, #2
 80012be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012c0:	2304      	movs	r3, #4
 80012c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c4:	f107 0320 	add.w	r3, r7, #32
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fd7b 	bl	8001dc4 <HAL_RCC_OscConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012d4:	f000 f820 	bl	8001318 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d8:	230f      	movs	r3, #15
 80012da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012dc:	2302      	movs	r3, #2
 80012de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	2105      	movs	r1, #5
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 ffdc 	bl	80022b4 <HAL_RCC_ClockConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001302:	f000 f809 	bl	8001318 <Error_Handler>
  }
}
 8001306:	bf00      	nop
 8001308:	3750      	adds	r7, #80	; 0x50
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40007000 	.word	0x40007000

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>
	...

08001324 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_SPI1_Init+0x64>)
 800132a:	4a18      	ldr	r2, [pc, #96]	; (800138c <MX_SPI1_Init+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_SPI1_Init+0x64>)
 8001330:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001334:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_SPI1_Init+0x64>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_SPI1_Init+0x64>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_SPI1_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_SPI1_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_SPI1_Init+0x64>)
 8001350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001354:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_SPI1_Init+0x64>)
 8001358:	2218      	movs	r2, #24
 800135a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <MX_SPI1_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_SPI1_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <MX_SPI1_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_SPI1_Init+0x64>)
 8001370:	220a      	movs	r2, #10
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_SPI1_Init+0x64>)
 8001376:	f001 f999 	bl	80026ac <HAL_SPI_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001380:	f7ff ffca 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200003e0 	.word	0x200003e0
 800138c:	40013000 	.word	0x40013000

08001390 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a19      	ldr	r2, [pc, #100]	; (8001414 <HAL_SPI_MspInit+0x84>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d12b      	bne.n	800140a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a17      	ldr	r2, [pc, #92]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a10      	ldr	r2, [pc, #64]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013ea:	23e0      	movs	r3, #224	; 0xe0
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013fa:	2305      	movs	r3, #5
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <HAL_SPI_MspInit+0x8c>)
 8001406:	f000 fb0f 	bl	8001a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40013000 	.word	0x40013000
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_MspInit+0x4c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a0f      	ldr	r2, [pc, #60]	; (800146c <HAL_MspInit+0x4c>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <HAL_MspInit+0x4c>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <NMI_Handler+0x4>

08001476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <MemManage_Handler+0x4>

08001482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <UsageFault_Handler+0x4>

0800148e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014bc:	f000 f98a 	bl	80017d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e00a      	b.n	80014ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014d6:	f3af 8000 	nop.w
 80014da:	4601      	mov	r1, r0
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	b2ca      	uxtb	r2, r1
 80014e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbf0      	blt.n	80014d6 <_read+0x12>
	}

return len;
 80014f4:	687b      	ldr	r3, [r7, #4]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_close>:
	}
	return len;
}

int _close(int file)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	return -1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001526:	605a      	str	r2, [r3, #4]
	return 0;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_isatty>:

int _isatty(int file)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	return 1;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
	return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <_sbrk+0x5c>)
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <_sbrk+0x60>)
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <_sbrk+0x64>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <_sbrk+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d207      	bcs.n	80015a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001598:	f001 ffde 	bl	8003558 <__errno>
 800159c:	4603      	mov	r3, r0
 800159e:	220c      	movs	r2, #12
 80015a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015a6:	e009      	b.n	80015bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <_sbrk+0x64>)
 80015b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20020000 	.word	0x20020000
 80015c8:	00000400 	.word	0x00000400
 80015cc:	20000094 	.word	0x20000094
 80015d0:	20000490 	.word	0x20000490

080015d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <SystemInit+0x20>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <SystemInit+0x20>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <MX_USART2_UART_Init+0x50>)
 8001600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_USART2_UART_Init+0x4c>)
 8001630:	f001 fc7c 	bl	8002f2c <HAL_UART_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800163a:	f7ff fe6d 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000438 	.word	0x20000438
 8001648:	40004400 	.word	0x40004400

0800164c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <HAL_UART_MspInit+0x84>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d12b      	bne.n	80016c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_UART_MspInit+0x88>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_UART_MspInit+0x88>)
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_UART_MspInit+0x88>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_UART_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_UART_MspInit+0x88>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_UART_MspInit+0x88>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016a6:	230c      	movs	r3, #12
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b6:	2307      	movs	r3, #7
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <HAL_UART_MspInit+0x8c>)
 80016c2:	f000 f9b1 	bl	8001a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	; 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40004400 	.word	0x40004400
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020000 	.word	0x40020000

080016dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001714 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e0:	480d      	ldr	r0, [pc, #52]	; (8001718 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016e2:	490e      	ldr	r1, [pc, #56]	; (800171c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016e4:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e8:	e002      	b.n	80016f0 <LoopCopyDataInit>

080016ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ee:	3304      	adds	r3, #4

080016f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f4:	d3f9      	bcc.n	80016ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016f8:	4c0b      	ldr	r4, [pc, #44]	; (8001728 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016fc:	e001      	b.n	8001702 <LoopFillZerobss>

080016fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001700:	3204      	adds	r2, #4

08001702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001704:	d3fb      	bcc.n	80016fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001706:	f7ff ff65 	bl	80015d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800170a:	f001 ff2b 	bl	8003564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170e:	f7ff fc43 	bl	8000f98 <main>
  bx  lr    
 8001712:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001714:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800171c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001720:	08004ad4 	.word	0x08004ad4
  ldr r2, =_sbss
 8001724:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001728:	20000490 	.word	0x20000490

0800172c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC_IRQHandler>
	...

08001730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <HAL_Init+0x40>)
 800173a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_Init+0x40>)
 8001746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a07      	ldr	r2, [pc, #28]	; (8001770 <HAL_Init+0x40>)
 8001752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001758:	2003      	movs	r0, #3
 800175a:	f000 f931 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175e:	200f      	movs	r0, #15
 8001760:	f000 f808 	bl	8001774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001764:	f7ff fe5c 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023c00 	.word	0x40023c00

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_InitTick+0x54>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_InitTick+0x58>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178a:	fbb3 f3f1 	udiv	r3, r3, r1
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f93b 	bl	8001a0e <HAL_SYSTICK_Config>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e00e      	b.n	80017c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d80a      	bhi.n	80017be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a8:	2200      	movs	r2, #0
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b0:	f000 f911 	bl	80019d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b4:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <HAL_InitTick+0x5c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e000      	b.n	80017c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20000010 	.word	0x20000010
 80017d0:	2000000c 	.word	0x2000000c

080017d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x20>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x24>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_IncTick+0x24>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000010 	.word	0x20000010
 80017f8:	2000047c 	.word	0x2000047c

080017fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_GetTick+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	2000047c 	.word	0x2000047c

08001814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff ffee 	bl	80017fc <HAL_GetTick>
 8001820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800182c:	d005      	beq.n	800183a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_Delay+0x44>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800183a:	bf00      	nop
 800183c:	f7ff ffde 	bl	80017fc <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	d8f7      	bhi.n	800183c <HAL_Delay+0x28>
  {
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000010 	.word	0x20000010

0800185c <__NVIC_SetPriorityGrouping>:
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_SetPriority>:
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <SysTick_Config>:
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019a0:	f7ff ff8e 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff47 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e8:	f7ff ff5c 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 80019ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f7ff ff8e 	bl	8001914 <NVIC_EncodePriority>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5d 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffb0 	bl	800197c <SysTick_Config>
 8001a1c:	4603      	mov	r3, r0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	e16b      	b.n	8001d1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f040 815a 	bne.w	8001d16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d005      	beq.n	8001a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d130      	bne.n	8001adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 0201 	and.w	r2, r3, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d017      	beq.n	8001b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d123      	bne.n	8001b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80b4 	beq.w	8001d16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b60      	ldr	r3, [pc, #384]	; (8001d34 <HAL_GPIO_Init+0x30c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a5f      	ldr	r2, [pc, #380]	; (8001d34 <HAL_GPIO_Init+0x30c>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	; (8001d34 <HAL_GPIO_Init+0x30c>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bca:	4a5b      	ldr	r2, [pc, #364]	; (8001d38 <HAL_GPIO_Init+0x310>)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a52      	ldr	r2, [pc, #328]	; (8001d3c <HAL_GPIO_Init+0x314>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d02b      	beq.n	8001c4e <HAL_GPIO_Init+0x226>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a51      	ldr	r2, [pc, #324]	; (8001d40 <HAL_GPIO_Init+0x318>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d025      	beq.n	8001c4a <HAL_GPIO_Init+0x222>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a50      	ldr	r2, [pc, #320]	; (8001d44 <HAL_GPIO_Init+0x31c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01f      	beq.n	8001c46 <HAL_GPIO_Init+0x21e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4f      	ldr	r2, [pc, #316]	; (8001d48 <HAL_GPIO_Init+0x320>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d019      	beq.n	8001c42 <HAL_GPIO_Init+0x21a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4e      	ldr	r2, [pc, #312]	; (8001d4c <HAL_GPIO_Init+0x324>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0x216>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4d      	ldr	r2, [pc, #308]	; (8001d50 <HAL_GPIO_Init+0x328>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00d      	beq.n	8001c3a <HAL_GPIO_Init+0x212>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4c      	ldr	r2, [pc, #304]	; (8001d54 <HAL_GPIO_Init+0x32c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d007      	beq.n	8001c36 <HAL_GPIO_Init+0x20e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4b      	ldr	r2, [pc, #300]	; (8001d58 <HAL_GPIO_Init+0x330>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_GPIO_Init+0x20a>
 8001c2e:	2307      	movs	r3, #7
 8001c30:	e00e      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c32:	2308      	movs	r3, #8
 8001c34:	e00c      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c36:	2306      	movs	r3, #6
 8001c38:	e00a      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	e008      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c3e:	2304      	movs	r3, #4
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c42:	2303      	movs	r3, #3
 8001c44:	e004      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	f002 0203 	and.w	r2, r2, #3
 8001c56:	0092      	lsls	r2, r2, #2
 8001c58:	4093      	lsls	r3, r2
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c60:	4935      	ldr	r1, [pc, #212]	; (8001d38 <HAL_GPIO_Init+0x310>)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	3302      	adds	r3, #2
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c92:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c98:	4b30      	ldr	r3, [pc, #192]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cbc:	4a27      	ldr	r2, [pc, #156]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc2:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce6:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d10:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	2b0f      	cmp	r3, #15
 8001d20:	f67f ae90 	bls.w	8001a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40013800 	.word	0x40013800
 8001d3c:	40020000 	.word	0x40020000
 8001d40:	40020400 	.word	0x40020400
 8001d44:	40020800 	.word	0x40020800
 8001d48:	40020c00 	.word	0x40020c00
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40021400 	.word	0x40021400
 8001d54:	40021800 	.word	0x40021800
 8001d58:	40021c00 	.word	0x40021c00
 8001d5c:	40013c00 	.word	0x40013c00

08001d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	e001      	b.n	8001d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dac:	e003      	b.n	8001db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e264      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d075      	beq.n	8001ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001de2:	4ba3      	ldr	r3, [pc, #652]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d00c      	beq.n	8001e08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dee:	4ba0      	ldr	r3, [pc, #640]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d112      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dfa:	4b9d      	ldr	r3, [pc, #628]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e06:	d10b      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	4b99      	ldr	r3, [pc, #612]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d05b      	beq.n	8001ecc <HAL_RCC_OscConfig+0x108>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d157      	bne.n	8001ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e23f      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e28:	d106      	bne.n	8001e38 <HAL_RCC_OscConfig+0x74>
 8001e2a:	4b91      	ldr	r3, [pc, #580]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a90      	ldr	r2, [pc, #576]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e01d      	b.n	8001e74 <HAL_RCC_OscConfig+0xb0>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x98>
 8001e42:	4b8b      	ldr	r3, [pc, #556]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a8a      	ldr	r2, [pc, #552]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b88      	ldr	r3, [pc, #544]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a87      	ldr	r2, [pc, #540]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0xb0>
 8001e5c:	4b84      	ldr	r3, [pc, #528]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a83      	ldr	r2, [pc, #524]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b81      	ldr	r3, [pc, #516]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a80      	ldr	r2, [pc, #512]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fcbe 	bl	80017fc <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff fcba 	bl	80017fc <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e204      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b76      	ldr	r3, [pc, #472]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0xc0>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fcaa 	bl	80017fc <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff fca6 	bl	80017fc <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e1f0      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	4b6c      	ldr	r3, [pc, #432]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0xe8>
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d063      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eda:	4b65      	ldr	r3, [pc, #404]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee6:	4b62      	ldr	r3, [pc, #392]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d11c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ef2:	4b5f      	ldr	r3, [pc, #380]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d116      	bne.n	8001f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efe:	4b5c      	ldr	r3, [pc, #368]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <HAL_RCC_OscConfig+0x152>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e1c4      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4b56      	ldr	r3, [pc, #344]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4952      	ldr	r1, [pc, #328]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	e03a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f34:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <HAL_RCC_OscConfig+0x2b0>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7ff fc5f 	bl	80017fc <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f42:	f7ff fc5b 	bl	80017fc <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e1a5      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f54:	4b46      	ldr	r3, [pc, #280]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f60:	4b43      	ldr	r3, [pc, #268]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4940      	ldr	r1, [pc, #256]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
 8001f74:	e015      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f76:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <HAL_RCC_OscConfig+0x2b0>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fc3e 	bl	80017fc <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f84:	f7ff fc3a 	bl	80017fc <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e184      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f96:	4b36      	ldr	r3, [pc, #216]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d030      	beq.n	8002010 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d016      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb6:	4b30      	ldr	r3, [pc, #192]	; (8002078 <HAL_RCC_OscConfig+0x2b4>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7ff fc1e 	bl	80017fc <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc4:	f7ff fc1a 	bl	80017fc <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e164      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x200>
 8001fe2:	e015      	b.n	8002010 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe4:	4b24      	ldr	r3, [pc, #144]	; (8002078 <HAL_RCC_OscConfig+0x2b4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7ff fc07 	bl	80017fc <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fc03 	bl	80017fc <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e14d      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8002006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80a0 	beq.w	800215e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10f      	bne.n	800204e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204a:	2301      	movs	r3, #1
 800204c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_RCC_OscConfig+0x2b8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d121      	bne.n	800209e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_RCC_OscConfig+0x2b8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_RCC_OscConfig+0x2b8>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002066:	f7ff fbc9 	bl	80017fc <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	e011      	b.n	8002092 <HAL_RCC_OscConfig+0x2ce>
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	42470000 	.word	0x42470000
 8002078:	42470e80 	.word	0x42470e80
 800207c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002080:	f7ff fbbc 	bl	80017fc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e106      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	4b85      	ldr	r3, [pc, #532]	; (80022a8 <HAL_RCC_OscConfig+0x4e4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d106      	bne.n	80020b4 <HAL_RCC_OscConfig+0x2f0>
 80020a6:	4b81      	ldr	r3, [pc, #516]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 80020a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020aa:	4a80      	ldr	r2, [pc, #512]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6713      	str	r3, [r2, #112]	; 0x70
 80020b2:	e01c      	b.n	80020ee <HAL_RCC_OscConfig+0x32a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d10c      	bne.n	80020d6 <HAL_RCC_OscConfig+0x312>
 80020bc:	4b7b      	ldr	r3, [pc, #492]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	4a7a      	ldr	r2, [pc, #488]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6713      	str	r3, [r2, #112]	; 0x70
 80020c8:	4b78      	ldr	r3, [pc, #480]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020cc:	4a77      	ldr	r2, [pc, #476]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6713      	str	r3, [r2, #112]	; 0x70
 80020d4:	e00b      	b.n	80020ee <HAL_RCC_OscConfig+0x32a>
 80020d6:	4b75      	ldr	r3, [pc, #468]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020da:	4a74      	ldr	r2, [pc, #464]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	6713      	str	r3, [r2, #112]	; 0x70
 80020e2:	4b72      	ldr	r3, [pc, #456]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e6:	4a71      	ldr	r2, [pc, #452]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 80020e8:	f023 0304 	bic.w	r3, r3, #4
 80020ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d015      	beq.n	8002122 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f6:	f7ff fb81 	bl	80017fc <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fc:	e00a      	b.n	8002114 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7ff fb7d 	bl	80017fc <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f241 3288 	movw	r2, #5000	; 0x1388
 800210c:	4293      	cmp	r3, r2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e0c5      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002114:	4b65      	ldr	r3, [pc, #404]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0ee      	beq.n	80020fe <HAL_RCC_OscConfig+0x33a>
 8002120:	e014      	b.n	800214c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7ff fb6b 	bl	80017fc <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002128:	e00a      	b.n	8002140 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7ff fb67 	bl	80017fc <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	; 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0af      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002140:	4b5a      	ldr	r3, [pc, #360]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1ee      	bne.n	800212a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214c:	7dfb      	ldrb	r3, [r7, #23]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d105      	bne.n	800215e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002152:	4b56      	ldr	r3, [pc, #344]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a55      	ldr	r2, [pc, #340]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 8002158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 809b 	beq.w	800229e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002168:	4b50      	ldr	r3, [pc, #320]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b08      	cmp	r3, #8
 8002172:	d05c      	beq.n	800222e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d141      	bne.n	8002200 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217c:	4b4c      	ldr	r3, [pc, #304]	; (80022b0 <HAL_RCC_OscConfig+0x4ec>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7ff fb3b 	bl	80017fc <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218a:	f7ff fb37 	bl	80017fc <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e081      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219c:	4b43      	ldr	r3, [pc, #268]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f0      	bne.n	800218a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	019b      	lsls	r3, r3, #6
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	3b01      	subs	r3, #1
 80021c2:	041b      	lsls	r3, r3, #16
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	061b      	lsls	r3, r3, #24
 80021cc:	4937      	ldr	r1, [pc, #220]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d2:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <HAL_RCC_OscConfig+0x4ec>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff fb10 	bl	80017fc <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff fb0c 	bl	80017fc <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e056      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f2:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x41c>
 80021fe:	e04e      	b.n	800229e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <HAL_RCC_OscConfig+0x4ec>)
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7ff faf9 	bl	80017fc <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220e:	f7ff faf5 	bl	80017fc <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e03f      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002220:	4b22      	ldr	r3, [pc, #136]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f0      	bne.n	800220e <HAL_RCC_OscConfig+0x44a>
 800222c:	e037      	b.n	800229e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e032      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d028      	beq.n	800229a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d121      	bne.n	800229a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d11a      	bne.n	800229a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800226a:	4013      	ands	r3, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002270:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002272:	4293      	cmp	r3, r2
 8002274:	d111      	bne.n	800229a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	085b      	lsrs	r3, r3, #1
 8002282:	3b01      	subs	r3, #1
 8002284:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d107      	bne.n	800229a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d001      	beq.n	800229e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40007000 	.word	0x40007000
 80022ac:	40023800 	.word	0x40023800
 80022b0:	42470060 	.word	0x42470060

080022b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0cc      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b68      	ldr	r3, [pc, #416]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d90c      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b65      	ldr	r3, [pc, #404]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b63      	ldr	r3, [pc, #396]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0b8      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002308:	4b59      	ldr	r3, [pc, #356]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a58      	ldr	r2, [pc, #352]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002312:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002320:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4a52      	ldr	r2, [pc, #328]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800232a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232c:	4b50      	ldr	r3, [pc, #320]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	494d      	ldr	r1, [pc, #308]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d044      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d107      	bne.n	8002362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d119      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e07f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d003      	beq.n	8002372 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236e:	2b03      	cmp	r3, #3
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002372:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e06f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002382:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e067      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002392:	4b37      	ldr	r3, [pc, #220]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f023 0203 	bic.w	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4934      	ldr	r1, [pc, #208]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a4:	f7ff fa2a 	bl	80017fc <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ac:	f7ff fa26 	bl	80017fc <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e04f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 020c 	and.w	r2, r3, #12
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d1eb      	bne.n	80023ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d4:	4b25      	ldr	r3, [pc, #148]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d20c      	bcs.n	80023fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e032      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4916      	ldr	r1, [pc, #88]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	490e      	ldr	r1, [pc, #56]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800243a:	f000 f821 	bl	8002480 <HAL_RCC_GetSysClockFreq>
 800243e:	4602      	mov	r2, r0
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	490a      	ldr	r1, [pc, #40]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	5ccb      	ldrb	r3, [r1, r3]
 800244e:	fa22 f303 	lsr.w	r3, r2, r3
 8002452:	4a09      	ldr	r2, [pc, #36]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_RCC_ClockConfig+0x1c8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff f98a 	bl	8001774 <HAL_InitTick>

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023c00 	.word	0x40023c00
 8002470:	40023800 	.word	0x40023800
 8002474:	08004a14 	.word	0x08004a14
 8002478:	20000008 	.word	0x20000008
 800247c:	2000000c 	.word	0x2000000c

08002480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002480:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	2300      	movs	r3, #0
 8002492:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002498:	4b67      	ldr	r3, [pc, #412]	; (8002638 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d00d      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x40>
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	f200 80bd 	bhi.w	8002624 <HAL_RCC_GetSysClockFreq+0x1a4>
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0x34>
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d003      	beq.n	80024ba <HAL_RCC_GetSysClockFreq+0x3a>
 80024b2:	e0b7      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024b4:	4b61      	ldr	r3, [pc, #388]	; (800263c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024b6:	60bb      	str	r3, [r7, #8]
       break;
 80024b8:	e0b7      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ba:	4b61      	ldr	r3, [pc, #388]	; (8002640 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80024bc:	60bb      	str	r3, [r7, #8]
      break;
 80024be:	e0b4      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c0:	4b5d      	ldr	r3, [pc, #372]	; (8002638 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ca:	4b5b      	ldr	r3, [pc, #364]	; (8002638 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d04d      	beq.n	8002572 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d6:	4b58      	ldr	r3, [pc, #352]	; (8002638 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	099b      	lsrs	r3, r3, #6
 80024dc:	461a      	mov	r2, r3
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024e6:	f04f 0100 	mov.w	r1, #0
 80024ea:	ea02 0800 	and.w	r8, r2, r0
 80024ee:	ea03 0901 	and.w	r9, r3, r1
 80024f2:	4640      	mov	r0, r8
 80024f4:	4649      	mov	r1, r9
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	014b      	lsls	r3, r1, #5
 8002500:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002504:	0142      	lsls	r2, r0, #5
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	ebb0 0008 	subs.w	r0, r0, r8
 800250e:	eb61 0109 	sbc.w	r1, r1, r9
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	018b      	lsls	r3, r1, #6
 800251c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002520:	0182      	lsls	r2, r0, #6
 8002522:	1a12      	subs	r2, r2, r0
 8002524:	eb63 0301 	sbc.w	r3, r3, r1
 8002528:	f04f 0000 	mov.w	r0, #0
 800252c:	f04f 0100 	mov.w	r1, #0
 8002530:	00d9      	lsls	r1, r3, #3
 8002532:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002536:	00d0      	lsls	r0, r2, #3
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	eb12 0208 	adds.w	r2, r2, r8
 8002540:	eb43 0309 	adc.w	r3, r3, r9
 8002544:	f04f 0000 	mov.w	r0, #0
 8002548:	f04f 0100 	mov.w	r1, #0
 800254c:	0259      	lsls	r1, r3, #9
 800254e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002552:	0250      	lsls	r0, r2, #9
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	461a      	mov	r2, r3
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	f7fd fe84 	bl	8000270 <__aeabi_uldivmod>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4613      	mov	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e04a      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002572:	4b31      	ldr	r3, [pc, #196]	; (8002638 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	099b      	lsrs	r3, r3, #6
 8002578:	461a      	mov	r2, r3
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002582:	f04f 0100 	mov.w	r1, #0
 8002586:	ea02 0400 	and.w	r4, r2, r0
 800258a:	ea03 0501 	and.w	r5, r3, r1
 800258e:	4620      	mov	r0, r4
 8002590:	4629      	mov	r1, r5
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	014b      	lsls	r3, r1, #5
 800259c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025a0:	0142      	lsls	r2, r0, #5
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	1b00      	subs	r0, r0, r4
 80025a8:	eb61 0105 	sbc.w	r1, r1, r5
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	018b      	lsls	r3, r1, #6
 80025b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025ba:	0182      	lsls	r2, r0, #6
 80025bc:	1a12      	subs	r2, r2, r0
 80025be:	eb63 0301 	sbc.w	r3, r3, r1
 80025c2:	f04f 0000 	mov.w	r0, #0
 80025c6:	f04f 0100 	mov.w	r1, #0
 80025ca:	00d9      	lsls	r1, r3, #3
 80025cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025d0:	00d0      	lsls	r0, r2, #3
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	1912      	adds	r2, r2, r4
 80025d8:	eb45 0303 	adc.w	r3, r5, r3
 80025dc:	f04f 0000 	mov.w	r0, #0
 80025e0:	f04f 0100 	mov.w	r1, #0
 80025e4:	0299      	lsls	r1, r3, #10
 80025e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80025ea:	0290      	lsls	r0, r2, #10
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	461a      	mov	r2, r3
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	f7fd fe38 	bl	8000270 <__aeabi_uldivmod>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4613      	mov	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	0c1b      	lsrs	r3, r3, #16
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	3301      	adds	r3, #1
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002620:	60bb      	str	r3, [r7, #8]
      break;
 8002622:	e002      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002626:	60bb      	str	r3, [r7, #8]
      break;
 8002628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800262a:	68bb      	ldr	r3, [r7, #8]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	00f42400 	.word	0x00f42400
 8002640:	007a1200 	.word	0x007a1200

08002644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_RCC_GetHCLKFreq+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000008 	.word	0x20000008

0800265c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002660:	f7ff fff0 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 8002664:	4602      	mov	r2, r0
 8002666:	4b05      	ldr	r3, [pc, #20]	; (800267c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	0a9b      	lsrs	r3, r3, #10
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	4903      	ldr	r1, [pc, #12]	; (8002680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002672:	5ccb      	ldrb	r3, [r1, r3]
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002678:	4618      	mov	r0, r3
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40023800 	.word	0x40023800
 8002680:	08004a24 	.word	0x08004a24

08002684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002688:	f7ff ffdc 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 800268c:	4602      	mov	r2, r0
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	0b5b      	lsrs	r3, r3, #13
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	4903      	ldr	r1, [pc, #12]	; (80026a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800269a:	5ccb      	ldrb	r3, [r1, r3]
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40023800 	.word	0x40023800
 80026a8:	08004a24 	.word	0x08004a24

080026ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e07b      	b.n	80027b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d108      	bne.n	80026d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ce:	d009      	beq.n	80026e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
 80026d6:	e005      	b.n	80026e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fe fe46 	bl	8001390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800271a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002768:	ea42 0103 	orr.w	r1, r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	f003 0104 	and.w	r1, r3, #4
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	f003 0210 	and.w	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b088      	sub	sp, #32
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_SPI_Transmit+0x22>
 80027dc:	2302      	movs	r3, #2
 80027de:	e126      	b.n	8002a2e <HAL_SPI_Transmit+0x270>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027e8:	f7ff f808 	bl	80017fc <HAL_GetTick>
 80027ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d002      	beq.n	8002804 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027fe:	2302      	movs	r3, #2
 8002800:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002802:	e10b      	b.n	8002a1c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_SPI_Transmit+0x52>
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002814:	e102      	b.n	8002a1c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2203      	movs	r2, #3
 800281a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	88fa      	ldrh	r2, [r7, #6]
 800282e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	88fa      	ldrh	r2, [r7, #6]
 8002834:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800285c:	d10f      	bne.n	800287e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800286c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800287c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002888:	2b40      	cmp	r3, #64	; 0x40
 800288a:	d007      	beq.n	800289c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800289a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028a4:	d14b      	bne.n	800293e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_SPI_Transmit+0xf6>
 80028ae:	8afb      	ldrh	r3, [r7, #22]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d13e      	bne.n	8002932 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	881a      	ldrh	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	1c9a      	adds	r2, r3, #2
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028d8:	e02b      	b.n	8002932 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d112      	bne.n	800290e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	881a      	ldrh	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	1c9a      	adds	r2, r3, #2
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	86da      	strh	r2, [r3, #54]	; 0x36
 800290c:	e011      	b.n	8002932 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800290e:	f7fe ff75 	bl	80017fc <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d803      	bhi.n	8002926 <HAL_SPI_Transmit+0x168>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002924:	d102      	bne.n	800292c <HAL_SPI_Transmit+0x16e>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002930:	e074      	b.n	8002a1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1ce      	bne.n	80028da <HAL_SPI_Transmit+0x11c>
 800293c:	e04c      	b.n	80029d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <HAL_SPI_Transmit+0x18e>
 8002946:	8afb      	ldrh	r3, [r7, #22]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d140      	bne.n	80029ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	330c      	adds	r3, #12
 8002956:	7812      	ldrb	r2, [r2, #0]
 8002958:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002972:	e02c      	b.n	80029ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b02      	cmp	r3, #2
 8002980:	d113      	bne.n	80029aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	330c      	adds	r3, #12
 800298c:	7812      	ldrb	r2, [r2, #0]
 800298e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80029a8:	e011      	b.n	80029ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029aa:	f7fe ff27 	bl	80017fc <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d803      	bhi.n	80029c2 <HAL_SPI_Transmit+0x204>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029c0:	d102      	bne.n	80029c8 <HAL_SPI_Transmit+0x20a>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029cc:	e026      	b.n	8002a1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1cd      	bne.n	8002974 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	6839      	ldr	r1, [r7, #0]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fa63 	bl	8002ea8 <SPI_EndRxTxTransaction>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10a      	bne.n	8002a0c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	77fb      	strb	r3, [r7, #31]
 8002a18:	e000      	b.n	8002a1c <HAL_SPI_Transmit+0x25e>
  }

error:
 8002a1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3720      	adds	r7, #32
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b08c      	sub	sp, #48	; 0x30
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a44:	2301      	movs	r3, #1
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x26>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e18a      	b.n	8002d72 <HAL_SPI_TransmitReceive+0x33c>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a64:	f7fe feca 	bl	80017fc <HAL_GetTick>
 8002a68:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a7a:	887b      	ldrh	r3, [r7, #2]
 8002a7c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d00f      	beq.n	8002aa6 <HAL_SPI_TransmitReceive+0x70>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a8c:	d107      	bne.n	8002a9e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <HAL_SPI_TransmitReceive+0x68>
 8002a96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d003      	beq.n	8002aa6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002aa4:	e15b      	b.n	8002d5e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_SPI_TransmitReceive+0x82>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_SPI_TransmitReceive+0x82>
 8002ab2:	887b      	ldrh	r3, [r7, #2]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d103      	bne.n	8002ac0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002abe:	e14e      	b.n	8002d5e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d003      	beq.n	8002ad4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2205      	movs	r2, #5
 8002ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	887a      	ldrh	r2, [r7, #2]
 8002aea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	887a      	ldrh	r2, [r7, #2]
 8002af6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	887a      	ldrh	r2, [r7, #2]
 8002afc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	2b40      	cmp	r3, #64	; 0x40
 8002b16:	d007      	beq.n	8002b28 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b30:	d178      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_SPI_TransmitReceive+0x10a>
 8002b3a:	8b7b      	ldrh	r3, [r7, #26]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d166      	bne.n	8002c0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	881a      	ldrh	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	1c9a      	adds	r2, r3, #2
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b64:	e053      	b.n	8002c0e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d11b      	bne.n	8002bac <HAL_SPI_TransmitReceive+0x176>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <HAL_SPI_TransmitReceive+0x176>
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d113      	bne.n	8002bac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	881a      	ldrh	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	1c9a      	adds	r2, r3, #2
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d119      	bne.n	8002bee <HAL_SPI_TransmitReceive+0x1b8>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d014      	beq.n	8002bee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	b292      	uxth	r2, r2
 8002bd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	1c9a      	adds	r2, r3, #2
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bea:	2301      	movs	r3, #1
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bee:	f7fe fe05 	bl	80017fc <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d807      	bhi.n	8002c0e <HAL_SPI_TransmitReceive+0x1d8>
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c04:	d003      	beq.n	8002c0e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c0c:	e0a7      	b.n	8002d5e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1a6      	bne.n	8002b66 <HAL_SPI_TransmitReceive+0x130>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1a1      	bne.n	8002b66 <HAL_SPI_TransmitReceive+0x130>
 8002c22:	e07c      	b.n	8002d1e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_SPI_TransmitReceive+0x1fc>
 8002c2c:	8b7b      	ldrh	r3, [r7, #26]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d16b      	bne.n	8002d0a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	330c      	adds	r3, #12
 8002c3c:	7812      	ldrb	r2, [r2, #0]
 8002c3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c58:	e057      	b.n	8002d0a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d11c      	bne.n	8002ca2 <HAL_SPI_TransmitReceive+0x26c>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d017      	beq.n	8002ca2 <HAL_SPI_TransmitReceive+0x26c>
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d114      	bne.n	8002ca2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	330c      	adds	r3, #12
 8002c82:	7812      	ldrb	r2, [r2, #0]
 8002c84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d119      	bne.n	8002ce4 <HAL_SPI_TransmitReceive+0x2ae>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d014      	beq.n	8002ce4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ce4:	f7fe fd8a 	bl	80017fc <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d803      	bhi.n	8002cfc <HAL_SPI_TransmitReceive+0x2c6>
 8002cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cfa:	d102      	bne.n	8002d02 <HAL_SPI_TransmitReceive+0x2cc>
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d103      	bne.n	8002d0a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d08:	e029      	b.n	8002d5e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1a2      	bne.n	8002c5a <HAL_SPI_TransmitReceive+0x224>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d19d      	bne.n	8002c5a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f8c0 	bl	8002ea8 <SPI_EndRxTxTransaction>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d006      	beq.n	8002d3c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d3a:	e010      	b.n	8002d5e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10b      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	e000      	b.n	8002d5e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3730      	adds	r7, #48	; 0x30
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d88:	b2db      	uxtb	r3, r3
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002da8:	f7fe fd28 	bl	80017fc <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	4413      	add	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002db8:	f7fe fd20 	bl	80017fc <HAL_GetTick>
 8002dbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dbe:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	015b      	lsls	r3, r3, #5
 8002dc4:	0d1b      	lsrs	r3, r3, #20
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dce:	e054      	b.n	8002e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd6:	d050      	beq.n	8002e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002dd8:	f7fe fd10 	bl	80017fc <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d902      	bls.n	8002dee <SPI_WaitFlagStateUntilTimeout+0x56>
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d13d      	bne.n	8002e6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e06:	d111      	bne.n	8002e2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e10:	d004      	beq.n	8002e1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1a:	d107      	bne.n	8002e2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e34:	d10f      	bne.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e017      	b.n	8002e9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4013      	ands	r3, r2
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	bf0c      	ite	eq
 8002e8a:	2301      	moveq	r3, #1
 8002e8c:	2300      	movne	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d19b      	bne.n	8002dd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000008 	.word	0x20000008

08002ea8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <SPI_EndRxTxTransaction+0x7c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1b      	ldr	r2, [pc, #108]	; (8002f28 <SPI_EndRxTxTransaction+0x80>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0d5b      	lsrs	r3, r3, #21
 8002ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ec4:	fb02 f303 	mul.w	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ed2:	d112      	bne.n	8002efa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2200      	movs	r2, #0
 8002edc:	2180      	movs	r1, #128	; 0x80
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f7ff ff5a 	bl	8002d98 <SPI_WaitFlagStateUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d016      	beq.n	8002f18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	f043 0220 	orr.w	r2, r3, #32
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e00f      	b.n	8002f1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f10:	2b80      	cmp	r3, #128	; 0x80
 8002f12:	d0f2      	beq.n	8002efa <SPI_EndRxTxTransaction+0x52>
 8002f14:	e000      	b.n	8002f18 <SPI_EndRxTxTransaction+0x70>
        break;
 8002f16:	bf00      	nop
  }

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000008 	.word	0x20000008
 8002f28:	165e9f81 	.word	0x165e9f81

08002f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e03f      	b.n	8002fbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fe fb7a 	bl	800164c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	; 0x24
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f929 	bl	80031c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b08a      	sub	sp, #40	; 0x28
 8002fca:	af02      	add	r7, sp, #8
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d17c      	bne.n	80030e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HAL_UART_Transmit+0x2c>
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e075      	b.n	80030e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_UART_Transmit+0x3e>
 8003000:	2302      	movs	r3, #2
 8003002:	e06e      	b.n	80030e2 <HAL_UART_Transmit+0x11c>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2221      	movs	r2, #33	; 0x21
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800301a:	f7fe fbef 	bl	80017fc <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	88fa      	ldrh	r2, [r7, #6]
 8003024:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	88fa      	ldrh	r2, [r7, #6]
 800302a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003034:	d108      	bne.n	8003048 <HAL_UART_Transmit+0x82>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d104      	bne.n	8003048 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	e003      	b.n	8003050 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800304c:	2300      	movs	r3, #0
 800304e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003058:	e02a      	b.n	80030b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	2180      	movs	r1, #128	; 0x80
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f840 	bl	80030ea <UART_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e036      	b.n	80030e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10b      	bne.n	8003092 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003088:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	3302      	adds	r3, #2
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	e007      	b.n	80030a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	3301      	adds	r3, #1
 80030a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1cf      	bne.n	800305a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2140      	movs	r1, #64	; 0x40
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f810 	bl	80030ea <UART_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e006      	b.n	80030e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	e000      	b.n	80030e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
  }
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b090      	sub	sp, #64	; 0x40
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fa:	e050      	b.n	800319e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003102:	d04c      	beq.n	800319e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <UART_WaitOnFlagUntilTimeout+0x30>
 800310a:	f7fe fb77 	bl	80017fc <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003116:	429a      	cmp	r2, r3
 8003118:	d241      	bcs.n	800319e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	330c      	adds	r3, #12
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	e853 3f00 	ldrex	r3, [r3]
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	330c      	adds	r3, #12
 8003138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800313a:	637a      	str	r2, [r7, #52]	; 0x34
 800313c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003142:	e841 2300 	strex	r3, r2, [r1]
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e5      	bne.n	800311a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3314      	adds	r3, #20
 8003154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	e853 3f00 	ldrex	r3, [r3]
 800315c:	613b      	str	r3, [r7, #16]
   return(result);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	63bb      	str	r3, [r7, #56]	; 0x38
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3314      	adds	r3, #20
 800316c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800316e:	623a      	str	r2, [r7, #32]
 8003170:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	69f9      	ldr	r1, [r7, #28]
 8003174:	6a3a      	ldr	r2, [r7, #32]
 8003176:	e841 2300 	strex	r3, r2, [r1]
 800317a:	61bb      	str	r3, [r7, #24]
   return(result);
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e5      	bne.n	800314e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e00f      	b.n	80031be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4013      	ands	r3, r2
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	bf0c      	ite	eq
 80031ae:	2301      	moveq	r3, #1
 80031b0:	2300      	movne	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d09f      	beq.n	80030fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3740      	adds	r7, #64	; 0x40
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031cc:	b09f      	sub	sp, #124	; 0x7c
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031de:	68d9      	ldr	r1, [r3, #12]
 80031e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	ea40 0301 	orr.w	r3, r0, r1
 80031e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4313      	orrs	r3, r2
 8003200:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800320c:	f021 010c 	bic.w	r1, r1, #12
 8003210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003216:	430b      	orrs	r3, r1
 8003218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800321a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003226:	6999      	ldr	r1, [r3, #24]
 8003228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	ea40 0301 	orr.w	r3, r0, r1
 8003230:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4bc5      	ldr	r3, [pc, #788]	; (800354c <UART_SetConfig+0x384>)
 8003238:	429a      	cmp	r2, r3
 800323a:	d004      	beq.n	8003246 <UART_SetConfig+0x7e>
 800323c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4bc3      	ldr	r3, [pc, #780]	; (8003550 <UART_SetConfig+0x388>)
 8003242:	429a      	cmp	r2, r3
 8003244:	d103      	bne.n	800324e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003246:	f7ff fa1d 	bl	8002684 <HAL_RCC_GetPCLK2Freq>
 800324a:	6778      	str	r0, [r7, #116]	; 0x74
 800324c:	e002      	b.n	8003254 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800324e:	f7ff fa05 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 8003252:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325c:	f040 80b6 	bne.w	80033cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003262:	461c      	mov	r4, r3
 8003264:	f04f 0500 	mov.w	r5, #0
 8003268:	4622      	mov	r2, r4
 800326a:	462b      	mov	r3, r5
 800326c:	1891      	adds	r1, r2, r2
 800326e:	6439      	str	r1, [r7, #64]	; 0x40
 8003270:	415b      	adcs	r3, r3
 8003272:	647b      	str	r3, [r7, #68]	; 0x44
 8003274:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003278:	1912      	adds	r2, r2, r4
 800327a:	eb45 0303 	adc.w	r3, r5, r3
 800327e:	f04f 0000 	mov.w	r0, #0
 8003282:	f04f 0100 	mov.w	r1, #0
 8003286:	00d9      	lsls	r1, r3, #3
 8003288:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800328c:	00d0      	lsls	r0, r2, #3
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	1911      	adds	r1, r2, r4
 8003294:	6639      	str	r1, [r7, #96]	; 0x60
 8003296:	416b      	adcs	r3, r5
 8003298:	667b      	str	r3, [r7, #100]	; 0x64
 800329a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	461a      	mov	r2, r3
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	1891      	adds	r1, r2, r2
 80032a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80032a8:	415b      	adcs	r3, r3
 80032aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80032b4:	f7fc ffdc 	bl	8000270 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4ba5      	ldr	r3, [pc, #660]	; (8003554 <UART_SetConfig+0x38c>)
 80032be:	fba3 2302 	umull	r2, r3, r3, r2
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	011e      	lsls	r6, r3, #4
 80032c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c8:	461c      	mov	r4, r3
 80032ca:	f04f 0500 	mov.w	r5, #0
 80032ce:	4622      	mov	r2, r4
 80032d0:	462b      	mov	r3, r5
 80032d2:	1891      	adds	r1, r2, r2
 80032d4:	6339      	str	r1, [r7, #48]	; 0x30
 80032d6:	415b      	adcs	r3, r3
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
 80032da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032de:	1912      	adds	r2, r2, r4
 80032e0:	eb45 0303 	adc.w	r3, r5, r3
 80032e4:	f04f 0000 	mov.w	r0, #0
 80032e8:	f04f 0100 	mov.w	r1, #0
 80032ec:	00d9      	lsls	r1, r3, #3
 80032ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032f2:	00d0      	lsls	r0, r2, #3
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	1911      	adds	r1, r2, r4
 80032fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80032fc:	416b      	adcs	r3, r5
 80032fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	461a      	mov	r2, r3
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	1891      	adds	r1, r2, r2
 800330c:	62b9      	str	r1, [r7, #40]	; 0x28
 800330e:	415b      	adcs	r3, r3
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003312:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003316:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800331a:	f7fc ffa9 	bl	8000270 <__aeabi_uldivmod>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4b8c      	ldr	r3, [pc, #560]	; (8003554 <UART_SetConfig+0x38c>)
 8003324:	fba3 1302 	umull	r1, r3, r3, r2
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	2164      	movs	r1, #100	; 0x64
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	3332      	adds	r3, #50	; 0x32
 8003336:	4a87      	ldr	r2, [pc, #540]	; (8003554 <UART_SetConfig+0x38c>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003344:	441e      	add	r6, r3
 8003346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003348:	4618      	mov	r0, r3
 800334a:	f04f 0100 	mov.w	r1, #0
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	1894      	adds	r4, r2, r2
 8003354:	623c      	str	r4, [r7, #32]
 8003356:	415b      	adcs	r3, r3
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
 800335a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800335e:	1812      	adds	r2, r2, r0
 8003360:	eb41 0303 	adc.w	r3, r1, r3
 8003364:	f04f 0400 	mov.w	r4, #0
 8003368:	f04f 0500 	mov.w	r5, #0
 800336c:	00dd      	lsls	r5, r3, #3
 800336e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003372:	00d4      	lsls	r4, r2, #3
 8003374:	4622      	mov	r2, r4
 8003376:	462b      	mov	r3, r5
 8003378:	1814      	adds	r4, r2, r0
 800337a:	653c      	str	r4, [r7, #80]	; 0x50
 800337c:	414b      	adcs	r3, r1
 800337e:	657b      	str	r3, [r7, #84]	; 0x54
 8003380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	461a      	mov	r2, r3
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	1891      	adds	r1, r2, r2
 800338c:	61b9      	str	r1, [r7, #24]
 800338e:	415b      	adcs	r3, r3
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003396:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800339a:	f7fc ff69 	bl	8000270 <__aeabi_uldivmod>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4b6c      	ldr	r3, [pc, #432]	; (8003554 <UART_SetConfig+0x38c>)
 80033a4:	fba3 1302 	umull	r1, r3, r3, r2
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	2164      	movs	r1, #100	; 0x64
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	3332      	adds	r3, #50	; 0x32
 80033b6:	4a67      	ldr	r2, [pc, #412]	; (8003554 <UART_SetConfig+0x38c>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	f003 0207 	and.w	r2, r3, #7
 80033c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4432      	add	r2, r6
 80033c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033ca:	e0b9      	b.n	8003540 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ce:	461c      	mov	r4, r3
 80033d0:	f04f 0500 	mov.w	r5, #0
 80033d4:	4622      	mov	r2, r4
 80033d6:	462b      	mov	r3, r5
 80033d8:	1891      	adds	r1, r2, r2
 80033da:	6139      	str	r1, [r7, #16]
 80033dc:	415b      	adcs	r3, r3
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033e4:	1912      	adds	r2, r2, r4
 80033e6:	eb45 0303 	adc.w	r3, r5, r3
 80033ea:	f04f 0000 	mov.w	r0, #0
 80033ee:	f04f 0100 	mov.w	r1, #0
 80033f2:	00d9      	lsls	r1, r3, #3
 80033f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033f8:	00d0      	lsls	r0, r2, #3
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	eb12 0804 	adds.w	r8, r2, r4
 8003402:	eb43 0905 	adc.w	r9, r3, r5
 8003406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4618      	mov	r0, r3
 800340c:	f04f 0100 	mov.w	r1, #0
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	008b      	lsls	r3, r1, #2
 800341a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800341e:	0082      	lsls	r2, r0, #2
 8003420:	4640      	mov	r0, r8
 8003422:	4649      	mov	r1, r9
 8003424:	f7fc ff24 	bl	8000270 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4b49      	ldr	r3, [pc, #292]	; (8003554 <UART_SetConfig+0x38c>)
 800342e:	fba3 2302 	umull	r2, r3, r3, r2
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	011e      	lsls	r6, r3, #4
 8003436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003438:	4618      	mov	r0, r3
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	1894      	adds	r4, r2, r2
 8003444:	60bc      	str	r4, [r7, #8]
 8003446:	415b      	adcs	r3, r3
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800344e:	1812      	adds	r2, r2, r0
 8003450:	eb41 0303 	adc.w	r3, r1, r3
 8003454:	f04f 0400 	mov.w	r4, #0
 8003458:	f04f 0500 	mov.w	r5, #0
 800345c:	00dd      	lsls	r5, r3, #3
 800345e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003462:	00d4      	lsls	r4, r2, #3
 8003464:	4622      	mov	r2, r4
 8003466:	462b      	mov	r3, r5
 8003468:	1814      	adds	r4, r2, r0
 800346a:	64bc      	str	r4, [r7, #72]	; 0x48
 800346c:	414b      	adcs	r3, r1
 800346e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4618      	mov	r0, r3
 8003476:	f04f 0100 	mov.w	r1, #0
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	008b      	lsls	r3, r1, #2
 8003484:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003488:	0082      	lsls	r2, r0, #2
 800348a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800348e:	f7fc feef 	bl	8000270 <__aeabi_uldivmod>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4b2f      	ldr	r3, [pc, #188]	; (8003554 <UART_SetConfig+0x38c>)
 8003498:	fba3 1302 	umull	r1, r3, r3, r2
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	2164      	movs	r1, #100	; 0x64
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	3332      	adds	r3, #50	; 0x32
 80034aa:	4a2a      	ldr	r2, [pc, #168]	; (8003554 <UART_SetConfig+0x38c>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b6:	441e      	add	r6, r3
 80034b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ba:	4618      	mov	r0, r3
 80034bc:	f04f 0100 	mov.w	r1, #0
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	1894      	adds	r4, r2, r2
 80034c6:	603c      	str	r4, [r7, #0]
 80034c8:	415b      	adcs	r3, r3
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034d0:	1812      	adds	r2, r2, r0
 80034d2:	eb41 0303 	adc.w	r3, r1, r3
 80034d6:	f04f 0400 	mov.w	r4, #0
 80034da:	f04f 0500 	mov.w	r5, #0
 80034de:	00dd      	lsls	r5, r3, #3
 80034e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034e4:	00d4      	lsls	r4, r2, #3
 80034e6:	4622      	mov	r2, r4
 80034e8:	462b      	mov	r3, r5
 80034ea:	eb12 0a00 	adds.w	sl, r2, r0
 80034ee:	eb43 0b01 	adc.w	fp, r3, r1
 80034f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f04f 0100 	mov.w	r1, #0
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	008b      	lsls	r3, r1, #2
 8003506:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800350a:	0082      	lsls	r2, r0, #2
 800350c:	4650      	mov	r0, sl
 800350e:	4659      	mov	r1, fp
 8003510:	f7fc feae 	bl	8000270 <__aeabi_uldivmod>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <UART_SetConfig+0x38c>)
 800351a:	fba3 1302 	umull	r1, r3, r3, r2
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	2164      	movs	r1, #100	; 0x64
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	3332      	adds	r3, #50	; 0x32
 800352c:	4a09      	ldr	r2, [pc, #36]	; (8003554 <UART_SetConfig+0x38c>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	f003 020f 	and.w	r2, r3, #15
 8003538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4432      	add	r2, r6
 800353e:	609a      	str	r2, [r3, #8]
}
 8003540:	bf00      	nop
 8003542:	377c      	adds	r7, #124	; 0x7c
 8003544:	46bd      	mov	sp, r7
 8003546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800354a:	bf00      	nop
 800354c:	40011000 	.word	0x40011000
 8003550:	40011400 	.word	0x40011400
 8003554:	51eb851f 	.word	0x51eb851f

08003558 <__errno>:
 8003558:	4b01      	ldr	r3, [pc, #4]	; (8003560 <__errno+0x8>)
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000014 	.word	0x20000014

08003564 <__libc_init_array>:
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	4d0d      	ldr	r5, [pc, #52]	; (800359c <__libc_init_array+0x38>)
 8003568:	4c0d      	ldr	r4, [pc, #52]	; (80035a0 <__libc_init_array+0x3c>)
 800356a:	1b64      	subs	r4, r4, r5
 800356c:	10a4      	asrs	r4, r4, #2
 800356e:	2600      	movs	r6, #0
 8003570:	42a6      	cmp	r6, r4
 8003572:	d109      	bne.n	8003588 <__libc_init_array+0x24>
 8003574:	4d0b      	ldr	r5, [pc, #44]	; (80035a4 <__libc_init_array+0x40>)
 8003576:	4c0c      	ldr	r4, [pc, #48]	; (80035a8 <__libc_init_array+0x44>)
 8003578:	f001 f9be 	bl	80048f8 <_init>
 800357c:	1b64      	subs	r4, r4, r5
 800357e:	10a4      	asrs	r4, r4, #2
 8003580:	2600      	movs	r6, #0
 8003582:	42a6      	cmp	r6, r4
 8003584:	d105      	bne.n	8003592 <__libc_init_array+0x2e>
 8003586:	bd70      	pop	{r4, r5, r6, pc}
 8003588:	f855 3b04 	ldr.w	r3, [r5], #4
 800358c:	4798      	blx	r3
 800358e:	3601      	adds	r6, #1
 8003590:	e7ee      	b.n	8003570 <__libc_init_array+0xc>
 8003592:	f855 3b04 	ldr.w	r3, [r5], #4
 8003596:	4798      	blx	r3
 8003598:	3601      	adds	r6, #1
 800359a:	e7f2      	b.n	8003582 <__libc_init_array+0x1e>
 800359c:	08004acc 	.word	0x08004acc
 80035a0:	08004acc 	.word	0x08004acc
 80035a4:	08004acc 	.word	0x08004acc
 80035a8:	08004ad0 	.word	0x08004ad0

080035ac <memcpy>:
 80035ac:	440a      	add	r2, r1
 80035ae:	4291      	cmp	r1, r2
 80035b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80035b4:	d100      	bne.n	80035b8 <memcpy+0xc>
 80035b6:	4770      	bx	lr
 80035b8:	b510      	push	{r4, lr}
 80035ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035c2:	4291      	cmp	r1, r2
 80035c4:	d1f9      	bne.n	80035ba <memcpy+0xe>
 80035c6:	bd10      	pop	{r4, pc}

080035c8 <memset>:
 80035c8:	4402      	add	r2, r0
 80035ca:	4603      	mov	r3, r0
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d100      	bne.n	80035d2 <memset+0xa>
 80035d0:	4770      	bx	lr
 80035d2:	f803 1b01 	strb.w	r1, [r3], #1
 80035d6:	e7f9      	b.n	80035cc <memset+0x4>

080035d8 <iprintf>:
 80035d8:	b40f      	push	{r0, r1, r2, r3}
 80035da:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <iprintf+0x2c>)
 80035dc:	b513      	push	{r0, r1, r4, lr}
 80035de:	681c      	ldr	r4, [r3, #0]
 80035e0:	b124      	cbz	r4, 80035ec <iprintf+0x14>
 80035e2:	69a3      	ldr	r3, [r4, #24]
 80035e4:	b913      	cbnz	r3, 80035ec <iprintf+0x14>
 80035e6:	4620      	mov	r0, r4
 80035e8:	f000 fa7e 	bl	8003ae8 <__sinit>
 80035ec:	ab05      	add	r3, sp, #20
 80035ee:	9a04      	ldr	r2, [sp, #16]
 80035f0:	68a1      	ldr	r1, [r4, #8]
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	4620      	mov	r0, r4
 80035f6:	f000 fdab 	bl	8004150 <_vfiprintf_r>
 80035fa:	b002      	add	sp, #8
 80035fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003600:	b004      	add	sp, #16
 8003602:	4770      	bx	lr
 8003604:	20000014 	.word	0x20000014

08003608 <_puts_r>:
 8003608:	b570      	push	{r4, r5, r6, lr}
 800360a:	460e      	mov	r6, r1
 800360c:	4605      	mov	r5, r0
 800360e:	b118      	cbz	r0, 8003618 <_puts_r+0x10>
 8003610:	6983      	ldr	r3, [r0, #24]
 8003612:	b90b      	cbnz	r3, 8003618 <_puts_r+0x10>
 8003614:	f000 fa68 	bl	8003ae8 <__sinit>
 8003618:	69ab      	ldr	r3, [r5, #24]
 800361a:	68ac      	ldr	r4, [r5, #8]
 800361c:	b913      	cbnz	r3, 8003624 <_puts_r+0x1c>
 800361e:	4628      	mov	r0, r5
 8003620:	f000 fa62 	bl	8003ae8 <__sinit>
 8003624:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <_puts_r+0xd0>)
 8003626:	429c      	cmp	r4, r3
 8003628:	d120      	bne.n	800366c <_puts_r+0x64>
 800362a:	686c      	ldr	r4, [r5, #4]
 800362c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800362e:	07db      	lsls	r3, r3, #31
 8003630:	d405      	bmi.n	800363e <_puts_r+0x36>
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	0598      	lsls	r0, r3, #22
 8003636:	d402      	bmi.n	800363e <_puts_r+0x36>
 8003638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800363a:	f000 faf3 	bl	8003c24 <__retarget_lock_acquire_recursive>
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	0719      	lsls	r1, r3, #28
 8003642:	d51d      	bpl.n	8003680 <_puts_r+0x78>
 8003644:	6923      	ldr	r3, [r4, #16]
 8003646:	b1db      	cbz	r3, 8003680 <_puts_r+0x78>
 8003648:	3e01      	subs	r6, #1
 800364a:	68a3      	ldr	r3, [r4, #8]
 800364c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003650:	3b01      	subs	r3, #1
 8003652:	60a3      	str	r3, [r4, #8]
 8003654:	bb39      	cbnz	r1, 80036a6 <_puts_r+0x9e>
 8003656:	2b00      	cmp	r3, #0
 8003658:	da38      	bge.n	80036cc <_puts_r+0xc4>
 800365a:	4622      	mov	r2, r4
 800365c:	210a      	movs	r1, #10
 800365e:	4628      	mov	r0, r5
 8003660:	f000 f868 	bl	8003734 <__swbuf_r>
 8003664:	3001      	adds	r0, #1
 8003666:	d011      	beq.n	800368c <_puts_r+0x84>
 8003668:	250a      	movs	r5, #10
 800366a:	e011      	b.n	8003690 <_puts_r+0x88>
 800366c:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <_puts_r+0xd4>)
 800366e:	429c      	cmp	r4, r3
 8003670:	d101      	bne.n	8003676 <_puts_r+0x6e>
 8003672:	68ac      	ldr	r4, [r5, #8]
 8003674:	e7da      	b.n	800362c <_puts_r+0x24>
 8003676:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <_puts_r+0xd8>)
 8003678:	429c      	cmp	r4, r3
 800367a:	bf08      	it	eq
 800367c:	68ec      	ldreq	r4, [r5, #12]
 800367e:	e7d5      	b.n	800362c <_puts_r+0x24>
 8003680:	4621      	mov	r1, r4
 8003682:	4628      	mov	r0, r5
 8003684:	f000 f8a8 	bl	80037d8 <__swsetup_r>
 8003688:	2800      	cmp	r0, #0
 800368a:	d0dd      	beq.n	8003648 <_puts_r+0x40>
 800368c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003690:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003692:	07da      	lsls	r2, r3, #31
 8003694:	d405      	bmi.n	80036a2 <_puts_r+0x9a>
 8003696:	89a3      	ldrh	r3, [r4, #12]
 8003698:	059b      	lsls	r3, r3, #22
 800369a:	d402      	bmi.n	80036a2 <_puts_r+0x9a>
 800369c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800369e:	f000 fac2 	bl	8003c26 <__retarget_lock_release_recursive>
 80036a2:	4628      	mov	r0, r5
 80036a4:	bd70      	pop	{r4, r5, r6, pc}
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	da04      	bge.n	80036b4 <_puts_r+0xac>
 80036aa:	69a2      	ldr	r2, [r4, #24]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	dc06      	bgt.n	80036be <_puts_r+0xb6>
 80036b0:	290a      	cmp	r1, #10
 80036b2:	d004      	beq.n	80036be <_puts_r+0xb6>
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	6022      	str	r2, [r4, #0]
 80036ba:	7019      	strb	r1, [r3, #0]
 80036bc:	e7c5      	b.n	800364a <_puts_r+0x42>
 80036be:	4622      	mov	r2, r4
 80036c0:	4628      	mov	r0, r5
 80036c2:	f000 f837 	bl	8003734 <__swbuf_r>
 80036c6:	3001      	adds	r0, #1
 80036c8:	d1bf      	bne.n	800364a <_puts_r+0x42>
 80036ca:	e7df      	b.n	800368c <_puts_r+0x84>
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	250a      	movs	r5, #10
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	6022      	str	r2, [r4, #0]
 80036d4:	701d      	strb	r5, [r3, #0]
 80036d6:	e7db      	b.n	8003690 <_puts_r+0x88>
 80036d8:	08004a50 	.word	0x08004a50
 80036dc:	08004a70 	.word	0x08004a70
 80036e0:	08004a30 	.word	0x08004a30

080036e4 <puts>:
 80036e4:	4b02      	ldr	r3, [pc, #8]	; (80036f0 <puts+0xc>)
 80036e6:	4601      	mov	r1, r0
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	f7ff bf8d 	b.w	8003608 <_puts_r>
 80036ee:	bf00      	nop
 80036f0:	20000014 	.word	0x20000014

080036f4 <siprintf>:
 80036f4:	b40e      	push	{r1, r2, r3}
 80036f6:	b500      	push	{lr}
 80036f8:	b09c      	sub	sp, #112	; 0x70
 80036fa:	ab1d      	add	r3, sp, #116	; 0x74
 80036fc:	9002      	str	r0, [sp, #8]
 80036fe:	9006      	str	r0, [sp, #24]
 8003700:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003704:	4809      	ldr	r0, [pc, #36]	; (800372c <siprintf+0x38>)
 8003706:	9107      	str	r1, [sp, #28]
 8003708:	9104      	str	r1, [sp, #16]
 800370a:	4909      	ldr	r1, [pc, #36]	; (8003730 <siprintf+0x3c>)
 800370c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003710:	9105      	str	r1, [sp, #20]
 8003712:	6800      	ldr	r0, [r0, #0]
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	a902      	add	r1, sp, #8
 8003718:	f000 fbf0 	bl	8003efc <_svfiprintf_r>
 800371c:	9b02      	ldr	r3, [sp, #8]
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	b01c      	add	sp, #112	; 0x70
 8003724:	f85d eb04 	ldr.w	lr, [sp], #4
 8003728:	b003      	add	sp, #12
 800372a:	4770      	bx	lr
 800372c:	20000014 	.word	0x20000014
 8003730:	ffff0208 	.word	0xffff0208

08003734 <__swbuf_r>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	460e      	mov	r6, r1
 8003738:	4614      	mov	r4, r2
 800373a:	4605      	mov	r5, r0
 800373c:	b118      	cbz	r0, 8003746 <__swbuf_r+0x12>
 800373e:	6983      	ldr	r3, [r0, #24]
 8003740:	b90b      	cbnz	r3, 8003746 <__swbuf_r+0x12>
 8003742:	f000 f9d1 	bl	8003ae8 <__sinit>
 8003746:	4b21      	ldr	r3, [pc, #132]	; (80037cc <__swbuf_r+0x98>)
 8003748:	429c      	cmp	r4, r3
 800374a:	d12b      	bne.n	80037a4 <__swbuf_r+0x70>
 800374c:	686c      	ldr	r4, [r5, #4]
 800374e:	69a3      	ldr	r3, [r4, #24]
 8003750:	60a3      	str	r3, [r4, #8]
 8003752:	89a3      	ldrh	r3, [r4, #12]
 8003754:	071a      	lsls	r2, r3, #28
 8003756:	d52f      	bpl.n	80037b8 <__swbuf_r+0x84>
 8003758:	6923      	ldr	r3, [r4, #16]
 800375a:	b36b      	cbz	r3, 80037b8 <__swbuf_r+0x84>
 800375c:	6923      	ldr	r3, [r4, #16]
 800375e:	6820      	ldr	r0, [r4, #0]
 8003760:	1ac0      	subs	r0, r0, r3
 8003762:	6963      	ldr	r3, [r4, #20]
 8003764:	b2f6      	uxtb	r6, r6
 8003766:	4283      	cmp	r3, r0
 8003768:	4637      	mov	r7, r6
 800376a:	dc04      	bgt.n	8003776 <__swbuf_r+0x42>
 800376c:	4621      	mov	r1, r4
 800376e:	4628      	mov	r0, r5
 8003770:	f000 f926 	bl	80039c0 <_fflush_r>
 8003774:	bb30      	cbnz	r0, 80037c4 <__swbuf_r+0x90>
 8003776:	68a3      	ldr	r3, [r4, #8]
 8003778:	3b01      	subs	r3, #1
 800377a:	60a3      	str	r3, [r4, #8]
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	6022      	str	r2, [r4, #0]
 8003782:	701e      	strb	r6, [r3, #0]
 8003784:	6963      	ldr	r3, [r4, #20]
 8003786:	3001      	adds	r0, #1
 8003788:	4283      	cmp	r3, r0
 800378a:	d004      	beq.n	8003796 <__swbuf_r+0x62>
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	07db      	lsls	r3, r3, #31
 8003790:	d506      	bpl.n	80037a0 <__swbuf_r+0x6c>
 8003792:	2e0a      	cmp	r6, #10
 8003794:	d104      	bne.n	80037a0 <__swbuf_r+0x6c>
 8003796:	4621      	mov	r1, r4
 8003798:	4628      	mov	r0, r5
 800379a:	f000 f911 	bl	80039c0 <_fflush_r>
 800379e:	b988      	cbnz	r0, 80037c4 <__swbuf_r+0x90>
 80037a0:	4638      	mov	r0, r7
 80037a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <__swbuf_r+0x9c>)
 80037a6:	429c      	cmp	r4, r3
 80037a8:	d101      	bne.n	80037ae <__swbuf_r+0x7a>
 80037aa:	68ac      	ldr	r4, [r5, #8]
 80037ac:	e7cf      	b.n	800374e <__swbuf_r+0x1a>
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <__swbuf_r+0xa0>)
 80037b0:	429c      	cmp	r4, r3
 80037b2:	bf08      	it	eq
 80037b4:	68ec      	ldreq	r4, [r5, #12]
 80037b6:	e7ca      	b.n	800374e <__swbuf_r+0x1a>
 80037b8:	4621      	mov	r1, r4
 80037ba:	4628      	mov	r0, r5
 80037bc:	f000 f80c 	bl	80037d8 <__swsetup_r>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	d0cb      	beq.n	800375c <__swbuf_r+0x28>
 80037c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80037c8:	e7ea      	b.n	80037a0 <__swbuf_r+0x6c>
 80037ca:	bf00      	nop
 80037cc:	08004a50 	.word	0x08004a50
 80037d0:	08004a70 	.word	0x08004a70
 80037d4:	08004a30 	.word	0x08004a30

080037d8 <__swsetup_r>:
 80037d8:	4b32      	ldr	r3, [pc, #200]	; (80038a4 <__swsetup_r+0xcc>)
 80037da:	b570      	push	{r4, r5, r6, lr}
 80037dc:	681d      	ldr	r5, [r3, #0]
 80037de:	4606      	mov	r6, r0
 80037e0:	460c      	mov	r4, r1
 80037e2:	b125      	cbz	r5, 80037ee <__swsetup_r+0x16>
 80037e4:	69ab      	ldr	r3, [r5, #24]
 80037e6:	b913      	cbnz	r3, 80037ee <__swsetup_r+0x16>
 80037e8:	4628      	mov	r0, r5
 80037ea:	f000 f97d 	bl	8003ae8 <__sinit>
 80037ee:	4b2e      	ldr	r3, [pc, #184]	; (80038a8 <__swsetup_r+0xd0>)
 80037f0:	429c      	cmp	r4, r3
 80037f2:	d10f      	bne.n	8003814 <__swsetup_r+0x3c>
 80037f4:	686c      	ldr	r4, [r5, #4]
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037fc:	0719      	lsls	r1, r3, #28
 80037fe:	d42c      	bmi.n	800385a <__swsetup_r+0x82>
 8003800:	06dd      	lsls	r5, r3, #27
 8003802:	d411      	bmi.n	8003828 <__swsetup_r+0x50>
 8003804:	2309      	movs	r3, #9
 8003806:	6033      	str	r3, [r6, #0]
 8003808:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800380c:	81a3      	strh	r3, [r4, #12]
 800380e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003812:	e03e      	b.n	8003892 <__swsetup_r+0xba>
 8003814:	4b25      	ldr	r3, [pc, #148]	; (80038ac <__swsetup_r+0xd4>)
 8003816:	429c      	cmp	r4, r3
 8003818:	d101      	bne.n	800381e <__swsetup_r+0x46>
 800381a:	68ac      	ldr	r4, [r5, #8]
 800381c:	e7eb      	b.n	80037f6 <__swsetup_r+0x1e>
 800381e:	4b24      	ldr	r3, [pc, #144]	; (80038b0 <__swsetup_r+0xd8>)
 8003820:	429c      	cmp	r4, r3
 8003822:	bf08      	it	eq
 8003824:	68ec      	ldreq	r4, [r5, #12]
 8003826:	e7e6      	b.n	80037f6 <__swsetup_r+0x1e>
 8003828:	0758      	lsls	r0, r3, #29
 800382a:	d512      	bpl.n	8003852 <__swsetup_r+0x7a>
 800382c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800382e:	b141      	cbz	r1, 8003842 <__swsetup_r+0x6a>
 8003830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003834:	4299      	cmp	r1, r3
 8003836:	d002      	beq.n	800383e <__swsetup_r+0x66>
 8003838:	4630      	mov	r0, r6
 800383a:	f000 fa59 	bl	8003cf0 <_free_r>
 800383e:	2300      	movs	r3, #0
 8003840:	6363      	str	r3, [r4, #52]	; 0x34
 8003842:	89a3      	ldrh	r3, [r4, #12]
 8003844:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003848:	81a3      	strh	r3, [r4, #12]
 800384a:	2300      	movs	r3, #0
 800384c:	6063      	str	r3, [r4, #4]
 800384e:	6923      	ldr	r3, [r4, #16]
 8003850:	6023      	str	r3, [r4, #0]
 8003852:	89a3      	ldrh	r3, [r4, #12]
 8003854:	f043 0308 	orr.w	r3, r3, #8
 8003858:	81a3      	strh	r3, [r4, #12]
 800385a:	6923      	ldr	r3, [r4, #16]
 800385c:	b94b      	cbnz	r3, 8003872 <__swsetup_r+0x9a>
 800385e:	89a3      	ldrh	r3, [r4, #12]
 8003860:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003868:	d003      	beq.n	8003872 <__swsetup_r+0x9a>
 800386a:	4621      	mov	r1, r4
 800386c:	4630      	mov	r0, r6
 800386e:	f000 f9ff 	bl	8003c70 <__smakebuf_r>
 8003872:	89a0      	ldrh	r0, [r4, #12]
 8003874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003878:	f010 0301 	ands.w	r3, r0, #1
 800387c:	d00a      	beq.n	8003894 <__swsetup_r+0xbc>
 800387e:	2300      	movs	r3, #0
 8003880:	60a3      	str	r3, [r4, #8]
 8003882:	6963      	ldr	r3, [r4, #20]
 8003884:	425b      	negs	r3, r3
 8003886:	61a3      	str	r3, [r4, #24]
 8003888:	6923      	ldr	r3, [r4, #16]
 800388a:	b943      	cbnz	r3, 800389e <__swsetup_r+0xc6>
 800388c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003890:	d1ba      	bne.n	8003808 <__swsetup_r+0x30>
 8003892:	bd70      	pop	{r4, r5, r6, pc}
 8003894:	0781      	lsls	r1, r0, #30
 8003896:	bf58      	it	pl
 8003898:	6963      	ldrpl	r3, [r4, #20]
 800389a:	60a3      	str	r3, [r4, #8]
 800389c:	e7f4      	b.n	8003888 <__swsetup_r+0xb0>
 800389e:	2000      	movs	r0, #0
 80038a0:	e7f7      	b.n	8003892 <__swsetup_r+0xba>
 80038a2:	bf00      	nop
 80038a4:	20000014 	.word	0x20000014
 80038a8:	08004a50 	.word	0x08004a50
 80038ac:	08004a70 	.word	0x08004a70
 80038b0:	08004a30 	.word	0x08004a30

080038b4 <__sflush_r>:
 80038b4:	898a      	ldrh	r2, [r1, #12]
 80038b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ba:	4605      	mov	r5, r0
 80038bc:	0710      	lsls	r0, r2, #28
 80038be:	460c      	mov	r4, r1
 80038c0:	d458      	bmi.n	8003974 <__sflush_r+0xc0>
 80038c2:	684b      	ldr	r3, [r1, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	dc05      	bgt.n	80038d4 <__sflush_r+0x20>
 80038c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	dc02      	bgt.n	80038d4 <__sflush_r+0x20>
 80038ce:	2000      	movs	r0, #0
 80038d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038d6:	2e00      	cmp	r6, #0
 80038d8:	d0f9      	beq.n	80038ce <__sflush_r+0x1a>
 80038da:	2300      	movs	r3, #0
 80038dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038e0:	682f      	ldr	r7, [r5, #0]
 80038e2:	602b      	str	r3, [r5, #0]
 80038e4:	d032      	beq.n	800394c <__sflush_r+0x98>
 80038e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038e8:	89a3      	ldrh	r3, [r4, #12]
 80038ea:	075a      	lsls	r2, r3, #29
 80038ec:	d505      	bpl.n	80038fa <__sflush_r+0x46>
 80038ee:	6863      	ldr	r3, [r4, #4]
 80038f0:	1ac0      	subs	r0, r0, r3
 80038f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038f4:	b10b      	cbz	r3, 80038fa <__sflush_r+0x46>
 80038f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038f8:	1ac0      	subs	r0, r0, r3
 80038fa:	2300      	movs	r3, #0
 80038fc:	4602      	mov	r2, r0
 80038fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003900:	6a21      	ldr	r1, [r4, #32]
 8003902:	4628      	mov	r0, r5
 8003904:	47b0      	blx	r6
 8003906:	1c43      	adds	r3, r0, #1
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	d106      	bne.n	800391a <__sflush_r+0x66>
 800390c:	6829      	ldr	r1, [r5, #0]
 800390e:	291d      	cmp	r1, #29
 8003910:	d82c      	bhi.n	800396c <__sflush_r+0xb8>
 8003912:	4a2a      	ldr	r2, [pc, #168]	; (80039bc <__sflush_r+0x108>)
 8003914:	40ca      	lsrs	r2, r1
 8003916:	07d6      	lsls	r6, r2, #31
 8003918:	d528      	bpl.n	800396c <__sflush_r+0xb8>
 800391a:	2200      	movs	r2, #0
 800391c:	6062      	str	r2, [r4, #4]
 800391e:	04d9      	lsls	r1, r3, #19
 8003920:	6922      	ldr	r2, [r4, #16]
 8003922:	6022      	str	r2, [r4, #0]
 8003924:	d504      	bpl.n	8003930 <__sflush_r+0x7c>
 8003926:	1c42      	adds	r2, r0, #1
 8003928:	d101      	bne.n	800392e <__sflush_r+0x7a>
 800392a:	682b      	ldr	r3, [r5, #0]
 800392c:	b903      	cbnz	r3, 8003930 <__sflush_r+0x7c>
 800392e:	6560      	str	r0, [r4, #84]	; 0x54
 8003930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003932:	602f      	str	r7, [r5, #0]
 8003934:	2900      	cmp	r1, #0
 8003936:	d0ca      	beq.n	80038ce <__sflush_r+0x1a>
 8003938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800393c:	4299      	cmp	r1, r3
 800393e:	d002      	beq.n	8003946 <__sflush_r+0x92>
 8003940:	4628      	mov	r0, r5
 8003942:	f000 f9d5 	bl	8003cf0 <_free_r>
 8003946:	2000      	movs	r0, #0
 8003948:	6360      	str	r0, [r4, #52]	; 0x34
 800394a:	e7c1      	b.n	80038d0 <__sflush_r+0x1c>
 800394c:	6a21      	ldr	r1, [r4, #32]
 800394e:	2301      	movs	r3, #1
 8003950:	4628      	mov	r0, r5
 8003952:	47b0      	blx	r6
 8003954:	1c41      	adds	r1, r0, #1
 8003956:	d1c7      	bne.n	80038e8 <__sflush_r+0x34>
 8003958:	682b      	ldr	r3, [r5, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0c4      	beq.n	80038e8 <__sflush_r+0x34>
 800395e:	2b1d      	cmp	r3, #29
 8003960:	d001      	beq.n	8003966 <__sflush_r+0xb2>
 8003962:	2b16      	cmp	r3, #22
 8003964:	d101      	bne.n	800396a <__sflush_r+0xb6>
 8003966:	602f      	str	r7, [r5, #0]
 8003968:	e7b1      	b.n	80038ce <__sflush_r+0x1a>
 800396a:	89a3      	ldrh	r3, [r4, #12]
 800396c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003970:	81a3      	strh	r3, [r4, #12]
 8003972:	e7ad      	b.n	80038d0 <__sflush_r+0x1c>
 8003974:	690f      	ldr	r7, [r1, #16]
 8003976:	2f00      	cmp	r7, #0
 8003978:	d0a9      	beq.n	80038ce <__sflush_r+0x1a>
 800397a:	0793      	lsls	r3, r2, #30
 800397c:	680e      	ldr	r6, [r1, #0]
 800397e:	bf08      	it	eq
 8003980:	694b      	ldreq	r3, [r1, #20]
 8003982:	600f      	str	r7, [r1, #0]
 8003984:	bf18      	it	ne
 8003986:	2300      	movne	r3, #0
 8003988:	eba6 0807 	sub.w	r8, r6, r7
 800398c:	608b      	str	r3, [r1, #8]
 800398e:	f1b8 0f00 	cmp.w	r8, #0
 8003992:	dd9c      	ble.n	80038ce <__sflush_r+0x1a>
 8003994:	6a21      	ldr	r1, [r4, #32]
 8003996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003998:	4643      	mov	r3, r8
 800399a:	463a      	mov	r2, r7
 800399c:	4628      	mov	r0, r5
 800399e:	47b0      	blx	r6
 80039a0:	2800      	cmp	r0, #0
 80039a2:	dc06      	bgt.n	80039b2 <__sflush_r+0xfe>
 80039a4:	89a3      	ldrh	r3, [r4, #12]
 80039a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039aa:	81a3      	strh	r3, [r4, #12]
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039b0:	e78e      	b.n	80038d0 <__sflush_r+0x1c>
 80039b2:	4407      	add	r7, r0
 80039b4:	eba8 0800 	sub.w	r8, r8, r0
 80039b8:	e7e9      	b.n	800398e <__sflush_r+0xda>
 80039ba:	bf00      	nop
 80039bc:	20400001 	.word	0x20400001

080039c0 <_fflush_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	690b      	ldr	r3, [r1, #16]
 80039c4:	4605      	mov	r5, r0
 80039c6:	460c      	mov	r4, r1
 80039c8:	b913      	cbnz	r3, 80039d0 <_fflush_r+0x10>
 80039ca:	2500      	movs	r5, #0
 80039cc:	4628      	mov	r0, r5
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	b118      	cbz	r0, 80039da <_fflush_r+0x1a>
 80039d2:	6983      	ldr	r3, [r0, #24]
 80039d4:	b90b      	cbnz	r3, 80039da <_fflush_r+0x1a>
 80039d6:	f000 f887 	bl	8003ae8 <__sinit>
 80039da:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <_fflush_r+0x6c>)
 80039dc:	429c      	cmp	r4, r3
 80039de:	d11b      	bne.n	8003a18 <_fflush_r+0x58>
 80039e0:	686c      	ldr	r4, [r5, #4]
 80039e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0ef      	beq.n	80039ca <_fflush_r+0xa>
 80039ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80039ec:	07d0      	lsls	r0, r2, #31
 80039ee:	d404      	bmi.n	80039fa <_fflush_r+0x3a>
 80039f0:	0599      	lsls	r1, r3, #22
 80039f2:	d402      	bmi.n	80039fa <_fflush_r+0x3a>
 80039f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039f6:	f000 f915 	bl	8003c24 <__retarget_lock_acquire_recursive>
 80039fa:	4628      	mov	r0, r5
 80039fc:	4621      	mov	r1, r4
 80039fe:	f7ff ff59 	bl	80038b4 <__sflush_r>
 8003a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a04:	07da      	lsls	r2, r3, #31
 8003a06:	4605      	mov	r5, r0
 8003a08:	d4e0      	bmi.n	80039cc <_fflush_r+0xc>
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	059b      	lsls	r3, r3, #22
 8003a0e:	d4dd      	bmi.n	80039cc <_fflush_r+0xc>
 8003a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a12:	f000 f908 	bl	8003c26 <__retarget_lock_release_recursive>
 8003a16:	e7d9      	b.n	80039cc <_fflush_r+0xc>
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <_fflush_r+0x70>)
 8003a1a:	429c      	cmp	r4, r3
 8003a1c:	d101      	bne.n	8003a22 <_fflush_r+0x62>
 8003a1e:	68ac      	ldr	r4, [r5, #8]
 8003a20:	e7df      	b.n	80039e2 <_fflush_r+0x22>
 8003a22:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <_fflush_r+0x74>)
 8003a24:	429c      	cmp	r4, r3
 8003a26:	bf08      	it	eq
 8003a28:	68ec      	ldreq	r4, [r5, #12]
 8003a2a:	e7da      	b.n	80039e2 <_fflush_r+0x22>
 8003a2c:	08004a50 	.word	0x08004a50
 8003a30:	08004a70 	.word	0x08004a70
 8003a34:	08004a30 	.word	0x08004a30

08003a38 <std>:
 8003a38:	2300      	movs	r3, #0
 8003a3a:	b510      	push	{r4, lr}
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8003a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a46:	6083      	str	r3, [r0, #8]
 8003a48:	8181      	strh	r1, [r0, #12]
 8003a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8003a4c:	81c2      	strh	r2, [r0, #14]
 8003a4e:	6183      	str	r3, [r0, #24]
 8003a50:	4619      	mov	r1, r3
 8003a52:	2208      	movs	r2, #8
 8003a54:	305c      	adds	r0, #92	; 0x5c
 8003a56:	f7ff fdb7 	bl	80035c8 <memset>
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <std+0x38>)
 8003a5c:	6263      	str	r3, [r4, #36]	; 0x24
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <std+0x3c>)
 8003a60:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <std+0x40>)
 8003a64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <std+0x44>)
 8003a68:	6224      	str	r4, [r4, #32]
 8003a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8003a6c:	bd10      	pop	{r4, pc}
 8003a6e:	bf00      	nop
 8003a70:	080046f9 	.word	0x080046f9
 8003a74:	0800471b 	.word	0x0800471b
 8003a78:	08004753 	.word	0x08004753
 8003a7c:	08004777 	.word	0x08004777

08003a80 <_cleanup_r>:
 8003a80:	4901      	ldr	r1, [pc, #4]	; (8003a88 <_cleanup_r+0x8>)
 8003a82:	f000 b8af 	b.w	8003be4 <_fwalk_reent>
 8003a86:	bf00      	nop
 8003a88:	080039c1 	.word	0x080039c1

08003a8c <__sfmoreglue>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	1e4a      	subs	r2, r1, #1
 8003a90:	2568      	movs	r5, #104	; 0x68
 8003a92:	4355      	muls	r5, r2
 8003a94:	460e      	mov	r6, r1
 8003a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a9a:	f000 f979 	bl	8003d90 <_malloc_r>
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	b140      	cbz	r0, 8003ab4 <__sfmoreglue+0x28>
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	e9c0 1600 	strd	r1, r6, [r0]
 8003aa8:	300c      	adds	r0, #12
 8003aaa:	60a0      	str	r0, [r4, #8]
 8003aac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ab0:	f7ff fd8a 	bl	80035c8 <memset>
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}

08003ab8 <__sfp_lock_acquire>:
 8003ab8:	4801      	ldr	r0, [pc, #4]	; (8003ac0 <__sfp_lock_acquire+0x8>)
 8003aba:	f000 b8b3 	b.w	8003c24 <__retarget_lock_acquire_recursive>
 8003abe:	bf00      	nop
 8003ac0:	20000488 	.word	0x20000488

08003ac4 <__sfp_lock_release>:
 8003ac4:	4801      	ldr	r0, [pc, #4]	; (8003acc <__sfp_lock_release+0x8>)
 8003ac6:	f000 b8ae 	b.w	8003c26 <__retarget_lock_release_recursive>
 8003aca:	bf00      	nop
 8003acc:	20000488 	.word	0x20000488

08003ad0 <__sinit_lock_acquire>:
 8003ad0:	4801      	ldr	r0, [pc, #4]	; (8003ad8 <__sinit_lock_acquire+0x8>)
 8003ad2:	f000 b8a7 	b.w	8003c24 <__retarget_lock_acquire_recursive>
 8003ad6:	bf00      	nop
 8003ad8:	20000483 	.word	0x20000483

08003adc <__sinit_lock_release>:
 8003adc:	4801      	ldr	r0, [pc, #4]	; (8003ae4 <__sinit_lock_release+0x8>)
 8003ade:	f000 b8a2 	b.w	8003c26 <__retarget_lock_release_recursive>
 8003ae2:	bf00      	nop
 8003ae4:	20000483 	.word	0x20000483

08003ae8 <__sinit>:
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	4604      	mov	r4, r0
 8003aec:	f7ff fff0 	bl	8003ad0 <__sinit_lock_acquire>
 8003af0:	69a3      	ldr	r3, [r4, #24]
 8003af2:	b11b      	cbz	r3, 8003afc <__sinit+0x14>
 8003af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003af8:	f7ff bff0 	b.w	8003adc <__sinit_lock_release>
 8003afc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003b00:	6523      	str	r3, [r4, #80]	; 0x50
 8003b02:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <__sinit+0x68>)
 8003b04:	4a13      	ldr	r2, [pc, #76]	; (8003b54 <__sinit+0x6c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	62a2      	str	r2, [r4, #40]	; 0x28
 8003b0a:	42a3      	cmp	r3, r4
 8003b0c:	bf04      	itt	eq
 8003b0e:	2301      	moveq	r3, #1
 8003b10:	61a3      	streq	r3, [r4, #24]
 8003b12:	4620      	mov	r0, r4
 8003b14:	f000 f820 	bl	8003b58 <__sfp>
 8003b18:	6060      	str	r0, [r4, #4]
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f000 f81c 	bl	8003b58 <__sfp>
 8003b20:	60a0      	str	r0, [r4, #8]
 8003b22:	4620      	mov	r0, r4
 8003b24:	f000 f818 	bl	8003b58 <__sfp>
 8003b28:	2200      	movs	r2, #0
 8003b2a:	60e0      	str	r0, [r4, #12]
 8003b2c:	2104      	movs	r1, #4
 8003b2e:	6860      	ldr	r0, [r4, #4]
 8003b30:	f7ff ff82 	bl	8003a38 <std>
 8003b34:	68a0      	ldr	r0, [r4, #8]
 8003b36:	2201      	movs	r2, #1
 8003b38:	2109      	movs	r1, #9
 8003b3a:	f7ff ff7d 	bl	8003a38 <std>
 8003b3e:	68e0      	ldr	r0, [r4, #12]
 8003b40:	2202      	movs	r2, #2
 8003b42:	2112      	movs	r1, #18
 8003b44:	f7ff ff78 	bl	8003a38 <std>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	61a3      	str	r3, [r4, #24]
 8003b4c:	e7d2      	b.n	8003af4 <__sinit+0xc>
 8003b4e:	bf00      	nop
 8003b50:	08004a2c 	.word	0x08004a2c
 8003b54:	08003a81 	.word	0x08003a81

08003b58 <__sfp>:
 8003b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5a:	4607      	mov	r7, r0
 8003b5c:	f7ff ffac 	bl	8003ab8 <__sfp_lock_acquire>
 8003b60:	4b1e      	ldr	r3, [pc, #120]	; (8003bdc <__sfp+0x84>)
 8003b62:	681e      	ldr	r6, [r3, #0]
 8003b64:	69b3      	ldr	r3, [r6, #24]
 8003b66:	b913      	cbnz	r3, 8003b6e <__sfp+0x16>
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f7ff ffbd 	bl	8003ae8 <__sinit>
 8003b6e:	3648      	adds	r6, #72	; 0x48
 8003b70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	d503      	bpl.n	8003b80 <__sfp+0x28>
 8003b78:	6833      	ldr	r3, [r6, #0]
 8003b7a:	b30b      	cbz	r3, 8003bc0 <__sfp+0x68>
 8003b7c:	6836      	ldr	r6, [r6, #0]
 8003b7e:	e7f7      	b.n	8003b70 <__sfp+0x18>
 8003b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b84:	b9d5      	cbnz	r5, 8003bbc <__sfp+0x64>
 8003b86:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <__sfp+0x88>)
 8003b88:	60e3      	str	r3, [r4, #12]
 8003b8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b8e:	6665      	str	r5, [r4, #100]	; 0x64
 8003b90:	f000 f847 	bl	8003c22 <__retarget_lock_init_recursive>
 8003b94:	f7ff ff96 	bl	8003ac4 <__sfp_lock_release>
 8003b98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ba0:	6025      	str	r5, [r4, #0]
 8003ba2:	61a5      	str	r5, [r4, #24]
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003bac:	f7ff fd0c 	bl	80035c8 <memset>
 8003bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003bb8:	4620      	mov	r0, r4
 8003bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bbc:	3468      	adds	r4, #104	; 0x68
 8003bbe:	e7d9      	b.n	8003b74 <__sfp+0x1c>
 8003bc0:	2104      	movs	r1, #4
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	f7ff ff62 	bl	8003a8c <__sfmoreglue>
 8003bc8:	4604      	mov	r4, r0
 8003bca:	6030      	str	r0, [r6, #0]
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	d1d5      	bne.n	8003b7c <__sfp+0x24>
 8003bd0:	f7ff ff78 	bl	8003ac4 <__sfp_lock_release>
 8003bd4:	230c      	movs	r3, #12
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	e7ee      	b.n	8003bb8 <__sfp+0x60>
 8003bda:	bf00      	nop
 8003bdc:	08004a2c 	.word	0x08004a2c
 8003be0:	ffff0001 	.word	0xffff0001

08003be4 <_fwalk_reent>:
 8003be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003be8:	4606      	mov	r6, r0
 8003bea:	4688      	mov	r8, r1
 8003bec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003bf0:	2700      	movs	r7, #0
 8003bf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bf6:	f1b9 0901 	subs.w	r9, r9, #1
 8003bfa:	d505      	bpl.n	8003c08 <_fwalk_reent+0x24>
 8003bfc:	6824      	ldr	r4, [r4, #0]
 8003bfe:	2c00      	cmp	r4, #0
 8003c00:	d1f7      	bne.n	8003bf2 <_fwalk_reent+0xe>
 8003c02:	4638      	mov	r0, r7
 8003c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c08:	89ab      	ldrh	r3, [r5, #12]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d907      	bls.n	8003c1e <_fwalk_reent+0x3a>
 8003c0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c12:	3301      	adds	r3, #1
 8003c14:	d003      	beq.n	8003c1e <_fwalk_reent+0x3a>
 8003c16:	4629      	mov	r1, r5
 8003c18:	4630      	mov	r0, r6
 8003c1a:	47c0      	blx	r8
 8003c1c:	4307      	orrs	r7, r0
 8003c1e:	3568      	adds	r5, #104	; 0x68
 8003c20:	e7e9      	b.n	8003bf6 <_fwalk_reent+0x12>

08003c22 <__retarget_lock_init_recursive>:
 8003c22:	4770      	bx	lr

08003c24 <__retarget_lock_acquire_recursive>:
 8003c24:	4770      	bx	lr

08003c26 <__retarget_lock_release_recursive>:
 8003c26:	4770      	bx	lr

08003c28 <__swhatbuf_r>:
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	460e      	mov	r6, r1
 8003c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c30:	2900      	cmp	r1, #0
 8003c32:	b096      	sub	sp, #88	; 0x58
 8003c34:	4614      	mov	r4, r2
 8003c36:	461d      	mov	r5, r3
 8003c38:	da07      	bge.n	8003c4a <__swhatbuf_r+0x22>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	602b      	str	r3, [r5, #0]
 8003c3e:	89b3      	ldrh	r3, [r6, #12]
 8003c40:	061a      	lsls	r2, r3, #24
 8003c42:	d410      	bmi.n	8003c66 <__swhatbuf_r+0x3e>
 8003c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c48:	e00e      	b.n	8003c68 <__swhatbuf_r+0x40>
 8003c4a:	466a      	mov	r2, sp
 8003c4c:	f000 fdba 	bl	80047c4 <_fstat_r>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	dbf2      	blt.n	8003c3a <__swhatbuf_r+0x12>
 8003c54:	9a01      	ldr	r2, [sp, #4]
 8003c56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c5e:	425a      	negs	r2, r3
 8003c60:	415a      	adcs	r2, r3
 8003c62:	602a      	str	r2, [r5, #0]
 8003c64:	e7ee      	b.n	8003c44 <__swhatbuf_r+0x1c>
 8003c66:	2340      	movs	r3, #64	; 0x40
 8003c68:	2000      	movs	r0, #0
 8003c6a:	6023      	str	r3, [r4, #0]
 8003c6c:	b016      	add	sp, #88	; 0x58
 8003c6e:	bd70      	pop	{r4, r5, r6, pc}

08003c70 <__smakebuf_r>:
 8003c70:	898b      	ldrh	r3, [r1, #12]
 8003c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c74:	079d      	lsls	r5, r3, #30
 8003c76:	4606      	mov	r6, r0
 8003c78:	460c      	mov	r4, r1
 8003c7a:	d507      	bpl.n	8003c8c <__smakebuf_r+0x1c>
 8003c7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c80:	6023      	str	r3, [r4, #0]
 8003c82:	6123      	str	r3, [r4, #16]
 8003c84:	2301      	movs	r3, #1
 8003c86:	6163      	str	r3, [r4, #20]
 8003c88:	b002      	add	sp, #8
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	ab01      	add	r3, sp, #4
 8003c8e:	466a      	mov	r2, sp
 8003c90:	f7ff ffca 	bl	8003c28 <__swhatbuf_r>
 8003c94:	9900      	ldr	r1, [sp, #0]
 8003c96:	4605      	mov	r5, r0
 8003c98:	4630      	mov	r0, r6
 8003c9a:	f000 f879 	bl	8003d90 <_malloc_r>
 8003c9e:	b948      	cbnz	r0, 8003cb4 <__smakebuf_r+0x44>
 8003ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ca4:	059a      	lsls	r2, r3, #22
 8003ca6:	d4ef      	bmi.n	8003c88 <__smakebuf_r+0x18>
 8003ca8:	f023 0303 	bic.w	r3, r3, #3
 8003cac:	f043 0302 	orr.w	r3, r3, #2
 8003cb0:	81a3      	strh	r3, [r4, #12]
 8003cb2:	e7e3      	b.n	8003c7c <__smakebuf_r+0xc>
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <__smakebuf_r+0x7c>)
 8003cb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8003cb8:	89a3      	ldrh	r3, [r4, #12]
 8003cba:	6020      	str	r0, [r4, #0]
 8003cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc0:	81a3      	strh	r3, [r4, #12]
 8003cc2:	9b00      	ldr	r3, [sp, #0]
 8003cc4:	6163      	str	r3, [r4, #20]
 8003cc6:	9b01      	ldr	r3, [sp, #4]
 8003cc8:	6120      	str	r0, [r4, #16]
 8003cca:	b15b      	cbz	r3, 8003ce4 <__smakebuf_r+0x74>
 8003ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	f000 fd89 	bl	80047e8 <_isatty_r>
 8003cd6:	b128      	cbz	r0, 8003ce4 <__smakebuf_r+0x74>
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	f023 0303 	bic.w	r3, r3, #3
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	81a3      	strh	r3, [r4, #12]
 8003ce4:	89a0      	ldrh	r0, [r4, #12]
 8003ce6:	4305      	orrs	r5, r0
 8003ce8:	81a5      	strh	r5, [r4, #12]
 8003cea:	e7cd      	b.n	8003c88 <__smakebuf_r+0x18>
 8003cec:	08003a81 	.word	0x08003a81

08003cf0 <_free_r>:
 8003cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cf2:	2900      	cmp	r1, #0
 8003cf4:	d048      	beq.n	8003d88 <_free_r+0x98>
 8003cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cfa:	9001      	str	r0, [sp, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f1a1 0404 	sub.w	r4, r1, #4
 8003d02:	bfb8      	it	lt
 8003d04:	18e4      	addlt	r4, r4, r3
 8003d06:	f000 fdab 	bl	8004860 <__malloc_lock>
 8003d0a:	4a20      	ldr	r2, [pc, #128]	; (8003d8c <_free_r+0x9c>)
 8003d0c:	9801      	ldr	r0, [sp, #4]
 8003d0e:	6813      	ldr	r3, [r2, #0]
 8003d10:	4615      	mov	r5, r2
 8003d12:	b933      	cbnz	r3, 8003d22 <_free_r+0x32>
 8003d14:	6063      	str	r3, [r4, #4]
 8003d16:	6014      	str	r4, [r2, #0]
 8003d18:	b003      	add	sp, #12
 8003d1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d1e:	f000 bda5 	b.w	800486c <__malloc_unlock>
 8003d22:	42a3      	cmp	r3, r4
 8003d24:	d90b      	bls.n	8003d3e <_free_r+0x4e>
 8003d26:	6821      	ldr	r1, [r4, #0]
 8003d28:	1862      	adds	r2, r4, r1
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	bf04      	itt	eq
 8003d2e:	681a      	ldreq	r2, [r3, #0]
 8003d30:	685b      	ldreq	r3, [r3, #4]
 8003d32:	6063      	str	r3, [r4, #4]
 8003d34:	bf04      	itt	eq
 8003d36:	1852      	addeq	r2, r2, r1
 8003d38:	6022      	streq	r2, [r4, #0]
 8003d3a:	602c      	str	r4, [r5, #0]
 8003d3c:	e7ec      	b.n	8003d18 <_free_r+0x28>
 8003d3e:	461a      	mov	r2, r3
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	b10b      	cbz	r3, 8003d48 <_free_r+0x58>
 8003d44:	42a3      	cmp	r3, r4
 8003d46:	d9fa      	bls.n	8003d3e <_free_r+0x4e>
 8003d48:	6811      	ldr	r1, [r2, #0]
 8003d4a:	1855      	adds	r5, r2, r1
 8003d4c:	42a5      	cmp	r5, r4
 8003d4e:	d10b      	bne.n	8003d68 <_free_r+0x78>
 8003d50:	6824      	ldr	r4, [r4, #0]
 8003d52:	4421      	add	r1, r4
 8003d54:	1854      	adds	r4, r2, r1
 8003d56:	42a3      	cmp	r3, r4
 8003d58:	6011      	str	r1, [r2, #0]
 8003d5a:	d1dd      	bne.n	8003d18 <_free_r+0x28>
 8003d5c:	681c      	ldr	r4, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	6053      	str	r3, [r2, #4]
 8003d62:	4421      	add	r1, r4
 8003d64:	6011      	str	r1, [r2, #0]
 8003d66:	e7d7      	b.n	8003d18 <_free_r+0x28>
 8003d68:	d902      	bls.n	8003d70 <_free_r+0x80>
 8003d6a:	230c      	movs	r3, #12
 8003d6c:	6003      	str	r3, [r0, #0]
 8003d6e:	e7d3      	b.n	8003d18 <_free_r+0x28>
 8003d70:	6825      	ldr	r5, [r4, #0]
 8003d72:	1961      	adds	r1, r4, r5
 8003d74:	428b      	cmp	r3, r1
 8003d76:	bf04      	itt	eq
 8003d78:	6819      	ldreq	r1, [r3, #0]
 8003d7a:	685b      	ldreq	r3, [r3, #4]
 8003d7c:	6063      	str	r3, [r4, #4]
 8003d7e:	bf04      	itt	eq
 8003d80:	1949      	addeq	r1, r1, r5
 8003d82:	6021      	streq	r1, [r4, #0]
 8003d84:	6054      	str	r4, [r2, #4]
 8003d86:	e7c7      	b.n	8003d18 <_free_r+0x28>
 8003d88:	b003      	add	sp, #12
 8003d8a:	bd30      	pop	{r4, r5, pc}
 8003d8c:	20000098 	.word	0x20000098

08003d90 <_malloc_r>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	1ccd      	adds	r5, r1, #3
 8003d94:	f025 0503 	bic.w	r5, r5, #3
 8003d98:	3508      	adds	r5, #8
 8003d9a:	2d0c      	cmp	r5, #12
 8003d9c:	bf38      	it	cc
 8003d9e:	250c      	movcc	r5, #12
 8003da0:	2d00      	cmp	r5, #0
 8003da2:	4606      	mov	r6, r0
 8003da4:	db01      	blt.n	8003daa <_malloc_r+0x1a>
 8003da6:	42a9      	cmp	r1, r5
 8003da8:	d903      	bls.n	8003db2 <_malloc_r+0x22>
 8003daa:	230c      	movs	r3, #12
 8003dac:	6033      	str	r3, [r6, #0]
 8003dae:	2000      	movs	r0, #0
 8003db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003db2:	f000 fd55 	bl	8004860 <__malloc_lock>
 8003db6:	4921      	ldr	r1, [pc, #132]	; (8003e3c <_malloc_r+0xac>)
 8003db8:	680a      	ldr	r2, [r1, #0]
 8003dba:	4614      	mov	r4, r2
 8003dbc:	b99c      	cbnz	r4, 8003de6 <_malloc_r+0x56>
 8003dbe:	4f20      	ldr	r7, [pc, #128]	; (8003e40 <_malloc_r+0xb0>)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	b923      	cbnz	r3, 8003dce <_malloc_r+0x3e>
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f000 fc86 	bl	80046d8 <_sbrk_r>
 8003dcc:	6038      	str	r0, [r7, #0]
 8003dce:	4629      	mov	r1, r5
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	f000 fc81 	bl	80046d8 <_sbrk_r>
 8003dd6:	1c43      	adds	r3, r0, #1
 8003dd8:	d123      	bne.n	8003e22 <_malloc_r+0x92>
 8003dda:	230c      	movs	r3, #12
 8003ddc:	6033      	str	r3, [r6, #0]
 8003dde:	4630      	mov	r0, r6
 8003de0:	f000 fd44 	bl	800486c <__malloc_unlock>
 8003de4:	e7e3      	b.n	8003dae <_malloc_r+0x1e>
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	1b5b      	subs	r3, r3, r5
 8003dea:	d417      	bmi.n	8003e1c <_malloc_r+0x8c>
 8003dec:	2b0b      	cmp	r3, #11
 8003dee:	d903      	bls.n	8003df8 <_malloc_r+0x68>
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	441c      	add	r4, r3
 8003df4:	6025      	str	r5, [r4, #0]
 8003df6:	e004      	b.n	8003e02 <_malloc_r+0x72>
 8003df8:	6863      	ldr	r3, [r4, #4]
 8003dfa:	42a2      	cmp	r2, r4
 8003dfc:	bf0c      	ite	eq
 8003dfe:	600b      	streq	r3, [r1, #0]
 8003e00:	6053      	strne	r3, [r2, #4]
 8003e02:	4630      	mov	r0, r6
 8003e04:	f000 fd32 	bl	800486c <__malloc_unlock>
 8003e08:	f104 000b 	add.w	r0, r4, #11
 8003e0c:	1d23      	adds	r3, r4, #4
 8003e0e:	f020 0007 	bic.w	r0, r0, #7
 8003e12:	1ac2      	subs	r2, r0, r3
 8003e14:	d0cc      	beq.n	8003db0 <_malloc_r+0x20>
 8003e16:	1a1b      	subs	r3, r3, r0
 8003e18:	50a3      	str	r3, [r4, r2]
 8003e1a:	e7c9      	b.n	8003db0 <_malloc_r+0x20>
 8003e1c:	4622      	mov	r2, r4
 8003e1e:	6864      	ldr	r4, [r4, #4]
 8003e20:	e7cc      	b.n	8003dbc <_malloc_r+0x2c>
 8003e22:	1cc4      	adds	r4, r0, #3
 8003e24:	f024 0403 	bic.w	r4, r4, #3
 8003e28:	42a0      	cmp	r0, r4
 8003e2a:	d0e3      	beq.n	8003df4 <_malloc_r+0x64>
 8003e2c:	1a21      	subs	r1, r4, r0
 8003e2e:	4630      	mov	r0, r6
 8003e30:	f000 fc52 	bl	80046d8 <_sbrk_r>
 8003e34:	3001      	adds	r0, #1
 8003e36:	d1dd      	bne.n	8003df4 <_malloc_r+0x64>
 8003e38:	e7cf      	b.n	8003dda <_malloc_r+0x4a>
 8003e3a:	bf00      	nop
 8003e3c:	20000098 	.word	0x20000098
 8003e40:	2000009c 	.word	0x2000009c

08003e44 <__ssputs_r>:
 8003e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e48:	688e      	ldr	r6, [r1, #8]
 8003e4a:	429e      	cmp	r6, r3
 8003e4c:	4682      	mov	sl, r0
 8003e4e:	460c      	mov	r4, r1
 8003e50:	4690      	mov	r8, r2
 8003e52:	461f      	mov	r7, r3
 8003e54:	d838      	bhi.n	8003ec8 <__ssputs_r+0x84>
 8003e56:	898a      	ldrh	r2, [r1, #12]
 8003e58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e5c:	d032      	beq.n	8003ec4 <__ssputs_r+0x80>
 8003e5e:	6825      	ldr	r5, [r4, #0]
 8003e60:	6909      	ldr	r1, [r1, #16]
 8003e62:	eba5 0901 	sub.w	r9, r5, r1
 8003e66:	6965      	ldr	r5, [r4, #20]
 8003e68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e70:	3301      	adds	r3, #1
 8003e72:	444b      	add	r3, r9
 8003e74:	106d      	asrs	r5, r5, #1
 8003e76:	429d      	cmp	r5, r3
 8003e78:	bf38      	it	cc
 8003e7a:	461d      	movcc	r5, r3
 8003e7c:	0553      	lsls	r3, r2, #21
 8003e7e:	d531      	bpl.n	8003ee4 <__ssputs_r+0xa0>
 8003e80:	4629      	mov	r1, r5
 8003e82:	f7ff ff85 	bl	8003d90 <_malloc_r>
 8003e86:	4606      	mov	r6, r0
 8003e88:	b950      	cbnz	r0, 8003ea0 <__ssputs_r+0x5c>
 8003e8a:	230c      	movs	r3, #12
 8003e8c:	f8ca 3000 	str.w	r3, [sl]
 8003e90:	89a3      	ldrh	r3, [r4, #12]
 8003e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e96:	81a3      	strh	r3, [r4, #12]
 8003e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea0:	6921      	ldr	r1, [r4, #16]
 8003ea2:	464a      	mov	r2, r9
 8003ea4:	f7ff fb82 	bl	80035ac <memcpy>
 8003ea8:	89a3      	ldrh	r3, [r4, #12]
 8003eaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb2:	81a3      	strh	r3, [r4, #12]
 8003eb4:	6126      	str	r6, [r4, #16]
 8003eb6:	6165      	str	r5, [r4, #20]
 8003eb8:	444e      	add	r6, r9
 8003eba:	eba5 0509 	sub.w	r5, r5, r9
 8003ebe:	6026      	str	r6, [r4, #0]
 8003ec0:	60a5      	str	r5, [r4, #8]
 8003ec2:	463e      	mov	r6, r7
 8003ec4:	42be      	cmp	r6, r7
 8003ec6:	d900      	bls.n	8003eca <__ssputs_r+0x86>
 8003ec8:	463e      	mov	r6, r7
 8003eca:	4632      	mov	r2, r6
 8003ecc:	6820      	ldr	r0, [r4, #0]
 8003ece:	4641      	mov	r1, r8
 8003ed0:	f000 fcac 	bl	800482c <memmove>
 8003ed4:	68a3      	ldr	r3, [r4, #8]
 8003ed6:	6822      	ldr	r2, [r4, #0]
 8003ed8:	1b9b      	subs	r3, r3, r6
 8003eda:	4432      	add	r2, r6
 8003edc:	60a3      	str	r3, [r4, #8]
 8003ede:	6022      	str	r2, [r4, #0]
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	e7db      	b.n	8003e9c <__ssputs_r+0x58>
 8003ee4:	462a      	mov	r2, r5
 8003ee6:	f000 fcc7 	bl	8004878 <_realloc_r>
 8003eea:	4606      	mov	r6, r0
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d1e1      	bne.n	8003eb4 <__ssputs_r+0x70>
 8003ef0:	6921      	ldr	r1, [r4, #16]
 8003ef2:	4650      	mov	r0, sl
 8003ef4:	f7ff fefc 	bl	8003cf0 <_free_r>
 8003ef8:	e7c7      	b.n	8003e8a <__ssputs_r+0x46>
	...

08003efc <_svfiprintf_r>:
 8003efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f00:	4698      	mov	r8, r3
 8003f02:	898b      	ldrh	r3, [r1, #12]
 8003f04:	061b      	lsls	r3, r3, #24
 8003f06:	b09d      	sub	sp, #116	; 0x74
 8003f08:	4607      	mov	r7, r0
 8003f0a:	460d      	mov	r5, r1
 8003f0c:	4614      	mov	r4, r2
 8003f0e:	d50e      	bpl.n	8003f2e <_svfiprintf_r+0x32>
 8003f10:	690b      	ldr	r3, [r1, #16]
 8003f12:	b963      	cbnz	r3, 8003f2e <_svfiprintf_r+0x32>
 8003f14:	2140      	movs	r1, #64	; 0x40
 8003f16:	f7ff ff3b 	bl	8003d90 <_malloc_r>
 8003f1a:	6028      	str	r0, [r5, #0]
 8003f1c:	6128      	str	r0, [r5, #16]
 8003f1e:	b920      	cbnz	r0, 8003f2a <_svfiprintf_r+0x2e>
 8003f20:	230c      	movs	r3, #12
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f28:	e0d1      	b.n	80040ce <_svfiprintf_r+0x1d2>
 8003f2a:	2340      	movs	r3, #64	; 0x40
 8003f2c:	616b      	str	r3, [r5, #20]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	9309      	str	r3, [sp, #36]	; 0x24
 8003f32:	2320      	movs	r3, #32
 8003f34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f38:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f3c:	2330      	movs	r3, #48	; 0x30
 8003f3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80040e8 <_svfiprintf_r+0x1ec>
 8003f42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f46:	f04f 0901 	mov.w	r9, #1
 8003f4a:	4623      	mov	r3, r4
 8003f4c:	469a      	mov	sl, r3
 8003f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f52:	b10a      	cbz	r2, 8003f58 <_svfiprintf_r+0x5c>
 8003f54:	2a25      	cmp	r2, #37	; 0x25
 8003f56:	d1f9      	bne.n	8003f4c <_svfiprintf_r+0x50>
 8003f58:	ebba 0b04 	subs.w	fp, sl, r4
 8003f5c:	d00b      	beq.n	8003f76 <_svfiprintf_r+0x7a>
 8003f5e:	465b      	mov	r3, fp
 8003f60:	4622      	mov	r2, r4
 8003f62:	4629      	mov	r1, r5
 8003f64:	4638      	mov	r0, r7
 8003f66:	f7ff ff6d 	bl	8003e44 <__ssputs_r>
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	f000 80aa 	beq.w	80040c4 <_svfiprintf_r+0x1c8>
 8003f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f72:	445a      	add	r2, fp
 8003f74:	9209      	str	r2, [sp, #36]	; 0x24
 8003f76:	f89a 3000 	ldrb.w	r3, [sl]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 80a2 	beq.w	80040c4 <_svfiprintf_r+0x1c8>
 8003f80:	2300      	movs	r3, #0
 8003f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f8a:	f10a 0a01 	add.w	sl, sl, #1
 8003f8e:	9304      	str	r3, [sp, #16]
 8003f90:	9307      	str	r3, [sp, #28]
 8003f92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f96:	931a      	str	r3, [sp, #104]	; 0x68
 8003f98:	4654      	mov	r4, sl
 8003f9a:	2205      	movs	r2, #5
 8003f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa0:	4851      	ldr	r0, [pc, #324]	; (80040e8 <_svfiprintf_r+0x1ec>)
 8003fa2:	f7fc f915 	bl	80001d0 <memchr>
 8003fa6:	9a04      	ldr	r2, [sp, #16]
 8003fa8:	b9d8      	cbnz	r0, 8003fe2 <_svfiprintf_r+0xe6>
 8003faa:	06d0      	lsls	r0, r2, #27
 8003fac:	bf44      	itt	mi
 8003fae:	2320      	movmi	r3, #32
 8003fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fb4:	0711      	lsls	r1, r2, #28
 8003fb6:	bf44      	itt	mi
 8003fb8:	232b      	movmi	r3, #43	; 0x2b
 8003fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8003fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc4:	d015      	beq.n	8003ff2 <_svfiprintf_r+0xf6>
 8003fc6:	9a07      	ldr	r2, [sp, #28]
 8003fc8:	4654      	mov	r4, sl
 8003fca:	2000      	movs	r0, #0
 8003fcc:	f04f 0c0a 	mov.w	ip, #10
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fd6:	3b30      	subs	r3, #48	; 0x30
 8003fd8:	2b09      	cmp	r3, #9
 8003fda:	d94e      	bls.n	800407a <_svfiprintf_r+0x17e>
 8003fdc:	b1b0      	cbz	r0, 800400c <_svfiprintf_r+0x110>
 8003fde:	9207      	str	r2, [sp, #28]
 8003fe0:	e014      	b.n	800400c <_svfiprintf_r+0x110>
 8003fe2:	eba0 0308 	sub.w	r3, r0, r8
 8003fe6:	fa09 f303 	lsl.w	r3, r9, r3
 8003fea:	4313      	orrs	r3, r2
 8003fec:	9304      	str	r3, [sp, #16]
 8003fee:	46a2      	mov	sl, r4
 8003ff0:	e7d2      	b.n	8003f98 <_svfiprintf_r+0x9c>
 8003ff2:	9b03      	ldr	r3, [sp, #12]
 8003ff4:	1d19      	adds	r1, r3, #4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	9103      	str	r1, [sp, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bfbb      	ittet	lt
 8003ffe:	425b      	neglt	r3, r3
 8004000:	f042 0202 	orrlt.w	r2, r2, #2
 8004004:	9307      	strge	r3, [sp, #28]
 8004006:	9307      	strlt	r3, [sp, #28]
 8004008:	bfb8      	it	lt
 800400a:	9204      	strlt	r2, [sp, #16]
 800400c:	7823      	ldrb	r3, [r4, #0]
 800400e:	2b2e      	cmp	r3, #46	; 0x2e
 8004010:	d10c      	bne.n	800402c <_svfiprintf_r+0x130>
 8004012:	7863      	ldrb	r3, [r4, #1]
 8004014:	2b2a      	cmp	r3, #42	; 0x2a
 8004016:	d135      	bne.n	8004084 <_svfiprintf_r+0x188>
 8004018:	9b03      	ldr	r3, [sp, #12]
 800401a:	1d1a      	adds	r2, r3, #4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	9203      	str	r2, [sp, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	bfb8      	it	lt
 8004024:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004028:	3402      	adds	r4, #2
 800402a:	9305      	str	r3, [sp, #20]
 800402c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040f8 <_svfiprintf_r+0x1fc>
 8004030:	7821      	ldrb	r1, [r4, #0]
 8004032:	2203      	movs	r2, #3
 8004034:	4650      	mov	r0, sl
 8004036:	f7fc f8cb 	bl	80001d0 <memchr>
 800403a:	b140      	cbz	r0, 800404e <_svfiprintf_r+0x152>
 800403c:	2340      	movs	r3, #64	; 0x40
 800403e:	eba0 000a 	sub.w	r0, r0, sl
 8004042:	fa03 f000 	lsl.w	r0, r3, r0
 8004046:	9b04      	ldr	r3, [sp, #16]
 8004048:	4303      	orrs	r3, r0
 800404a:	3401      	adds	r4, #1
 800404c:	9304      	str	r3, [sp, #16]
 800404e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004052:	4826      	ldr	r0, [pc, #152]	; (80040ec <_svfiprintf_r+0x1f0>)
 8004054:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004058:	2206      	movs	r2, #6
 800405a:	f7fc f8b9 	bl	80001d0 <memchr>
 800405e:	2800      	cmp	r0, #0
 8004060:	d038      	beq.n	80040d4 <_svfiprintf_r+0x1d8>
 8004062:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <_svfiprintf_r+0x1f4>)
 8004064:	bb1b      	cbnz	r3, 80040ae <_svfiprintf_r+0x1b2>
 8004066:	9b03      	ldr	r3, [sp, #12]
 8004068:	3307      	adds	r3, #7
 800406a:	f023 0307 	bic.w	r3, r3, #7
 800406e:	3308      	adds	r3, #8
 8004070:	9303      	str	r3, [sp, #12]
 8004072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004074:	4433      	add	r3, r6
 8004076:	9309      	str	r3, [sp, #36]	; 0x24
 8004078:	e767      	b.n	8003f4a <_svfiprintf_r+0x4e>
 800407a:	fb0c 3202 	mla	r2, ip, r2, r3
 800407e:	460c      	mov	r4, r1
 8004080:	2001      	movs	r0, #1
 8004082:	e7a5      	b.n	8003fd0 <_svfiprintf_r+0xd4>
 8004084:	2300      	movs	r3, #0
 8004086:	3401      	adds	r4, #1
 8004088:	9305      	str	r3, [sp, #20]
 800408a:	4619      	mov	r1, r3
 800408c:	f04f 0c0a 	mov.w	ip, #10
 8004090:	4620      	mov	r0, r4
 8004092:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004096:	3a30      	subs	r2, #48	; 0x30
 8004098:	2a09      	cmp	r2, #9
 800409a:	d903      	bls.n	80040a4 <_svfiprintf_r+0x1a8>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0c5      	beq.n	800402c <_svfiprintf_r+0x130>
 80040a0:	9105      	str	r1, [sp, #20]
 80040a2:	e7c3      	b.n	800402c <_svfiprintf_r+0x130>
 80040a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80040a8:	4604      	mov	r4, r0
 80040aa:	2301      	movs	r3, #1
 80040ac:	e7f0      	b.n	8004090 <_svfiprintf_r+0x194>
 80040ae:	ab03      	add	r3, sp, #12
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	462a      	mov	r2, r5
 80040b4:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <_svfiprintf_r+0x1f8>)
 80040b6:	a904      	add	r1, sp, #16
 80040b8:	4638      	mov	r0, r7
 80040ba:	f3af 8000 	nop.w
 80040be:	1c42      	adds	r2, r0, #1
 80040c0:	4606      	mov	r6, r0
 80040c2:	d1d6      	bne.n	8004072 <_svfiprintf_r+0x176>
 80040c4:	89ab      	ldrh	r3, [r5, #12]
 80040c6:	065b      	lsls	r3, r3, #25
 80040c8:	f53f af2c 	bmi.w	8003f24 <_svfiprintf_r+0x28>
 80040cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040ce:	b01d      	add	sp, #116	; 0x74
 80040d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d4:	ab03      	add	r3, sp, #12
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	462a      	mov	r2, r5
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <_svfiprintf_r+0x1f8>)
 80040dc:	a904      	add	r1, sp, #16
 80040de:	4638      	mov	r0, r7
 80040e0:	f000 f9d4 	bl	800448c <_printf_i>
 80040e4:	e7eb      	b.n	80040be <_svfiprintf_r+0x1c2>
 80040e6:	bf00      	nop
 80040e8:	08004a90 	.word	0x08004a90
 80040ec:	08004a9a 	.word	0x08004a9a
 80040f0:	00000000 	.word	0x00000000
 80040f4:	08003e45 	.word	0x08003e45
 80040f8:	08004a96 	.word	0x08004a96

080040fc <__sfputc_r>:
 80040fc:	6893      	ldr	r3, [r2, #8]
 80040fe:	3b01      	subs	r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	b410      	push	{r4}
 8004104:	6093      	str	r3, [r2, #8]
 8004106:	da08      	bge.n	800411a <__sfputc_r+0x1e>
 8004108:	6994      	ldr	r4, [r2, #24]
 800410a:	42a3      	cmp	r3, r4
 800410c:	db01      	blt.n	8004112 <__sfputc_r+0x16>
 800410e:	290a      	cmp	r1, #10
 8004110:	d103      	bne.n	800411a <__sfputc_r+0x1e>
 8004112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004116:	f7ff bb0d 	b.w	8003734 <__swbuf_r>
 800411a:	6813      	ldr	r3, [r2, #0]
 800411c:	1c58      	adds	r0, r3, #1
 800411e:	6010      	str	r0, [r2, #0]
 8004120:	7019      	strb	r1, [r3, #0]
 8004122:	4608      	mov	r0, r1
 8004124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004128:	4770      	bx	lr

0800412a <__sfputs_r>:
 800412a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412c:	4606      	mov	r6, r0
 800412e:	460f      	mov	r7, r1
 8004130:	4614      	mov	r4, r2
 8004132:	18d5      	adds	r5, r2, r3
 8004134:	42ac      	cmp	r4, r5
 8004136:	d101      	bne.n	800413c <__sfputs_r+0x12>
 8004138:	2000      	movs	r0, #0
 800413a:	e007      	b.n	800414c <__sfputs_r+0x22>
 800413c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004140:	463a      	mov	r2, r7
 8004142:	4630      	mov	r0, r6
 8004144:	f7ff ffda 	bl	80040fc <__sfputc_r>
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	d1f3      	bne.n	8004134 <__sfputs_r+0xa>
 800414c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004150 <_vfiprintf_r>:
 8004150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004154:	460d      	mov	r5, r1
 8004156:	b09d      	sub	sp, #116	; 0x74
 8004158:	4614      	mov	r4, r2
 800415a:	4698      	mov	r8, r3
 800415c:	4606      	mov	r6, r0
 800415e:	b118      	cbz	r0, 8004168 <_vfiprintf_r+0x18>
 8004160:	6983      	ldr	r3, [r0, #24]
 8004162:	b90b      	cbnz	r3, 8004168 <_vfiprintf_r+0x18>
 8004164:	f7ff fcc0 	bl	8003ae8 <__sinit>
 8004168:	4b89      	ldr	r3, [pc, #548]	; (8004390 <_vfiprintf_r+0x240>)
 800416a:	429d      	cmp	r5, r3
 800416c:	d11b      	bne.n	80041a6 <_vfiprintf_r+0x56>
 800416e:	6875      	ldr	r5, [r6, #4]
 8004170:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004172:	07d9      	lsls	r1, r3, #31
 8004174:	d405      	bmi.n	8004182 <_vfiprintf_r+0x32>
 8004176:	89ab      	ldrh	r3, [r5, #12]
 8004178:	059a      	lsls	r2, r3, #22
 800417a:	d402      	bmi.n	8004182 <_vfiprintf_r+0x32>
 800417c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800417e:	f7ff fd51 	bl	8003c24 <__retarget_lock_acquire_recursive>
 8004182:	89ab      	ldrh	r3, [r5, #12]
 8004184:	071b      	lsls	r3, r3, #28
 8004186:	d501      	bpl.n	800418c <_vfiprintf_r+0x3c>
 8004188:	692b      	ldr	r3, [r5, #16]
 800418a:	b9eb      	cbnz	r3, 80041c8 <_vfiprintf_r+0x78>
 800418c:	4629      	mov	r1, r5
 800418e:	4630      	mov	r0, r6
 8004190:	f7ff fb22 	bl	80037d8 <__swsetup_r>
 8004194:	b1c0      	cbz	r0, 80041c8 <_vfiprintf_r+0x78>
 8004196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004198:	07dc      	lsls	r4, r3, #31
 800419a:	d50e      	bpl.n	80041ba <_vfiprintf_r+0x6a>
 800419c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041a0:	b01d      	add	sp, #116	; 0x74
 80041a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a6:	4b7b      	ldr	r3, [pc, #492]	; (8004394 <_vfiprintf_r+0x244>)
 80041a8:	429d      	cmp	r5, r3
 80041aa:	d101      	bne.n	80041b0 <_vfiprintf_r+0x60>
 80041ac:	68b5      	ldr	r5, [r6, #8]
 80041ae:	e7df      	b.n	8004170 <_vfiprintf_r+0x20>
 80041b0:	4b79      	ldr	r3, [pc, #484]	; (8004398 <_vfiprintf_r+0x248>)
 80041b2:	429d      	cmp	r5, r3
 80041b4:	bf08      	it	eq
 80041b6:	68f5      	ldreq	r5, [r6, #12]
 80041b8:	e7da      	b.n	8004170 <_vfiprintf_r+0x20>
 80041ba:	89ab      	ldrh	r3, [r5, #12]
 80041bc:	0598      	lsls	r0, r3, #22
 80041be:	d4ed      	bmi.n	800419c <_vfiprintf_r+0x4c>
 80041c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041c2:	f7ff fd30 	bl	8003c26 <__retarget_lock_release_recursive>
 80041c6:	e7e9      	b.n	800419c <_vfiprintf_r+0x4c>
 80041c8:	2300      	movs	r3, #0
 80041ca:	9309      	str	r3, [sp, #36]	; 0x24
 80041cc:	2320      	movs	r3, #32
 80041ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80041d6:	2330      	movs	r3, #48	; 0x30
 80041d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800439c <_vfiprintf_r+0x24c>
 80041dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041e0:	f04f 0901 	mov.w	r9, #1
 80041e4:	4623      	mov	r3, r4
 80041e6:	469a      	mov	sl, r3
 80041e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041ec:	b10a      	cbz	r2, 80041f2 <_vfiprintf_r+0xa2>
 80041ee:	2a25      	cmp	r2, #37	; 0x25
 80041f0:	d1f9      	bne.n	80041e6 <_vfiprintf_r+0x96>
 80041f2:	ebba 0b04 	subs.w	fp, sl, r4
 80041f6:	d00b      	beq.n	8004210 <_vfiprintf_r+0xc0>
 80041f8:	465b      	mov	r3, fp
 80041fa:	4622      	mov	r2, r4
 80041fc:	4629      	mov	r1, r5
 80041fe:	4630      	mov	r0, r6
 8004200:	f7ff ff93 	bl	800412a <__sfputs_r>
 8004204:	3001      	adds	r0, #1
 8004206:	f000 80aa 	beq.w	800435e <_vfiprintf_r+0x20e>
 800420a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800420c:	445a      	add	r2, fp
 800420e:	9209      	str	r2, [sp, #36]	; 0x24
 8004210:	f89a 3000 	ldrb.w	r3, [sl]
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80a2 	beq.w	800435e <_vfiprintf_r+0x20e>
 800421a:	2300      	movs	r3, #0
 800421c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004220:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004224:	f10a 0a01 	add.w	sl, sl, #1
 8004228:	9304      	str	r3, [sp, #16]
 800422a:	9307      	str	r3, [sp, #28]
 800422c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004230:	931a      	str	r3, [sp, #104]	; 0x68
 8004232:	4654      	mov	r4, sl
 8004234:	2205      	movs	r2, #5
 8004236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800423a:	4858      	ldr	r0, [pc, #352]	; (800439c <_vfiprintf_r+0x24c>)
 800423c:	f7fb ffc8 	bl	80001d0 <memchr>
 8004240:	9a04      	ldr	r2, [sp, #16]
 8004242:	b9d8      	cbnz	r0, 800427c <_vfiprintf_r+0x12c>
 8004244:	06d1      	lsls	r1, r2, #27
 8004246:	bf44      	itt	mi
 8004248:	2320      	movmi	r3, #32
 800424a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800424e:	0713      	lsls	r3, r2, #28
 8004250:	bf44      	itt	mi
 8004252:	232b      	movmi	r3, #43	; 0x2b
 8004254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004258:	f89a 3000 	ldrb.w	r3, [sl]
 800425c:	2b2a      	cmp	r3, #42	; 0x2a
 800425e:	d015      	beq.n	800428c <_vfiprintf_r+0x13c>
 8004260:	9a07      	ldr	r2, [sp, #28]
 8004262:	4654      	mov	r4, sl
 8004264:	2000      	movs	r0, #0
 8004266:	f04f 0c0a 	mov.w	ip, #10
 800426a:	4621      	mov	r1, r4
 800426c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004270:	3b30      	subs	r3, #48	; 0x30
 8004272:	2b09      	cmp	r3, #9
 8004274:	d94e      	bls.n	8004314 <_vfiprintf_r+0x1c4>
 8004276:	b1b0      	cbz	r0, 80042a6 <_vfiprintf_r+0x156>
 8004278:	9207      	str	r2, [sp, #28]
 800427a:	e014      	b.n	80042a6 <_vfiprintf_r+0x156>
 800427c:	eba0 0308 	sub.w	r3, r0, r8
 8004280:	fa09 f303 	lsl.w	r3, r9, r3
 8004284:	4313      	orrs	r3, r2
 8004286:	9304      	str	r3, [sp, #16]
 8004288:	46a2      	mov	sl, r4
 800428a:	e7d2      	b.n	8004232 <_vfiprintf_r+0xe2>
 800428c:	9b03      	ldr	r3, [sp, #12]
 800428e:	1d19      	adds	r1, r3, #4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	9103      	str	r1, [sp, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	bfbb      	ittet	lt
 8004298:	425b      	neglt	r3, r3
 800429a:	f042 0202 	orrlt.w	r2, r2, #2
 800429e:	9307      	strge	r3, [sp, #28]
 80042a0:	9307      	strlt	r3, [sp, #28]
 80042a2:	bfb8      	it	lt
 80042a4:	9204      	strlt	r2, [sp, #16]
 80042a6:	7823      	ldrb	r3, [r4, #0]
 80042a8:	2b2e      	cmp	r3, #46	; 0x2e
 80042aa:	d10c      	bne.n	80042c6 <_vfiprintf_r+0x176>
 80042ac:	7863      	ldrb	r3, [r4, #1]
 80042ae:	2b2a      	cmp	r3, #42	; 0x2a
 80042b0:	d135      	bne.n	800431e <_vfiprintf_r+0x1ce>
 80042b2:	9b03      	ldr	r3, [sp, #12]
 80042b4:	1d1a      	adds	r2, r3, #4
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	9203      	str	r2, [sp, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bfb8      	it	lt
 80042be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80042c2:	3402      	adds	r4, #2
 80042c4:	9305      	str	r3, [sp, #20]
 80042c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80043ac <_vfiprintf_r+0x25c>
 80042ca:	7821      	ldrb	r1, [r4, #0]
 80042cc:	2203      	movs	r2, #3
 80042ce:	4650      	mov	r0, sl
 80042d0:	f7fb ff7e 	bl	80001d0 <memchr>
 80042d4:	b140      	cbz	r0, 80042e8 <_vfiprintf_r+0x198>
 80042d6:	2340      	movs	r3, #64	; 0x40
 80042d8:	eba0 000a 	sub.w	r0, r0, sl
 80042dc:	fa03 f000 	lsl.w	r0, r3, r0
 80042e0:	9b04      	ldr	r3, [sp, #16]
 80042e2:	4303      	orrs	r3, r0
 80042e4:	3401      	adds	r4, #1
 80042e6:	9304      	str	r3, [sp, #16]
 80042e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042ec:	482c      	ldr	r0, [pc, #176]	; (80043a0 <_vfiprintf_r+0x250>)
 80042ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042f2:	2206      	movs	r2, #6
 80042f4:	f7fb ff6c 	bl	80001d0 <memchr>
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d03f      	beq.n	800437c <_vfiprintf_r+0x22c>
 80042fc:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <_vfiprintf_r+0x254>)
 80042fe:	bb1b      	cbnz	r3, 8004348 <_vfiprintf_r+0x1f8>
 8004300:	9b03      	ldr	r3, [sp, #12]
 8004302:	3307      	adds	r3, #7
 8004304:	f023 0307 	bic.w	r3, r3, #7
 8004308:	3308      	adds	r3, #8
 800430a:	9303      	str	r3, [sp, #12]
 800430c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800430e:	443b      	add	r3, r7
 8004310:	9309      	str	r3, [sp, #36]	; 0x24
 8004312:	e767      	b.n	80041e4 <_vfiprintf_r+0x94>
 8004314:	fb0c 3202 	mla	r2, ip, r2, r3
 8004318:	460c      	mov	r4, r1
 800431a:	2001      	movs	r0, #1
 800431c:	e7a5      	b.n	800426a <_vfiprintf_r+0x11a>
 800431e:	2300      	movs	r3, #0
 8004320:	3401      	adds	r4, #1
 8004322:	9305      	str	r3, [sp, #20]
 8004324:	4619      	mov	r1, r3
 8004326:	f04f 0c0a 	mov.w	ip, #10
 800432a:	4620      	mov	r0, r4
 800432c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004330:	3a30      	subs	r2, #48	; 0x30
 8004332:	2a09      	cmp	r2, #9
 8004334:	d903      	bls.n	800433e <_vfiprintf_r+0x1ee>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0c5      	beq.n	80042c6 <_vfiprintf_r+0x176>
 800433a:	9105      	str	r1, [sp, #20]
 800433c:	e7c3      	b.n	80042c6 <_vfiprintf_r+0x176>
 800433e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004342:	4604      	mov	r4, r0
 8004344:	2301      	movs	r3, #1
 8004346:	e7f0      	b.n	800432a <_vfiprintf_r+0x1da>
 8004348:	ab03      	add	r3, sp, #12
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	462a      	mov	r2, r5
 800434e:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <_vfiprintf_r+0x258>)
 8004350:	a904      	add	r1, sp, #16
 8004352:	4630      	mov	r0, r6
 8004354:	f3af 8000 	nop.w
 8004358:	4607      	mov	r7, r0
 800435a:	1c78      	adds	r0, r7, #1
 800435c:	d1d6      	bne.n	800430c <_vfiprintf_r+0x1bc>
 800435e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004360:	07d9      	lsls	r1, r3, #31
 8004362:	d405      	bmi.n	8004370 <_vfiprintf_r+0x220>
 8004364:	89ab      	ldrh	r3, [r5, #12]
 8004366:	059a      	lsls	r2, r3, #22
 8004368:	d402      	bmi.n	8004370 <_vfiprintf_r+0x220>
 800436a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800436c:	f7ff fc5b 	bl	8003c26 <__retarget_lock_release_recursive>
 8004370:	89ab      	ldrh	r3, [r5, #12]
 8004372:	065b      	lsls	r3, r3, #25
 8004374:	f53f af12 	bmi.w	800419c <_vfiprintf_r+0x4c>
 8004378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800437a:	e711      	b.n	80041a0 <_vfiprintf_r+0x50>
 800437c:	ab03      	add	r3, sp, #12
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	462a      	mov	r2, r5
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <_vfiprintf_r+0x258>)
 8004384:	a904      	add	r1, sp, #16
 8004386:	4630      	mov	r0, r6
 8004388:	f000 f880 	bl	800448c <_printf_i>
 800438c:	e7e4      	b.n	8004358 <_vfiprintf_r+0x208>
 800438e:	bf00      	nop
 8004390:	08004a50 	.word	0x08004a50
 8004394:	08004a70 	.word	0x08004a70
 8004398:	08004a30 	.word	0x08004a30
 800439c:	08004a90 	.word	0x08004a90
 80043a0:	08004a9a 	.word	0x08004a9a
 80043a4:	00000000 	.word	0x00000000
 80043a8:	0800412b 	.word	0x0800412b
 80043ac:	08004a96 	.word	0x08004a96

080043b0 <_printf_common>:
 80043b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b4:	4616      	mov	r6, r2
 80043b6:	4699      	mov	r9, r3
 80043b8:	688a      	ldr	r2, [r1, #8]
 80043ba:	690b      	ldr	r3, [r1, #16]
 80043bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043c0:	4293      	cmp	r3, r2
 80043c2:	bfb8      	it	lt
 80043c4:	4613      	movlt	r3, r2
 80043c6:	6033      	str	r3, [r6, #0]
 80043c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043cc:	4607      	mov	r7, r0
 80043ce:	460c      	mov	r4, r1
 80043d0:	b10a      	cbz	r2, 80043d6 <_printf_common+0x26>
 80043d2:	3301      	adds	r3, #1
 80043d4:	6033      	str	r3, [r6, #0]
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	0699      	lsls	r1, r3, #26
 80043da:	bf42      	ittt	mi
 80043dc:	6833      	ldrmi	r3, [r6, #0]
 80043de:	3302      	addmi	r3, #2
 80043e0:	6033      	strmi	r3, [r6, #0]
 80043e2:	6825      	ldr	r5, [r4, #0]
 80043e4:	f015 0506 	ands.w	r5, r5, #6
 80043e8:	d106      	bne.n	80043f8 <_printf_common+0x48>
 80043ea:	f104 0a19 	add.w	sl, r4, #25
 80043ee:	68e3      	ldr	r3, [r4, #12]
 80043f0:	6832      	ldr	r2, [r6, #0]
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	42ab      	cmp	r3, r5
 80043f6:	dc26      	bgt.n	8004446 <_printf_common+0x96>
 80043f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043fc:	1e13      	subs	r3, r2, #0
 80043fe:	6822      	ldr	r2, [r4, #0]
 8004400:	bf18      	it	ne
 8004402:	2301      	movne	r3, #1
 8004404:	0692      	lsls	r2, r2, #26
 8004406:	d42b      	bmi.n	8004460 <_printf_common+0xb0>
 8004408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800440c:	4649      	mov	r1, r9
 800440e:	4638      	mov	r0, r7
 8004410:	47c0      	blx	r8
 8004412:	3001      	adds	r0, #1
 8004414:	d01e      	beq.n	8004454 <_printf_common+0xa4>
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	68e5      	ldr	r5, [r4, #12]
 800441a:	6832      	ldr	r2, [r6, #0]
 800441c:	f003 0306 	and.w	r3, r3, #6
 8004420:	2b04      	cmp	r3, #4
 8004422:	bf08      	it	eq
 8004424:	1aad      	subeq	r5, r5, r2
 8004426:	68a3      	ldr	r3, [r4, #8]
 8004428:	6922      	ldr	r2, [r4, #16]
 800442a:	bf0c      	ite	eq
 800442c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004430:	2500      	movne	r5, #0
 8004432:	4293      	cmp	r3, r2
 8004434:	bfc4      	itt	gt
 8004436:	1a9b      	subgt	r3, r3, r2
 8004438:	18ed      	addgt	r5, r5, r3
 800443a:	2600      	movs	r6, #0
 800443c:	341a      	adds	r4, #26
 800443e:	42b5      	cmp	r5, r6
 8004440:	d11a      	bne.n	8004478 <_printf_common+0xc8>
 8004442:	2000      	movs	r0, #0
 8004444:	e008      	b.n	8004458 <_printf_common+0xa8>
 8004446:	2301      	movs	r3, #1
 8004448:	4652      	mov	r2, sl
 800444a:	4649      	mov	r1, r9
 800444c:	4638      	mov	r0, r7
 800444e:	47c0      	blx	r8
 8004450:	3001      	adds	r0, #1
 8004452:	d103      	bne.n	800445c <_printf_common+0xac>
 8004454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445c:	3501      	adds	r5, #1
 800445e:	e7c6      	b.n	80043ee <_printf_common+0x3e>
 8004460:	18e1      	adds	r1, r4, r3
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	2030      	movs	r0, #48	; 0x30
 8004466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800446a:	4422      	add	r2, r4
 800446c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004474:	3302      	adds	r3, #2
 8004476:	e7c7      	b.n	8004408 <_printf_common+0x58>
 8004478:	2301      	movs	r3, #1
 800447a:	4622      	mov	r2, r4
 800447c:	4649      	mov	r1, r9
 800447e:	4638      	mov	r0, r7
 8004480:	47c0      	blx	r8
 8004482:	3001      	adds	r0, #1
 8004484:	d0e6      	beq.n	8004454 <_printf_common+0xa4>
 8004486:	3601      	adds	r6, #1
 8004488:	e7d9      	b.n	800443e <_printf_common+0x8e>
	...

0800448c <_printf_i>:
 800448c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004490:	460c      	mov	r4, r1
 8004492:	4691      	mov	r9, r2
 8004494:	7e27      	ldrb	r7, [r4, #24]
 8004496:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004498:	2f78      	cmp	r7, #120	; 0x78
 800449a:	4680      	mov	r8, r0
 800449c:	469a      	mov	sl, r3
 800449e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044a2:	d807      	bhi.n	80044b4 <_printf_i+0x28>
 80044a4:	2f62      	cmp	r7, #98	; 0x62
 80044a6:	d80a      	bhi.n	80044be <_printf_i+0x32>
 80044a8:	2f00      	cmp	r7, #0
 80044aa:	f000 80d8 	beq.w	800465e <_printf_i+0x1d2>
 80044ae:	2f58      	cmp	r7, #88	; 0x58
 80044b0:	f000 80a3 	beq.w	80045fa <_printf_i+0x16e>
 80044b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044bc:	e03a      	b.n	8004534 <_printf_i+0xa8>
 80044be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044c2:	2b15      	cmp	r3, #21
 80044c4:	d8f6      	bhi.n	80044b4 <_printf_i+0x28>
 80044c6:	a001      	add	r0, pc, #4	; (adr r0, 80044cc <_printf_i+0x40>)
 80044c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80044cc:	08004525 	.word	0x08004525
 80044d0:	08004539 	.word	0x08004539
 80044d4:	080044b5 	.word	0x080044b5
 80044d8:	080044b5 	.word	0x080044b5
 80044dc:	080044b5 	.word	0x080044b5
 80044e0:	080044b5 	.word	0x080044b5
 80044e4:	08004539 	.word	0x08004539
 80044e8:	080044b5 	.word	0x080044b5
 80044ec:	080044b5 	.word	0x080044b5
 80044f0:	080044b5 	.word	0x080044b5
 80044f4:	080044b5 	.word	0x080044b5
 80044f8:	08004645 	.word	0x08004645
 80044fc:	08004569 	.word	0x08004569
 8004500:	08004627 	.word	0x08004627
 8004504:	080044b5 	.word	0x080044b5
 8004508:	080044b5 	.word	0x080044b5
 800450c:	08004667 	.word	0x08004667
 8004510:	080044b5 	.word	0x080044b5
 8004514:	08004569 	.word	0x08004569
 8004518:	080044b5 	.word	0x080044b5
 800451c:	080044b5 	.word	0x080044b5
 8004520:	0800462f 	.word	0x0800462f
 8004524:	680b      	ldr	r3, [r1, #0]
 8004526:	1d1a      	adds	r2, r3, #4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	600a      	str	r2, [r1, #0]
 800452c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004534:	2301      	movs	r3, #1
 8004536:	e0a3      	b.n	8004680 <_printf_i+0x1f4>
 8004538:	6825      	ldr	r5, [r4, #0]
 800453a:	6808      	ldr	r0, [r1, #0]
 800453c:	062e      	lsls	r6, r5, #24
 800453e:	f100 0304 	add.w	r3, r0, #4
 8004542:	d50a      	bpl.n	800455a <_printf_i+0xce>
 8004544:	6805      	ldr	r5, [r0, #0]
 8004546:	600b      	str	r3, [r1, #0]
 8004548:	2d00      	cmp	r5, #0
 800454a:	da03      	bge.n	8004554 <_printf_i+0xc8>
 800454c:	232d      	movs	r3, #45	; 0x2d
 800454e:	426d      	negs	r5, r5
 8004550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004554:	485e      	ldr	r0, [pc, #376]	; (80046d0 <_printf_i+0x244>)
 8004556:	230a      	movs	r3, #10
 8004558:	e019      	b.n	800458e <_printf_i+0x102>
 800455a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800455e:	6805      	ldr	r5, [r0, #0]
 8004560:	600b      	str	r3, [r1, #0]
 8004562:	bf18      	it	ne
 8004564:	b22d      	sxthne	r5, r5
 8004566:	e7ef      	b.n	8004548 <_printf_i+0xbc>
 8004568:	680b      	ldr	r3, [r1, #0]
 800456a:	6825      	ldr	r5, [r4, #0]
 800456c:	1d18      	adds	r0, r3, #4
 800456e:	6008      	str	r0, [r1, #0]
 8004570:	0628      	lsls	r0, r5, #24
 8004572:	d501      	bpl.n	8004578 <_printf_i+0xec>
 8004574:	681d      	ldr	r5, [r3, #0]
 8004576:	e002      	b.n	800457e <_printf_i+0xf2>
 8004578:	0669      	lsls	r1, r5, #25
 800457a:	d5fb      	bpl.n	8004574 <_printf_i+0xe8>
 800457c:	881d      	ldrh	r5, [r3, #0]
 800457e:	4854      	ldr	r0, [pc, #336]	; (80046d0 <_printf_i+0x244>)
 8004580:	2f6f      	cmp	r7, #111	; 0x6f
 8004582:	bf0c      	ite	eq
 8004584:	2308      	moveq	r3, #8
 8004586:	230a      	movne	r3, #10
 8004588:	2100      	movs	r1, #0
 800458a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800458e:	6866      	ldr	r6, [r4, #4]
 8004590:	60a6      	str	r6, [r4, #8]
 8004592:	2e00      	cmp	r6, #0
 8004594:	bfa2      	ittt	ge
 8004596:	6821      	ldrge	r1, [r4, #0]
 8004598:	f021 0104 	bicge.w	r1, r1, #4
 800459c:	6021      	strge	r1, [r4, #0]
 800459e:	b90d      	cbnz	r5, 80045a4 <_printf_i+0x118>
 80045a0:	2e00      	cmp	r6, #0
 80045a2:	d04d      	beq.n	8004640 <_printf_i+0x1b4>
 80045a4:	4616      	mov	r6, r2
 80045a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80045aa:	fb03 5711 	mls	r7, r3, r1, r5
 80045ae:	5dc7      	ldrb	r7, [r0, r7]
 80045b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045b4:	462f      	mov	r7, r5
 80045b6:	42bb      	cmp	r3, r7
 80045b8:	460d      	mov	r5, r1
 80045ba:	d9f4      	bls.n	80045a6 <_printf_i+0x11a>
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d10b      	bne.n	80045d8 <_printf_i+0x14c>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	07df      	lsls	r7, r3, #31
 80045c4:	d508      	bpl.n	80045d8 <_printf_i+0x14c>
 80045c6:	6923      	ldr	r3, [r4, #16]
 80045c8:	6861      	ldr	r1, [r4, #4]
 80045ca:	4299      	cmp	r1, r3
 80045cc:	bfde      	ittt	le
 80045ce:	2330      	movle	r3, #48	; 0x30
 80045d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045d4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80045d8:	1b92      	subs	r2, r2, r6
 80045da:	6122      	str	r2, [r4, #16]
 80045dc:	f8cd a000 	str.w	sl, [sp]
 80045e0:	464b      	mov	r3, r9
 80045e2:	aa03      	add	r2, sp, #12
 80045e4:	4621      	mov	r1, r4
 80045e6:	4640      	mov	r0, r8
 80045e8:	f7ff fee2 	bl	80043b0 <_printf_common>
 80045ec:	3001      	adds	r0, #1
 80045ee:	d14c      	bne.n	800468a <_printf_i+0x1fe>
 80045f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045f4:	b004      	add	sp, #16
 80045f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045fa:	4835      	ldr	r0, [pc, #212]	; (80046d0 <_printf_i+0x244>)
 80045fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	680e      	ldr	r6, [r1, #0]
 8004604:	061f      	lsls	r7, r3, #24
 8004606:	f856 5b04 	ldr.w	r5, [r6], #4
 800460a:	600e      	str	r6, [r1, #0]
 800460c:	d514      	bpl.n	8004638 <_printf_i+0x1ac>
 800460e:	07d9      	lsls	r1, r3, #31
 8004610:	bf44      	itt	mi
 8004612:	f043 0320 	orrmi.w	r3, r3, #32
 8004616:	6023      	strmi	r3, [r4, #0]
 8004618:	b91d      	cbnz	r5, 8004622 <_printf_i+0x196>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	f023 0320 	bic.w	r3, r3, #32
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	2310      	movs	r3, #16
 8004624:	e7b0      	b.n	8004588 <_printf_i+0xfc>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	f043 0320 	orr.w	r3, r3, #32
 800462c:	6023      	str	r3, [r4, #0]
 800462e:	2378      	movs	r3, #120	; 0x78
 8004630:	4828      	ldr	r0, [pc, #160]	; (80046d4 <_printf_i+0x248>)
 8004632:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004636:	e7e3      	b.n	8004600 <_printf_i+0x174>
 8004638:	065e      	lsls	r6, r3, #25
 800463a:	bf48      	it	mi
 800463c:	b2ad      	uxthmi	r5, r5
 800463e:	e7e6      	b.n	800460e <_printf_i+0x182>
 8004640:	4616      	mov	r6, r2
 8004642:	e7bb      	b.n	80045bc <_printf_i+0x130>
 8004644:	680b      	ldr	r3, [r1, #0]
 8004646:	6826      	ldr	r6, [r4, #0]
 8004648:	6960      	ldr	r0, [r4, #20]
 800464a:	1d1d      	adds	r5, r3, #4
 800464c:	600d      	str	r5, [r1, #0]
 800464e:	0635      	lsls	r5, r6, #24
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	d501      	bpl.n	8004658 <_printf_i+0x1cc>
 8004654:	6018      	str	r0, [r3, #0]
 8004656:	e002      	b.n	800465e <_printf_i+0x1d2>
 8004658:	0671      	lsls	r1, r6, #25
 800465a:	d5fb      	bpl.n	8004654 <_printf_i+0x1c8>
 800465c:	8018      	strh	r0, [r3, #0]
 800465e:	2300      	movs	r3, #0
 8004660:	6123      	str	r3, [r4, #16]
 8004662:	4616      	mov	r6, r2
 8004664:	e7ba      	b.n	80045dc <_printf_i+0x150>
 8004666:	680b      	ldr	r3, [r1, #0]
 8004668:	1d1a      	adds	r2, r3, #4
 800466a:	600a      	str	r2, [r1, #0]
 800466c:	681e      	ldr	r6, [r3, #0]
 800466e:	6862      	ldr	r2, [r4, #4]
 8004670:	2100      	movs	r1, #0
 8004672:	4630      	mov	r0, r6
 8004674:	f7fb fdac 	bl	80001d0 <memchr>
 8004678:	b108      	cbz	r0, 800467e <_printf_i+0x1f2>
 800467a:	1b80      	subs	r0, r0, r6
 800467c:	6060      	str	r0, [r4, #4]
 800467e:	6863      	ldr	r3, [r4, #4]
 8004680:	6123      	str	r3, [r4, #16]
 8004682:	2300      	movs	r3, #0
 8004684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004688:	e7a8      	b.n	80045dc <_printf_i+0x150>
 800468a:	6923      	ldr	r3, [r4, #16]
 800468c:	4632      	mov	r2, r6
 800468e:	4649      	mov	r1, r9
 8004690:	4640      	mov	r0, r8
 8004692:	47d0      	blx	sl
 8004694:	3001      	adds	r0, #1
 8004696:	d0ab      	beq.n	80045f0 <_printf_i+0x164>
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	079b      	lsls	r3, r3, #30
 800469c:	d413      	bmi.n	80046c6 <_printf_i+0x23a>
 800469e:	68e0      	ldr	r0, [r4, #12]
 80046a0:	9b03      	ldr	r3, [sp, #12]
 80046a2:	4298      	cmp	r0, r3
 80046a4:	bfb8      	it	lt
 80046a6:	4618      	movlt	r0, r3
 80046a8:	e7a4      	b.n	80045f4 <_printf_i+0x168>
 80046aa:	2301      	movs	r3, #1
 80046ac:	4632      	mov	r2, r6
 80046ae:	4649      	mov	r1, r9
 80046b0:	4640      	mov	r0, r8
 80046b2:	47d0      	blx	sl
 80046b4:	3001      	adds	r0, #1
 80046b6:	d09b      	beq.n	80045f0 <_printf_i+0x164>
 80046b8:	3501      	adds	r5, #1
 80046ba:	68e3      	ldr	r3, [r4, #12]
 80046bc:	9903      	ldr	r1, [sp, #12]
 80046be:	1a5b      	subs	r3, r3, r1
 80046c0:	42ab      	cmp	r3, r5
 80046c2:	dcf2      	bgt.n	80046aa <_printf_i+0x21e>
 80046c4:	e7eb      	b.n	800469e <_printf_i+0x212>
 80046c6:	2500      	movs	r5, #0
 80046c8:	f104 0619 	add.w	r6, r4, #25
 80046cc:	e7f5      	b.n	80046ba <_printf_i+0x22e>
 80046ce:	bf00      	nop
 80046d0:	08004aa1 	.word	0x08004aa1
 80046d4:	08004ab2 	.word	0x08004ab2

080046d8 <_sbrk_r>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	4d06      	ldr	r5, [pc, #24]	; (80046f4 <_sbrk_r+0x1c>)
 80046dc:	2300      	movs	r3, #0
 80046de:	4604      	mov	r4, r0
 80046e0:	4608      	mov	r0, r1
 80046e2:	602b      	str	r3, [r5, #0]
 80046e4:	f7fc ff40 	bl	8001568 <_sbrk>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_sbrk_r+0x1a>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_sbrk_r+0x1a>
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	2000048c 	.word	0x2000048c

080046f8 <__sread>:
 80046f8:	b510      	push	{r4, lr}
 80046fa:	460c      	mov	r4, r1
 80046fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004700:	f000 f8e0 	bl	80048c4 <_read_r>
 8004704:	2800      	cmp	r0, #0
 8004706:	bfab      	itete	ge
 8004708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800470a:	89a3      	ldrhlt	r3, [r4, #12]
 800470c:	181b      	addge	r3, r3, r0
 800470e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004712:	bfac      	ite	ge
 8004714:	6563      	strge	r3, [r4, #84]	; 0x54
 8004716:	81a3      	strhlt	r3, [r4, #12]
 8004718:	bd10      	pop	{r4, pc}

0800471a <__swrite>:
 800471a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800471e:	461f      	mov	r7, r3
 8004720:	898b      	ldrh	r3, [r1, #12]
 8004722:	05db      	lsls	r3, r3, #23
 8004724:	4605      	mov	r5, r0
 8004726:	460c      	mov	r4, r1
 8004728:	4616      	mov	r6, r2
 800472a:	d505      	bpl.n	8004738 <__swrite+0x1e>
 800472c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004730:	2302      	movs	r3, #2
 8004732:	2200      	movs	r2, #0
 8004734:	f000 f868 	bl	8004808 <_lseek_r>
 8004738:	89a3      	ldrh	r3, [r4, #12]
 800473a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800473e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004742:	81a3      	strh	r3, [r4, #12]
 8004744:	4632      	mov	r2, r6
 8004746:	463b      	mov	r3, r7
 8004748:	4628      	mov	r0, r5
 800474a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800474e:	f000 b817 	b.w	8004780 <_write_r>

08004752 <__sseek>:
 8004752:	b510      	push	{r4, lr}
 8004754:	460c      	mov	r4, r1
 8004756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800475a:	f000 f855 	bl	8004808 <_lseek_r>
 800475e:	1c43      	adds	r3, r0, #1
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	bf15      	itete	ne
 8004764:	6560      	strne	r0, [r4, #84]	; 0x54
 8004766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800476a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800476e:	81a3      	strheq	r3, [r4, #12]
 8004770:	bf18      	it	ne
 8004772:	81a3      	strhne	r3, [r4, #12]
 8004774:	bd10      	pop	{r4, pc}

08004776 <__sclose>:
 8004776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477a:	f000 b813 	b.w	80047a4 <_close_r>
	...

08004780 <_write_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4d07      	ldr	r5, [pc, #28]	; (80047a0 <_write_r+0x20>)
 8004784:	4604      	mov	r4, r0
 8004786:	4608      	mov	r0, r1
 8004788:	4611      	mov	r1, r2
 800478a:	2200      	movs	r2, #0
 800478c:	602a      	str	r2, [r5, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f7fc fbdc 	bl	8000f4c <_write>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_write_r+0x1e>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	b103      	cbz	r3, 800479e <_write_r+0x1e>
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	2000048c 	.word	0x2000048c

080047a4 <_close_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4d06      	ldr	r5, [pc, #24]	; (80047c0 <_close_r+0x1c>)
 80047a8:	2300      	movs	r3, #0
 80047aa:	4604      	mov	r4, r0
 80047ac:	4608      	mov	r0, r1
 80047ae:	602b      	str	r3, [r5, #0]
 80047b0:	f7fc fea5 	bl	80014fe <_close>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d102      	bne.n	80047be <_close_r+0x1a>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	b103      	cbz	r3, 80047be <_close_r+0x1a>
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	2000048c 	.word	0x2000048c

080047c4 <_fstat_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4d07      	ldr	r5, [pc, #28]	; (80047e4 <_fstat_r+0x20>)
 80047c8:	2300      	movs	r3, #0
 80047ca:	4604      	mov	r4, r0
 80047cc:	4608      	mov	r0, r1
 80047ce:	4611      	mov	r1, r2
 80047d0:	602b      	str	r3, [r5, #0]
 80047d2:	f7fc fea0 	bl	8001516 <_fstat>
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	d102      	bne.n	80047e0 <_fstat_r+0x1c>
 80047da:	682b      	ldr	r3, [r5, #0]
 80047dc:	b103      	cbz	r3, 80047e0 <_fstat_r+0x1c>
 80047de:	6023      	str	r3, [r4, #0]
 80047e0:	bd38      	pop	{r3, r4, r5, pc}
 80047e2:	bf00      	nop
 80047e4:	2000048c 	.word	0x2000048c

080047e8 <_isatty_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4d06      	ldr	r5, [pc, #24]	; (8004804 <_isatty_r+0x1c>)
 80047ec:	2300      	movs	r3, #0
 80047ee:	4604      	mov	r4, r0
 80047f0:	4608      	mov	r0, r1
 80047f2:	602b      	str	r3, [r5, #0]
 80047f4:	f7fc fe9f 	bl	8001536 <_isatty>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d102      	bne.n	8004802 <_isatty_r+0x1a>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	b103      	cbz	r3, 8004802 <_isatty_r+0x1a>
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	2000048c 	.word	0x2000048c

08004808 <_lseek_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4d07      	ldr	r5, [pc, #28]	; (8004828 <_lseek_r+0x20>)
 800480c:	4604      	mov	r4, r0
 800480e:	4608      	mov	r0, r1
 8004810:	4611      	mov	r1, r2
 8004812:	2200      	movs	r2, #0
 8004814:	602a      	str	r2, [r5, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	f7fc fe98 	bl	800154c <_lseek>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_lseek_r+0x1e>
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	b103      	cbz	r3, 8004826 <_lseek_r+0x1e>
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	2000048c 	.word	0x2000048c

0800482c <memmove>:
 800482c:	4288      	cmp	r0, r1
 800482e:	b510      	push	{r4, lr}
 8004830:	eb01 0402 	add.w	r4, r1, r2
 8004834:	d902      	bls.n	800483c <memmove+0x10>
 8004836:	4284      	cmp	r4, r0
 8004838:	4623      	mov	r3, r4
 800483a:	d807      	bhi.n	800484c <memmove+0x20>
 800483c:	1e43      	subs	r3, r0, #1
 800483e:	42a1      	cmp	r1, r4
 8004840:	d008      	beq.n	8004854 <memmove+0x28>
 8004842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004846:	f803 2f01 	strb.w	r2, [r3, #1]!
 800484a:	e7f8      	b.n	800483e <memmove+0x12>
 800484c:	4402      	add	r2, r0
 800484e:	4601      	mov	r1, r0
 8004850:	428a      	cmp	r2, r1
 8004852:	d100      	bne.n	8004856 <memmove+0x2a>
 8004854:	bd10      	pop	{r4, pc}
 8004856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800485a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800485e:	e7f7      	b.n	8004850 <memmove+0x24>

08004860 <__malloc_lock>:
 8004860:	4801      	ldr	r0, [pc, #4]	; (8004868 <__malloc_lock+0x8>)
 8004862:	f7ff b9df 	b.w	8003c24 <__retarget_lock_acquire_recursive>
 8004866:	bf00      	nop
 8004868:	20000484 	.word	0x20000484

0800486c <__malloc_unlock>:
 800486c:	4801      	ldr	r0, [pc, #4]	; (8004874 <__malloc_unlock+0x8>)
 800486e:	f7ff b9da 	b.w	8003c26 <__retarget_lock_release_recursive>
 8004872:	bf00      	nop
 8004874:	20000484 	.word	0x20000484

08004878 <_realloc_r>:
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	4607      	mov	r7, r0
 800487c:	4614      	mov	r4, r2
 800487e:	460e      	mov	r6, r1
 8004880:	b921      	cbnz	r1, 800488c <_realloc_r+0x14>
 8004882:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004886:	4611      	mov	r1, r2
 8004888:	f7ff ba82 	b.w	8003d90 <_malloc_r>
 800488c:	b922      	cbnz	r2, 8004898 <_realloc_r+0x20>
 800488e:	f7ff fa2f 	bl	8003cf0 <_free_r>
 8004892:	4625      	mov	r5, r4
 8004894:	4628      	mov	r0, r5
 8004896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004898:	f000 f826 	bl	80048e8 <_malloc_usable_size_r>
 800489c:	42a0      	cmp	r0, r4
 800489e:	d20f      	bcs.n	80048c0 <_realloc_r+0x48>
 80048a0:	4621      	mov	r1, r4
 80048a2:	4638      	mov	r0, r7
 80048a4:	f7ff fa74 	bl	8003d90 <_malloc_r>
 80048a8:	4605      	mov	r5, r0
 80048aa:	2800      	cmp	r0, #0
 80048ac:	d0f2      	beq.n	8004894 <_realloc_r+0x1c>
 80048ae:	4631      	mov	r1, r6
 80048b0:	4622      	mov	r2, r4
 80048b2:	f7fe fe7b 	bl	80035ac <memcpy>
 80048b6:	4631      	mov	r1, r6
 80048b8:	4638      	mov	r0, r7
 80048ba:	f7ff fa19 	bl	8003cf0 <_free_r>
 80048be:	e7e9      	b.n	8004894 <_realloc_r+0x1c>
 80048c0:	4635      	mov	r5, r6
 80048c2:	e7e7      	b.n	8004894 <_realloc_r+0x1c>

080048c4 <_read_r>:
 80048c4:	b538      	push	{r3, r4, r5, lr}
 80048c6:	4d07      	ldr	r5, [pc, #28]	; (80048e4 <_read_r+0x20>)
 80048c8:	4604      	mov	r4, r0
 80048ca:	4608      	mov	r0, r1
 80048cc:	4611      	mov	r1, r2
 80048ce:	2200      	movs	r2, #0
 80048d0:	602a      	str	r2, [r5, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f7fc fdf6 	bl	80014c4 <_read>
 80048d8:	1c43      	adds	r3, r0, #1
 80048da:	d102      	bne.n	80048e2 <_read_r+0x1e>
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	b103      	cbz	r3, 80048e2 <_read_r+0x1e>
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	2000048c 	.word	0x2000048c

080048e8 <_malloc_usable_size_r>:
 80048e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ec:	1f18      	subs	r0, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bfbc      	itt	lt
 80048f2:	580b      	ldrlt	r3, [r1, r0]
 80048f4:	18c0      	addlt	r0, r0, r3
 80048f6:	4770      	bx	lr

080048f8 <_init>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	bf00      	nop
 80048fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fe:	bc08      	pop	{r3}
 8004900:	469e      	mov	lr, r3
 8004902:	4770      	bx	lr

08004904 <_fini>:
 8004904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004906:	bf00      	nop
 8004908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490a:	bc08      	pop	{r3}
 800490c:	469e      	mov	lr, r3
 800490e:	4770      	bx	lr
