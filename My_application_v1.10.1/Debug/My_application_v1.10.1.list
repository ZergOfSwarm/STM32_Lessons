
My_application_v1.10.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f4  90000298  90000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  9000588c  9000588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  9000594c  9000594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  90005954  90005954  00015954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  90005958  90005958  00015958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  9000595c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c8  24000074  900059d0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400013c  900059d0  0002013c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000101cd  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ed3  00000000  00000000  0003026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ad0  00000000  00000000  00032148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a18  00000000  00000000  00032c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036a6a  00000000  00000000  00033630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e2ed  00000000  00000000  0006a09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001599ce  00000000  00000000  00078387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d1d55  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000324c  00000000  00000000  001d1da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

90000298 <__do_global_dtors_aux>:
90000298:	b510      	push	{r4, lr}
9000029a:	4c05      	ldr	r4, [pc, #20]	; (900002b0 <__do_global_dtors_aux+0x18>)
9000029c:	7823      	ldrb	r3, [r4, #0]
9000029e:	b933      	cbnz	r3, 900002ae <__do_global_dtors_aux+0x16>
900002a0:	4b04      	ldr	r3, [pc, #16]	; (900002b4 <__do_global_dtors_aux+0x1c>)
900002a2:	b113      	cbz	r3, 900002aa <__do_global_dtors_aux+0x12>
900002a4:	4804      	ldr	r0, [pc, #16]	; (900002b8 <__do_global_dtors_aux+0x20>)
900002a6:	f3af 8000 	nop.w
900002aa:	2301      	movs	r3, #1
900002ac:	7023      	strb	r3, [r4, #0]
900002ae:	bd10      	pop	{r4, pc}
900002b0:	24000074 	.word	0x24000074
900002b4:	00000000 	.word	0x00000000
900002b8:	90005874 	.word	0x90005874

900002bc <frame_dummy>:
900002bc:	b508      	push	{r3, lr}
900002be:	4b03      	ldr	r3, [pc, #12]	; (900002cc <frame_dummy+0x10>)
900002c0:	b11b      	cbz	r3, 900002ca <frame_dummy+0xe>
900002c2:	4903      	ldr	r1, [pc, #12]	; (900002d0 <frame_dummy+0x14>)
900002c4:	4803      	ldr	r0, [pc, #12]	; (900002d4 <frame_dummy+0x18>)
900002c6:	f3af 8000 	nop.w
900002ca:	bd08      	pop	{r3, pc}
900002cc:	00000000 	.word	0x00000000
900002d0:	24000078 	.word	0x24000078
900002d4:	90005874 	.word	0x90005874

900002d8 <__aeabi_uldivmod>:
900002d8:	b953      	cbnz	r3, 900002f0 <__aeabi_uldivmod+0x18>
900002da:	b94a      	cbnz	r2, 900002f0 <__aeabi_uldivmod+0x18>
900002dc:	2900      	cmp	r1, #0
900002de:	bf08      	it	eq
900002e0:	2800      	cmpeq	r0, #0
900002e2:	bf1c      	itt	ne
900002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
900002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
900002ec:	f000 b974 	b.w	900005d8 <__aeabi_idiv0>
900002f0:	f1ad 0c08 	sub.w	ip, sp, #8
900002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900002f8:	f000 f806 	bl	90000308 <__udivmoddi4>
900002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
90000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
90000304:	b004      	add	sp, #16
90000306:	4770      	bx	lr

90000308 <__udivmoddi4>:
90000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000030c:	9d08      	ldr	r5, [sp, #32]
9000030e:	4604      	mov	r4, r0
90000310:	468e      	mov	lr, r1
90000312:	2b00      	cmp	r3, #0
90000314:	d14d      	bne.n	900003b2 <__udivmoddi4+0xaa>
90000316:	428a      	cmp	r2, r1
90000318:	4694      	mov	ip, r2
9000031a:	d969      	bls.n	900003f0 <__udivmoddi4+0xe8>
9000031c:	fab2 f282 	clz	r2, r2
90000320:	b152      	cbz	r2, 90000338 <__udivmoddi4+0x30>
90000322:	fa01 f302 	lsl.w	r3, r1, r2
90000326:	f1c2 0120 	rsb	r1, r2, #32
9000032a:	fa20 f101 	lsr.w	r1, r0, r1
9000032e:	fa0c fc02 	lsl.w	ip, ip, r2
90000332:	ea41 0e03 	orr.w	lr, r1, r3
90000336:	4094      	lsls	r4, r2
90000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
9000033c:	0c21      	lsrs	r1, r4, #16
9000033e:	fbbe f6f8 	udiv	r6, lr, r8
90000342:	fa1f f78c 	uxth.w	r7, ip
90000346:	fb08 e316 	mls	r3, r8, r6, lr
9000034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
9000034e:	fb06 f107 	mul.w	r1, r6, r7
90000352:	4299      	cmp	r1, r3
90000354:	d90a      	bls.n	9000036c <__udivmoddi4+0x64>
90000356:	eb1c 0303 	adds.w	r3, ip, r3
9000035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
9000035e:	f080 811f 	bcs.w	900005a0 <__udivmoddi4+0x298>
90000362:	4299      	cmp	r1, r3
90000364:	f240 811c 	bls.w	900005a0 <__udivmoddi4+0x298>
90000368:	3e02      	subs	r6, #2
9000036a:	4463      	add	r3, ip
9000036c:	1a5b      	subs	r3, r3, r1
9000036e:	b2a4      	uxth	r4, r4
90000370:	fbb3 f0f8 	udiv	r0, r3, r8
90000374:	fb08 3310 	mls	r3, r8, r0, r3
90000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
9000037c:	fb00 f707 	mul.w	r7, r0, r7
90000380:	42a7      	cmp	r7, r4
90000382:	d90a      	bls.n	9000039a <__udivmoddi4+0x92>
90000384:	eb1c 0404 	adds.w	r4, ip, r4
90000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
9000038c:	f080 810a 	bcs.w	900005a4 <__udivmoddi4+0x29c>
90000390:	42a7      	cmp	r7, r4
90000392:	f240 8107 	bls.w	900005a4 <__udivmoddi4+0x29c>
90000396:	4464      	add	r4, ip
90000398:	3802      	subs	r0, #2
9000039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
9000039e:	1be4      	subs	r4, r4, r7
900003a0:	2600      	movs	r6, #0
900003a2:	b11d      	cbz	r5, 900003ac <__udivmoddi4+0xa4>
900003a4:	40d4      	lsrs	r4, r2
900003a6:	2300      	movs	r3, #0
900003a8:	e9c5 4300 	strd	r4, r3, [r5]
900003ac:	4631      	mov	r1, r6
900003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900003b2:	428b      	cmp	r3, r1
900003b4:	d909      	bls.n	900003ca <__udivmoddi4+0xc2>
900003b6:	2d00      	cmp	r5, #0
900003b8:	f000 80ef 	beq.w	9000059a <__udivmoddi4+0x292>
900003bc:	2600      	movs	r6, #0
900003be:	e9c5 0100 	strd	r0, r1, [r5]
900003c2:	4630      	mov	r0, r6
900003c4:	4631      	mov	r1, r6
900003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900003ca:	fab3 f683 	clz	r6, r3
900003ce:	2e00      	cmp	r6, #0
900003d0:	d14a      	bne.n	90000468 <__udivmoddi4+0x160>
900003d2:	428b      	cmp	r3, r1
900003d4:	d302      	bcc.n	900003dc <__udivmoddi4+0xd4>
900003d6:	4282      	cmp	r2, r0
900003d8:	f200 80f9 	bhi.w	900005ce <__udivmoddi4+0x2c6>
900003dc:	1a84      	subs	r4, r0, r2
900003de:	eb61 0303 	sbc.w	r3, r1, r3
900003e2:	2001      	movs	r0, #1
900003e4:	469e      	mov	lr, r3
900003e6:	2d00      	cmp	r5, #0
900003e8:	d0e0      	beq.n	900003ac <__udivmoddi4+0xa4>
900003ea:	e9c5 4e00 	strd	r4, lr, [r5]
900003ee:	e7dd      	b.n	900003ac <__udivmoddi4+0xa4>
900003f0:	b902      	cbnz	r2, 900003f4 <__udivmoddi4+0xec>
900003f2:	deff      	udf	#255	; 0xff
900003f4:	fab2 f282 	clz	r2, r2
900003f8:	2a00      	cmp	r2, #0
900003fa:	f040 8092 	bne.w	90000522 <__udivmoddi4+0x21a>
900003fe:	eba1 010c 	sub.w	r1, r1, ip
90000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
90000406:	fa1f fe8c 	uxth.w	lr, ip
9000040a:	2601      	movs	r6, #1
9000040c:	0c20      	lsrs	r0, r4, #16
9000040e:	fbb1 f3f7 	udiv	r3, r1, r7
90000412:	fb07 1113 	mls	r1, r7, r3, r1
90000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
9000041a:	fb0e f003 	mul.w	r0, lr, r3
9000041e:	4288      	cmp	r0, r1
90000420:	d908      	bls.n	90000434 <__udivmoddi4+0x12c>
90000422:	eb1c 0101 	adds.w	r1, ip, r1
90000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
9000042a:	d202      	bcs.n	90000432 <__udivmoddi4+0x12a>
9000042c:	4288      	cmp	r0, r1
9000042e:	f200 80cb 	bhi.w	900005c8 <__udivmoddi4+0x2c0>
90000432:	4643      	mov	r3, r8
90000434:	1a09      	subs	r1, r1, r0
90000436:	b2a4      	uxth	r4, r4
90000438:	fbb1 f0f7 	udiv	r0, r1, r7
9000043c:	fb07 1110 	mls	r1, r7, r0, r1
90000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
90000444:	fb0e fe00 	mul.w	lr, lr, r0
90000448:	45a6      	cmp	lr, r4
9000044a:	d908      	bls.n	9000045e <__udivmoddi4+0x156>
9000044c:	eb1c 0404 	adds.w	r4, ip, r4
90000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
90000454:	d202      	bcs.n	9000045c <__udivmoddi4+0x154>
90000456:	45a6      	cmp	lr, r4
90000458:	f200 80bb 	bhi.w	900005d2 <__udivmoddi4+0x2ca>
9000045c:	4608      	mov	r0, r1
9000045e:	eba4 040e 	sub.w	r4, r4, lr
90000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
90000466:	e79c      	b.n	900003a2 <__udivmoddi4+0x9a>
90000468:	f1c6 0720 	rsb	r7, r6, #32
9000046c:	40b3      	lsls	r3, r6
9000046e:	fa22 fc07 	lsr.w	ip, r2, r7
90000472:	ea4c 0c03 	orr.w	ip, ip, r3
90000476:	fa20 f407 	lsr.w	r4, r0, r7
9000047a:	fa01 f306 	lsl.w	r3, r1, r6
9000047e:	431c      	orrs	r4, r3
90000480:	40f9      	lsrs	r1, r7
90000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
90000486:	fa00 f306 	lsl.w	r3, r0, r6
9000048a:	fbb1 f8f9 	udiv	r8, r1, r9
9000048e:	0c20      	lsrs	r0, r4, #16
90000490:	fa1f fe8c 	uxth.w	lr, ip
90000494:	fb09 1118 	mls	r1, r9, r8, r1
90000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
9000049c:	fb08 f00e 	mul.w	r0, r8, lr
900004a0:	4288      	cmp	r0, r1
900004a2:	fa02 f206 	lsl.w	r2, r2, r6
900004a6:	d90b      	bls.n	900004c0 <__udivmoddi4+0x1b8>
900004a8:	eb1c 0101 	adds.w	r1, ip, r1
900004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
900004b0:	f080 8088 	bcs.w	900005c4 <__udivmoddi4+0x2bc>
900004b4:	4288      	cmp	r0, r1
900004b6:	f240 8085 	bls.w	900005c4 <__udivmoddi4+0x2bc>
900004ba:	f1a8 0802 	sub.w	r8, r8, #2
900004be:	4461      	add	r1, ip
900004c0:	1a09      	subs	r1, r1, r0
900004c2:	b2a4      	uxth	r4, r4
900004c4:	fbb1 f0f9 	udiv	r0, r1, r9
900004c8:	fb09 1110 	mls	r1, r9, r0, r1
900004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
900004d0:	fb00 fe0e 	mul.w	lr, r0, lr
900004d4:	458e      	cmp	lr, r1
900004d6:	d908      	bls.n	900004ea <__udivmoddi4+0x1e2>
900004d8:	eb1c 0101 	adds.w	r1, ip, r1
900004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
900004e0:	d26c      	bcs.n	900005bc <__udivmoddi4+0x2b4>
900004e2:	458e      	cmp	lr, r1
900004e4:	d96a      	bls.n	900005bc <__udivmoddi4+0x2b4>
900004e6:	3802      	subs	r0, #2
900004e8:	4461      	add	r1, ip
900004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
900004ee:	fba0 9402 	umull	r9, r4, r0, r2
900004f2:	eba1 010e 	sub.w	r1, r1, lr
900004f6:	42a1      	cmp	r1, r4
900004f8:	46c8      	mov	r8, r9
900004fa:	46a6      	mov	lr, r4
900004fc:	d356      	bcc.n	900005ac <__udivmoddi4+0x2a4>
900004fe:	d053      	beq.n	900005a8 <__udivmoddi4+0x2a0>
90000500:	b15d      	cbz	r5, 9000051a <__udivmoddi4+0x212>
90000502:	ebb3 0208 	subs.w	r2, r3, r8
90000506:	eb61 010e 	sbc.w	r1, r1, lr
9000050a:	fa01 f707 	lsl.w	r7, r1, r7
9000050e:	fa22 f306 	lsr.w	r3, r2, r6
90000512:	40f1      	lsrs	r1, r6
90000514:	431f      	orrs	r7, r3
90000516:	e9c5 7100 	strd	r7, r1, [r5]
9000051a:	2600      	movs	r6, #0
9000051c:	4631      	mov	r1, r6
9000051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000522:	f1c2 0320 	rsb	r3, r2, #32
90000526:	40d8      	lsrs	r0, r3
90000528:	fa0c fc02 	lsl.w	ip, ip, r2
9000052c:	fa21 f303 	lsr.w	r3, r1, r3
90000530:	4091      	lsls	r1, r2
90000532:	4301      	orrs	r1, r0
90000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
90000538:	fa1f fe8c 	uxth.w	lr, ip
9000053c:	fbb3 f0f7 	udiv	r0, r3, r7
90000540:	fb07 3610 	mls	r6, r7, r0, r3
90000544:	0c0b      	lsrs	r3, r1, #16
90000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
9000054a:	fb00 f60e 	mul.w	r6, r0, lr
9000054e:	429e      	cmp	r6, r3
90000550:	fa04 f402 	lsl.w	r4, r4, r2
90000554:	d908      	bls.n	90000568 <__udivmoddi4+0x260>
90000556:	eb1c 0303 	adds.w	r3, ip, r3
9000055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
9000055e:	d22f      	bcs.n	900005c0 <__udivmoddi4+0x2b8>
90000560:	429e      	cmp	r6, r3
90000562:	d92d      	bls.n	900005c0 <__udivmoddi4+0x2b8>
90000564:	3802      	subs	r0, #2
90000566:	4463      	add	r3, ip
90000568:	1b9b      	subs	r3, r3, r6
9000056a:	b289      	uxth	r1, r1
9000056c:	fbb3 f6f7 	udiv	r6, r3, r7
90000570:	fb07 3316 	mls	r3, r7, r6, r3
90000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000578:	fb06 f30e 	mul.w	r3, r6, lr
9000057c:	428b      	cmp	r3, r1
9000057e:	d908      	bls.n	90000592 <__udivmoddi4+0x28a>
90000580:	eb1c 0101 	adds.w	r1, ip, r1
90000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
90000588:	d216      	bcs.n	900005b8 <__udivmoddi4+0x2b0>
9000058a:	428b      	cmp	r3, r1
9000058c:	d914      	bls.n	900005b8 <__udivmoddi4+0x2b0>
9000058e:	3e02      	subs	r6, #2
90000590:	4461      	add	r1, ip
90000592:	1ac9      	subs	r1, r1, r3
90000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
90000598:	e738      	b.n	9000040c <__udivmoddi4+0x104>
9000059a:	462e      	mov	r6, r5
9000059c:	4628      	mov	r0, r5
9000059e:	e705      	b.n	900003ac <__udivmoddi4+0xa4>
900005a0:	4606      	mov	r6, r0
900005a2:	e6e3      	b.n	9000036c <__udivmoddi4+0x64>
900005a4:	4618      	mov	r0, r3
900005a6:	e6f8      	b.n	9000039a <__udivmoddi4+0x92>
900005a8:	454b      	cmp	r3, r9
900005aa:	d2a9      	bcs.n	90000500 <__udivmoddi4+0x1f8>
900005ac:	ebb9 0802 	subs.w	r8, r9, r2
900005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
900005b4:	3801      	subs	r0, #1
900005b6:	e7a3      	b.n	90000500 <__udivmoddi4+0x1f8>
900005b8:	4646      	mov	r6, r8
900005ba:	e7ea      	b.n	90000592 <__udivmoddi4+0x28a>
900005bc:	4620      	mov	r0, r4
900005be:	e794      	b.n	900004ea <__udivmoddi4+0x1e2>
900005c0:	4640      	mov	r0, r8
900005c2:	e7d1      	b.n	90000568 <__udivmoddi4+0x260>
900005c4:	46d0      	mov	r8, sl
900005c6:	e77b      	b.n	900004c0 <__udivmoddi4+0x1b8>
900005c8:	3b02      	subs	r3, #2
900005ca:	4461      	add	r1, ip
900005cc:	e732      	b.n	90000434 <__udivmoddi4+0x12c>
900005ce:	4630      	mov	r0, r6
900005d0:	e709      	b.n	900003e6 <__udivmoddi4+0xde>
900005d2:	4464      	add	r4, ip
900005d4:	3802      	subs	r0, #2
900005d6:	e742      	b.n	9000045e <__udivmoddi4+0x156>

900005d8 <__aeabi_idiv0>:
900005d8:	4770      	bx	lr
900005da:	bf00      	nop

900005dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
900005dc:	b480      	push	{r7}
900005de:	b083      	sub	sp, #12
900005e0:	af00      	add	r7, sp, #0
900005e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
900005e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
900005e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
900005ec:	f003 0301 	and.w	r3, r3, #1
900005f0:	2b00      	cmp	r3, #0
900005f2:	d013      	beq.n	9000061c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
900005f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
900005f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
900005fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
90000600:	2b00      	cmp	r3, #0
90000602:	d00b      	beq.n	9000061c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
90000604:	e000      	b.n	90000608 <ITM_SendChar+0x2c>
    {
      __NOP();
90000606:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
90000608:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
9000060c:	681b      	ldr	r3, [r3, #0]
9000060e:	2b00      	cmp	r3, #0
90000610:	d0f9      	beq.n	90000606 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
90000612:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
90000616:	687a      	ldr	r2, [r7, #4]
90000618:	b2d2      	uxtb	r2, r2
9000061a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
9000061c:	687b      	ldr	r3, [r7, #4]
}
9000061e:	4618      	mov	r0, r3
90000620:	370c      	adds	r7, #12
90000622:	46bd      	mov	sp, r7
90000624:	f85d 7b04 	ldr.w	r7, [sp], #4
90000628:	4770      	bx	lr
	...

9000062c <_write>:
void SystemClock_Config(void);
static void MPU_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
9000062c:	b580      	push	{r7, lr}
9000062e:	b086      	sub	sp, #24
90000630:	af00      	add	r7, sp, #0
90000632:	60f8      	str	r0, [r7, #12]
90000634:	60b9      	str	r1, [r7, #8]
90000636:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
90000638:	687b      	ldr	r3, [r7, #4]
9000063a:	b29a      	uxth	r2, r3
9000063c:	2332      	movs	r3, #50	; 0x32
9000063e:	68b9      	ldr	r1, [r7, #8]
90000640:	480c      	ldr	r0, [pc, #48]	; (90000674 <_write+0x48>)
90000642:	f003 fb31 	bl	90003ca8 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
90000646:	2300      	movs	r3, #0
90000648:	617b      	str	r3, [r7, #20]
9000064a:	e009      	b.n	90000660 <_write+0x34>
		ITM_SendChar(*ptr++);
9000064c:	68bb      	ldr	r3, [r7, #8]
9000064e:	1c5a      	adds	r2, r3, #1
90000650:	60ba      	str	r2, [r7, #8]
90000652:	781b      	ldrb	r3, [r3, #0]
90000654:	4618      	mov	r0, r3
90000656:	f7ff ffc1 	bl	900005dc <ITM_SendChar>
	for (i = 0; i < len; i++) {
9000065a:	697b      	ldr	r3, [r7, #20]
9000065c:	3301      	adds	r3, #1
9000065e:	617b      	str	r3, [r7, #20]
90000660:	697a      	ldr	r2, [r7, #20]
90000662:	687b      	ldr	r3, [r7, #4]
90000664:	429a      	cmp	r2, r3
90000666:	dbf1      	blt.n	9000064c <_write+0x20>
	}
	return len;
90000668:	687b      	ldr	r3, [r7, #4]
}
9000066a:	4618      	mov	r0, r3
9000066c:	3718      	adds	r7, #24
9000066e:	46bd      	mov	sp, r7
90000670:	bd80      	pop	{r7, pc}
90000672:	bf00      	nop
90000674:	24000090 	.word	0x24000090

90000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
90000678:	b580      	push	{r7, lr}
9000067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
9000067c:	f000 f940 	bl	90000900 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
90000680:	f000 fb60 	bl	90000d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
90000684:	f000 f81c 	bl	900006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
90000688:	f000 f8e6 	bl	90000858 <MX_GPIO_Init>
  MX_USART2_UART_Init();
9000068c:	f000 f898 	bl	900007c0 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hello from application on QSPI!!! \r\n");
90000690:	4808      	ldr	r0, [pc, #32]	; (900006b4 <main+0x3c>)
90000692:	f004 fc5f 	bl	90004f54 <puts>
	  counter ++;
90000696:	4b08      	ldr	r3, [pc, #32]	; (900006b8 <main+0x40>)
90000698:	881b      	ldrh	r3, [r3, #0]
9000069a:	3301      	adds	r3, #1
9000069c:	b29a      	uxth	r2, r3
9000069e:	4b06      	ldr	r3, [pc, #24]	; (900006b8 <main+0x40>)
900006a0:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
900006a2:	2108      	movs	r1, #8
900006a4:	4805      	ldr	r0, [pc, #20]	; (900006bc <main+0x44>)
900006a6:	f000 ff38 	bl	9000151a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
900006aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
900006ae:	f000 fbdb 	bl	90000e68 <HAL_Delay>
	  printf("Hello from application on QSPI!!! \r\n");
900006b2:	e7ed      	b.n	90000690 <main+0x18>
900006b4:	9000588c 	.word	0x9000588c
900006b8:	24000120 	.word	0x24000120
900006bc:	58021000 	.word	0x58021000

900006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
900006c0:	b580      	push	{r7, lr}
900006c2:	b09c      	sub	sp, #112	; 0x70
900006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
900006c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
900006ca:	224c      	movs	r2, #76	; 0x4c
900006cc:	2100      	movs	r1, #0
900006ce:	4618      	mov	r0, r3
900006d0:	f004 fbca 	bl	90004e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
900006d4:	1d3b      	adds	r3, r7, #4
900006d6:	2220      	movs	r2, #32
900006d8:	2100      	movs	r1, #0
900006da:	4618      	mov	r0, r3
900006dc:	f004 fbc4 	bl	90004e68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
900006e0:	2002      	movs	r0, #2
900006e2:	f000 ff35 	bl	90001550 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
900006e6:	2300      	movs	r3, #0
900006e8:	603b      	str	r3, [r7, #0]
900006ea:	4b33      	ldr	r3, [pc, #204]	; (900007b8 <SystemClock_Config+0xf8>)
900006ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900006ee:	4a32      	ldr	r2, [pc, #200]	; (900007b8 <SystemClock_Config+0xf8>)
900006f0:	f023 0301 	bic.w	r3, r3, #1
900006f4:	62d3      	str	r3, [r2, #44]	; 0x2c
900006f6:	4b30      	ldr	r3, [pc, #192]	; (900007b8 <SystemClock_Config+0xf8>)
900006f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900006fa:	f003 0301 	and.w	r3, r3, #1
900006fe:	603b      	str	r3, [r7, #0]
90000700:	4b2e      	ldr	r3, [pc, #184]	; (900007bc <SystemClock_Config+0xfc>)
90000702:	699b      	ldr	r3, [r3, #24]
90000704:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
90000708:	4a2c      	ldr	r2, [pc, #176]	; (900007bc <SystemClock_Config+0xfc>)
9000070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
9000070e:	6193      	str	r3, [r2, #24]
90000710:	4b2a      	ldr	r3, [pc, #168]	; (900007bc <SystemClock_Config+0xfc>)
90000712:	699b      	ldr	r3, [r3, #24]
90000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90000718:	603b      	str	r3, [r7, #0]
9000071a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
9000071c:	bf00      	nop
9000071e:	4b27      	ldr	r3, [pc, #156]	; (900007bc <SystemClock_Config+0xfc>)
90000720:	699b      	ldr	r3, [r3, #24]
90000722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90000726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000072a:	d1f8      	bne.n	9000071e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
9000072c:	2311      	movs	r3, #17
9000072e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
90000734:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
90000736:	2380      	movs	r3, #128	; 0x80
90000738:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
9000073a:	2320      	movs	r3, #32
9000073c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
9000073e:	2302      	movs	r3, #2
90000740:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000742:	2302      	movs	r3, #2
90000744:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
90000746:	2302      	movs	r3, #2
90000748:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
9000074a:	2320      	movs	r3, #32
9000074c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
9000074e:	2302      	movs	r3, #2
90000750:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
90000752:	2302      	movs	r3, #2
90000754:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
90000756:	2302      	movs	r3, #2
90000758:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
9000075a:	230c      	movs	r3, #12
9000075c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
9000075e:	2300      	movs	r3, #0
90000760:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90000762:	2300      	movs	r3, #0
90000764:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90000766:	f107 0324 	add.w	r3, r7, #36	; 0x24
9000076a:	4618      	mov	r0, r3
9000076c:	f000 ff2a 	bl	900015c4 <HAL_RCC_OscConfig>
90000770:	4603      	mov	r3, r0
90000772:	2b00      	cmp	r3, #0
90000774:	d001      	beq.n	9000077a <SystemClock_Config+0xba>
  {
    Error_Handler();
90000776:	f000 f8fa 	bl	9000096e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
9000077a:	233f      	movs	r3, #63	; 0x3f
9000077c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
9000077e:	2303      	movs	r3, #3
90000780:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90000782:	2300      	movs	r3, #0
90000784:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
90000786:	2308      	movs	r3, #8
90000788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
9000078a:	2300      	movs	r3, #0
9000078c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
9000078e:	2300      	movs	r3, #0
90000790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
90000792:	2300      	movs	r3, #0
90000794:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
90000796:	2300      	movs	r3, #0
90000798:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
9000079a:	1d3b      	adds	r3, r7, #4
9000079c:	2102      	movs	r1, #2
9000079e:	4618      	mov	r0, r3
900007a0:	f001 fb3e 	bl	90001e20 <HAL_RCC_ClockConfig>
900007a4:	4603      	mov	r3, r0
900007a6:	2b00      	cmp	r3, #0
900007a8:	d001      	beq.n	900007ae <SystemClock_Config+0xee>
  {
    Error_Handler();
900007aa:	f000 f8e0 	bl	9000096e <Error_Handler>
  }
}
900007ae:	bf00      	nop
900007b0:	3770      	adds	r7, #112	; 0x70
900007b2:	46bd      	mov	sp, r7
900007b4:	bd80      	pop	{r7, pc}
900007b6:	bf00      	nop
900007b8:	58000400 	.word	0x58000400
900007bc:	58024800 	.word	0x58024800

900007c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
900007c0:	b580      	push	{r7, lr}
900007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
900007c4:	4b22      	ldr	r3, [pc, #136]	; (90000850 <MX_USART2_UART_Init+0x90>)
900007c6:	4a23      	ldr	r2, [pc, #140]	; (90000854 <MX_USART2_UART_Init+0x94>)
900007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
900007ca:	4b21      	ldr	r3, [pc, #132]	; (90000850 <MX_USART2_UART_Init+0x90>)
900007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
900007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
900007d2:	4b1f      	ldr	r3, [pc, #124]	; (90000850 <MX_USART2_UART_Init+0x90>)
900007d4:	2200      	movs	r2, #0
900007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
900007d8:	4b1d      	ldr	r3, [pc, #116]	; (90000850 <MX_USART2_UART_Init+0x90>)
900007da:	2200      	movs	r2, #0
900007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
900007de:	4b1c      	ldr	r3, [pc, #112]	; (90000850 <MX_USART2_UART_Init+0x90>)
900007e0:	2200      	movs	r2, #0
900007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
900007e4:	4b1a      	ldr	r3, [pc, #104]	; (90000850 <MX_USART2_UART_Init+0x90>)
900007e6:	220c      	movs	r2, #12
900007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
900007ea:	4b19      	ldr	r3, [pc, #100]	; (90000850 <MX_USART2_UART_Init+0x90>)
900007ec:	2200      	movs	r2, #0
900007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
900007f0:	4b17      	ldr	r3, [pc, #92]	; (90000850 <MX_USART2_UART_Init+0x90>)
900007f2:	2200      	movs	r2, #0
900007f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
900007f6:	4b16      	ldr	r3, [pc, #88]	; (90000850 <MX_USART2_UART_Init+0x90>)
900007f8:	2200      	movs	r2, #0
900007fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
900007fc:	4b14      	ldr	r3, [pc, #80]	; (90000850 <MX_USART2_UART_Init+0x90>)
900007fe:	2200      	movs	r2, #0
90000800:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90000802:	4b13      	ldr	r3, [pc, #76]	; (90000850 <MX_USART2_UART_Init+0x90>)
90000804:	2200      	movs	r2, #0
90000806:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
90000808:	4811      	ldr	r0, [pc, #68]	; (90000850 <MX_USART2_UART_Init+0x90>)
9000080a:	f003 f9fd 	bl	90003c08 <HAL_UART_Init>
9000080e:	4603      	mov	r3, r0
90000810:	2b00      	cmp	r3, #0
90000812:	d001      	beq.n	90000818 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
90000814:	f000 f8ab 	bl	9000096e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90000818:	2100      	movs	r1, #0
9000081a:	480d      	ldr	r0, [pc, #52]	; (90000850 <MX_USART2_UART_Init+0x90>)
9000081c:	f004 fa30 	bl	90004c80 <HAL_UARTEx_SetTxFifoThreshold>
90000820:	4603      	mov	r3, r0
90000822:	2b00      	cmp	r3, #0
90000824:	d001      	beq.n	9000082a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
90000826:	f000 f8a2 	bl	9000096e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
9000082a:	2100      	movs	r1, #0
9000082c:	4808      	ldr	r0, [pc, #32]	; (90000850 <MX_USART2_UART_Init+0x90>)
9000082e:	f004 fa65 	bl	90004cfc <HAL_UARTEx_SetRxFifoThreshold>
90000832:	4603      	mov	r3, r0
90000834:	2b00      	cmp	r3, #0
90000836:	d001      	beq.n	9000083c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
90000838:	f000 f899 	bl	9000096e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
9000083c:	4804      	ldr	r0, [pc, #16]	; (90000850 <MX_USART2_UART_Init+0x90>)
9000083e:	f004 f9e6 	bl	90004c0e <HAL_UARTEx_DisableFifoMode>
90000842:	4603      	mov	r3, r0
90000844:	2b00      	cmp	r3, #0
90000846:	d001      	beq.n	9000084c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
90000848:	f000 f891 	bl	9000096e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
9000084c:	bf00      	nop
9000084e:	bd80      	pop	{r7, pc}
90000850:	24000090 	.word	0x24000090
90000854:	40004400 	.word	0x40004400

90000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
90000858:	b580      	push	{r7, lr}
9000085a:	b088      	sub	sp, #32
9000085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000085e:	f107 030c 	add.w	r3, r7, #12
90000862:	2200      	movs	r2, #0
90000864:	601a      	str	r2, [r3, #0]
90000866:	605a      	str	r2, [r3, #4]
90000868:	609a      	str	r2, [r3, #8]
9000086a:	60da      	str	r2, [r3, #12]
9000086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
9000086e:	4b22      	ldr	r3, [pc, #136]	; (900008f8 <MX_GPIO_Init+0xa0>)
90000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000874:	4a20      	ldr	r2, [pc, #128]	; (900008f8 <MX_GPIO_Init+0xa0>)
90000876:	f043 0310 	orr.w	r3, r3, #16
9000087a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000087e:	4b1e      	ldr	r3, [pc, #120]	; (900008f8 <MX_GPIO_Init+0xa0>)
90000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000884:	f003 0310 	and.w	r3, r3, #16
90000888:	60bb      	str	r3, [r7, #8]
9000088a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
9000088c:	4b1a      	ldr	r3, [pc, #104]	; (900008f8 <MX_GPIO_Init+0xa0>)
9000088e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000892:	4a19      	ldr	r2, [pc, #100]	; (900008f8 <MX_GPIO_Init+0xa0>)
90000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90000898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000089c:	4b16      	ldr	r3, [pc, #88]	; (900008f8 <MX_GPIO_Init+0xa0>)
9000089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
900008a6:	607b      	str	r3, [r7, #4]
900008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
900008aa:	4b13      	ldr	r3, [pc, #76]	; (900008f8 <MX_GPIO_Init+0xa0>)
900008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900008b0:	4a11      	ldr	r2, [pc, #68]	; (900008f8 <MX_GPIO_Init+0xa0>)
900008b2:	f043 0301 	orr.w	r3, r3, #1
900008b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
900008ba:	4b0f      	ldr	r3, [pc, #60]	; (900008f8 <MX_GPIO_Init+0xa0>)
900008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
900008c0:	f003 0301 	and.w	r3, r3, #1
900008c4:	603b      	str	r3, [r7, #0]
900008c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
900008c8:	2200      	movs	r2, #0
900008ca:	2108      	movs	r1, #8
900008cc:	480b      	ldr	r0, [pc, #44]	; (900008fc <MX_GPIO_Init+0xa4>)
900008ce:	f000 fe0b 	bl	900014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
900008d2:	2308      	movs	r3, #8
900008d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900008d6:	2301      	movs	r3, #1
900008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900008da:	2300      	movs	r3, #0
900008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900008de:	2300      	movs	r3, #0
900008e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900008e2:	f107 030c 	add.w	r3, r7, #12
900008e6:	4619      	mov	r1, r3
900008e8:	4804      	ldr	r0, [pc, #16]	; (900008fc <MX_GPIO_Init+0xa4>)
900008ea:	f000 fc4d 	bl	90001188 <HAL_GPIO_Init>

}
900008ee:	bf00      	nop
900008f0:	3720      	adds	r7, #32
900008f2:	46bd      	mov	sp, r7
900008f4:	bd80      	pop	{r7, pc}
900008f6:	bf00      	nop
900008f8:	58024400 	.word	0x58024400
900008fc:	58021000 	.word	0x58021000

90000900 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
90000900:	b580      	push	{r7, lr}
90000902:	b084      	sub	sp, #16
90000904:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90000906:	463b      	mov	r3, r7
90000908:	2200      	movs	r2, #0
9000090a:	601a      	str	r2, [r3, #0]
9000090c:	605a      	str	r2, [r3, #4]
9000090e:	609a      	str	r2, [r3, #8]
90000910:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
90000912:	f000 fbbd 	bl	90001090 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90000916:	2301      	movs	r3, #1
90000918:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
9000091a:	2300      	movs	r3, #0
9000091c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
9000091e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
90000922:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
90000924:	2316      	movs	r3, #22
90000926:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
90000928:	2300      	movs	r3, #0
9000092a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
9000092c:	2300      	movs	r3, #0
9000092e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90000930:	2303      	movs	r3, #3
90000932:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
90000934:	2301      	movs	r3, #1
90000936:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90000938:	2300      	movs	r3, #0
9000093a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
9000093c:	2301      	movs	r3, #1
9000093e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
90000940:	2301      	movs	r3, #1
90000942:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000944:	463b      	mov	r3, r7
90000946:	4618      	mov	r0, r3
90000948:	f000 fbda 	bl	90001100 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
9000094c:	2301      	movs	r3, #1
9000094e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
90000950:	2313      	movs	r3, #19
90000952:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90000954:	2300      	movs	r3, #0
90000956:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90000958:	463b      	mov	r3, r7
9000095a:	4618      	mov	r0, r3
9000095c:	f000 fbd0 	bl	90001100 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90000960:	2004      	movs	r0, #4
90000962:	f000 fbad 	bl	900010c0 <HAL_MPU_Enable>

}
90000966:	bf00      	nop
90000968:	3710      	adds	r7, #16
9000096a:	46bd      	mov	sp, r7
9000096c:	bd80      	pop	{r7, pc}

9000096e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
9000096e:	b480      	push	{r7}
90000970:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
90000972:	b672      	cpsid	i
}
90000974:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
90000976:	e7fe      	b.n	90000976 <Error_Handler+0x8>

90000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
90000978:	b480      	push	{r7}
9000097a:	b083      	sub	sp, #12
9000097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
9000097e:	4b0a      	ldr	r3, [pc, #40]	; (900009a8 <HAL_MspInit+0x30>)
90000980:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90000984:	4a08      	ldr	r2, [pc, #32]	; (900009a8 <HAL_MspInit+0x30>)
90000986:	f043 0302 	orr.w	r3, r3, #2
9000098a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
9000098e:	4b06      	ldr	r3, [pc, #24]	; (900009a8 <HAL_MspInit+0x30>)
90000990:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90000994:	f003 0302 	and.w	r3, r3, #2
90000998:	607b      	str	r3, [r7, #4]
9000099a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
9000099c:	bf00      	nop
9000099e:	370c      	adds	r7, #12
900009a0:	46bd      	mov	sp, r7
900009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
900009a6:	4770      	bx	lr
900009a8:	58024400 	.word	0x58024400

900009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
900009ac:	b580      	push	{r7, lr}
900009ae:	b0b8      	sub	sp, #224	; 0xe0
900009b0:	af00      	add	r7, sp, #0
900009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900009b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
900009b8:	2200      	movs	r2, #0
900009ba:	601a      	str	r2, [r3, #0]
900009bc:	605a      	str	r2, [r3, #4]
900009be:	609a      	str	r2, [r3, #8]
900009c0:	60da      	str	r2, [r3, #12]
900009c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900009c4:	f107 0310 	add.w	r3, r7, #16
900009c8:	22bc      	movs	r2, #188	; 0xbc
900009ca:	2100      	movs	r1, #0
900009cc:	4618      	mov	r0, r3
900009ce:	f004 fa4b 	bl	90004e68 <memset>
  if(huart->Instance==USART2)
900009d2:	687b      	ldr	r3, [r7, #4]
900009d4:	681b      	ldr	r3, [r3, #0]
900009d6:	4a24      	ldr	r2, [pc, #144]	; (90000a68 <HAL_UART_MspInit+0xbc>)
900009d8:	4293      	cmp	r3, r2
900009da:	d141      	bne.n	90000a60 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
900009dc:	2302      	movs	r3, #2
900009de:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_CSI;
900009e0:	2304      	movs	r3, #4
900009e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900009e6:	f107 0310 	add.w	r3, r7, #16
900009ea:	4618      	mov	r0, r3
900009ec:	f001 fda4 	bl	90002538 <HAL_RCCEx_PeriphCLKConfig>
900009f0:	4603      	mov	r3, r0
900009f2:	2b00      	cmp	r3, #0
900009f4:	d001      	beq.n	900009fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
900009f6:	f7ff ffba 	bl	9000096e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
900009fa:	4b1c      	ldr	r3, [pc, #112]	; (90000a6c <HAL_UART_MspInit+0xc0>)
900009fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000a00:	4a1a      	ldr	r2, [pc, #104]	; (90000a6c <HAL_UART_MspInit+0xc0>)
90000a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90000a06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
90000a0a:	4b18      	ldr	r3, [pc, #96]	; (90000a6c <HAL_UART_MspInit+0xc0>)
90000a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90000a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90000a14:	60fb      	str	r3, [r7, #12]
90000a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
90000a18:	4b14      	ldr	r3, [pc, #80]	; (90000a6c <HAL_UART_MspInit+0xc0>)
90000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000a1e:	4a13      	ldr	r2, [pc, #76]	; (90000a6c <HAL_UART_MspInit+0xc0>)
90000a20:	f043 0301 	orr.w	r3, r3, #1
90000a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90000a28:	4b10      	ldr	r3, [pc, #64]	; (90000a6c <HAL_UART_MspInit+0xc0>)
90000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90000a2e:	f003 0301 	and.w	r3, r3, #1
90000a32:	60bb      	str	r3, [r7, #8]
90000a34:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
90000a36:	230c      	movs	r3, #12
90000a38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000a3c:	2302      	movs	r3, #2
90000a3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90000a42:	2300      	movs	r3, #0
90000a44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000a48:	2300      	movs	r3, #0
90000a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
90000a4e:	2307      	movs	r3, #7
90000a50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000a54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
90000a58:	4619      	mov	r1, r3
90000a5a:	4805      	ldr	r0, [pc, #20]	; (90000a70 <HAL_UART_MspInit+0xc4>)
90000a5c:	f000 fb94 	bl	90001188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
90000a60:	bf00      	nop
90000a62:	37e0      	adds	r7, #224	; 0xe0
90000a64:	46bd      	mov	sp, r7
90000a66:	bd80      	pop	{r7, pc}
90000a68:	40004400 	.word	0x40004400
90000a6c:	58024400 	.word	0x58024400
90000a70:	58020000 	.word	0x58020000

90000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
90000a74:	b480      	push	{r7}
90000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
90000a78:	e7fe      	b.n	90000a78 <NMI_Handler+0x4>

90000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
90000a7a:	b480      	push	{r7}
90000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90000a7e:	e7fe      	b.n	90000a7e <HardFault_Handler+0x4>

90000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
90000a80:	b480      	push	{r7}
90000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90000a84:	e7fe      	b.n	90000a84 <MemManage_Handler+0x4>

90000a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
90000a86:	b480      	push	{r7}
90000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90000a8a:	e7fe      	b.n	90000a8a <BusFault_Handler+0x4>

90000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
90000a8c:	b480      	push	{r7}
90000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90000a90:	e7fe      	b.n	90000a90 <UsageFault_Handler+0x4>

90000a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
90000a92:	b480      	push	{r7}
90000a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
90000a96:	bf00      	nop
90000a98:	46bd      	mov	sp, r7
90000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
90000a9e:	4770      	bx	lr

90000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
90000aa0:	b480      	push	{r7}
90000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
90000aa4:	bf00      	nop
90000aa6:	46bd      	mov	sp, r7
90000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
90000aac:	4770      	bx	lr

90000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
90000aae:	b480      	push	{r7}
90000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
90000ab2:	bf00      	nop
90000ab4:	46bd      	mov	sp, r7
90000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
90000aba:	4770      	bx	lr

90000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
90000abc:	b580      	push	{r7, lr}
90000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
90000ac0:	f000 f9b2 	bl	90000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
90000ac4:	bf00      	nop
90000ac6:	bd80      	pop	{r7, pc}

90000ac8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90000ac8:	b580      	push	{r7, lr}
90000aca:	b086      	sub	sp, #24
90000acc:	af00      	add	r7, sp, #0
90000ace:	60f8      	str	r0, [r7, #12]
90000ad0:	60b9      	str	r1, [r7, #8]
90000ad2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90000ad4:	2300      	movs	r3, #0
90000ad6:	617b      	str	r3, [r7, #20]
90000ad8:	e00a      	b.n	90000af0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
90000ada:	f3af 8000 	nop.w
90000ade:	4601      	mov	r1, r0
90000ae0:	68bb      	ldr	r3, [r7, #8]
90000ae2:	1c5a      	adds	r2, r3, #1
90000ae4:	60ba      	str	r2, [r7, #8]
90000ae6:	b2ca      	uxtb	r2, r1
90000ae8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90000aea:	697b      	ldr	r3, [r7, #20]
90000aec:	3301      	adds	r3, #1
90000aee:	617b      	str	r3, [r7, #20]
90000af0:	697a      	ldr	r2, [r7, #20]
90000af2:	687b      	ldr	r3, [r7, #4]
90000af4:	429a      	cmp	r2, r3
90000af6:	dbf0      	blt.n	90000ada <_read+0x12>
	}

return len;
90000af8:	687b      	ldr	r3, [r7, #4]
}
90000afa:	4618      	mov	r0, r3
90000afc:	3718      	adds	r7, #24
90000afe:	46bd      	mov	sp, r7
90000b00:	bd80      	pop	{r7, pc}

90000b02 <_close>:
	}
	return len;
}

int _close(int file)
{
90000b02:	b480      	push	{r7}
90000b04:	b083      	sub	sp, #12
90000b06:	af00      	add	r7, sp, #0
90000b08:	6078      	str	r0, [r7, #4]
	return -1;
90000b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
90000b0e:	4618      	mov	r0, r3
90000b10:	370c      	adds	r7, #12
90000b12:	46bd      	mov	sp, r7
90000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
90000b18:	4770      	bx	lr

90000b1a <_fstat>:


int _fstat(int file, struct stat *st)
{
90000b1a:	b480      	push	{r7}
90000b1c:	b083      	sub	sp, #12
90000b1e:	af00      	add	r7, sp, #0
90000b20:	6078      	str	r0, [r7, #4]
90000b22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
90000b24:	683b      	ldr	r3, [r7, #0]
90000b26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
90000b2a:	605a      	str	r2, [r3, #4]
	return 0;
90000b2c:	2300      	movs	r3, #0
}
90000b2e:	4618      	mov	r0, r3
90000b30:	370c      	adds	r7, #12
90000b32:	46bd      	mov	sp, r7
90000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
90000b38:	4770      	bx	lr

90000b3a <_isatty>:

int _isatty(int file)
{
90000b3a:	b480      	push	{r7}
90000b3c:	b083      	sub	sp, #12
90000b3e:	af00      	add	r7, sp, #0
90000b40:	6078      	str	r0, [r7, #4]
	return 1;
90000b42:	2301      	movs	r3, #1
}
90000b44:	4618      	mov	r0, r3
90000b46:	370c      	adds	r7, #12
90000b48:	46bd      	mov	sp, r7
90000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
90000b4e:	4770      	bx	lr

90000b50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90000b50:	b480      	push	{r7}
90000b52:	b085      	sub	sp, #20
90000b54:	af00      	add	r7, sp, #0
90000b56:	60f8      	str	r0, [r7, #12]
90000b58:	60b9      	str	r1, [r7, #8]
90000b5a:	607a      	str	r2, [r7, #4]
	return 0;
90000b5c:	2300      	movs	r3, #0
}
90000b5e:	4618      	mov	r0, r3
90000b60:	3714      	adds	r7, #20
90000b62:	46bd      	mov	sp, r7
90000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
90000b68:	4770      	bx	lr
	...

90000b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90000b6c:	b580      	push	{r7, lr}
90000b6e:	b086      	sub	sp, #24
90000b70:	af00      	add	r7, sp, #0
90000b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90000b74:	4a14      	ldr	r2, [pc, #80]	; (90000bc8 <_sbrk+0x5c>)
90000b76:	4b15      	ldr	r3, [pc, #84]	; (90000bcc <_sbrk+0x60>)
90000b78:	1ad3      	subs	r3, r2, r3
90000b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90000b7c:	697b      	ldr	r3, [r7, #20]
90000b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90000b80:	4b13      	ldr	r3, [pc, #76]	; (90000bd0 <_sbrk+0x64>)
90000b82:	681b      	ldr	r3, [r3, #0]
90000b84:	2b00      	cmp	r3, #0
90000b86:	d102      	bne.n	90000b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
90000b88:	4b11      	ldr	r3, [pc, #68]	; (90000bd0 <_sbrk+0x64>)
90000b8a:	4a12      	ldr	r2, [pc, #72]	; (90000bd4 <_sbrk+0x68>)
90000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90000b8e:	4b10      	ldr	r3, [pc, #64]	; (90000bd0 <_sbrk+0x64>)
90000b90:	681a      	ldr	r2, [r3, #0]
90000b92:	687b      	ldr	r3, [r7, #4]
90000b94:	4413      	add	r3, r2
90000b96:	693a      	ldr	r2, [r7, #16]
90000b98:	429a      	cmp	r2, r3
90000b9a:	d207      	bcs.n	90000bac <_sbrk+0x40>
  {
    errno = ENOMEM;
90000b9c:	f004 f93a 	bl	90004e14 <__errno>
90000ba0:	4603      	mov	r3, r0
90000ba2:	220c      	movs	r2, #12
90000ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
90000ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90000baa:	e009      	b.n	90000bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
90000bac:	4b08      	ldr	r3, [pc, #32]	; (90000bd0 <_sbrk+0x64>)
90000bae:	681b      	ldr	r3, [r3, #0]
90000bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90000bb2:	4b07      	ldr	r3, [pc, #28]	; (90000bd0 <_sbrk+0x64>)
90000bb4:	681a      	ldr	r2, [r3, #0]
90000bb6:	687b      	ldr	r3, [r7, #4]
90000bb8:	4413      	add	r3, r2
90000bba:	4a05      	ldr	r2, [pc, #20]	; (90000bd0 <_sbrk+0x64>)
90000bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90000bbe:	68fb      	ldr	r3, [r7, #12]
}
90000bc0:	4618      	mov	r0, r3
90000bc2:	3718      	adds	r7, #24
90000bc4:	46bd      	mov	sp, r7
90000bc6:	bd80      	pop	{r7, pc}
90000bc8:	24080000 	.word	0x24080000
90000bcc:	00000400 	.word	0x00000400
90000bd0:	24000124 	.word	0x24000124
90000bd4:	24000140 	.word	0x24000140

90000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90000bd8:	b480      	push	{r7}
90000bda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90000bdc:	4b39      	ldr	r3, [pc, #228]	; (90000cc4 <SystemInit+0xec>)
90000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90000be2:	4a38      	ldr	r2, [pc, #224]	; (90000cc4 <SystemInit+0xec>)
90000be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90000be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
90000bec:	4b36      	ldr	r3, [pc, #216]	; (90000cc8 <SystemInit+0xf0>)
90000bee:	681b      	ldr	r3, [r3, #0]
90000bf0:	f003 030f 	and.w	r3, r3, #15
90000bf4:	2b06      	cmp	r3, #6
90000bf6:	d807      	bhi.n	90000c08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
90000bf8:	4b33      	ldr	r3, [pc, #204]	; (90000cc8 <SystemInit+0xf0>)
90000bfa:	681b      	ldr	r3, [r3, #0]
90000bfc:	f023 030f 	bic.w	r3, r3, #15
90000c00:	4a31      	ldr	r2, [pc, #196]	; (90000cc8 <SystemInit+0xf0>)
90000c02:	f043 0307 	orr.w	r3, r3, #7
90000c06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
90000c08:	4b30      	ldr	r3, [pc, #192]	; (90000ccc <SystemInit+0xf4>)
90000c0a:	681b      	ldr	r3, [r3, #0]
90000c0c:	4a2f      	ldr	r2, [pc, #188]	; (90000ccc <SystemInit+0xf4>)
90000c0e:	f043 0301 	orr.w	r3, r3, #1
90000c12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90000c14:	4b2d      	ldr	r3, [pc, #180]	; (90000ccc <SystemInit+0xf4>)
90000c16:	2200      	movs	r2, #0
90000c18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90000c1a:	4b2c      	ldr	r3, [pc, #176]	; (90000ccc <SystemInit+0xf4>)
90000c1c:	681a      	ldr	r2, [r3, #0]
90000c1e:	492b      	ldr	r1, [pc, #172]	; (90000ccc <SystemInit+0xf4>)
90000c20:	4b2b      	ldr	r3, [pc, #172]	; (90000cd0 <SystemInit+0xf8>)
90000c22:	4013      	ands	r3, r2
90000c24:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
90000c26:	4b28      	ldr	r3, [pc, #160]	; (90000cc8 <SystemInit+0xf0>)
90000c28:	681b      	ldr	r3, [r3, #0]
90000c2a:	f003 0308 	and.w	r3, r3, #8
90000c2e:	2b00      	cmp	r3, #0
90000c30:	d007      	beq.n	90000c42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
90000c32:	4b25      	ldr	r3, [pc, #148]	; (90000cc8 <SystemInit+0xf0>)
90000c34:	681b      	ldr	r3, [r3, #0]
90000c36:	f023 030f 	bic.w	r3, r3, #15
90000c3a:	4a23      	ldr	r2, [pc, #140]	; (90000cc8 <SystemInit+0xf0>)
90000c3c:	f043 0307 	orr.w	r3, r3, #7
90000c40:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90000c42:	4b22      	ldr	r3, [pc, #136]	; (90000ccc <SystemInit+0xf4>)
90000c44:	2200      	movs	r2, #0
90000c46:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
90000c48:	4b20      	ldr	r3, [pc, #128]	; (90000ccc <SystemInit+0xf4>)
90000c4a:	2200      	movs	r2, #0
90000c4c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90000c4e:	4b1f      	ldr	r3, [pc, #124]	; (90000ccc <SystemInit+0xf4>)
90000c50:	2200      	movs	r2, #0
90000c52:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
90000c54:	4b1d      	ldr	r3, [pc, #116]	; (90000ccc <SystemInit+0xf4>)
90000c56:	4a1f      	ldr	r2, [pc, #124]	; (90000cd4 <SystemInit+0xfc>)
90000c58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
90000c5a:	4b1c      	ldr	r3, [pc, #112]	; (90000ccc <SystemInit+0xf4>)
90000c5c:	4a1e      	ldr	r2, [pc, #120]	; (90000cd8 <SystemInit+0x100>)
90000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
90000c60:	4b1a      	ldr	r3, [pc, #104]	; (90000ccc <SystemInit+0xf4>)
90000c62:	4a1e      	ldr	r2, [pc, #120]	; (90000cdc <SystemInit+0x104>)
90000c64:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
90000c66:	4b19      	ldr	r3, [pc, #100]	; (90000ccc <SystemInit+0xf4>)
90000c68:	2200      	movs	r2, #0
90000c6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
90000c6c:	4b17      	ldr	r3, [pc, #92]	; (90000ccc <SystemInit+0xf4>)
90000c6e:	4a1b      	ldr	r2, [pc, #108]	; (90000cdc <SystemInit+0x104>)
90000c70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
90000c72:	4b16      	ldr	r3, [pc, #88]	; (90000ccc <SystemInit+0xf4>)
90000c74:	2200      	movs	r2, #0
90000c76:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
90000c78:	4b14      	ldr	r3, [pc, #80]	; (90000ccc <SystemInit+0xf4>)
90000c7a:	4a18      	ldr	r2, [pc, #96]	; (90000cdc <SystemInit+0x104>)
90000c7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90000c7e:	4b13      	ldr	r3, [pc, #76]	; (90000ccc <SystemInit+0xf4>)
90000c80:	2200      	movs	r2, #0
90000c82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90000c84:	4b11      	ldr	r3, [pc, #68]	; (90000ccc <SystemInit+0xf4>)
90000c86:	681b      	ldr	r3, [r3, #0]
90000c88:	4a10      	ldr	r2, [pc, #64]	; (90000ccc <SystemInit+0xf4>)
90000c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90000c8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
90000c90:	4b0e      	ldr	r3, [pc, #56]	; (90000ccc <SystemInit+0xf4>)
90000c92:	2200      	movs	r2, #0
90000c94:	661a      	str	r2, [r3, #96]	; 0x60

  SCB->VTOR = QSPI_BASE;// Я добавил
90000c96:	4b0b      	ldr	r3, [pc, #44]	; (90000cc4 <SystemInit+0xec>)
90000c98:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
90000c9c:	609a      	str	r2, [r3, #8]

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90000c9e:	4b10      	ldr	r3, [pc, #64]	; (90000ce0 <SystemInit+0x108>)
90000ca0:	681a      	ldr	r2, [r3, #0]
90000ca2:	4b10      	ldr	r3, [pc, #64]	; (90000ce4 <SystemInit+0x10c>)
90000ca4:	4013      	ands	r3, r2
90000ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90000caa:	d202      	bcs.n	90000cb2 <SystemInit+0xda>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
90000cac:	4b0e      	ldr	r3, [pc, #56]	; (90000ce8 <SystemInit+0x110>)
90000cae:	2201      	movs	r2, #1
90000cb0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
90000cb2:	4b0e      	ldr	r3, [pc, #56]	; (90000cec <SystemInit+0x114>)
90000cb4:	f243 02d2 	movw	r2, #12498	; 0x30d2
90000cb8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
90000cba:	bf00      	nop
90000cbc:	46bd      	mov	sp, r7
90000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
90000cc2:	4770      	bx	lr
90000cc4:	e000ed00 	.word	0xe000ed00
90000cc8:	52002000 	.word	0x52002000
90000ccc:	58024400 	.word	0x58024400
90000cd0:	eaf6ed7f 	.word	0xeaf6ed7f
90000cd4:	02020200 	.word	0x02020200
90000cd8:	01ff0000 	.word	0x01ff0000
90000cdc:	01010280 	.word	0x01010280
90000ce0:	5c001000 	.word	0x5c001000
90000ce4:	ffff0000 	.word	0xffff0000
90000ce8:	51008108 	.word	0x51008108
90000cec:	52004000 	.word	0x52004000

90000cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
90000cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 90000d28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
90000cf4:	f7ff ff70 	bl	90000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
90000cf8:	480c      	ldr	r0, [pc, #48]	; (90000d2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
90000cfa:	490d      	ldr	r1, [pc, #52]	; (90000d30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
90000cfc:	4a0d      	ldr	r2, [pc, #52]	; (90000d34 <LoopFillZerobss+0x1a>)
  movs r3, #0
90000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
90000d00:	e002      	b.n	90000d08 <LoopCopyDataInit>

90000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
90000d06:	3304      	adds	r3, #4

90000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
90000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
90000d0c:	d3f9      	bcc.n	90000d02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
90000d0e:	4a0a      	ldr	r2, [pc, #40]	; (90000d38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
90000d10:	4c0a      	ldr	r4, [pc, #40]	; (90000d3c <LoopFillZerobss+0x22>)
  movs r3, #0
90000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
90000d14:	e001      	b.n	90000d1a <LoopFillZerobss>

90000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
90000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90000d18:	3204      	adds	r2, #4

90000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
90000d1c:	d3fb      	bcc.n	90000d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
90000d1e:	f004 f87f 	bl	90004e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90000d22:	f7ff fca9 	bl	90000678 <main>
  bx  lr
90000d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90000d28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
90000d2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
90000d30:	24000074 	.word	0x24000074
  ldr r2, =_sidata
90000d34:	9000595c 	.word	0x9000595c
  ldr r2, =_sbss
90000d38:	24000074 	.word	0x24000074
  ldr r4, =_ebss
90000d3c:	2400013c 	.word	0x2400013c

90000d40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90000d40:	e7fe      	b.n	90000d40 <ADC3_IRQHandler>
	...

90000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90000d44:	b580      	push	{r7, lr}
90000d46:	b082      	sub	sp, #8
90000d48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90000d4a:	2003      	movs	r0, #3
90000d4c:	f000 f96e 	bl	9000102c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90000d50:	f001 fa1c 	bl	9000218c <HAL_RCC_GetSysClockFreq>
90000d54:	4602      	mov	r2, r0
90000d56:	4b15      	ldr	r3, [pc, #84]	; (90000dac <HAL_Init+0x68>)
90000d58:	699b      	ldr	r3, [r3, #24]
90000d5a:	0a1b      	lsrs	r3, r3, #8
90000d5c:	f003 030f 	and.w	r3, r3, #15
90000d60:	4913      	ldr	r1, [pc, #76]	; (90000db0 <HAL_Init+0x6c>)
90000d62:	5ccb      	ldrb	r3, [r1, r3]
90000d64:	f003 031f 	and.w	r3, r3, #31
90000d68:	fa22 f303 	lsr.w	r3, r2, r3
90000d6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90000d6e:	4b0f      	ldr	r3, [pc, #60]	; (90000dac <HAL_Init+0x68>)
90000d70:	699b      	ldr	r3, [r3, #24]
90000d72:	f003 030f 	and.w	r3, r3, #15
90000d76:	4a0e      	ldr	r2, [pc, #56]	; (90000db0 <HAL_Init+0x6c>)
90000d78:	5cd3      	ldrb	r3, [r2, r3]
90000d7a:	f003 031f 	and.w	r3, r3, #31
90000d7e:	687a      	ldr	r2, [r7, #4]
90000d80:	fa22 f303 	lsr.w	r3, r2, r3
90000d84:	4a0b      	ldr	r2, [pc, #44]	; (90000db4 <HAL_Init+0x70>)
90000d86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90000d88:	4a0b      	ldr	r2, [pc, #44]	; (90000db8 <HAL_Init+0x74>)
90000d8a:	687b      	ldr	r3, [r7, #4]
90000d8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90000d8e:	200f      	movs	r0, #15
90000d90:	f000 f814 	bl	90000dbc <HAL_InitTick>
90000d94:	4603      	mov	r3, r0
90000d96:	2b00      	cmp	r3, #0
90000d98:	d001      	beq.n	90000d9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
90000d9a:	2301      	movs	r3, #1
90000d9c:	e002      	b.n	90000da4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90000d9e:	f7ff fdeb 	bl	90000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90000da2:	2300      	movs	r3, #0
}
90000da4:	4618      	mov	r0, r3
90000da6:	3708      	adds	r7, #8
90000da8:	46bd      	mov	sp, r7
90000daa:	bd80      	pop	{r7, pc}
90000dac:	58024400 	.word	0x58024400
90000db0:	900058b0 	.word	0x900058b0
90000db4:	24000004 	.word	0x24000004
90000db8:	24000000 	.word	0x24000000

90000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90000dbc:	b580      	push	{r7, lr}
90000dbe:	b082      	sub	sp, #8
90000dc0:	af00      	add	r7, sp, #0
90000dc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
90000dc4:	4b15      	ldr	r3, [pc, #84]	; (90000e1c <HAL_InitTick+0x60>)
90000dc6:	781b      	ldrb	r3, [r3, #0]
90000dc8:	2b00      	cmp	r3, #0
90000dca:	d101      	bne.n	90000dd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
90000dcc:	2301      	movs	r3, #1
90000dce:	e021      	b.n	90000e14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
90000dd0:	4b13      	ldr	r3, [pc, #76]	; (90000e20 <HAL_InitTick+0x64>)
90000dd2:	681a      	ldr	r2, [r3, #0]
90000dd4:	4b11      	ldr	r3, [pc, #68]	; (90000e1c <HAL_InitTick+0x60>)
90000dd6:	781b      	ldrb	r3, [r3, #0]
90000dd8:	4619      	mov	r1, r3
90000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90000dde:	fbb3 f3f1 	udiv	r3, r3, r1
90000de2:	fbb2 f3f3 	udiv	r3, r2, r3
90000de6:	4618      	mov	r0, r3
90000de8:	f000 f945 	bl	90001076 <HAL_SYSTICK_Config>
90000dec:	4603      	mov	r3, r0
90000dee:	2b00      	cmp	r3, #0
90000df0:	d001      	beq.n	90000df6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
90000df2:	2301      	movs	r3, #1
90000df4:	e00e      	b.n	90000e14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90000df6:	687b      	ldr	r3, [r7, #4]
90000df8:	2b0f      	cmp	r3, #15
90000dfa:	d80a      	bhi.n	90000e12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90000dfc:	2200      	movs	r2, #0
90000dfe:	6879      	ldr	r1, [r7, #4]
90000e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90000e04:	f000 f91d 	bl	90001042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
90000e08:	4a06      	ldr	r2, [pc, #24]	; (90000e24 <HAL_InitTick+0x68>)
90000e0a:	687b      	ldr	r3, [r7, #4]
90000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
90000e0e:	2300      	movs	r3, #0
90000e10:	e000      	b.n	90000e14 <HAL_InitTick+0x58>
    return HAL_ERROR;
90000e12:	2301      	movs	r3, #1
}
90000e14:	4618      	mov	r0, r3
90000e16:	3708      	adds	r7, #8
90000e18:	46bd      	mov	sp, r7
90000e1a:	bd80      	pop	{r7, pc}
90000e1c:	2400000c 	.word	0x2400000c
90000e20:	24000000 	.word	0x24000000
90000e24:	24000008 	.word	0x24000008

90000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90000e28:	b480      	push	{r7}
90000e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
90000e2c:	4b06      	ldr	r3, [pc, #24]	; (90000e48 <HAL_IncTick+0x20>)
90000e2e:	781b      	ldrb	r3, [r3, #0]
90000e30:	461a      	mov	r2, r3
90000e32:	4b06      	ldr	r3, [pc, #24]	; (90000e4c <HAL_IncTick+0x24>)
90000e34:	681b      	ldr	r3, [r3, #0]
90000e36:	4413      	add	r3, r2
90000e38:	4a04      	ldr	r2, [pc, #16]	; (90000e4c <HAL_IncTick+0x24>)
90000e3a:	6013      	str	r3, [r2, #0]
}
90000e3c:	bf00      	nop
90000e3e:	46bd      	mov	sp, r7
90000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
90000e44:	4770      	bx	lr
90000e46:	bf00      	nop
90000e48:	2400000c 	.word	0x2400000c
90000e4c:	24000128 	.word	0x24000128

90000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90000e50:	b480      	push	{r7}
90000e52:	af00      	add	r7, sp, #0
  return uwTick;
90000e54:	4b03      	ldr	r3, [pc, #12]	; (90000e64 <HAL_GetTick+0x14>)
90000e56:	681b      	ldr	r3, [r3, #0]
}
90000e58:	4618      	mov	r0, r3
90000e5a:	46bd      	mov	sp, r7
90000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000e60:	4770      	bx	lr
90000e62:	bf00      	nop
90000e64:	24000128 	.word	0x24000128

90000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
90000e68:	b580      	push	{r7, lr}
90000e6a:	b084      	sub	sp, #16
90000e6c:	af00      	add	r7, sp, #0
90000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90000e70:	f7ff ffee 	bl	90000e50 <HAL_GetTick>
90000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
90000e76:	687b      	ldr	r3, [r7, #4]
90000e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
90000e7a:	68fb      	ldr	r3, [r7, #12]
90000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90000e80:	d005      	beq.n	90000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
90000e82:	4b0a      	ldr	r3, [pc, #40]	; (90000eac <HAL_Delay+0x44>)
90000e84:	781b      	ldrb	r3, [r3, #0]
90000e86:	461a      	mov	r2, r3
90000e88:	68fb      	ldr	r3, [r7, #12]
90000e8a:	4413      	add	r3, r2
90000e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
90000e8e:	bf00      	nop
90000e90:	f7ff ffde 	bl	90000e50 <HAL_GetTick>
90000e94:	4602      	mov	r2, r0
90000e96:	68bb      	ldr	r3, [r7, #8]
90000e98:	1ad3      	subs	r3, r2, r3
90000e9a:	68fa      	ldr	r2, [r7, #12]
90000e9c:	429a      	cmp	r2, r3
90000e9e:	d8f7      	bhi.n	90000e90 <HAL_Delay+0x28>
  {
  }
}
90000ea0:	bf00      	nop
90000ea2:	bf00      	nop
90000ea4:	3710      	adds	r7, #16
90000ea6:	46bd      	mov	sp, r7
90000ea8:	bd80      	pop	{r7, pc}
90000eaa:	bf00      	nop
90000eac:	2400000c 	.word	0x2400000c

90000eb0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
90000eb0:	b480      	push	{r7}
90000eb2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
90000eb4:	4b03      	ldr	r3, [pc, #12]	; (90000ec4 <HAL_GetREVID+0x14>)
90000eb6:	681b      	ldr	r3, [r3, #0]
90000eb8:	0c1b      	lsrs	r3, r3, #16
}
90000eba:	4618      	mov	r0, r3
90000ebc:	46bd      	mov	sp, r7
90000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
90000ec2:	4770      	bx	lr
90000ec4:	5c001000 	.word	0x5c001000

90000ec8 <__NVIC_SetPriorityGrouping>:
{
90000ec8:	b480      	push	{r7}
90000eca:	b085      	sub	sp, #20
90000ecc:	af00      	add	r7, sp, #0
90000ece:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90000ed0:	687b      	ldr	r3, [r7, #4]
90000ed2:	f003 0307 	and.w	r3, r3, #7
90000ed6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90000ed8:	4b0b      	ldr	r3, [pc, #44]	; (90000f08 <__NVIC_SetPriorityGrouping+0x40>)
90000eda:	68db      	ldr	r3, [r3, #12]
90000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90000ede:	68ba      	ldr	r2, [r7, #8]
90000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
90000ee4:	4013      	ands	r3, r2
90000ee6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90000ee8:	68fb      	ldr	r3, [r7, #12]
90000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90000eec:	68bb      	ldr	r3, [r7, #8]
90000eee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90000ef0:	4b06      	ldr	r3, [pc, #24]	; (90000f0c <__NVIC_SetPriorityGrouping+0x44>)
90000ef2:	4313      	orrs	r3, r2
90000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
90000ef6:	4a04      	ldr	r2, [pc, #16]	; (90000f08 <__NVIC_SetPriorityGrouping+0x40>)
90000ef8:	68bb      	ldr	r3, [r7, #8]
90000efa:	60d3      	str	r3, [r2, #12]
}
90000efc:	bf00      	nop
90000efe:	3714      	adds	r7, #20
90000f00:	46bd      	mov	sp, r7
90000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f06:	4770      	bx	lr
90000f08:	e000ed00 	.word	0xe000ed00
90000f0c:	05fa0000 	.word	0x05fa0000

90000f10 <__NVIC_GetPriorityGrouping>:
{
90000f10:	b480      	push	{r7}
90000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90000f14:	4b04      	ldr	r3, [pc, #16]	; (90000f28 <__NVIC_GetPriorityGrouping+0x18>)
90000f16:	68db      	ldr	r3, [r3, #12]
90000f18:	0a1b      	lsrs	r3, r3, #8
90000f1a:	f003 0307 	and.w	r3, r3, #7
}
90000f1e:	4618      	mov	r0, r3
90000f20:	46bd      	mov	sp, r7
90000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f26:	4770      	bx	lr
90000f28:	e000ed00 	.word	0xe000ed00

90000f2c <__NVIC_SetPriority>:
{
90000f2c:	b480      	push	{r7}
90000f2e:	b083      	sub	sp, #12
90000f30:	af00      	add	r7, sp, #0
90000f32:	4603      	mov	r3, r0
90000f34:	6039      	str	r1, [r7, #0]
90000f36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90000f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90000f3c:	2b00      	cmp	r3, #0
90000f3e:	db0a      	blt.n	90000f56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90000f40:	683b      	ldr	r3, [r7, #0]
90000f42:	b2da      	uxtb	r2, r3
90000f44:	490c      	ldr	r1, [pc, #48]	; (90000f78 <__NVIC_SetPriority+0x4c>)
90000f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90000f4a:	0112      	lsls	r2, r2, #4
90000f4c:	b2d2      	uxtb	r2, r2
90000f4e:	440b      	add	r3, r1
90000f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
90000f54:	e00a      	b.n	90000f6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90000f56:	683b      	ldr	r3, [r7, #0]
90000f58:	b2da      	uxtb	r2, r3
90000f5a:	4908      	ldr	r1, [pc, #32]	; (90000f7c <__NVIC_SetPriority+0x50>)
90000f5c:	88fb      	ldrh	r3, [r7, #6]
90000f5e:	f003 030f 	and.w	r3, r3, #15
90000f62:	3b04      	subs	r3, #4
90000f64:	0112      	lsls	r2, r2, #4
90000f66:	b2d2      	uxtb	r2, r2
90000f68:	440b      	add	r3, r1
90000f6a:	761a      	strb	r2, [r3, #24]
}
90000f6c:	bf00      	nop
90000f6e:	370c      	adds	r7, #12
90000f70:	46bd      	mov	sp, r7
90000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f76:	4770      	bx	lr
90000f78:	e000e100 	.word	0xe000e100
90000f7c:	e000ed00 	.word	0xe000ed00

90000f80 <NVIC_EncodePriority>:
{
90000f80:	b480      	push	{r7}
90000f82:	b089      	sub	sp, #36	; 0x24
90000f84:	af00      	add	r7, sp, #0
90000f86:	60f8      	str	r0, [r7, #12]
90000f88:	60b9      	str	r1, [r7, #8]
90000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
90000f8c:	68fb      	ldr	r3, [r7, #12]
90000f8e:	f003 0307 	and.w	r3, r3, #7
90000f92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90000f94:	69fb      	ldr	r3, [r7, #28]
90000f96:	f1c3 0307 	rsb	r3, r3, #7
90000f9a:	2b04      	cmp	r3, #4
90000f9c:	bf28      	it	cs
90000f9e:	2304      	movcs	r3, #4
90000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90000fa2:	69fb      	ldr	r3, [r7, #28]
90000fa4:	3304      	adds	r3, #4
90000fa6:	2b06      	cmp	r3, #6
90000fa8:	d902      	bls.n	90000fb0 <NVIC_EncodePriority+0x30>
90000faa:	69fb      	ldr	r3, [r7, #28]
90000fac:	3b03      	subs	r3, #3
90000fae:	e000      	b.n	90000fb2 <NVIC_EncodePriority+0x32>
90000fb0:	2300      	movs	r3, #0
90000fb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90000fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90000fb8:	69bb      	ldr	r3, [r7, #24]
90000fba:	fa02 f303 	lsl.w	r3, r2, r3
90000fbe:	43da      	mvns	r2, r3
90000fc0:	68bb      	ldr	r3, [r7, #8]
90000fc2:	401a      	ands	r2, r3
90000fc4:	697b      	ldr	r3, [r7, #20]
90000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90000fc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
90000fcc:	697b      	ldr	r3, [r7, #20]
90000fce:	fa01 f303 	lsl.w	r3, r1, r3
90000fd2:	43d9      	mvns	r1, r3
90000fd4:	687b      	ldr	r3, [r7, #4]
90000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90000fd8:	4313      	orrs	r3, r2
}
90000fda:	4618      	mov	r0, r3
90000fdc:	3724      	adds	r7, #36	; 0x24
90000fde:	46bd      	mov	sp, r7
90000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
90000fe4:	4770      	bx	lr
	...

90000fe8 <SysTick_Config>:
{
90000fe8:	b580      	push	{r7, lr}
90000fea:	b082      	sub	sp, #8
90000fec:	af00      	add	r7, sp, #0
90000fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90000ff0:	687b      	ldr	r3, [r7, #4]
90000ff2:	3b01      	subs	r3, #1
90000ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
90000ff8:	d301      	bcc.n	90000ffe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
90000ffa:	2301      	movs	r3, #1
90000ffc:	e00f      	b.n	9000101e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90000ffe:	4a0a      	ldr	r2, [pc, #40]	; (90001028 <SysTick_Config+0x40>)
90001000:	687b      	ldr	r3, [r7, #4]
90001002:	3b01      	subs	r3, #1
90001004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
90001006:	210f      	movs	r1, #15
90001008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
9000100c:	f7ff ff8e 	bl	90000f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90001010:	4b05      	ldr	r3, [pc, #20]	; (90001028 <SysTick_Config+0x40>)
90001012:	2200      	movs	r2, #0
90001014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
90001016:	4b04      	ldr	r3, [pc, #16]	; (90001028 <SysTick_Config+0x40>)
90001018:	2207      	movs	r2, #7
9000101a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
9000101c:	2300      	movs	r3, #0
}
9000101e:	4618      	mov	r0, r3
90001020:	3708      	adds	r7, #8
90001022:	46bd      	mov	sp, r7
90001024:	bd80      	pop	{r7, pc}
90001026:	bf00      	nop
90001028:	e000e010 	.word	0xe000e010

9000102c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
9000102c:	b580      	push	{r7, lr}
9000102e:	b082      	sub	sp, #8
90001030:	af00      	add	r7, sp, #0
90001032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
90001034:	6878      	ldr	r0, [r7, #4]
90001036:	f7ff ff47 	bl	90000ec8 <__NVIC_SetPriorityGrouping>
}
9000103a:	bf00      	nop
9000103c:	3708      	adds	r7, #8
9000103e:	46bd      	mov	sp, r7
90001040:	bd80      	pop	{r7, pc}

90001042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90001042:	b580      	push	{r7, lr}
90001044:	b086      	sub	sp, #24
90001046:	af00      	add	r7, sp, #0
90001048:	4603      	mov	r3, r0
9000104a:	60b9      	str	r1, [r7, #8]
9000104c:	607a      	str	r2, [r7, #4]
9000104e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
90001050:	f7ff ff5e 	bl	90000f10 <__NVIC_GetPriorityGrouping>
90001054:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90001056:	687a      	ldr	r2, [r7, #4]
90001058:	68b9      	ldr	r1, [r7, #8]
9000105a:	6978      	ldr	r0, [r7, #20]
9000105c:	f7ff ff90 	bl	90000f80 <NVIC_EncodePriority>
90001060:	4602      	mov	r2, r0
90001062:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90001066:	4611      	mov	r1, r2
90001068:	4618      	mov	r0, r3
9000106a:	f7ff ff5f 	bl	90000f2c <__NVIC_SetPriority>
}
9000106e:	bf00      	nop
90001070:	3718      	adds	r7, #24
90001072:	46bd      	mov	sp, r7
90001074:	bd80      	pop	{r7, pc}

90001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
90001076:	b580      	push	{r7, lr}
90001078:	b082      	sub	sp, #8
9000107a:	af00      	add	r7, sp, #0
9000107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
9000107e:	6878      	ldr	r0, [r7, #4]
90001080:	f7ff ffb2 	bl	90000fe8 <SysTick_Config>
90001084:	4603      	mov	r3, r0
}
90001086:	4618      	mov	r0, r3
90001088:	3708      	adds	r7, #8
9000108a:	46bd      	mov	sp, r7
9000108c:	bd80      	pop	{r7, pc}
	...

90001090 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
90001090:	b480      	push	{r7}
90001092:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90001094:	f3bf 8f5f 	dmb	sy
}
90001098:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
9000109a:	4b07      	ldr	r3, [pc, #28]	; (900010b8 <HAL_MPU_Disable+0x28>)
9000109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000109e:	4a06      	ldr	r2, [pc, #24]	; (900010b8 <HAL_MPU_Disable+0x28>)
900010a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900010a4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
900010a6:	4b05      	ldr	r3, [pc, #20]	; (900010bc <HAL_MPU_Disable+0x2c>)
900010a8:	2200      	movs	r2, #0
900010aa:	605a      	str	r2, [r3, #4]
}
900010ac:	bf00      	nop
900010ae:	46bd      	mov	sp, r7
900010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
900010b4:	4770      	bx	lr
900010b6:	bf00      	nop
900010b8:	e000ed00 	.word	0xe000ed00
900010bc:	e000ed90 	.word	0xe000ed90

900010c0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
900010c0:	b480      	push	{r7}
900010c2:	b083      	sub	sp, #12
900010c4:	af00      	add	r7, sp, #0
900010c6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
900010c8:	4a0b      	ldr	r2, [pc, #44]	; (900010f8 <HAL_MPU_Enable+0x38>)
900010ca:	687b      	ldr	r3, [r7, #4]
900010cc:	f043 0301 	orr.w	r3, r3, #1
900010d0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
900010d2:	4b0a      	ldr	r3, [pc, #40]	; (900010fc <HAL_MPU_Enable+0x3c>)
900010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900010d6:	4a09      	ldr	r2, [pc, #36]	; (900010fc <HAL_MPU_Enable+0x3c>)
900010d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900010dc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
900010de:	f3bf 8f4f 	dsb	sy
}
900010e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900010e4:	f3bf 8f6f 	isb	sy
}
900010e8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
900010ea:	bf00      	nop
900010ec:	370c      	adds	r7, #12
900010ee:	46bd      	mov	sp, r7
900010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
900010f4:	4770      	bx	lr
900010f6:	bf00      	nop
900010f8:	e000ed90 	.word	0xe000ed90
900010fc:	e000ed00 	.word	0xe000ed00

90001100 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
90001100:	b480      	push	{r7}
90001102:	b083      	sub	sp, #12
90001104:	af00      	add	r7, sp, #0
90001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90001108:	687b      	ldr	r3, [r7, #4]
9000110a:	785a      	ldrb	r2, [r3, #1]
9000110c:	4b1d      	ldr	r3, [pc, #116]	; (90001184 <HAL_MPU_ConfigRegion+0x84>)
9000110e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
90001110:	687b      	ldr	r3, [r7, #4]
90001112:	781b      	ldrb	r3, [r3, #0]
90001114:	2b00      	cmp	r3, #0
90001116:	d029      	beq.n	9000116c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90001118:	4a1a      	ldr	r2, [pc, #104]	; (90001184 <HAL_MPU_ConfigRegion+0x84>)
9000111a:	687b      	ldr	r3, [r7, #4]
9000111c:	685b      	ldr	r3, [r3, #4]
9000111e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001120:	687b      	ldr	r3, [r7, #4]
90001122:	7b1b      	ldrb	r3, [r3, #12]
90001124:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90001126:	687b      	ldr	r3, [r7, #4]
90001128:	7adb      	ldrb	r3, [r3, #11]
9000112a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000112c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000112e:	687b      	ldr	r3, [r7, #4]
90001130:	7a9b      	ldrb	r3, [r3, #10]
90001132:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90001134:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90001136:	687b      	ldr	r3, [r7, #4]
90001138:	7b5b      	ldrb	r3, [r3, #13]
9000113a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
9000113c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
9000113e:	687b      	ldr	r3, [r7, #4]
90001140:	7b9b      	ldrb	r3, [r3, #14]
90001142:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90001144:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90001146:	687b      	ldr	r3, [r7, #4]
90001148:	7bdb      	ldrb	r3, [r3, #15]
9000114a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
9000114c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
9000114e:	687b      	ldr	r3, [r7, #4]
90001150:	7a5b      	ldrb	r3, [r3, #9]
90001152:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90001154:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90001156:	687b      	ldr	r3, [r7, #4]
90001158:	7a1b      	ldrb	r3, [r3, #8]
9000115a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
9000115c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
9000115e:	687a      	ldr	r2, [r7, #4]
90001160:	7812      	ldrb	r2, [r2, #0]
90001162:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001164:	4a07      	ldr	r2, [pc, #28]	; (90001184 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90001166:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90001168:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
9000116a:	e005      	b.n	90001178 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
9000116c:	4b05      	ldr	r3, [pc, #20]	; (90001184 <HAL_MPU_ConfigRegion+0x84>)
9000116e:	2200      	movs	r2, #0
90001170:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
90001172:	4b04      	ldr	r3, [pc, #16]	; (90001184 <HAL_MPU_ConfigRegion+0x84>)
90001174:	2200      	movs	r2, #0
90001176:	611a      	str	r2, [r3, #16]
}
90001178:	bf00      	nop
9000117a:	370c      	adds	r7, #12
9000117c:	46bd      	mov	sp, r7
9000117e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001182:	4770      	bx	lr
90001184:	e000ed90 	.word	0xe000ed90

90001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90001188:	b480      	push	{r7}
9000118a:	b089      	sub	sp, #36	; 0x24
9000118c:	af00      	add	r7, sp, #0
9000118e:	6078      	str	r0, [r7, #4]
90001190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90001192:	2300      	movs	r3, #0
90001194:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90001196:	4b89      	ldr	r3, [pc, #548]	; (900013bc <HAL_GPIO_Init+0x234>)
90001198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000119a:	e194      	b.n	900014c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
9000119c:	683b      	ldr	r3, [r7, #0]
9000119e:	681a      	ldr	r2, [r3, #0]
900011a0:	2101      	movs	r1, #1
900011a2:	69fb      	ldr	r3, [r7, #28]
900011a4:	fa01 f303 	lsl.w	r3, r1, r3
900011a8:	4013      	ands	r3, r2
900011aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
900011ac:	693b      	ldr	r3, [r7, #16]
900011ae:	2b00      	cmp	r3, #0
900011b0:	f000 8186 	beq.w	900014c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
900011b4:	683b      	ldr	r3, [r7, #0]
900011b6:	685b      	ldr	r3, [r3, #4]
900011b8:	f003 0303 	and.w	r3, r3, #3
900011bc:	2b01      	cmp	r3, #1
900011be:	d005      	beq.n	900011cc <HAL_GPIO_Init+0x44>
900011c0:	683b      	ldr	r3, [r7, #0]
900011c2:	685b      	ldr	r3, [r3, #4]
900011c4:	f003 0303 	and.w	r3, r3, #3
900011c8:	2b02      	cmp	r3, #2
900011ca:	d130      	bne.n	9000122e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
900011cc:	687b      	ldr	r3, [r7, #4]
900011ce:	689b      	ldr	r3, [r3, #8]
900011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900011d2:	69fb      	ldr	r3, [r7, #28]
900011d4:	005b      	lsls	r3, r3, #1
900011d6:	2203      	movs	r2, #3
900011d8:	fa02 f303 	lsl.w	r3, r2, r3
900011dc:	43db      	mvns	r3, r3
900011de:	69ba      	ldr	r2, [r7, #24]
900011e0:	4013      	ands	r3, r2
900011e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
900011e4:	683b      	ldr	r3, [r7, #0]
900011e6:	68da      	ldr	r2, [r3, #12]
900011e8:	69fb      	ldr	r3, [r7, #28]
900011ea:	005b      	lsls	r3, r3, #1
900011ec:	fa02 f303 	lsl.w	r3, r2, r3
900011f0:	69ba      	ldr	r2, [r7, #24]
900011f2:	4313      	orrs	r3, r2
900011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
900011f6:	687b      	ldr	r3, [r7, #4]
900011f8:	69ba      	ldr	r2, [r7, #24]
900011fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
900011fc:	687b      	ldr	r3, [r7, #4]
900011fe:	685b      	ldr	r3, [r3, #4]
90001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90001202:	2201      	movs	r2, #1
90001204:	69fb      	ldr	r3, [r7, #28]
90001206:	fa02 f303 	lsl.w	r3, r2, r3
9000120a:	43db      	mvns	r3, r3
9000120c:	69ba      	ldr	r2, [r7, #24]
9000120e:	4013      	ands	r3, r2
90001210:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90001212:	683b      	ldr	r3, [r7, #0]
90001214:	685b      	ldr	r3, [r3, #4]
90001216:	091b      	lsrs	r3, r3, #4
90001218:	f003 0201 	and.w	r2, r3, #1
9000121c:	69fb      	ldr	r3, [r7, #28]
9000121e:	fa02 f303 	lsl.w	r3, r2, r3
90001222:	69ba      	ldr	r2, [r7, #24]
90001224:	4313      	orrs	r3, r2
90001226:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
90001228:	687b      	ldr	r3, [r7, #4]
9000122a:	69ba      	ldr	r2, [r7, #24]
9000122c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
9000122e:	683b      	ldr	r3, [r7, #0]
90001230:	685b      	ldr	r3, [r3, #4]
90001232:	f003 0303 	and.w	r3, r3, #3
90001236:	2b03      	cmp	r3, #3
90001238:	d017      	beq.n	9000126a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
9000123a:	687b      	ldr	r3, [r7, #4]
9000123c:	68db      	ldr	r3, [r3, #12]
9000123e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90001240:	69fb      	ldr	r3, [r7, #28]
90001242:	005b      	lsls	r3, r3, #1
90001244:	2203      	movs	r2, #3
90001246:	fa02 f303 	lsl.w	r3, r2, r3
9000124a:	43db      	mvns	r3, r3
9000124c:	69ba      	ldr	r2, [r7, #24]
9000124e:	4013      	ands	r3, r2
90001250:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90001252:	683b      	ldr	r3, [r7, #0]
90001254:	689a      	ldr	r2, [r3, #8]
90001256:	69fb      	ldr	r3, [r7, #28]
90001258:	005b      	lsls	r3, r3, #1
9000125a:	fa02 f303 	lsl.w	r3, r2, r3
9000125e:	69ba      	ldr	r2, [r7, #24]
90001260:	4313      	orrs	r3, r2
90001262:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90001264:	687b      	ldr	r3, [r7, #4]
90001266:	69ba      	ldr	r2, [r7, #24]
90001268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
9000126a:	683b      	ldr	r3, [r7, #0]
9000126c:	685b      	ldr	r3, [r3, #4]
9000126e:	f003 0303 	and.w	r3, r3, #3
90001272:	2b02      	cmp	r3, #2
90001274:	d123      	bne.n	900012be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90001276:	69fb      	ldr	r3, [r7, #28]
90001278:	08da      	lsrs	r2, r3, #3
9000127a:	687b      	ldr	r3, [r7, #4]
9000127c:	3208      	adds	r2, #8
9000127e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90001284:	69fb      	ldr	r3, [r7, #28]
90001286:	f003 0307 	and.w	r3, r3, #7
9000128a:	009b      	lsls	r3, r3, #2
9000128c:	220f      	movs	r2, #15
9000128e:	fa02 f303 	lsl.w	r3, r2, r3
90001292:	43db      	mvns	r3, r3
90001294:	69ba      	ldr	r2, [r7, #24]
90001296:	4013      	ands	r3, r2
90001298:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
9000129a:	683b      	ldr	r3, [r7, #0]
9000129c:	691a      	ldr	r2, [r3, #16]
9000129e:	69fb      	ldr	r3, [r7, #28]
900012a0:	f003 0307 	and.w	r3, r3, #7
900012a4:	009b      	lsls	r3, r3, #2
900012a6:	fa02 f303 	lsl.w	r3, r2, r3
900012aa:	69ba      	ldr	r2, [r7, #24]
900012ac:	4313      	orrs	r3, r2
900012ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
900012b0:	69fb      	ldr	r3, [r7, #28]
900012b2:	08da      	lsrs	r2, r3, #3
900012b4:	687b      	ldr	r3, [r7, #4]
900012b6:	3208      	adds	r2, #8
900012b8:	69b9      	ldr	r1, [r7, #24]
900012ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
900012be:	687b      	ldr	r3, [r7, #4]
900012c0:	681b      	ldr	r3, [r3, #0]
900012c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
900012c4:	69fb      	ldr	r3, [r7, #28]
900012c6:	005b      	lsls	r3, r3, #1
900012c8:	2203      	movs	r2, #3
900012ca:	fa02 f303 	lsl.w	r3, r2, r3
900012ce:	43db      	mvns	r3, r3
900012d0:	69ba      	ldr	r2, [r7, #24]
900012d2:	4013      	ands	r3, r2
900012d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
900012d6:	683b      	ldr	r3, [r7, #0]
900012d8:	685b      	ldr	r3, [r3, #4]
900012da:	f003 0203 	and.w	r2, r3, #3
900012de:	69fb      	ldr	r3, [r7, #28]
900012e0:	005b      	lsls	r3, r3, #1
900012e2:	fa02 f303 	lsl.w	r3, r2, r3
900012e6:	69ba      	ldr	r2, [r7, #24]
900012e8:	4313      	orrs	r3, r2
900012ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
900012ec:	687b      	ldr	r3, [r7, #4]
900012ee:	69ba      	ldr	r2, [r7, #24]
900012f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
900012f2:	683b      	ldr	r3, [r7, #0]
900012f4:	685b      	ldr	r3, [r3, #4]
900012f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
900012fa:	2b00      	cmp	r3, #0
900012fc:	f000 80e0 	beq.w	900014c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90001300:	4b2f      	ldr	r3, [pc, #188]	; (900013c0 <HAL_GPIO_Init+0x238>)
90001302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001306:	4a2e      	ldr	r2, [pc, #184]	; (900013c0 <HAL_GPIO_Init+0x238>)
90001308:	f043 0302 	orr.w	r3, r3, #2
9000130c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
90001310:	4b2b      	ldr	r3, [pc, #172]	; (900013c0 <HAL_GPIO_Init+0x238>)
90001312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001316:	f003 0302 	and.w	r3, r3, #2
9000131a:	60fb      	str	r3, [r7, #12]
9000131c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
9000131e:	4a29      	ldr	r2, [pc, #164]	; (900013c4 <HAL_GPIO_Init+0x23c>)
90001320:	69fb      	ldr	r3, [r7, #28]
90001322:	089b      	lsrs	r3, r3, #2
90001324:	3302      	adds	r3, #2
90001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
9000132c:	69fb      	ldr	r3, [r7, #28]
9000132e:	f003 0303 	and.w	r3, r3, #3
90001332:	009b      	lsls	r3, r3, #2
90001334:	220f      	movs	r2, #15
90001336:	fa02 f303 	lsl.w	r3, r2, r3
9000133a:	43db      	mvns	r3, r3
9000133c:	69ba      	ldr	r2, [r7, #24]
9000133e:	4013      	ands	r3, r2
90001340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90001342:	687b      	ldr	r3, [r7, #4]
90001344:	4a20      	ldr	r2, [pc, #128]	; (900013c8 <HAL_GPIO_Init+0x240>)
90001346:	4293      	cmp	r3, r2
90001348:	d052      	beq.n	900013f0 <HAL_GPIO_Init+0x268>
9000134a:	687b      	ldr	r3, [r7, #4]
9000134c:	4a1f      	ldr	r2, [pc, #124]	; (900013cc <HAL_GPIO_Init+0x244>)
9000134e:	4293      	cmp	r3, r2
90001350:	d031      	beq.n	900013b6 <HAL_GPIO_Init+0x22e>
90001352:	687b      	ldr	r3, [r7, #4]
90001354:	4a1e      	ldr	r2, [pc, #120]	; (900013d0 <HAL_GPIO_Init+0x248>)
90001356:	4293      	cmp	r3, r2
90001358:	d02b      	beq.n	900013b2 <HAL_GPIO_Init+0x22a>
9000135a:	687b      	ldr	r3, [r7, #4]
9000135c:	4a1d      	ldr	r2, [pc, #116]	; (900013d4 <HAL_GPIO_Init+0x24c>)
9000135e:	4293      	cmp	r3, r2
90001360:	d025      	beq.n	900013ae <HAL_GPIO_Init+0x226>
90001362:	687b      	ldr	r3, [r7, #4]
90001364:	4a1c      	ldr	r2, [pc, #112]	; (900013d8 <HAL_GPIO_Init+0x250>)
90001366:	4293      	cmp	r3, r2
90001368:	d01f      	beq.n	900013aa <HAL_GPIO_Init+0x222>
9000136a:	687b      	ldr	r3, [r7, #4]
9000136c:	4a1b      	ldr	r2, [pc, #108]	; (900013dc <HAL_GPIO_Init+0x254>)
9000136e:	4293      	cmp	r3, r2
90001370:	d019      	beq.n	900013a6 <HAL_GPIO_Init+0x21e>
90001372:	687b      	ldr	r3, [r7, #4]
90001374:	4a1a      	ldr	r2, [pc, #104]	; (900013e0 <HAL_GPIO_Init+0x258>)
90001376:	4293      	cmp	r3, r2
90001378:	d013      	beq.n	900013a2 <HAL_GPIO_Init+0x21a>
9000137a:	687b      	ldr	r3, [r7, #4]
9000137c:	4a19      	ldr	r2, [pc, #100]	; (900013e4 <HAL_GPIO_Init+0x25c>)
9000137e:	4293      	cmp	r3, r2
90001380:	d00d      	beq.n	9000139e <HAL_GPIO_Init+0x216>
90001382:	687b      	ldr	r3, [r7, #4]
90001384:	4a18      	ldr	r2, [pc, #96]	; (900013e8 <HAL_GPIO_Init+0x260>)
90001386:	4293      	cmp	r3, r2
90001388:	d007      	beq.n	9000139a <HAL_GPIO_Init+0x212>
9000138a:	687b      	ldr	r3, [r7, #4]
9000138c:	4a17      	ldr	r2, [pc, #92]	; (900013ec <HAL_GPIO_Init+0x264>)
9000138e:	4293      	cmp	r3, r2
90001390:	d101      	bne.n	90001396 <HAL_GPIO_Init+0x20e>
90001392:	2309      	movs	r3, #9
90001394:	e02d      	b.n	900013f2 <HAL_GPIO_Init+0x26a>
90001396:	230a      	movs	r3, #10
90001398:	e02b      	b.n	900013f2 <HAL_GPIO_Init+0x26a>
9000139a:	2308      	movs	r3, #8
9000139c:	e029      	b.n	900013f2 <HAL_GPIO_Init+0x26a>
9000139e:	2307      	movs	r3, #7
900013a0:	e027      	b.n	900013f2 <HAL_GPIO_Init+0x26a>
900013a2:	2306      	movs	r3, #6
900013a4:	e025      	b.n	900013f2 <HAL_GPIO_Init+0x26a>
900013a6:	2305      	movs	r3, #5
900013a8:	e023      	b.n	900013f2 <HAL_GPIO_Init+0x26a>
900013aa:	2304      	movs	r3, #4
900013ac:	e021      	b.n	900013f2 <HAL_GPIO_Init+0x26a>
900013ae:	2303      	movs	r3, #3
900013b0:	e01f      	b.n	900013f2 <HAL_GPIO_Init+0x26a>
900013b2:	2302      	movs	r3, #2
900013b4:	e01d      	b.n	900013f2 <HAL_GPIO_Init+0x26a>
900013b6:	2301      	movs	r3, #1
900013b8:	e01b      	b.n	900013f2 <HAL_GPIO_Init+0x26a>
900013ba:	bf00      	nop
900013bc:	58000080 	.word	0x58000080
900013c0:	58024400 	.word	0x58024400
900013c4:	58000400 	.word	0x58000400
900013c8:	58020000 	.word	0x58020000
900013cc:	58020400 	.word	0x58020400
900013d0:	58020800 	.word	0x58020800
900013d4:	58020c00 	.word	0x58020c00
900013d8:	58021000 	.word	0x58021000
900013dc:	58021400 	.word	0x58021400
900013e0:	58021800 	.word	0x58021800
900013e4:	58021c00 	.word	0x58021c00
900013e8:	58022000 	.word	0x58022000
900013ec:	58022400 	.word	0x58022400
900013f0:	2300      	movs	r3, #0
900013f2:	69fa      	ldr	r2, [r7, #28]
900013f4:	f002 0203 	and.w	r2, r2, #3
900013f8:	0092      	lsls	r2, r2, #2
900013fa:	4093      	lsls	r3, r2
900013fc:	69ba      	ldr	r2, [r7, #24]
900013fe:	4313      	orrs	r3, r2
90001400:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
90001402:	4938      	ldr	r1, [pc, #224]	; (900014e4 <HAL_GPIO_Init+0x35c>)
90001404:	69fb      	ldr	r3, [r7, #28]
90001406:	089b      	lsrs	r3, r3, #2
90001408:	3302      	adds	r3, #2
9000140a:	69ba      	ldr	r2, [r7, #24]
9000140c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90001410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90001414:	681b      	ldr	r3, [r3, #0]
90001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90001418:	693b      	ldr	r3, [r7, #16]
9000141a:	43db      	mvns	r3, r3
9000141c:	69ba      	ldr	r2, [r7, #24]
9000141e:	4013      	ands	r3, r2
90001420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90001422:	683b      	ldr	r3, [r7, #0]
90001424:	685b      	ldr	r3, [r3, #4]
90001426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
9000142a:	2b00      	cmp	r3, #0
9000142c:	d003      	beq.n	90001436 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
9000142e:	69ba      	ldr	r2, [r7, #24]
90001430:	693b      	ldr	r3, [r7, #16]
90001432:	4313      	orrs	r3, r2
90001434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
90001436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
9000143a:	69bb      	ldr	r3, [r7, #24]
9000143c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
9000143e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
90001442:	685b      	ldr	r3, [r3, #4]
90001444:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90001446:	693b      	ldr	r3, [r7, #16]
90001448:	43db      	mvns	r3, r3
9000144a:	69ba      	ldr	r2, [r7, #24]
9000144c:	4013      	ands	r3, r2
9000144e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90001450:	683b      	ldr	r3, [r7, #0]
90001452:	685b      	ldr	r3, [r3, #4]
90001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90001458:	2b00      	cmp	r3, #0
9000145a:	d003      	beq.n	90001464 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
9000145c:	69ba      	ldr	r2, [r7, #24]
9000145e:	693b      	ldr	r3, [r7, #16]
90001460:	4313      	orrs	r3, r2
90001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90001464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
90001468:	69bb      	ldr	r3, [r7, #24]
9000146a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
9000146c:	697b      	ldr	r3, [r7, #20]
9000146e:	685b      	ldr	r3, [r3, #4]
90001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90001472:	693b      	ldr	r3, [r7, #16]
90001474:	43db      	mvns	r3, r3
90001476:	69ba      	ldr	r2, [r7, #24]
90001478:	4013      	ands	r3, r2
9000147a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
9000147c:	683b      	ldr	r3, [r7, #0]
9000147e:	685b      	ldr	r3, [r3, #4]
90001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001484:	2b00      	cmp	r3, #0
90001486:	d003      	beq.n	90001490 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90001488:	69ba      	ldr	r2, [r7, #24]
9000148a:	693b      	ldr	r3, [r7, #16]
9000148c:	4313      	orrs	r3, r2
9000148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90001490:	697b      	ldr	r3, [r7, #20]
90001492:	69ba      	ldr	r2, [r7, #24]
90001494:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90001496:	697b      	ldr	r3, [r7, #20]
90001498:	681b      	ldr	r3, [r3, #0]
9000149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
9000149c:	693b      	ldr	r3, [r7, #16]
9000149e:	43db      	mvns	r3, r3
900014a0:	69ba      	ldr	r2, [r7, #24]
900014a2:	4013      	ands	r3, r2
900014a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
900014a6:	683b      	ldr	r3, [r7, #0]
900014a8:	685b      	ldr	r3, [r3, #4]
900014aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900014ae:	2b00      	cmp	r3, #0
900014b0:	d003      	beq.n	900014ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
900014b2:	69ba      	ldr	r2, [r7, #24]
900014b4:	693b      	ldr	r3, [r7, #16]
900014b6:	4313      	orrs	r3, r2
900014b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
900014ba:	697b      	ldr	r3, [r7, #20]
900014bc:	69ba      	ldr	r2, [r7, #24]
900014be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
900014c0:	69fb      	ldr	r3, [r7, #28]
900014c2:	3301      	adds	r3, #1
900014c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
900014c6:	683b      	ldr	r3, [r7, #0]
900014c8:	681a      	ldr	r2, [r3, #0]
900014ca:	69fb      	ldr	r3, [r7, #28]
900014cc:	fa22 f303 	lsr.w	r3, r2, r3
900014d0:	2b00      	cmp	r3, #0
900014d2:	f47f ae63 	bne.w	9000119c <HAL_GPIO_Init+0x14>
  }
}
900014d6:	bf00      	nop
900014d8:	bf00      	nop
900014da:	3724      	adds	r7, #36	; 0x24
900014dc:	46bd      	mov	sp, r7
900014de:	f85d 7b04 	ldr.w	r7, [sp], #4
900014e2:	4770      	bx	lr
900014e4:	58000400 	.word	0x58000400

900014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
900014e8:	b480      	push	{r7}
900014ea:	b083      	sub	sp, #12
900014ec:	af00      	add	r7, sp, #0
900014ee:	6078      	str	r0, [r7, #4]
900014f0:	460b      	mov	r3, r1
900014f2:	807b      	strh	r3, [r7, #2]
900014f4:	4613      	mov	r3, r2
900014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
900014f8:	787b      	ldrb	r3, [r7, #1]
900014fa:	2b00      	cmp	r3, #0
900014fc:	d003      	beq.n	90001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
900014fe:	887a      	ldrh	r2, [r7, #2]
90001500:	687b      	ldr	r3, [r7, #4]
90001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
90001504:	e003      	b.n	9000150e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90001506:	887b      	ldrh	r3, [r7, #2]
90001508:	041a      	lsls	r2, r3, #16
9000150a:	687b      	ldr	r3, [r7, #4]
9000150c:	619a      	str	r2, [r3, #24]
}
9000150e:	bf00      	nop
90001510:	370c      	adds	r7, #12
90001512:	46bd      	mov	sp, r7
90001514:	f85d 7b04 	ldr.w	r7, [sp], #4
90001518:	4770      	bx	lr

9000151a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
9000151a:	b480      	push	{r7}
9000151c:	b085      	sub	sp, #20
9000151e:	af00      	add	r7, sp, #0
90001520:	6078      	str	r0, [r7, #4]
90001522:	460b      	mov	r3, r1
90001524:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
90001526:	687b      	ldr	r3, [r7, #4]
90001528:	695b      	ldr	r3, [r3, #20]
9000152a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
9000152c:	887a      	ldrh	r2, [r7, #2]
9000152e:	68fb      	ldr	r3, [r7, #12]
90001530:	4013      	ands	r3, r2
90001532:	041a      	lsls	r2, r3, #16
90001534:	68fb      	ldr	r3, [r7, #12]
90001536:	43d9      	mvns	r1, r3
90001538:	887b      	ldrh	r3, [r7, #2]
9000153a:	400b      	ands	r3, r1
9000153c:	431a      	orrs	r2, r3
9000153e:	687b      	ldr	r3, [r7, #4]
90001540:	619a      	str	r2, [r3, #24]
}
90001542:	bf00      	nop
90001544:	3714      	adds	r7, #20
90001546:	46bd      	mov	sp, r7
90001548:	f85d 7b04 	ldr.w	r7, [sp], #4
9000154c:	4770      	bx	lr
	...

90001550 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
90001550:	b580      	push	{r7, lr}
90001552:	b084      	sub	sp, #16
90001554:	af00      	add	r7, sp, #0
90001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
90001558:	4b19      	ldr	r3, [pc, #100]	; (900015c0 <HAL_PWREx_ConfigSupply+0x70>)
9000155a:	68db      	ldr	r3, [r3, #12]
9000155c:	f003 0304 	and.w	r3, r3, #4
90001560:	2b04      	cmp	r3, #4
90001562:	d00a      	beq.n	9000157a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
90001564:	4b16      	ldr	r3, [pc, #88]	; (900015c0 <HAL_PWREx_ConfigSupply+0x70>)
90001566:	68db      	ldr	r3, [r3, #12]
90001568:	f003 0307 	and.w	r3, r3, #7
9000156c:	687a      	ldr	r2, [r7, #4]
9000156e:	429a      	cmp	r2, r3
90001570:	d001      	beq.n	90001576 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
90001572:	2301      	movs	r3, #1
90001574:	e01f      	b.n	900015b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
90001576:	2300      	movs	r3, #0
90001578:	e01d      	b.n	900015b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
9000157a:	4b11      	ldr	r3, [pc, #68]	; (900015c0 <HAL_PWREx_ConfigSupply+0x70>)
9000157c:	68db      	ldr	r3, [r3, #12]
9000157e:	f023 0207 	bic.w	r2, r3, #7
90001582:	490f      	ldr	r1, [pc, #60]	; (900015c0 <HAL_PWREx_ConfigSupply+0x70>)
90001584:	687b      	ldr	r3, [r7, #4]
90001586:	4313      	orrs	r3, r2
90001588:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
9000158a:	f7ff fc61 	bl	90000e50 <HAL_GetTick>
9000158e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
90001590:	e009      	b.n	900015a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
90001592:	f7ff fc5d 	bl	90000e50 <HAL_GetTick>
90001596:	4602      	mov	r2, r0
90001598:	68fb      	ldr	r3, [r7, #12]
9000159a:	1ad3      	subs	r3, r2, r3
9000159c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
900015a0:	d901      	bls.n	900015a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
900015a2:	2301      	movs	r3, #1
900015a4:	e007      	b.n	900015b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
900015a6:	4b06      	ldr	r3, [pc, #24]	; (900015c0 <HAL_PWREx_ConfigSupply+0x70>)
900015a8:	685b      	ldr	r3, [r3, #4]
900015aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900015ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
900015b2:	d1ee      	bne.n	90001592 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
900015b4:	2300      	movs	r3, #0
}
900015b6:	4618      	mov	r0, r3
900015b8:	3710      	adds	r7, #16
900015ba:	46bd      	mov	sp, r7
900015bc:	bd80      	pop	{r7, pc}
900015be:	bf00      	nop
900015c0:	58024800 	.word	0x58024800

900015c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
900015c4:	b580      	push	{r7, lr}
900015c6:	b08c      	sub	sp, #48	; 0x30
900015c8:	af00      	add	r7, sp, #0
900015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
900015cc:	687b      	ldr	r3, [r7, #4]
900015ce:	2b00      	cmp	r3, #0
900015d0:	d102      	bne.n	900015d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
900015d2:	2301      	movs	r3, #1
900015d4:	f000 bc1d 	b.w	90001e12 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
900015d8:	687b      	ldr	r3, [r7, #4]
900015da:	681b      	ldr	r3, [r3, #0]
900015dc:	f003 0301 	and.w	r3, r3, #1
900015e0:	2b00      	cmp	r3, #0
900015e2:	f000 8087 	beq.w	900016f4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900015e6:	4b99      	ldr	r3, [pc, #612]	; (9000184c <HAL_RCC_OscConfig+0x288>)
900015e8:	691b      	ldr	r3, [r3, #16]
900015ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
900015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900015f0:	4b96      	ldr	r3, [pc, #600]	; (9000184c <HAL_RCC_OscConfig+0x288>)
900015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900015f4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
900015f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900015f8:	2b10      	cmp	r3, #16
900015fa:	d007      	beq.n	9000160c <HAL_RCC_OscConfig+0x48>
900015fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900015fe:	2b18      	cmp	r3, #24
90001600:	d110      	bne.n	90001624 <HAL_RCC_OscConfig+0x60>
90001602:	6abb      	ldr	r3, [r7, #40]	; 0x28
90001604:	f003 0303 	and.w	r3, r3, #3
90001608:	2b02      	cmp	r3, #2
9000160a:	d10b      	bne.n	90001624 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000160c:	4b8f      	ldr	r3, [pc, #572]	; (9000184c <HAL_RCC_OscConfig+0x288>)
9000160e:	681b      	ldr	r3, [r3, #0]
90001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001614:	2b00      	cmp	r3, #0
90001616:	d06c      	beq.n	900016f2 <HAL_RCC_OscConfig+0x12e>
90001618:	687b      	ldr	r3, [r7, #4]
9000161a:	685b      	ldr	r3, [r3, #4]
9000161c:	2b00      	cmp	r3, #0
9000161e:	d168      	bne.n	900016f2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
90001620:	2301      	movs	r3, #1
90001622:	e3f6      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90001624:	687b      	ldr	r3, [r7, #4]
90001626:	685b      	ldr	r3, [r3, #4]
90001628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000162c:	d106      	bne.n	9000163c <HAL_RCC_OscConfig+0x78>
9000162e:	4b87      	ldr	r3, [pc, #540]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001630:	681b      	ldr	r3, [r3, #0]
90001632:	4a86      	ldr	r2, [pc, #536]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001638:	6013      	str	r3, [r2, #0]
9000163a:	e02e      	b.n	9000169a <HAL_RCC_OscConfig+0xd6>
9000163c:	687b      	ldr	r3, [r7, #4]
9000163e:	685b      	ldr	r3, [r3, #4]
90001640:	2b00      	cmp	r3, #0
90001642:	d10c      	bne.n	9000165e <HAL_RCC_OscConfig+0x9a>
90001644:	4b81      	ldr	r3, [pc, #516]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001646:	681b      	ldr	r3, [r3, #0]
90001648:	4a80      	ldr	r2, [pc, #512]	; (9000184c <HAL_RCC_OscConfig+0x288>)
9000164a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000164e:	6013      	str	r3, [r2, #0]
90001650:	4b7e      	ldr	r3, [pc, #504]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001652:	681b      	ldr	r3, [r3, #0]
90001654:	4a7d      	ldr	r2, [pc, #500]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000165a:	6013      	str	r3, [r2, #0]
9000165c:	e01d      	b.n	9000169a <HAL_RCC_OscConfig+0xd6>
9000165e:	687b      	ldr	r3, [r7, #4]
90001660:	685b      	ldr	r3, [r3, #4]
90001662:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
90001666:	d10c      	bne.n	90001682 <HAL_RCC_OscConfig+0xbe>
90001668:	4b78      	ldr	r3, [pc, #480]	; (9000184c <HAL_RCC_OscConfig+0x288>)
9000166a:	681b      	ldr	r3, [r3, #0]
9000166c:	4a77      	ldr	r2, [pc, #476]	; (9000184c <HAL_RCC_OscConfig+0x288>)
9000166e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90001672:	6013      	str	r3, [r2, #0]
90001674:	4b75      	ldr	r3, [pc, #468]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001676:	681b      	ldr	r3, [r3, #0]
90001678:	4a74      	ldr	r2, [pc, #464]	; (9000184c <HAL_RCC_OscConfig+0x288>)
9000167a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000167e:	6013      	str	r3, [r2, #0]
90001680:	e00b      	b.n	9000169a <HAL_RCC_OscConfig+0xd6>
90001682:	4b72      	ldr	r3, [pc, #456]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001684:	681b      	ldr	r3, [r3, #0]
90001686:	4a71      	ldr	r2, [pc, #452]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000168c:	6013      	str	r3, [r2, #0]
9000168e:	4b6f      	ldr	r3, [pc, #444]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001690:	681b      	ldr	r3, [r3, #0]
90001692:	4a6e      	ldr	r2, [pc, #440]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90001698:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000169a:	687b      	ldr	r3, [r7, #4]
9000169c:	685b      	ldr	r3, [r3, #4]
9000169e:	2b00      	cmp	r3, #0
900016a0:	d013      	beq.n	900016ca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900016a2:	f7ff fbd5 	bl	90000e50 <HAL_GetTick>
900016a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
900016a8:	e008      	b.n	900016bc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
900016aa:	f7ff fbd1 	bl	90000e50 <HAL_GetTick>
900016ae:	4602      	mov	r2, r0
900016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900016b2:	1ad3      	subs	r3, r2, r3
900016b4:	2b64      	cmp	r3, #100	; 0x64
900016b6:	d901      	bls.n	900016bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
900016b8:	2303      	movs	r3, #3
900016ba:	e3aa      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
900016bc:	4b63      	ldr	r3, [pc, #396]	; (9000184c <HAL_RCC_OscConfig+0x288>)
900016be:	681b      	ldr	r3, [r3, #0]
900016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900016c4:	2b00      	cmp	r3, #0
900016c6:	d0f0      	beq.n	900016aa <HAL_RCC_OscConfig+0xe6>
900016c8:	e014      	b.n	900016f4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900016ca:	f7ff fbc1 	bl	90000e50 <HAL_GetTick>
900016ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
900016d0:	e008      	b.n	900016e4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
900016d2:	f7ff fbbd 	bl	90000e50 <HAL_GetTick>
900016d6:	4602      	mov	r2, r0
900016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900016da:	1ad3      	subs	r3, r2, r3
900016dc:	2b64      	cmp	r3, #100	; 0x64
900016de:	d901      	bls.n	900016e4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
900016e0:	2303      	movs	r3, #3
900016e2:	e396      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
900016e4:	4b59      	ldr	r3, [pc, #356]	; (9000184c <HAL_RCC_OscConfig+0x288>)
900016e6:	681b      	ldr	r3, [r3, #0]
900016e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900016ec:	2b00      	cmp	r3, #0
900016ee:	d1f0      	bne.n	900016d2 <HAL_RCC_OscConfig+0x10e>
900016f0:	e000      	b.n	900016f4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
900016f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
900016f4:	687b      	ldr	r3, [r7, #4]
900016f6:	681b      	ldr	r3, [r3, #0]
900016f8:	f003 0302 	and.w	r3, r3, #2
900016fc:	2b00      	cmp	r3, #0
900016fe:	f000 80cb 	beq.w	90001898 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
90001702:	4b52      	ldr	r3, [pc, #328]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001704:	691b      	ldr	r3, [r3, #16]
90001706:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000170a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000170c:	4b4f      	ldr	r3, [pc, #316]	; (9000184c <HAL_RCC_OscConfig+0x288>)
9000170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001710:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
90001712:	6a3b      	ldr	r3, [r7, #32]
90001714:	2b00      	cmp	r3, #0
90001716:	d007      	beq.n	90001728 <HAL_RCC_OscConfig+0x164>
90001718:	6a3b      	ldr	r3, [r7, #32]
9000171a:	2b18      	cmp	r3, #24
9000171c:	d156      	bne.n	900017cc <HAL_RCC_OscConfig+0x208>
9000171e:	69fb      	ldr	r3, [r7, #28]
90001720:	f003 0303 	and.w	r3, r3, #3
90001724:	2b00      	cmp	r3, #0
90001726:	d151      	bne.n	900017cc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
90001728:	4b48      	ldr	r3, [pc, #288]	; (9000184c <HAL_RCC_OscConfig+0x288>)
9000172a:	681b      	ldr	r3, [r3, #0]
9000172c:	f003 0304 	and.w	r3, r3, #4
90001730:	2b00      	cmp	r3, #0
90001732:	d005      	beq.n	90001740 <HAL_RCC_OscConfig+0x17c>
90001734:	687b      	ldr	r3, [r7, #4]
90001736:	68db      	ldr	r3, [r3, #12]
90001738:	2b00      	cmp	r3, #0
9000173a:	d101      	bne.n	90001740 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
9000173c:	2301      	movs	r3, #1
9000173e:	e368      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
90001740:	4b42      	ldr	r3, [pc, #264]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001742:	681b      	ldr	r3, [r3, #0]
90001744:	f023 0219 	bic.w	r2, r3, #25
90001748:	687b      	ldr	r3, [r7, #4]
9000174a:	68db      	ldr	r3, [r3, #12]
9000174c:	493f      	ldr	r1, [pc, #252]	; (9000184c <HAL_RCC_OscConfig+0x288>)
9000174e:	4313      	orrs	r3, r2
90001750:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
90001752:	f7ff fb7d 	bl	90000e50 <HAL_GetTick>
90001756:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90001758:	e008      	b.n	9000176c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
9000175a:	f7ff fb79 	bl	90000e50 <HAL_GetTick>
9000175e:	4602      	mov	r2, r0
90001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001762:	1ad3      	subs	r3, r2, r3
90001764:	2b02      	cmp	r3, #2
90001766:	d901      	bls.n	9000176c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
90001768:	2303      	movs	r3, #3
9000176a:	e352      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000176c:	4b37      	ldr	r3, [pc, #220]	; (9000184c <HAL_RCC_OscConfig+0x288>)
9000176e:	681b      	ldr	r3, [r3, #0]
90001770:	f003 0304 	and.w	r3, r3, #4
90001774:	2b00      	cmp	r3, #0
90001776:	d0f0      	beq.n	9000175a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90001778:	f7ff fb9a 	bl	90000eb0 <HAL_GetREVID>
9000177c:	4603      	mov	r3, r0
9000177e:	f241 0203 	movw	r2, #4099	; 0x1003
90001782:	4293      	cmp	r3, r2
90001784:	d817      	bhi.n	900017b6 <HAL_RCC_OscConfig+0x1f2>
90001786:	687b      	ldr	r3, [r7, #4]
90001788:	691b      	ldr	r3, [r3, #16]
9000178a:	2b40      	cmp	r3, #64	; 0x40
9000178c:	d108      	bne.n	900017a0 <HAL_RCC_OscConfig+0x1dc>
9000178e:	4b2f      	ldr	r3, [pc, #188]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001790:	685b      	ldr	r3, [r3, #4]
90001792:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
90001796:	4a2d      	ldr	r2, [pc, #180]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000179c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000179e:	e07b      	b.n	90001898 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900017a0:	4b2a      	ldr	r3, [pc, #168]	; (9000184c <HAL_RCC_OscConfig+0x288>)
900017a2:	685b      	ldr	r3, [r3, #4]
900017a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
900017a8:	687b      	ldr	r3, [r7, #4]
900017aa:	691b      	ldr	r3, [r3, #16]
900017ac:	031b      	lsls	r3, r3, #12
900017ae:	4927      	ldr	r1, [pc, #156]	; (9000184c <HAL_RCC_OscConfig+0x288>)
900017b0:	4313      	orrs	r3, r2
900017b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
900017b4:	e070      	b.n	90001898 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
900017b6:	4b25      	ldr	r3, [pc, #148]	; (9000184c <HAL_RCC_OscConfig+0x288>)
900017b8:	685b      	ldr	r3, [r3, #4]
900017ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
900017be:	687b      	ldr	r3, [r7, #4]
900017c0:	691b      	ldr	r3, [r3, #16]
900017c2:	061b      	lsls	r3, r3, #24
900017c4:	4921      	ldr	r1, [pc, #132]	; (9000184c <HAL_RCC_OscConfig+0x288>)
900017c6:	4313      	orrs	r3, r2
900017c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
900017ca:	e065      	b.n	90001898 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
900017cc:	687b      	ldr	r3, [r7, #4]
900017ce:	68db      	ldr	r3, [r3, #12]
900017d0:	2b00      	cmp	r3, #0
900017d2:	d048      	beq.n	90001866 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
900017d4:	4b1d      	ldr	r3, [pc, #116]	; (9000184c <HAL_RCC_OscConfig+0x288>)
900017d6:	681b      	ldr	r3, [r3, #0]
900017d8:	f023 0219 	bic.w	r2, r3, #25
900017dc:	687b      	ldr	r3, [r7, #4]
900017de:	68db      	ldr	r3, [r3, #12]
900017e0:	491a      	ldr	r1, [pc, #104]	; (9000184c <HAL_RCC_OscConfig+0x288>)
900017e2:	4313      	orrs	r3, r2
900017e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900017e6:	f7ff fb33 	bl	90000e50 <HAL_GetTick>
900017ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
900017ec:	e008      	b.n	90001800 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
900017ee:	f7ff fb2f 	bl	90000e50 <HAL_GetTick>
900017f2:	4602      	mov	r2, r0
900017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900017f6:	1ad3      	subs	r3, r2, r3
900017f8:	2b02      	cmp	r3, #2
900017fa:	d901      	bls.n	90001800 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
900017fc:	2303      	movs	r3, #3
900017fe:	e308      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90001800:	4b12      	ldr	r3, [pc, #72]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001802:	681b      	ldr	r3, [r3, #0]
90001804:	f003 0304 	and.w	r3, r3, #4
90001808:	2b00      	cmp	r3, #0
9000180a:	d0f0      	beq.n	900017ee <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000180c:	f7ff fb50 	bl	90000eb0 <HAL_GetREVID>
90001810:	4603      	mov	r3, r0
90001812:	f241 0203 	movw	r2, #4099	; 0x1003
90001816:	4293      	cmp	r3, r2
90001818:	d81a      	bhi.n	90001850 <HAL_RCC_OscConfig+0x28c>
9000181a:	687b      	ldr	r3, [r7, #4]
9000181c:	691b      	ldr	r3, [r3, #16]
9000181e:	2b40      	cmp	r3, #64	; 0x40
90001820:	d108      	bne.n	90001834 <HAL_RCC_OscConfig+0x270>
90001822:	4b0a      	ldr	r3, [pc, #40]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001824:	685b      	ldr	r3, [r3, #4]
90001826:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000182a:	4a08      	ldr	r2, [pc, #32]	; (9000184c <HAL_RCC_OscConfig+0x288>)
9000182c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001830:	6053      	str	r3, [r2, #4]
90001832:	e031      	b.n	90001898 <HAL_RCC_OscConfig+0x2d4>
90001834:	4b05      	ldr	r3, [pc, #20]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001836:	685b      	ldr	r3, [r3, #4]
90001838:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
9000183c:	687b      	ldr	r3, [r7, #4]
9000183e:	691b      	ldr	r3, [r3, #16]
90001840:	031b      	lsls	r3, r3, #12
90001842:	4902      	ldr	r1, [pc, #8]	; (9000184c <HAL_RCC_OscConfig+0x288>)
90001844:	4313      	orrs	r3, r2
90001846:	604b      	str	r3, [r1, #4]
90001848:	e026      	b.n	90001898 <HAL_RCC_OscConfig+0x2d4>
9000184a:	bf00      	nop
9000184c:	58024400 	.word	0x58024400
90001850:	4b9a      	ldr	r3, [pc, #616]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001852:	685b      	ldr	r3, [r3, #4]
90001854:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
90001858:	687b      	ldr	r3, [r7, #4]
9000185a:	691b      	ldr	r3, [r3, #16]
9000185c:	061b      	lsls	r3, r3, #24
9000185e:	4997      	ldr	r1, [pc, #604]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001860:	4313      	orrs	r3, r2
90001862:	604b      	str	r3, [r1, #4]
90001864:	e018      	b.n	90001898 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90001866:	4b95      	ldr	r3, [pc, #596]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001868:	681b      	ldr	r3, [r3, #0]
9000186a:	4a94      	ldr	r2, [pc, #592]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
9000186c:	f023 0301 	bic.w	r3, r3, #1
90001870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001872:	f7ff faed 	bl	90000e50 <HAL_GetTick>
90001876:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
90001878:	e008      	b.n	9000188c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
9000187a:	f7ff fae9 	bl	90000e50 <HAL_GetTick>
9000187e:	4602      	mov	r2, r0
90001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001882:	1ad3      	subs	r3, r2, r3
90001884:	2b02      	cmp	r3, #2
90001886:	d901      	bls.n	9000188c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
90001888:	2303      	movs	r3, #3
9000188a:	e2c2      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000188c:	4b8b      	ldr	r3, [pc, #556]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
9000188e:	681b      	ldr	r3, [r3, #0]
90001890:	f003 0304 	and.w	r3, r3, #4
90001894:	2b00      	cmp	r3, #0
90001896:	d1f0      	bne.n	9000187a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
90001898:	687b      	ldr	r3, [r7, #4]
9000189a:	681b      	ldr	r3, [r3, #0]
9000189c:	f003 0310 	and.w	r3, r3, #16
900018a0:	2b00      	cmp	r3, #0
900018a2:	f000 80a9 	beq.w	900019f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
900018a6:	4b85      	ldr	r3, [pc, #532]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
900018a8:	691b      	ldr	r3, [r3, #16]
900018aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
900018ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
900018b0:	4b82      	ldr	r3, [pc, #520]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
900018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900018b4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
900018b6:	69bb      	ldr	r3, [r7, #24]
900018b8:	2b08      	cmp	r3, #8
900018ba:	d007      	beq.n	900018cc <HAL_RCC_OscConfig+0x308>
900018bc:	69bb      	ldr	r3, [r7, #24]
900018be:	2b18      	cmp	r3, #24
900018c0:	d13a      	bne.n	90001938 <HAL_RCC_OscConfig+0x374>
900018c2:	697b      	ldr	r3, [r7, #20]
900018c4:	f003 0303 	and.w	r3, r3, #3
900018c8:	2b01      	cmp	r3, #1
900018ca:	d135      	bne.n	90001938 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
900018cc:	4b7b      	ldr	r3, [pc, #492]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
900018ce:	681b      	ldr	r3, [r3, #0]
900018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
900018d4:	2b00      	cmp	r3, #0
900018d6:	d005      	beq.n	900018e4 <HAL_RCC_OscConfig+0x320>
900018d8:	687b      	ldr	r3, [r7, #4]
900018da:	69db      	ldr	r3, [r3, #28]
900018dc:	2b80      	cmp	r3, #128	; 0x80
900018de:	d001      	beq.n	900018e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
900018e0:	2301      	movs	r3, #1
900018e2:	e296      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
900018e4:	f7ff fae4 	bl	90000eb0 <HAL_GetREVID>
900018e8:	4603      	mov	r3, r0
900018ea:	f241 0203 	movw	r2, #4099	; 0x1003
900018ee:	4293      	cmp	r3, r2
900018f0:	d817      	bhi.n	90001922 <HAL_RCC_OscConfig+0x35e>
900018f2:	687b      	ldr	r3, [r7, #4]
900018f4:	6a1b      	ldr	r3, [r3, #32]
900018f6:	2b20      	cmp	r3, #32
900018f8:	d108      	bne.n	9000190c <HAL_RCC_OscConfig+0x348>
900018fa:	4b70      	ldr	r3, [pc, #448]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
900018fc:	685b      	ldr	r3, [r3, #4]
900018fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
90001902:	4a6e      	ldr	r2, [pc, #440]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001904:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90001908:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000190a:	e075      	b.n	900019f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000190c:	4b6b      	ldr	r3, [pc, #428]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
9000190e:	685b      	ldr	r3, [r3, #4]
90001910:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
90001914:	687b      	ldr	r3, [r7, #4]
90001916:	6a1b      	ldr	r3, [r3, #32]
90001918:	069b      	lsls	r3, r3, #26
9000191a:	4968      	ldr	r1, [pc, #416]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
9000191c:	4313      	orrs	r3, r2
9000191e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90001920:	e06a      	b.n	900019f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90001922:	4b66      	ldr	r3, [pc, #408]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001924:	68db      	ldr	r3, [r3, #12]
90001926:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
9000192a:	687b      	ldr	r3, [r7, #4]
9000192c:	6a1b      	ldr	r3, [r3, #32]
9000192e:	061b      	lsls	r3, r3, #24
90001930:	4962      	ldr	r1, [pc, #392]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001932:	4313      	orrs	r3, r2
90001934:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
90001936:	e05f      	b.n	900019f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
90001938:	687b      	ldr	r3, [r7, #4]
9000193a:	69db      	ldr	r3, [r3, #28]
9000193c:	2b00      	cmp	r3, #0
9000193e:	d042      	beq.n	900019c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
90001940:	4b5e      	ldr	r3, [pc, #376]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001942:	681b      	ldr	r3, [r3, #0]
90001944:	4a5d      	ldr	r2, [pc, #372]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000194a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
9000194c:	f7ff fa80 	bl	90000e50 <HAL_GetTick>
90001950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90001952:	e008      	b.n	90001966 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
90001954:	f7ff fa7c 	bl	90000e50 <HAL_GetTick>
90001958:	4602      	mov	r2, r0
9000195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000195c:	1ad3      	subs	r3, r2, r3
9000195e:	2b02      	cmp	r3, #2
90001960:	d901      	bls.n	90001966 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
90001962:	2303      	movs	r3, #3
90001964:	e255      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90001966:	4b55      	ldr	r3, [pc, #340]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001968:	681b      	ldr	r3, [r3, #0]
9000196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
9000196e:	2b00      	cmp	r3, #0
90001970:	d0f0      	beq.n	90001954 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
90001972:	f7ff fa9d 	bl	90000eb0 <HAL_GetREVID>
90001976:	4603      	mov	r3, r0
90001978:	f241 0203 	movw	r2, #4099	; 0x1003
9000197c:	4293      	cmp	r3, r2
9000197e:	d817      	bhi.n	900019b0 <HAL_RCC_OscConfig+0x3ec>
90001980:	687b      	ldr	r3, [r7, #4]
90001982:	6a1b      	ldr	r3, [r3, #32]
90001984:	2b20      	cmp	r3, #32
90001986:	d108      	bne.n	9000199a <HAL_RCC_OscConfig+0x3d6>
90001988:	4b4c      	ldr	r3, [pc, #304]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
9000198a:	685b      	ldr	r3, [r3, #4]
9000198c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
90001990:	4a4a      	ldr	r2, [pc, #296]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001992:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
90001996:	6053      	str	r3, [r2, #4]
90001998:	e02e      	b.n	900019f8 <HAL_RCC_OscConfig+0x434>
9000199a:	4b48      	ldr	r3, [pc, #288]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
9000199c:	685b      	ldr	r3, [r3, #4]
9000199e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
900019a2:	687b      	ldr	r3, [r7, #4]
900019a4:	6a1b      	ldr	r3, [r3, #32]
900019a6:	069b      	lsls	r3, r3, #26
900019a8:	4944      	ldr	r1, [pc, #272]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
900019aa:	4313      	orrs	r3, r2
900019ac:	604b      	str	r3, [r1, #4]
900019ae:	e023      	b.n	900019f8 <HAL_RCC_OscConfig+0x434>
900019b0:	4b42      	ldr	r3, [pc, #264]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
900019b2:	68db      	ldr	r3, [r3, #12]
900019b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
900019b8:	687b      	ldr	r3, [r7, #4]
900019ba:	6a1b      	ldr	r3, [r3, #32]
900019bc:	061b      	lsls	r3, r3, #24
900019be:	493f      	ldr	r1, [pc, #252]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
900019c0:	4313      	orrs	r3, r2
900019c2:	60cb      	str	r3, [r1, #12]
900019c4:	e018      	b.n	900019f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
900019c6:	4b3d      	ldr	r3, [pc, #244]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
900019c8:	681b      	ldr	r3, [r3, #0]
900019ca:	4a3c      	ldr	r2, [pc, #240]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
900019cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
900019d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900019d2:	f7ff fa3d 	bl	90000e50 <HAL_GetTick>
900019d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
900019d8:	e008      	b.n	900019ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
900019da:	f7ff fa39 	bl	90000e50 <HAL_GetTick>
900019de:	4602      	mov	r2, r0
900019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900019e2:	1ad3      	subs	r3, r2, r3
900019e4:	2b02      	cmp	r3, #2
900019e6:	d901      	bls.n	900019ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
900019e8:	2303      	movs	r3, #3
900019ea:	e212      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
900019ec:	4b33      	ldr	r3, [pc, #204]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
900019ee:	681b      	ldr	r3, [r3, #0]
900019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
900019f4:	2b00      	cmp	r3, #0
900019f6:	d1f0      	bne.n	900019da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
900019f8:	687b      	ldr	r3, [r7, #4]
900019fa:	681b      	ldr	r3, [r3, #0]
900019fc:	f003 0308 	and.w	r3, r3, #8
90001a00:	2b00      	cmp	r3, #0
90001a02:	d036      	beq.n	90001a72 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
90001a04:	687b      	ldr	r3, [r7, #4]
90001a06:	695b      	ldr	r3, [r3, #20]
90001a08:	2b00      	cmp	r3, #0
90001a0a:	d019      	beq.n	90001a40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90001a0c:	4b2b      	ldr	r3, [pc, #172]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001a10:	4a2a      	ldr	r2, [pc, #168]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001a12:	f043 0301 	orr.w	r3, r3, #1
90001a16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001a18:	f7ff fa1a 	bl	90000e50 <HAL_GetTick>
90001a1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90001a1e:	e008      	b.n	90001a32 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
90001a20:	f7ff fa16 	bl	90000e50 <HAL_GetTick>
90001a24:	4602      	mov	r2, r0
90001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001a28:	1ad3      	subs	r3, r2, r3
90001a2a:	2b02      	cmp	r3, #2
90001a2c:	d901      	bls.n	90001a32 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
90001a2e:	2303      	movs	r3, #3
90001a30:	e1ef      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
90001a32:	4b22      	ldr	r3, [pc, #136]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001a36:	f003 0302 	and.w	r3, r3, #2
90001a3a:	2b00      	cmp	r3, #0
90001a3c:	d0f0      	beq.n	90001a20 <HAL_RCC_OscConfig+0x45c>
90001a3e:	e018      	b.n	90001a72 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90001a40:	4b1e      	ldr	r3, [pc, #120]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001a44:	4a1d      	ldr	r2, [pc, #116]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001a46:	f023 0301 	bic.w	r3, r3, #1
90001a4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001a4c:	f7ff fa00 	bl	90000e50 <HAL_GetTick>
90001a50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90001a52:	e008      	b.n	90001a66 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
90001a54:	f7ff f9fc 	bl	90000e50 <HAL_GetTick>
90001a58:	4602      	mov	r2, r0
90001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001a5c:	1ad3      	subs	r3, r2, r3
90001a5e:	2b02      	cmp	r3, #2
90001a60:	d901      	bls.n	90001a66 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
90001a62:	2303      	movs	r3, #3
90001a64:	e1d5      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
90001a66:	4b15      	ldr	r3, [pc, #84]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001a6a:	f003 0302 	and.w	r3, r3, #2
90001a6e:	2b00      	cmp	r3, #0
90001a70:	d1f0      	bne.n	90001a54 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
90001a72:	687b      	ldr	r3, [r7, #4]
90001a74:	681b      	ldr	r3, [r3, #0]
90001a76:	f003 0320 	and.w	r3, r3, #32
90001a7a:	2b00      	cmp	r3, #0
90001a7c:	d039      	beq.n	90001af2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
90001a7e:	687b      	ldr	r3, [r7, #4]
90001a80:	699b      	ldr	r3, [r3, #24]
90001a82:	2b00      	cmp	r3, #0
90001a84:	d01c      	beq.n	90001ac0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
90001a86:	4b0d      	ldr	r3, [pc, #52]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001a88:	681b      	ldr	r3, [r3, #0]
90001a8a:	4a0c      	ldr	r2, [pc, #48]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001a8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90001a90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90001a92:	f7ff f9dd 	bl	90000e50 <HAL_GetTick>
90001a96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90001a98:	e008      	b.n	90001aac <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
90001a9a:	f7ff f9d9 	bl	90000e50 <HAL_GetTick>
90001a9e:	4602      	mov	r2, r0
90001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001aa2:	1ad3      	subs	r3, r2, r3
90001aa4:	2b02      	cmp	r3, #2
90001aa6:	d901      	bls.n	90001aac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
90001aa8:	2303      	movs	r3, #3
90001aaa:	e1b2      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
90001aac:	4b03      	ldr	r3, [pc, #12]	; (90001abc <HAL_RCC_OscConfig+0x4f8>)
90001aae:	681b      	ldr	r3, [r3, #0]
90001ab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90001ab4:	2b00      	cmp	r3, #0
90001ab6:	d0f0      	beq.n	90001a9a <HAL_RCC_OscConfig+0x4d6>
90001ab8:	e01b      	b.n	90001af2 <HAL_RCC_OscConfig+0x52e>
90001aba:	bf00      	nop
90001abc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
90001ac0:	4b9b      	ldr	r3, [pc, #620]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001ac2:	681b      	ldr	r3, [r3, #0]
90001ac4:	4a9a      	ldr	r2, [pc, #616]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90001aca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
90001acc:	f7ff f9c0 	bl	90000e50 <HAL_GetTick>
90001ad0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90001ad2:	e008      	b.n	90001ae6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
90001ad4:	f7ff f9bc 	bl	90000e50 <HAL_GetTick>
90001ad8:	4602      	mov	r2, r0
90001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001adc:	1ad3      	subs	r3, r2, r3
90001ade:	2b02      	cmp	r3, #2
90001ae0:	d901      	bls.n	90001ae6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
90001ae2:	2303      	movs	r3, #3
90001ae4:	e195      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
90001ae6:	4b92      	ldr	r3, [pc, #584]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001ae8:	681b      	ldr	r3, [r3, #0]
90001aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90001aee:	2b00      	cmp	r3, #0
90001af0:	d1f0      	bne.n	90001ad4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90001af2:	687b      	ldr	r3, [r7, #4]
90001af4:	681b      	ldr	r3, [r3, #0]
90001af6:	f003 0304 	and.w	r3, r3, #4
90001afa:	2b00      	cmp	r3, #0
90001afc:	f000 8081 	beq.w	90001c02 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
90001b00:	4b8c      	ldr	r3, [pc, #560]	; (90001d34 <HAL_RCC_OscConfig+0x770>)
90001b02:	681b      	ldr	r3, [r3, #0]
90001b04:	4a8b      	ldr	r2, [pc, #556]	; (90001d34 <HAL_RCC_OscConfig+0x770>)
90001b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001b0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90001b0c:	f7ff f9a0 	bl	90000e50 <HAL_GetTick>
90001b10:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
90001b12:	e008      	b.n	90001b26 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
90001b14:	f7ff f99c 	bl	90000e50 <HAL_GetTick>
90001b18:	4602      	mov	r2, r0
90001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001b1c:	1ad3      	subs	r3, r2, r3
90001b1e:	2b64      	cmp	r3, #100	; 0x64
90001b20:	d901      	bls.n	90001b26 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
90001b22:	2303      	movs	r3, #3
90001b24:	e175      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
90001b26:	4b83      	ldr	r3, [pc, #524]	; (90001d34 <HAL_RCC_OscConfig+0x770>)
90001b28:	681b      	ldr	r3, [r3, #0]
90001b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001b2e:	2b00      	cmp	r3, #0
90001b30:	d0f0      	beq.n	90001b14 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90001b32:	687b      	ldr	r3, [r7, #4]
90001b34:	689b      	ldr	r3, [r3, #8]
90001b36:	2b01      	cmp	r3, #1
90001b38:	d106      	bne.n	90001b48 <HAL_RCC_OscConfig+0x584>
90001b3a:	4b7d      	ldr	r3, [pc, #500]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001b3e:	4a7c      	ldr	r2, [pc, #496]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001b40:	f043 0301 	orr.w	r3, r3, #1
90001b44:	6713      	str	r3, [r2, #112]	; 0x70
90001b46:	e02d      	b.n	90001ba4 <HAL_RCC_OscConfig+0x5e0>
90001b48:	687b      	ldr	r3, [r7, #4]
90001b4a:	689b      	ldr	r3, [r3, #8]
90001b4c:	2b00      	cmp	r3, #0
90001b4e:	d10c      	bne.n	90001b6a <HAL_RCC_OscConfig+0x5a6>
90001b50:	4b77      	ldr	r3, [pc, #476]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001b54:	4a76      	ldr	r2, [pc, #472]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001b56:	f023 0301 	bic.w	r3, r3, #1
90001b5a:	6713      	str	r3, [r2, #112]	; 0x70
90001b5c:	4b74      	ldr	r3, [pc, #464]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001b60:	4a73      	ldr	r2, [pc, #460]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001b62:	f023 0304 	bic.w	r3, r3, #4
90001b66:	6713      	str	r3, [r2, #112]	; 0x70
90001b68:	e01c      	b.n	90001ba4 <HAL_RCC_OscConfig+0x5e0>
90001b6a:	687b      	ldr	r3, [r7, #4]
90001b6c:	689b      	ldr	r3, [r3, #8]
90001b6e:	2b05      	cmp	r3, #5
90001b70:	d10c      	bne.n	90001b8c <HAL_RCC_OscConfig+0x5c8>
90001b72:	4b6f      	ldr	r3, [pc, #444]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001b76:	4a6e      	ldr	r2, [pc, #440]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001b78:	f043 0304 	orr.w	r3, r3, #4
90001b7c:	6713      	str	r3, [r2, #112]	; 0x70
90001b7e:	4b6c      	ldr	r3, [pc, #432]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001b82:	4a6b      	ldr	r2, [pc, #428]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001b84:	f043 0301 	orr.w	r3, r3, #1
90001b88:	6713      	str	r3, [r2, #112]	; 0x70
90001b8a:	e00b      	b.n	90001ba4 <HAL_RCC_OscConfig+0x5e0>
90001b8c:	4b68      	ldr	r3, [pc, #416]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001b90:	4a67      	ldr	r2, [pc, #412]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001b92:	f023 0301 	bic.w	r3, r3, #1
90001b96:	6713      	str	r3, [r2, #112]	; 0x70
90001b98:	4b65      	ldr	r3, [pc, #404]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001b9c:	4a64      	ldr	r2, [pc, #400]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001b9e:	f023 0304 	bic.w	r3, r3, #4
90001ba2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90001ba4:	687b      	ldr	r3, [r7, #4]
90001ba6:	689b      	ldr	r3, [r3, #8]
90001ba8:	2b00      	cmp	r3, #0
90001baa:	d015      	beq.n	90001bd8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001bac:	f7ff f950 	bl	90000e50 <HAL_GetTick>
90001bb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90001bb2:	e00a      	b.n	90001bca <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90001bb4:	f7ff f94c 	bl	90000e50 <HAL_GetTick>
90001bb8:	4602      	mov	r2, r0
90001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001bbc:	1ad3      	subs	r3, r2, r3
90001bbe:	f241 3288 	movw	r2, #5000	; 0x1388
90001bc2:	4293      	cmp	r3, r2
90001bc4:	d901      	bls.n	90001bca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
90001bc6:	2303      	movs	r3, #3
90001bc8:	e123      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90001bca:	4b59      	ldr	r3, [pc, #356]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001bce:	f003 0302 	and.w	r3, r3, #2
90001bd2:	2b00      	cmp	r3, #0
90001bd4:	d0ee      	beq.n	90001bb4 <HAL_RCC_OscConfig+0x5f0>
90001bd6:	e014      	b.n	90001c02 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001bd8:	f7ff f93a 	bl	90000e50 <HAL_GetTick>
90001bdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90001bde:	e00a      	b.n	90001bf6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
90001be0:	f7ff f936 	bl	90000e50 <HAL_GetTick>
90001be4:	4602      	mov	r2, r0
90001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001be8:	1ad3      	subs	r3, r2, r3
90001bea:	f241 3288 	movw	r2, #5000	; 0x1388
90001bee:	4293      	cmp	r3, r2
90001bf0:	d901      	bls.n	90001bf6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
90001bf2:	2303      	movs	r3, #3
90001bf4:	e10d      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
90001bf6:	4b4e      	ldr	r3, [pc, #312]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001bfa:	f003 0302 	and.w	r3, r3, #2
90001bfe:	2b00      	cmp	r3, #0
90001c00:	d1ee      	bne.n	90001be0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90001c02:	687b      	ldr	r3, [r7, #4]
90001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90001c06:	2b00      	cmp	r3, #0
90001c08:	f000 8102 	beq.w	90001e10 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
90001c0c:	4b48      	ldr	r3, [pc, #288]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001c0e:	691b      	ldr	r3, [r3, #16]
90001c10:	f003 0338 	and.w	r3, r3, #56	; 0x38
90001c14:	2b18      	cmp	r3, #24
90001c16:	f000 80bd 	beq.w	90001d94 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90001c1a:	687b      	ldr	r3, [r7, #4]
90001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90001c1e:	2b02      	cmp	r3, #2
90001c20:	f040 809e 	bne.w	90001d60 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90001c24:	4b42      	ldr	r3, [pc, #264]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001c26:	681b      	ldr	r3, [r3, #0]
90001c28:	4a41      	ldr	r2, [pc, #260]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90001c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001c30:	f7ff f90e 	bl	90000e50 <HAL_GetTick>
90001c34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90001c36:	e008      	b.n	90001c4a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
90001c38:	f7ff f90a 	bl	90000e50 <HAL_GetTick>
90001c3c:	4602      	mov	r2, r0
90001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001c40:	1ad3      	subs	r3, r2, r3
90001c42:	2b02      	cmp	r3, #2
90001c44:	d901      	bls.n	90001c4a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
90001c46:	2303      	movs	r3, #3
90001c48:	e0e3      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90001c4a:	4b39      	ldr	r3, [pc, #228]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001c4c:	681b      	ldr	r3, [r3, #0]
90001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90001c52:	2b00      	cmp	r3, #0
90001c54:	d1f0      	bne.n	90001c38 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90001c56:	4b36      	ldr	r3, [pc, #216]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90001c5a:	4b37      	ldr	r3, [pc, #220]	; (90001d38 <HAL_RCC_OscConfig+0x774>)
90001c5c:	4013      	ands	r3, r2
90001c5e:	687a      	ldr	r2, [r7, #4]
90001c60:	6a91      	ldr	r1, [r2, #40]	; 0x28
90001c62:	687a      	ldr	r2, [r7, #4]
90001c64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90001c66:	0112      	lsls	r2, r2, #4
90001c68:	430a      	orrs	r2, r1
90001c6a:	4931      	ldr	r1, [pc, #196]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001c6c:	4313      	orrs	r3, r2
90001c6e:	628b      	str	r3, [r1, #40]	; 0x28
90001c70:	687b      	ldr	r3, [r7, #4]
90001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001c74:	3b01      	subs	r3, #1
90001c76:	f3c3 0208 	ubfx	r2, r3, #0, #9
90001c7a:	687b      	ldr	r3, [r7, #4]
90001c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90001c7e:	3b01      	subs	r3, #1
90001c80:	025b      	lsls	r3, r3, #9
90001c82:	b29b      	uxth	r3, r3
90001c84:	431a      	orrs	r2, r3
90001c86:	687b      	ldr	r3, [r7, #4]
90001c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90001c8a:	3b01      	subs	r3, #1
90001c8c:	041b      	lsls	r3, r3, #16
90001c8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
90001c92:	431a      	orrs	r2, r3
90001c94:	687b      	ldr	r3, [r7, #4]
90001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90001c98:	3b01      	subs	r3, #1
90001c9a:	061b      	lsls	r3, r3, #24
90001c9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
90001ca0:	4923      	ldr	r1, [pc, #140]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001ca2:	4313      	orrs	r3, r2
90001ca4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
90001ca6:	4b22      	ldr	r3, [pc, #136]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001caa:	4a21      	ldr	r2, [pc, #132]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001cac:	f023 0301 	bic.w	r3, r3, #1
90001cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
90001cb2:	4b1f      	ldr	r3, [pc, #124]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90001cb6:	4b21      	ldr	r3, [pc, #132]	; (90001d3c <HAL_RCC_OscConfig+0x778>)
90001cb8:	4013      	ands	r3, r2
90001cba:	687a      	ldr	r2, [r7, #4]
90001cbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
90001cbe:	00d2      	lsls	r2, r2, #3
90001cc0:	491b      	ldr	r1, [pc, #108]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001cc2:	4313      	orrs	r3, r2
90001cc4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
90001cc6:	4b1a      	ldr	r3, [pc, #104]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001cca:	f023 020c 	bic.w	r2, r3, #12
90001cce:	687b      	ldr	r3, [r7, #4]
90001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001cd2:	4917      	ldr	r1, [pc, #92]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001cd4:	4313      	orrs	r3, r2
90001cd6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
90001cd8:	4b15      	ldr	r3, [pc, #84]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001cdc:	f023 0202 	bic.w	r2, r3, #2
90001ce0:	687b      	ldr	r3, [r7, #4]
90001ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001ce4:	4912      	ldr	r1, [pc, #72]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001ce6:	4313      	orrs	r3, r2
90001ce8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
90001cea:	4b11      	ldr	r3, [pc, #68]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001cee:	4a10      	ldr	r2, [pc, #64]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90001cf6:	4b0e      	ldr	r3, [pc, #56]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001cfa:	4a0d      	ldr	r2, [pc, #52]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001d00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
90001d02:	4b0b      	ldr	r3, [pc, #44]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001d06:	4a0a      	ldr	r2, [pc, #40]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90001d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
90001d0e:	4b08      	ldr	r3, [pc, #32]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001d12:	4a07      	ldr	r2, [pc, #28]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001d14:	f043 0301 	orr.w	r3, r3, #1
90001d18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90001d1a:	4b05      	ldr	r3, [pc, #20]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001d1c:	681b      	ldr	r3, [r3, #0]
90001d1e:	4a04      	ldr	r2, [pc, #16]	; (90001d30 <HAL_RCC_OscConfig+0x76c>)
90001d20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90001d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001d26:	f7ff f893 	bl	90000e50 <HAL_GetTick>
90001d2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90001d2c:	e011      	b.n	90001d52 <HAL_RCC_OscConfig+0x78e>
90001d2e:	bf00      	nop
90001d30:	58024400 	.word	0x58024400
90001d34:	58024800 	.word	0x58024800
90001d38:	fffffc0c 	.word	0xfffffc0c
90001d3c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
90001d40:	f7ff f886 	bl	90000e50 <HAL_GetTick>
90001d44:	4602      	mov	r2, r0
90001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001d48:	1ad3      	subs	r3, r2, r3
90001d4a:	2b02      	cmp	r3, #2
90001d4c:	d901      	bls.n	90001d52 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
90001d4e:	2303      	movs	r3, #3
90001d50:	e05f      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90001d52:	4b32      	ldr	r3, [pc, #200]	; (90001e1c <HAL_RCC_OscConfig+0x858>)
90001d54:	681b      	ldr	r3, [r3, #0]
90001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90001d5a:	2b00      	cmp	r3, #0
90001d5c:	d0f0      	beq.n	90001d40 <HAL_RCC_OscConfig+0x77c>
90001d5e:	e057      	b.n	90001e10 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90001d60:	4b2e      	ldr	r3, [pc, #184]	; (90001e1c <HAL_RCC_OscConfig+0x858>)
90001d62:	681b      	ldr	r3, [r3, #0]
90001d64:	4a2d      	ldr	r2, [pc, #180]	; (90001e1c <HAL_RCC_OscConfig+0x858>)
90001d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90001d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001d6c:	f7ff f870 	bl	90000e50 <HAL_GetTick>
90001d70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90001d72:	e008      	b.n	90001d86 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
90001d74:	f7ff f86c 	bl	90000e50 <HAL_GetTick>
90001d78:	4602      	mov	r2, r0
90001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90001d7c:	1ad3      	subs	r3, r2, r3
90001d7e:	2b02      	cmp	r3, #2
90001d80:	d901      	bls.n	90001d86 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
90001d82:	2303      	movs	r3, #3
90001d84:	e045      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
90001d86:	4b25      	ldr	r3, [pc, #148]	; (90001e1c <HAL_RCC_OscConfig+0x858>)
90001d88:	681b      	ldr	r3, [r3, #0]
90001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90001d8e:	2b00      	cmp	r3, #0
90001d90:	d1f0      	bne.n	90001d74 <HAL_RCC_OscConfig+0x7b0>
90001d92:	e03d      	b.n	90001e10 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
90001d94:	4b21      	ldr	r3, [pc, #132]	; (90001e1c <HAL_RCC_OscConfig+0x858>)
90001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001d98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
90001d9a:	4b20      	ldr	r3, [pc, #128]	; (90001e1c <HAL_RCC_OscConfig+0x858>)
90001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001d9e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90001da0:	687b      	ldr	r3, [r7, #4]
90001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90001da4:	2b01      	cmp	r3, #1
90001da6:	d031      	beq.n	90001e0c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90001da8:	693b      	ldr	r3, [r7, #16]
90001daa:	f003 0203 	and.w	r2, r3, #3
90001dae:	687b      	ldr	r3, [r7, #4]
90001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90001db2:	429a      	cmp	r2, r3
90001db4:	d12a      	bne.n	90001e0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90001db6:	693b      	ldr	r3, [r7, #16]
90001db8:	091b      	lsrs	r3, r3, #4
90001dba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
90001dbe:	687b      	ldr	r3, [r7, #4]
90001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90001dc2:	429a      	cmp	r2, r3
90001dc4:	d122      	bne.n	90001e0c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90001dc6:	68fb      	ldr	r3, [r7, #12]
90001dc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
90001dcc:	687b      	ldr	r3, [r7, #4]
90001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90001dd0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
90001dd2:	429a      	cmp	r2, r3
90001dd4:	d11a      	bne.n	90001e0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90001dd6:	68fb      	ldr	r3, [r7, #12]
90001dd8:	0a5b      	lsrs	r3, r3, #9
90001dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
90001dde:	687b      	ldr	r3, [r7, #4]
90001de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90001de2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
90001de4:	429a      	cmp	r2, r3
90001de6:	d111      	bne.n	90001e0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90001de8:	68fb      	ldr	r3, [r7, #12]
90001dea:	0c1b      	lsrs	r3, r3, #16
90001dec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
90001df0:	687b      	ldr	r3, [r7, #4]
90001df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90001df4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
90001df6:	429a      	cmp	r2, r3
90001df8:	d108      	bne.n	90001e0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
90001dfa:	68fb      	ldr	r3, [r7, #12]
90001dfc:	0e1b      	lsrs	r3, r3, #24
90001dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
90001e02:	687b      	ldr	r3, [r7, #4]
90001e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90001e06:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
90001e08:	429a      	cmp	r2, r3
90001e0a:	d001      	beq.n	90001e10 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
90001e0c:	2301      	movs	r3, #1
90001e0e:	e000      	b.n	90001e12 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
90001e10:	2300      	movs	r3, #0
}
90001e12:	4618      	mov	r0, r3
90001e14:	3730      	adds	r7, #48	; 0x30
90001e16:	46bd      	mov	sp, r7
90001e18:	bd80      	pop	{r7, pc}
90001e1a:	bf00      	nop
90001e1c:	58024400 	.word	0x58024400

90001e20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90001e20:	b580      	push	{r7, lr}
90001e22:	b086      	sub	sp, #24
90001e24:	af00      	add	r7, sp, #0
90001e26:	6078      	str	r0, [r7, #4]
90001e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
90001e2a:	687b      	ldr	r3, [r7, #4]
90001e2c:	2b00      	cmp	r3, #0
90001e2e:	d101      	bne.n	90001e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
90001e30:	2301      	movs	r3, #1
90001e32:	e19c      	b.n	9000216e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
90001e34:	4b8a      	ldr	r3, [pc, #552]	; (90002060 <HAL_RCC_ClockConfig+0x240>)
90001e36:	681b      	ldr	r3, [r3, #0]
90001e38:	f003 030f 	and.w	r3, r3, #15
90001e3c:	683a      	ldr	r2, [r7, #0]
90001e3e:	429a      	cmp	r2, r3
90001e40:	d910      	bls.n	90001e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90001e42:	4b87      	ldr	r3, [pc, #540]	; (90002060 <HAL_RCC_ClockConfig+0x240>)
90001e44:	681b      	ldr	r3, [r3, #0]
90001e46:	f023 020f 	bic.w	r2, r3, #15
90001e4a:	4985      	ldr	r1, [pc, #532]	; (90002060 <HAL_RCC_ClockConfig+0x240>)
90001e4c:	683b      	ldr	r3, [r7, #0]
90001e4e:	4313      	orrs	r3, r2
90001e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
90001e52:	4b83      	ldr	r3, [pc, #524]	; (90002060 <HAL_RCC_ClockConfig+0x240>)
90001e54:	681b      	ldr	r3, [r3, #0]
90001e56:	f003 030f 	and.w	r3, r3, #15
90001e5a:	683a      	ldr	r2, [r7, #0]
90001e5c:	429a      	cmp	r2, r3
90001e5e:	d001      	beq.n	90001e64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
90001e60:	2301      	movs	r3, #1
90001e62:	e184      	b.n	9000216e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90001e64:	687b      	ldr	r3, [r7, #4]
90001e66:	681b      	ldr	r3, [r3, #0]
90001e68:	f003 0304 	and.w	r3, r3, #4
90001e6c:	2b00      	cmp	r3, #0
90001e6e:	d010      	beq.n	90001e92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90001e70:	687b      	ldr	r3, [r7, #4]
90001e72:	691a      	ldr	r2, [r3, #16]
90001e74:	4b7b      	ldr	r3, [pc, #492]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001e76:	699b      	ldr	r3, [r3, #24]
90001e78:	f003 0370 	and.w	r3, r3, #112	; 0x70
90001e7c:	429a      	cmp	r2, r3
90001e7e:	d908      	bls.n	90001e92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90001e80:	4b78      	ldr	r3, [pc, #480]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001e82:	699b      	ldr	r3, [r3, #24]
90001e84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90001e88:	687b      	ldr	r3, [r7, #4]
90001e8a:	691b      	ldr	r3, [r3, #16]
90001e8c:	4975      	ldr	r1, [pc, #468]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001e8e:	4313      	orrs	r3, r2
90001e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90001e92:	687b      	ldr	r3, [r7, #4]
90001e94:	681b      	ldr	r3, [r3, #0]
90001e96:	f003 0308 	and.w	r3, r3, #8
90001e9a:	2b00      	cmp	r3, #0
90001e9c:	d010      	beq.n	90001ec0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
90001e9e:	687b      	ldr	r3, [r7, #4]
90001ea0:	695a      	ldr	r2, [r3, #20]
90001ea2:	4b70      	ldr	r3, [pc, #448]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001ea4:	69db      	ldr	r3, [r3, #28]
90001ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
90001eaa:	429a      	cmp	r2, r3
90001eac:	d908      	bls.n	90001ec0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
90001eae:	4b6d      	ldr	r3, [pc, #436]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001eb0:	69db      	ldr	r3, [r3, #28]
90001eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90001eb6:	687b      	ldr	r3, [r7, #4]
90001eb8:	695b      	ldr	r3, [r3, #20]
90001eba:	496a      	ldr	r1, [pc, #424]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001ebc:	4313      	orrs	r3, r2
90001ebe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90001ec0:	687b      	ldr	r3, [r7, #4]
90001ec2:	681b      	ldr	r3, [r3, #0]
90001ec4:	f003 0310 	and.w	r3, r3, #16
90001ec8:	2b00      	cmp	r3, #0
90001eca:	d010      	beq.n	90001eee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
90001ecc:	687b      	ldr	r3, [r7, #4]
90001ece:	699a      	ldr	r2, [r3, #24]
90001ed0:	4b64      	ldr	r3, [pc, #400]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001ed2:	69db      	ldr	r3, [r3, #28]
90001ed4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
90001ed8:	429a      	cmp	r2, r3
90001eda:	d908      	bls.n	90001eee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
90001edc:	4b61      	ldr	r3, [pc, #388]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001ede:	69db      	ldr	r3, [r3, #28]
90001ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
90001ee4:	687b      	ldr	r3, [r7, #4]
90001ee6:	699b      	ldr	r3, [r3, #24]
90001ee8:	495e      	ldr	r1, [pc, #376]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001eea:	4313      	orrs	r3, r2
90001eec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
90001eee:	687b      	ldr	r3, [r7, #4]
90001ef0:	681b      	ldr	r3, [r3, #0]
90001ef2:	f003 0320 	and.w	r3, r3, #32
90001ef6:	2b00      	cmp	r3, #0
90001ef8:	d010      	beq.n	90001f1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
90001efa:	687b      	ldr	r3, [r7, #4]
90001efc:	69da      	ldr	r2, [r3, #28]
90001efe:	4b59      	ldr	r3, [pc, #356]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001f00:	6a1b      	ldr	r3, [r3, #32]
90001f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
90001f06:	429a      	cmp	r2, r3
90001f08:	d908      	bls.n	90001f1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
90001f0a:	4b56      	ldr	r3, [pc, #344]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001f0c:	6a1b      	ldr	r3, [r3, #32]
90001f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90001f12:	687b      	ldr	r3, [r7, #4]
90001f14:	69db      	ldr	r3, [r3, #28]
90001f16:	4953      	ldr	r1, [pc, #332]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001f18:	4313      	orrs	r3, r2
90001f1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90001f1c:	687b      	ldr	r3, [r7, #4]
90001f1e:	681b      	ldr	r3, [r3, #0]
90001f20:	f003 0302 	and.w	r3, r3, #2
90001f24:	2b00      	cmp	r3, #0
90001f26:	d010      	beq.n	90001f4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
90001f28:	687b      	ldr	r3, [r7, #4]
90001f2a:	68da      	ldr	r2, [r3, #12]
90001f2c:	4b4d      	ldr	r3, [pc, #308]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001f2e:	699b      	ldr	r3, [r3, #24]
90001f30:	f003 030f 	and.w	r3, r3, #15
90001f34:	429a      	cmp	r2, r3
90001f36:	d908      	bls.n	90001f4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90001f38:	4b4a      	ldr	r3, [pc, #296]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001f3a:	699b      	ldr	r3, [r3, #24]
90001f3c:	f023 020f 	bic.w	r2, r3, #15
90001f40:	687b      	ldr	r3, [r7, #4]
90001f42:	68db      	ldr	r3, [r3, #12]
90001f44:	4947      	ldr	r1, [pc, #284]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001f46:	4313      	orrs	r3, r2
90001f48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90001f4a:	687b      	ldr	r3, [r7, #4]
90001f4c:	681b      	ldr	r3, [r3, #0]
90001f4e:	f003 0301 	and.w	r3, r3, #1
90001f52:	2b00      	cmp	r3, #0
90001f54:	d055      	beq.n	90002002 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
90001f56:	4b43      	ldr	r3, [pc, #268]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001f58:	699b      	ldr	r3, [r3, #24]
90001f5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
90001f5e:	687b      	ldr	r3, [r7, #4]
90001f60:	689b      	ldr	r3, [r3, #8]
90001f62:	4940      	ldr	r1, [pc, #256]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001f64:	4313      	orrs	r3, r2
90001f66:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90001f68:	687b      	ldr	r3, [r7, #4]
90001f6a:	685b      	ldr	r3, [r3, #4]
90001f6c:	2b02      	cmp	r3, #2
90001f6e:	d107      	bne.n	90001f80 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
90001f70:	4b3c      	ldr	r3, [pc, #240]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001f72:	681b      	ldr	r3, [r3, #0]
90001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001f78:	2b00      	cmp	r3, #0
90001f7a:	d121      	bne.n	90001fc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90001f7c:	2301      	movs	r3, #1
90001f7e:	e0f6      	b.n	9000216e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90001f80:	687b      	ldr	r3, [r7, #4]
90001f82:	685b      	ldr	r3, [r3, #4]
90001f84:	2b03      	cmp	r3, #3
90001f86:	d107      	bne.n	90001f98 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
90001f88:	4b36      	ldr	r3, [pc, #216]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001f8a:	681b      	ldr	r3, [r3, #0]
90001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90001f90:	2b00      	cmp	r3, #0
90001f92:	d115      	bne.n	90001fc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90001f94:	2301      	movs	r3, #1
90001f96:	e0ea      	b.n	9000216e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
90001f98:	687b      	ldr	r3, [r7, #4]
90001f9a:	685b      	ldr	r3, [r3, #4]
90001f9c:	2b01      	cmp	r3, #1
90001f9e:	d107      	bne.n	90001fb0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
90001fa0:	4b30      	ldr	r3, [pc, #192]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001fa2:	681b      	ldr	r3, [r3, #0]
90001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001fa8:	2b00      	cmp	r3, #0
90001faa:	d109      	bne.n	90001fc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90001fac:	2301      	movs	r3, #1
90001fae:	e0de      	b.n	9000216e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
90001fb0:	4b2c      	ldr	r3, [pc, #176]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001fb2:	681b      	ldr	r3, [r3, #0]
90001fb4:	f003 0304 	and.w	r3, r3, #4
90001fb8:	2b00      	cmp	r3, #0
90001fba:	d101      	bne.n	90001fc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
90001fbc:	2301      	movs	r3, #1
90001fbe:	e0d6      	b.n	9000216e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
90001fc0:	4b28      	ldr	r3, [pc, #160]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001fc2:	691b      	ldr	r3, [r3, #16]
90001fc4:	f023 0207 	bic.w	r2, r3, #7
90001fc8:	687b      	ldr	r3, [r7, #4]
90001fca:	685b      	ldr	r3, [r3, #4]
90001fcc:	4925      	ldr	r1, [pc, #148]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001fce:	4313      	orrs	r3, r2
90001fd0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001fd2:	f7fe ff3d 	bl	90000e50 <HAL_GetTick>
90001fd6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90001fd8:	e00a      	b.n	90001ff0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
90001fda:	f7fe ff39 	bl	90000e50 <HAL_GetTick>
90001fde:	4602      	mov	r2, r0
90001fe0:	697b      	ldr	r3, [r7, #20]
90001fe2:	1ad3      	subs	r3, r2, r3
90001fe4:	f241 3288 	movw	r2, #5000	; 0x1388
90001fe8:	4293      	cmp	r3, r2
90001fea:	d901      	bls.n	90001ff0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
90001fec:	2303      	movs	r3, #3
90001fee:	e0be      	b.n	9000216e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90001ff0:	4b1c      	ldr	r3, [pc, #112]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90001ff2:	691b      	ldr	r3, [r3, #16]
90001ff4:	f003 0238 	and.w	r2, r3, #56	; 0x38
90001ff8:	687b      	ldr	r3, [r7, #4]
90001ffa:	685b      	ldr	r3, [r3, #4]
90001ffc:	00db      	lsls	r3, r3, #3
90001ffe:	429a      	cmp	r2, r3
90002000:	d1eb      	bne.n	90001fda <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90002002:	687b      	ldr	r3, [r7, #4]
90002004:	681b      	ldr	r3, [r3, #0]
90002006:	f003 0302 	and.w	r3, r3, #2
9000200a:	2b00      	cmp	r3, #0
9000200c:	d010      	beq.n	90002030 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000200e:	687b      	ldr	r3, [r7, #4]
90002010:	68da      	ldr	r2, [r3, #12]
90002012:	4b14      	ldr	r3, [pc, #80]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90002014:	699b      	ldr	r3, [r3, #24]
90002016:	f003 030f 	and.w	r3, r3, #15
9000201a:	429a      	cmp	r2, r3
9000201c:	d208      	bcs.n	90002030 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000201e:	4b11      	ldr	r3, [pc, #68]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
90002020:	699b      	ldr	r3, [r3, #24]
90002022:	f023 020f 	bic.w	r2, r3, #15
90002026:	687b      	ldr	r3, [r7, #4]
90002028:	68db      	ldr	r3, [r3, #12]
9000202a:	490e      	ldr	r1, [pc, #56]	; (90002064 <HAL_RCC_ClockConfig+0x244>)
9000202c:	4313      	orrs	r3, r2
9000202e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
90002030:	4b0b      	ldr	r3, [pc, #44]	; (90002060 <HAL_RCC_ClockConfig+0x240>)
90002032:	681b      	ldr	r3, [r3, #0]
90002034:	f003 030f 	and.w	r3, r3, #15
90002038:	683a      	ldr	r2, [r7, #0]
9000203a:	429a      	cmp	r2, r3
9000203c:	d214      	bcs.n	90002068 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
9000203e:	4b08      	ldr	r3, [pc, #32]	; (90002060 <HAL_RCC_ClockConfig+0x240>)
90002040:	681b      	ldr	r3, [r3, #0]
90002042:	f023 020f 	bic.w	r2, r3, #15
90002046:	4906      	ldr	r1, [pc, #24]	; (90002060 <HAL_RCC_ClockConfig+0x240>)
90002048:	683b      	ldr	r3, [r7, #0]
9000204a:	4313      	orrs	r3, r2
9000204c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
9000204e:	4b04      	ldr	r3, [pc, #16]	; (90002060 <HAL_RCC_ClockConfig+0x240>)
90002050:	681b      	ldr	r3, [r3, #0]
90002052:	f003 030f 	and.w	r3, r3, #15
90002056:	683a      	ldr	r2, [r7, #0]
90002058:	429a      	cmp	r2, r3
9000205a:	d005      	beq.n	90002068 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
9000205c:	2301      	movs	r3, #1
9000205e:	e086      	b.n	9000216e <HAL_RCC_ClockConfig+0x34e>
90002060:	52002000 	.word	0x52002000
90002064:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
90002068:	687b      	ldr	r3, [r7, #4]
9000206a:	681b      	ldr	r3, [r3, #0]
9000206c:	f003 0304 	and.w	r3, r3, #4
90002070:	2b00      	cmp	r3, #0
90002072:	d010      	beq.n	90002096 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
90002074:	687b      	ldr	r3, [r7, #4]
90002076:	691a      	ldr	r2, [r3, #16]
90002078:	4b3f      	ldr	r3, [pc, #252]	; (90002178 <HAL_RCC_ClockConfig+0x358>)
9000207a:	699b      	ldr	r3, [r3, #24]
9000207c:	f003 0370 	and.w	r3, r3, #112	; 0x70
90002080:	429a      	cmp	r2, r3
90002082:	d208      	bcs.n	90002096 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
90002084:	4b3c      	ldr	r3, [pc, #240]	; (90002178 <HAL_RCC_ClockConfig+0x358>)
90002086:	699b      	ldr	r3, [r3, #24]
90002088:	f023 0270 	bic.w	r2, r3, #112	; 0x70
9000208c:	687b      	ldr	r3, [r7, #4]
9000208e:	691b      	ldr	r3, [r3, #16]
90002090:	4939      	ldr	r1, [pc, #228]	; (90002178 <HAL_RCC_ClockConfig+0x358>)
90002092:	4313      	orrs	r3, r2
90002094:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90002096:	687b      	ldr	r3, [r7, #4]
90002098:	681b      	ldr	r3, [r3, #0]
9000209a:	f003 0308 	and.w	r3, r3, #8
9000209e:	2b00      	cmp	r3, #0
900020a0:	d010      	beq.n	900020c4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
900020a2:	687b      	ldr	r3, [r7, #4]
900020a4:	695a      	ldr	r2, [r3, #20]
900020a6:	4b34      	ldr	r3, [pc, #208]	; (90002178 <HAL_RCC_ClockConfig+0x358>)
900020a8:	69db      	ldr	r3, [r3, #28]
900020aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
900020ae:	429a      	cmp	r2, r3
900020b0:	d208      	bcs.n	900020c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
900020b2:	4b31      	ldr	r3, [pc, #196]	; (90002178 <HAL_RCC_ClockConfig+0x358>)
900020b4:	69db      	ldr	r3, [r3, #28]
900020b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
900020ba:	687b      	ldr	r3, [r7, #4]
900020bc:	695b      	ldr	r3, [r3, #20]
900020be:	492e      	ldr	r1, [pc, #184]	; (90002178 <HAL_RCC_ClockConfig+0x358>)
900020c0:	4313      	orrs	r3, r2
900020c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
900020c4:	687b      	ldr	r3, [r7, #4]
900020c6:	681b      	ldr	r3, [r3, #0]
900020c8:	f003 0310 	and.w	r3, r3, #16
900020cc:	2b00      	cmp	r3, #0
900020ce:	d010      	beq.n	900020f2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
900020d0:	687b      	ldr	r3, [r7, #4]
900020d2:	699a      	ldr	r2, [r3, #24]
900020d4:	4b28      	ldr	r3, [pc, #160]	; (90002178 <HAL_RCC_ClockConfig+0x358>)
900020d6:	69db      	ldr	r3, [r3, #28]
900020d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
900020dc:	429a      	cmp	r2, r3
900020de:	d208      	bcs.n	900020f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
900020e0:	4b25      	ldr	r3, [pc, #148]	; (90002178 <HAL_RCC_ClockConfig+0x358>)
900020e2:	69db      	ldr	r3, [r3, #28]
900020e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
900020e8:	687b      	ldr	r3, [r7, #4]
900020ea:	699b      	ldr	r3, [r3, #24]
900020ec:	4922      	ldr	r1, [pc, #136]	; (90002178 <HAL_RCC_ClockConfig+0x358>)
900020ee:	4313      	orrs	r3, r2
900020f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
900020f2:	687b      	ldr	r3, [r7, #4]
900020f4:	681b      	ldr	r3, [r3, #0]
900020f6:	f003 0320 	and.w	r3, r3, #32
900020fa:	2b00      	cmp	r3, #0
900020fc:	d010      	beq.n	90002120 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
900020fe:	687b      	ldr	r3, [r7, #4]
90002100:	69da      	ldr	r2, [r3, #28]
90002102:	4b1d      	ldr	r3, [pc, #116]	; (90002178 <HAL_RCC_ClockConfig+0x358>)
90002104:	6a1b      	ldr	r3, [r3, #32]
90002106:	f003 0370 	and.w	r3, r3, #112	; 0x70
9000210a:	429a      	cmp	r2, r3
9000210c:	d208      	bcs.n	90002120 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
9000210e:	4b1a      	ldr	r3, [pc, #104]	; (90002178 <HAL_RCC_ClockConfig+0x358>)
90002110:	6a1b      	ldr	r3, [r3, #32]
90002112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
90002116:	687b      	ldr	r3, [r7, #4]
90002118:	69db      	ldr	r3, [r3, #28]
9000211a:	4917      	ldr	r1, [pc, #92]	; (90002178 <HAL_RCC_ClockConfig+0x358>)
9000211c:	4313      	orrs	r3, r2
9000211e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90002120:	f000 f834 	bl	9000218c <HAL_RCC_GetSysClockFreq>
90002124:	4602      	mov	r2, r0
90002126:	4b14      	ldr	r3, [pc, #80]	; (90002178 <HAL_RCC_ClockConfig+0x358>)
90002128:	699b      	ldr	r3, [r3, #24]
9000212a:	0a1b      	lsrs	r3, r3, #8
9000212c:	f003 030f 	and.w	r3, r3, #15
90002130:	4912      	ldr	r1, [pc, #72]	; (9000217c <HAL_RCC_ClockConfig+0x35c>)
90002132:	5ccb      	ldrb	r3, [r1, r3]
90002134:	f003 031f 	and.w	r3, r3, #31
90002138:	fa22 f303 	lsr.w	r3, r2, r3
9000213c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000213e:	4b0e      	ldr	r3, [pc, #56]	; (90002178 <HAL_RCC_ClockConfig+0x358>)
90002140:	699b      	ldr	r3, [r3, #24]
90002142:	f003 030f 	and.w	r3, r3, #15
90002146:	4a0d      	ldr	r2, [pc, #52]	; (9000217c <HAL_RCC_ClockConfig+0x35c>)
90002148:	5cd3      	ldrb	r3, [r2, r3]
9000214a:	f003 031f 	and.w	r3, r3, #31
9000214e:	693a      	ldr	r2, [r7, #16]
90002150:	fa22 f303 	lsr.w	r3, r2, r3
90002154:	4a0a      	ldr	r2, [pc, #40]	; (90002180 <HAL_RCC_ClockConfig+0x360>)
90002156:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90002158:	4a0a      	ldr	r2, [pc, #40]	; (90002184 <HAL_RCC_ClockConfig+0x364>)
9000215a:	693b      	ldr	r3, [r7, #16]
9000215c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
9000215e:	4b0a      	ldr	r3, [pc, #40]	; (90002188 <HAL_RCC_ClockConfig+0x368>)
90002160:	681b      	ldr	r3, [r3, #0]
90002162:	4618      	mov	r0, r3
90002164:	f7fe fe2a 	bl	90000dbc <HAL_InitTick>
90002168:	4603      	mov	r3, r0
9000216a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
9000216c:	7bfb      	ldrb	r3, [r7, #15]
}
9000216e:	4618      	mov	r0, r3
90002170:	3718      	adds	r7, #24
90002172:	46bd      	mov	sp, r7
90002174:	bd80      	pop	{r7, pc}
90002176:	bf00      	nop
90002178:	58024400 	.word	0x58024400
9000217c:	900058b0 	.word	0x900058b0
90002180:	24000004 	.word	0x24000004
90002184:	24000000 	.word	0x24000000
90002188:	24000008 	.word	0x24000008

9000218c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
9000218c:	b480      	push	{r7}
9000218e:	b089      	sub	sp, #36	; 0x24
90002190:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90002192:	4bb3      	ldr	r3, [pc, #716]	; (90002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
90002194:	691b      	ldr	r3, [r3, #16]
90002196:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000219a:	2b18      	cmp	r3, #24
9000219c:	f200 8155 	bhi.w	9000244a <HAL_RCC_GetSysClockFreq+0x2be>
900021a0:	a201      	add	r2, pc, #4	; (adr r2, 900021a8 <HAL_RCC_GetSysClockFreq+0x1c>)
900021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900021a6:	bf00      	nop
900021a8:	9000220d 	.word	0x9000220d
900021ac:	9000244b 	.word	0x9000244b
900021b0:	9000244b 	.word	0x9000244b
900021b4:	9000244b 	.word	0x9000244b
900021b8:	9000244b 	.word	0x9000244b
900021bc:	9000244b 	.word	0x9000244b
900021c0:	9000244b 	.word	0x9000244b
900021c4:	9000244b 	.word	0x9000244b
900021c8:	90002233 	.word	0x90002233
900021cc:	9000244b 	.word	0x9000244b
900021d0:	9000244b 	.word	0x9000244b
900021d4:	9000244b 	.word	0x9000244b
900021d8:	9000244b 	.word	0x9000244b
900021dc:	9000244b 	.word	0x9000244b
900021e0:	9000244b 	.word	0x9000244b
900021e4:	9000244b 	.word	0x9000244b
900021e8:	90002239 	.word	0x90002239
900021ec:	9000244b 	.word	0x9000244b
900021f0:	9000244b 	.word	0x9000244b
900021f4:	9000244b 	.word	0x9000244b
900021f8:	9000244b 	.word	0x9000244b
900021fc:	9000244b 	.word	0x9000244b
90002200:	9000244b 	.word	0x9000244b
90002204:	9000244b 	.word	0x9000244b
90002208:	9000223f 	.word	0x9000223f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000220c:	4b94      	ldr	r3, [pc, #592]	; (90002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000220e:	681b      	ldr	r3, [r3, #0]
90002210:	f003 0320 	and.w	r3, r3, #32
90002214:	2b00      	cmp	r3, #0
90002216:	d009      	beq.n	9000222c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90002218:	4b91      	ldr	r3, [pc, #580]	; (90002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000221a:	681b      	ldr	r3, [r3, #0]
9000221c:	08db      	lsrs	r3, r3, #3
9000221e:	f003 0303 	and.w	r3, r3, #3
90002222:	4a90      	ldr	r2, [pc, #576]	; (90002464 <HAL_RCC_GetSysClockFreq+0x2d8>)
90002224:	fa22 f303 	lsr.w	r3, r2, r3
90002228:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
9000222a:	e111      	b.n	90002450 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000222c:	4b8d      	ldr	r3, [pc, #564]	; (90002464 <HAL_RCC_GetSysClockFreq+0x2d8>)
9000222e:	61bb      	str	r3, [r7, #24]
    break;
90002230:	e10e      	b.n	90002450 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
90002232:	4b8d      	ldr	r3, [pc, #564]	; (90002468 <HAL_RCC_GetSysClockFreq+0x2dc>)
90002234:	61bb      	str	r3, [r7, #24]
    break;
90002236:	e10b      	b.n	90002450 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
90002238:	4b8c      	ldr	r3, [pc, #560]	; (9000246c <HAL_RCC_GetSysClockFreq+0x2e0>)
9000223a:	61bb      	str	r3, [r7, #24]
    break;
9000223c:	e108      	b.n	90002450 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000223e:	4b88      	ldr	r3, [pc, #544]	; (90002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
90002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002242:	f003 0303 	and.w	r3, r3, #3
90002246:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
90002248:	4b85      	ldr	r3, [pc, #532]	; (90002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000224c:	091b      	lsrs	r3, r3, #4
9000224e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
90002252:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
90002254:	4b82      	ldr	r3, [pc, #520]	; (90002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
90002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002258:	f003 0301 	and.w	r3, r3, #1
9000225c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
9000225e:	4b80      	ldr	r3, [pc, #512]	; (90002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
90002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90002262:	08db      	lsrs	r3, r3, #3
90002264:	f3c3 030c 	ubfx	r3, r3, #0, #13
90002268:	68fa      	ldr	r2, [r7, #12]
9000226a:	fb02 f303 	mul.w	r3, r2, r3
9000226e:	ee07 3a90 	vmov	s15, r3
90002272:	eef8 7a67 	vcvt.f32.u32	s15, s15
90002276:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
9000227a:	693b      	ldr	r3, [r7, #16]
9000227c:	2b00      	cmp	r3, #0
9000227e:	f000 80e1 	beq.w	90002444 <HAL_RCC_GetSysClockFreq+0x2b8>
90002282:	697b      	ldr	r3, [r7, #20]
90002284:	2b02      	cmp	r3, #2
90002286:	f000 8083 	beq.w	90002390 <HAL_RCC_GetSysClockFreq+0x204>
9000228a:	697b      	ldr	r3, [r7, #20]
9000228c:	2b02      	cmp	r3, #2
9000228e:	f200 80a1 	bhi.w	900023d4 <HAL_RCC_GetSysClockFreq+0x248>
90002292:	697b      	ldr	r3, [r7, #20]
90002294:	2b00      	cmp	r3, #0
90002296:	d003      	beq.n	900022a0 <HAL_RCC_GetSysClockFreq+0x114>
90002298:	697b      	ldr	r3, [r7, #20]
9000229a:	2b01      	cmp	r3, #1
9000229c:	d056      	beq.n	9000234c <HAL_RCC_GetSysClockFreq+0x1c0>
9000229e:	e099      	b.n	900023d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900022a0:	4b6f      	ldr	r3, [pc, #444]	; (90002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
900022a2:	681b      	ldr	r3, [r3, #0]
900022a4:	f003 0320 	and.w	r3, r3, #32
900022a8:	2b00      	cmp	r3, #0
900022aa:	d02d      	beq.n	90002308 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
900022ac:	4b6c      	ldr	r3, [pc, #432]	; (90002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
900022ae:	681b      	ldr	r3, [r3, #0]
900022b0:	08db      	lsrs	r3, r3, #3
900022b2:	f003 0303 	and.w	r3, r3, #3
900022b6:	4a6b      	ldr	r2, [pc, #428]	; (90002464 <HAL_RCC_GetSysClockFreq+0x2d8>)
900022b8:	fa22 f303 	lsr.w	r3, r2, r3
900022bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
900022be:	687b      	ldr	r3, [r7, #4]
900022c0:	ee07 3a90 	vmov	s15, r3
900022c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
900022c8:	693b      	ldr	r3, [r7, #16]
900022ca:	ee07 3a90 	vmov	s15, r3
900022ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
900022d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900022d6:	4b62      	ldr	r3, [pc, #392]	; (90002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
900022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900022da:	f3c3 0308 	ubfx	r3, r3, #0, #9
900022de:	ee07 3a90 	vmov	s15, r3
900022e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900022e6:	ed97 6a02 	vldr	s12, [r7, #8]
900022ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 90002470 <HAL_RCC_GetSysClockFreq+0x2e4>
900022ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
900022f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900022f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900022fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
900022fe:	ee67 7a27 	vmul.f32	s15, s14, s15
90002302:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
90002306:	e087      	b.n	90002418 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90002308:	693b      	ldr	r3, [r7, #16]
9000230a:	ee07 3a90 	vmov	s15, r3
9000230e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90002312:	eddf 6a58 	vldr	s13, [pc, #352]	; 90002474 <HAL_RCC_GetSysClockFreq+0x2e8>
90002316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000231a:	4b51      	ldr	r3, [pc, #324]	; (90002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000231e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90002322:	ee07 3a90 	vmov	s15, r3
90002326:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000232a:	ed97 6a02 	vldr	s12, [r7, #8]
9000232e:	eddf 5a50 	vldr	s11, [pc, #320]	; 90002470 <HAL_RCC_GetSysClockFreq+0x2e4>
90002332:	eec6 7a25 	vdiv.f32	s15, s12, s11
90002336:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000233a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000233e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90002342:	ee67 7a27 	vmul.f32	s15, s14, s15
90002346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000234a:	e065      	b.n	90002418 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
9000234c:	693b      	ldr	r3, [r7, #16]
9000234e:	ee07 3a90 	vmov	s15, r3
90002352:	eef8 7a67 	vcvt.f32.u32	s15, s15
90002356:	eddf 6a48 	vldr	s13, [pc, #288]	; 90002478 <HAL_RCC_GetSysClockFreq+0x2ec>
9000235a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000235e:	4b40      	ldr	r3, [pc, #256]	; (90002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
90002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90002362:	f3c3 0308 	ubfx	r3, r3, #0, #9
90002366:	ee07 3a90 	vmov	s15, r3
9000236a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000236e:	ed97 6a02 	vldr	s12, [r7, #8]
90002372:	eddf 5a3f 	vldr	s11, [pc, #252]	; 90002470 <HAL_RCC_GetSysClockFreq+0x2e4>
90002376:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000237a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000237e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90002382:	ee77 7aa6 	vadd.f32	s15, s15, s13
90002386:	ee67 7a27 	vmul.f32	s15, s14, s15
9000238a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000238e:	e043      	b.n	90002418 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90002390:	693b      	ldr	r3, [r7, #16]
90002392:	ee07 3a90 	vmov	s15, r3
90002396:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000239a:	eddf 6a38 	vldr	s13, [pc, #224]	; 9000247c <HAL_RCC_GetSysClockFreq+0x2f0>
9000239e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900023a2:	4b2f      	ldr	r3, [pc, #188]	; (90002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
900023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900023a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900023aa:	ee07 3a90 	vmov	s15, r3
900023ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
900023b2:	ed97 6a02 	vldr	s12, [r7, #8]
900023b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 90002470 <HAL_RCC_GetSysClockFreq+0x2e4>
900023ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
900023be:	ee76 7aa7 	vadd.f32	s15, s13, s15
900023c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900023c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900023ca:	ee67 7a27 	vmul.f32	s15, s14, s15
900023ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900023d2:	e021      	b.n	90002418 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
900023d4:	693b      	ldr	r3, [r7, #16]
900023d6:	ee07 3a90 	vmov	s15, r3
900023da:	eef8 7a67 	vcvt.f32.u32	s15, s15
900023de:	eddf 6a26 	vldr	s13, [pc, #152]	; 90002478 <HAL_RCC_GetSysClockFreq+0x2ec>
900023e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900023e6:	4b1e      	ldr	r3, [pc, #120]	; (90002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
900023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900023ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
900023ee:	ee07 3a90 	vmov	s15, r3
900023f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900023f6:	ed97 6a02 	vldr	s12, [r7, #8]
900023fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 90002470 <HAL_RCC_GetSysClockFreq+0x2e4>
900023fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
90002402:	ee76 7aa7 	vadd.f32	s15, s13, s15
90002406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000240a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000240e:	ee67 7a27 	vmul.f32	s15, s14, s15
90002412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90002416:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
90002418:	4b11      	ldr	r3, [pc, #68]	; (90002460 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000241c:	0a5b      	lsrs	r3, r3, #9
9000241e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90002422:	3301      	adds	r3, #1
90002424:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
90002426:	683b      	ldr	r3, [r7, #0]
90002428:	ee07 3a90 	vmov	s15, r3
9000242c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
90002430:	edd7 6a07 	vldr	s13, [r7, #28]
90002434:	eec6 7a87 	vdiv.f32	s15, s13, s14
90002438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000243c:	ee17 3a90 	vmov	r3, s15
90002440:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
90002442:	e005      	b.n	90002450 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
90002444:	2300      	movs	r3, #0
90002446:	61bb      	str	r3, [r7, #24]
    break;
90002448:	e002      	b.n	90002450 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
9000244a:	4b07      	ldr	r3, [pc, #28]	; (90002468 <HAL_RCC_GetSysClockFreq+0x2dc>)
9000244c:	61bb      	str	r3, [r7, #24]
    break;
9000244e:	bf00      	nop
  }

  return sysclockfreq;
90002450:	69bb      	ldr	r3, [r7, #24]
}
90002452:	4618      	mov	r0, r3
90002454:	3724      	adds	r7, #36	; 0x24
90002456:	46bd      	mov	sp, r7
90002458:	f85d 7b04 	ldr.w	r7, [sp], #4
9000245c:	4770      	bx	lr
9000245e:	bf00      	nop
90002460:	58024400 	.word	0x58024400
90002464:	03d09000 	.word	0x03d09000
90002468:	003d0900 	.word	0x003d0900
9000246c:	017d7840 	.word	0x017d7840
90002470:	46000000 	.word	0x46000000
90002474:	4c742400 	.word	0x4c742400
90002478:	4a742400 	.word	0x4a742400
9000247c:	4bbebc20 	.word	0x4bbebc20

90002480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
90002480:	b580      	push	{r7, lr}
90002482:	b082      	sub	sp, #8
90002484:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
90002486:	f7ff fe81 	bl	9000218c <HAL_RCC_GetSysClockFreq>
9000248a:	4602      	mov	r2, r0
9000248c:	4b10      	ldr	r3, [pc, #64]	; (900024d0 <HAL_RCC_GetHCLKFreq+0x50>)
9000248e:	699b      	ldr	r3, [r3, #24]
90002490:	0a1b      	lsrs	r3, r3, #8
90002492:	f003 030f 	and.w	r3, r3, #15
90002496:	490f      	ldr	r1, [pc, #60]	; (900024d4 <HAL_RCC_GetHCLKFreq+0x54>)
90002498:	5ccb      	ldrb	r3, [r1, r3]
9000249a:	f003 031f 	and.w	r3, r3, #31
9000249e:	fa22 f303 	lsr.w	r3, r2, r3
900024a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900024a4:	4b0a      	ldr	r3, [pc, #40]	; (900024d0 <HAL_RCC_GetHCLKFreq+0x50>)
900024a6:	699b      	ldr	r3, [r3, #24]
900024a8:	f003 030f 	and.w	r3, r3, #15
900024ac:	4a09      	ldr	r2, [pc, #36]	; (900024d4 <HAL_RCC_GetHCLKFreq+0x54>)
900024ae:	5cd3      	ldrb	r3, [r2, r3]
900024b0:	f003 031f 	and.w	r3, r3, #31
900024b4:	687a      	ldr	r2, [r7, #4]
900024b6:	fa22 f303 	lsr.w	r3, r2, r3
900024ba:	4a07      	ldr	r2, [pc, #28]	; (900024d8 <HAL_RCC_GetHCLKFreq+0x58>)
900024bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
900024be:	4a07      	ldr	r2, [pc, #28]	; (900024dc <HAL_RCC_GetHCLKFreq+0x5c>)
900024c0:	687b      	ldr	r3, [r7, #4]
900024c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
900024c4:	4b04      	ldr	r3, [pc, #16]	; (900024d8 <HAL_RCC_GetHCLKFreq+0x58>)
900024c6:	681b      	ldr	r3, [r3, #0]
}
900024c8:	4618      	mov	r0, r3
900024ca:	3708      	adds	r7, #8
900024cc:	46bd      	mov	sp, r7
900024ce:	bd80      	pop	{r7, pc}
900024d0:	58024400 	.word	0x58024400
900024d4:	900058b0 	.word	0x900058b0
900024d8:	24000004 	.word	0x24000004
900024dc:	24000000 	.word	0x24000000

900024e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
900024e0:	b580      	push	{r7, lr}
900024e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
900024e4:	f7ff ffcc 	bl	90002480 <HAL_RCC_GetHCLKFreq>
900024e8:	4602      	mov	r2, r0
900024ea:	4b06      	ldr	r3, [pc, #24]	; (90002504 <HAL_RCC_GetPCLK1Freq+0x24>)
900024ec:	69db      	ldr	r3, [r3, #28]
900024ee:	091b      	lsrs	r3, r3, #4
900024f0:	f003 0307 	and.w	r3, r3, #7
900024f4:	4904      	ldr	r1, [pc, #16]	; (90002508 <HAL_RCC_GetPCLK1Freq+0x28>)
900024f6:	5ccb      	ldrb	r3, [r1, r3]
900024f8:	f003 031f 	and.w	r3, r3, #31
900024fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
90002500:	4618      	mov	r0, r3
90002502:	bd80      	pop	{r7, pc}
90002504:	58024400 	.word	0x58024400
90002508:	900058b0 	.word	0x900058b0

9000250c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000250c:	b580      	push	{r7, lr}
9000250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90002510:	f7ff ffb6 	bl	90002480 <HAL_RCC_GetHCLKFreq>
90002514:	4602      	mov	r2, r0
90002516:	4b06      	ldr	r3, [pc, #24]	; (90002530 <HAL_RCC_GetPCLK2Freq+0x24>)
90002518:	69db      	ldr	r3, [r3, #28]
9000251a:	0a1b      	lsrs	r3, r3, #8
9000251c:	f003 0307 	and.w	r3, r3, #7
90002520:	4904      	ldr	r1, [pc, #16]	; (90002534 <HAL_RCC_GetPCLK2Freq+0x28>)
90002522:	5ccb      	ldrb	r3, [r1, r3]
90002524:	f003 031f 	and.w	r3, r3, #31
90002528:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000252c:	4618      	mov	r0, r3
9000252e:	bd80      	pop	{r7, pc}
90002530:	58024400 	.word	0x58024400
90002534:	900058b0 	.word	0x900058b0

90002538 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
90002538:	b580      	push	{r7, lr}
9000253a:	b086      	sub	sp, #24
9000253c:	af00      	add	r7, sp, #0
9000253e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
90002540:	2300      	movs	r3, #0
90002542:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
90002544:	2300      	movs	r3, #0
90002546:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
90002548:	687b      	ldr	r3, [r7, #4]
9000254a:	681b      	ldr	r3, [r3, #0]
9000254c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90002550:	2b00      	cmp	r3, #0
90002552:	d03f      	beq.n	900025d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
90002554:	687b      	ldr	r3, [r7, #4]
90002556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90002558:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
9000255c:	d02a      	beq.n	900025b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
9000255e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90002562:	d824      	bhi.n	900025ae <HAL_RCCEx_PeriphCLKConfig+0x76>
90002564:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90002568:	d018      	beq.n	9000259c <HAL_RCCEx_PeriphCLKConfig+0x64>
9000256a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
9000256e:	d81e      	bhi.n	900025ae <HAL_RCCEx_PeriphCLKConfig+0x76>
90002570:	2b00      	cmp	r3, #0
90002572:	d003      	beq.n	9000257c <HAL_RCCEx_PeriphCLKConfig+0x44>
90002574:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90002578:	d007      	beq.n	9000258a <HAL_RCCEx_PeriphCLKConfig+0x52>
9000257a:	e018      	b.n	900025ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000257c:	4ba3      	ldr	r3, [pc, #652]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
9000257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002580:	4aa2      	ldr	r2, [pc, #648]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90002586:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
90002588:	e015      	b.n	900025b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
9000258a:	687b      	ldr	r3, [r7, #4]
9000258c:	3304      	adds	r3, #4
9000258e:	2102      	movs	r1, #2
90002590:	4618      	mov	r0, r3
90002592:	f001 f9d5 	bl	90003940 <RCCEx_PLL2_Config>
90002596:	4603      	mov	r3, r0
90002598:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
9000259a:	e00c      	b.n	900025b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
9000259c:	687b      	ldr	r3, [r7, #4]
9000259e:	3324      	adds	r3, #36	; 0x24
900025a0:	2102      	movs	r1, #2
900025a2:	4618      	mov	r0, r3
900025a4:	f001 fa7e 	bl	90003aa4 <RCCEx_PLL3_Config>
900025a8:	4603      	mov	r3, r0
900025aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
900025ac:	e003      	b.n	900025b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900025ae:	2301      	movs	r3, #1
900025b0:	75fb      	strb	r3, [r7, #23]
      break;
900025b2:	e000      	b.n	900025b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
900025b4:	bf00      	nop
    }

    if(ret == HAL_OK)
900025b6:	7dfb      	ldrb	r3, [r7, #23]
900025b8:	2b00      	cmp	r3, #0
900025ba:	d109      	bne.n	900025d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
900025bc:	4b93      	ldr	r3, [pc, #588]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900025be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900025c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
900025c4:	687b      	ldr	r3, [r7, #4]
900025c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
900025c8:	4990      	ldr	r1, [pc, #576]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900025ca:	4313      	orrs	r3, r2
900025cc:	650b      	str	r3, [r1, #80]	; 0x50
900025ce:	e001      	b.n	900025d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
900025d0:	7dfb      	ldrb	r3, [r7, #23]
900025d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
900025d4:	687b      	ldr	r3, [r7, #4]
900025d6:	681b      	ldr	r3, [r3, #0]
900025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
900025dc:	2b00      	cmp	r3, #0
900025de:	d03d      	beq.n	9000265c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
900025e0:	687b      	ldr	r3, [r7, #4]
900025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900025e4:	2b04      	cmp	r3, #4
900025e6:	d826      	bhi.n	90002636 <HAL_RCCEx_PeriphCLKConfig+0xfe>
900025e8:	a201      	add	r2, pc, #4	; (adr r2, 900025f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
900025ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900025ee:	bf00      	nop
900025f0:	90002605 	.word	0x90002605
900025f4:	90002613 	.word	0x90002613
900025f8:	90002625 	.word	0x90002625
900025fc:	9000263d 	.word	0x9000263d
90002600:	9000263d 	.word	0x9000263d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90002604:	4b81      	ldr	r3, [pc, #516]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002608:	4a80      	ldr	r2, [pc, #512]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
9000260a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000260e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90002610:	e015      	b.n	9000263e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90002612:	687b      	ldr	r3, [r7, #4]
90002614:	3304      	adds	r3, #4
90002616:	2100      	movs	r1, #0
90002618:	4618      	mov	r0, r3
9000261a:	f001 f991 	bl	90003940 <RCCEx_PLL2_Config>
9000261e:	4603      	mov	r3, r0
90002620:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90002622:	e00c      	b.n	9000263e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
90002624:	687b      	ldr	r3, [r7, #4]
90002626:	3324      	adds	r3, #36	; 0x24
90002628:	2100      	movs	r1, #0
9000262a:	4618      	mov	r0, r3
9000262c:	f001 fa3a 	bl	90003aa4 <RCCEx_PLL3_Config>
90002630:	4603      	mov	r3, r0
90002632:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90002634:	e003      	b.n	9000263e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90002636:	2301      	movs	r3, #1
90002638:	75fb      	strb	r3, [r7, #23]
      break;
9000263a:	e000      	b.n	9000263e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
9000263c:	bf00      	nop
    }

    if(ret == HAL_OK)
9000263e:	7dfb      	ldrb	r3, [r7, #23]
90002640:	2b00      	cmp	r3, #0
90002642:	d109      	bne.n	90002658 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
90002644:	4b71      	ldr	r3, [pc, #452]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002648:	f023 0207 	bic.w	r2, r3, #7
9000264c:	687b      	ldr	r3, [r7, #4]
9000264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002650:	496e      	ldr	r1, [pc, #440]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002652:	4313      	orrs	r3, r2
90002654:	650b      	str	r3, [r1, #80]	; 0x50
90002656:	e001      	b.n	9000265c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
90002658:	7dfb      	ldrb	r3, [r7, #23]
9000265a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000265c:	687b      	ldr	r3, [r7, #4]
9000265e:	681b      	ldr	r3, [r3, #0]
90002660:	f403 7300 	and.w	r3, r3, #512	; 0x200
90002664:	2b00      	cmp	r3, #0
90002666:	d042      	beq.n	900026ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
90002668:	687b      	ldr	r3, [r7, #4]
9000266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000266c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90002670:	d02b      	beq.n	900026ca <HAL_RCCEx_PeriphCLKConfig+0x192>
90002672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90002676:	d825      	bhi.n	900026c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
90002678:	2bc0      	cmp	r3, #192	; 0xc0
9000267a:	d028      	beq.n	900026ce <HAL_RCCEx_PeriphCLKConfig+0x196>
9000267c:	2bc0      	cmp	r3, #192	; 0xc0
9000267e:	d821      	bhi.n	900026c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
90002680:	2b80      	cmp	r3, #128	; 0x80
90002682:	d016      	beq.n	900026b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
90002684:	2b80      	cmp	r3, #128	; 0x80
90002686:	d81d      	bhi.n	900026c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
90002688:	2b00      	cmp	r3, #0
9000268a:	d002      	beq.n	90002692 <HAL_RCCEx_PeriphCLKConfig+0x15a>
9000268c:	2b40      	cmp	r3, #64	; 0x40
9000268e:	d007      	beq.n	900026a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
90002690:	e018      	b.n	900026c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90002692:	4b5e      	ldr	r3, [pc, #376]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002696:	4a5d      	ldr	r2, [pc, #372]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000269c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
9000269e:	e017      	b.n	900026d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
900026a0:	687b      	ldr	r3, [r7, #4]
900026a2:	3304      	adds	r3, #4
900026a4:	2100      	movs	r1, #0
900026a6:	4618      	mov	r0, r3
900026a8:	f001 f94a 	bl	90003940 <RCCEx_PLL2_Config>
900026ac:	4603      	mov	r3, r0
900026ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
900026b0:	e00e      	b.n	900026d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
900026b2:	687b      	ldr	r3, [r7, #4]
900026b4:	3324      	adds	r3, #36	; 0x24
900026b6:	2100      	movs	r1, #0
900026b8:	4618      	mov	r0, r3
900026ba:	f001 f9f3 	bl	90003aa4 <RCCEx_PLL3_Config>
900026be:	4603      	mov	r3, r0
900026c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
900026c2:	e005      	b.n	900026d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900026c4:	2301      	movs	r3, #1
900026c6:	75fb      	strb	r3, [r7, #23]
      break;
900026c8:	e002      	b.n	900026d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
900026ca:	bf00      	nop
900026cc:	e000      	b.n	900026d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
900026ce:	bf00      	nop
    }

    if(ret == HAL_OK)
900026d0:	7dfb      	ldrb	r3, [r7, #23]
900026d2:	2b00      	cmp	r3, #0
900026d4:	d109      	bne.n	900026ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
900026d6:	4b4d      	ldr	r3, [pc, #308]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900026d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900026da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
900026de:	687b      	ldr	r3, [r7, #4]
900026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900026e2:	494a      	ldr	r1, [pc, #296]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900026e4:	4313      	orrs	r3, r2
900026e6:	650b      	str	r3, [r1, #80]	; 0x50
900026e8:	e001      	b.n	900026ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
900026ea:	7dfb      	ldrb	r3, [r7, #23]
900026ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
900026ee:	687b      	ldr	r3, [r7, #4]
900026f0:	681b      	ldr	r3, [r3, #0]
900026f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900026f6:	2b00      	cmp	r3, #0
900026f8:	d049      	beq.n	9000278e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
900026fa:	687b      	ldr	r3, [r7, #4]
900026fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
90002700:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
90002704:	d030      	beq.n	90002768 <HAL_RCCEx_PeriphCLKConfig+0x230>
90002706:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
9000270a:	d82a      	bhi.n	90002762 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000270c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
90002710:	d02c      	beq.n	9000276c <HAL_RCCEx_PeriphCLKConfig+0x234>
90002712:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
90002716:	d824      	bhi.n	90002762 <HAL_RCCEx_PeriphCLKConfig+0x22a>
90002718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000271c:	d018      	beq.n	90002750 <HAL_RCCEx_PeriphCLKConfig+0x218>
9000271e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
90002722:	d81e      	bhi.n	90002762 <HAL_RCCEx_PeriphCLKConfig+0x22a>
90002724:	2b00      	cmp	r3, #0
90002726:	d003      	beq.n	90002730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
90002728:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
9000272c:	d007      	beq.n	9000273e <HAL_RCCEx_PeriphCLKConfig+0x206>
9000272e:	e018      	b.n	90002762 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90002730:	4b36      	ldr	r3, [pc, #216]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002734:	4a35      	ldr	r2, [pc, #212]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000273a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
9000273c:	e017      	b.n	9000276e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
9000273e:	687b      	ldr	r3, [r7, #4]
90002740:	3304      	adds	r3, #4
90002742:	2100      	movs	r1, #0
90002744:	4618      	mov	r0, r3
90002746:	f001 f8fb 	bl	90003940 <RCCEx_PLL2_Config>
9000274a:	4603      	mov	r3, r0
9000274c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
9000274e:	e00e      	b.n	9000276e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
90002750:	687b      	ldr	r3, [r7, #4]
90002752:	3324      	adds	r3, #36	; 0x24
90002754:	2100      	movs	r1, #0
90002756:	4618      	mov	r0, r3
90002758:	f001 f9a4 	bl	90003aa4 <RCCEx_PLL3_Config>
9000275c:	4603      	mov	r3, r0
9000275e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90002760:	e005      	b.n	9000276e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
90002762:	2301      	movs	r3, #1
90002764:	75fb      	strb	r3, [r7, #23]
      break;
90002766:	e002      	b.n	9000276e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
90002768:	bf00      	nop
9000276a:	e000      	b.n	9000276e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
9000276c:	bf00      	nop
    }

    if(ret == HAL_OK)
9000276e:	7dfb      	ldrb	r3, [r7, #23]
90002770:	2b00      	cmp	r3, #0
90002772:	d10a      	bne.n	9000278a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
90002774:	4b25      	ldr	r3, [pc, #148]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90002778:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
9000277c:	687b      	ldr	r3, [r7, #4]
9000277e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
90002782:	4922      	ldr	r1, [pc, #136]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
90002784:	4313      	orrs	r3, r2
90002786:	658b      	str	r3, [r1, #88]	; 0x58
90002788:	e001      	b.n	9000278e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000278a:	7dfb      	ldrb	r3, [r7, #23]
9000278c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000278e:	687b      	ldr	r3, [r7, #4]
90002790:	681b      	ldr	r3, [r3, #0]
90002792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
90002796:	2b00      	cmp	r3, #0
90002798:	d04b      	beq.n	90002832 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
9000279a:	687b      	ldr	r3, [r7, #4]
9000279c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
900027a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
900027a4:	d030      	beq.n	90002808 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
900027a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
900027aa:	d82a      	bhi.n	90002802 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
900027ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
900027b0:	d02e      	beq.n	90002810 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
900027b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
900027b6:	d824      	bhi.n	90002802 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
900027b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
900027bc:	d018      	beq.n	900027f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
900027be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
900027c2:	d81e      	bhi.n	90002802 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
900027c4:	2b00      	cmp	r3, #0
900027c6:	d003      	beq.n	900027d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
900027c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
900027cc:	d007      	beq.n	900027de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
900027ce:	e018      	b.n	90002802 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900027d0:	4b0e      	ldr	r3, [pc, #56]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900027d4:	4a0d      	ldr	r2, [pc, #52]	; (9000280c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
900027d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900027da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
900027dc:	e019      	b.n	90002812 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
900027de:	687b      	ldr	r3, [r7, #4]
900027e0:	3304      	adds	r3, #4
900027e2:	2100      	movs	r1, #0
900027e4:	4618      	mov	r0, r3
900027e6:	f001 f8ab 	bl	90003940 <RCCEx_PLL2_Config>
900027ea:	4603      	mov	r3, r0
900027ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
900027ee:	e010      	b.n	90002812 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
900027f0:	687b      	ldr	r3, [r7, #4]
900027f2:	3324      	adds	r3, #36	; 0x24
900027f4:	2100      	movs	r1, #0
900027f6:	4618      	mov	r0, r3
900027f8:	f001 f954 	bl	90003aa4 <RCCEx_PLL3_Config>
900027fc:	4603      	mov	r3, r0
900027fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
90002800:	e007      	b.n	90002812 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
90002802:	2301      	movs	r3, #1
90002804:	75fb      	strb	r3, [r7, #23]
      break;
90002806:	e004      	b.n	90002812 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
90002808:	bf00      	nop
9000280a:	e002      	b.n	90002812 <HAL_RCCEx_PeriphCLKConfig+0x2da>
9000280c:	58024400 	.word	0x58024400
      break;
90002810:	bf00      	nop
    }

    if(ret == HAL_OK)
90002812:	7dfb      	ldrb	r3, [r7, #23]
90002814:	2b00      	cmp	r3, #0
90002816:	d10a      	bne.n	9000282e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
90002818:	4b99      	ldr	r3, [pc, #612]	; (90002a80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
9000281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000281c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
90002820:	687b      	ldr	r3, [r7, #4]
90002822:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
90002826:	4996      	ldr	r1, [pc, #600]	; (90002a80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002828:	4313      	orrs	r3, r2
9000282a:	658b      	str	r3, [r1, #88]	; 0x58
9000282c:	e001      	b.n	90002832 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000282e:	7dfb      	ldrb	r3, [r7, #23]
90002830:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
90002832:	687b      	ldr	r3, [r7, #4]
90002834:	681b      	ldr	r3, [r3, #0]
90002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
9000283a:	2b00      	cmp	r3, #0
9000283c:	d032      	beq.n	900028a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
9000283e:	687b      	ldr	r3, [r7, #4]
90002840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90002842:	2b30      	cmp	r3, #48	; 0x30
90002844:	d01c      	beq.n	90002880 <HAL_RCCEx_PeriphCLKConfig+0x348>
90002846:	2b30      	cmp	r3, #48	; 0x30
90002848:	d817      	bhi.n	9000287a <HAL_RCCEx_PeriphCLKConfig+0x342>
9000284a:	2b20      	cmp	r3, #32
9000284c:	d00c      	beq.n	90002868 <HAL_RCCEx_PeriphCLKConfig+0x330>
9000284e:	2b20      	cmp	r3, #32
90002850:	d813      	bhi.n	9000287a <HAL_RCCEx_PeriphCLKConfig+0x342>
90002852:	2b00      	cmp	r3, #0
90002854:	d016      	beq.n	90002884 <HAL_RCCEx_PeriphCLKConfig+0x34c>
90002856:	2b10      	cmp	r3, #16
90002858:	d10f      	bne.n	9000287a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000285a:	4b89      	ldr	r3, [pc, #548]	; (90002a80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
9000285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000285e:	4a88      	ldr	r2, [pc, #544]	; (90002a80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90002864:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
90002866:	e00e      	b.n	90002886 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
90002868:	687b      	ldr	r3, [r7, #4]
9000286a:	3304      	adds	r3, #4
9000286c:	2102      	movs	r1, #2
9000286e:	4618      	mov	r0, r3
90002870:	f001 f866 	bl	90003940 <RCCEx_PLL2_Config>
90002874:	4603      	mov	r3, r0
90002876:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
90002878:	e005      	b.n	90002886 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
9000287a:	2301      	movs	r3, #1
9000287c:	75fb      	strb	r3, [r7, #23]
      break;
9000287e:	e002      	b.n	90002886 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
90002880:	bf00      	nop
90002882:	e000      	b.n	90002886 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
90002884:	bf00      	nop
    }

    if(ret == HAL_OK)
90002886:	7dfb      	ldrb	r3, [r7, #23]
90002888:	2b00      	cmp	r3, #0
9000288a:	d109      	bne.n	900028a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000288c:	4b7c      	ldr	r3, [pc, #496]	; (90002a80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
9000288e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90002890:	f023 0230 	bic.w	r2, r3, #48	; 0x30
90002894:	687b      	ldr	r3, [r7, #4]
90002896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90002898:	4979      	ldr	r1, [pc, #484]	; (90002a80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
9000289a:	4313      	orrs	r3, r2
9000289c:	64cb      	str	r3, [r1, #76]	; 0x4c
9000289e:	e001      	b.n	900028a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
900028a0:	7dfb      	ldrb	r3, [r7, #23]
900028a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
900028a4:	687b      	ldr	r3, [r7, #4]
900028a6:	681b      	ldr	r3, [r3, #0]
900028a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
900028ac:	2b00      	cmp	r3, #0
900028ae:	d047      	beq.n	90002940 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
900028b0:	687b      	ldr	r3, [r7, #4]
900028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900028b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
900028b8:	d030      	beq.n	9000291c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
900028ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
900028be:	d82a      	bhi.n	90002916 <HAL_RCCEx_PeriphCLKConfig+0x3de>
900028c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
900028c4:	d02c      	beq.n	90002920 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
900028c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
900028ca:	d824      	bhi.n	90002916 <HAL_RCCEx_PeriphCLKConfig+0x3de>
900028cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
900028d0:	d018      	beq.n	90002904 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
900028d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
900028d6:	d81e      	bhi.n	90002916 <HAL_RCCEx_PeriphCLKConfig+0x3de>
900028d8:	2b00      	cmp	r3, #0
900028da:	d003      	beq.n	900028e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
900028dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
900028e0:	d007      	beq.n	900028f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
900028e2:	e018      	b.n	90002916 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900028e4:	4b66      	ldr	r3, [pc, #408]	; (90002a80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
900028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900028e8:	4a65      	ldr	r2, [pc, #404]	; (90002a80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
900028ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900028ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
900028f0:	e017      	b.n	90002922 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
900028f2:	687b      	ldr	r3, [r7, #4]
900028f4:	3304      	adds	r3, #4
900028f6:	2100      	movs	r1, #0
900028f8:	4618      	mov	r0, r3
900028fa:	f001 f821 	bl	90003940 <RCCEx_PLL2_Config>
900028fe:	4603      	mov	r3, r0
90002900:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
90002902:	e00e      	b.n	90002922 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
90002904:	687b      	ldr	r3, [r7, #4]
90002906:	3324      	adds	r3, #36	; 0x24
90002908:	2100      	movs	r1, #0
9000290a:	4618      	mov	r0, r3
9000290c:	f001 f8ca 	bl	90003aa4 <RCCEx_PLL3_Config>
90002910:	4603      	mov	r3, r0
90002912:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
90002914:	e005      	b.n	90002922 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90002916:	2301      	movs	r3, #1
90002918:	75fb      	strb	r3, [r7, #23]
      break;
9000291a:	e002      	b.n	90002922 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
9000291c:	bf00      	nop
9000291e:	e000      	b.n	90002922 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
90002920:	bf00      	nop
    }

    if(ret == HAL_OK)
90002922:	7dfb      	ldrb	r3, [r7, #23]
90002924:	2b00      	cmp	r3, #0
90002926:	d109      	bne.n	9000293c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
90002928:	4b55      	ldr	r3, [pc, #340]	; (90002a80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
9000292a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000292c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
90002930:	687b      	ldr	r3, [r7, #4]
90002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90002934:	4952      	ldr	r1, [pc, #328]	; (90002a80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002936:	4313      	orrs	r3, r2
90002938:	650b      	str	r3, [r1, #80]	; 0x50
9000293a:	e001      	b.n	90002940 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000293c:	7dfb      	ldrb	r3, [r7, #23]
9000293e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
90002940:	687b      	ldr	r3, [r7, #4]
90002942:	681b      	ldr	r3, [r3, #0]
90002944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90002948:	2b00      	cmp	r3, #0
9000294a:	d049      	beq.n	900029e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
9000294c:	687b      	ldr	r3, [r7, #4]
9000294e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90002950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
90002954:	d02e      	beq.n	900029b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
90002956:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000295a:	d828      	bhi.n	900029ae <HAL_RCCEx_PeriphCLKConfig+0x476>
9000295c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
90002960:	d02a      	beq.n	900029b8 <HAL_RCCEx_PeriphCLKConfig+0x480>
90002962:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
90002966:	d822      	bhi.n	900029ae <HAL_RCCEx_PeriphCLKConfig+0x476>
90002968:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
9000296c:	d026      	beq.n	900029bc <HAL_RCCEx_PeriphCLKConfig+0x484>
9000296e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90002972:	d81c      	bhi.n	900029ae <HAL_RCCEx_PeriphCLKConfig+0x476>
90002974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90002978:	d010      	beq.n	9000299c <HAL_RCCEx_PeriphCLKConfig+0x464>
9000297a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000297e:	d816      	bhi.n	900029ae <HAL_RCCEx_PeriphCLKConfig+0x476>
90002980:	2b00      	cmp	r3, #0
90002982:	d01d      	beq.n	900029c0 <HAL_RCCEx_PeriphCLKConfig+0x488>
90002984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90002988:	d111      	bne.n	900029ae <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
9000298a:	687b      	ldr	r3, [r7, #4]
9000298c:	3304      	adds	r3, #4
9000298e:	2101      	movs	r1, #1
90002990:	4618      	mov	r0, r3
90002992:	f000 ffd5 	bl	90003940 <RCCEx_PLL2_Config>
90002996:	4603      	mov	r3, r0
90002998:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
9000299a:	e012      	b.n	900029c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
9000299c:	687b      	ldr	r3, [r7, #4]
9000299e:	3324      	adds	r3, #36	; 0x24
900029a0:	2101      	movs	r1, #1
900029a2:	4618      	mov	r0, r3
900029a4:	f001 f87e 	bl	90003aa4 <RCCEx_PLL3_Config>
900029a8:	4603      	mov	r3, r0
900029aa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
900029ac:	e009      	b.n	900029c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900029ae:	2301      	movs	r3, #1
900029b0:	75fb      	strb	r3, [r7, #23]
      break;
900029b2:	e006      	b.n	900029c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
900029b4:	bf00      	nop
900029b6:	e004      	b.n	900029c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
900029b8:	bf00      	nop
900029ba:	e002      	b.n	900029c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
900029bc:	bf00      	nop
900029be:	e000      	b.n	900029c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
900029c0:	bf00      	nop
    }

    if(ret == HAL_OK)
900029c2:	7dfb      	ldrb	r3, [r7, #23]
900029c4:	2b00      	cmp	r3, #0
900029c6:	d109      	bne.n	900029dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
900029c8:	4b2d      	ldr	r3, [pc, #180]	; (90002a80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
900029ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900029cc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
900029d0:	687b      	ldr	r3, [r7, #4]
900029d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900029d4:	492a      	ldr	r1, [pc, #168]	; (90002a80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
900029d6:	4313      	orrs	r3, r2
900029d8:	650b      	str	r3, [r1, #80]	; 0x50
900029da:	e001      	b.n	900029e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
900029dc:	7dfb      	ldrb	r3, [r7, #23]
900029de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
900029e0:	687b      	ldr	r3, [r7, #4]
900029e2:	681b      	ldr	r3, [r3, #0]
900029e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
900029e8:	2b00      	cmp	r3, #0
900029ea:	d04d      	beq.n	90002a88 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
900029ec:	687b      	ldr	r3, [r7, #4]
900029ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
900029f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
900029f6:	d02e      	beq.n	90002a56 <HAL_RCCEx_PeriphCLKConfig+0x51e>
900029f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
900029fc:	d828      	bhi.n	90002a50 <HAL_RCCEx_PeriphCLKConfig+0x518>
900029fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90002a02:	d02a      	beq.n	90002a5a <HAL_RCCEx_PeriphCLKConfig+0x522>
90002a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90002a08:	d822      	bhi.n	90002a50 <HAL_RCCEx_PeriphCLKConfig+0x518>
90002a0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90002a0e:	d026      	beq.n	90002a5e <HAL_RCCEx_PeriphCLKConfig+0x526>
90002a10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90002a14:	d81c      	bhi.n	90002a50 <HAL_RCCEx_PeriphCLKConfig+0x518>
90002a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90002a1a:	d010      	beq.n	90002a3e <HAL_RCCEx_PeriphCLKConfig+0x506>
90002a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90002a20:	d816      	bhi.n	90002a50 <HAL_RCCEx_PeriphCLKConfig+0x518>
90002a22:	2b00      	cmp	r3, #0
90002a24:	d01d      	beq.n	90002a62 <HAL_RCCEx_PeriphCLKConfig+0x52a>
90002a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90002a2a:	d111      	bne.n	90002a50 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90002a2c:	687b      	ldr	r3, [r7, #4]
90002a2e:	3304      	adds	r3, #4
90002a30:	2101      	movs	r1, #1
90002a32:	4618      	mov	r0, r3
90002a34:	f000 ff84 	bl	90003940 <RCCEx_PLL2_Config>
90002a38:	4603      	mov	r3, r0
90002a3a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
90002a3c:	e012      	b.n	90002a64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90002a3e:	687b      	ldr	r3, [r7, #4]
90002a40:	3324      	adds	r3, #36	; 0x24
90002a42:	2101      	movs	r1, #1
90002a44:	4618      	mov	r0, r3
90002a46:	f001 f82d 	bl	90003aa4 <RCCEx_PLL3_Config>
90002a4a:	4603      	mov	r3, r0
90002a4c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
90002a4e:	e009      	b.n	90002a64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
90002a50:	2301      	movs	r3, #1
90002a52:	75fb      	strb	r3, [r7, #23]
      break;
90002a54:	e006      	b.n	90002a64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
90002a56:	bf00      	nop
90002a58:	e004      	b.n	90002a64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
90002a5a:	bf00      	nop
90002a5c:	e002      	b.n	90002a64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
90002a5e:	bf00      	nop
90002a60:	e000      	b.n	90002a64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
90002a62:	bf00      	nop
    }

    if(ret == HAL_OK)
90002a64:	7dfb      	ldrb	r3, [r7, #23]
90002a66:	2b00      	cmp	r3, #0
90002a68:	d10c      	bne.n	90002a84 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
90002a6a:	4b05      	ldr	r3, [pc, #20]	; (90002a80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90002a6e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
90002a72:	687b      	ldr	r3, [r7, #4]
90002a74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
90002a78:	4901      	ldr	r1, [pc, #4]	; (90002a80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
90002a7a:	4313      	orrs	r3, r2
90002a7c:	658b      	str	r3, [r1, #88]	; 0x58
90002a7e:	e003      	b.n	90002a88 <HAL_RCCEx_PeriphCLKConfig+0x550>
90002a80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90002a84:	7dfb      	ldrb	r3, [r7, #23]
90002a86:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
90002a88:	687b      	ldr	r3, [r7, #4]
90002a8a:	681b      	ldr	r3, [r3, #0]
90002a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
90002a90:	2b00      	cmp	r3, #0
90002a92:	d02f      	beq.n	90002af4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
90002a94:	687b      	ldr	r3, [r7, #4]
90002a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90002a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90002a9c:	d00e      	beq.n	90002abc <HAL_RCCEx_PeriphCLKConfig+0x584>
90002a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90002aa2:	d814      	bhi.n	90002ace <HAL_RCCEx_PeriphCLKConfig+0x596>
90002aa4:	2b00      	cmp	r3, #0
90002aa6:	d015      	beq.n	90002ad4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
90002aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90002aac:	d10f      	bne.n	90002ace <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90002aae:	4baf      	ldr	r3, [pc, #700]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002ab2:	4aae      	ldr	r2, [pc, #696]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90002ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
90002aba:	e00c      	b.n	90002ad6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90002abc:	687b      	ldr	r3, [r7, #4]
90002abe:	3304      	adds	r3, #4
90002ac0:	2101      	movs	r1, #1
90002ac2:	4618      	mov	r0, r3
90002ac4:	f000 ff3c 	bl	90003940 <RCCEx_PLL2_Config>
90002ac8:	4603      	mov	r3, r0
90002aca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
90002acc:	e003      	b.n	90002ad6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90002ace:	2301      	movs	r3, #1
90002ad0:	75fb      	strb	r3, [r7, #23]
      break;
90002ad2:	e000      	b.n	90002ad6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
90002ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
90002ad6:	7dfb      	ldrb	r3, [r7, #23]
90002ad8:	2b00      	cmp	r3, #0
90002ada:	d109      	bne.n	90002af0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
90002adc:	4ba3      	ldr	r3, [pc, #652]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90002ae0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
90002ae4:	687b      	ldr	r3, [r7, #4]
90002ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90002ae8:	49a0      	ldr	r1, [pc, #640]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002aea:	4313      	orrs	r3, r2
90002aec:	650b      	str	r3, [r1, #80]	; 0x50
90002aee:	e001      	b.n	90002af4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
90002af0:	7dfb      	ldrb	r3, [r7, #23]
90002af2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
90002af4:	687b      	ldr	r3, [r7, #4]
90002af6:	681b      	ldr	r3, [r3, #0]
90002af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
90002afc:	2b00      	cmp	r3, #0
90002afe:	d032      	beq.n	90002b66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
90002b00:	687b      	ldr	r3, [r7, #4]
90002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90002b04:	2b03      	cmp	r3, #3
90002b06:	d81b      	bhi.n	90002b40 <HAL_RCCEx_PeriphCLKConfig+0x608>
90002b08:	a201      	add	r2, pc, #4	; (adr r2, 90002b10 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
90002b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90002b0e:	bf00      	nop
90002b10:	90002b47 	.word	0x90002b47
90002b14:	90002b21 	.word	0x90002b21
90002b18:	90002b2f 	.word	0x90002b2f
90002b1c:	90002b47 	.word	0x90002b47
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90002b20:	4b92      	ldr	r3, [pc, #584]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002b24:	4a91      	ldr	r2, [pc, #580]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90002b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
90002b2c:	e00c      	b.n	90002b48 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
90002b2e:	687b      	ldr	r3, [r7, #4]
90002b30:	3304      	adds	r3, #4
90002b32:	2102      	movs	r1, #2
90002b34:	4618      	mov	r0, r3
90002b36:	f000 ff03 	bl	90003940 <RCCEx_PLL2_Config>
90002b3a:	4603      	mov	r3, r0
90002b3c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
90002b3e:	e003      	b.n	90002b48 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
90002b40:	2301      	movs	r3, #1
90002b42:	75fb      	strb	r3, [r7, #23]
      break;
90002b44:	e000      	b.n	90002b48 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
90002b46:	bf00      	nop
    }

    if(ret == HAL_OK)
90002b48:	7dfb      	ldrb	r3, [r7, #23]
90002b4a:	2b00      	cmp	r3, #0
90002b4c:	d109      	bne.n	90002b62 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
90002b4e:	4b87      	ldr	r3, [pc, #540]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90002b52:	f023 0203 	bic.w	r2, r3, #3
90002b56:	687b      	ldr	r3, [r7, #4]
90002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90002b5a:	4984      	ldr	r1, [pc, #528]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002b5c:	4313      	orrs	r3, r2
90002b5e:	64cb      	str	r3, [r1, #76]	; 0x4c
90002b60:	e001      	b.n	90002b66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
90002b62:	7dfb      	ldrb	r3, [r7, #23]
90002b64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
90002b66:	687b      	ldr	r3, [r7, #4]
90002b68:	681b      	ldr	r3, [r3, #0]
90002b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90002b6e:	2b00      	cmp	r3, #0
90002b70:	f000 8086 	beq.w	90002c80 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
90002b74:	4b7e      	ldr	r3, [pc, #504]	; (90002d70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
90002b76:	681b      	ldr	r3, [r3, #0]
90002b78:	4a7d      	ldr	r2, [pc, #500]	; (90002d70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
90002b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90002b7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
90002b80:	f7fe f966 	bl	90000e50 <HAL_GetTick>
90002b84:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
90002b86:	e009      	b.n	90002b9c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90002b88:	f7fe f962 	bl	90000e50 <HAL_GetTick>
90002b8c:	4602      	mov	r2, r0
90002b8e:	693b      	ldr	r3, [r7, #16]
90002b90:	1ad3      	subs	r3, r2, r3
90002b92:	2b64      	cmp	r3, #100	; 0x64
90002b94:	d902      	bls.n	90002b9c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
90002b96:	2303      	movs	r3, #3
90002b98:	75fb      	strb	r3, [r7, #23]
        break;
90002b9a:	e005      	b.n	90002ba8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
90002b9c:	4b74      	ldr	r3, [pc, #464]	; (90002d70 <HAL_RCCEx_PeriphCLKConfig+0x838>)
90002b9e:	681b      	ldr	r3, [r3, #0]
90002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
90002ba4:	2b00      	cmp	r3, #0
90002ba6:	d0ef      	beq.n	90002b88 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
90002ba8:	7dfb      	ldrb	r3, [r7, #23]
90002baa:	2b00      	cmp	r3, #0
90002bac:	d166      	bne.n	90002c7c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
90002bae:	4b6f      	ldr	r3, [pc, #444]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002bb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90002bb2:	687b      	ldr	r3, [r7, #4]
90002bb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90002bb8:	4053      	eors	r3, r2
90002bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
90002bbe:	2b00      	cmp	r3, #0
90002bc0:	d013      	beq.n	90002bea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
90002bc2:	4b6a      	ldr	r3, [pc, #424]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90002bca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
90002bcc:	4b67      	ldr	r3, [pc, #412]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002bd0:	4a66      	ldr	r2, [pc, #408]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90002bd6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
90002bd8:	4b64      	ldr	r3, [pc, #400]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002bdc:	4a63      	ldr	r2, [pc, #396]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
90002be2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
90002be4:	4a61      	ldr	r2, [pc, #388]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002be6:	68fb      	ldr	r3, [r7, #12]
90002be8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
90002bea:	687b      	ldr	r3, [r7, #4]
90002bec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90002bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90002bf4:	d115      	bne.n	90002c22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90002bf6:	f7fe f92b 	bl	90000e50 <HAL_GetTick>
90002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90002bfc:	e00b      	b.n	90002c16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90002bfe:	f7fe f927 	bl	90000e50 <HAL_GetTick>
90002c02:	4602      	mov	r2, r0
90002c04:	693b      	ldr	r3, [r7, #16]
90002c06:	1ad3      	subs	r3, r2, r3
90002c08:	f241 3288 	movw	r2, #5000	; 0x1388
90002c0c:	4293      	cmp	r3, r2
90002c0e:	d902      	bls.n	90002c16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
90002c10:	2303      	movs	r3, #3
90002c12:	75fb      	strb	r3, [r7, #23]
            break;
90002c14:	e005      	b.n	90002c22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
90002c16:	4b55      	ldr	r3, [pc, #340]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90002c1a:	f003 0302 	and.w	r3, r3, #2
90002c1e:	2b00      	cmp	r3, #0
90002c20:	d0ed      	beq.n	90002bfe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
90002c22:	7dfb      	ldrb	r3, [r7, #23]
90002c24:	2b00      	cmp	r3, #0
90002c26:	d126      	bne.n	90002c76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
90002c28:	687b      	ldr	r3, [r7, #4]
90002c2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90002c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
90002c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90002c36:	d10d      	bne.n	90002c54 <HAL_RCCEx_PeriphCLKConfig+0x71c>
90002c38:	4b4c      	ldr	r3, [pc, #304]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002c3a:	691b      	ldr	r3, [r3, #16]
90002c3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
90002c40:	687b      	ldr	r3, [r7, #4]
90002c42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90002c46:	0919      	lsrs	r1, r3, #4
90002c48:	4b4a      	ldr	r3, [pc, #296]	; (90002d74 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
90002c4a:	400b      	ands	r3, r1
90002c4c:	4947      	ldr	r1, [pc, #284]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002c4e:	4313      	orrs	r3, r2
90002c50:	610b      	str	r3, [r1, #16]
90002c52:	e005      	b.n	90002c60 <HAL_RCCEx_PeriphCLKConfig+0x728>
90002c54:	4b45      	ldr	r3, [pc, #276]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002c56:	691b      	ldr	r3, [r3, #16]
90002c58:	4a44      	ldr	r2, [pc, #272]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002c5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
90002c5e:	6113      	str	r3, [r2, #16]
90002c60:	4b42      	ldr	r3, [pc, #264]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002c62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90002c64:	687b      	ldr	r3, [r7, #4]
90002c66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90002c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
90002c6e:	493f      	ldr	r1, [pc, #252]	; (90002d6c <HAL_RCCEx_PeriphCLKConfig+0x834>)
90002c70:	4313      	orrs	r3, r2
90002c72:	670b      	str	r3, [r1, #112]	; 0x70
90002c74:	e004      	b.n	90002c80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
90002c76:	7dfb      	ldrb	r3, [r7, #23]
90002c78:	75bb      	strb	r3, [r7, #22]
90002c7a:	e001      	b.n	90002c80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
90002c7c:	7dfb      	ldrb	r3, [r7, #23]
90002c7e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
90002c80:	687b      	ldr	r3, [r7, #4]
90002c82:	681b      	ldr	r3, [r3, #0]
90002c84:	f003 0301 	and.w	r3, r3, #1
90002c88:	2b00      	cmp	r3, #0
90002c8a:	f000 8085 	beq.w	90002d98 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
90002c8e:	687b      	ldr	r3, [r7, #4]
90002c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90002c92:	2b28      	cmp	r3, #40	; 0x28
90002c94:	d866      	bhi.n	90002d64 <HAL_RCCEx_PeriphCLKConfig+0x82c>
90002c96:	a201      	add	r2, pc, #4	; (adr r2, 90002c9c <HAL_RCCEx_PeriphCLKConfig+0x764>)
90002c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90002c9c:	90002d79 	.word	0x90002d79
90002ca0:	90002d65 	.word	0x90002d65
90002ca4:	90002d65 	.word	0x90002d65
90002ca8:	90002d65 	.word	0x90002d65
90002cac:	90002d65 	.word	0x90002d65
90002cb0:	90002d65 	.word	0x90002d65
90002cb4:	90002d65 	.word	0x90002d65
90002cb8:	90002d65 	.word	0x90002d65
90002cbc:	90002d41 	.word	0x90002d41
90002cc0:	90002d65 	.word	0x90002d65
90002cc4:	90002d65 	.word	0x90002d65
90002cc8:	90002d65 	.word	0x90002d65
90002ccc:	90002d65 	.word	0x90002d65
90002cd0:	90002d65 	.word	0x90002d65
90002cd4:	90002d65 	.word	0x90002d65
90002cd8:	90002d65 	.word	0x90002d65
90002cdc:	90002d53 	.word	0x90002d53
90002ce0:	90002d65 	.word	0x90002d65
90002ce4:	90002d65 	.word	0x90002d65
90002ce8:	90002d65 	.word	0x90002d65
90002cec:	90002d65 	.word	0x90002d65
90002cf0:	90002d65 	.word	0x90002d65
90002cf4:	90002d65 	.word	0x90002d65
90002cf8:	90002d65 	.word	0x90002d65
90002cfc:	90002d79 	.word	0x90002d79
90002d00:	90002d65 	.word	0x90002d65
90002d04:	90002d65 	.word	0x90002d65
90002d08:	90002d65 	.word	0x90002d65
90002d0c:	90002d65 	.word	0x90002d65
90002d10:	90002d65 	.word	0x90002d65
90002d14:	90002d65 	.word	0x90002d65
90002d18:	90002d65 	.word	0x90002d65
90002d1c:	90002d79 	.word	0x90002d79
90002d20:	90002d65 	.word	0x90002d65
90002d24:	90002d65 	.word	0x90002d65
90002d28:	90002d65 	.word	0x90002d65
90002d2c:	90002d65 	.word	0x90002d65
90002d30:	90002d65 	.word	0x90002d65
90002d34:	90002d65 	.word	0x90002d65
90002d38:	90002d65 	.word	0x90002d65
90002d3c:	90002d79 	.word	0x90002d79
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90002d40:	687b      	ldr	r3, [r7, #4]
90002d42:	3304      	adds	r3, #4
90002d44:	2101      	movs	r1, #1
90002d46:	4618      	mov	r0, r3
90002d48:	f000 fdfa 	bl	90003940 <RCCEx_PLL2_Config>
90002d4c:	4603      	mov	r3, r0
90002d4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
90002d50:	e013      	b.n	90002d7a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90002d52:	687b      	ldr	r3, [r7, #4]
90002d54:	3324      	adds	r3, #36	; 0x24
90002d56:	2101      	movs	r1, #1
90002d58:	4618      	mov	r0, r3
90002d5a:	f000 fea3 	bl	90003aa4 <RCCEx_PLL3_Config>
90002d5e:	4603      	mov	r3, r0
90002d60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
90002d62:	e00a      	b.n	90002d7a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90002d64:	2301      	movs	r3, #1
90002d66:	75fb      	strb	r3, [r7, #23]
      break;
90002d68:	e007      	b.n	90002d7a <HAL_RCCEx_PeriphCLKConfig+0x842>
90002d6a:	bf00      	nop
90002d6c:	58024400 	.word	0x58024400
90002d70:	58024800 	.word	0x58024800
90002d74:	00ffffcf 	.word	0x00ffffcf
      break;
90002d78:	bf00      	nop
    }

    if(ret == HAL_OK)
90002d7a:	7dfb      	ldrb	r3, [r7, #23]
90002d7c:	2b00      	cmp	r3, #0
90002d7e:	d109      	bne.n	90002d94 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
90002d80:	4b96      	ldr	r3, [pc, #600]	; (90002fdc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002d84:	f023 0238 	bic.w	r2, r3, #56	; 0x38
90002d88:	687b      	ldr	r3, [r7, #4]
90002d8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90002d8c:	4993      	ldr	r1, [pc, #588]	; (90002fdc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90002d8e:	4313      	orrs	r3, r2
90002d90:	654b      	str	r3, [r1, #84]	; 0x54
90002d92:	e001      	b.n	90002d98 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
90002d94:	7dfb      	ldrb	r3, [r7, #23]
90002d96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
90002d98:	687b      	ldr	r3, [r7, #4]
90002d9a:	681b      	ldr	r3, [r3, #0]
90002d9c:	f003 0302 	and.w	r3, r3, #2
90002da0:	2b00      	cmp	r3, #0
90002da2:	d038      	beq.n	90002e16 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
90002da4:	687b      	ldr	r3, [r7, #4]
90002da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90002da8:	2b05      	cmp	r3, #5
90002daa:	d821      	bhi.n	90002df0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
90002dac:	a201      	add	r2, pc, #4	; (adr r2, 90002db4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
90002dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90002db2:	bf00      	nop
90002db4:	90002df7 	.word	0x90002df7
90002db8:	90002dcd 	.word	0x90002dcd
90002dbc:	90002ddf 	.word	0x90002ddf
90002dc0:	90002df7 	.word	0x90002df7
90002dc4:	90002df7 	.word	0x90002df7
90002dc8:	90002df7 	.word	0x90002df7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90002dcc:	687b      	ldr	r3, [r7, #4]
90002dce:	3304      	adds	r3, #4
90002dd0:	2101      	movs	r1, #1
90002dd2:	4618      	mov	r0, r3
90002dd4:	f000 fdb4 	bl	90003940 <RCCEx_PLL2_Config>
90002dd8:	4603      	mov	r3, r0
90002dda:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
90002ddc:	e00c      	b.n	90002df8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90002dde:	687b      	ldr	r3, [r7, #4]
90002de0:	3324      	adds	r3, #36	; 0x24
90002de2:	2101      	movs	r1, #1
90002de4:	4618      	mov	r0, r3
90002de6:	f000 fe5d 	bl	90003aa4 <RCCEx_PLL3_Config>
90002dea:	4603      	mov	r3, r0
90002dec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
90002dee:	e003      	b.n	90002df8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90002df0:	2301      	movs	r3, #1
90002df2:	75fb      	strb	r3, [r7, #23]
      break;
90002df4:	e000      	b.n	90002df8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
90002df6:	bf00      	nop
    }

    if(ret == HAL_OK)
90002df8:	7dfb      	ldrb	r3, [r7, #23]
90002dfa:	2b00      	cmp	r3, #0
90002dfc:	d109      	bne.n	90002e12 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
90002dfe:	4b77      	ldr	r3, [pc, #476]	; (90002fdc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002e02:	f023 0207 	bic.w	r2, r3, #7
90002e06:	687b      	ldr	r3, [r7, #4]
90002e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90002e0a:	4974      	ldr	r1, [pc, #464]	; (90002fdc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90002e0c:	4313      	orrs	r3, r2
90002e0e:	654b      	str	r3, [r1, #84]	; 0x54
90002e10:	e001      	b.n	90002e16 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
90002e12:	7dfb      	ldrb	r3, [r7, #23]
90002e14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
90002e16:	687b      	ldr	r3, [r7, #4]
90002e18:	681b      	ldr	r3, [r3, #0]
90002e1a:	f003 0304 	and.w	r3, r3, #4
90002e1e:	2b00      	cmp	r3, #0
90002e20:	d03a      	beq.n	90002e98 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
90002e22:	687b      	ldr	r3, [r7, #4]
90002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90002e28:	2b05      	cmp	r3, #5
90002e2a:	d821      	bhi.n	90002e70 <HAL_RCCEx_PeriphCLKConfig+0x938>
90002e2c:	a201      	add	r2, pc, #4	; (adr r2, 90002e34 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
90002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90002e32:	bf00      	nop
90002e34:	90002e77 	.word	0x90002e77
90002e38:	90002e4d 	.word	0x90002e4d
90002e3c:	90002e5f 	.word	0x90002e5f
90002e40:	90002e77 	.word	0x90002e77
90002e44:	90002e77 	.word	0x90002e77
90002e48:	90002e77 	.word	0x90002e77
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
90002e4c:	687b      	ldr	r3, [r7, #4]
90002e4e:	3304      	adds	r3, #4
90002e50:	2101      	movs	r1, #1
90002e52:	4618      	mov	r0, r3
90002e54:	f000 fd74 	bl	90003940 <RCCEx_PLL2_Config>
90002e58:	4603      	mov	r3, r0
90002e5a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
90002e5c:	e00c      	b.n	90002e78 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
90002e5e:	687b      	ldr	r3, [r7, #4]
90002e60:	3324      	adds	r3, #36	; 0x24
90002e62:	2101      	movs	r1, #1
90002e64:	4618      	mov	r0, r3
90002e66:	f000 fe1d 	bl	90003aa4 <RCCEx_PLL3_Config>
90002e6a:	4603      	mov	r3, r0
90002e6c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
90002e6e:	e003      	b.n	90002e78 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90002e70:	2301      	movs	r3, #1
90002e72:	75fb      	strb	r3, [r7, #23]
      break;
90002e74:	e000      	b.n	90002e78 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
90002e76:	bf00      	nop
    }

    if(ret == HAL_OK)
90002e78:	7dfb      	ldrb	r3, [r7, #23]
90002e7a:	2b00      	cmp	r3, #0
90002e7c:	d10a      	bne.n	90002e94 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
90002e7e:	4b57      	ldr	r3, [pc, #348]	; (90002fdc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90002e82:	f023 0207 	bic.w	r2, r3, #7
90002e86:	687b      	ldr	r3, [r7, #4]
90002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90002e8c:	4953      	ldr	r1, [pc, #332]	; (90002fdc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90002e8e:	4313      	orrs	r3, r2
90002e90:	658b      	str	r3, [r1, #88]	; 0x58
90002e92:	e001      	b.n	90002e98 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
90002e94:	7dfb      	ldrb	r3, [r7, #23]
90002e96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
90002e98:	687b      	ldr	r3, [r7, #4]
90002e9a:	681b      	ldr	r3, [r3, #0]
90002e9c:	f003 0320 	and.w	r3, r3, #32
90002ea0:	2b00      	cmp	r3, #0
90002ea2:	d04b      	beq.n	90002f3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
90002ea4:	687b      	ldr	r3, [r7, #4]
90002ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90002eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90002eae:	d02e      	beq.n	90002f0e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
90002eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
90002eb4:	d828      	bhi.n	90002f08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
90002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90002eba:	d02a      	beq.n	90002f12 <HAL_RCCEx_PeriphCLKConfig+0x9da>
90002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90002ec0:	d822      	bhi.n	90002f08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
90002ec2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90002ec6:	d026      	beq.n	90002f16 <HAL_RCCEx_PeriphCLKConfig+0x9de>
90002ec8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
90002ecc:	d81c      	bhi.n	90002f08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
90002ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90002ed2:	d010      	beq.n	90002ef6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
90002ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
90002ed8:	d816      	bhi.n	90002f08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
90002eda:	2b00      	cmp	r3, #0
90002edc:	d01d      	beq.n	90002f1a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
90002ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
90002ee2:	d111      	bne.n	90002f08 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90002ee4:	687b      	ldr	r3, [r7, #4]
90002ee6:	3304      	adds	r3, #4
90002ee8:	2100      	movs	r1, #0
90002eea:	4618      	mov	r0, r3
90002eec:	f000 fd28 	bl	90003940 <RCCEx_PLL2_Config>
90002ef0:	4603      	mov	r3, r0
90002ef2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
90002ef4:	e012      	b.n	90002f1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90002ef6:	687b      	ldr	r3, [r7, #4]
90002ef8:	3324      	adds	r3, #36	; 0x24
90002efa:	2102      	movs	r1, #2
90002efc:	4618      	mov	r0, r3
90002efe:	f000 fdd1 	bl	90003aa4 <RCCEx_PLL3_Config>
90002f02:	4603      	mov	r3, r0
90002f04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
90002f06:	e009      	b.n	90002f1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90002f08:	2301      	movs	r3, #1
90002f0a:	75fb      	strb	r3, [r7, #23]
      break;
90002f0c:	e006      	b.n	90002f1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
90002f0e:	bf00      	nop
90002f10:	e004      	b.n	90002f1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
90002f12:	bf00      	nop
90002f14:	e002      	b.n	90002f1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
90002f16:	bf00      	nop
90002f18:	e000      	b.n	90002f1c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
90002f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
90002f1c:	7dfb      	ldrb	r3, [r7, #23]
90002f1e:	2b00      	cmp	r3, #0
90002f20:	d10a      	bne.n	90002f38 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
90002f22:	4b2e      	ldr	r3, [pc, #184]	; (90002fdc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90002f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002f26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
90002f2a:	687b      	ldr	r3, [r7, #4]
90002f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90002f30:	492a      	ldr	r1, [pc, #168]	; (90002fdc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90002f32:	4313      	orrs	r3, r2
90002f34:	654b      	str	r3, [r1, #84]	; 0x54
90002f36:	e001      	b.n	90002f3c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
90002f38:	7dfb      	ldrb	r3, [r7, #23]
90002f3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
90002f3c:	687b      	ldr	r3, [r7, #4]
90002f3e:	681b      	ldr	r3, [r3, #0]
90002f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
90002f44:	2b00      	cmp	r3, #0
90002f46:	d04d      	beq.n	90002fe4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
90002f48:	687b      	ldr	r3, [r7, #4]
90002f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90002f4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
90002f52:	d02e      	beq.n	90002fb2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
90002f54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
90002f58:	d828      	bhi.n	90002fac <HAL_RCCEx_PeriphCLKConfig+0xa74>
90002f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90002f5e:	d02a      	beq.n	90002fb6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
90002f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90002f64:	d822      	bhi.n	90002fac <HAL_RCCEx_PeriphCLKConfig+0xa74>
90002f66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
90002f6a:	d026      	beq.n	90002fba <HAL_RCCEx_PeriphCLKConfig+0xa82>
90002f6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
90002f70:	d81c      	bhi.n	90002fac <HAL_RCCEx_PeriphCLKConfig+0xa74>
90002f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90002f76:	d010      	beq.n	90002f9a <HAL_RCCEx_PeriphCLKConfig+0xa62>
90002f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90002f7c:	d816      	bhi.n	90002fac <HAL_RCCEx_PeriphCLKConfig+0xa74>
90002f7e:	2b00      	cmp	r3, #0
90002f80:	d01d      	beq.n	90002fbe <HAL_RCCEx_PeriphCLKConfig+0xa86>
90002f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90002f86:	d111      	bne.n	90002fac <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90002f88:	687b      	ldr	r3, [r7, #4]
90002f8a:	3304      	adds	r3, #4
90002f8c:	2100      	movs	r1, #0
90002f8e:	4618      	mov	r0, r3
90002f90:	f000 fcd6 	bl	90003940 <RCCEx_PLL2_Config>
90002f94:	4603      	mov	r3, r0
90002f96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
90002f98:	e012      	b.n	90002fc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90002f9a:	687b      	ldr	r3, [r7, #4]
90002f9c:	3324      	adds	r3, #36	; 0x24
90002f9e:	2102      	movs	r1, #2
90002fa0:	4618      	mov	r0, r3
90002fa2:	f000 fd7f 	bl	90003aa4 <RCCEx_PLL3_Config>
90002fa6:	4603      	mov	r3, r0
90002fa8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
90002faa:	e009      	b.n	90002fc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90002fac:	2301      	movs	r3, #1
90002fae:	75fb      	strb	r3, [r7, #23]
      break;
90002fb0:	e006      	b.n	90002fc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
90002fb2:	bf00      	nop
90002fb4:	e004      	b.n	90002fc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
90002fb6:	bf00      	nop
90002fb8:	e002      	b.n	90002fc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
90002fba:	bf00      	nop
90002fbc:	e000      	b.n	90002fc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
90002fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
90002fc0:	7dfb      	ldrb	r3, [r7, #23]
90002fc2:	2b00      	cmp	r3, #0
90002fc4:	d10c      	bne.n	90002fe0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
90002fc6:	4b05      	ldr	r3, [pc, #20]	; (90002fdc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90002fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90002fca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
90002fce:	687b      	ldr	r3, [r7, #4]
90002fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90002fd4:	4901      	ldr	r1, [pc, #4]	; (90002fdc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
90002fd6:	4313      	orrs	r3, r2
90002fd8:	658b      	str	r3, [r1, #88]	; 0x58
90002fda:	e003      	b.n	90002fe4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
90002fdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
90002fe0:	7dfb      	ldrb	r3, [r7, #23]
90002fe2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
90002fe4:	687b      	ldr	r3, [r7, #4]
90002fe6:	681b      	ldr	r3, [r3, #0]
90002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
90002fec:	2b00      	cmp	r3, #0
90002fee:	d04b      	beq.n	90003088 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
90002ff0:	687b      	ldr	r3, [r7, #4]
90002ff2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90002ff6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
90002ffa:	d02e      	beq.n	9000305a <HAL_RCCEx_PeriphCLKConfig+0xb22>
90002ffc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
90003000:	d828      	bhi.n	90003054 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
90003002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
90003006:	d02a      	beq.n	9000305e <HAL_RCCEx_PeriphCLKConfig+0xb26>
90003008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
9000300c:	d822      	bhi.n	90003054 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
9000300e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
90003012:	d026      	beq.n	90003062 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
90003014:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
90003018:	d81c      	bhi.n	90003054 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
9000301a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
9000301e:	d010      	beq.n	90003042 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
90003020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90003024:	d816      	bhi.n	90003054 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
90003026:	2b00      	cmp	r3, #0
90003028:	d01d      	beq.n	90003066 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
9000302a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000302e:	d111      	bne.n	90003054 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90003030:	687b      	ldr	r3, [r7, #4]
90003032:	3304      	adds	r3, #4
90003034:	2100      	movs	r1, #0
90003036:	4618      	mov	r0, r3
90003038:	f000 fc82 	bl	90003940 <RCCEx_PLL2_Config>
9000303c:	4603      	mov	r3, r0
9000303e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
90003040:	e012      	b.n	90003068 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90003042:	687b      	ldr	r3, [r7, #4]
90003044:	3324      	adds	r3, #36	; 0x24
90003046:	2102      	movs	r1, #2
90003048:	4618      	mov	r0, r3
9000304a:	f000 fd2b 	bl	90003aa4 <RCCEx_PLL3_Config>
9000304e:	4603      	mov	r3, r0
90003050:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
90003052:	e009      	b.n	90003068 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
90003054:	2301      	movs	r3, #1
90003056:	75fb      	strb	r3, [r7, #23]
      break;
90003058:	e006      	b.n	90003068 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
9000305a:	bf00      	nop
9000305c:	e004      	b.n	90003068 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
9000305e:	bf00      	nop
90003060:	e002      	b.n	90003068 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
90003062:	bf00      	nop
90003064:	e000      	b.n	90003068 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
90003066:	bf00      	nop
    }

    if(ret == HAL_OK)
90003068:	7dfb      	ldrb	r3, [r7, #23]
9000306a:	2b00      	cmp	r3, #0
9000306c:	d10a      	bne.n	90003084 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000306e:	4b9d      	ldr	r3, [pc, #628]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90003072:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
90003076:	687b      	ldr	r3, [r7, #4]
90003078:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
9000307c:	4999      	ldr	r1, [pc, #612]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
9000307e:	4313      	orrs	r3, r2
90003080:	658b      	str	r3, [r1, #88]	; 0x58
90003082:	e001      	b.n	90003088 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
90003084:	7dfb      	ldrb	r3, [r7, #23]
90003086:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
90003088:	687b      	ldr	r3, [r7, #4]
9000308a:	681b      	ldr	r3, [r3, #0]
9000308c:	f003 0308 	and.w	r3, r3, #8
90003090:	2b00      	cmp	r3, #0
90003092:	d01a      	beq.n	900030ca <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
90003094:	687b      	ldr	r3, [r7, #4]
90003096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
9000309a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
9000309e:	d10a      	bne.n	900030b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
900030a0:	687b      	ldr	r3, [r7, #4]
900030a2:	3324      	adds	r3, #36	; 0x24
900030a4:	2102      	movs	r1, #2
900030a6:	4618      	mov	r0, r3
900030a8:	f000 fcfc 	bl	90003aa4 <RCCEx_PLL3_Config>
900030ac:	4603      	mov	r3, r0
900030ae:	2b00      	cmp	r3, #0
900030b0:	d001      	beq.n	900030b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
900030b2:	2301      	movs	r3, #1
900030b4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
900030b6:	4b8b      	ldr	r3, [pc, #556]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900030ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
900030be:	687b      	ldr	r3, [r7, #4]
900030c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900030c4:	4987      	ldr	r1, [pc, #540]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900030c6:	4313      	orrs	r3, r2
900030c8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
900030ca:	687b      	ldr	r3, [r7, #4]
900030cc:	681b      	ldr	r3, [r3, #0]
900030ce:	f003 0310 	and.w	r3, r3, #16
900030d2:	2b00      	cmp	r3, #0
900030d4:	d01a      	beq.n	9000310c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
900030d6:	687b      	ldr	r3, [r7, #4]
900030d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
900030dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900030e0:	d10a      	bne.n	900030f8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
900030e2:	687b      	ldr	r3, [r7, #4]
900030e4:	3324      	adds	r3, #36	; 0x24
900030e6:	2102      	movs	r1, #2
900030e8:	4618      	mov	r0, r3
900030ea:	f000 fcdb 	bl	90003aa4 <RCCEx_PLL3_Config>
900030ee:	4603      	mov	r3, r0
900030f0:	2b00      	cmp	r3, #0
900030f2:	d001      	beq.n	900030f8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
900030f4:	2301      	movs	r3, #1
900030f6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
900030f8:	4b7a      	ldr	r3, [pc, #488]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
900030fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
90003100:	687b      	ldr	r3, [r7, #4]
90003102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
90003106:	4977      	ldr	r1, [pc, #476]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003108:	4313      	orrs	r3, r2
9000310a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000310c:	687b      	ldr	r3, [r7, #4]
9000310e:	681b      	ldr	r3, [r3, #0]
90003110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90003114:	2b00      	cmp	r3, #0
90003116:	d034      	beq.n	90003182 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
90003118:	687b      	ldr	r3, [r7, #4]
9000311a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
9000311e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90003122:	d01d      	beq.n	90003160 <HAL_RCCEx_PeriphCLKConfig+0xc28>
90003124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90003128:	d817      	bhi.n	9000315a <HAL_RCCEx_PeriphCLKConfig+0xc22>
9000312a:	2b00      	cmp	r3, #0
9000312c:	d003      	beq.n	90003136 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
9000312e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90003132:	d009      	beq.n	90003148 <HAL_RCCEx_PeriphCLKConfig+0xc10>
90003134:	e011      	b.n	9000315a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
90003136:	687b      	ldr	r3, [r7, #4]
90003138:	3304      	adds	r3, #4
9000313a:	2100      	movs	r1, #0
9000313c:	4618      	mov	r0, r3
9000313e:	f000 fbff 	bl	90003940 <RCCEx_PLL2_Config>
90003142:	4603      	mov	r3, r0
90003144:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
90003146:	e00c      	b.n	90003162 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
90003148:	687b      	ldr	r3, [r7, #4]
9000314a:	3324      	adds	r3, #36	; 0x24
9000314c:	2102      	movs	r1, #2
9000314e:	4618      	mov	r0, r3
90003150:	f000 fca8 	bl	90003aa4 <RCCEx_PLL3_Config>
90003154:	4603      	mov	r3, r0
90003156:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
90003158:	e003      	b.n	90003162 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
9000315a:	2301      	movs	r3, #1
9000315c:	75fb      	strb	r3, [r7, #23]
      break;
9000315e:	e000      	b.n	90003162 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
90003160:	bf00      	nop
    }

    if(ret == HAL_OK)
90003162:	7dfb      	ldrb	r3, [r7, #23]
90003164:	2b00      	cmp	r3, #0
90003166:	d10a      	bne.n	9000317e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
90003168:	4b5e      	ldr	r3, [pc, #376]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
9000316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000316c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
90003170:	687b      	ldr	r3, [r7, #4]
90003172:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
90003176:	495b      	ldr	r1, [pc, #364]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003178:	4313      	orrs	r3, r2
9000317a:	658b      	str	r3, [r1, #88]	; 0x58
9000317c:	e001      	b.n	90003182 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
9000317e:	7dfb      	ldrb	r3, [r7, #23]
90003180:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
90003182:	687b      	ldr	r3, [r7, #4]
90003184:	681b      	ldr	r3, [r3, #0]
90003186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
9000318a:	2b00      	cmp	r3, #0
9000318c:	d033      	beq.n	900031f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
9000318e:	687b      	ldr	r3, [r7, #4]
90003190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90003194:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
90003198:	d01c      	beq.n	900031d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
9000319a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
9000319e:	d816      	bhi.n	900031ce <HAL_RCCEx_PeriphCLKConfig+0xc96>
900031a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900031a4:	d003      	beq.n	900031ae <HAL_RCCEx_PeriphCLKConfig+0xc76>
900031a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
900031aa:	d007      	beq.n	900031bc <HAL_RCCEx_PeriphCLKConfig+0xc84>
900031ac:	e00f      	b.n	900031ce <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900031ae:	4b4d      	ldr	r3, [pc, #308]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900031b2:	4a4c      	ldr	r2, [pc, #304]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900031b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900031b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
900031ba:	e00c      	b.n	900031d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
900031bc:	687b      	ldr	r3, [r7, #4]
900031be:	3324      	adds	r3, #36	; 0x24
900031c0:	2101      	movs	r1, #1
900031c2:	4618      	mov	r0, r3
900031c4:	f000 fc6e 	bl	90003aa4 <RCCEx_PLL3_Config>
900031c8:	4603      	mov	r3, r0
900031ca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
900031cc:	e003      	b.n	900031d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900031ce:	2301      	movs	r3, #1
900031d0:	75fb      	strb	r3, [r7, #23]
      break;
900031d2:	e000      	b.n	900031d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
900031d4:	bf00      	nop
    }

    if(ret == HAL_OK)
900031d6:	7dfb      	ldrb	r3, [r7, #23]
900031d8:	2b00      	cmp	r3, #0
900031da:	d10a      	bne.n	900031f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
900031dc:	4b41      	ldr	r3, [pc, #260]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900031e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
900031e4:	687b      	ldr	r3, [r7, #4]
900031e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900031ea:	493e      	ldr	r1, [pc, #248]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900031ec:	4313      	orrs	r3, r2
900031ee:	654b      	str	r3, [r1, #84]	; 0x54
900031f0:	e001      	b.n	900031f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
900031f2:	7dfb      	ldrb	r3, [r7, #23]
900031f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
900031f6:	687b      	ldr	r3, [r7, #4]
900031f8:	681b      	ldr	r3, [r3, #0]
900031fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900031fe:	2b00      	cmp	r3, #0
90003200:	d029      	beq.n	90003256 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
90003202:	687b      	ldr	r3, [r7, #4]
90003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90003206:	2b00      	cmp	r3, #0
90003208:	d003      	beq.n	90003212 <HAL_RCCEx_PeriphCLKConfig+0xcda>
9000320a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000320e:	d007      	beq.n	90003220 <HAL_RCCEx_PeriphCLKConfig+0xce8>
90003210:	e00f      	b.n	90003232 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
90003212:	4b34      	ldr	r3, [pc, #208]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003216:	4a33      	ldr	r2, [pc, #204]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000321c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
9000321e:	e00b      	b.n	90003238 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
90003220:	687b      	ldr	r3, [r7, #4]
90003222:	3304      	adds	r3, #4
90003224:	2102      	movs	r1, #2
90003226:	4618      	mov	r0, r3
90003228:	f000 fb8a 	bl	90003940 <RCCEx_PLL2_Config>
9000322c:	4603      	mov	r3, r0
9000322e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
90003230:	e002      	b.n	90003238 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
90003232:	2301      	movs	r3, #1
90003234:	75fb      	strb	r3, [r7, #23]
      break;
90003236:	bf00      	nop
    }

    if(ret == HAL_OK)
90003238:	7dfb      	ldrb	r3, [r7, #23]
9000323a:	2b00      	cmp	r3, #0
9000323c:	d109      	bne.n	90003252 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000323e:	4b29      	ldr	r3, [pc, #164]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
90003240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90003242:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
90003246:	687b      	ldr	r3, [r7, #4]
90003248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000324a:	4926      	ldr	r1, [pc, #152]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
9000324c:	4313      	orrs	r3, r2
9000324e:	64cb      	str	r3, [r1, #76]	; 0x4c
90003250:	e001      	b.n	90003256 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
90003252:	7dfb      	ldrb	r3, [r7, #23]
90003254:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
90003256:	687b      	ldr	r3, [r7, #4]
90003258:	681b      	ldr	r3, [r3, #0]
9000325a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
9000325e:	2b00      	cmp	r3, #0
90003260:	d00a      	beq.n	90003278 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
90003262:	687b      	ldr	r3, [r7, #4]
90003264:	3324      	adds	r3, #36	; 0x24
90003266:	2102      	movs	r1, #2
90003268:	4618      	mov	r0, r3
9000326a:	f000 fc1b 	bl	90003aa4 <RCCEx_PLL3_Config>
9000326e:	4603      	mov	r3, r0
90003270:	2b00      	cmp	r3, #0
90003272:	d001      	beq.n	90003278 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
90003274:	2301      	movs	r3, #1
90003276:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
90003278:	687b      	ldr	r3, [r7, #4]
9000327a:	681b      	ldr	r3, [r3, #0]
9000327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90003280:	2b00      	cmp	r3, #0
90003282:	d033      	beq.n	900032ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
90003284:	687b      	ldr	r3, [r7, #4]
90003286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90003288:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
9000328c:	d017      	beq.n	900032be <HAL_RCCEx_PeriphCLKConfig+0xd86>
9000328e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90003292:	d811      	bhi.n	900032b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
90003294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90003298:	d013      	beq.n	900032c2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
9000329a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9000329e:	d80b      	bhi.n	900032b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
900032a0:	2b00      	cmp	r3, #0
900032a2:	d010      	beq.n	900032c6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
900032a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900032a8:	d106      	bne.n	900032b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
900032aa:	4b0e      	ldr	r3, [pc, #56]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900032ae:	4a0d      	ldr	r2, [pc, #52]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900032b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900032b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
900032b6:	e007      	b.n	900032c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
900032b8:	2301      	movs	r3, #1
900032ba:	75fb      	strb	r3, [r7, #23]
      break;
900032bc:	e004      	b.n	900032c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
900032be:	bf00      	nop
900032c0:	e002      	b.n	900032c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
900032c2:	bf00      	nop
900032c4:	e000      	b.n	900032c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
900032c6:	bf00      	nop
    }

    if(ret == HAL_OK)
900032c8:	7dfb      	ldrb	r3, [r7, #23]
900032ca:	2b00      	cmp	r3, #0
900032cc:	d10c      	bne.n	900032e8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
900032ce:	4b05      	ldr	r3, [pc, #20]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900032d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
900032d6:	687b      	ldr	r3, [r7, #4]
900032d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900032da:	4902      	ldr	r1, [pc, #8]	; (900032e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
900032dc:	4313      	orrs	r3, r2
900032de:	654b      	str	r3, [r1, #84]	; 0x54
900032e0:	e004      	b.n	900032ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
900032e2:	bf00      	nop
900032e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
900032e8:	7dfb      	ldrb	r3, [r7, #23]
900032ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
900032ec:	687b      	ldr	r3, [r7, #4]
900032ee:	681b      	ldr	r3, [r3, #0]
900032f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
900032f4:	2b00      	cmp	r3, #0
900032f6:	d008      	beq.n	9000330a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
900032f8:	4b31      	ldr	r3, [pc, #196]	; (900033c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
900032fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900032fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
90003300:	687b      	ldr	r3, [r7, #4]
90003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003304:	492e      	ldr	r1, [pc, #184]	; (900033c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90003306:	4313      	orrs	r3, r2
90003308:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000330a:	687b      	ldr	r3, [r7, #4]
9000330c:	681b      	ldr	r3, [r3, #0]
9000330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90003312:	2b00      	cmp	r3, #0
90003314:	d009      	beq.n	9000332a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
90003316:	4b2a      	ldr	r3, [pc, #168]	; (900033c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90003318:	691b      	ldr	r3, [r3, #16]
9000331a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
9000331e:	687b      	ldr	r3, [r7, #4]
90003320:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90003324:	4926      	ldr	r1, [pc, #152]	; (900033c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90003326:	4313      	orrs	r3, r2
90003328:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000332a:	687b      	ldr	r3, [r7, #4]
9000332c:	681b      	ldr	r3, [r3, #0]
9000332e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90003332:	2b00      	cmp	r3, #0
90003334:	d008      	beq.n	90003348 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
90003336:	4b22      	ldr	r3, [pc, #136]	; (900033c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90003338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000333a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
9000333e:	687b      	ldr	r3, [r7, #4]
90003340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90003342:	491f      	ldr	r1, [pc, #124]	; (900033c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90003344:	4313      	orrs	r3, r2
90003346:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
90003348:	687b      	ldr	r3, [r7, #4]
9000334a:	681b      	ldr	r3, [r3, #0]
9000334c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
90003350:	2b00      	cmp	r3, #0
90003352:	d00d      	beq.n	90003370 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
90003354:	4b1a      	ldr	r3, [pc, #104]	; (900033c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90003356:	691b      	ldr	r3, [r3, #16]
90003358:	4a19      	ldr	r2, [pc, #100]	; (900033c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
9000335a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
9000335e:	6113      	str	r3, [r2, #16]
90003360:	4b17      	ldr	r3, [pc, #92]	; (900033c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90003362:	691a      	ldr	r2, [r3, #16]
90003364:	687b      	ldr	r3, [r7, #4]
90003366:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
9000336a:	4915      	ldr	r1, [pc, #84]	; (900033c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
9000336c:	4313      	orrs	r3, r2
9000336e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
90003370:	687b      	ldr	r3, [r7, #4]
90003372:	681b      	ldr	r3, [r3, #0]
90003374:	2b00      	cmp	r3, #0
90003376:	da08      	bge.n	9000338a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
90003378:	4b11      	ldr	r3, [pc, #68]	; (900033c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
9000337a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9000337c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
90003380:	687b      	ldr	r3, [r7, #4]
90003382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90003384:	490e      	ldr	r1, [pc, #56]	; (900033c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90003386:	4313      	orrs	r3, r2
90003388:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000338a:	687b      	ldr	r3, [r7, #4]
9000338c:	681b      	ldr	r3, [r3, #0]
9000338e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
90003392:	2b00      	cmp	r3, #0
90003394:	d009      	beq.n	900033aa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
90003396:	4b0a      	ldr	r3, [pc, #40]	; (900033c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
90003398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000339a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
9000339e:	687b      	ldr	r3, [r7, #4]
900033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900033a4:	4906      	ldr	r1, [pc, #24]	; (900033c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
900033a6:	4313      	orrs	r3, r2
900033a8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
900033aa:	7dbb      	ldrb	r3, [r7, #22]
900033ac:	2b00      	cmp	r3, #0
900033ae:	d101      	bne.n	900033b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
900033b0:	2300      	movs	r3, #0
900033b2:	e000      	b.n	900033b6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
900033b4:	2301      	movs	r3, #1
}
900033b6:	4618      	mov	r0, r3
900033b8:	3718      	adds	r7, #24
900033ba:	46bd      	mov	sp, r7
900033bc:	bd80      	pop	{r7, pc}
900033be:	bf00      	nop
900033c0:	58024400 	.word	0x58024400

900033c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
900033c4:	b580      	push	{r7, lr}
900033c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
900033c8:	f7ff f85a 	bl	90002480 <HAL_RCC_GetHCLKFreq>
900033cc:	4602      	mov	r2, r0
900033ce:	4b06      	ldr	r3, [pc, #24]	; (900033e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
900033d0:	6a1b      	ldr	r3, [r3, #32]
900033d2:	091b      	lsrs	r3, r3, #4
900033d4:	f003 0307 	and.w	r3, r3, #7
900033d8:	4904      	ldr	r1, [pc, #16]	; (900033ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
900033da:	5ccb      	ldrb	r3, [r1, r3]
900033dc:	f003 031f 	and.w	r3, r3, #31
900033e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
900033e4:	4618      	mov	r0, r3
900033e6:	bd80      	pop	{r7, pc}
900033e8:	58024400 	.word	0x58024400
900033ec:	900058b0 	.word	0x900058b0

900033f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
900033f0:	b480      	push	{r7}
900033f2:	b089      	sub	sp, #36	; 0x24
900033f4:	af00      	add	r7, sp, #0
900033f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900033f8:	4ba1      	ldr	r3, [pc, #644]	; (90003680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900033fc:	f003 0303 	and.w	r3, r3, #3
90003400:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
90003402:	4b9f      	ldr	r3, [pc, #636]	; (90003680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003406:	0b1b      	lsrs	r3, r3, #12
90003408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000340c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
9000340e:	4b9c      	ldr	r3, [pc, #624]	; (90003680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003412:	091b      	lsrs	r3, r3, #4
90003414:	f003 0301 	and.w	r3, r3, #1
90003418:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
9000341a:	4b99      	ldr	r3, [pc, #612]	; (90003680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000341e:	08db      	lsrs	r3, r3, #3
90003420:	f3c3 030c 	ubfx	r3, r3, #0, #13
90003424:	693a      	ldr	r2, [r7, #16]
90003426:	fb02 f303 	mul.w	r3, r2, r3
9000342a:	ee07 3a90 	vmov	s15, r3
9000342e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003432:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
90003436:	697b      	ldr	r3, [r7, #20]
90003438:	2b00      	cmp	r3, #0
9000343a:	f000 8111 	beq.w	90003660 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
9000343e:	69bb      	ldr	r3, [r7, #24]
90003440:	2b02      	cmp	r3, #2
90003442:	f000 8083 	beq.w	9000354c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
90003446:	69bb      	ldr	r3, [r7, #24]
90003448:	2b02      	cmp	r3, #2
9000344a:	f200 80a1 	bhi.w	90003590 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
9000344e:	69bb      	ldr	r3, [r7, #24]
90003450:	2b00      	cmp	r3, #0
90003452:	d003      	beq.n	9000345c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
90003454:	69bb      	ldr	r3, [r7, #24]
90003456:	2b01      	cmp	r3, #1
90003458:	d056      	beq.n	90003508 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
9000345a:	e099      	b.n	90003590 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000345c:	4b88      	ldr	r3, [pc, #544]	; (90003680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000345e:	681b      	ldr	r3, [r3, #0]
90003460:	f003 0320 	and.w	r3, r3, #32
90003464:	2b00      	cmp	r3, #0
90003466:	d02d      	beq.n	900034c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90003468:	4b85      	ldr	r3, [pc, #532]	; (90003680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000346a:	681b      	ldr	r3, [r3, #0]
9000346c:	08db      	lsrs	r3, r3, #3
9000346e:	f003 0303 	and.w	r3, r3, #3
90003472:	4a84      	ldr	r2, [pc, #528]	; (90003684 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
90003474:	fa22 f303 	lsr.w	r3, r2, r3
90003478:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
9000347a:	68bb      	ldr	r3, [r7, #8]
9000347c:	ee07 3a90 	vmov	s15, r3
90003480:	eef8 6a67 	vcvt.f32.u32	s13, s15
90003484:	697b      	ldr	r3, [r7, #20]
90003486:	ee07 3a90 	vmov	s15, r3
9000348a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000348e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90003492:	4b7b      	ldr	r3, [pc, #492]	; (90003680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90003496:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000349a:	ee07 3a90 	vmov	s15, r3
9000349e:	eef8 6a67 	vcvt.f32.u32	s13, s15
900034a2:	ed97 6a03 	vldr	s12, [r7, #12]
900034a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 90003688 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900034aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
900034ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
900034b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900034b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900034ba:	ee67 7a27 	vmul.f32	s15, s14, s15
900034be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
900034c2:	e087      	b.n	900035d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
900034c4:	697b      	ldr	r3, [r7, #20]
900034c6:	ee07 3a90 	vmov	s15, r3
900034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
900034ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 9000368c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
900034d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900034d6:	4b6a      	ldr	r3, [pc, #424]	; (90003680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900034da:	f3c3 0308 	ubfx	r3, r3, #0, #9
900034de:	ee07 3a90 	vmov	s15, r3
900034e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
900034e6:	ed97 6a03 	vldr	s12, [r7, #12]
900034ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 90003688 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900034ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
900034f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
900034f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900034fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
900034fe:	ee67 7a27 	vmul.f32	s15, s14, s15
90003502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90003506:	e065      	b.n	900035d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
90003508:	697b      	ldr	r3, [r7, #20]
9000350a:	ee07 3a90 	vmov	s15, r3
9000350e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003512:	eddf 6a5f 	vldr	s13, [pc, #380]	; 90003690 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
90003516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000351a:	4b59      	ldr	r3, [pc, #356]	; (90003680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
9000351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000351e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90003522:	ee07 3a90 	vmov	s15, r3
90003526:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000352a:	ed97 6a03 	vldr	s12, [r7, #12]
9000352e:	eddf 5a56 	vldr	s11, [pc, #344]	; 90003688 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90003532:	eec6 7a25 	vdiv.f32	s15, s12, s11
90003536:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000353a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000353e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90003542:	ee67 7a27 	vmul.f32	s15, s14, s15
90003546:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
9000354a:	e043      	b.n	900035d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
9000354c:	697b      	ldr	r3, [r7, #20]
9000354e:	ee07 3a90 	vmov	s15, r3
90003552:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003556:	eddf 6a4f 	vldr	s13, [pc, #316]	; 90003694 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
9000355a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000355e:	4b48      	ldr	r3, [pc, #288]	; (90003680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90003562:	f3c3 0308 	ubfx	r3, r3, #0, #9
90003566:	ee07 3a90 	vmov	s15, r3
9000356a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000356e:	ed97 6a03 	vldr	s12, [r7, #12]
90003572:	eddf 5a45 	vldr	s11, [pc, #276]	; 90003688 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
90003576:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000357a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000357e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90003582:	ee77 7aa6 	vadd.f32	s15, s15, s13
90003586:	ee67 7a27 	vmul.f32	s15, s14, s15
9000358a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
9000358e:	e021      	b.n	900035d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
90003590:	697b      	ldr	r3, [r7, #20]
90003592:	ee07 3a90 	vmov	s15, r3
90003596:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000359a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 90003690 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
9000359e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900035a2:	4b37      	ldr	r3, [pc, #220]	; (90003680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900035a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900035aa:	ee07 3a90 	vmov	s15, r3
900035ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
900035b2:	ed97 6a03 	vldr	s12, [r7, #12]
900035b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 90003688 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
900035ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
900035be:	ee76 7aa7 	vadd.f32	s15, s13, s15
900035c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900035c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900035ca:	ee67 7a27 	vmul.f32	s15, s14, s15
900035ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
900035d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
900035d4:	4b2a      	ldr	r3, [pc, #168]	; (90003680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
900035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900035d8:	0a5b      	lsrs	r3, r3, #9
900035da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900035de:	ee07 3a90 	vmov	s15, r3
900035e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
900035e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900035ea:	ee37 7a87 	vadd.f32	s14, s15, s14
900035ee:	edd7 6a07 	vldr	s13, [r7, #28]
900035f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
900035f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900035fa:	ee17 2a90 	vmov	r2, s15
900035fe:	687b      	ldr	r3, [r7, #4]
90003600:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
90003602:	4b1f      	ldr	r3, [pc, #124]	; (90003680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90003606:	0c1b      	lsrs	r3, r3, #16
90003608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000360c:	ee07 3a90 	vmov	s15, r3
90003610:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90003618:	ee37 7a87 	vadd.f32	s14, s15, s14
9000361c:	edd7 6a07 	vldr	s13, [r7, #28]
90003620:	eec6 7a87 	vdiv.f32	s15, s13, s14
90003624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90003628:	ee17 2a90 	vmov	r2, s15
9000362c:	687b      	ldr	r3, [r7, #4]
9000362e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
90003630:	4b13      	ldr	r3, [pc, #76]	; (90003680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
90003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90003634:	0e1b      	lsrs	r3, r3, #24
90003636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
9000363a:	ee07 3a90 	vmov	s15, r3
9000363e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003642:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90003646:	ee37 7a87 	vadd.f32	s14, s15, s14
9000364a:	edd7 6a07 	vldr	s13, [r7, #28]
9000364e:	eec6 7a87 	vdiv.f32	s15, s13, s14
90003652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
90003656:	ee17 2a90 	vmov	r2, s15
9000365a:	687b      	ldr	r3, [r7, #4]
9000365c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
9000365e:	e008      	b.n	90003672 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
90003660:	687b      	ldr	r3, [r7, #4]
90003662:	2200      	movs	r2, #0
90003664:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
90003666:	687b      	ldr	r3, [r7, #4]
90003668:	2200      	movs	r2, #0
9000366a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
9000366c:	687b      	ldr	r3, [r7, #4]
9000366e:	2200      	movs	r2, #0
90003670:	609a      	str	r2, [r3, #8]
}
90003672:	bf00      	nop
90003674:	3724      	adds	r7, #36	; 0x24
90003676:	46bd      	mov	sp, r7
90003678:	f85d 7b04 	ldr.w	r7, [sp], #4
9000367c:	4770      	bx	lr
9000367e:	bf00      	nop
90003680:	58024400 	.word	0x58024400
90003684:	03d09000 	.word	0x03d09000
90003688:	46000000 	.word	0x46000000
9000368c:	4c742400 	.word	0x4c742400
90003690:	4a742400 	.word	0x4a742400
90003694:	4bbebc20 	.word	0x4bbebc20

90003698 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
90003698:	b480      	push	{r7}
9000369a:	b089      	sub	sp, #36	; 0x24
9000369c:	af00      	add	r7, sp, #0
9000369e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900036a0:	4ba1      	ldr	r3, [pc, #644]	; (90003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900036a4:	f003 0303 	and.w	r3, r3, #3
900036a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
900036aa:	4b9f      	ldr	r3, [pc, #636]	; (90003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900036ae:	0d1b      	lsrs	r3, r3, #20
900036b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
900036b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
900036b6:	4b9c      	ldr	r3, [pc, #624]	; (90003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900036ba:	0a1b      	lsrs	r3, r3, #8
900036bc:	f003 0301 	and.w	r3, r3, #1
900036c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
900036c2:	4b99      	ldr	r3, [pc, #612]	; (90003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900036c6:	08db      	lsrs	r3, r3, #3
900036c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
900036cc:	693a      	ldr	r2, [r7, #16]
900036ce:	fb02 f303 	mul.w	r3, r2, r3
900036d2:	ee07 3a90 	vmov	s15, r3
900036d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900036da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
900036de:	697b      	ldr	r3, [r7, #20]
900036e0:	2b00      	cmp	r3, #0
900036e2:	f000 8111 	beq.w	90003908 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
900036e6:	69bb      	ldr	r3, [r7, #24]
900036e8:	2b02      	cmp	r3, #2
900036ea:	f000 8083 	beq.w	900037f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
900036ee:	69bb      	ldr	r3, [r7, #24]
900036f0:	2b02      	cmp	r3, #2
900036f2:	f200 80a1 	bhi.w	90003838 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
900036f6:	69bb      	ldr	r3, [r7, #24]
900036f8:	2b00      	cmp	r3, #0
900036fa:	d003      	beq.n	90003704 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
900036fc:	69bb      	ldr	r3, [r7, #24]
900036fe:	2b01      	cmp	r3, #1
90003700:	d056      	beq.n	900037b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
90003702:	e099      	b.n	90003838 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90003704:	4b88      	ldr	r3, [pc, #544]	; (90003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90003706:	681b      	ldr	r3, [r3, #0]
90003708:	f003 0320 	and.w	r3, r3, #32
9000370c:	2b00      	cmp	r3, #0
9000370e:	d02d      	beq.n	9000376c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90003710:	4b85      	ldr	r3, [pc, #532]	; (90003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90003712:	681b      	ldr	r3, [r3, #0]
90003714:	08db      	lsrs	r3, r3, #3
90003716:	f003 0303 	and.w	r3, r3, #3
9000371a:	4a84      	ldr	r2, [pc, #528]	; (9000392c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
9000371c:	fa22 f303 	lsr.w	r3, r2, r3
90003720:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
90003722:	68bb      	ldr	r3, [r7, #8]
90003724:	ee07 3a90 	vmov	s15, r3
90003728:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000372c:	697b      	ldr	r3, [r7, #20]
9000372e:	ee07 3a90 	vmov	s15, r3
90003732:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000373a:	4b7b      	ldr	r3, [pc, #492]	; (90003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000373e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90003742:	ee07 3a90 	vmov	s15, r3
90003746:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000374a:	ed97 6a03 	vldr	s12, [r7, #12]
9000374e:	eddf 5a78 	vldr	s11, [pc, #480]	; 90003930 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90003752:	eec6 7a25 	vdiv.f32	s15, s12, s11
90003756:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000375a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000375e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90003762:	ee67 7a27 	vmul.f32	s15, s14, s15
90003766:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
9000376a:	e087      	b.n	9000387c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
9000376c:	697b      	ldr	r3, [r7, #20]
9000376e:	ee07 3a90 	vmov	s15, r3
90003772:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003776:	eddf 6a6f 	vldr	s13, [pc, #444]	; 90003934 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
9000377a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000377e:	4b6a      	ldr	r3, [pc, #424]	; (90003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003782:	f3c3 0308 	ubfx	r3, r3, #0, #9
90003786:	ee07 3a90 	vmov	s15, r3
9000378a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000378e:	ed97 6a03 	vldr	s12, [r7, #12]
90003792:	eddf 5a67 	vldr	s11, [pc, #412]	; 90003930 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90003796:	eec6 7a25 	vdiv.f32	s15, s12, s11
9000379a:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000379e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900037a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900037a6:	ee67 7a27 	vmul.f32	s15, s14, s15
900037aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
900037ae:	e065      	b.n	9000387c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
900037b0:	697b      	ldr	r3, [r7, #20]
900037b2:	ee07 3a90 	vmov	s15, r3
900037b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900037ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 90003938 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
900037be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900037c2:	4b59      	ldr	r3, [pc, #356]	; (90003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900037c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900037ca:	ee07 3a90 	vmov	s15, r3
900037ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
900037d2:	ed97 6a03 	vldr	s12, [r7, #12]
900037d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 90003930 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
900037da:	eec6 7a25 	vdiv.f32	s15, s12, s11
900037de:	ee76 7aa7 	vadd.f32	s15, s13, s15
900037e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900037e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900037ea:	ee67 7a27 	vmul.f32	s15, s14, s15
900037ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
900037f2:	e043      	b.n	9000387c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
900037f4:	697b      	ldr	r3, [r7, #20]
900037f6:	ee07 3a90 	vmov	s15, r3
900037fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
900037fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 9000393c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
90003802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90003806:	4b48      	ldr	r3, [pc, #288]	; (90003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
90003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000380a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000380e:	ee07 3a90 	vmov	s15, r3
90003812:	eef8 6a67 	vcvt.f32.u32	s13, s15
90003816:	ed97 6a03 	vldr	s12, [r7, #12]
9000381a:	eddf 5a45 	vldr	s11, [pc, #276]	; 90003930 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
9000381e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90003822:	ee76 7aa7 	vadd.f32	s15, s13, s15
90003826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000382a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000382e:	ee67 7a27 	vmul.f32	s15, s14, s15
90003832:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
90003836:	e021      	b.n	9000387c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
90003838:	697b      	ldr	r3, [r7, #20]
9000383a:	ee07 3a90 	vmov	s15, r3
9000383e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90003842:	eddf 6a3d 	vldr	s13, [pc, #244]	; 90003938 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
90003846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000384a:	4b37      	ldr	r3, [pc, #220]	; (90003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000384e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90003852:	ee07 3a90 	vmov	s15, r3
90003856:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000385a:	ed97 6a03 	vldr	s12, [r7, #12]
9000385e:	eddf 5a34 	vldr	s11, [pc, #208]	; 90003930 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
90003862:	eec6 7a25 	vdiv.f32	s15, s12, s11
90003866:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000386a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000386e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90003872:	ee67 7a27 	vmul.f32	s15, s14, s15
90003876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
9000387a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
9000387c:	4b2a      	ldr	r3, [pc, #168]	; (90003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
9000387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90003880:	0a5b      	lsrs	r3, r3, #9
90003882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90003886:	ee07 3a90 	vmov	s15, r3
9000388a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000388e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90003892:	ee37 7a87 	vadd.f32	s14, s15, s14
90003896:	edd7 6a07 	vldr	s13, [r7, #28]
9000389a:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000389e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900038a2:	ee17 2a90 	vmov	r2, s15
900038a6:	687b      	ldr	r3, [r7, #4]
900038a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
900038aa:	4b1f      	ldr	r3, [pc, #124]	; (90003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900038ae:	0c1b      	lsrs	r3, r3, #16
900038b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900038b4:	ee07 3a90 	vmov	s15, r3
900038b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
900038bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900038c0:	ee37 7a87 	vadd.f32	s14, s15, s14
900038c4:	edd7 6a07 	vldr	s13, [r7, #28]
900038c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
900038cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900038d0:	ee17 2a90 	vmov	r2, s15
900038d4:	687b      	ldr	r3, [r7, #4]
900038d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
900038d8:	4b13      	ldr	r3, [pc, #76]	; (90003928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
900038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900038dc:	0e1b      	lsrs	r3, r3, #24
900038de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
900038e2:	ee07 3a90 	vmov	s15, r3
900038e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900038ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900038ee:	ee37 7a87 	vadd.f32	s14, s15, s14
900038f2:	edd7 6a07 	vldr	s13, [r7, #28]
900038f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
900038fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900038fe:	ee17 2a90 	vmov	r2, s15
90003902:	687b      	ldr	r3, [r7, #4]
90003904:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
90003906:	e008      	b.n	9000391a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
90003908:	687b      	ldr	r3, [r7, #4]
9000390a:	2200      	movs	r2, #0
9000390c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
9000390e:	687b      	ldr	r3, [r7, #4]
90003910:	2200      	movs	r2, #0
90003912:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
90003914:	687b      	ldr	r3, [r7, #4]
90003916:	2200      	movs	r2, #0
90003918:	609a      	str	r2, [r3, #8]
}
9000391a:	bf00      	nop
9000391c:	3724      	adds	r7, #36	; 0x24
9000391e:	46bd      	mov	sp, r7
90003920:	f85d 7b04 	ldr.w	r7, [sp], #4
90003924:	4770      	bx	lr
90003926:	bf00      	nop
90003928:	58024400 	.word	0x58024400
9000392c:	03d09000 	.word	0x03d09000
90003930:	46000000 	.word	0x46000000
90003934:	4c742400 	.word	0x4c742400
90003938:	4a742400 	.word	0x4a742400
9000393c:	4bbebc20 	.word	0x4bbebc20

90003940 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
90003940:	b580      	push	{r7, lr}
90003942:	b084      	sub	sp, #16
90003944:	af00      	add	r7, sp, #0
90003946:	6078      	str	r0, [r7, #4]
90003948:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
9000394a:	2300      	movs	r3, #0
9000394c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000394e:	4b53      	ldr	r3, [pc, #332]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003952:	f003 0303 	and.w	r3, r3, #3
90003956:	2b03      	cmp	r3, #3
90003958:	d101      	bne.n	9000395e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
9000395a:	2301      	movs	r3, #1
9000395c:	e099      	b.n	90003a92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000395e:	4b4f      	ldr	r3, [pc, #316]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003960:	681b      	ldr	r3, [r3, #0]
90003962:	4a4e      	ldr	r2, [pc, #312]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003964:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
90003968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000396a:	f7fd fa71 	bl	90000e50 <HAL_GetTick>
9000396e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90003970:	e008      	b.n	90003984 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
90003972:	f7fd fa6d 	bl	90000e50 <HAL_GetTick>
90003976:	4602      	mov	r2, r0
90003978:	68bb      	ldr	r3, [r7, #8]
9000397a:	1ad3      	subs	r3, r2, r3
9000397c:	2b02      	cmp	r3, #2
9000397e:	d901      	bls.n	90003984 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
90003980:	2303      	movs	r3, #3
90003982:	e086      	b.n	90003a92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
90003984:	4b45      	ldr	r3, [pc, #276]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003986:	681b      	ldr	r3, [r3, #0]
90003988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
9000398c:	2b00      	cmp	r3, #0
9000398e:	d1f0      	bne.n	90003972 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
90003990:	4b42      	ldr	r3, [pc, #264]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003994:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
90003998:	687b      	ldr	r3, [r7, #4]
9000399a:	681b      	ldr	r3, [r3, #0]
9000399c:	031b      	lsls	r3, r3, #12
9000399e:	493f      	ldr	r1, [pc, #252]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
900039a0:	4313      	orrs	r3, r2
900039a2:	628b      	str	r3, [r1, #40]	; 0x28
900039a4:	687b      	ldr	r3, [r7, #4]
900039a6:	685b      	ldr	r3, [r3, #4]
900039a8:	3b01      	subs	r3, #1
900039aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
900039ae:	687b      	ldr	r3, [r7, #4]
900039b0:	689b      	ldr	r3, [r3, #8]
900039b2:	3b01      	subs	r3, #1
900039b4:	025b      	lsls	r3, r3, #9
900039b6:	b29b      	uxth	r3, r3
900039b8:	431a      	orrs	r2, r3
900039ba:	687b      	ldr	r3, [r7, #4]
900039bc:	68db      	ldr	r3, [r3, #12]
900039be:	3b01      	subs	r3, #1
900039c0:	041b      	lsls	r3, r3, #16
900039c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
900039c6:	431a      	orrs	r2, r3
900039c8:	687b      	ldr	r3, [r7, #4]
900039ca:	691b      	ldr	r3, [r3, #16]
900039cc:	3b01      	subs	r3, #1
900039ce:	061b      	lsls	r3, r3, #24
900039d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
900039d4:	4931      	ldr	r1, [pc, #196]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
900039d6:	4313      	orrs	r3, r2
900039d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
900039da:	4b30      	ldr	r3, [pc, #192]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
900039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900039de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
900039e2:	687b      	ldr	r3, [r7, #4]
900039e4:	695b      	ldr	r3, [r3, #20]
900039e6:	492d      	ldr	r1, [pc, #180]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
900039e8:	4313      	orrs	r3, r2
900039ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
900039ec:	4b2b      	ldr	r3, [pc, #172]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
900039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900039f0:	f023 0220 	bic.w	r2, r3, #32
900039f4:	687b      	ldr	r3, [r7, #4]
900039f6:	699b      	ldr	r3, [r3, #24]
900039f8:	4928      	ldr	r1, [pc, #160]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
900039fa:	4313      	orrs	r3, r2
900039fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
900039fe:	4b27      	ldr	r3, [pc, #156]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003a02:	4a26      	ldr	r2, [pc, #152]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003a04:	f023 0310 	bic.w	r3, r3, #16
90003a08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
90003a0a:	4b24      	ldr	r3, [pc, #144]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90003a0e:	4b24      	ldr	r3, [pc, #144]	; (90003aa0 <RCCEx_PLL2_Config+0x160>)
90003a10:	4013      	ands	r3, r2
90003a12:	687a      	ldr	r2, [r7, #4]
90003a14:	69d2      	ldr	r2, [r2, #28]
90003a16:	00d2      	lsls	r2, r2, #3
90003a18:	4920      	ldr	r1, [pc, #128]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003a1a:	4313      	orrs	r3, r2
90003a1c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
90003a1e:	4b1f      	ldr	r3, [pc, #124]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003a22:	4a1e      	ldr	r2, [pc, #120]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003a24:	f043 0310 	orr.w	r3, r3, #16
90003a28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
90003a2a:	683b      	ldr	r3, [r7, #0]
90003a2c:	2b00      	cmp	r3, #0
90003a2e:	d106      	bne.n	90003a3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
90003a30:	4b1a      	ldr	r3, [pc, #104]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003a34:	4a19      	ldr	r2, [pc, #100]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003a36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
90003a3a:	62d3      	str	r3, [r2, #44]	; 0x2c
90003a3c:	e00f      	b.n	90003a5e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
90003a3e:	683b      	ldr	r3, [r7, #0]
90003a40:	2b01      	cmp	r3, #1
90003a42:	d106      	bne.n	90003a52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
90003a44:	4b15      	ldr	r3, [pc, #84]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003a48:	4a14      	ldr	r2, [pc, #80]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
90003a4e:	62d3      	str	r3, [r2, #44]	; 0x2c
90003a50:	e005      	b.n	90003a5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
90003a52:	4b12      	ldr	r3, [pc, #72]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003a56:	4a11      	ldr	r2, [pc, #68]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003a58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
90003a5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
90003a5e:	4b0f      	ldr	r3, [pc, #60]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003a60:	681b      	ldr	r3, [r3, #0]
90003a62:	4a0e      	ldr	r2, [pc, #56]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003a64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
90003a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003a6a:	f7fd f9f1 	bl	90000e50 <HAL_GetTick>
90003a6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90003a70:	e008      	b.n	90003a84 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
90003a72:	f7fd f9ed 	bl	90000e50 <HAL_GetTick>
90003a76:	4602      	mov	r2, r0
90003a78:	68bb      	ldr	r3, [r7, #8]
90003a7a:	1ad3      	subs	r3, r2, r3
90003a7c:	2b02      	cmp	r3, #2
90003a7e:	d901      	bls.n	90003a84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
90003a80:	2303      	movs	r3, #3
90003a82:	e006      	b.n	90003a92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
90003a84:	4b05      	ldr	r3, [pc, #20]	; (90003a9c <RCCEx_PLL2_Config+0x15c>)
90003a86:	681b      	ldr	r3, [r3, #0]
90003a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90003a8c:	2b00      	cmp	r3, #0
90003a8e:	d0f0      	beq.n	90003a72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
90003a90:	7bfb      	ldrb	r3, [r7, #15]
}
90003a92:	4618      	mov	r0, r3
90003a94:	3710      	adds	r7, #16
90003a96:	46bd      	mov	sp, r7
90003a98:	bd80      	pop	{r7, pc}
90003a9a:	bf00      	nop
90003a9c:	58024400 	.word	0x58024400
90003aa0:	ffff0007 	.word	0xffff0007

90003aa4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
90003aa4:	b580      	push	{r7, lr}
90003aa6:	b084      	sub	sp, #16
90003aa8:	af00      	add	r7, sp, #0
90003aaa:	6078      	str	r0, [r7, #4]
90003aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
90003aae:	2300      	movs	r3, #0
90003ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
90003ab2:	4b53      	ldr	r3, [pc, #332]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003ab6:	f003 0303 	and.w	r3, r3, #3
90003aba:	2b03      	cmp	r3, #3
90003abc:	d101      	bne.n	90003ac2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
90003abe:	2301      	movs	r3, #1
90003ac0:	e099      	b.n	90003bf6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
90003ac2:	4b4f      	ldr	r3, [pc, #316]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003ac4:	681b      	ldr	r3, [r3, #0]
90003ac6:	4a4e      	ldr	r2, [pc, #312]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90003acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003ace:	f7fd f9bf 	bl	90000e50 <HAL_GetTick>
90003ad2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90003ad4:	e008      	b.n	90003ae8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
90003ad6:	f7fd f9bb 	bl	90000e50 <HAL_GetTick>
90003ada:	4602      	mov	r2, r0
90003adc:	68bb      	ldr	r3, [r7, #8]
90003ade:	1ad3      	subs	r3, r2, r3
90003ae0:	2b02      	cmp	r3, #2
90003ae2:	d901      	bls.n	90003ae8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
90003ae4:	2303      	movs	r3, #3
90003ae6:	e086      	b.n	90003bf6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
90003ae8:	4b45      	ldr	r3, [pc, #276]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003aea:	681b      	ldr	r3, [r3, #0]
90003aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90003af0:	2b00      	cmp	r3, #0
90003af2:	d1f0      	bne.n	90003ad6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
90003af4:	4b42      	ldr	r3, [pc, #264]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003af8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
90003afc:	687b      	ldr	r3, [r7, #4]
90003afe:	681b      	ldr	r3, [r3, #0]
90003b00:	051b      	lsls	r3, r3, #20
90003b02:	493f      	ldr	r1, [pc, #252]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003b04:	4313      	orrs	r3, r2
90003b06:	628b      	str	r3, [r1, #40]	; 0x28
90003b08:	687b      	ldr	r3, [r7, #4]
90003b0a:	685b      	ldr	r3, [r3, #4]
90003b0c:	3b01      	subs	r3, #1
90003b0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
90003b12:	687b      	ldr	r3, [r7, #4]
90003b14:	689b      	ldr	r3, [r3, #8]
90003b16:	3b01      	subs	r3, #1
90003b18:	025b      	lsls	r3, r3, #9
90003b1a:	b29b      	uxth	r3, r3
90003b1c:	431a      	orrs	r2, r3
90003b1e:	687b      	ldr	r3, [r7, #4]
90003b20:	68db      	ldr	r3, [r3, #12]
90003b22:	3b01      	subs	r3, #1
90003b24:	041b      	lsls	r3, r3, #16
90003b26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
90003b2a:	431a      	orrs	r2, r3
90003b2c:	687b      	ldr	r3, [r7, #4]
90003b2e:	691b      	ldr	r3, [r3, #16]
90003b30:	3b01      	subs	r3, #1
90003b32:	061b      	lsls	r3, r3, #24
90003b34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
90003b38:	4931      	ldr	r1, [pc, #196]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003b3a:	4313      	orrs	r3, r2
90003b3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
90003b3e:	4b30      	ldr	r3, [pc, #192]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003b42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
90003b46:	687b      	ldr	r3, [r7, #4]
90003b48:	695b      	ldr	r3, [r3, #20]
90003b4a:	492d      	ldr	r1, [pc, #180]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003b4c:	4313      	orrs	r3, r2
90003b4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
90003b50:	4b2b      	ldr	r3, [pc, #172]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003b54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
90003b58:	687b      	ldr	r3, [r7, #4]
90003b5a:	699b      	ldr	r3, [r3, #24]
90003b5c:	4928      	ldr	r1, [pc, #160]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003b5e:	4313      	orrs	r3, r2
90003b60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
90003b62:	4b27      	ldr	r3, [pc, #156]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003b66:	4a26      	ldr	r2, [pc, #152]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
90003b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
90003b6e:	4b24      	ldr	r3, [pc, #144]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90003b72:	4b24      	ldr	r3, [pc, #144]	; (90003c04 <RCCEx_PLL3_Config+0x160>)
90003b74:	4013      	ands	r3, r2
90003b76:	687a      	ldr	r2, [r7, #4]
90003b78:	69d2      	ldr	r2, [r2, #28]
90003b7a:	00d2      	lsls	r2, r2, #3
90003b7c:	4920      	ldr	r1, [pc, #128]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003b7e:	4313      	orrs	r3, r2
90003b80:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
90003b82:	4b1f      	ldr	r3, [pc, #124]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003b86:	4a1e      	ldr	r2, [pc, #120]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90003b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
90003b8e:	683b      	ldr	r3, [r7, #0]
90003b90:	2b00      	cmp	r3, #0
90003b92:	d106      	bne.n	90003ba2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
90003b94:	4b1a      	ldr	r3, [pc, #104]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003b98:	4a19      	ldr	r2, [pc, #100]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003b9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
90003b9e:	62d3      	str	r3, [r2, #44]	; 0x2c
90003ba0:	e00f      	b.n	90003bc2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
90003ba2:	683b      	ldr	r3, [r7, #0]
90003ba4:	2b01      	cmp	r3, #1
90003ba6:	d106      	bne.n	90003bb6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
90003ba8:	4b15      	ldr	r3, [pc, #84]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003bac:	4a14      	ldr	r2, [pc, #80]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003bae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
90003bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
90003bb4:	e005      	b.n	90003bc2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
90003bb6:	4b12      	ldr	r3, [pc, #72]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003bba:	4a11      	ldr	r2, [pc, #68]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003bbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90003bc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
90003bc2:	4b0f      	ldr	r3, [pc, #60]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003bc4:	681b      	ldr	r3, [r3, #0]
90003bc6:	4a0e      	ldr	r2, [pc, #56]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90003bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90003bce:	f7fd f93f 	bl	90000e50 <HAL_GetTick>
90003bd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90003bd4:	e008      	b.n	90003be8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
90003bd6:	f7fd f93b 	bl	90000e50 <HAL_GetTick>
90003bda:	4602      	mov	r2, r0
90003bdc:	68bb      	ldr	r3, [r7, #8]
90003bde:	1ad3      	subs	r3, r2, r3
90003be0:	2b02      	cmp	r3, #2
90003be2:	d901      	bls.n	90003be8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
90003be4:	2303      	movs	r3, #3
90003be6:	e006      	b.n	90003bf6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
90003be8:	4b05      	ldr	r3, [pc, #20]	; (90003c00 <RCCEx_PLL3_Config+0x15c>)
90003bea:	681b      	ldr	r3, [r3, #0]
90003bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90003bf0:	2b00      	cmp	r3, #0
90003bf2:	d0f0      	beq.n	90003bd6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
90003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
90003bf6:	4618      	mov	r0, r3
90003bf8:	3710      	adds	r7, #16
90003bfa:	46bd      	mov	sp, r7
90003bfc:	bd80      	pop	{r7, pc}
90003bfe:	bf00      	nop
90003c00:	58024400 	.word	0x58024400
90003c04:	ffff0007 	.word	0xffff0007

90003c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90003c08:	b580      	push	{r7, lr}
90003c0a:	b082      	sub	sp, #8
90003c0c:	af00      	add	r7, sp, #0
90003c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
90003c10:	687b      	ldr	r3, [r7, #4]
90003c12:	2b00      	cmp	r3, #0
90003c14:	d101      	bne.n	90003c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90003c16:	2301      	movs	r3, #1
90003c18:	e042      	b.n	90003ca0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
90003c1a:	687b      	ldr	r3, [r7, #4]
90003c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90003c20:	2b00      	cmp	r3, #0
90003c22:	d106      	bne.n	90003c32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90003c24:	687b      	ldr	r3, [r7, #4]
90003c26:	2200      	movs	r2, #0
90003c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
90003c2c:	6878      	ldr	r0, [r7, #4]
90003c2e:	f7fc febd 	bl	900009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90003c32:	687b      	ldr	r3, [r7, #4]
90003c34:	2224      	movs	r2, #36	; 0x24
90003c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
90003c3a:	687b      	ldr	r3, [r7, #4]
90003c3c:	681b      	ldr	r3, [r3, #0]
90003c3e:	681a      	ldr	r2, [r3, #0]
90003c40:	687b      	ldr	r3, [r7, #4]
90003c42:	681b      	ldr	r3, [r3, #0]
90003c44:	f022 0201 	bic.w	r2, r2, #1
90003c48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90003c4a:	6878      	ldr	r0, [r7, #4]
90003c4c:	f000 f8c2 	bl	90003dd4 <UART_SetConfig>
90003c50:	4603      	mov	r3, r0
90003c52:	2b01      	cmp	r3, #1
90003c54:	d101      	bne.n	90003c5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
90003c56:	2301      	movs	r3, #1
90003c58:	e022      	b.n	90003ca0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90003c5a:	687b      	ldr	r3, [r7, #4]
90003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90003c5e:	2b00      	cmp	r3, #0
90003c60:	d002      	beq.n	90003c68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
90003c62:	6878      	ldr	r0, [r7, #4]
90003c64:	f000 fe1e 	bl	900048a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90003c68:	687b      	ldr	r3, [r7, #4]
90003c6a:	681b      	ldr	r3, [r3, #0]
90003c6c:	685a      	ldr	r2, [r3, #4]
90003c6e:	687b      	ldr	r3, [r7, #4]
90003c70:	681b      	ldr	r3, [r3, #0]
90003c72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
90003c76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90003c78:	687b      	ldr	r3, [r7, #4]
90003c7a:	681b      	ldr	r3, [r3, #0]
90003c7c:	689a      	ldr	r2, [r3, #8]
90003c7e:	687b      	ldr	r3, [r7, #4]
90003c80:	681b      	ldr	r3, [r3, #0]
90003c82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
90003c86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
90003c88:	687b      	ldr	r3, [r7, #4]
90003c8a:	681b      	ldr	r3, [r3, #0]
90003c8c:	681a      	ldr	r2, [r3, #0]
90003c8e:	687b      	ldr	r3, [r7, #4]
90003c90:	681b      	ldr	r3, [r3, #0]
90003c92:	f042 0201 	orr.w	r2, r2, #1
90003c96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
90003c98:	6878      	ldr	r0, [r7, #4]
90003c9a:	f000 fea5 	bl	900049e8 <UART_CheckIdleState>
90003c9e:	4603      	mov	r3, r0
}
90003ca0:	4618      	mov	r0, r3
90003ca2:	3708      	adds	r7, #8
90003ca4:	46bd      	mov	sp, r7
90003ca6:	bd80      	pop	{r7, pc}

90003ca8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
90003ca8:	b580      	push	{r7, lr}
90003caa:	b08a      	sub	sp, #40	; 0x28
90003cac:	af02      	add	r7, sp, #8
90003cae:	60f8      	str	r0, [r7, #12]
90003cb0:	60b9      	str	r1, [r7, #8]
90003cb2:	603b      	str	r3, [r7, #0]
90003cb4:	4613      	mov	r3, r2
90003cb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
90003cb8:	68fb      	ldr	r3, [r7, #12]
90003cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90003cbe:	2b20      	cmp	r3, #32
90003cc0:	f040 8083 	bne.w	90003dca <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
90003cc4:	68bb      	ldr	r3, [r7, #8]
90003cc6:	2b00      	cmp	r3, #0
90003cc8:	d002      	beq.n	90003cd0 <HAL_UART_Transmit+0x28>
90003cca:	88fb      	ldrh	r3, [r7, #6]
90003ccc:	2b00      	cmp	r3, #0
90003cce:	d101      	bne.n	90003cd4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
90003cd0:	2301      	movs	r3, #1
90003cd2:	e07b      	b.n	90003dcc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
90003cd4:	68fb      	ldr	r3, [r7, #12]
90003cd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
90003cda:	2b01      	cmp	r3, #1
90003cdc:	d101      	bne.n	90003ce2 <HAL_UART_Transmit+0x3a>
90003cde:	2302      	movs	r3, #2
90003ce0:	e074      	b.n	90003dcc <HAL_UART_Transmit+0x124>
90003ce2:	68fb      	ldr	r3, [r7, #12]
90003ce4:	2201      	movs	r2, #1
90003ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
90003cea:	68fb      	ldr	r3, [r7, #12]
90003cec:	2200      	movs	r2, #0
90003cee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
90003cf2:	68fb      	ldr	r3, [r7, #12]
90003cf4:	2221      	movs	r2, #33	; 0x21
90003cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
90003cfa:	f7fd f8a9 	bl	90000e50 <HAL_GetTick>
90003cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
90003d00:	68fb      	ldr	r3, [r7, #12]
90003d02:	88fa      	ldrh	r2, [r7, #6]
90003d04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
90003d08:	68fb      	ldr	r3, [r7, #12]
90003d0a:	88fa      	ldrh	r2, [r7, #6]
90003d0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
90003d10:	68fb      	ldr	r3, [r7, #12]
90003d12:	689b      	ldr	r3, [r3, #8]
90003d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90003d18:	d108      	bne.n	90003d2c <HAL_UART_Transmit+0x84>
90003d1a:	68fb      	ldr	r3, [r7, #12]
90003d1c:	691b      	ldr	r3, [r3, #16]
90003d1e:	2b00      	cmp	r3, #0
90003d20:	d104      	bne.n	90003d2c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
90003d22:	2300      	movs	r3, #0
90003d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
90003d26:	68bb      	ldr	r3, [r7, #8]
90003d28:	61bb      	str	r3, [r7, #24]
90003d2a:	e003      	b.n	90003d34 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
90003d2c:	68bb      	ldr	r3, [r7, #8]
90003d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
90003d30:	2300      	movs	r3, #0
90003d32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
90003d34:	68fb      	ldr	r3, [r7, #12]
90003d36:	2200      	movs	r2, #0
90003d38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
90003d3c:	e02c      	b.n	90003d98 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
90003d3e:	683b      	ldr	r3, [r7, #0]
90003d40:	9300      	str	r3, [sp, #0]
90003d42:	697b      	ldr	r3, [r7, #20]
90003d44:	2200      	movs	r2, #0
90003d46:	2180      	movs	r1, #128	; 0x80
90003d48:	68f8      	ldr	r0, [r7, #12]
90003d4a:	f000 fe98 	bl	90004a7e <UART_WaitOnFlagUntilTimeout>
90003d4e:	4603      	mov	r3, r0
90003d50:	2b00      	cmp	r3, #0
90003d52:	d001      	beq.n	90003d58 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
90003d54:	2303      	movs	r3, #3
90003d56:	e039      	b.n	90003dcc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
90003d58:	69fb      	ldr	r3, [r7, #28]
90003d5a:	2b00      	cmp	r3, #0
90003d5c:	d10b      	bne.n	90003d76 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
90003d5e:	69bb      	ldr	r3, [r7, #24]
90003d60:	881b      	ldrh	r3, [r3, #0]
90003d62:	461a      	mov	r2, r3
90003d64:	68fb      	ldr	r3, [r7, #12]
90003d66:	681b      	ldr	r3, [r3, #0]
90003d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
90003d6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
90003d6e:	69bb      	ldr	r3, [r7, #24]
90003d70:	3302      	adds	r3, #2
90003d72:	61bb      	str	r3, [r7, #24]
90003d74:	e007      	b.n	90003d86 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
90003d76:	69fb      	ldr	r3, [r7, #28]
90003d78:	781a      	ldrb	r2, [r3, #0]
90003d7a:	68fb      	ldr	r3, [r7, #12]
90003d7c:	681b      	ldr	r3, [r3, #0]
90003d7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
90003d80:	69fb      	ldr	r3, [r7, #28]
90003d82:	3301      	adds	r3, #1
90003d84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
90003d86:	68fb      	ldr	r3, [r7, #12]
90003d88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
90003d8c:	b29b      	uxth	r3, r3
90003d8e:	3b01      	subs	r3, #1
90003d90:	b29a      	uxth	r2, r3
90003d92:	68fb      	ldr	r3, [r7, #12]
90003d94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
90003d98:	68fb      	ldr	r3, [r7, #12]
90003d9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
90003d9e:	b29b      	uxth	r3, r3
90003da0:	2b00      	cmp	r3, #0
90003da2:	d1cc      	bne.n	90003d3e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
90003da4:	683b      	ldr	r3, [r7, #0]
90003da6:	9300      	str	r3, [sp, #0]
90003da8:	697b      	ldr	r3, [r7, #20]
90003daa:	2200      	movs	r2, #0
90003dac:	2140      	movs	r1, #64	; 0x40
90003dae:	68f8      	ldr	r0, [r7, #12]
90003db0:	f000 fe65 	bl	90004a7e <UART_WaitOnFlagUntilTimeout>
90003db4:	4603      	mov	r3, r0
90003db6:	2b00      	cmp	r3, #0
90003db8:	d001      	beq.n	90003dbe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
90003dba:	2303      	movs	r3, #3
90003dbc:	e006      	b.n	90003dcc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
90003dbe:	68fb      	ldr	r3, [r7, #12]
90003dc0:	2220      	movs	r2, #32
90003dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
90003dc6:	2300      	movs	r3, #0
90003dc8:	e000      	b.n	90003dcc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
90003dca:	2302      	movs	r3, #2
  }
}
90003dcc:	4618      	mov	r0, r3
90003dce:	3720      	adds	r7, #32
90003dd0:	46bd      	mov	sp, r7
90003dd2:	bd80      	pop	{r7, pc}

90003dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
90003dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
90003dd8:	b092      	sub	sp, #72	; 0x48
90003dda:	af00      	add	r7, sp, #0
90003ddc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
90003dde:	2300      	movs	r3, #0
90003de0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
90003de4:	697b      	ldr	r3, [r7, #20]
90003de6:	689a      	ldr	r2, [r3, #8]
90003de8:	697b      	ldr	r3, [r7, #20]
90003dea:	691b      	ldr	r3, [r3, #16]
90003dec:	431a      	orrs	r2, r3
90003dee:	697b      	ldr	r3, [r7, #20]
90003df0:	695b      	ldr	r3, [r3, #20]
90003df2:	431a      	orrs	r2, r3
90003df4:	697b      	ldr	r3, [r7, #20]
90003df6:	69db      	ldr	r3, [r3, #28]
90003df8:	4313      	orrs	r3, r2
90003dfa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
90003dfc:	697b      	ldr	r3, [r7, #20]
90003dfe:	681b      	ldr	r3, [r3, #0]
90003e00:	681a      	ldr	r2, [r3, #0]
90003e02:	4bbe      	ldr	r3, [pc, #760]	; (900040fc <UART_SetConfig+0x328>)
90003e04:	4013      	ands	r3, r2
90003e06:	697a      	ldr	r2, [r7, #20]
90003e08:	6812      	ldr	r2, [r2, #0]
90003e0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
90003e0c:	430b      	orrs	r3, r1
90003e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90003e10:	697b      	ldr	r3, [r7, #20]
90003e12:	681b      	ldr	r3, [r3, #0]
90003e14:	685b      	ldr	r3, [r3, #4]
90003e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
90003e1a:	697b      	ldr	r3, [r7, #20]
90003e1c:	68da      	ldr	r2, [r3, #12]
90003e1e:	697b      	ldr	r3, [r7, #20]
90003e20:	681b      	ldr	r3, [r3, #0]
90003e22:	430a      	orrs	r2, r1
90003e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
90003e26:	697b      	ldr	r3, [r7, #20]
90003e28:	699b      	ldr	r3, [r3, #24]
90003e2a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
90003e2c:	697b      	ldr	r3, [r7, #20]
90003e2e:	681b      	ldr	r3, [r3, #0]
90003e30:	4ab3      	ldr	r2, [pc, #716]	; (90004100 <UART_SetConfig+0x32c>)
90003e32:	4293      	cmp	r3, r2
90003e34:	d004      	beq.n	90003e40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
90003e36:	697b      	ldr	r3, [r7, #20]
90003e38:	6a1b      	ldr	r3, [r3, #32]
90003e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
90003e3c:	4313      	orrs	r3, r2
90003e3e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
90003e40:	697b      	ldr	r3, [r7, #20]
90003e42:	681b      	ldr	r3, [r3, #0]
90003e44:	689a      	ldr	r2, [r3, #8]
90003e46:	4baf      	ldr	r3, [pc, #700]	; (90004104 <UART_SetConfig+0x330>)
90003e48:	4013      	ands	r3, r2
90003e4a:	697a      	ldr	r2, [r7, #20]
90003e4c:	6812      	ldr	r2, [r2, #0]
90003e4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
90003e50:	430b      	orrs	r3, r1
90003e52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
90003e54:	697b      	ldr	r3, [r7, #20]
90003e56:	681b      	ldr	r3, [r3, #0]
90003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003e5a:	f023 010f 	bic.w	r1, r3, #15
90003e5e:	697b      	ldr	r3, [r7, #20]
90003e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90003e62:	697b      	ldr	r3, [r7, #20]
90003e64:	681b      	ldr	r3, [r3, #0]
90003e66:	430a      	orrs	r2, r1
90003e68:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
90003e6a:	697b      	ldr	r3, [r7, #20]
90003e6c:	681b      	ldr	r3, [r3, #0]
90003e6e:	4aa6      	ldr	r2, [pc, #664]	; (90004108 <UART_SetConfig+0x334>)
90003e70:	4293      	cmp	r3, r2
90003e72:	d177      	bne.n	90003f64 <UART_SetConfig+0x190>
90003e74:	4ba5      	ldr	r3, [pc, #660]	; (9000410c <UART_SetConfig+0x338>)
90003e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90003e78:	f003 0338 	and.w	r3, r3, #56	; 0x38
90003e7c:	2b28      	cmp	r3, #40	; 0x28
90003e7e:	d86d      	bhi.n	90003f5c <UART_SetConfig+0x188>
90003e80:	a201      	add	r2, pc, #4	; (adr r2, 90003e88 <UART_SetConfig+0xb4>)
90003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90003e86:	bf00      	nop
90003e88:	90003f2d 	.word	0x90003f2d
90003e8c:	90003f5d 	.word	0x90003f5d
90003e90:	90003f5d 	.word	0x90003f5d
90003e94:	90003f5d 	.word	0x90003f5d
90003e98:	90003f5d 	.word	0x90003f5d
90003e9c:	90003f5d 	.word	0x90003f5d
90003ea0:	90003f5d 	.word	0x90003f5d
90003ea4:	90003f5d 	.word	0x90003f5d
90003ea8:	90003f35 	.word	0x90003f35
90003eac:	90003f5d 	.word	0x90003f5d
90003eb0:	90003f5d 	.word	0x90003f5d
90003eb4:	90003f5d 	.word	0x90003f5d
90003eb8:	90003f5d 	.word	0x90003f5d
90003ebc:	90003f5d 	.word	0x90003f5d
90003ec0:	90003f5d 	.word	0x90003f5d
90003ec4:	90003f5d 	.word	0x90003f5d
90003ec8:	90003f3d 	.word	0x90003f3d
90003ecc:	90003f5d 	.word	0x90003f5d
90003ed0:	90003f5d 	.word	0x90003f5d
90003ed4:	90003f5d 	.word	0x90003f5d
90003ed8:	90003f5d 	.word	0x90003f5d
90003edc:	90003f5d 	.word	0x90003f5d
90003ee0:	90003f5d 	.word	0x90003f5d
90003ee4:	90003f5d 	.word	0x90003f5d
90003ee8:	90003f45 	.word	0x90003f45
90003eec:	90003f5d 	.word	0x90003f5d
90003ef0:	90003f5d 	.word	0x90003f5d
90003ef4:	90003f5d 	.word	0x90003f5d
90003ef8:	90003f5d 	.word	0x90003f5d
90003efc:	90003f5d 	.word	0x90003f5d
90003f00:	90003f5d 	.word	0x90003f5d
90003f04:	90003f5d 	.word	0x90003f5d
90003f08:	90003f4d 	.word	0x90003f4d
90003f0c:	90003f5d 	.word	0x90003f5d
90003f10:	90003f5d 	.word	0x90003f5d
90003f14:	90003f5d 	.word	0x90003f5d
90003f18:	90003f5d 	.word	0x90003f5d
90003f1c:	90003f5d 	.word	0x90003f5d
90003f20:	90003f5d 	.word	0x90003f5d
90003f24:	90003f5d 	.word	0x90003f5d
90003f28:	90003f55 	.word	0x90003f55
90003f2c:	2301      	movs	r3, #1
90003f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90003f32:	e222      	b.n	9000437a <UART_SetConfig+0x5a6>
90003f34:	2304      	movs	r3, #4
90003f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90003f3a:	e21e      	b.n	9000437a <UART_SetConfig+0x5a6>
90003f3c:	2308      	movs	r3, #8
90003f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90003f42:	e21a      	b.n	9000437a <UART_SetConfig+0x5a6>
90003f44:	2310      	movs	r3, #16
90003f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90003f4a:	e216      	b.n	9000437a <UART_SetConfig+0x5a6>
90003f4c:	2320      	movs	r3, #32
90003f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90003f52:	e212      	b.n	9000437a <UART_SetConfig+0x5a6>
90003f54:	2340      	movs	r3, #64	; 0x40
90003f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90003f5a:	e20e      	b.n	9000437a <UART_SetConfig+0x5a6>
90003f5c:	2380      	movs	r3, #128	; 0x80
90003f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90003f62:	e20a      	b.n	9000437a <UART_SetConfig+0x5a6>
90003f64:	697b      	ldr	r3, [r7, #20]
90003f66:	681b      	ldr	r3, [r3, #0]
90003f68:	4a69      	ldr	r2, [pc, #420]	; (90004110 <UART_SetConfig+0x33c>)
90003f6a:	4293      	cmp	r3, r2
90003f6c:	d130      	bne.n	90003fd0 <UART_SetConfig+0x1fc>
90003f6e:	4b67      	ldr	r3, [pc, #412]	; (9000410c <UART_SetConfig+0x338>)
90003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90003f72:	f003 0307 	and.w	r3, r3, #7
90003f76:	2b05      	cmp	r3, #5
90003f78:	d826      	bhi.n	90003fc8 <UART_SetConfig+0x1f4>
90003f7a:	a201      	add	r2, pc, #4	; (adr r2, 90003f80 <UART_SetConfig+0x1ac>)
90003f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90003f80:	90003f99 	.word	0x90003f99
90003f84:	90003fa1 	.word	0x90003fa1
90003f88:	90003fa9 	.word	0x90003fa9
90003f8c:	90003fb1 	.word	0x90003fb1
90003f90:	90003fb9 	.word	0x90003fb9
90003f94:	90003fc1 	.word	0x90003fc1
90003f98:	2300      	movs	r3, #0
90003f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90003f9e:	e1ec      	b.n	9000437a <UART_SetConfig+0x5a6>
90003fa0:	2304      	movs	r3, #4
90003fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90003fa6:	e1e8      	b.n	9000437a <UART_SetConfig+0x5a6>
90003fa8:	2308      	movs	r3, #8
90003faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90003fae:	e1e4      	b.n	9000437a <UART_SetConfig+0x5a6>
90003fb0:	2310      	movs	r3, #16
90003fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90003fb6:	e1e0      	b.n	9000437a <UART_SetConfig+0x5a6>
90003fb8:	2320      	movs	r3, #32
90003fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90003fbe:	e1dc      	b.n	9000437a <UART_SetConfig+0x5a6>
90003fc0:	2340      	movs	r3, #64	; 0x40
90003fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90003fc6:	e1d8      	b.n	9000437a <UART_SetConfig+0x5a6>
90003fc8:	2380      	movs	r3, #128	; 0x80
90003fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90003fce:	e1d4      	b.n	9000437a <UART_SetConfig+0x5a6>
90003fd0:	697b      	ldr	r3, [r7, #20]
90003fd2:	681b      	ldr	r3, [r3, #0]
90003fd4:	4a4f      	ldr	r2, [pc, #316]	; (90004114 <UART_SetConfig+0x340>)
90003fd6:	4293      	cmp	r3, r2
90003fd8:	d130      	bne.n	9000403c <UART_SetConfig+0x268>
90003fda:	4b4c      	ldr	r3, [pc, #304]	; (9000410c <UART_SetConfig+0x338>)
90003fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90003fde:	f003 0307 	and.w	r3, r3, #7
90003fe2:	2b05      	cmp	r3, #5
90003fe4:	d826      	bhi.n	90004034 <UART_SetConfig+0x260>
90003fe6:	a201      	add	r2, pc, #4	; (adr r2, 90003fec <UART_SetConfig+0x218>)
90003fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90003fec:	90004005 	.word	0x90004005
90003ff0:	9000400d 	.word	0x9000400d
90003ff4:	90004015 	.word	0x90004015
90003ff8:	9000401d 	.word	0x9000401d
90003ffc:	90004025 	.word	0x90004025
90004000:	9000402d 	.word	0x9000402d
90004004:	2300      	movs	r3, #0
90004006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000400a:	e1b6      	b.n	9000437a <UART_SetConfig+0x5a6>
9000400c:	2304      	movs	r3, #4
9000400e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004012:	e1b2      	b.n	9000437a <UART_SetConfig+0x5a6>
90004014:	2308      	movs	r3, #8
90004016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000401a:	e1ae      	b.n	9000437a <UART_SetConfig+0x5a6>
9000401c:	2310      	movs	r3, #16
9000401e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004022:	e1aa      	b.n	9000437a <UART_SetConfig+0x5a6>
90004024:	2320      	movs	r3, #32
90004026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000402a:	e1a6      	b.n	9000437a <UART_SetConfig+0x5a6>
9000402c:	2340      	movs	r3, #64	; 0x40
9000402e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004032:	e1a2      	b.n	9000437a <UART_SetConfig+0x5a6>
90004034:	2380      	movs	r3, #128	; 0x80
90004036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000403a:	e19e      	b.n	9000437a <UART_SetConfig+0x5a6>
9000403c:	697b      	ldr	r3, [r7, #20]
9000403e:	681b      	ldr	r3, [r3, #0]
90004040:	4a35      	ldr	r2, [pc, #212]	; (90004118 <UART_SetConfig+0x344>)
90004042:	4293      	cmp	r3, r2
90004044:	d130      	bne.n	900040a8 <UART_SetConfig+0x2d4>
90004046:	4b31      	ldr	r3, [pc, #196]	; (9000410c <UART_SetConfig+0x338>)
90004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000404a:	f003 0307 	and.w	r3, r3, #7
9000404e:	2b05      	cmp	r3, #5
90004050:	d826      	bhi.n	900040a0 <UART_SetConfig+0x2cc>
90004052:	a201      	add	r2, pc, #4	; (adr r2, 90004058 <UART_SetConfig+0x284>)
90004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004058:	90004071 	.word	0x90004071
9000405c:	90004079 	.word	0x90004079
90004060:	90004081 	.word	0x90004081
90004064:	90004089 	.word	0x90004089
90004068:	90004091 	.word	0x90004091
9000406c:	90004099 	.word	0x90004099
90004070:	2300      	movs	r3, #0
90004072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004076:	e180      	b.n	9000437a <UART_SetConfig+0x5a6>
90004078:	2304      	movs	r3, #4
9000407a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000407e:	e17c      	b.n	9000437a <UART_SetConfig+0x5a6>
90004080:	2308      	movs	r3, #8
90004082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004086:	e178      	b.n	9000437a <UART_SetConfig+0x5a6>
90004088:	2310      	movs	r3, #16
9000408a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000408e:	e174      	b.n	9000437a <UART_SetConfig+0x5a6>
90004090:	2320      	movs	r3, #32
90004092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004096:	e170      	b.n	9000437a <UART_SetConfig+0x5a6>
90004098:	2340      	movs	r3, #64	; 0x40
9000409a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000409e:	e16c      	b.n	9000437a <UART_SetConfig+0x5a6>
900040a0:	2380      	movs	r3, #128	; 0x80
900040a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900040a6:	e168      	b.n	9000437a <UART_SetConfig+0x5a6>
900040a8:	697b      	ldr	r3, [r7, #20]
900040aa:	681b      	ldr	r3, [r3, #0]
900040ac:	4a1b      	ldr	r2, [pc, #108]	; (9000411c <UART_SetConfig+0x348>)
900040ae:	4293      	cmp	r3, r2
900040b0:	d142      	bne.n	90004138 <UART_SetConfig+0x364>
900040b2:	4b16      	ldr	r3, [pc, #88]	; (9000410c <UART_SetConfig+0x338>)
900040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900040b6:	f003 0307 	and.w	r3, r3, #7
900040ba:	2b05      	cmp	r3, #5
900040bc:	d838      	bhi.n	90004130 <UART_SetConfig+0x35c>
900040be:	a201      	add	r2, pc, #4	; (adr r2, 900040c4 <UART_SetConfig+0x2f0>)
900040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900040c4:	900040dd 	.word	0x900040dd
900040c8:	900040e5 	.word	0x900040e5
900040cc:	900040ed 	.word	0x900040ed
900040d0:	900040f5 	.word	0x900040f5
900040d4:	90004121 	.word	0x90004121
900040d8:	90004129 	.word	0x90004129
900040dc:	2300      	movs	r3, #0
900040de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900040e2:	e14a      	b.n	9000437a <UART_SetConfig+0x5a6>
900040e4:	2304      	movs	r3, #4
900040e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900040ea:	e146      	b.n	9000437a <UART_SetConfig+0x5a6>
900040ec:	2308      	movs	r3, #8
900040ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900040f2:	e142      	b.n	9000437a <UART_SetConfig+0x5a6>
900040f4:	2310      	movs	r3, #16
900040f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900040fa:	e13e      	b.n	9000437a <UART_SetConfig+0x5a6>
900040fc:	cfff69f3 	.word	0xcfff69f3
90004100:	58000c00 	.word	0x58000c00
90004104:	11fff4ff 	.word	0x11fff4ff
90004108:	40011000 	.word	0x40011000
9000410c:	58024400 	.word	0x58024400
90004110:	40004400 	.word	0x40004400
90004114:	40004800 	.word	0x40004800
90004118:	40004c00 	.word	0x40004c00
9000411c:	40005000 	.word	0x40005000
90004120:	2320      	movs	r3, #32
90004122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004126:	e128      	b.n	9000437a <UART_SetConfig+0x5a6>
90004128:	2340      	movs	r3, #64	; 0x40
9000412a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000412e:	e124      	b.n	9000437a <UART_SetConfig+0x5a6>
90004130:	2380      	movs	r3, #128	; 0x80
90004132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004136:	e120      	b.n	9000437a <UART_SetConfig+0x5a6>
90004138:	697b      	ldr	r3, [r7, #20]
9000413a:	681b      	ldr	r3, [r3, #0]
9000413c:	4acb      	ldr	r2, [pc, #812]	; (9000446c <UART_SetConfig+0x698>)
9000413e:	4293      	cmp	r3, r2
90004140:	d176      	bne.n	90004230 <UART_SetConfig+0x45c>
90004142:	4bcb      	ldr	r3, [pc, #812]	; (90004470 <UART_SetConfig+0x69c>)
90004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90004146:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000414a:	2b28      	cmp	r3, #40	; 0x28
9000414c:	d86c      	bhi.n	90004228 <UART_SetConfig+0x454>
9000414e:	a201      	add	r2, pc, #4	; (adr r2, 90004154 <UART_SetConfig+0x380>)
90004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004154:	900041f9 	.word	0x900041f9
90004158:	90004229 	.word	0x90004229
9000415c:	90004229 	.word	0x90004229
90004160:	90004229 	.word	0x90004229
90004164:	90004229 	.word	0x90004229
90004168:	90004229 	.word	0x90004229
9000416c:	90004229 	.word	0x90004229
90004170:	90004229 	.word	0x90004229
90004174:	90004201 	.word	0x90004201
90004178:	90004229 	.word	0x90004229
9000417c:	90004229 	.word	0x90004229
90004180:	90004229 	.word	0x90004229
90004184:	90004229 	.word	0x90004229
90004188:	90004229 	.word	0x90004229
9000418c:	90004229 	.word	0x90004229
90004190:	90004229 	.word	0x90004229
90004194:	90004209 	.word	0x90004209
90004198:	90004229 	.word	0x90004229
9000419c:	90004229 	.word	0x90004229
900041a0:	90004229 	.word	0x90004229
900041a4:	90004229 	.word	0x90004229
900041a8:	90004229 	.word	0x90004229
900041ac:	90004229 	.word	0x90004229
900041b0:	90004229 	.word	0x90004229
900041b4:	90004211 	.word	0x90004211
900041b8:	90004229 	.word	0x90004229
900041bc:	90004229 	.word	0x90004229
900041c0:	90004229 	.word	0x90004229
900041c4:	90004229 	.word	0x90004229
900041c8:	90004229 	.word	0x90004229
900041cc:	90004229 	.word	0x90004229
900041d0:	90004229 	.word	0x90004229
900041d4:	90004219 	.word	0x90004219
900041d8:	90004229 	.word	0x90004229
900041dc:	90004229 	.word	0x90004229
900041e0:	90004229 	.word	0x90004229
900041e4:	90004229 	.word	0x90004229
900041e8:	90004229 	.word	0x90004229
900041ec:	90004229 	.word	0x90004229
900041f0:	90004229 	.word	0x90004229
900041f4:	90004221 	.word	0x90004221
900041f8:	2301      	movs	r3, #1
900041fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900041fe:	e0bc      	b.n	9000437a <UART_SetConfig+0x5a6>
90004200:	2304      	movs	r3, #4
90004202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004206:	e0b8      	b.n	9000437a <UART_SetConfig+0x5a6>
90004208:	2308      	movs	r3, #8
9000420a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000420e:	e0b4      	b.n	9000437a <UART_SetConfig+0x5a6>
90004210:	2310      	movs	r3, #16
90004212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004216:	e0b0      	b.n	9000437a <UART_SetConfig+0x5a6>
90004218:	2320      	movs	r3, #32
9000421a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000421e:	e0ac      	b.n	9000437a <UART_SetConfig+0x5a6>
90004220:	2340      	movs	r3, #64	; 0x40
90004222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004226:	e0a8      	b.n	9000437a <UART_SetConfig+0x5a6>
90004228:	2380      	movs	r3, #128	; 0x80
9000422a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000422e:	e0a4      	b.n	9000437a <UART_SetConfig+0x5a6>
90004230:	697b      	ldr	r3, [r7, #20]
90004232:	681b      	ldr	r3, [r3, #0]
90004234:	4a8f      	ldr	r2, [pc, #572]	; (90004474 <UART_SetConfig+0x6a0>)
90004236:	4293      	cmp	r3, r2
90004238:	d130      	bne.n	9000429c <UART_SetConfig+0x4c8>
9000423a:	4b8d      	ldr	r3, [pc, #564]	; (90004470 <UART_SetConfig+0x69c>)
9000423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000423e:	f003 0307 	and.w	r3, r3, #7
90004242:	2b05      	cmp	r3, #5
90004244:	d826      	bhi.n	90004294 <UART_SetConfig+0x4c0>
90004246:	a201      	add	r2, pc, #4	; (adr r2, 9000424c <UART_SetConfig+0x478>)
90004248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000424c:	90004265 	.word	0x90004265
90004250:	9000426d 	.word	0x9000426d
90004254:	90004275 	.word	0x90004275
90004258:	9000427d 	.word	0x9000427d
9000425c:	90004285 	.word	0x90004285
90004260:	9000428d 	.word	0x9000428d
90004264:	2300      	movs	r3, #0
90004266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000426a:	e086      	b.n	9000437a <UART_SetConfig+0x5a6>
9000426c:	2304      	movs	r3, #4
9000426e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004272:	e082      	b.n	9000437a <UART_SetConfig+0x5a6>
90004274:	2308      	movs	r3, #8
90004276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000427a:	e07e      	b.n	9000437a <UART_SetConfig+0x5a6>
9000427c:	2310      	movs	r3, #16
9000427e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004282:	e07a      	b.n	9000437a <UART_SetConfig+0x5a6>
90004284:	2320      	movs	r3, #32
90004286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000428a:	e076      	b.n	9000437a <UART_SetConfig+0x5a6>
9000428c:	2340      	movs	r3, #64	; 0x40
9000428e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004292:	e072      	b.n	9000437a <UART_SetConfig+0x5a6>
90004294:	2380      	movs	r3, #128	; 0x80
90004296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000429a:	e06e      	b.n	9000437a <UART_SetConfig+0x5a6>
9000429c:	697b      	ldr	r3, [r7, #20]
9000429e:	681b      	ldr	r3, [r3, #0]
900042a0:	4a75      	ldr	r2, [pc, #468]	; (90004478 <UART_SetConfig+0x6a4>)
900042a2:	4293      	cmp	r3, r2
900042a4:	d130      	bne.n	90004308 <UART_SetConfig+0x534>
900042a6:	4b72      	ldr	r3, [pc, #456]	; (90004470 <UART_SetConfig+0x69c>)
900042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900042aa:	f003 0307 	and.w	r3, r3, #7
900042ae:	2b05      	cmp	r3, #5
900042b0:	d826      	bhi.n	90004300 <UART_SetConfig+0x52c>
900042b2:	a201      	add	r2, pc, #4	; (adr r2, 900042b8 <UART_SetConfig+0x4e4>)
900042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900042b8:	900042d1 	.word	0x900042d1
900042bc:	900042d9 	.word	0x900042d9
900042c0:	900042e1 	.word	0x900042e1
900042c4:	900042e9 	.word	0x900042e9
900042c8:	900042f1 	.word	0x900042f1
900042cc:	900042f9 	.word	0x900042f9
900042d0:	2300      	movs	r3, #0
900042d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900042d6:	e050      	b.n	9000437a <UART_SetConfig+0x5a6>
900042d8:	2304      	movs	r3, #4
900042da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900042de:	e04c      	b.n	9000437a <UART_SetConfig+0x5a6>
900042e0:	2308      	movs	r3, #8
900042e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900042e6:	e048      	b.n	9000437a <UART_SetConfig+0x5a6>
900042e8:	2310      	movs	r3, #16
900042ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900042ee:	e044      	b.n	9000437a <UART_SetConfig+0x5a6>
900042f0:	2320      	movs	r3, #32
900042f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900042f6:	e040      	b.n	9000437a <UART_SetConfig+0x5a6>
900042f8:	2340      	movs	r3, #64	; 0x40
900042fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
900042fe:	e03c      	b.n	9000437a <UART_SetConfig+0x5a6>
90004300:	2380      	movs	r3, #128	; 0x80
90004302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004306:	e038      	b.n	9000437a <UART_SetConfig+0x5a6>
90004308:	697b      	ldr	r3, [r7, #20]
9000430a:	681b      	ldr	r3, [r3, #0]
9000430c:	4a5b      	ldr	r2, [pc, #364]	; (9000447c <UART_SetConfig+0x6a8>)
9000430e:	4293      	cmp	r3, r2
90004310:	d130      	bne.n	90004374 <UART_SetConfig+0x5a0>
90004312:	4b57      	ldr	r3, [pc, #348]	; (90004470 <UART_SetConfig+0x69c>)
90004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90004316:	f003 0307 	and.w	r3, r3, #7
9000431a:	2b05      	cmp	r3, #5
9000431c:	d826      	bhi.n	9000436c <UART_SetConfig+0x598>
9000431e:	a201      	add	r2, pc, #4	; (adr r2, 90004324 <UART_SetConfig+0x550>)
90004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004324:	9000433d 	.word	0x9000433d
90004328:	90004345 	.word	0x90004345
9000432c:	9000434d 	.word	0x9000434d
90004330:	90004355 	.word	0x90004355
90004334:	9000435d 	.word	0x9000435d
90004338:	90004365 	.word	0x90004365
9000433c:	2302      	movs	r3, #2
9000433e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004342:	e01a      	b.n	9000437a <UART_SetConfig+0x5a6>
90004344:	2304      	movs	r3, #4
90004346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000434a:	e016      	b.n	9000437a <UART_SetConfig+0x5a6>
9000434c:	2308      	movs	r3, #8
9000434e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004352:	e012      	b.n	9000437a <UART_SetConfig+0x5a6>
90004354:	2310      	movs	r3, #16
90004356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000435a:	e00e      	b.n	9000437a <UART_SetConfig+0x5a6>
9000435c:	2320      	movs	r3, #32
9000435e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004362:	e00a      	b.n	9000437a <UART_SetConfig+0x5a6>
90004364:	2340      	movs	r3, #64	; 0x40
90004366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
9000436a:	e006      	b.n	9000437a <UART_SetConfig+0x5a6>
9000436c:	2380      	movs	r3, #128	; 0x80
9000436e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
90004372:	e002      	b.n	9000437a <UART_SetConfig+0x5a6>
90004374:	2380      	movs	r3, #128	; 0x80
90004376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
9000437a:	697b      	ldr	r3, [r7, #20]
9000437c:	681b      	ldr	r3, [r3, #0]
9000437e:	4a3f      	ldr	r2, [pc, #252]	; (9000447c <UART_SetConfig+0x6a8>)
90004380:	4293      	cmp	r3, r2
90004382:	f040 80f8 	bne.w	90004576 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
90004386:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
9000438a:	2b20      	cmp	r3, #32
9000438c:	dc46      	bgt.n	9000441c <UART_SetConfig+0x648>
9000438e:	2b02      	cmp	r3, #2
90004390:	f2c0 8082 	blt.w	90004498 <UART_SetConfig+0x6c4>
90004394:	3b02      	subs	r3, #2
90004396:	2b1e      	cmp	r3, #30
90004398:	d87e      	bhi.n	90004498 <UART_SetConfig+0x6c4>
9000439a:	a201      	add	r2, pc, #4	; (adr r2, 900043a0 <UART_SetConfig+0x5cc>)
9000439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900043a0:	90004423 	.word	0x90004423
900043a4:	90004499 	.word	0x90004499
900043a8:	9000442b 	.word	0x9000442b
900043ac:	90004499 	.word	0x90004499
900043b0:	90004499 	.word	0x90004499
900043b4:	90004499 	.word	0x90004499
900043b8:	9000443b 	.word	0x9000443b
900043bc:	90004499 	.word	0x90004499
900043c0:	90004499 	.word	0x90004499
900043c4:	90004499 	.word	0x90004499
900043c8:	90004499 	.word	0x90004499
900043cc:	90004499 	.word	0x90004499
900043d0:	90004499 	.word	0x90004499
900043d4:	90004499 	.word	0x90004499
900043d8:	9000444b 	.word	0x9000444b
900043dc:	90004499 	.word	0x90004499
900043e0:	90004499 	.word	0x90004499
900043e4:	90004499 	.word	0x90004499
900043e8:	90004499 	.word	0x90004499
900043ec:	90004499 	.word	0x90004499
900043f0:	90004499 	.word	0x90004499
900043f4:	90004499 	.word	0x90004499
900043f8:	90004499 	.word	0x90004499
900043fc:	90004499 	.word	0x90004499
90004400:	90004499 	.word	0x90004499
90004404:	90004499 	.word	0x90004499
90004408:	90004499 	.word	0x90004499
9000440c:	90004499 	.word	0x90004499
90004410:	90004499 	.word	0x90004499
90004414:	90004499 	.word	0x90004499
90004418:	9000448b 	.word	0x9000448b
9000441c:	2b40      	cmp	r3, #64	; 0x40
9000441e:	d037      	beq.n	90004490 <UART_SetConfig+0x6bc>
90004420:	e03a      	b.n	90004498 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
90004422:	f7fe ffcf 	bl	900033c4 <HAL_RCCEx_GetD3PCLK1Freq>
90004426:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
90004428:	e03c      	b.n	900044a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000442a:	f107 0324 	add.w	r3, r7, #36	; 0x24
9000442e:	4618      	mov	r0, r3
90004430:	f7fe ffde 	bl	900033f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
90004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
90004436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004438:	e034      	b.n	900044a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000443a:	f107 0318 	add.w	r3, r7, #24
9000443e:	4618      	mov	r0, r3
90004440:	f7ff f92a 	bl	90003698 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
90004444:	69fb      	ldr	r3, [r7, #28]
90004446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004448:	e02c      	b.n	900044a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000444a:	4b09      	ldr	r3, [pc, #36]	; (90004470 <UART_SetConfig+0x69c>)
9000444c:	681b      	ldr	r3, [r3, #0]
9000444e:	f003 0320 	and.w	r3, r3, #32
90004452:	2b00      	cmp	r3, #0
90004454:	d016      	beq.n	90004484 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
90004456:	4b06      	ldr	r3, [pc, #24]	; (90004470 <UART_SetConfig+0x69c>)
90004458:	681b      	ldr	r3, [r3, #0]
9000445a:	08db      	lsrs	r3, r3, #3
9000445c:	f003 0303 	and.w	r3, r3, #3
90004460:	4a07      	ldr	r2, [pc, #28]	; (90004480 <UART_SetConfig+0x6ac>)
90004462:	fa22 f303 	lsr.w	r3, r2, r3
90004466:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
90004468:	e01c      	b.n	900044a4 <UART_SetConfig+0x6d0>
9000446a:	bf00      	nop
9000446c:	40011400 	.word	0x40011400
90004470:	58024400 	.word	0x58024400
90004474:	40007800 	.word	0x40007800
90004478:	40007c00 	.word	0x40007c00
9000447c:	58000c00 	.word	0x58000c00
90004480:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
90004484:	4b9d      	ldr	r3, [pc, #628]	; (900046fc <UART_SetConfig+0x928>)
90004486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004488:	e00c      	b.n	900044a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
9000448a:	4b9d      	ldr	r3, [pc, #628]	; (90004700 <UART_SetConfig+0x92c>)
9000448c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000448e:	e009      	b.n	900044a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
90004490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90004494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004496:	e005      	b.n	900044a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
90004498:	2300      	movs	r3, #0
9000449a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
9000449c:	2301      	movs	r3, #1
9000449e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
900044a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
900044a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900044a6:	2b00      	cmp	r3, #0
900044a8:	f000 81de 	beq.w	90004868 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
900044ac:	697b      	ldr	r3, [r7, #20]
900044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900044b0:	4a94      	ldr	r2, [pc, #592]	; (90004704 <UART_SetConfig+0x930>)
900044b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
900044b6:	461a      	mov	r2, r3
900044b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900044ba:	fbb3 f3f2 	udiv	r3, r3, r2
900044be:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
900044c0:	697b      	ldr	r3, [r7, #20]
900044c2:	685a      	ldr	r2, [r3, #4]
900044c4:	4613      	mov	r3, r2
900044c6:	005b      	lsls	r3, r3, #1
900044c8:	4413      	add	r3, r2
900044ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
900044cc:	429a      	cmp	r2, r3
900044ce:	d305      	bcc.n	900044dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
900044d0:	697b      	ldr	r3, [r7, #20]
900044d2:	685b      	ldr	r3, [r3, #4]
900044d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
900044d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
900044d8:	429a      	cmp	r2, r3
900044da:	d903      	bls.n	900044e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
900044dc:	2301      	movs	r3, #1
900044de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
900044e2:	e1c1      	b.n	90004868 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
900044e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900044e6:	2200      	movs	r2, #0
900044e8:	60bb      	str	r3, [r7, #8]
900044ea:	60fa      	str	r2, [r7, #12]
900044ec:	697b      	ldr	r3, [r7, #20]
900044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900044f0:	4a84      	ldr	r2, [pc, #528]	; (90004704 <UART_SetConfig+0x930>)
900044f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
900044f6:	b29b      	uxth	r3, r3
900044f8:	2200      	movs	r2, #0
900044fa:	603b      	str	r3, [r7, #0]
900044fc:	607a      	str	r2, [r7, #4]
900044fe:	e9d7 2300 	ldrd	r2, r3, [r7]
90004502:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
90004506:	f7fb fee7 	bl	900002d8 <__aeabi_uldivmod>
9000450a:	4602      	mov	r2, r0
9000450c:	460b      	mov	r3, r1
9000450e:	4610      	mov	r0, r2
90004510:	4619      	mov	r1, r3
90004512:	f04f 0200 	mov.w	r2, #0
90004516:	f04f 0300 	mov.w	r3, #0
9000451a:	020b      	lsls	r3, r1, #8
9000451c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
90004520:	0202      	lsls	r2, r0, #8
90004522:	6979      	ldr	r1, [r7, #20]
90004524:	6849      	ldr	r1, [r1, #4]
90004526:	0849      	lsrs	r1, r1, #1
90004528:	2000      	movs	r0, #0
9000452a:	460c      	mov	r4, r1
9000452c:	4605      	mov	r5, r0
9000452e:	eb12 0804 	adds.w	r8, r2, r4
90004532:	eb43 0905 	adc.w	r9, r3, r5
90004536:	697b      	ldr	r3, [r7, #20]
90004538:	685b      	ldr	r3, [r3, #4]
9000453a:	2200      	movs	r2, #0
9000453c:	469a      	mov	sl, r3
9000453e:	4693      	mov	fp, r2
90004540:	4652      	mov	r2, sl
90004542:	465b      	mov	r3, fp
90004544:	4640      	mov	r0, r8
90004546:	4649      	mov	r1, r9
90004548:	f7fb fec6 	bl	900002d8 <__aeabi_uldivmod>
9000454c:	4602      	mov	r2, r0
9000454e:	460b      	mov	r3, r1
90004550:	4613      	mov	r3, r2
90004552:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
90004554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90004556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
9000455a:	d308      	bcc.n	9000456e <UART_SetConfig+0x79a>
9000455c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000455e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
90004562:	d204      	bcs.n	9000456e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
90004564:	697b      	ldr	r3, [r7, #20]
90004566:	681b      	ldr	r3, [r3, #0]
90004568:	6bba      	ldr	r2, [r7, #56]	; 0x38
9000456a:	60da      	str	r2, [r3, #12]
9000456c:	e17c      	b.n	90004868 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
9000456e:	2301      	movs	r3, #1
90004570:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
90004574:	e178      	b.n	90004868 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
90004576:	697b      	ldr	r3, [r7, #20]
90004578:	69db      	ldr	r3, [r3, #28]
9000457a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
9000457e:	f040 80c5 	bne.w	9000470c <UART_SetConfig+0x938>
  {
    switch (clocksource)
90004582:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
90004586:	2b20      	cmp	r3, #32
90004588:	dc48      	bgt.n	9000461c <UART_SetConfig+0x848>
9000458a:	2b00      	cmp	r3, #0
9000458c:	db7b      	blt.n	90004686 <UART_SetConfig+0x8b2>
9000458e:	2b20      	cmp	r3, #32
90004590:	d879      	bhi.n	90004686 <UART_SetConfig+0x8b2>
90004592:	a201      	add	r2, pc, #4	; (adr r2, 90004598 <UART_SetConfig+0x7c4>)
90004594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004598:	90004623 	.word	0x90004623
9000459c:	9000462b 	.word	0x9000462b
900045a0:	90004687 	.word	0x90004687
900045a4:	90004687 	.word	0x90004687
900045a8:	90004633 	.word	0x90004633
900045ac:	90004687 	.word	0x90004687
900045b0:	90004687 	.word	0x90004687
900045b4:	90004687 	.word	0x90004687
900045b8:	90004643 	.word	0x90004643
900045bc:	90004687 	.word	0x90004687
900045c0:	90004687 	.word	0x90004687
900045c4:	90004687 	.word	0x90004687
900045c8:	90004687 	.word	0x90004687
900045cc:	90004687 	.word	0x90004687
900045d0:	90004687 	.word	0x90004687
900045d4:	90004687 	.word	0x90004687
900045d8:	90004653 	.word	0x90004653
900045dc:	90004687 	.word	0x90004687
900045e0:	90004687 	.word	0x90004687
900045e4:	90004687 	.word	0x90004687
900045e8:	90004687 	.word	0x90004687
900045ec:	90004687 	.word	0x90004687
900045f0:	90004687 	.word	0x90004687
900045f4:	90004687 	.word	0x90004687
900045f8:	90004687 	.word	0x90004687
900045fc:	90004687 	.word	0x90004687
90004600:	90004687 	.word	0x90004687
90004604:	90004687 	.word	0x90004687
90004608:	90004687 	.word	0x90004687
9000460c:	90004687 	.word	0x90004687
90004610:	90004687 	.word	0x90004687
90004614:	90004687 	.word	0x90004687
90004618:	90004679 	.word	0x90004679
9000461c:	2b40      	cmp	r3, #64	; 0x40
9000461e:	d02e      	beq.n	9000467e <UART_SetConfig+0x8aa>
90004620:	e031      	b.n	90004686 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
90004622:	f7fd ff5d 	bl	900024e0 <HAL_RCC_GetPCLK1Freq>
90004626:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
90004628:	e033      	b.n	90004692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000462a:	f7fd ff6f 	bl	9000250c <HAL_RCC_GetPCLK2Freq>
9000462e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
90004630:	e02f      	b.n	90004692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90004632:	f107 0324 	add.w	r3, r7, #36	; 0x24
90004636:	4618      	mov	r0, r3
90004638:	f7fe feda 	bl	900033f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000463e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004640:	e027      	b.n	90004692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90004642:	f107 0318 	add.w	r3, r7, #24
90004646:	4618      	mov	r0, r3
90004648:	f7ff f826 	bl	90003698 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000464c:	69fb      	ldr	r3, [r7, #28]
9000464e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004650:	e01f      	b.n	90004692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90004652:	4b2d      	ldr	r3, [pc, #180]	; (90004708 <UART_SetConfig+0x934>)
90004654:	681b      	ldr	r3, [r3, #0]
90004656:	f003 0320 	and.w	r3, r3, #32
9000465a:	2b00      	cmp	r3, #0
9000465c:	d009      	beq.n	90004672 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000465e:	4b2a      	ldr	r3, [pc, #168]	; (90004708 <UART_SetConfig+0x934>)
90004660:	681b      	ldr	r3, [r3, #0]
90004662:	08db      	lsrs	r3, r3, #3
90004664:	f003 0303 	and.w	r3, r3, #3
90004668:	4a24      	ldr	r2, [pc, #144]	; (900046fc <UART_SetConfig+0x928>)
9000466a:	fa22 f303 	lsr.w	r3, r2, r3
9000466e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
90004670:	e00f      	b.n	90004692 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
90004672:	4b22      	ldr	r3, [pc, #136]	; (900046fc <UART_SetConfig+0x928>)
90004674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004676:	e00c      	b.n	90004692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
90004678:	4b21      	ldr	r3, [pc, #132]	; (90004700 <UART_SetConfig+0x92c>)
9000467a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
9000467c:	e009      	b.n	90004692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000467e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90004682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004684:	e005      	b.n	90004692 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
90004686:	2300      	movs	r3, #0
90004688:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
9000468a:	2301      	movs	r3, #1
9000468c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
90004690:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
90004692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90004694:	2b00      	cmp	r3, #0
90004696:	f000 80e7 	beq.w	90004868 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000469a:	697b      	ldr	r3, [r7, #20]
9000469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000469e:	4a19      	ldr	r2, [pc, #100]	; (90004704 <UART_SetConfig+0x930>)
900046a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
900046a4:	461a      	mov	r2, r3
900046a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900046a8:	fbb3 f3f2 	udiv	r3, r3, r2
900046ac:	005a      	lsls	r2, r3, #1
900046ae:	697b      	ldr	r3, [r7, #20]
900046b0:	685b      	ldr	r3, [r3, #4]
900046b2:	085b      	lsrs	r3, r3, #1
900046b4:	441a      	add	r2, r3
900046b6:	697b      	ldr	r3, [r7, #20]
900046b8:	685b      	ldr	r3, [r3, #4]
900046ba:	fbb2 f3f3 	udiv	r3, r2, r3
900046be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
900046c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900046c2:	2b0f      	cmp	r3, #15
900046c4:	d916      	bls.n	900046f4 <UART_SetConfig+0x920>
900046c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900046c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900046cc:	d212      	bcs.n	900046f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
900046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900046d0:	b29b      	uxth	r3, r3
900046d2:	f023 030f 	bic.w	r3, r3, #15
900046d6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
900046d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900046da:	085b      	lsrs	r3, r3, #1
900046dc:	b29b      	uxth	r3, r3
900046de:	f003 0307 	and.w	r3, r3, #7
900046e2:	b29a      	uxth	r2, r3
900046e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
900046e6:	4313      	orrs	r3, r2
900046e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
900046ea:	697b      	ldr	r3, [r7, #20]
900046ec:	681b      	ldr	r3, [r3, #0]
900046ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
900046f0:	60da      	str	r2, [r3, #12]
900046f2:	e0b9      	b.n	90004868 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
900046f4:	2301      	movs	r3, #1
900046f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
900046fa:	e0b5      	b.n	90004868 <UART_SetConfig+0xa94>
900046fc:	03d09000 	.word	0x03d09000
90004700:	003d0900 	.word	0x003d0900
90004704:	900058c0 	.word	0x900058c0
90004708:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
9000470c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
90004710:	2b20      	cmp	r3, #32
90004712:	dc49      	bgt.n	900047a8 <UART_SetConfig+0x9d4>
90004714:	2b00      	cmp	r3, #0
90004716:	db7c      	blt.n	90004812 <UART_SetConfig+0xa3e>
90004718:	2b20      	cmp	r3, #32
9000471a:	d87a      	bhi.n	90004812 <UART_SetConfig+0xa3e>
9000471c:	a201      	add	r2, pc, #4	; (adr r2, 90004724 <UART_SetConfig+0x950>)
9000471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90004722:	bf00      	nop
90004724:	900047af 	.word	0x900047af
90004728:	900047b7 	.word	0x900047b7
9000472c:	90004813 	.word	0x90004813
90004730:	90004813 	.word	0x90004813
90004734:	900047bf 	.word	0x900047bf
90004738:	90004813 	.word	0x90004813
9000473c:	90004813 	.word	0x90004813
90004740:	90004813 	.word	0x90004813
90004744:	900047cf 	.word	0x900047cf
90004748:	90004813 	.word	0x90004813
9000474c:	90004813 	.word	0x90004813
90004750:	90004813 	.word	0x90004813
90004754:	90004813 	.word	0x90004813
90004758:	90004813 	.word	0x90004813
9000475c:	90004813 	.word	0x90004813
90004760:	90004813 	.word	0x90004813
90004764:	900047df 	.word	0x900047df
90004768:	90004813 	.word	0x90004813
9000476c:	90004813 	.word	0x90004813
90004770:	90004813 	.word	0x90004813
90004774:	90004813 	.word	0x90004813
90004778:	90004813 	.word	0x90004813
9000477c:	90004813 	.word	0x90004813
90004780:	90004813 	.word	0x90004813
90004784:	90004813 	.word	0x90004813
90004788:	90004813 	.word	0x90004813
9000478c:	90004813 	.word	0x90004813
90004790:	90004813 	.word	0x90004813
90004794:	90004813 	.word	0x90004813
90004798:	90004813 	.word	0x90004813
9000479c:	90004813 	.word	0x90004813
900047a0:	90004813 	.word	0x90004813
900047a4:	90004805 	.word	0x90004805
900047a8:	2b40      	cmp	r3, #64	; 0x40
900047aa:	d02e      	beq.n	9000480a <UART_SetConfig+0xa36>
900047ac:	e031      	b.n	90004812 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
900047ae:	f7fd fe97 	bl	900024e0 <HAL_RCC_GetPCLK1Freq>
900047b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
900047b4:	e033      	b.n	9000481e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
900047b6:	f7fd fea9 	bl	9000250c <HAL_RCC_GetPCLK2Freq>
900047ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
900047bc:	e02f      	b.n	9000481e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
900047be:	f107 0324 	add.w	r3, r7, #36	; 0x24
900047c2:	4618      	mov	r0, r3
900047c4:	f7fe fe14 	bl	900033f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
900047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900047ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
900047cc:	e027      	b.n	9000481e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
900047ce:	f107 0318 	add.w	r3, r7, #24
900047d2:	4618      	mov	r0, r3
900047d4:	f7fe ff60 	bl	90003698 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
900047d8:	69fb      	ldr	r3, [r7, #28]
900047da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
900047dc:	e01f      	b.n	9000481e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
900047de:	4b2d      	ldr	r3, [pc, #180]	; (90004894 <UART_SetConfig+0xac0>)
900047e0:	681b      	ldr	r3, [r3, #0]
900047e2:	f003 0320 	and.w	r3, r3, #32
900047e6:	2b00      	cmp	r3, #0
900047e8:	d009      	beq.n	900047fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
900047ea:	4b2a      	ldr	r3, [pc, #168]	; (90004894 <UART_SetConfig+0xac0>)
900047ec:	681b      	ldr	r3, [r3, #0]
900047ee:	08db      	lsrs	r3, r3, #3
900047f0:	f003 0303 	and.w	r3, r3, #3
900047f4:	4a28      	ldr	r2, [pc, #160]	; (90004898 <UART_SetConfig+0xac4>)
900047f6:	fa22 f303 	lsr.w	r3, r2, r3
900047fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
900047fc:	e00f      	b.n	9000481e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
900047fe:	4b26      	ldr	r3, [pc, #152]	; (90004898 <UART_SetConfig+0xac4>)
90004800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004802:	e00c      	b.n	9000481e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
90004804:	4b25      	ldr	r3, [pc, #148]	; (9000489c <UART_SetConfig+0xac8>)
90004806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004808:	e009      	b.n	9000481e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000480a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9000480e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
90004810:	e005      	b.n	9000481e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
90004812:	2300      	movs	r3, #0
90004814:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
90004816:	2301      	movs	r3, #1
90004818:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
9000481c:	bf00      	nop
    }

    if (pclk != 0U)
9000481e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90004820:	2b00      	cmp	r3, #0
90004822:	d021      	beq.n	90004868 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
90004824:	697b      	ldr	r3, [r7, #20]
90004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004828:	4a1d      	ldr	r2, [pc, #116]	; (900048a0 <UART_SetConfig+0xacc>)
9000482a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
9000482e:	461a      	mov	r2, r3
90004830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90004832:	fbb3 f2f2 	udiv	r2, r3, r2
90004836:	697b      	ldr	r3, [r7, #20]
90004838:	685b      	ldr	r3, [r3, #4]
9000483a:	085b      	lsrs	r3, r3, #1
9000483c:	441a      	add	r2, r3
9000483e:	697b      	ldr	r3, [r7, #20]
90004840:	685b      	ldr	r3, [r3, #4]
90004842:	fbb2 f3f3 	udiv	r3, r2, r3
90004846:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
90004848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000484a:	2b0f      	cmp	r3, #15
9000484c:	d909      	bls.n	90004862 <UART_SetConfig+0xa8e>
9000484e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90004850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90004854:	d205      	bcs.n	90004862 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
90004856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90004858:	b29a      	uxth	r2, r3
9000485a:	697b      	ldr	r3, [r7, #20]
9000485c:	681b      	ldr	r3, [r3, #0]
9000485e:	60da      	str	r2, [r3, #12]
90004860:	e002      	b.n	90004868 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
90004862:	2301      	movs	r3, #1
90004864:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
90004868:	697b      	ldr	r3, [r7, #20]
9000486a:	2201      	movs	r2, #1
9000486c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
90004870:	697b      	ldr	r3, [r7, #20]
90004872:	2201      	movs	r2, #1
90004874:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
90004878:	697b      	ldr	r3, [r7, #20]
9000487a:	2200      	movs	r2, #0
9000487c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
9000487e:	697b      	ldr	r3, [r7, #20]
90004880:	2200      	movs	r2, #0
90004882:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
90004884:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
90004888:	4618      	mov	r0, r3
9000488a:	3748      	adds	r7, #72	; 0x48
9000488c:	46bd      	mov	sp, r7
9000488e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
90004892:	bf00      	nop
90004894:	58024400 	.word	0x58024400
90004898:	03d09000 	.word	0x03d09000
9000489c:	003d0900 	.word	0x003d0900
900048a0:	900058c0 	.word	0x900058c0

900048a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
900048a4:	b480      	push	{r7}
900048a6:	b083      	sub	sp, #12
900048a8:	af00      	add	r7, sp, #0
900048aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
900048ac:	687b      	ldr	r3, [r7, #4]
900048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900048b0:	f003 0301 	and.w	r3, r3, #1
900048b4:	2b00      	cmp	r3, #0
900048b6:	d00a      	beq.n	900048ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
900048b8:	687b      	ldr	r3, [r7, #4]
900048ba:	681b      	ldr	r3, [r3, #0]
900048bc:	685b      	ldr	r3, [r3, #4]
900048be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
900048c2:	687b      	ldr	r3, [r7, #4]
900048c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900048c6:	687b      	ldr	r3, [r7, #4]
900048c8:	681b      	ldr	r3, [r3, #0]
900048ca:	430a      	orrs	r2, r1
900048cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
900048ce:	687b      	ldr	r3, [r7, #4]
900048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900048d2:	f003 0302 	and.w	r3, r3, #2
900048d6:	2b00      	cmp	r3, #0
900048d8:	d00a      	beq.n	900048f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
900048da:	687b      	ldr	r3, [r7, #4]
900048dc:	681b      	ldr	r3, [r3, #0]
900048de:	685b      	ldr	r3, [r3, #4]
900048e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
900048e4:	687b      	ldr	r3, [r7, #4]
900048e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900048e8:	687b      	ldr	r3, [r7, #4]
900048ea:	681b      	ldr	r3, [r3, #0]
900048ec:	430a      	orrs	r2, r1
900048ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
900048f0:	687b      	ldr	r3, [r7, #4]
900048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900048f4:	f003 0304 	and.w	r3, r3, #4
900048f8:	2b00      	cmp	r3, #0
900048fa:	d00a      	beq.n	90004912 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
900048fc:	687b      	ldr	r3, [r7, #4]
900048fe:	681b      	ldr	r3, [r3, #0]
90004900:	685b      	ldr	r3, [r3, #4]
90004902:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
90004906:	687b      	ldr	r3, [r7, #4]
90004908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000490a:	687b      	ldr	r3, [r7, #4]
9000490c:	681b      	ldr	r3, [r3, #0]
9000490e:	430a      	orrs	r2, r1
90004910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
90004912:	687b      	ldr	r3, [r7, #4]
90004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004916:	f003 0308 	and.w	r3, r3, #8
9000491a:	2b00      	cmp	r3, #0
9000491c:	d00a      	beq.n	90004934 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000491e:	687b      	ldr	r3, [r7, #4]
90004920:	681b      	ldr	r3, [r3, #0]
90004922:	685b      	ldr	r3, [r3, #4]
90004924:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
90004928:	687b      	ldr	r3, [r7, #4]
9000492a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000492c:	687b      	ldr	r3, [r7, #4]
9000492e:	681b      	ldr	r3, [r3, #0]
90004930:	430a      	orrs	r2, r1
90004932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
90004934:	687b      	ldr	r3, [r7, #4]
90004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90004938:	f003 0310 	and.w	r3, r3, #16
9000493c:	2b00      	cmp	r3, #0
9000493e:	d00a      	beq.n	90004956 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
90004940:	687b      	ldr	r3, [r7, #4]
90004942:	681b      	ldr	r3, [r3, #0]
90004944:	689b      	ldr	r3, [r3, #8]
90004946:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
9000494a:	687b      	ldr	r3, [r7, #4]
9000494c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
9000494e:	687b      	ldr	r3, [r7, #4]
90004950:	681b      	ldr	r3, [r3, #0]
90004952:	430a      	orrs	r2, r1
90004954:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
90004956:	687b      	ldr	r3, [r7, #4]
90004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000495a:	f003 0320 	and.w	r3, r3, #32
9000495e:	2b00      	cmp	r3, #0
90004960:	d00a      	beq.n	90004978 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
90004962:	687b      	ldr	r3, [r7, #4]
90004964:	681b      	ldr	r3, [r3, #0]
90004966:	689b      	ldr	r3, [r3, #8]
90004968:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
9000496c:	687b      	ldr	r3, [r7, #4]
9000496e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90004970:	687b      	ldr	r3, [r7, #4]
90004972:	681b      	ldr	r3, [r3, #0]
90004974:	430a      	orrs	r2, r1
90004976:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
90004978:	687b      	ldr	r3, [r7, #4]
9000497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000497c:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004980:	2b00      	cmp	r3, #0
90004982:	d01a      	beq.n	900049ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
90004984:	687b      	ldr	r3, [r7, #4]
90004986:	681b      	ldr	r3, [r3, #0]
90004988:	685b      	ldr	r3, [r3, #4]
9000498a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
9000498e:	687b      	ldr	r3, [r7, #4]
90004990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90004992:	687b      	ldr	r3, [r7, #4]
90004994:	681b      	ldr	r3, [r3, #0]
90004996:	430a      	orrs	r2, r1
90004998:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
9000499a:	687b      	ldr	r3, [r7, #4]
9000499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000499e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900049a2:	d10a      	bne.n	900049ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
900049a4:	687b      	ldr	r3, [r7, #4]
900049a6:	681b      	ldr	r3, [r3, #0]
900049a8:	685b      	ldr	r3, [r3, #4]
900049aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
900049ae:	687b      	ldr	r3, [r7, #4]
900049b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
900049b2:	687b      	ldr	r3, [r7, #4]
900049b4:	681b      	ldr	r3, [r3, #0]
900049b6:	430a      	orrs	r2, r1
900049b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
900049ba:	687b      	ldr	r3, [r7, #4]
900049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900049be:	f003 0380 	and.w	r3, r3, #128	; 0x80
900049c2:	2b00      	cmp	r3, #0
900049c4:	d00a      	beq.n	900049dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
900049c6:	687b      	ldr	r3, [r7, #4]
900049c8:	681b      	ldr	r3, [r3, #0]
900049ca:	685b      	ldr	r3, [r3, #4]
900049cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
900049d0:	687b      	ldr	r3, [r7, #4]
900049d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
900049d4:	687b      	ldr	r3, [r7, #4]
900049d6:	681b      	ldr	r3, [r3, #0]
900049d8:	430a      	orrs	r2, r1
900049da:	605a      	str	r2, [r3, #4]
  }
}
900049dc:	bf00      	nop
900049de:	370c      	adds	r7, #12
900049e0:	46bd      	mov	sp, r7
900049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
900049e6:	4770      	bx	lr

900049e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
900049e8:	b580      	push	{r7, lr}
900049ea:	b086      	sub	sp, #24
900049ec:	af02      	add	r7, sp, #8
900049ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
900049f0:	687b      	ldr	r3, [r7, #4]
900049f2:	2200      	movs	r2, #0
900049f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
900049f8:	f7fc fa2a 	bl	90000e50 <HAL_GetTick>
900049fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
900049fe:	687b      	ldr	r3, [r7, #4]
90004a00:	681b      	ldr	r3, [r3, #0]
90004a02:	681b      	ldr	r3, [r3, #0]
90004a04:	f003 0308 	and.w	r3, r3, #8
90004a08:	2b08      	cmp	r3, #8
90004a0a:	d10e      	bne.n	90004a2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
90004a0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
90004a10:	9300      	str	r3, [sp, #0]
90004a12:	68fb      	ldr	r3, [r7, #12]
90004a14:	2200      	movs	r2, #0
90004a16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
90004a1a:	6878      	ldr	r0, [r7, #4]
90004a1c:	f000 f82f 	bl	90004a7e <UART_WaitOnFlagUntilTimeout>
90004a20:	4603      	mov	r3, r0
90004a22:	2b00      	cmp	r3, #0
90004a24:	d001      	beq.n	90004a2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
90004a26:	2303      	movs	r3, #3
90004a28:	e025      	b.n	90004a76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
90004a2a:	687b      	ldr	r3, [r7, #4]
90004a2c:	681b      	ldr	r3, [r3, #0]
90004a2e:	681b      	ldr	r3, [r3, #0]
90004a30:	f003 0304 	and.w	r3, r3, #4
90004a34:	2b04      	cmp	r3, #4
90004a36:	d10e      	bne.n	90004a56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
90004a38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
90004a3c:	9300      	str	r3, [sp, #0]
90004a3e:	68fb      	ldr	r3, [r7, #12]
90004a40:	2200      	movs	r2, #0
90004a42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
90004a46:	6878      	ldr	r0, [r7, #4]
90004a48:	f000 f819 	bl	90004a7e <UART_WaitOnFlagUntilTimeout>
90004a4c:	4603      	mov	r3, r0
90004a4e:	2b00      	cmp	r3, #0
90004a50:	d001      	beq.n	90004a56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
90004a52:	2303      	movs	r3, #3
90004a54:	e00f      	b.n	90004a76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
90004a56:	687b      	ldr	r3, [r7, #4]
90004a58:	2220      	movs	r2, #32
90004a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
90004a5e:	687b      	ldr	r3, [r7, #4]
90004a60:	2220      	movs	r2, #32
90004a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
90004a66:	687b      	ldr	r3, [r7, #4]
90004a68:	2200      	movs	r2, #0
90004a6a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
90004a6c:	687b      	ldr	r3, [r7, #4]
90004a6e:	2200      	movs	r2, #0
90004a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
90004a74:	2300      	movs	r3, #0
}
90004a76:	4618      	mov	r0, r3
90004a78:	3710      	adds	r7, #16
90004a7a:	46bd      	mov	sp, r7
90004a7c:	bd80      	pop	{r7, pc}

90004a7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
90004a7e:	b580      	push	{r7, lr}
90004a80:	b09c      	sub	sp, #112	; 0x70
90004a82:	af00      	add	r7, sp, #0
90004a84:	60f8      	str	r0, [r7, #12]
90004a86:	60b9      	str	r1, [r7, #8]
90004a88:	603b      	str	r3, [r7, #0]
90004a8a:	4613      	mov	r3, r2
90004a8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90004a8e:	e0a9      	b.n	90004be4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90004a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
90004a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90004a96:	f000 80a5 	beq.w	90004be4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90004a9a:	f7fc f9d9 	bl	90000e50 <HAL_GetTick>
90004a9e:	4602      	mov	r2, r0
90004aa0:	683b      	ldr	r3, [r7, #0]
90004aa2:	1ad3      	subs	r3, r2, r3
90004aa4:	6fba      	ldr	r2, [r7, #120]	; 0x78
90004aa6:	429a      	cmp	r2, r3
90004aa8:	d302      	bcc.n	90004ab0 <UART_WaitOnFlagUntilTimeout+0x32>
90004aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
90004aac:	2b00      	cmp	r3, #0
90004aae:	d140      	bne.n	90004b32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
90004ab0:	68fb      	ldr	r3, [r7, #12]
90004ab2:	681b      	ldr	r3, [r3, #0]
90004ab4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90004ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90004ab8:	e853 3f00 	ldrex	r3, [r3]
90004abc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
90004abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
90004ac0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
90004ac4:	667b      	str	r3, [r7, #100]	; 0x64
90004ac6:	68fb      	ldr	r3, [r7, #12]
90004ac8:	681b      	ldr	r3, [r3, #0]
90004aca:	461a      	mov	r2, r3
90004acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
90004ace:	65fb      	str	r3, [r7, #92]	; 0x5c
90004ad0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90004ad2:	6db9      	ldr	r1, [r7, #88]	; 0x58
90004ad4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
90004ad6:	e841 2300 	strex	r3, r2, [r1]
90004ada:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
90004adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
90004ade:	2b00      	cmp	r3, #0
90004ae0:	d1e6      	bne.n	90004ab0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
90004ae2:	68fb      	ldr	r3, [r7, #12]
90004ae4:	681b      	ldr	r3, [r3, #0]
90004ae6:	3308      	adds	r3, #8
90004ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90004aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90004aec:	e853 3f00 	ldrex	r3, [r3]
90004af0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
90004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90004af4:	f023 0301 	bic.w	r3, r3, #1
90004af8:	663b      	str	r3, [r7, #96]	; 0x60
90004afa:	68fb      	ldr	r3, [r7, #12]
90004afc:	681b      	ldr	r3, [r3, #0]
90004afe:	3308      	adds	r3, #8
90004b00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
90004b02:	64ba      	str	r2, [r7, #72]	; 0x48
90004b04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90004b06:	6c79      	ldr	r1, [r7, #68]	; 0x44
90004b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
90004b0a:	e841 2300 	strex	r3, r2, [r1]
90004b0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
90004b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90004b12:	2b00      	cmp	r3, #0
90004b14:	d1e5      	bne.n	90004ae2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
90004b16:	68fb      	ldr	r3, [r7, #12]
90004b18:	2220      	movs	r2, #32
90004b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
90004b1e:	68fb      	ldr	r3, [r7, #12]
90004b20:	2220      	movs	r2, #32
90004b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
90004b26:	68fb      	ldr	r3, [r7, #12]
90004b28:	2200      	movs	r2, #0
90004b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
90004b2e:	2303      	movs	r3, #3
90004b30:	e069      	b.n	90004c06 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
90004b32:	68fb      	ldr	r3, [r7, #12]
90004b34:	681b      	ldr	r3, [r3, #0]
90004b36:	681b      	ldr	r3, [r3, #0]
90004b38:	f003 0304 	and.w	r3, r3, #4
90004b3c:	2b00      	cmp	r3, #0
90004b3e:	d051      	beq.n	90004be4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
90004b40:	68fb      	ldr	r3, [r7, #12]
90004b42:	681b      	ldr	r3, [r3, #0]
90004b44:	69db      	ldr	r3, [r3, #28]
90004b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
90004b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90004b4e:	d149      	bne.n	90004be4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
90004b50:	68fb      	ldr	r3, [r7, #12]
90004b52:	681b      	ldr	r3, [r3, #0]
90004b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
90004b58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
90004b5a:	68fb      	ldr	r3, [r7, #12]
90004b5c:	681b      	ldr	r3, [r3, #0]
90004b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
90004b62:	e853 3f00 	ldrex	r3, [r3]
90004b66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
90004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90004b6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
90004b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
90004b70:	68fb      	ldr	r3, [r7, #12]
90004b72:	681b      	ldr	r3, [r3, #0]
90004b74:	461a      	mov	r2, r3
90004b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
90004b78:	637b      	str	r3, [r7, #52]	; 0x34
90004b7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90004b7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
90004b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90004b80:	e841 2300 	strex	r3, r2, [r1]
90004b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
90004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90004b88:	2b00      	cmp	r3, #0
90004b8a:	d1e6      	bne.n	90004b5a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
90004b8c:	68fb      	ldr	r3, [r7, #12]
90004b8e:	681b      	ldr	r3, [r3, #0]
90004b90:	3308      	adds	r3, #8
90004b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90004b94:	697b      	ldr	r3, [r7, #20]
90004b96:	e853 3f00 	ldrex	r3, [r3]
90004b9a:	613b      	str	r3, [r7, #16]
   return(result);
90004b9c:	693b      	ldr	r3, [r7, #16]
90004b9e:	f023 0301 	bic.w	r3, r3, #1
90004ba2:	66bb      	str	r3, [r7, #104]	; 0x68
90004ba4:	68fb      	ldr	r3, [r7, #12]
90004ba6:	681b      	ldr	r3, [r3, #0]
90004ba8:	3308      	adds	r3, #8
90004baa:	6eba      	ldr	r2, [r7, #104]	; 0x68
90004bac:	623a      	str	r2, [r7, #32]
90004bae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90004bb0:	69f9      	ldr	r1, [r7, #28]
90004bb2:	6a3a      	ldr	r2, [r7, #32]
90004bb4:	e841 2300 	strex	r3, r2, [r1]
90004bb8:	61bb      	str	r3, [r7, #24]
   return(result);
90004bba:	69bb      	ldr	r3, [r7, #24]
90004bbc:	2b00      	cmp	r3, #0
90004bbe:	d1e5      	bne.n	90004b8c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
90004bc0:	68fb      	ldr	r3, [r7, #12]
90004bc2:	2220      	movs	r2, #32
90004bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
90004bc8:	68fb      	ldr	r3, [r7, #12]
90004bca:	2220      	movs	r2, #32
90004bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
90004bd0:	68fb      	ldr	r3, [r7, #12]
90004bd2:	2220      	movs	r2, #32
90004bd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
90004bd8:	68fb      	ldr	r3, [r7, #12]
90004bda:	2200      	movs	r2, #0
90004bdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
90004be0:	2303      	movs	r3, #3
90004be2:	e010      	b.n	90004c06 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90004be4:	68fb      	ldr	r3, [r7, #12]
90004be6:	681b      	ldr	r3, [r3, #0]
90004be8:	69da      	ldr	r2, [r3, #28]
90004bea:	68bb      	ldr	r3, [r7, #8]
90004bec:	4013      	ands	r3, r2
90004bee:	68ba      	ldr	r2, [r7, #8]
90004bf0:	429a      	cmp	r2, r3
90004bf2:	bf0c      	ite	eq
90004bf4:	2301      	moveq	r3, #1
90004bf6:	2300      	movne	r3, #0
90004bf8:	b2db      	uxtb	r3, r3
90004bfa:	461a      	mov	r2, r3
90004bfc:	79fb      	ldrb	r3, [r7, #7]
90004bfe:	429a      	cmp	r2, r3
90004c00:	f43f af46 	beq.w	90004a90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90004c04:	2300      	movs	r3, #0
}
90004c06:	4618      	mov	r0, r3
90004c08:	3770      	adds	r7, #112	; 0x70
90004c0a:	46bd      	mov	sp, r7
90004c0c:	bd80      	pop	{r7, pc}

90004c0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
90004c0e:	b480      	push	{r7}
90004c10:	b085      	sub	sp, #20
90004c12:	af00      	add	r7, sp, #0
90004c14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
90004c16:	687b      	ldr	r3, [r7, #4]
90004c18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
90004c1c:	2b01      	cmp	r3, #1
90004c1e:	d101      	bne.n	90004c24 <HAL_UARTEx_DisableFifoMode+0x16>
90004c20:	2302      	movs	r3, #2
90004c22:	e027      	b.n	90004c74 <HAL_UARTEx_DisableFifoMode+0x66>
90004c24:	687b      	ldr	r3, [r7, #4]
90004c26:	2201      	movs	r2, #1
90004c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
90004c2c:	687b      	ldr	r3, [r7, #4]
90004c2e:	2224      	movs	r2, #36	; 0x24
90004c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
90004c34:	687b      	ldr	r3, [r7, #4]
90004c36:	681b      	ldr	r3, [r3, #0]
90004c38:	681b      	ldr	r3, [r3, #0]
90004c3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
90004c3c:	687b      	ldr	r3, [r7, #4]
90004c3e:	681b      	ldr	r3, [r3, #0]
90004c40:	681a      	ldr	r2, [r3, #0]
90004c42:	687b      	ldr	r3, [r7, #4]
90004c44:	681b      	ldr	r3, [r3, #0]
90004c46:	f022 0201 	bic.w	r2, r2, #1
90004c4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
90004c4c:	68fb      	ldr	r3, [r7, #12]
90004c4e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
90004c52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
90004c54:	687b      	ldr	r3, [r7, #4]
90004c56:	2200      	movs	r2, #0
90004c58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
90004c5a:	687b      	ldr	r3, [r7, #4]
90004c5c:	681b      	ldr	r3, [r3, #0]
90004c5e:	68fa      	ldr	r2, [r7, #12]
90004c60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
90004c62:	687b      	ldr	r3, [r7, #4]
90004c64:	2220      	movs	r2, #32
90004c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
90004c6a:	687b      	ldr	r3, [r7, #4]
90004c6c:	2200      	movs	r2, #0
90004c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
90004c72:	2300      	movs	r3, #0
}
90004c74:	4618      	mov	r0, r3
90004c76:	3714      	adds	r7, #20
90004c78:	46bd      	mov	sp, r7
90004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
90004c7e:	4770      	bx	lr

90004c80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
90004c80:	b580      	push	{r7, lr}
90004c82:	b084      	sub	sp, #16
90004c84:	af00      	add	r7, sp, #0
90004c86:	6078      	str	r0, [r7, #4]
90004c88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
90004c8a:	687b      	ldr	r3, [r7, #4]
90004c8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
90004c90:	2b01      	cmp	r3, #1
90004c92:	d101      	bne.n	90004c98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
90004c94:	2302      	movs	r3, #2
90004c96:	e02d      	b.n	90004cf4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
90004c98:	687b      	ldr	r3, [r7, #4]
90004c9a:	2201      	movs	r2, #1
90004c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
90004ca0:	687b      	ldr	r3, [r7, #4]
90004ca2:	2224      	movs	r2, #36	; 0x24
90004ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
90004ca8:	687b      	ldr	r3, [r7, #4]
90004caa:	681b      	ldr	r3, [r3, #0]
90004cac:	681b      	ldr	r3, [r3, #0]
90004cae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
90004cb0:	687b      	ldr	r3, [r7, #4]
90004cb2:	681b      	ldr	r3, [r3, #0]
90004cb4:	681a      	ldr	r2, [r3, #0]
90004cb6:	687b      	ldr	r3, [r7, #4]
90004cb8:	681b      	ldr	r3, [r3, #0]
90004cba:	f022 0201 	bic.w	r2, r2, #1
90004cbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
90004cc0:	687b      	ldr	r3, [r7, #4]
90004cc2:	681b      	ldr	r3, [r3, #0]
90004cc4:	689b      	ldr	r3, [r3, #8]
90004cc6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
90004cca:	687b      	ldr	r3, [r7, #4]
90004ccc:	681b      	ldr	r3, [r3, #0]
90004cce:	683a      	ldr	r2, [r7, #0]
90004cd0:	430a      	orrs	r2, r1
90004cd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
90004cd4:	6878      	ldr	r0, [r7, #4]
90004cd6:	f000 f84f 	bl	90004d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
90004cda:	687b      	ldr	r3, [r7, #4]
90004cdc:	681b      	ldr	r3, [r3, #0]
90004cde:	68fa      	ldr	r2, [r7, #12]
90004ce0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
90004ce2:	687b      	ldr	r3, [r7, #4]
90004ce4:	2220      	movs	r2, #32
90004ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
90004cea:	687b      	ldr	r3, [r7, #4]
90004cec:	2200      	movs	r2, #0
90004cee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
90004cf2:	2300      	movs	r3, #0
}
90004cf4:	4618      	mov	r0, r3
90004cf6:	3710      	adds	r7, #16
90004cf8:	46bd      	mov	sp, r7
90004cfa:	bd80      	pop	{r7, pc}

90004cfc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
90004cfc:	b580      	push	{r7, lr}
90004cfe:	b084      	sub	sp, #16
90004d00:	af00      	add	r7, sp, #0
90004d02:	6078      	str	r0, [r7, #4]
90004d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
90004d06:	687b      	ldr	r3, [r7, #4]
90004d08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
90004d0c:	2b01      	cmp	r3, #1
90004d0e:	d101      	bne.n	90004d14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
90004d10:	2302      	movs	r3, #2
90004d12:	e02d      	b.n	90004d70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
90004d14:	687b      	ldr	r3, [r7, #4]
90004d16:	2201      	movs	r2, #1
90004d18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
90004d1c:	687b      	ldr	r3, [r7, #4]
90004d1e:	2224      	movs	r2, #36	; 0x24
90004d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
90004d24:	687b      	ldr	r3, [r7, #4]
90004d26:	681b      	ldr	r3, [r3, #0]
90004d28:	681b      	ldr	r3, [r3, #0]
90004d2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
90004d2c:	687b      	ldr	r3, [r7, #4]
90004d2e:	681b      	ldr	r3, [r3, #0]
90004d30:	681a      	ldr	r2, [r3, #0]
90004d32:	687b      	ldr	r3, [r7, #4]
90004d34:	681b      	ldr	r3, [r3, #0]
90004d36:	f022 0201 	bic.w	r2, r2, #1
90004d3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
90004d3c:	687b      	ldr	r3, [r7, #4]
90004d3e:	681b      	ldr	r3, [r3, #0]
90004d40:	689b      	ldr	r3, [r3, #8]
90004d42:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
90004d46:	687b      	ldr	r3, [r7, #4]
90004d48:	681b      	ldr	r3, [r3, #0]
90004d4a:	683a      	ldr	r2, [r7, #0]
90004d4c:	430a      	orrs	r2, r1
90004d4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
90004d50:	6878      	ldr	r0, [r7, #4]
90004d52:	f000 f811 	bl	90004d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
90004d56:	687b      	ldr	r3, [r7, #4]
90004d58:	681b      	ldr	r3, [r3, #0]
90004d5a:	68fa      	ldr	r2, [r7, #12]
90004d5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
90004d5e:	687b      	ldr	r3, [r7, #4]
90004d60:	2220      	movs	r2, #32
90004d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
90004d66:	687b      	ldr	r3, [r7, #4]
90004d68:	2200      	movs	r2, #0
90004d6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
90004d6e:	2300      	movs	r3, #0
}
90004d70:	4618      	mov	r0, r3
90004d72:	3710      	adds	r7, #16
90004d74:	46bd      	mov	sp, r7
90004d76:	bd80      	pop	{r7, pc}

90004d78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
90004d78:	b480      	push	{r7}
90004d7a:	b085      	sub	sp, #20
90004d7c:	af00      	add	r7, sp, #0
90004d7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
90004d80:	687b      	ldr	r3, [r7, #4]
90004d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90004d84:	2b00      	cmp	r3, #0
90004d86:	d108      	bne.n	90004d9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
90004d88:	687b      	ldr	r3, [r7, #4]
90004d8a:	2201      	movs	r2, #1
90004d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
90004d90:	687b      	ldr	r3, [r7, #4]
90004d92:	2201      	movs	r2, #1
90004d94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
90004d98:	e031      	b.n	90004dfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
90004d9a:	2310      	movs	r3, #16
90004d9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
90004d9e:	2310      	movs	r3, #16
90004da0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
90004da2:	687b      	ldr	r3, [r7, #4]
90004da4:	681b      	ldr	r3, [r3, #0]
90004da6:	689b      	ldr	r3, [r3, #8]
90004da8:	0e5b      	lsrs	r3, r3, #25
90004daa:	b2db      	uxtb	r3, r3
90004dac:	f003 0307 	and.w	r3, r3, #7
90004db0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
90004db2:	687b      	ldr	r3, [r7, #4]
90004db4:	681b      	ldr	r3, [r3, #0]
90004db6:	689b      	ldr	r3, [r3, #8]
90004db8:	0f5b      	lsrs	r3, r3, #29
90004dba:	b2db      	uxtb	r3, r3
90004dbc:	f003 0307 	and.w	r3, r3, #7
90004dc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
90004dc2:	7bbb      	ldrb	r3, [r7, #14]
90004dc4:	7b3a      	ldrb	r2, [r7, #12]
90004dc6:	4911      	ldr	r1, [pc, #68]	; (90004e0c <UARTEx_SetNbDataToProcess+0x94>)
90004dc8:	5c8a      	ldrb	r2, [r1, r2]
90004dca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
90004dce:	7b3a      	ldrb	r2, [r7, #12]
90004dd0:	490f      	ldr	r1, [pc, #60]	; (90004e10 <UARTEx_SetNbDataToProcess+0x98>)
90004dd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
90004dd4:	fb93 f3f2 	sdiv	r3, r3, r2
90004dd8:	b29a      	uxth	r2, r3
90004dda:	687b      	ldr	r3, [r7, #4]
90004ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
90004de0:	7bfb      	ldrb	r3, [r7, #15]
90004de2:	7b7a      	ldrb	r2, [r7, #13]
90004de4:	4909      	ldr	r1, [pc, #36]	; (90004e0c <UARTEx_SetNbDataToProcess+0x94>)
90004de6:	5c8a      	ldrb	r2, [r1, r2]
90004de8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
90004dec:	7b7a      	ldrb	r2, [r7, #13]
90004dee:	4908      	ldr	r1, [pc, #32]	; (90004e10 <UARTEx_SetNbDataToProcess+0x98>)
90004df0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
90004df2:	fb93 f3f2 	sdiv	r3, r3, r2
90004df6:	b29a      	uxth	r2, r3
90004df8:	687b      	ldr	r3, [r7, #4]
90004dfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
90004dfe:	bf00      	nop
90004e00:	3714      	adds	r7, #20
90004e02:	46bd      	mov	sp, r7
90004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
90004e08:	4770      	bx	lr
90004e0a:	bf00      	nop
90004e0c:	900058d8 	.word	0x900058d8
90004e10:	900058e0 	.word	0x900058e0

90004e14 <__errno>:
90004e14:	4b01      	ldr	r3, [pc, #4]	; (90004e1c <__errno+0x8>)
90004e16:	6818      	ldr	r0, [r3, #0]
90004e18:	4770      	bx	lr
90004e1a:	bf00      	nop
90004e1c:	24000010 	.word	0x24000010

90004e20 <__libc_init_array>:
90004e20:	b570      	push	{r4, r5, r6, lr}
90004e22:	4d0d      	ldr	r5, [pc, #52]	; (90004e58 <__libc_init_array+0x38>)
90004e24:	4c0d      	ldr	r4, [pc, #52]	; (90004e5c <__libc_init_array+0x3c>)
90004e26:	1b64      	subs	r4, r4, r5
90004e28:	10a4      	asrs	r4, r4, #2
90004e2a:	2600      	movs	r6, #0
90004e2c:	42a6      	cmp	r6, r4
90004e2e:	d109      	bne.n	90004e44 <__libc_init_array+0x24>
90004e30:	4d0b      	ldr	r5, [pc, #44]	; (90004e60 <__libc_init_array+0x40>)
90004e32:	4c0c      	ldr	r4, [pc, #48]	; (90004e64 <__libc_init_array+0x44>)
90004e34:	f000 fd1e 	bl	90005874 <_init>
90004e38:	1b64      	subs	r4, r4, r5
90004e3a:	10a4      	asrs	r4, r4, #2
90004e3c:	2600      	movs	r6, #0
90004e3e:	42a6      	cmp	r6, r4
90004e40:	d105      	bne.n	90004e4e <__libc_init_array+0x2e>
90004e42:	bd70      	pop	{r4, r5, r6, pc}
90004e44:	f855 3b04 	ldr.w	r3, [r5], #4
90004e48:	4798      	blx	r3
90004e4a:	3601      	adds	r6, #1
90004e4c:	e7ee      	b.n	90004e2c <__libc_init_array+0xc>
90004e4e:	f855 3b04 	ldr.w	r3, [r5], #4
90004e52:	4798      	blx	r3
90004e54:	3601      	adds	r6, #1
90004e56:	e7f2      	b.n	90004e3e <__libc_init_array+0x1e>
90004e58:	90005954 	.word	0x90005954
90004e5c:	90005954 	.word	0x90005954
90004e60:	90005954 	.word	0x90005954
90004e64:	90005958 	.word	0x90005958

90004e68 <memset>:
90004e68:	4402      	add	r2, r0
90004e6a:	4603      	mov	r3, r0
90004e6c:	4293      	cmp	r3, r2
90004e6e:	d100      	bne.n	90004e72 <memset+0xa>
90004e70:	4770      	bx	lr
90004e72:	f803 1b01 	strb.w	r1, [r3], #1
90004e76:	e7f9      	b.n	90004e6c <memset+0x4>

90004e78 <_puts_r>:
90004e78:	b570      	push	{r4, r5, r6, lr}
90004e7a:	460e      	mov	r6, r1
90004e7c:	4605      	mov	r5, r0
90004e7e:	b118      	cbz	r0, 90004e88 <_puts_r+0x10>
90004e80:	6983      	ldr	r3, [r0, #24]
90004e82:	b90b      	cbnz	r3, 90004e88 <_puts_r+0x10>
90004e84:	f000 fa48 	bl	90005318 <__sinit>
90004e88:	69ab      	ldr	r3, [r5, #24]
90004e8a:	68ac      	ldr	r4, [r5, #8]
90004e8c:	b913      	cbnz	r3, 90004e94 <_puts_r+0x1c>
90004e8e:	4628      	mov	r0, r5
90004e90:	f000 fa42 	bl	90005318 <__sinit>
90004e94:	4b2c      	ldr	r3, [pc, #176]	; (90004f48 <_puts_r+0xd0>)
90004e96:	429c      	cmp	r4, r3
90004e98:	d120      	bne.n	90004edc <_puts_r+0x64>
90004e9a:	686c      	ldr	r4, [r5, #4]
90004e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
90004e9e:	07db      	lsls	r3, r3, #31
90004ea0:	d405      	bmi.n	90004eae <_puts_r+0x36>
90004ea2:	89a3      	ldrh	r3, [r4, #12]
90004ea4:	0598      	lsls	r0, r3, #22
90004ea6:	d402      	bmi.n	90004eae <_puts_r+0x36>
90004ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
90004eaa:	f000 fad3 	bl	90005454 <__retarget_lock_acquire_recursive>
90004eae:	89a3      	ldrh	r3, [r4, #12]
90004eb0:	0719      	lsls	r1, r3, #28
90004eb2:	d51d      	bpl.n	90004ef0 <_puts_r+0x78>
90004eb4:	6923      	ldr	r3, [r4, #16]
90004eb6:	b1db      	cbz	r3, 90004ef0 <_puts_r+0x78>
90004eb8:	3e01      	subs	r6, #1
90004eba:	68a3      	ldr	r3, [r4, #8]
90004ebc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
90004ec0:	3b01      	subs	r3, #1
90004ec2:	60a3      	str	r3, [r4, #8]
90004ec4:	bb39      	cbnz	r1, 90004f16 <_puts_r+0x9e>
90004ec6:	2b00      	cmp	r3, #0
90004ec8:	da38      	bge.n	90004f3c <_puts_r+0xc4>
90004eca:	4622      	mov	r2, r4
90004ecc:	210a      	movs	r1, #10
90004ece:	4628      	mov	r0, r5
90004ed0:	f000 f848 	bl	90004f64 <__swbuf_r>
90004ed4:	3001      	adds	r0, #1
90004ed6:	d011      	beq.n	90004efc <_puts_r+0x84>
90004ed8:	250a      	movs	r5, #10
90004eda:	e011      	b.n	90004f00 <_puts_r+0x88>
90004edc:	4b1b      	ldr	r3, [pc, #108]	; (90004f4c <_puts_r+0xd4>)
90004ede:	429c      	cmp	r4, r3
90004ee0:	d101      	bne.n	90004ee6 <_puts_r+0x6e>
90004ee2:	68ac      	ldr	r4, [r5, #8]
90004ee4:	e7da      	b.n	90004e9c <_puts_r+0x24>
90004ee6:	4b1a      	ldr	r3, [pc, #104]	; (90004f50 <_puts_r+0xd8>)
90004ee8:	429c      	cmp	r4, r3
90004eea:	bf08      	it	eq
90004eec:	68ec      	ldreq	r4, [r5, #12]
90004eee:	e7d5      	b.n	90004e9c <_puts_r+0x24>
90004ef0:	4621      	mov	r1, r4
90004ef2:	4628      	mov	r0, r5
90004ef4:	f000 f888 	bl	90005008 <__swsetup_r>
90004ef8:	2800      	cmp	r0, #0
90004efa:	d0dd      	beq.n	90004eb8 <_puts_r+0x40>
90004efc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
90004f00:	6e63      	ldr	r3, [r4, #100]	; 0x64
90004f02:	07da      	lsls	r2, r3, #31
90004f04:	d405      	bmi.n	90004f12 <_puts_r+0x9a>
90004f06:	89a3      	ldrh	r3, [r4, #12]
90004f08:	059b      	lsls	r3, r3, #22
90004f0a:	d402      	bmi.n	90004f12 <_puts_r+0x9a>
90004f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
90004f0e:	f000 faa2 	bl	90005456 <__retarget_lock_release_recursive>
90004f12:	4628      	mov	r0, r5
90004f14:	bd70      	pop	{r4, r5, r6, pc}
90004f16:	2b00      	cmp	r3, #0
90004f18:	da04      	bge.n	90004f24 <_puts_r+0xac>
90004f1a:	69a2      	ldr	r2, [r4, #24]
90004f1c:	429a      	cmp	r2, r3
90004f1e:	dc06      	bgt.n	90004f2e <_puts_r+0xb6>
90004f20:	290a      	cmp	r1, #10
90004f22:	d004      	beq.n	90004f2e <_puts_r+0xb6>
90004f24:	6823      	ldr	r3, [r4, #0]
90004f26:	1c5a      	adds	r2, r3, #1
90004f28:	6022      	str	r2, [r4, #0]
90004f2a:	7019      	strb	r1, [r3, #0]
90004f2c:	e7c5      	b.n	90004eba <_puts_r+0x42>
90004f2e:	4622      	mov	r2, r4
90004f30:	4628      	mov	r0, r5
90004f32:	f000 f817 	bl	90004f64 <__swbuf_r>
90004f36:	3001      	adds	r0, #1
90004f38:	d1bf      	bne.n	90004eba <_puts_r+0x42>
90004f3a:	e7df      	b.n	90004efc <_puts_r+0x84>
90004f3c:	6823      	ldr	r3, [r4, #0]
90004f3e:	250a      	movs	r5, #10
90004f40:	1c5a      	adds	r2, r3, #1
90004f42:	6022      	str	r2, [r4, #0]
90004f44:	701d      	strb	r5, [r3, #0]
90004f46:	e7db      	b.n	90004f00 <_puts_r+0x88>
90004f48:	9000590c 	.word	0x9000590c
90004f4c:	9000592c 	.word	0x9000592c
90004f50:	900058ec 	.word	0x900058ec

90004f54 <puts>:
90004f54:	4b02      	ldr	r3, [pc, #8]	; (90004f60 <puts+0xc>)
90004f56:	4601      	mov	r1, r0
90004f58:	6818      	ldr	r0, [r3, #0]
90004f5a:	f7ff bf8d 	b.w	90004e78 <_puts_r>
90004f5e:	bf00      	nop
90004f60:	24000010 	.word	0x24000010

90004f64 <__swbuf_r>:
90004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90004f66:	460e      	mov	r6, r1
90004f68:	4614      	mov	r4, r2
90004f6a:	4605      	mov	r5, r0
90004f6c:	b118      	cbz	r0, 90004f76 <__swbuf_r+0x12>
90004f6e:	6983      	ldr	r3, [r0, #24]
90004f70:	b90b      	cbnz	r3, 90004f76 <__swbuf_r+0x12>
90004f72:	f000 f9d1 	bl	90005318 <__sinit>
90004f76:	4b21      	ldr	r3, [pc, #132]	; (90004ffc <__swbuf_r+0x98>)
90004f78:	429c      	cmp	r4, r3
90004f7a:	d12b      	bne.n	90004fd4 <__swbuf_r+0x70>
90004f7c:	686c      	ldr	r4, [r5, #4]
90004f7e:	69a3      	ldr	r3, [r4, #24]
90004f80:	60a3      	str	r3, [r4, #8]
90004f82:	89a3      	ldrh	r3, [r4, #12]
90004f84:	071a      	lsls	r2, r3, #28
90004f86:	d52f      	bpl.n	90004fe8 <__swbuf_r+0x84>
90004f88:	6923      	ldr	r3, [r4, #16]
90004f8a:	b36b      	cbz	r3, 90004fe8 <__swbuf_r+0x84>
90004f8c:	6923      	ldr	r3, [r4, #16]
90004f8e:	6820      	ldr	r0, [r4, #0]
90004f90:	1ac0      	subs	r0, r0, r3
90004f92:	6963      	ldr	r3, [r4, #20]
90004f94:	b2f6      	uxtb	r6, r6
90004f96:	4283      	cmp	r3, r0
90004f98:	4637      	mov	r7, r6
90004f9a:	dc04      	bgt.n	90004fa6 <__swbuf_r+0x42>
90004f9c:	4621      	mov	r1, r4
90004f9e:	4628      	mov	r0, r5
90004fa0:	f000 f926 	bl	900051f0 <_fflush_r>
90004fa4:	bb30      	cbnz	r0, 90004ff4 <__swbuf_r+0x90>
90004fa6:	68a3      	ldr	r3, [r4, #8]
90004fa8:	3b01      	subs	r3, #1
90004faa:	60a3      	str	r3, [r4, #8]
90004fac:	6823      	ldr	r3, [r4, #0]
90004fae:	1c5a      	adds	r2, r3, #1
90004fb0:	6022      	str	r2, [r4, #0]
90004fb2:	701e      	strb	r6, [r3, #0]
90004fb4:	6963      	ldr	r3, [r4, #20]
90004fb6:	3001      	adds	r0, #1
90004fb8:	4283      	cmp	r3, r0
90004fba:	d004      	beq.n	90004fc6 <__swbuf_r+0x62>
90004fbc:	89a3      	ldrh	r3, [r4, #12]
90004fbe:	07db      	lsls	r3, r3, #31
90004fc0:	d506      	bpl.n	90004fd0 <__swbuf_r+0x6c>
90004fc2:	2e0a      	cmp	r6, #10
90004fc4:	d104      	bne.n	90004fd0 <__swbuf_r+0x6c>
90004fc6:	4621      	mov	r1, r4
90004fc8:	4628      	mov	r0, r5
90004fca:	f000 f911 	bl	900051f0 <_fflush_r>
90004fce:	b988      	cbnz	r0, 90004ff4 <__swbuf_r+0x90>
90004fd0:	4638      	mov	r0, r7
90004fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90004fd4:	4b0a      	ldr	r3, [pc, #40]	; (90005000 <__swbuf_r+0x9c>)
90004fd6:	429c      	cmp	r4, r3
90004fd8:	d101      	bne.n	90004fde <__swbuf_r+0x7a>
90004fda:	68ac      	ldr	r4, [r5, #8]
90004fdc:	e7cf      	b.n	90004f7e <__swbuf_r+0x1a>
90004fde:	4b09      	ldr	r3, [pc, #36]	; (90005004 <__swbuf_r+0xa0>)
90004fe0:	429c      	cmp	r4, r3
90004fe2:	bf08      	it	eq
90004fe4:	68ec      	ldreq	r4, [r5, #12]
90004fe6:	e7ca      	b.n	90004f7e <__swbuf_r+0x1a>
90004fe8:	4621      	mov	r1, r4
90004fea:	4628      	mov	r0, r5
90004fec:	f000 f80c 	bl	90005008 <__swsetup_r>
90004ff0:	2800      	cmp	r0, #0
90004ff2:	d0cb      	beq.n	90004f8c <__swbuf_r+0x28>
90004ff4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
90004ff8:	e7ea      	b.n	90004fd0 <__swbuf_r+0x6c>
90004ffa:	bf00      	nop
90004ffc:	9000590c 	.word	0x9000590c
90005000:	9000592c 	.word	0x9000592c
90005004:	900058ec 	.word	0x900058ec

90005008 <__swsetup_r>:
90005008:	4b32      	ldr	r3, [pc, #200]	; (900050d4 <__swsetup_r+0xcc>)
9000500a:	b570      	push	{r4, r5, r6, lr}
9000500c:	681d      	ldr	r5, [r3, #0]
9000500e:	4606      	mov	r6, r0
90005010:	460c      	mov	r4, r1
90005012:	b125      	cbz	r5, 9000501e <__swsetup_r+0x16>
90005014:	69ab      	ldr	r3, [r5, #24]
90005016:	b913      	cbnz	r3, 9000501e <__swsetup_r+0x16>
90005018:	4628      	mov	r0, r5
9000501a:	f000 f97d 	bl	90005318 <__sinit>
9000501e:	4b2e      	ldr	r3, [pc, #184]	; (900050d8 <__swsetup_r+0xd0>)
90005020:	429c      	cmp	r4, r3
90005022:	d10f      	bne.n	90005044 <__swsetup_r+0x3c>
90005024:	686c      	ldr	r4, [r5, #4]
90005026:	89a3      	ldrh	r3, [r4, #12]
90005028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9000502c:	0719      	lsls	r1, r3, #28
9000502e:	d42c      	bmi.n	9000508a <__swsetup_r+0x82>
90005030:	06dd      	lsls	r5, r3, #27
90005032:	d411      	bmi.n	90005058 <__swsetup_r+0x50>
90005034:	2309      	movs	r3, #9
90005036:	6033      	str	r3, [r6, #0]
90005038:	f042 0340 	orr.w	r3, r2, #64	; 0x40
9000503c:	81a3      	strh	r3, [r4, #12]
9000503e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90005042:	e03e      	b.n	900050c2 <__swsetup_r+0xba>
90005044:	4b25      	ldr	r3, [pc, #148]	; (900050dc <__swsetup_r+0xd4>)
90005046:	429c      	cmp	r4, r3
90005048:	d101      	bne.n	9000504e <__swsetup_r+0x46>
9000504a:	68ac      	ldr	r4, [r5, #8]
9000504c:	e7eb      	b.n	90005026 <__swsetup_r+0x1e>
9000504e:	4b24      	ldr	r3, [pc, #144]	; (900050e0 <__swsetup_r+0xd8>)
90005050:	429c      	cmp	r4, r3
90005052:	bf08      	it	eq
90005054:	68ec      	ldreq	r4, [r5, #12]
90005056:	e7e6      	b.n	90005026 <__swsetup_r+0x1e>
90005058:	0758      	lsls	r0, r3, #29
9000505a:	d512      	bpl.n	90005082 <__swsetup_r+0x7a>
9000505c:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000505e:	b141      	cbz	r1, 90005072 <__swsetup_r+0x6a>
90005060:	f104 0344 	add.w	r3, r4, #68	; 0x44
90005064:	4299      	cmp	r1, r3
90005066:	d002      	beq.n	9000506e <__swsetup_r+0x66>
90005068:	4630      	mov	r0, r6
9000506a:	f000 fa5b 	bl	90005524 <_free_r>
9000506e:	2300      	movs	r3, #0
90005070:	6363      	str	r3, [r4, #52]	; 0x34
90005072:	89a3      	ldrh	r3, [r4, #12]
90005074:	f023 0324 	bic.w	r3, r3, #36	; 0x24
90005078:	81a3      	strh	r3, [r4, #12]
9000507a:	2300      	movs	r3, #0
9000507c:	6063      	str	r3, [r4, #4]
9000507e:	6923      	ldr	r3, [r4, #16]
90005080:	6023      	str	r3, [r4, #0]
90005082:	89a3      	ldrh	r3, [r4, #12]
90005084:	f043 0308 	orr.w	r3, r3, #8
90005088:	81a3      	strh	r3, [r4, #12]
9000508a:	6923      	ldr	r3, [r4, #16]
9000508c:	b94b      	cbnz	r3, 900050a2 <__swsetup_r+0x9a>
9000508e:	89a3      	ldrh	r3, [r4, #12]
90005090:	f403 7320 	and.w	r3, r3, #640	; 0x280
90005094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90005098:	d003      	beq.n	900050a2 <__swsetup_r+0x9a>
9000509a:	4621      	mov	r1, r4
9000509c:	4630      	mov	r0, r6
9000509e:	f000 fa01 	bl	900054a4 <__smakebuf_r>
900050a2:	89a0      	ldrh	r0, [r4, #12]
900050a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
900050a8:	f010 0301 	ands.w	r3, r0, #1
900050ac:	d00a      	beq.n	900050c4 <__swsetup_r+0xbc>
900050ae:	2300      	movs	r3, #0
900050b0:	60a3      	str	r3, [r4, #8]
900050b2:	6963      	ldr	r3, [r4, #20]
900050b4:	425b      	negs	r3, r3
900050b6:	61a3      	str	r3, [r4, #24]
900050b8:	6923      	ldr	r3, [r4, #16]
900050ba:	b943      	cbnz	r3, 900050ce <__swsetup_r+0xc6>
900050bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
900050c0:	d1ba      	bne.n	90005038 <__swsetup_r+0x30>
900050c2:	bd70      	pop	{r4, r5, r6, pc}
900050c4:	0781      	lsls	r1, r0, #30
900050c6:	bf58      	it	pl
900050c8:	6963      	ldrpl	r3, [r4, #20]
900050ca:	60a3      	str	r3, [r4, #8]
900050cc:	e7f4      	b.n	900050b8 <__swsetup_r+0xb0>
900050ce:	2000      	movs	r0, #0
900050d0:	e7f7      	b.n	900050c2 <__swsetup_r+0xba>
900050d2:	bf00      	nop
900050d4:	24000010 	.word	0x24000010
900050d8:	9000590c 	.word	0x9000590c
900050dc:	9000592c 	.word	0x9000592c
900050e0:	900058ec 	.word	0x900058ec

900050e4 <__sflush_r>:
900050e4:	898a      	ldrh	r2, [r1, #12]
900050e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900050ea:	4605      	mov	r5, r0
900050ec:	0710      	lsls	r0, r2, #28
900050ee:	460c      	mov	r4, r1
900050f0:	d458      	bmi.n	900051a4 <__sflush_r+0xc0>
900050f2:	684b      	ldr	r3, [r1, #4]
900050f4:	2b00      	cmp	r3, #0
900050f6:	dc05      	bgt.n	90005104 <__sflush_r+0x20>
900050f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
900050fa:	2b00      	cmp	r3, #0
900050fc:	dc02      	bgt.n	90005104 <__sflush_r+0x20>
900050fe:	2000      	movs	r0, #0
90005100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90005104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90005106:	2e00      	cmp	r6, #0
90005108:	d0f9      	beq.n	900050fe <__sflush_r+0x1a>
9000510a:	2300      	movs	r3, #0
9000510c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90005110:	682f      	ldr	r7, [r5, #0]
90005112:	602b      	str	r3, [r5, #0]
90005114:	d032      	beq.n	9000517c <__sflush_r+0x98>
90005116:	6d60      	ldr	r0, [r4, #84]	; 0x54
90005118:	89a3      	ldrh	r3, [r4, #12]
9000511a:	075a      	lsls	r2, r3, #29
9000511c:	d505      	bpl.n	9000512a <__sflush_r+0x46>
9000511e:	6863      	ldr	r3, [r4, #4]
90005120:	1ac0      	subs	r0, r0, r3
90005122:	6b63      	ldr	r3, [r4, #52]	; 0x34
90005124:	b10b      	cbz	r3, 9000512a <__sflush_r+0x46>
90005126:	6c23      	ldr	r3, [r4, #64]	; 0x40
90005128:	1ac0      	subs	r0, r0, r3
9000512a:	2300      	movs	r3, #0
9000512c:	4602      	mov	r2, r0
9000512e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90005130:	6a21      	ldr	r1, [r4, #32]
90005132:	4628      	mov	r0, r5
90005134:	47b0      	blx	r6
90005136:	1c43      	adds	r3, r0, #1
90005138:	89a3      	ldrh	r3, [r4, #12]
9000513a:	d106      	bne.n	9000514a <__sflush_r+0x66>
9000513c:	6829      	ldr	r1, [r5, #0]
9000513e:	291d      	cmp	r1, #29
90005140:	d82c      	bhi.n	9000519c <__sflush_r+0xb8>
90005142:	4a2a      	ldr	r2, [pc, #168]	; (900051ec <__sflush_r+0x108>)
90005144:	40ca      	lsrs	r2, r1
90005146:	07d6      	lsls	r6, r2, #31
90005148:	d528      	bpl.n	9000519c <__sflush_r+0xb8>
9000514a:	2200      	movs	r2, #0
9000514c:	6062      	str	r2, [r4, #4]
9000514e:	04d9      	lsls	r1, r3, #19
90005150:	6922      	ldr	r2, [r4, #16]
90005152:	6022      	str	r2, [r4, #0]
90005154:	d504      	bpl.n	90005160 <__sflush_r+0x7c>
90005156:	1c42      	adds	r2, r0, #1
90005158:	d101      	bne.n	9000515e <__sflush_r+0x7a>
9000515a:	682b      	ldr	r3, [r5, #0]
9000515c:	b903      	cbnz	r3, 90005160 <__sflush_r+0x7c>
9000515e:	6560      	str	r0, [r4, #84]	; 0x54
90005160:	6b61      	ldr	r1, [r4, #52]	; 0x34
90005162:	602f      	str	r7, [r5, #0]
90005164:	2900      	cmp	r1, #0
90005166:	d0ca      	beq.n	900050fe <__sflush_r+0x1a>
90005168:	f104 0344 	add.w	r3, r4, #68	; 0x44
9000516c:	4299      	cmp	r1, r3
9000516e:	d002      	beq.n	90005176 <__sflush_r+0x92>
90005170:	4628      	mov	r0, r5
90005172:	f000 f9d7 	bl	90005524 <_free_r>
90005176:	2000      	movs	r0, #0
90005178:	6360      	str	r0, [r4, #52]	; 0x34
9000517a:	e7c1      	b.n	90005100 <__sflush_r+0x1c>
9000517c:	6a21      	ldr	r1, [r4, #32]
9000517e:	2301      	movs	r3, #1
90005180:	4628      	mov	r0, r5
90005182:	47b0      	blx	r6
90005184:	1c41      	adds	r1, r0, #1
90005186:	d1c7      	bne.n	90005118 <__sflush_r+0x34>
90005188:	682b      	ldr	r3, [r5, #0]
9000518a:	2b00      	cmp	r3, #0
9000518c:	d0c4      	beq.n	90005118 <__sflush_r+0x34>
9000518e:	2b1d      	cmp	r3, #29
90005190:	d001      	beq.n	90005196 <__sflush_r+0xb2>
90005192:	2b16      	cmp	r3, #22
90005194:	d101      	bne.n	9000519a <__sflush_r+0xb6>
90005196:	602f      	str	r7, [r5, #0]
90005198:	e7b1      	b.n	900050fe <__sflush_r+0x1a>
9000519a:	89a3      	ldrh	r3, [r4, #12]
9000519c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900051a0:	81a3      	strh	r3, [r4, #12]
900051a2:	e7ad      	b.n	90005100 <__sflush_r+0x1c>
900051a4:	690f      	ldr	r7, [r1, #16]
900051a6:	2f00      	cmp	r7, #0
900051a8:	d0a9      	beq.n	900050fe <__sflush_r+0x1a>
900051aa:	0793      	lsls	r3, r2, #30
900051ac:	680e      	ldr	r6, [r1, #0]
900051ae:	bf08      	it	eq
900051b0:	694b      	ldreq	r3, [r1, #20]
900051b2:	600f      	str	r7, [r1, #0]
900051b4:	bf18      	it	ne
900051b6:	2300      	movne	r3, #0
900051b8:	eba6 0807 	sub.w	r8, r6, r7
900051bc:	608b      	str	r3, [r1, #8]
900051be:	f1b8 0f00 	cmp.w	r8, #0
900051c2:	dd9c      	ble.n	900050fe <__sflush_r+0x1a>
900051c4:	6a21      	ldr	r1, [r4, #32]
900051c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
900051c8:	4643      	mov	r3, r8
900051ca:	463a      	mov	r2, r7
900051cc:	4628      	mov	r0, r5
900051ce:	47b0      	blx	r6
900051d0:	2800      	cmp	r0, #0
900051d2:	dc06      	bgt.n	900051e2 <__sflush_r+0xfe>
900051d4:	89a3      	ldrh	r3, [r4, #12]
900051d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900051da:	81a3      	strh	r3, [r4, #12]
900051dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
900051e0:	e78e      	b.n	90005100 <__sflush_r+0x1c>
900051e2:	4407      	add	r7, r0
900051e4:	eba8 0800 	sub.w	r8, r8, r0
900051e8:	e7e9      	b.n	900051be <__sflush_r+0xda>
900051ea:	bf00      	nop
900051ec:	20400001 	.word	0x20400001

900051f0 <_fflush_r>:
900051f0:	b538      	push	{r3, r4, r5, lr}
900051f2:	690b      	ldr	r3, [r1, #16]
900051f4:	4605      	mov	r5, r0
900051f6:	460c      	mov	r4, r1
900051f8:	b913      	cbnz	r3, 90005200 <_fflush_r+0x10>
900051fa:	2500      	movs	r5, #0
900051fc:	4628      	mov	r0, r5
900051fe:	bd38      	pop	{r3, r4, r5, pc}
90005200:	b118      	cbz	r0, 9000520a <_fflush_r+0x1a>
90005202:	6983      	ldr	r3, [r0, #24]
90005204:	b90b      	cbnz	r3, 9000520a <_fflush_r+0x1a>
90005206:	f000 f887 	bl	90005318 <__sinit>
9000520a:	4b14      	ldr	r3, [pc, #80]	; (9000525c <_fflush_r+0x6c>)
9000520c:	429c      	cmp	r4, r3
9000520e:	d11b      	bne.n	90005248 <_fflush_r+0x58>
90005210:	686c      	ldr	r4, [r5, #4]
90005212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90005216:	2b00      	cmp	r3, #0
90005218:	d0ef      	beq.n	900051fa <_fflush_r+0xa>
9000521a:	6e62      	ldr	r2, [r4, #100]	; 0x64
9000521c:	07d0      	lsls	r0, r2, #31
9000521e:	d404      	bmi.n	9000522a <_fflush_r+0x3a>
90005220:	0599      	lsls	r1, r3, #22
90005222:	d402      	bmi.n	9000522a <_fflush_r+0x3a>
90005224:	6da0      	ldr	r0, [r4, #88]	; 0x58
90005226:	f000 f915 	bl	90005454 <__retarget_lock_acquire_recursive>
9000522a:	4628      	mov	r0, r5
9000522c:	4621      	mov	r1, r4
9000522e:	f7ff ff59 	bl	900050e4 <__sflush_r>
90005232:	6e63      	ldr	r3, [r4, #100]	; 0x64
90005234:	07da      	lsls	r2, r3, #31
90005236:	4605      	mov	r5, r0
90005238:	d4e0      	bmi.n	900051fc <_fflush_r+0xc>
9000523a:	89a3      	ldrh	r3, [r4, #12]
9000523c:	059b      	lsls	r3, r3, #22
9000523e:	d4dd      	bmi.n	900051fc <_fflush_r+0xc>
90005240:	6da0      	ldr	r0, [r4, #88]	; 0x58
90005242:	f000 f908 	bl	90005456 <__retarget_lock_release_recursive>
90005246:	e7d9      	b.n	900051fc <_fflush_r+0xc>
90005248:	4b05      	ldr	r3, [pc, #20]	; (90005260 <_fflush_r+0x70>)
9000524a:	429c      	cmp	r4, r3
9000524c:	d101      	bne.n	90005252 <_fflush_r+0x62>
9000524e:	68ac      	ldr	r4, [r5, #8]
90005250:	e7df      	b.n	90005212 <_fflush_r+0x22>
90005252:	4b04      	ldr	r3, [pc, #16]	; (90005264 <_fflush_r+0x74>)
90005254:	429c      	cmp	r4, r3
90005256:	bf08      	it	eq
90005258:	68ec      	ldreq	r4, [r5, #12]
9000525a:	e7da      	b.n	90005212 <_fflush_r+0x22>
9000525c:	9000590c 	.word	0x9000590c
90005260:	9000592c 	.word	0x9000592c
90005264:	900058ec 	.word	0x900058ec

90005268 <std>:
90005268:	2300      	movs	r3, #0
9000526a:	b510      	push	{r4, lr}
9000526c:	4604      	mov	r4, r0
9000526e:	e9c0 3300 	strd	r3, r3, [r0]
90005272:	e9c0 3304 	strd	r3, r3, [r0, #16]
90005276:	6083      	str	r3, [r0, #8]
90005278:	8181      	strh	r1, [r0, #12]
9000527a:	6643      	str	r3, [r0, #100]	; 0x64
9000527c:	81c2      	strh	r2, [r0, #14]
9000527e:	6183      	str	r3, [r0, #24]
90005280:	4619      	mov	r1, r3
90005282:	2208      	movs	r2, #8
90005284:	305c      	adds	r0, #92	; 0x5c
90005286:	f7ff fdef 	bl	90004e68 <memset>
9000528a:	4b05      	ldr	r3, [pc, #20]	; (900052a0 <std+0x38>)
9000528c:	6263      	str	r3, [r4, #36]	; 0x24
9000528e:	4b05      	ldr	r3, [pc, #20]	; (900052a4 <std+0x3c>)
90005290:	62a3      	str	r3, [r4, #40]	; 0x28
90005292:	4b05      	ldr	r3, [pc, #20]	; (900052a8 <std+0x40>)
90005294:	62e3      	str	r3, [r4, #44]	; 0x2c
90005296:	4b05      	ldr	r3, [pc, #20]	; (900052ac <std+0x44>)
90005298:	6224      	str	r4, [r4, #32]
9000529a:	6323      	str	r3, [r4, #48]	; 0x30
9000529c:	bd10      	pop	{r4, pc}
9000529e:	bf00      	nop
900052a0:	90005705 	.word	0x90005705
900052a4:	90005727 	.word	0x90005727
900052a8:	9000575f 	.word	0x9000575f
900052ac:	90005783 	.word	0x90005783

900052b0 <_cleanup_r>:
900052b0:	4901      	ldr	r1, [pc, #4]	; (900052b8 <_cleanup_r+0x8>)
900052b2:	f000 b8af 	b.w	90005414 <_fwalk_reent>
900052b6:	bf00      	nop
900052b8:	900051f1 	.word	0x900051f1

900052bc <__sfmoreglue>:
900052bc:	b570      	push	{r4, r5, r6, lr}
900052be:	2268      	movs	r2, #104	; 0x68
900052c0:	1e4d      	subs	r5, r1, #1
900052c2:	4355      	muls	r5, r2
900052c4:	460e      	mov	r6, r1
900052c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
900052ca:	f000 f997 	bl	900055fc <_malloc_r>
900052ce:	4604      	mov	r4, r0
900052d0:	b140      	cbz	r0, 900052e4 <__sfmoreglue+0x28>
900052d2:	2100      	movs	r1, #0
900052d4:	e9c0 1600 	strd	r1, r6, [r0]
900052d8:	300c      	adds	r0, #12
900052da:	60a0      	str	r0, [r4, #8]
900052dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
900052e0:	f7ff fdc2 	bl	90004e68 <memset>
900052e4:	4620      	mov	r0, r4
900052e6:	bd70      	pop	{r4, r5, r6, pc}

900052e8 <__sfp_lock_acquire>:
900052e8:	4801      	ldr	r0, [pc, #4]	; (900052f0 <__sfp_lock_acquire+0x8>)
900052ea:	f000 b8b3 	b.w	90005454 <__retarget_lock_acquire_recursive>
900052ee:	bf00      	nop
900052f0:	2400012d 	.word	0x2400012d

900052f4 <__sfp_lock_release>:
900052f4:	4801      	ldr	r0, [pc, #4]	; (900052fc <__sfp_lock_release+0x8>)
900052f6:	f000 b8ae 	b.w	90005456 <__retarget_lock_release_recursive>
900052fa:	bf00      	nop
900052fc:	2400012d 	.word	0x2400012d

90005300 <__sinit_lock_acquire>:
90005300:	4801      	ldr	r0, [pc, #4]	; (90005308 <__sinit_lock_acquire+0x8>)
90005302:	f000 b8a7 	b.w	90005454 <__retarget_lock_acquire_recursive>
90005306:	bf00      	nop
90005308:	2400012e 	.word	0x2400012e

9000530c <__sinit_lock_release>:
9000530c:	4801      	ldr	r0, [pc, #4]	; (90005314 <__sinit_lock_release+0x8>)
9000530e:	f000 b8a2 	b.w	90005456 <__retarget_lock_release_recursive>
90005312:	bf00      	nop
90005314:	2400012e 	.word	0x2400012e

90005318 <__sinit>:
90005318:	b510      	push	{r4, lr}
9000531a:	4604      	mov	r4, r0
9000531c:	f7ff fff0 	bl	90005300 <__sinit_lock_acquire>
90005320:	69a3      	ldr	r3, [r4, #24]
90005322:	b11b      	cbz	r3, 9000532c <__sinit+0x14>
90005324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90005328:	f7ff bff0 	b.w	9000530c <__sinit_lock_release>
9000532c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
90005330:	6523      	str	r3, [r4, #80]	; 0x50
90005332:	4b13      	ldr	r3, [pc, #76]	; (90005380 <__sinit+0x68>)
90005334:	4a13      	ldr	r2, [pc, #76]	; (90005384 <__sinit+0x6c>)
90005336:	681b      	ldr	r3, [r3, #0]
90005338:	62a2      	str	r2, [r4, #40]	; 0x28
9000533a:	42a3      	cmp	r3, r4
9000533c:	bf04      	itt	eq
9000533e:	2301      	moveq	r3, #1
90005340:	61a3      	streq	r3, [r4, #24]
90005342:	4620      	mov	r0, r4
90005344:	f000 f820 	bl	90005388 <__sfp>
90005348:	6060      	str	r0, [r4, #4]
9000534a:	4620      	mov	r0, r4
9000534c:	f000 f81c 	bl	90005388 <__sfp>
90005350:	60a0      	str	r0, [r4, #8]
90005352:	4620      	mov	r0, r4
90005354:	f000 f818 	bl	90005388 <__sfp>
90005358:	2200      	movs	r2, #0
9000535a:	60e0      	str	r0, [r4, #12]
9000535c:	2104      	movs	r1, #4
9000535e:	6860      	ldr	r0, [r4, #4]
90005360:	f7ff ff82 	bl	90005268 <std>
90005364:	68a0      	ldr	r0, [r4, #8]
90005366:	2201      	movs	r2, #1
90005368:	2109      	movs	r1, #9
9000536a:	f7ff ff7d 	bl	90005268 <std>
9000536e:	68e0      	ldr	r0, [r4, #12]
90005370:	2202      	movs	r2, #2
90005372:	2112      	movs	r1, #18
90005374:	f7ff ff78 	bl	90005268 <std>
90005378:	2301      	movs	r3, #1
9000537a:	61a3      	str	r3, [r4, #24]
9000537c:	e7d2      	b.n	90005324 <__sinit+0xc>
9000537e:	bf00      	nop
90005380:	900058e8 	.word	0x900058e8
90005384:	900052b1 	.word	0x900052b1

90005388 <__sfp>:
90005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9000538a:	4607      	mov	r7, r0
9000538c:	f7ff ffac 	bl	900052e8 <__sfp_lock_acquire>
90005390:	4b1e      	ldr	r3, [pc, #120]	; (9000540c <__sfp+0x84>)
90005392:	681e      	ldr	r6, [r3, #0]
90005394:	69b3      	ldr	r3, [r6, #24]
90005396:	b913      	cbnz	r3, 9000539e <__sfp+0x16>
90005398:	4630      	mov	r0, r6
9000539a:	f7ff ffbd 	bl	90005318 <__sinit>
9000539e:	3648      	adds	r6, #72	; 0x48
900053a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
900053a4:	3b01      	subs	r3, #1
900053a6:	d503      	bpl.n	900053b0 <__sfp+0x28>
900053a8:	6833      	ldr	r3, [r6, #0]
900053aa:	b30b      	cbz	r3, 900053f0 <__sfp+0x68>
900053ac:	6836      	ldr	r6, [r6, #0]
900053ae:	e7f7      	b.n	900053a0 <__sfp+0x18>
900053b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
900053b4:	b9d5      	cbnz	r5, 900053ec <__sfp+0x64>
900053b6:	4b16      	ldr	r3, [pc, #88]	; (90005410 <__sfp+0x88>)
900053b8:	60e3      	str	r3, [r4, #12]
900053ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
900053be:	6665      	str	r5, [r4, #100]	; 0x64
900053c0:	f000 f847 	bl	90005452 <__retarget_lock_init_recursive>
900053c4:	f7ff ff96 	bl	900052f4 <__sfp_lock_release>
900053c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
900053cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
900053d0:	6025      	str	r5, [r4, #0]
900053d2:	61a5      	str	r5, [r4, #24]
900053d4:	2208      	movs	r2, #8
900053d6:	4629      	mov	r1, r5
900053d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
900053dc:	f7ff fd44 	bl	90004e68 <memset>
900053e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
900053e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
900053e8:	4620      	mov	r0, r4
900053ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900053ec:	3468      	adds	r4, #104	; 0x68
900053ee:	e7d9      	b.n	900053a4 <__sfp+0x1c>
900053f0:	2104      	movs	r1, #4
900053f2:	4638      	mov	r0, r7
900053f4:	f7ff ff62 	bl	900052bc <__sfmoreglue>
900053f8:	4604      	mov	r4, r0
900053fa:	6030      	str	r0, [r6, #0]
900053fc:	2800      	cmp	r0, #0
900053fe:	d1d5      	bne.n	900053ac <__sfp+0x24>
90005400:	f7ff ff78 	bl	900052f4 <__sfp_lock_release>
90005404:	230c      	movs	r3, #12
90005406:	603b      	str	r3, [r7, #0]
90005408:	e7ee      	b.n	900053e8 <__sfp+0x60>
9000540a:	bf00      	nop
9000540c:	900058e8 	.word	0x900058e8
90005410:	ffff0001 	.word	0xffff0001

90005414 <_fwalk_reent>:
90005414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90005418:	4606      	mov	r6, r0
9000541a:	4688      	mov	r8, r1
9000541c:	f100 0448 	add.w	r4, r0, #72	; 0x48
90005420:	2700      	movs	r7, #0
90005422:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90005426:	f1b9 0901 	subs.w	r9, r9, #1
9000542a:	d505      	bpl.n	90005438 <_fwalk_reent+0x24>
9000542c:	6824      	ldr	r4, [r4, #0]
9000542e:	2c00      	cmp	r4, #0
90005430:	d1f7      	bne.n	90005422 <_fwalk_reent+0xe>
90005432:	4638      	mov	r0, r7
90005434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90005438:	89ab      	ldrh	r3, [r5, #12]
9000543a:	2b01      	cmp	r3, #1
9000543c:	d907      	bls.n	9000544e <_fwalk_reent+0x3a>
9000543e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90005442:	3301      	adds	r3, #1
90005444:	d003      	beq.n	9000544e <_fwalk_reent+0x3a>
90005446:	4629      	mov	r1, r5
90005448:	4630      	mov	r0, r6
9000544a:	47c0      	blx	r8
9000544c:	4307      	orrs	r7, r0
9000544e:	3568      	adds	r5, #104	; 0x68
90005450:	e7e9      	b.n	90005426 <_fwalk_reent+0x12>

90005452 <__retarget_lock_init_recursive>:
90005452:	4770      	bx	lr

90005454 <__retarget_lock_acquire_recursive>:
90005454:	4770      	bx	lr

90005456 <__retarget_lock_release_recursive>:
90005456:	4770      	bx	lr

90005458 <__swhatbuf_r>:
90005458:	b570      	push	{r4, r5, r6, lr}
9000545a:	460e      	mov	r6, r1
9000545c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90005460:	2900      	cmp	r1, #0
90005462:	b096      	sub	sp, #88	; 0x58
90005464:	4614      	mov	r4, r2
90005466:	461d      	mov	r5, r3
90005468:	da08      	bge.n	9000547c <__swhatbuf_r+0x24>
9000546a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
9000546e:	2200      	movs	r2, #0
90005470:	602a      	str	r2, [r5, #0]
90005472:	061a      	lsls	r2, r3, #24
90005474:	d410      	bmi.n	90005498 <__swhatbuf_r+0x40>
90005476:	f44f 6380 	mov.w	r3, #1024	; 0x400
9000547a:	e00e      	b.n	9000549a <__swhatbuf_r+0x42>
9000547c:	466a      	mov	r2, sp
9000547e:	f000 f9a7 	bl	900057d0 <_fstat_r>
90005482:	2800      	cmp	r0, #0
90005484:	dbf1      	blt.n	9000546a <__swhatbuf_r+0x12>
90005486:	9a01      	ldr	r2, [sp, #4]
90005488:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
9000548c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
90005490:	425a      	negs	r2, r3
90005492:	415a      	adcs	r2, r3
90005494:	602a      	str	r2, [r5, #0]
90005496:	e7ee      	b.n	90005476 <__swhatbuf_r+0x1e>
90005498:	2340      	movs	r3, #64	; 0x40
9000549a:	2000      	movs	r0, #0
9000549c:	6023      	str	r3, [r4, #0]
9000549e:	b016      	add	sp, #88	; 0x58
900054a0:	bd70      	pop	{r4, r5, r6, pc}
	...

900054a4 <__smakebuf_r>:
900054a4:	898b      	ldrh	r3, [r1, #12]
900054a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
900054a8:	079d      	lsls	r5, r3, #30
900054aa:	4606      	mov	r6, r0
900054ac:	460c      	mov	r4, r1
900054ae:	d507      	bpl.n	900054c0 <__smakebuf_r+0x1c>
900054b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
900054b4:	6023      	str	r3, [r4, #0]
900054b6:	6123      	str	r3, [r4, #16]
900054b8:	2301      	movs	r3, #1
900054ba:	6163      	str	r3, [r4, #20]
900054bc:	b002      	add	sp, #8
900054be:	bd70      	pop	{r4, r5, r6, pc}
900054c0:	ab01      	add	r3, sp, #4
900054c2:	466a      	mov	r2, sp
900054c4:	f7ff ffc8 	bl	90005458 <__swhatbuf_r>
900054c8:	9900      	ldr	r1, [sp, #0]
900054ca:	4605      	mov	r5, r0
900054cc:	4630      	mov	r0, r6
900054ce:	f000 f895 	bl	900055fc <_malloc_r>
900054d2:	b948      	cbnz	r0, 900054e8 <__smakebuf_r+0x44>
900054d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
900054d8:	059a      	lsls	r2, r3, #22
900054da:	d4ef      	bmi.n	900054bc <__smakebuf_r+0x18>
900054dc:	f023 0303 	bic.w	r3, r3, #3
900054e0:	f043 0302 	orr.w	r3, r3, #2
900054e4:	81a3      	strh	r3, [r4, #12]
900054e6:	e7e3      	b.n	900054b0 <__smakebuf_r+0xc>
900054e8:	4b0d      	ldr	r3, [pc, #52]	; (90005520 <__smakebuf_r+0x7c>)
900054ea:	62b3      	str	r3, [r6, #40]	; 0x28
900054ec:	89a3      	ldrh	r3, [r4, #12]
900054ee:	6020      	str	r0, [r4, #0]
900054f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900054f4:	81a3      	strh	r3, [r4, #12]
900054f6:	9b00      	ldr	r3, [sp, #0]
900054f8:	6163      	str	r3, [r4, #20]
900054fa:	9b01      	ldr	r3, [sp, #4]
900054fc:	6120      	str	r0, [r4, #16]
900054fe:	b15b      	cbz	r3, 90005518 <__smakebuf_r+0x74>
90005500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90005504:	4630      	mov	r0, r6
90005506:	f000 f975 	bl	900057f4 <_isatty_r>
9000550a:	b128      	cbz	r0, 90005518 <__smakebuf_r+0x74>
9000550c:	89a3      	ldrh	r3, [r4, #12]
9000550e:	f023 0303 	bic.w	r3, r3, #3
90005512:	f043 0301 	orr.w	r3, r3, #1
90005516:	81a3      	strh	r3, [r4, #12]
90005518:	89a0      	ldrh	r0, [r4, #12]
9000551a:	4305      	orrs	r5, r0
9000551c:	81a5      	strh	r5, [r4, #12]
9000551e:	e7cd      	b.n	900054bc <__smakebuf_r+0x18>
90005520:	900052b1 	.word	0x900052b1

90005524 <_free_r>:
90005524:	b537      	push	{r0, r1, r2, r4, r5, lr}
90005526:	2900      	cmp	r1, #0
90005528:	d044      	beq.n	900055b4 <_free_r+0x90>
9000552a:	f851 3c04 	ldr.w	r3, [r1, #-4]
9000552e:	9001      	str	r0, [sp, #4]
90005530:	2b00      	cmp	r3, #0
90005532:	f1a1 0404 	sub.w	r4, r1, #4
90005536:	bfb8      	it	lt
90005538:	18e4      	addlt	r4, r4, r3
9000553a:	f000 f97d 	bl	90005838 <__malloc_lock>
9000553e:	4a1e      	ldr	r2, [pc, #120]	; (900055b8 <_free_r+0x94>)
90005540:	9801      	ldr	r0, [sp, #4]
90005542:	6813      	ldr	r3, [r2, #0]
90005544:	b933      	cbnz	r3, 90005554 <_free_r+0x30>
90005546:	6063      	str	r3, [r4, #4]
90005548:	6014      	str	r4, [r2, #0]
9000554a:	b003      	add	sp, #12
9000554c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90005550:	f000 b978 	b.w	90005844 <__malloc_unlock>
90005554:	42a3      	cmp	r3, r4
90005556:	d908      	bls.n	9000556a <_free_r+0x46>
90005558:	6825      	ldr	r5, [r4, #0]
9000555a:	1961      	adds	r1, r4, r5
9000555c:	428b      	cmp	r3, r1
9000555e:	bf01      	itttt	eq
90005560:	6819      	ldreq	r1, [r3, #0]
90005562:	685b      	ldreq	r3, [r3, #4]
90005564:	1949      	addeq	r1, r1, r5
90005566:	6021      	streq	r1, [r4, #0]
90005568:	e7ed      	b.n	90005546 <_free_r+0x22>
9000556a:	461a      	mov	r2, r3
9000556c:	685b      	ldr	r3, [r3, #4]
9000556e:	b10b      	cbz	r3, 90005574 <_free_r+0x50>
90005570:	42a3      	cmp	r3, r4
90005572:	d9fa      	bls.n	9000556a <_free_r+0x46>
90005574:	6811      	ldr	r1, [r2, #0]
90005576:	1855      	adds	r5, r2, r1
90005578:	42a5      	cmp	r5, r4
9000557a:	d10b      	bne.n	90005594 <_free_r+0x70>
9000557c:	6824      	ldr	r4, [r4, #0]
9000557e:	4421      	add	r1, r4
90005580:	1854      	adds	r4, r2, r1
90005582:	42a3      	cmp	r3, r4
90005584:	6011      	str	r1, [r2, #0]
90005586:	d1e0      	bne.n	9000554a <_free_r+0x26>
90005588:	681c      	ldr	r4, [r3, #0]
9000558a:	685b      	ldr	r3, [r3, #4]
9000558c:	6053      	str	r3, [r2, #4]
9000558e:	4421      	add	r1, r4
90005590:	6011      	str	r1, [r2, #0]
90005592:	e7da      	b.n	9000554a <_free_r+0x26>
90005594:	d902      	bls.n	9000559c <_free_r+0x78>
90005596:	230c      	movs	r3, #12
90005598:	6003      	str	r3, [r0, #0]
9000559a:	e7d6      	b.n	9000554a <_free_r+0x26>
9000559c:	6825      	ldr	r5, [r4, #0]
9000559e:	1961      	adds	r1, r4, r5
900055a0:	428b      	cmp	r3, r1
900055a2:	bf04      	itt	eq
900055a4:	6819      	ldreq	r1, [r3, #0]
900055a6:	685b      	ldreq	r3, [r3, #4]
900055a8:	6063      	str	r3, [r4, #4]
900055aa:	bf04      	itt	eq
900055ac:	1949      	addeq	r1, r1, r5
900055ae:	6021      	streq	r1, [r4, #0]
900055b0:	6054      	str	r4, [r2, #4]
900055b2:	e7ca      	b.n	9000554a <_free_r+0x26>
900055b4:	b003      	add	sp, #12
900055b6:	bd30      	pop	{r4, r5, pc}
900055b8:	24000130 	.word	0x24000130

900055bc <sbrk_aligned>:
900055bc:	b570      	push	{r4, r5, r6, lr}
900055be:	4e0e      	ldr	r6, [pc, #56]	; (900055f8 <sbrk_aligned+0x3c>)
900055c0:	460c      	mov	r4, r1
900055c2:	6831      	ldr	r1, [r6, #0]
900055c4:	4605      	mov	r5, r0
900055c6:	b911      	cbnz	r1, 900055ce <sbrk_aligned+0x12>
900055c8:	f000 f88c 	bl	900056e4 <_sbrk_r>
900055cc:	6030      	str	r0, [r6, #0]
900055ce:	4621      	mov	r1, r4
900055d0:	4628      	mov	r0, r5
900055d2:	f000 f887 	bl	900056e4 <_sbrk_r>
900055d6:	1c43      	adds	r3, r0, #1
900055d8:	d00a      	beq.n	900055f0 <sbrk_aligned+0x34>
900055da:	1cc4      	adds	r4, r0, #3
900055dc:	f024 0403 	bic.w	r4, r4, #3
900055e0:	42a0      	cmp	r0, r4
900055e2:	d007      	beq.n	900055f4 <sbrk_aligned+0x38>
900055e4:	1a21      	subs	r1, r4, r0
900055e6:	4628      	mov	r0, r5
900055e8:	f000 f87c 	bl	900056e4 <_sbrk_r>
900055ec:	3001      	adds	r0, #1
900055ee:	d101      	bne.n	900055f4 <sbrk_aligned+0x38>
900055f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
900055f4:	4620      	mov	r0, r4
900055f6:	bd70      	pop	{r4, r5, r6, pc}
900055f8:	24000134 	.word	0x24000134

900055fc <_malloc_r>:
900055fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90005600:	1ccd      	adds	r5, r1, #3
90005602:	f025 0503 	bic.w	r5, r5, #3
90005606:	3508      	adds	r5, #8
90005608:	2d0c      	cmp	r5, #12
9000560a:	bf38      	it	cc
9000560c:	250c      	movcc	r5, #12
9000560e:	2d00      	cmp	r5, #0
90005610:	4607      	mov	r7, r0
90005612:	db01      	blt.n	90005618 <_malloc_r+0x1c>
90005614:	42a9      	cmp	r1, r5
90005616:	d905      	bls.n	90005624 <_malloc_r+0x28>
90005618:	230c      	movs	r3, #12
9000561a:	603b      	str	r3, [r7, #0]
9000561c:	2600      	movs	r6, #0
9000561e:	4630      	mov	r0, r6
90005620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90005624:	4e2e      	ldr	r6, [pc, #184]	; (900056e0 <_malloc_r+0xe4>)
90005626:	f000 f907 	bl	90005838 <__malloc_lock>
9000562a:	6833      	ldr	r3, [r6, #0]
9000562c:	461c      	mov	r4, r3
9000562e:	bb34      	cbnz	r4, 9000567e <_malloc_r+0x82>
90005630:	4629      	mov	r1, r5
90005632:	4638      	mov	r0, r7
90005634:	f7ff ffc2 	bl	900055bc <sbrk_aligned>
90005638:	1c43      	adds	r3, r0, #1
9000563a:	4604      	mov	r4, r0
9000563c:	d14d      	bne.n	900056da <_malloc_r+0xde>
9000563e:	6834      	ldr	r4, [r6, #0]
90005640:	4626      	mov	r6, r4
90005642:	2e00      	cmp	r6, #0
90005644:	d140      	bne.n	900056c8 <_malloc_r+0xcc>
90005646:	6823      	ldr	r3, [r4, #0]
90005648:	4631      	mov	r1, r6
9000564a:	4638      	mov	r0, r7
9000564c:	eb04 0803 	add.w	r8, r4, r3
90005650:	f000 f848 	bl	900056e4 <_sbrk_r>
90005654:	4580      	cmp	r8, r0
90005656:	d13a      	bne.n	900056ce <_malloc_r+0xd2>
90005658:	6821      	ldr	r1, [r4, #0]
9000565a:	3503      	adds	r5, #3
9000565c:	1a6d      	subs	r5, r5, r1
9000565e:	f025 0503 	bic.w	r5, r5, #3
90005662:	3508      	adds	r5, #8
90005664:	2d0c      	cmp	r5, #12
90005666:	bf38      	it	cc
90005668:	250c      	movcc	r5, #12
9000566a:	4629      	mov	r1, r5
9000566c:	4638      	mov	r0, r7
9000566e:	f7ff ffa5 	bl	900055bc <sbrk_aligned>
90005672:	3001      	adds	r0, #1
90005674:	d02b      	beq.n	900056ce <_malloc_r+0xd2>
90005676:	6823      	ldr	r3, [r4, #0]
90005678:	442b      	add	r3, r5
9000567a:	6023      	str	r3, [r4, #0]
9000567c:	e00e      	b.n	9000569c <_malloc_r+0xa0>
9000567e:	6822      	ldr	r2, [r4, #0]
90005680:	1b52      	subs	r2, r2, r5
90005682:	d41e      	bmi.n	900056c2 <_malloc_r+0xc6>
90005684:	2a0b      	cmp	r2, #11
90005686:	d916      	bls.n	900056b6 <_malloc_r+0xba>
90005688:	1961      	adds	r1, r4, r5
9000568a:	42a3      	cmp	r3, r4
9000568c:	6025      	str	r5, [r4, #0]
9000568e:	bf18      	it	ne
90005690:	6059      	strne	r1, [r3, #4]
90005692:	6863      	ldr	r3, [r4, #4]
90005694:	bf08      	it	eq
90005696:	6031      	streq	r1, [r6, #0]
90005698:	5162      	str	r2, [r4, r5]
9000569a:	604b      	str	r3, [r1, #4]
9000569c:	4638      	mov	r0, r7
9000569e:	f104 060b 	add.w	r6, r4, #11
900056a2:	f000 f8cf 	bl	90005844 <__malloc_unlock>
900056a6:	f026 0607 	bic.w	r6, r6, #7
900056aa:	1d23      	adds	r3, r4, #4
900056ac:	1af2      	subs	r2, r6, r3
900056ae:	d0b6      	beq.n	9000561e <_malloc_r+0x22>
900056b0:	1b9b      	subs	r3, r3, r6
900056b2:	50a3      	str	r3, [r4, r2]
900056b4:	e7b3      	b.n	9000561e <_malloc_r+0x22>
900056b6:	6862      	ldr	r2, [r4, #4]
900056b8:	42a3      	cmp	r3, r4
900056ba:	bf0c      	ite	eq
900056bc:	6032      	streq	r2, [r6, #0]
900056be:	605a      	strne	r2, [r3, #4]
900056c0:	e7ec      	b.n	9000569c <_malloc_r+0xa0>
900056c2:	4623      	mov	r3, r4
900056c4:	6864      	ldr	r4, [r4, #4]
900056c6:	e7b2      	b.n	9000562e <_malloc_r+0x32>
900056c8:	4634      	mov	r4, r6
900056ca:	6876      	ldr	r6, [r6, #4]
900056cc:	e7b9      	b.n	90005642 <_malloc_r+0x46>
900056ce:	230c      	movs	r3, #12
900056d0:	603b      	str	r3, [r7, #0]
900056d2:	4638      	mov	r0, r7
900056d4:	f000 f8b6 	bl	90005844 <__malloc_unlock>
900056d8:	e7a1      	b.n	9000561e <_malloc_r+0x22>
900056da:	6025      	str	r5, [r4, #0]
900056dc:	e7de      	b.n	9000569c <_malloc_r+0xa0>
900056de:	bf00      	nop
900056e0:	24000130 	.word	0x24000130

900056e4 <_sbrk_r>:
900056e4:	b538      	push	{r3, r4, r5, lr}
900056e6:	4d06      	ldr	r5, [pc, #24]	; (90005700 <_sbrk_r+0x1c>)
900056e8:	2300      	movs	r3, #0
900056ea:	4604      	mov	r4, r0
900056ec:	4608      	mov	r0, r1
900056ee:	602b      	str	r3, [r5, #0]
900056f0:	f7fb fa3c 	bl	90000b6c <_sbrk>
900056f4:	1c43      	adds	r3, r0, #1
900056f6:	d102      	bne.n	900056fe <_sbrk_r+0x1a>
900056f8:	682b      	ldr	r3, [r5, #0]
900056fa:	b103      	cbz	r3, 900056fe <_sbrk_r+0x1a>
900056fc:	6023      	str	r3, [r4, #0]
900056fe:	bd38      	pop	{r3, r4, r5, pc}
90005700:	24000138 	.word	0x24000138

90005704 <__sread>:
90005704:	b510      	push	{r4, lr}
90005706:	460c      	mov	r4, r1
90005708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000570c:	f000 f8a0 	bl	90005850 <_read_r>
90005710:	2800      	cmp	r0, #0
90005712:	bfab      	itete	ge
90005714:	6d63      	ldrge	r3, [r4, #84]	; 0x54
90005716:	89a3      	ldrhlt	r3, [r4, #12]
90005718:	181b      	addge	r3, r3, r0
9000571a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
9000571e:	bfac      	ite	ge
90005720:	6563      	strge	r3, [r4, #84]	; 0x54
90005722:	81a3      	strhlt	r3, [r4, #12]
90005724:	bd10      	pop	{r4, pc}

90005726 <__swrite>:
90005726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000572a:	461f      	mov	r7, r3
9000572c:	898b      	ldrh	r3, [r1, #12]
9000572e:	05db      	lsls	r3, r3, #23
90005730:	4605      	mov	r5, r0
90005732:	460c      	mov	r4, r1
90005734:	4616      	mov	r6, r2
90005736:	d505      	bpl.n	90005744 <__swrite+0x1e>
90005738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9000573c:	2302      	movs	r3, #2
9000573e:	2200      	movs	r2, #0
90005740:	f000 f868 	bl	90005814 <_lseek_r>
90005744:	89a3      	ldrh	r3, [r4, #12]
90005746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9000574a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000574e:	81a3      	strh	r3, [r4, #12]
90005750:	4632      	mov	r2, r6
90005752:	463b      	mov	r3, r7
90005754:	4628      	mov	r0, r5
90005756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9000575a:	f000 b817 	b.w	9000578c <_write_r>

9000575e <__sseek>:
9000575e:	b510      	push	{r4, lr}
90005760:	460c      	mov	r4, r1
90005762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90005766:	f000 f855 	bl	90005814 <_lseek_r>
9000576a:	1c43      	adds	r3, r0, #1
9000576c:	89a3      	ldrh	r3, [r4, #12]
9000576e:	bf15      	itete	ne
90005770:	6560      	strne	r0, [r4, #84]	; 0x54
90005772:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
90005776:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
9000577a:	81a3      	strheq	r3, [r4, #12]
9000577c:	bf18      	it	ne
9000577e:	81a3      	strhne	r3, [r4, #12]
90005780:	bd10      	pop	{r4, pc}

90005782 <__sclose>:
90005782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90005786:	f000 b813 	b.w	900057b0 <_close_r>
	...

9000578c <_write_r>:
9000578c:	b538      	push	{r3, r4, r5, lr}
9000578e:	4d07      	ldr	r5, [pc, #28]	; (900057ac <_write_r+0x20>)
90005790:	4604      	mov	r4, r0
90005792:	4608      	mov	r0, r1
90005794:	4611      	mov	r1, r2
90005796:	2200      	movs	r2, #0
90005798:	602a      	str	r2, [r5, #0]
9000579a:	461a      	mov	r2, r3
9000579c:	f7fa ff46 	bl	9000062c <_write>
900057a0:	1c43      	adds	r3, r0, #1
900057a2:	d102      	bne.n	900057aa <_write_r+0x1e>
900057a4:	682b      	ldr	r3, [r5, #0]
900057a6:	b103      	cbz	r3, 900057aa <_write_r+0x1e>
900057a8:	6023      	str	r3, [r4, #0]
900057aa:	bd38      	pop	{r3, r4, r5, pc}
900057ac:	24000138 	.word	0x24000138

900057b0 <_close_r>:
900057b0:	b538      	push	{r3, r4, r5, lr}
900057b2:	4d06      	ldr	r5, [pc, #24]	; (900057cc <_close_r+0x1c>)
900057b4:	2300      	movs	r3, #0
900057b6:	4604      	mov	r4, r0
900057b8:	4608      	mov	r0, r1
900057ba:	602b      	str	r3, [r5, #0]
900057bc:	f7fb f9a1 	bl	90000b02 <_close>
900057c0:	1c43      	adds	r3, r0, #1
900057c2:	d102      	bne.n	900057ca <_close_r+0x1a>
900057c4:	682b      	ldr	r3, [r5, #0]
900057c6:	b103      	cbz	r3, 900057ca <_close_r+0x1a>
900057c8:	6023      	str	r3, [r4, #0]
900057ca:	bd38      	pop	{r3, r4, r5, pc}
900057cc:	24000138 	.word	0x24000138

900057d0 <_fstat_r>:
900057d0:	b538      	push	{r3, r4, r5, lr}
900057d2:	4d07      	ldr	r5, [pc, #28]	; (900057f0 <_fstat_r+0x20>)
900057d4:	2300      	movs	r3, #0
900057d6:	4604      	mov	r4, r0
900057d8:	4608      	mov	r0, r1
900057da:	4611      	mov	r1, r2
900057dc:	602b      	str	r3, [r5, #0]
900057de:	f7fb f99c 	bl	90000b1a <_fstat>
900057e2:	1c43      	adds	r3, r0, #1
900057e4:	d102      	bne.n	900057ec <_fstat_r+0x1c>
900057e6:	682b      	ldr	r3, [r5, #0]
900057e8:	b103      	cbz	r3, 900057ec <_fstat_r+0x1c>
900057ea:	6023      	str	r3, [r4, #0]
900057ec:	bd38      	pop	{r3, r4, r5, pc}
900057ee:	bf00      	nop
900057f0:	24000138 	.word	0x24000138

900057f4 <_isatty_r>:
900057f4:	b538      	push	{r3, r4, r5, lr}
900057f6:	4d06      	ldr	r5, [pc, #24]	; (90005810 <_isatty_r+0x1c>)
900057f8:	2300      	movs	r3, #0
900057fa:	4604      	mov	r4, r0
900057fc:	4608      	mov	r0, r1
900057fe:	602b      	str	r3, [r5, #0]
90005800:	f7fb f99b 	bl	90000b3a <_isatty>
90005804:	1c43      	adds	r3, r0, #1
90005806:	d102      	bne.n	9000580e <_isatty_r+0x1a>
90005808:	682b      	ldr	r3, [r5, #0]
9000580a:	b103      	cbz	r3, 9000580e <_isatty_r+0x1a>
9000580c:	6023      	str	r3, [r4, #0]
9000580e:	bd38      	pop	{r3, r4, r5, pc}
90005810:	24000138 	.word	0x24000138

90005814 <_lseek_r>:
90005814:	b538      	push	{r3, r4, r5, lr}
90005816:	4d07      	ldr	r5, [pc, #28]	; (90005834 <_lseek_r+0x20>)
90005818:	4604      	mov	r4, r0
9000581a:	4608      	mov	r0, r1
9000581c:	4611      	mov	r1, r2
9000581e:	2200      	movs	r2, #0
90005820:	602a      	str	r2, [r5, #0]
90005822:	461a      	mov	r2, r3
90005824:	f7fb f994 	bl	90000b50 <_lseek>
90005828:	1c43      	adds	r3, r0, #1
9000582a:	d102      	bne.n	90005832 <_lseek_r+0x1e>
9000582c:	682b      	ldr	r3, [r5, #0]
9000582e:	b103      	cbz	r3, 90005832 <_lseek_r+0x1e>
90005830:	6023      	str	r3, [r4, #0]
90005832:	bd38      	pop	{r3, r4, r5, pc}
90005834:	24000138 	.word	0x24000138

90005838 <__malloc_lock>:
90005838:	4801      	ldr	r0, [pc, #4]	; (90005840 <__malloc_lock+0x8>)
9000583a:	f7ff be0b 	b.w	90005454 <__retarget_lock_acquire_recursive>
9000583e:	bf00      	nop
90005840:	2400012c 	.word	0x2400012c

90005844 <__malloc_unlock>:
90005844:	4801      	ldr	r0, [pc, #4]	; (9000584c <__malloc_unlock+0x8>)
90005846:	f7ff be06 	b.w	90005456 <__retarget_lock_release_recursive>
9000584a:	bf00      	nop
9000584c:	2400012c 	.word	0x2400012c

90005850 <_read_r>:
90005850:	b538      	push	{r3, r4, r5, lr}
90005852:	4d07      	ldr	r5, [pc, #28]	; (90005870 <_read_r+0x20>)
90005854:	4604      	mov	r4, r0
90005856:	4608      	mov	r0, r1
90005858:	4611      	mov	r1, r2
9000585a:	2200      	movs	r2, #0
9000585c:	602a      	str	r2, [r5, #0]
9000585e:	461a      	mov	r2, r3
90005860:	f7fb f932 	bl	90000ac8 <_read>
90005864:	1c43      	adds	r3, r0, #1
90005866:	d102      	bne.n	9000586e <_read_r+0x1e>
90005868:	682b      	ldr	r3, [r5, #0]
9000586a:	b103      	cbz	r3, 9000586e <_read_r+0x1e>
9000586c:	6023      	str	r3, [r4, #0]
9000586e:	bd38      	pop	{r3, r4, r5, pc}
90005870:	24000138 	.word	0x24000138

90005874 <_init>:
90005874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90005876:	bf00      	nop
90005878:	bcf8      	pop	{r3, r4, r5, r6, r7}
9000587a:	bc08      	pop	{r3}
9000587c:	469e      	mov	lr, r3
9000587e:	4770      	bx	lr

90005880 <_fini>:
90005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90005882:	bf00      	nop
90005884:	bcf8      	pop	{r3, r4, r5, r6, r7}
90005886:	bc08      	pop	{r3}
90005888:	469e      	mov	lr, r3
9000588a:	4770      	bx	lr
