
PID_Library_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a5c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08009b70  08009b70  00019b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a004  0800a004  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a004  0800a004  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a004  0800a004  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a004  0800a004  0001a004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a008  0800a008  0001a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a00c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021dc  200001f8  0800a200  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200023d4  0800a200  000223d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014930  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000340a  00000000  00000000  00034b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00037f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  000392f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b036  00000000  00000000  0003a540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146fb  00000000  00000000  00055576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009950e  00000000  00000000  00069c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010317f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b8  00000000  00000000  001031d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009b54 	.word	0x08009b54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08009b54 	.word	0x08009b54

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <vApplicationGetIdleTaskMemory+0x28>)
 8000b38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	20000214 	.word	0x20000214
 8000b54:	200002c8 	.word	0x200002c8

08000b58 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b64:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d013      	beq.n	8000b98 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b74:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b78:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d00b      	beq.n	8000b98 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b80:	e000      	b.n	8000b84 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b82:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0f9      	beq.n	8000b82 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b8e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b98:	687b      	ldr	r3, [r7, #4]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <_write>:
void StartDefaultTask(void const * argument);
void Start_PWM_Task(void const * argument);
void Start_ADC_Task(void const * argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	2332      	movs	r3, #50	; 0x32
 8000bb6:	68b9      	ldr	r1, [r7, #8]
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <_write+0x48>)
 8000bba:	f004 fe9d 	bl	80058f8 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	e009      	b.n	8000bd8 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	60ba      	str	r2, [r7, #8]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ffc3 	bl	8000b58 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbf1      	blt.n	8000bc4 <_write+0x20>
	}
	return len;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200007bc 	.word	0x200007bc

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b5b0      	push	{r4, r5, r7, lr}
 8000bf2:	b096      	sub	sp, #88	; 0x58
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f001 faad 	bl	8002154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 f85b 	bl	8000cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f000 fa85 	bl	800110c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c02:	f000 fa5d 	bl	80010c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c06:	f000 f8b1 	bl	8000d6c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000c0a:	f000 f8ed 	bl	8000de8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c0e:	f000 f98b 	bl	8000f28 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c12:	f000 f9d7 	bl	8000fc4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000c16:	f000 fa29 	bl	800106c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /************** Frequencymeter *******************/
   HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	481e      	ldr	r0, [pc, #120]	; (8000c98 <main+0xa8>)
 8000c1e:	f003 facd 	bl	80041bc <HAL_TIM_IC_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256, defaultTaskBuffer, &defaultTaskControlBlock);
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <main+0xac>)
 8000c24:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c28:	461d      	mov	r5, r3
 8000c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f004 ffe3 	bl	8005c08 <osThreadCreate>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <main+0xb0>)
 8000c46:	6013      	str	r3, [r2, #0]

  /* definition and creation of my_PWM_Task */
  osThreadStaticDef(my_PWM_Task, Start_PWM_Task, osPriorityNormal, 0, 256, my_PWM_TaskBuffer, &my_PWM_TaskControlBlock);
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <main+0xb4>)
 8000c4a:	f107 0420 	add.w	r4, r7, #32
 8000c4e:	461d      	mov	r5, r3
 8000c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  my_PWM_TaskHandle = osThreadCreate(osThread(my_PWM_Task), NULL);
 8000c5c:	f107 0320 	add.w	r3, r7, #32
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f004 ffd0 	bl	8005c08 <osThreadCreate>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <main+0xb8>)
 8000c6c:	6013      	str	r3, [r2, #0]

  /* definition and creation of my_ADC_Task */
  osThreadStaticDef(my_ADC_Task, Start_ADC_Task, osPriorityNormal, 0, 256, my_ADC_TaskBuffer, &my_ADC_TaskControlBlock);
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <main+0xbc>)
 8000c70:	1d3c      	adds	r4, r7, #4
 8000c72:	461d      	mov	r5, r3
 8000c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  my_ADC_TaskHandle = osThreadCreate(osThread(my_ADC_Task), NULL);
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f004 ffbf 	bl	8005c08 <osThreadCreate>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <main+0xc0>)
 8000c8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c90:	f004 ffb3 	bl	8005bfa <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <main+0xa4>
 8000c96:	bf00      	nop
 8000c98:	20000730 	.word	0x20000730
 8000c9c:	08009b94 	.word	0x08009b94
 8000ca0:	20000800 	.word	0x20000800
 8000ca4:	08009bb0 	.word	0x08009bb0
 8000ca8:	20000cb8 	.word	0x20000cb8
 8000cac:	08009bcc 	.word	0x08009bcc
 8000cb0:	20001170 	.word	0x20001170

08000cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b094      	sub	sp, #80	; 0x50
 8000cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cbe:	2228      	movs	r2, #40	; 0x28
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f006 fab5 	bl	8007232 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d00:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 fa72 	bl	80031f4 <HAL_RCC_OscConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d16:	f000 fbb1 	bl	800147c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2102      	movs	r1, #2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 fcde 	bl	80036f8 <HAL_RCC_ClockConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d42:	f000 fb9b 	bl	800147c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d46:	2302      	movs	r3, #2
 8000d48:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d4e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	4618      	mov	r0, r3
 8000d54:	f002 fe98 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d5e:	f000 fb8d 	bl	800147c <Error_Handler>
  }
}
 8000d62:	bf00      	nop
 8000d64:	3750      	adds	r7, #80	; 0x50
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_ADC1_Init+0x74>)
 8000d7e:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <MX_ADC1_Init+0x78>)
 8000d80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <MX_ADC1_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_ADC1_Init+0x74>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_ADC1_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <MX_ADC1_Init+0x74>)
 8000d96:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <MX_ADC1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_ADC1_Init+0x74>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <MX_ADC1_Init+0x74>)
 8000daa:	f001 fa05 	bl	80021b8 <HAL_ADC_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000db4:	f000 fb62 	bl	800147c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_ADC1_Init+0x74>)
 8000dca:	f001 fbc7 	bl	800255c <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000dd4:	f000 fb52 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	2000062c 	.word	0x2000062c
 8000de4:	40012400 	.word	0x40012400

08000de8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b096      	sub	sp, #88	; 0x58
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2220      	movs	r2, #32
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f006 fa06 	bl	8007232 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e26:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <MX_TIM1_Init+0x138>)
 8000e28:	4a3e      	ldr	r2, [pc, #248]	; (8000f24 <MX_TIM1_Init+0x13c>)
 8000e2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71-1;
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	; (8000f20 <MX_TIM1_Init+0x138>)
 8000e2e:	2246      	movs	r2, #70	; 0x46
 8000e30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e32:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <MX_TIM1_Init+0x138>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000e38:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <MX_TIM1_Init+0x138>)
 8000e3a:	2263      	movs	r2, #99	; 0x63
 8000e3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3e:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <MX_TIM1_Init+0x138>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e44:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <MX_TIM1_Init+0x138>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4a:	4b35      	ldr	r3, [pc, #212]	; (8000f20 <MX_TIM1_Init+0x138>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e50:	4833      	ldr	r0, [pc, #204]	; (8000f20 <MX_TIM1_Init+0x138>)
 8000e52:	f002 fecf 	bl	8003bf4 <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e5c:	f000 fb0e 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	482c      	ldr	r0, [pc, #176]	; (8000f20 <MX_TIM1_Init+0x138>)
 8000e6e:	f003 fdad 	bl	80049cc <HAL_TIM_ConfigClockSource>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000e78:	f000 fb00 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e7c:	4828      	ldr	r0, [pc, #160]	; (8000f20 <MX_TIM1_Init+0x138>)
 8000e7e:	f002 ff5b 	bl	8003d38 <HAL_TIM_PWM_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000e88:	f000 faf8 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4821      	ldr	r0, [pc, #132]	; (8000f20 <MX_TIM1_Init+0x138>)
 8000e9c:	f004 fc1e 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000ea6:	f000 fae9 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eaa:	2360      	movs	r3, #96	; 0x60
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4814      	ldr	r0, [pc, #80]	; (8000f20 <MX_TIM1_Init+0x138>)
 8000ed0:	f003 fcbe 	bl	8004850 <HAL_TIM_PWM_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000eda:	f000 facf 	bl	800147c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ef2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4807      	ldr	r0, [pc, #28]	; (8000f20 <MX_TIM1_Init+0x138>)
 8000f02:	f004 fc49 	bl	8005798 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000f0c:	f000 fab6 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f10:	4803      	ldr	r0, [pc, #12]	; (8000f20 <MX_TIM1_Init+0x138>)
 8000f12:	f000 ff13 	bl	8001d3c <HAL_TIM_MspPostInit>

}
 8000f16:	bf00      	nop
 8000f18:	3758      	adds	r7, #88	; 0x58
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200006a0 	.word	0x200006a0
 8000f24:	40012c00 	.word	0x40012c00

08000f28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f6e:	4814      	ldr	r0, [pc, #80]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f70:	f002 fe40 	bl	8003bf4 <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f7a:	f000 fa7f 	bl	800147c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000f7e:	2307      	movs	r3, #7
 8000f80:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8000f82:	2320      	movs	r3, #32
 8000f84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000f8e:	f003 fde1 	bl	8004b54 <HAL_TIM_SlaveConfigSynchro>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000f98:	f000 fa70 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_TIM2_Init+0x98>)
 8000faa:	f004 fb97 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000fb4:	f000 fa62 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200006e8 	.word	0x200006e8

08000fc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fe0:	4b20      	ldr	r3, [pc, #128]	; (8001064 <MX_TIM3_Init+0xa0>)
 8000fe2:	4a21      	ldr	r2, [pc, #132]	; (8001068 <MX_TIM3_Init+0xa4>)
 8000fe4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8000fe6:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_TIM3_Init+0xa0>)
 8000fe8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000fec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_TIM3_Init+0xa0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_TIM3_Init+0xa0>)
 8000ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_TIM3_Init+0xa0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_TIM3_Init+0xa0>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001008:	4816      	ldr	r0, [pc, #88]	; (8001064 <MX_TIM3_Init+0xa0>)
 800100a:	f003 f887 	bl	800411c <HAL_TIM_IC_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001014:	f000 fa32 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001018:	2320      	movs	r3, #32
 800101a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	480f      	ldr	r0, [pc, #60]	; (8001064 <MX_TIM3_Init+0xa0>)
 8001028:	f004 fb58 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001032:	f000 fa23 	bl	800147c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800103a:	2301      	movs	r3, #1
 800103c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	2200      	movs	r2, #0
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_TIM3_Init+0xa0>)
 800104e:	f003 fb6b 	bl	8004728 <HAL_TIM_IC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001058:	f000 fa10 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000730 	.word	0x20000730
 8001068:	40000400 	.word	0x40000400

0800106c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <MX_USART1_UART_Init+0x50>)
 8001074:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800107c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 80010a4:	f004 fbdb 	bl	800585e <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010ae:	f000 f9e5 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200007bc 	.word	0x200007bc
 80010bc:	40013800 	.word	0x40013800

080010c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_DMA_Init+0x48>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <MX_DMA_Init+0x48>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <MX_DMA_Init+0x48>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2105      	movs	r1, #5
 80010e2:	200b      	movs	r0, #11
 80010e4:	f001 fce9 	bl	8002aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010e8:	200b      	movs	r0, #11
 80010ea:	f001 fd02 	bl	8002af2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2105      	movs	r1, #5
 80010f2:	200c      	movs	r0, #12
 80010f4:	f001 fce1 	bl	8002aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010f8:	200c      	movs	r0, #12
 80010fa:	f001 fcfa 	bl	8002af2 <HAL_NVIC_EnableIRQ>

}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_GPIO_Init+0x40>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	4a0d      	ldr	r2, [pc, #52]	; (800114c <MX_GPIO_Init+0x40>)
 8001118:	f043 0320 	orr.w	r3, r3, #32
 800111c:	6193      	str	r3, [r2, #24]
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_GPIO_Init+0x40>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f003 0320 	and.w	r3, r3, #32
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <MX_GPIO_Init+0x40>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a07      	ldr	r2, [pc, #28]	; (800114c <MX_GPIO_Init+0x40>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6193      	str	r3, [r2, #24]
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <MX_GPIO_Init+0x40>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	40021000 	.word	0x40021000

08001150 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
/************** LOW frequencymeter *******************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b09e      	sub	sp, #120	; 0x78
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a49      	ldr	r2, [pc, #292]	; (8001280 <HAL_TIM_IC_CaptureCallback+0x130>)
 800115c:	4293      	cmp	r3, r2
 800115e:	f040 8087 	bne.w	8001270 <HAL_TIM_IC_CaptureCallback+0x120>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7f1b      	ldrb	r3, [r3, #28]
 8001166:	2b01      	cmp	r3, #1
 8001168:	f040 8082 	bne.w	8001270 <HAL_TIM_IC_CaptureCallback+0x120>
		{
			count++;
 800116c:	4b45      	ldr	r3, [pc, #276]	; (8001284 <HAL_TIM_IC_CaptureCallback+0x134>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	3301      	adds	r3, #1
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b43      	ldr	r3, [pc, #268]	; (8001284 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001178:	701a      	strb	r2, [r3, #0]

			if(count == 1)
 800117a:	4b42      	ldr	r3, [pc, #264]	; (8001284 <HAL_TIM_IC_CaptureCallback+0x134>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b01      	cmp	r3, #1
 8001182:	d108      	bne.n	8001196 <HAL_TIM_IC_CaptureCallback+0x46>
			{
				__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8001184:	4b3e      	ldr	r3, [pc, #248]	; (8001280 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 800118c:	4b3e      	ldr	r3, [pc, #248]	; (8001288 <HAL_TIM_IC_CaptureCallback+0x138>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24

				HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
			}
		}
	}
}
 8001194:	e06c      	b.n	8001270 <HAL_TIM_IC_CaptureCallback+0x120>
			else if(count == 2)
 8001196:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d167      	bne.n	8001270 <HAL_TIM_IC_CaptureCallback+0x120>
				HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 80011a0:	2100      	movs	r1, #0
 80011a2:	4837      	ldr	r0, [pc, #220]	; (8001280 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011a4:	f003 f910 	bl	80043c8 <HAL_TIM_IC_Stop_IT>
				count = 0;
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <HAL_TIM_IC_CaptureCallback+0x134>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
				uint16_t count_main = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80011ae:	2100      	movs	r1, #0
 80011b0:	4833      	ldr	r0, [pc, #204]	; (8001280 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011b2:	f003 fd11 	bl	8004bd8 <HAL_TIM_ReadCapturedValue>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
				uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim2);
 80011bc:	4b32      	ldr	r3, [pc, #200]	; (8001288 <HAL_TIM_IC_CaptureCallback+0x138>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
				uint16_t arr = __HAL_TIM_GET_AUTORELOAD(&htim2);
 80011c6:	4b30      	ldr	r3, [pc, #192]	; (8001288 <HAL_TIM_IC_CaptureCallback+0x138>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011cc:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
				uint32_t res = count_main + (count_secondary * arr) + count_secondary;
 80011d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80011d4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80011d8:	f8b7 1072 	ldrh.w	r1, [r7, #114]	; 0x72
 80011dc:	fb01 f303 	mul.w	r3, r1, r3
 80011e0:	441a      	add	r2, r3
 80011e2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80011e6:	4413      	add	r3, r2
 80011e8:	66fb      	str	r3, [r7, #108]	; 0x6c
				float freq = 1 / (res / 1000000.0);
 80011ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80011ec:	f7ff f8fa 	bl	80003e4 <__aeabi_ui2d>
 80011f0:	a321      	add	r3, pc, #132	; (adr r3, 8001278 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	f7ff fa99 	bl	800072c <__aeabi_ddiv>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	f04f 0000 	mov.w	r0, #0
 8001202:	4922      	ldr	r1, [pc, #136]	; (800128c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001204:	f7ff fa92 	bl	800072c <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fc3a 	bl	8000a88 <__aeabi_d2f>
 8001214:	4603      	mov	r3, r0
 8001216:	66bb      	str	r3, [r7, #104]	; 0x68
				char str[96] = {0,};
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	225c      	movs	r2, #92	; 0x5c
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f006 f804 	bl	8007232 <memset>
				rpm = (float)freq / (ticks_per_rev * 60.0);
 800122a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800122c:	f7ff f8fc 	bl	8000428 <__aeabi_f2d>
 8001230:	4604      	mov	r4, r0
 8001232:	460d      	mov	r5, r1
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001236:	f993 3000 	ldrsb.w	r3, [r3]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f8e2 	bl	8000404 <__aeabi_i2d>
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001246:	f7ff f947 	bl	80004d8 <__aeabi_dmul>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4620      	mov	r0, r4
 8001250:	4629      	mov	r1, r5
 8001252:	f7ff fa6b 	bl	800072c <__aeabi_ddiv>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fc13 	bl	8000a88 <__aeabi_d2f>
 8001262:	4603      	mov	r3, r0
 8001264:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001266:	6013      	str	r3, [r2, #0]
				HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001268:	2100      	movs	r1, #0
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <HAL_TIM_IC_CaptureCallback+0x130>)
 800126c:	f002 ffa6 	bl	80041bc <HAL_TIM_IC_Start_IT>
}
 8001270:	bf00      	nop
 8001272:	3778      	adds	r7, #120	; 0x78
 8001274:	46bd      	mov	sp, r7
 8001276:	bdb0      	pop	{r4, r5, r7, pc}
 8001278:	00000000 	.word	0x00000000
 800127c:	412e8480 	.word	0x412e8480
 8001280:	20000730 	.word	0x20000730
 8001284:	20000594 	.word	0x20000594
 8001288:	200006e8 	.word	0x200006e8
 800128c:	3ff00000 	.word	0x3ff00000
 8001290:	20000010 	.word	0x20000010
 8001294:	404e0000 	.word	0x404e0000
 8001298:	20000628 	.word	0x20000628

0800129c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	b08d      	sub	sp, #52	; 0x34
 80012a0:	af08      	add	r7, sp, #32
 80012a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80012a4:	2100      	movs	r1, #0
 80012a6:	482a      	ldr	r0, [pc, #168]	; (8001350 <StartDefaultTask+0xb4>)
 80012a8:	f002 ff88 	bl	80041bc <HAL_TIM_IC_Start_IT>
	/************** PID *******************/
	  PID(&Cooler_PID, &input, &output, &setpoint, kp, ki, kd, _PID_P_ON_E, _PID_CD_DIRECT);  // Создаем объект PID-контроллера
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <StartDefaultTask+0xb8>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	4929      	ldr	r1, [pc, #164]	; (8001358 <StartDefaultTask+0xbc>)
 80012b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012b8:	4c28      	ldr	r4, [pc, #160]	; (800135c <StartDefaultTask+0xc0>)
 80012ba:	cc30      	ldmia	r4, {r4, r5}
 80012bc:	2600      	movs	r6, #0
 80012be:	9607      	str	r6, [sp, #28]
 80012c0:	2601      	movs	r6, #1
 80012c2:	9606      	str	r6, [sp, #24]
 80012c4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80012c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012cc:	e9cd 2300 	strd	r2, r3, [sp]
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <StartDefaultTask+0xc4>)
 80012d2:	4a24      	ldr	r2, [pc, #144]	; (8001364 <StartDefaultTask+0xc8>)
 80012d4:	4924      	ldr	r1, [pc, #144]	; (8001368 <StartDefaultTask+0xcc>)
 80012d6:	4825      	ldr	r0, [pc, #148]	; (800136c <StartDefaultTask+0xd0>)
 80012d8:	f000 f912 	bl	8001500 <PID>
	  PID_SetMode(&Cooler_PID, _PID_MODE_AUTOMATIC);  // Инициализируем объект PID-контроллера
 80012dc:	2101      	movs	r1, #1
 80012de:	4823      	ldr	r0, [pc, #140]	; (800136c <StartDefaultTask+0xd0>)
 80012e0:	f000 fa40 	bl	8001764 <PID_SetMode>
	  PID_SetSampleTime(&Cooler_PID, 1);  // Устанавливаем время дискретизации в 1 ms. Также следует учитывать, что уменьшение времени дискретизации может привести к увеличению шума
 80012e4:	2101      	movs	r1, #1
 80012e6:	4821      	ldr	r0, [pc, #132]	; (800136c <StartDefaultTask+0xd0>)
 80012e8:	f000 fbaa 	bl	8001a40 <PID_SetSampleTime>
	  PID_SetOutputLimits(&Cooler_PID, 0, 100);  // Устанавливаем лимиты на выходное значение
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <StartDefaultTask+0xd4>)
 80012f2:	e9cd 2300 	strd	r2, r3, [sp]
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	481b      	ldr	r0, [pc, #108]	; (800136c <StartDefaultTask+0xd0>)
 8001300:	f000 fa4e 	bl	80017a0 <PID_SetOutputLimits>
  /* Infinite loop */
  for(;;)
  {
	    // Считываем текущее количество оборотов в минуту
	    input = rpm;  // Замените ... на код для считывания текущего значения оборотов в минуту
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <StartDefaultTask+0xd8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f88d 	bl	8000428 <__aeabi_f2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4915      	ldr	r1, [pc, #84]	; (8001368 <StartDefaultTask+0xcc>)
 8001314:	e9c1 2300 	strd	r2, r3, [r1]

	    // Обновляем значение выхода PID-контроллера
	    PID_Compute(&Cooler_PID);
 8001318:	4814      	ldr	r0, [pc, #80]	; (800136c <StartDefaultTask+0xd0>)
 800131a:	f000 f939 	bl	8001590 <PID_Compute>

	    // Устанавливаем скорость мотора с помощью выхода PID-контроллера
	    int16_t value = (int16_t)output;  // Преобразуем значение выхода PID-контроллера в целое число
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <StartDefaultTask+0xc8>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff fb86 	bl	8000a38 <__aeabi_d2iz>
 800132c:	4603      	mov	r3, r0
 800132e:	81fb      	strh	r3, [r7, #14]
	    pwmData[0] = value;
 8001330:	89fa      	ldrh	r2, [r7, #14]
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <StartDefaultTask+0xdc>)
 8001334:	801a      	strh	r2, [r3, #0]
	    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, 1);
 8001336:	2301      	movs	r3, #1
 8001338:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <StartDefaultTask+0xdc>)
 800133a:	2100      	movs	r1, #0
 800133c:	480f      	ldr	r0, [pc, #60]	; (800137c <StartDefaultTask+0xe0>)
 800133e:	f002 fd53 	bl	8003de8 <HAL_TIM_PWM_Start_DMA>
	    printf("Output = %.d \r\n",pwmData[0]);
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <StartDefaultTask+0xdc>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	480d      	ldr	r0, [pc, #52]	; (8001380 <StartDefaultTask+0xe4>)
 800134a:	f006 fc6f 	bl	8007c2c <iprintf>
  {
 800134e:	e7d9      	b.n	8001304 <StartDefaultTask+0x68>
 8001350:	20000730 	.word	0x20000730
 8001354:	200005a8 	.word	0x200005a8
 8001358:	20000008 	.word	0x20000008
 800135c:	200005b0 	.word	0x200005b0
 8001360:	20000000 	.word	0x20000000
 8001364:	200005a0 	.word	0x200005a0
 8001368:	20000598 	.word	0x20000598
 800136c:	200005b8 	.word	0x200005b8
 8001370:	40590000 	.word	0x40590000
 8001374:	20000628 	.word	0x20000628
 8001378:	200004c8 	.word	0x200004c8
 800137c:	200006a0 	.word	0x200006a0
 8001380:	08009be8 	.word	0x08009be8

08001384 <Start_PWM_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_PWM_Task */
void Start_PWM_Task(void const * argument)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_PWM_Task */
	/************** PWM *******************/
	  pwmData[0] = 70;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <Start_PWM_Task+0x18>)
 800138e:	2246      	movs	r2, #70	; 0x46
 8001390:	801a      	strh	r2, [r3, #0]
  {
	  //	value = (adc_buf[0] - in_min) * (out_max - out_min) / (in_max - in_min) + out_min; // Function map
	  //	pwmData[0] = value;
	  //	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, 1);
	  	//printf("pwmData[0] = %d\r\n",pwmData[0]);
    osDelay(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f004 fc84 	bl	8005ca0 <osDelay>
 8001398:	e7fb      	b.n	8001392 <Start_PWM_Task+0xe>
 800139a:	bf00      	nop
 800139c:	200004c8 	.word	0x200004c8

080013a0 <map.0>:
void Start_ADC_Task(void const *argument) {
	/* USER CODE BEGIN Start_ADC_Task */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LED);

	/************** Map *******************/
	int16_t map(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max) {
 80013a0:	b490      	push	{r4, r7}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4604      	mov	r4, r0
 80013a8:	4608      	mov	r0, r1
 80013aa:	4611      	mov	r1, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	4623      	mov	r3, r4
 80013b0:	81fb      	strh	r3, [r7, #14]
 80013b2:	4603      	mov	r3, r0
 80013b4:	81bb      	strh	r3, [r7, #12]
 80013b6:	460b      	mov	r3, r1
 80013b8:	817b      	strh	r3, [r7, #10]
 80013ba:	4613      	mov	r3, r2
 80013bc:	813b      	strh	r3, [r7, #8]
 80013be:	f8c7 c004 	str.w	ip, [r7, #4]
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80013c2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 80013d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013d4:	1a8a      	subs	r2, r1, r2
 80013d6:	fb03 f202 	mul.w	r2, r3, r2
 80013da:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80013de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013e2:	1acb      	subs	r3, r1, r3
 80013e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	893b      	ldrh	r3, [r7, #8]
 80013ec:	4413      	add	r3, r2
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	b21b      	sxth	r3, r3
	}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc90      	pop	{r4, r7}
 80013fa:	4770      	bx	lr

080013fc <Start_ADC_Task>:
void Start_ADC_Task(void const *argument) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af02      	add	r7, sp, #8
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LED);
 800140a:	2264      	movs	r2, #100	; 0x64
 800140c:	490f      	ldr	r1, [pc, #60]	; (800144c <Start_ADC_Task+0x50>)
 800140e:	4810      	ldr	r0, [pc, #64]	; (8001450 <Start_ADC_Task+0x54>)
 8001410:	f000 ffaa 	bl	8002368 <HAL_ADC_Start_DMA>
	/* Infinite loop */
	for (;;) {
		//printf("adc_buf = %u\r\n",(unsigned int)adc_buf[0]);
		setpoint = map(adc_buf[0], 0, 4050, 0, 100);
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <Start_ADC_Task+0x50>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	b218      	sxth	r0, r3
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2264      	movs	r2, #100	; 0x64
 8001420:	9200      	str	r2, [sp, #0]
 8001422:	469c      	mov	ip, r3
 8001424:	2300      	movs	r3, #0
 8001426:	f640 72d2 	movw	r2, #4050	; 0xfd2
 800142a:	2100      	movs	r1, #0
 800142c:	f7ff ffb8 	bl	80013a0 <map.0>
 8001430:	4603      	mov	r3, r0
 8001432:	4618      	mov	r0, r3
 8001434:	f7fe ffe6 	bl	8000404 <__aeabi_i2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4905      	ldr	r1, [pc, #20]	; (8001454 <Start_ADC_Task+0x58>)
 800143e:	e9c1 2300 	strd	r2, r3, [r1]
		osDelay(1);
 8001442:	2001      	movs	r0, #1
 8001444:	f004 fc2c 	bl	8005ca0 <osDelay>
		setpoint = map(adc_buf[0], 0, 4050, 0, 100);
 8001448:	e7e4      	b.n	8001414 <Start_ADC_Task+0x18>
 800144a:	bf00      	nop
 800144c:	200004cc 	.word	0x200004cc
 8001450:	2000062c 	.word	0x2000062c
 8001454:	20000000 	.word	0x20000000

08001458 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d101      	bne.n	800146e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800146a:	f000 fe89 	bl	8002180 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40000800 	.word	0x40000800

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
}
 8001482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001484:	e7fe      	b.n	8001484 <Error_Handler+0x8>

08001486 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	if (uPID->OutputSum > uPID->OutMax)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80014b6:	f7ff fa9f 	bl	80009f8 <__aeabi_dcmpgt>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 80014cc:	e011      	b.n	80014f2 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80014da:	f7ff fa6f 	bl	80009bc <__aeabi_dcmplt>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d100      	bne.n	80014e6 <PID_Init+0x60>
}
 80014e4:	e005      	b.n	80014f2 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	0000      	movs	r0, r0
 80014fc:	0000      	movs	r0, r0
	...

08001500 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af06      	add	r7, sp, #24
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001526:	a318      	add	r3, pc, #96	; (adr r3, 8001588 <PID+0x88>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	e9cd 2300 	strd	r2, r3, [sp]
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 f931 	bl	80017a0 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2264      	movs	r2, #100	; 0x64
 8001542:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8001544:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001548:	4619      	mov	r1, r3
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 fa38 	bl	80019c0 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8001550:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001554:	9304      	str	r3, [sp, #16]
 8001556:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800155a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800155e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001562:	e9cd 2300 	strd	r2, r3, [sp]
 8001566:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f000 f984 	bl	8001878 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8001570:	f000 fe18 	bl	80021a4 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	1ad2      	subs	r2, r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	605a      	str	r2, [r3, #4]

}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	00000000 	.word	0x00000000
 800158c:	406fe000 	.word	0x406fe000

08001590 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b08c      	sub	sp, #48	; 0x30
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <PID_Compute+0x14>
	{
		return _FALSE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	e0db      	b.n	800175c <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80015a4:	f000 fdfe 	bl	80021a4 <HAL_GetTick>
 80015a8:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	6a3a      	ldr	r2, [r7, #32]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	f0c0 80cd 	bcc.w	800175a <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015d8:	f7fe fdc6 	bl	8000168 <__aeabi_dsub>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80015ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015ee:	f7fe fdbb 	bl	8000168 <__aeabi_dsub>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001606:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800160a:	f7fe ff65 	bl	80004d8 <__aeabi_dmul>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4620      	mov	r0, r4
 8001614:	4629      	mov	r1, r5
 8001616:	f7fe fda9 	bl	800016c <__adddf3>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d114      	bne.n	8001656 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800163c:	f7fe ff4c 	bl	80004d8 <__aeabi_dmul>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4620      	mov	r0, r4
 8001646:	4629      	mov	r1, r5
 8001648:	f7fe fd8e 	bl	8000168 <__aeabi_dsub>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001662:	f7ff f9c9 	bl	80009f8 <__aeabi_dcmpgt>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001678:	e010      	b.n	800169c <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001686:	f7ff f999 	bl	80009bc <__aeabi_dcmplt>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00b      	beq.n	80016bc <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80016aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016ae:	f7fe ff13 	bl	80004d8 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80016ba:	e005      	b.n	80016c8 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80016d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016d8:	f7fe fefe 	bl	80004d8 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4620      	mov	r0, r4
 80016e2:	4629      	mov	r1, r5
 80016e4:	f7fe fd40 	bl	8000168 <__aeabi_dsub>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016f0:	f7fe fd3c 	bl	800016c <__adddf3>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001702:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001706:	f7ff f977 	bl	80009f8 <__aeabi_dcmpgt>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001716:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800171a:	e00e      	b.n	800173a <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001722:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001726:	f7ff f949 	bl	80009bc <__aeabi_dcmplt>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d004      	beq.n	800173a <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001736:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }

		*uPID->MyOutput = output;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800173e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001742:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800174c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001754:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 800175a:	2300      	movs	r3, #0
	}

}
 800175c:	4618      	mov	r0, r3
 800175e:	3730      	adds	r7, #48	; 0x30
 8001760:	46bd      	mov	sp, r7
 8001762:	bdb0      	pop	{r4, r5, r7, pc}

08001764 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	2b01      	cmp	r3, #1
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <PID_SetMode+0x2e>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	785b      	ldrb	r3, [r3, #1]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff fe7a 	bl	8001486 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7bfa      	ldrb	r2, [r7, #15]
 8001796:	705a      	strb	r2, [r3, #1]

}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80017ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017b4:	f7ff f916 	bl	80009e4 <__aeabi_dcmpge>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d158      	bne.n	8001870 <PID_SetOutputLimits+0xd0>
	{
		return;
	}

	uPID->OutMin = Min;
 80017be:	68f9      	ldr	r1, [r7, #12]
 80017c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017c4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 80017c8:	68f9      	ldr	r1, [r7, #12]
 80017ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017ce:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	785b      	ldrb	r3, [r3, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d04b      	beq.n	8001872 <PID_SetOutputLimits+0xd2>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80017e8:	f7ff f906 	bl	80009f8 <__aeabi_dcmpgt>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80017fc:	e9c1 2300 	strd	r2, r3, [r1]
 8001800:	e012      	b.n	8001828 <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	e9d3 0100 	ldrd	r0, r1, [r3]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001810:	f7ff f8d4 	bl	80009bc <__aeabi_dcmplt>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001824:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001834:	f7ff f8e0 	bl	80009f8 <__aeabi_dcmpgt>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001844:	68f9      	ldr	r1, [r7, #12]
 8001846:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800184a:	e012      	b.n	8001872 <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001858:	f7ff f8b0 	bl	80009bc <__aeabi_dcmplt>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001868:	68f9      	ldr	r1, [r7, #12]
 800186a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800186e:	e000      	b.n	8001872 <PID_SetOutputLimits+0xd2>
		return;
 8001870:	bf00      	nop
		}
		else { }

	}

}
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	e9c7 2300 	strd	r2, r3, [r7]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001890:	f7ff f894 	bl	80009bc <__aeabi_dcmplt>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	f040 808b 	bne.w	80019b2 <PID_SetTunings2+0x13a>
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018a8:	f7ff f888 	bl	80009bc <__aeabi_dcmplt>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d17f      	bne.n	80019b2 <PID_SetTunings2+0x13a>
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018be:	f7ff f87d 	bl	80009bc <__aeabi_dcmplt>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d174      	bne.n	80019b2 <PID_SetTunings2+0x13a>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80018ce:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80018d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	bf0c      	ite	eq
 80018d8:	2301      	moveq	r3, #1
 80018da:	2300      	movne	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80018e4:	68f9      	ldr	r1, [r7, #12]
 80018e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018ea:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80018ee:	68f9      	ldr	r1, [r7, #12]
 80018f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80018f8:	68f9      	ldr	r1, [r7, #12]
 80018fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018fe:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fd6c 	bl	80003e4 <__aeabi_ui2d>
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <PID_SetTunings2+0x144>)
 8001912:	f7fe ff0b 	bl	800072c <__aeabi_ddiv>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uPID->Kp = Kp;
 800191e:	68f9      	ldr	r1, [r7, #12]
 8001920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001924:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001928:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800192c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001930:	f7fe fdd2 	bl	80004d8 <__aeabi_dmul>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	68f9      	ldr	r1, [r7, #12]
 800193a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800193e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001942:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001946:	f7fe fef1 	bl	800072c <__aeabi_ddiv>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	68f9      	ldr	r1, [r7, #12]
 8001950:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	78db      	ldrb	r3, [r3, #3]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d12b      	bne.n	80019b4 <PID_SetTunings2+0x13c>
	{

		uPID->Kp = (0 - uPID->Kp);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001962:	f04f 0000 	mov.w	r0, #0
 8001966:	f04f 0100 	mov.w	r1, #0
 800196a:	f7fe fbfd 	bl	8000168 <__aeabi_dsub>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	68f9      	ldr	r1, [r7, #12]
 8001974:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800197e:	f04f 0000 	mov.w	r0, #0
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	f7fe fbef 	bl	8000168 <__aeabi_dsub>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	68f9      	ldr	r1, [r7, #12]
 8001990:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800199a:	f04f 0000 	mov.w	r0, #0
 800199e:	f04f 0100 	mov.w	r1, #0
 80019a2:	f7fe fbe1 	bl	8000168 <__aeabi_dsub>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	68f9      	ldr	r1, [r7, #12]
 80019ac:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80019b0:	e000      	b.n	80019b4 <PID_SetTunings2+0x13c>
		return;
 80019b2:	bf00      	nop

	}

}
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	408f4000 	.word	0x408f4000

080019c0 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	785b      	ldrb	r3, [r3, #1]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d02e      	beq.n	8001a32 <PID_SetControllerDirection+0x72>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	78db      	ldrb	r3, [r3, #3]
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d029      	beq.n	8001a32 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80019e4:	f04f 0000 	mov.w	r0, #0
 80019e8:	f04f 0100 	mov.w	r1, #0
 80019ec:	f7fe fbbc 	bl	8000168 <__aeabi_dsub>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a00:	f04f 0000 	mov.w	r0, #0
 8001a04:	f04f 0100 	mov.w	r1, #0
 8001a08:	f7fe fbae 	bl	8000168 <__aeabi_dsub>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001a1c:	f04f 0000 	mov.w	r0, #0
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	f7fe fba0 	bl	8000168 <__aeabi_dsub>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	70da      	strb	r2, [r3, #3]

}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	dd2e      	ble.n	8001aae <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001a50:	6838      	ldr	r0, [r7, #0]
 8001a52:	f7fe fcd7 	bl	8000404 <__aeabi_i2d>
 8001a56:	4604      	mov	r4, r0
 8001a58:	460d      	mov	r5, r1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fcc0 	bl	80003e4 <__aeabi_ui2d>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f7fe fe5e 	bl	800072c <__aeabi_ddiv>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001a7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a82:	f7fe fd29 	bl	80004d8 <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a9a:	f7fe fe47 	bl	800072c <__aeabi_ddiv>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	609a      	str	r2, [r3, #8]

	}

}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ab8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_MspInit+0x68>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_MspInit+0x68>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6193      	str	r3, [r2, #24]
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_MspInit+0x68>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_MspInit+0x68>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <HAL_MspInit+0x68>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_MspInit+0x68>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	210f      	movs	r1, #15
 8001af2:	f06f 0001 	mvn.w	r0, #1
 8001af6:	f000 ffe0 	bl	8002aba <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_MspInit+0x6c>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_MspInit+0x6c>)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000

08001b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a28      	ldr	r2, [pc, #160]	; (8001be4 <HAL_ADC_MspInit+0xbc>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d149      	bne.n	8001bdc <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <HAL_ADC_MspInit+0xc0>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a26      	ldr	r2, [pc, #152]	; (8001be8 <HAL_ADC_MspInit+0xc0>)
 8001b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <HAL_ADC_MspInit+0xc0>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <HAL_ADC_MspInit+0xc0>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <HAL_ADC_MspInit+0xc0>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <HAL_ADC_MspInit+0xc0>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	4619      	mov	r1, r3
 8001b86:	4819      	ldr	r0, [pc, #100]	; (8001bec <HAL_ADC_MspInit+0xc4>)
 8001b88:	f001 f9b0 	bl	8002eec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b8c:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_ADC_MspInit+0xc8>)
 8001b8e:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_ADC_MspInit+0xcc>)
 8001b90:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_ADC_MspInit+0xc8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_ADC_MspInit+0xc8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_ADC_MspInit+0xc8>)
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_ADC_MspInit+0xc8>)
 8001ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001baa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_ADC_MspInit+0xc8>)
 8001bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_ADC_MspInit+0xc8>)
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_ADC_MspInit+0xc8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bc0:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <HAL_ADC_MspInit+0xc8>)
 8001bc2:	f000 ffa5 	bl	8002b10 <HAL_DMA_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001bcc:	f7ff fc56 	bl	800147c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_ADC_MspInit+0xc8>)
 8001bd4:	621a      	str	r2, [r3, #32]
 8001bd6:	4a06      	ldr	r2, [pc, #24]	; (8001bf0 <HAL_ADC_MspInit+0xc8>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40012400 	.word	0x40012400
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	2000065c 	.word	0x2000065c
 8001bf4:	40020008 	.word	0x40020008

08001bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a26      	ldr	r2, [pc, #152]	; (8001ca0 <HAL_TIM_Base_MspInit+0xa8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d134      	bne.n	8001c74 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0a:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <HAL_TIM_Base_MspInit+0xac>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	4a25      	ldr	r2, [pc, #148]	; (8001ca4 <HAL_TIM_Base_MspInit+0xac>)
 8001c10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c14:	6193      	str	r3, [r2, #24]
 8001c16:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <HAL_TIM_Base_MspInit+0xac>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_TIM_Base_MspInit+0xb0>)
 8001c24:	4a21      	ldr	r2, [pc, #132]	; (8001cac <HAL_TIM_Base_MspInit+0xb4>)
 8001c26:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c28:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <HAL_TIM_Base_MspInit+0xb0>)
 8001c2a:	2210      	movs	r2, #16
 8001c2c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <HAL_TIM_Base_MspInit+0xb0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c34:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <HAL_TIM_Base_MspInit+0xb0>)
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_TIM_Base_MspInit+0xb0>)
 8001c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c40:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_TIM_Base_MspInit+0xb0>)
 8001c44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c48:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_TIM_Base_MspInit+0xb0>)
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_TIM_Base_MspInit+0xb0>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001c56:	4814      	ldr	r0, [pc, #80]	; (8001ca8 <HAL_TIM_Base_MspInit+0xb0>)
 8001c58:	f000 ff5a 	bl	8002b10 <HAL_DMA_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001c62:	f7ff fc0b 	bl	800147c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <HAL_TIM_Base_MspInit+0xb0>)
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
 8001c6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <HAL_TIM_Base_MspInit+0xb0>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c72:	e010      	b.n	8001c96 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d10b      	bne.n	8001c96 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_TIM_Base_MspInit+0xac>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <HAL_TIM_Base_MspInit+0xac>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	61d3      	str	r3, [r2, #28]
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_TIM_Base_MspInit+0xac>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40012c00 	.word	0x40012c00
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	20000778 	.word	0x20000778
 8001cac:	4002001c 	.word	0x4002001c

08001cb0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <HAL_TIM_IC_MspInit+0x80>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d12b      	bne.n	8001d28 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_TIM_IC_MspInit+0x84>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <HAL_TIM_IC_MspInit+0x84>)
 8001cd6:	f043 0302 	orr.w	r3, r3, #2
 8001cda:	61d3      	str	r3, [r2, #28]
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_TIM_IC_MspInit+0x84>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_TIM_IC_MspInit+0x84>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a11      	ldr	r2, [pc, #68]	; (8001d34 <HAL_TIM_IC_MspInit+0x84>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_TIM_IC_MspInit+0x84>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d00:	2340      	movs	r3, #64	; 0x40
 8001d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4619      	mov	r1, r3
 8001d12:	4809      	ldr	r0, [pc, #36]	; (8001d38 <HAL_TIM_IC_MspInit+0x88>)
 8001d14:	f001 f8ea 	bl	8002eec <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2105      	movs	r1, #5
 8001d1c:	201d      	movs	r0, #29
 8001d1e:	f000 fecc 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d22:	201d      	movs	r0, #29
 8001d24:	f000 fee5 	bl	8002af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40000400 	.word	0x40000400
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010800 	.word	0x40010800

08001d3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a10      	ldr	r2, [pc, #64]	; (8001d98 <HAL_TIM_MspPostInit+0x5c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d118      	bne.n	8001d8e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_TIM_MspPostInit+0x60>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <HAL_TIM_MspPostInit+0x60>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_TIM_MspPostInit+0x60>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 0310 	add.w	r3, r7, #16
 8001d86:	4619      	mov	r1, r3
 8001d88:	4805      	ldr	r0, [pc, #20]	; (8001da0 <HAL_TIM_MspPostInit+0x64>)
 8001d8a:	f001 f8af 	bl	8002eec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d8e:	bf00      	nop
 8001d90:	3720      	adds	r7, #32
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40012c00 	.word	0x40012c00
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010800 	.word	0x40010800

08001da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <HAL_UART_MspInit+0x8c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d131      	bne.n	8001e28 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <HAL_UART_MspInit+0x90>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a1a      	ldr	r2, [pc, #104]	; (8001e34 <HAL_UART_MspInit+0x90>)
 8001dca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_UART_MspInit+0x90>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_UART_MspInit+0x90>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <HAL_UART_MspInit+0x90>)
 8001de2:	f043 0304 	orr.w	r3, r3, #4
 8001de6:	6193      	str	r3, [r2, #24]
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_UART_MspInit+0x90>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	f107 0310 	add.w	r3, r7, #16
 8001e06:	4619      	mov	r1, r3
 8001e08:	480b      	ldr	r0, [pc, #44]	; (8001e38 <HAL_UART_MspInit+0x94>)
 8001e0a:	f001 f86f 	bl	8002eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	4619      	mov	r1, r3
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <HAL_UART_MspInit+0x94>)
 8001e24:	f001 f862 	bl	8002eec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e28:	bf00      	nop
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40013800 	.word	0x40013800
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010800 	.word	0x40010800

08001e3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08e      	sub	sp, #56	; 0x38
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001e52:	4b34      	ldr	r3, [pc, #208]	; (8001f24 <HAL_InitTick+0xe8>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4a33      	ldr	r2, [pc, #204]	; (8001f24 <HAL_InitTick+0xe8>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	61d3      	str	r3, [r2, #28]
 8001e5e:	4b31      	ldr	r3, [pc, #196]	; (8001f24 <HAL_InitTick+0xe8>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e6a:	f107 0210 	add.w	r2, r7, #16
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f001 fdb9 	bl	80039ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d103      	bne.n	8001e8c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e84:	f001 fd8a 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8001e88:	6378      	str	r0, [r7, #52]	; 0x34
 8001e8a:	e004      	b.n	8001e96 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e8c:	f001 fd86 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8001e90:	4603      	mov	r3, r0
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e98:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_InitTick+0xec>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0c9b      	lsrs	r3, r3, #18
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001ea4:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_InitTick+0xf0>)
 8001ea6:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <HAL_InitTick+0xf4>)
 8001ea8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001eaa:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_InitTick+0xf0>)
 8001eac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eb0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <HAL_InitTick+0xf0>)
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_InitTick+0xf0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_InitTick+0xf0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_InitTick+0xf0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001eca:	4818      	ldr	r0, [pc, #96]	; (8001f2c <HAL_InitTick+0xf0>)
 8001ecc:	f001 fe92 	bl	8003bf4 <HAL_TIM_Base_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ed6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d11b      	bne.n	8001f16 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001ede:	4813      	ldr	r0, [pc, #76]	; (8001f2c <HAL_InitTick+0xf0>)
 8001ee0:	f001 fed8 	bl	8003c94 <HAL_TIM_Base_Start_IT>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001eea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d111      	bne.n	8001f16 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ef2:	201e      	movs	r0, #30
 8001ef4:	f000 fdfd 	bl	8002af2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b0f      	cmp	r3, #15
 8001efc:	d808      	bhi.n	8001f10 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001efe:	2200      	movs	r2, #0
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	201e      	movs	r0, #30
 8001f04:	f000 fdd9 	bl	8002aba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_InitTick+0xf8>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e002      	b.n	8001f16 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3738      	adds	r7, #56	; 0x38
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	431bde83 	.word	0x431bde83
 8001f2c:	20001628 	.word	0x20001628
 8001f30:	40000800 	.word	0x40000800
 8001f34:	20000018 	.word	0x20000018

08001f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <NMI_Handler+0x4>

08001f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <HardFault_Handler+0x4>

08001f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <MemManage_Handler+0x4>

08001f4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4e:	e7fe      	b.n	8001f4e <BusFault_Handler+0x4>

08001f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <UsageFault_Handler+0x4>

08001f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
	...

08001f64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <DMA1_Channel1_IRQHandler+0x10>)
 8001f6a:	f000 fe8b 	bl	8002c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000065c 	.word	0x2000065c

08001f78 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <DMA1_Channel2_IRQHandler+0x10>)
 8001f7e:	f000 fe81 	bl	8002c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000778 	.word	0x20000778

08001f8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <TIM3_IRQHandler+0x10>)
 8001f92:	f002 fac1 	bl	8004518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000730 	.word	0x20000730

08001fa0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <TIM4_IRQHandler+0x10>)
 8001fa6:	f002 fab7 	bl	8004518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20001628 	.word	0x20001628

08001fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return 1;
 8001fb8:	2301      	movs	r3, #1
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <_kill>:

int _kill(int pid, int sig)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fcc:	f005 f800 	bl	8006fd0 <__errno>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2216      	movs	r2, #22
 8001fd4:	601a      	str	r2, [r3, #0]
  return -1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_exit>:

void _exit (int status)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ffe7 	bl	8001fc2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ff4:	e7fe      	b.n	8001ff4 <_exit+0x12>

08001ff6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	e00a      	b.n	800201e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002008:	f3af 8000 	nop.w
 800200c:	4601      	mov	r1, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	60ba      	str	r2, [r7, #8]
 8002014:	b2ca      	uxtb	r2, r1
 8002016:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	3301      	adds	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	dbf0      	blt.n	8002008 <_read+0x12>
  }

  return len;
 8002026:	687b      	ldr	r3, [r7, #4]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr

08002046 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002056:	605a      	str	r2, [r3, #4]
  return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <_isatty>:

int _isatty(int file)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800206c:	2301      	movs	r3, #1
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002098:	4a14      	ldr	r2, [pc, #80]	; (80020ec <_sbrk+0x5c>)
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <_sbrk+0x60>)
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <_sbrk+0x64>)
 80020ae:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <_sbrk+0x68>)
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d207      	bcs.n	80020d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c0:	f004 ff86 	bl	8006fd0 <__errno>
 80020c4:	4603      	mov	r3, r0
 80020c6:	220c      	movs	r2, #12
 80020c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ce:	e009      	b.n	80020e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <_sbrk+0x64>)
 80020e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20005000 	.word	0x20005000
 80020f0:	00000400 	.word	0x00000400
 80020f4:	20001670 	.word	0x20001670
 80020f8:	200023d8 	.word	0x200023d8

080020fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002108:	480c      	ldr	r0, [pc, #48]	; (800213c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800210a:	490d      	ldr	r1, [pc, #52]	; (8002140 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002110:	e002      	b.n	8002118 <LoopCopyDataInit>

08002112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002116:	3304      	adds	r3, #4

08002118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800211c:	d3f9      	bcc.n	8002112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002120:	4c0a      	ldr	r4, [pc, #40]	; (800214c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002124:	e001      	b.n	800212a <LoopFillZerobss>

08002126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002128:	3204      	adds	r2, #4

0800212a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800212c:	d3fb      	bcc.n	8002126 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800212e:	f7ff ffe5 	bl	80020fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002132:	f005 f849 	bl	80071c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002136:	f7fe fd5b 	bl	8000bf0 <main>
  bx lr
 800213a:	4770      	bx	lr
  ldr r0, =_sdata
 800213c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002140:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002144:	0800a00c 	.word	0x0800a00c
  ldr r2, =_sbss
 8002148:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800214c:	200023d4 	.word	0x200023d4

08002150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC1_2_IRQHandler>
	...

08002154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_Init+0x28>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a07      	ldr	r2, [pc, #28]	; (800217c <HAL_Init+0x28>)
 800215e:	f043 0310 	orr.w	r3, r3, #16
 8002162:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002164:	2003      	movs	r0, #3
 8002166:	f000 fc9d 	bl	8002aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216a:	200f      	movs	r0, #15
 800216c:	f7ff fe66 	bl	8001e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002170:	f7ff fca2 	bl	8001ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40022000 	.word	0x40022000

08002180 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_IncTick+0x1c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_IncTick+0x20>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4413      	add	r3, r2
 8002190:	4a03      	ldr	r2, [pc, #12]	; (80021a0 <HAL_IncTick+0x20>)
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	2000001c 	.word	0x2000001c
 80021a0:	20001674 	.word	0x20001674

080021a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return uwTick;
 80021a8:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <HAL_GetTick+0x10>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	20001674 	.word	0x20001674

080021b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0be      	b.n	8002358 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d109      	bne.n	80021fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff fc96 	bl	8001b28 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 faff 	bl	8002800 <ADC_ConversionStop_Disable>
 8002202:	4603      	mov	r3, r0
 8002204:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	2b00      	cmp	r3, #0
 8002210:	f040 8099 	bne.w	8002346 <HAL_ADC_Init+0x18e>
 8002214:	7dfb      	ldrb	r3, [r7, #23]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 8095 	bne.w	8002346 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002224:	f023 0302 	bic.w	r3, r3, #2
 8002228:	f043 0202 	orr.w	r2, r3, #2
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002238:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7b1b      	ldrb	r3, [r3, #12]
 800223e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002240:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	4313      	orrs	r3, r2
 8002246:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002250:	d003      	beq.n	800225a <HAL_ADC_Init+0xa2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d102      	bne.n	8002260 <HAL_ADC_Init+0xa8>
 800225a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800225e:	e000      	b.n	8002262 <HAL_ADC_Init+0xaa>
 8002260:	2300      	movs	r3, #0
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7d1b      	ldrb	r3, [r3, #20]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d119      	bne.n	80022a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7b1b      	ldrb	r3, [r3, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	3b01      	subs	r3, #1
 800227e:	035a      	lsls	r2, r3, #13
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	e00b      	b.n	80022a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	f043 0220 	orr.w	r2, r3, #32
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	f043 0201 	orr.w	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	4b28      	ldr	r3, [pc, #160]	; (8002360 <HAL_ADC_Init+0x1a8>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022d4:	d003      	beq.n	80022de <HAL_ADC_Init+0x126>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d104      	bne.n	80022e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	051b      	lsls	r3, r3, #20
 80022e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HAL_ADC_Init+0x1ac>)
 8002304:	4013      	ands	r3, r2
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	429a      	cmp	r2, r3
 800230a:	d10b      	bne.n	8002324 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	f023 0303 	bic.w	r3, r3, #3
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002322:	e018      	b.n	8002356 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002328:	f023 0312 	bic.w	r3, r3, #18
 800232c:	f043 0210 	orr.w	r2, r3, #16
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	f043 0201 	orr.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002344:	e007      	b.n	8002356 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	f043 0210 	orr.w	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002356:	7dfb      	ldrb	r3, [r7, #23]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	ffe1f7fd 	.word	0xffe1f7fd
 8002364:	ff1f0efe 	.word	0xff1f0efe

08002368 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a64      	ldr	r2, [pc, #400]	; (8002510 <HAL_ADC_Start_DMA+0x1a8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d004      	beq.n	800238c <HAL_ADC_Start_DMA+0x24>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a63      	ldr	r2, [pc, #396]	; (8002514 <HAL_ADC_Start_DMA+0x1ac>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d106      	bne.n	800239a <HAL_ADC_Start_DMA+0x32>
 800238c:	4b60      	ldr	r3, [pc, #384]	; (8002510 <HAL_ADC_Start_DMA+0x1a8>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002394:	2b00      	cmp	r3, #0
 8002396:	f040 80b3 	bne.w	8002500 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_Start_DMA+0x40>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e0ae      	b.n	8002506 <HAL_ADC_Start_DMA+0x19e>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f9cb 	bl	800274c <ADC_Enable>
 80023b6:	4603      	mov	r3, r0
 80023b8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f040 809a 	bne.w	80024f6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a4e      	ldr	r2, [pc, #312]	; (8002514 <HAL_ADC_Start_DMA+0x1ac>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d105      	bne.n	80023ec <HAL_ADC_Start_DMA+0x84>
 80023e0:	4b4b      	ldr	r3, [pc, #300]	; (8002510 <HAL_ADC_Start_DMA+0x1a8>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d115      	bne.n	8002418 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002402:	2b00      	cmp	r3, #0
 8002404:	d026      	beq.n	8002454 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800240e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002416:	e01d      	b.n	8002454 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a39      	ldr	r2, [pc, #228]	; (8002510 <HAL_ADC_Start_DMA+0x1a8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d004      	beq.n	8002438 <HAL_ADC_Start_DMA+0xd0>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a38      	ldr	r2, [pc, #224]	; (8002514 <HAL_ADC_Start_DMA+0x1ac>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d10d      	bne.n	8002454 <HAL_ADC_Start_DMA+0xec>
 8002438:	4b35      	ldr	r3, [pc, #212]	; (8002510 <HAL_ADC_Start_DMA+0x1a8>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800244c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	f023 0206 	bic.w	r2, r3, #6
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
 800246c:	e002      	b.n	8002474 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4a25      	ldr	r2, [pc, #148]	; (8002518 <HAL_ADC_Start_DMA+0x1b0>)
 8002482:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a24      	ldr	r2, [pc, #144]	; (800251c <HAL_ADC_Start_DMA+0x1b4>)
 800248a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4a23      	ldr	r2, [pc, #140]	; (8002520 <HAL_ADC_Start_DMA+0x1b8>)
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0202 	mvn.w	r2, #2
 800249c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ac:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a18      	ldr	r0, [r3, #32]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	334c      	adds	r3, #76	; 0x4c
 80024b8:	4619      	mov	r1, r3
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f000 fb81 	bl	8002bc4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024cc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024d0:	d108      	bne.n	80024e4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80024e0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80024e2:	e00f      	b.n	8002504 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024f2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80024f4:	e006      	b.n	8002504 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80024fe:	e001      	b.n	8002504 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002504:	7dfb      	ldrb	r3, [r7, #23]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40012400 	.word	0x40012400
 8002514:	40012800 	.word	0x40012800
 8002518:	08002883 	.word	0x08002883
 800251c:	080028ff 	.word	0x080028ff
 8002520:	0800291b 	.word	0x0800291b

08002524 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
	...

0800255c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x20>
 8002578:	2302      	movs	r3, #2
 800257a:	e0dc      	b.n	8002736 <HAL_ADC_ConfigChannel+0x1da>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b06      	cmp	r3, #6
 800258a:	d81c      	bhi.n	80025c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	3b05      	subs	r3, #5
 800259e:	221f      	movs	r2, #31
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	4019      	ands	r1, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	3b05      	subs	r3, #5
 80025b8:	fa00 f203 	lsl.w	r2, r0, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	635a      	str	r2, [r3, #52]	; 0x34
 80025c4:	e03c      	b.n	8002640 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b0c      	cmp	r3, #12
 80025cc:	d81c      	bhi.n	8002608 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	3b23      	subs	r3, #35	; 0x23
 80025e0:	221f      	movs	r2, #31
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	4019      	ands	r1, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3b23      	subs	r3, #35	; 0x23
 80025fa:	fa00 f203 	lsl.w	r2, r0, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
 8002606:	e01b      	b.n	8002640 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	3b41      	subs	r3, #65	; 0x41
 800261a:	221f      	movs	r2, #31
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	4019      	ands	r1, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	3b41      	subs	r3, #65	; 0x41
 8002634:	fa00 f203 	lsl.w	r2, r0, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b09      	cmp	r3, #9
 8002646:	d91c      	bls.n	8002682 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68d9      	ldr	r1, [r3, #12]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	3b1e      	subs	r3, #30
 800265a:	2207      	movs	r2, #7
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	4019      	ands	r1, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6898      	ldr	r0, [r3, #8]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	3b1e      	subs	r3, #30
 8002674:	fa00 f203 	lsl.w	r2, r0, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	60da      	str	r2, [r3, #12]
 8002680:	e019      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6919      	ldr	r1, [r3, #16]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	2207      	movs	r2, #7
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	4019      	ands	r1, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6898      	ldr	r0, [r3, #8]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	fa00 f203 	lsl.w	r2, r0, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d003      	beq.n	80026c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026c2:	2b11      	cmp	r3, #17
 80026c4:	d132      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_ADC_ConfigChannel+0x1e4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d125      	bne.n	800271c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d126      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026ec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d11a      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_ADC_ConfigChannel+0x1e8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a13      	ldr	r2, [pc, #76]	; (8002748 <HAL_ADC_ConfigChannel+0x1ec>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	0c9a      	lsrs	r2, r3, #18
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800270c:	e002      	b.n	8002714 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3b01      	subs	r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f9      	bne.n	800270e <HAL_ADC_ConfigChannel+0x1b2>
 800271a:	e007      	b.n	800272c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	f043 0220 	orr.w	r2, r3, #32
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	40012400 	.word	0x40012400
 8002744:	20000014 	.word	0x20000014
 8002748:	431bde83 	.word	0x431bde83

0800274c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b01      	cmp	r3, #1
 8002768:	d040      	beq.n	80027ec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800277a:	4b1f      	ldr	r3, [pc, #124]	; (80027f8 <ADC_Enable+0xac>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <ADC_Enable+0xb0>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	0c9b      	lsrs	r3, r3, #18
 8002786:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002788:	e002      	b.n	8002790 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	3b01      	subs	r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f9      	bne.n	800278a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002796:	f7ff fd05 	bl	80021a4 <HAL_GetTick>
 800279a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800279c:	e01f      	b.n	80027de <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800279e:	f7ff fd01 	bl	80021a4 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d918      	bls.n	80027de <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d011      	beq.n	80027de <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	f043 0210 	orr.w	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	f043 0201 	orr.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e007      	b.n	80027ee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d1d8      	bne.n	800279e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000014 	.word	0x20000014
 80027fc:	431bde83 	.word	0x431bde83

08002800 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d12e      	bne.n	8002878 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800282a:	f7ff fcbb 	bl	80021a4 <HAL_GetTick>
 800282e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002830:	e01b      	b.n	800286a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002832:	f7ff fcb7 	bl	80021a4 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d914      	bls.n	800286a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b01      	cmp	r3, #1
 800284c:	d10d      	bne.n	800286a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	f043 0210 	orr.w	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e007      	b.n	800287a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b01      	cmp	r3, #1
 8002876:	d0dc      	beq.n	8002832 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002898:	2b00      	cmp	r3, #0
 800289a:	d127      	bne.n	80028ec <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028b6:	d115      	bne.n	80028e4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d111      	bne.n	80028e4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d105      	bne.n	80028e4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	f043 0201 	orr.w	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f7ff fe1d 	bl	8002524 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80028ea:	e004      	b.n	80028f6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	4798      	blx	r3
}
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f7ff fe12 	bl	8002536 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	f043 0204 	orr.w	r2, r3, #4
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f7ff fe01 	bl	8002548 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <__NVIC_SetPriorityGrouping>:
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800296c:	4013      	ands	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800297c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002982:	4a04      	ldr	r2, [pc, #16]	; (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	60d3      	str	r3, [r2, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_GetPriorityGrouping>:
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <__NVIC_GetPriorityGrouping+0x18>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	f003 0307 	and.w	r3, r3, #7
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_EnableIRQ>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	db0b      	blt.n	80029de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	4906      	ldr	r1, [pc, #24]	; (80029e8 <__NVIC_EnableIRQ+0x34>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2001      	movs	r0, #1
 80029d6:	fa00 f202 	lsl.w	r2, r0, r2
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	e000e100 	.word	0xe000e100

080029ec <__NVIC_SetPriority>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	6039      	str	r1, [r7, #0]
 80029f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	db0a      	blt.n	8002a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	490c      	ldr	r1, [pc, #48]	; (8002a38 <__NVIC_SetPriority+0x4c>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	0112      	lsls	r2, r2, #4
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	440b      	add	r3, r1
 8002a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a14:	e00a      	b.n	8002a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4908      	ldr	r1, [pc, #32]	; (8002a3c <__NVIC_SetPriority+0x50>)
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	3b04      	subs	r3, #4
 8002a24:	0112      	lsls	r2, r2, #4
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	440b      	add	r3, r1
 8002a2a:	761a      	strb	r2, [r3, #24]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e100 	.word	0xe000e100
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <NVIC_EncodePriority>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	b089      	sub	sp, #36	; 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f1c3 0307 	rsb	r3, r3, #7
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	bf28      	it	cs
 8002a5e:	2304      	movcs	r3, #4
 8002a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3304      	adds	r3, #4
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d902      	bls.n	8002a70 <NVIC_EncodePriority+0x30>
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3b03      	subs	r3, #3
 8002a6e:	e000      	b.n	8002a72 <NVIC_EncodePriority+0x32>
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	401a      	ands	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	43d9      	mvns	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	4313      	orrs	r3, r2
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff4f 	bl	8002950 <__NVIC_SetPriorityGrouping>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002acc:	f7ff ff64 	bl	8002998 <__NVIC_GetPriorityGrouping>
 8002ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7ff ffb2 	bl	8002a40 <NVIC_EncodePriority>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff81 	bl	80029ec <__NVIC_SetPriority>
}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff57 	bl	80029b4 <__NVIC_EnableIRQ>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e043      	b.n	8002bae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <HAL_DMA_Init+0xa8>)
 8002b2e:	4413      	add	r3, r2
 8002b30:	4a22      	ldr	r2, [pc, #136]	; (8002bbc <HAL_DMA_Init+0xac>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	091b      	lsrs	r3, r3, #4
 8002b38:	009a      	lsls	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a1f      	ldr	r2, [pc, #124]	; (8002bc0 <HAL_DMA_Init+0xb0>)
 8002b42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	bffdfff8 	.word	0xbffdfff8
 8002bbc:	cccccccd 	.word	0xcccccccd
 8002bc0:	40020000 	.word	0x40020000

08002bc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_DMA_Start_IT+0x20>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e04a      	b.n	8002c7a <HAL_DMA_Start_IT+0xb6>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d13a      	bne.n	8002c6c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f938 	bl	8002e90 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 020e 	orr.w	r2, r2, #14
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	e00f      	b.n	8002c5a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0204 	bic.w	r2, r2, #4
 8002c48:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 020a 	orr.w	r2, r2, #10
 8002c58:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e005      	b.n	8002c78 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c74:	2302      	movs	r3, #2
 8002c76:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d04f      	beq.n	8002d4c <HAL_DMA_IRQHandler+0xc8>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d04a      	beq.n	8002d4c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d107      	bne.n	8002cd4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0204 	bic.w	r2, r2, #4
 8002cd2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a66      	ldr	r2, [pc, #408]	; (8002e74 <HAL_DMA_IRQHandler+0x1f0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d029      	beq.n	8002d32 <HAL_DMA_IRQHandler+0xae>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a65      	ldr	r2, [pc, #404]	; (8002e78 <HAL_DMA_IRQHandler+0x1f4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d022      	beq.n	8002d2e <HAL_DMA_IRQHandler+0xaa>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a63      	ldr	r2, [pc, #396]	; (8002e7c <HAL_DMA_IRQHandler+0x1f8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01a      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xa4>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a62      	ldr	r2, [pc, #392]	; (8002e80 <HAL_DMA_IRQHandler+0x1fc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d012      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x9e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a60      	ldr	r2, [pc, #384]	; (8002e84 <HAL_DMA_IRQHandler+0x200>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00a      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x98>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a5f      	ldr	r2, [pc, #380]	; (8002e88 <HAL_DMA_IRQHandler+0x204>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d102      	bne.n	8002d16 <HAL_DMA_IRQHandler+0x92>
 8002d10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d14:	e00e      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d1a:	e00b      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d20:	e008      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d26:	e005      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d2c:	e002      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d2e:	2340      	movs	r3, #64	; 0x40
 8002d30:	e000      	b.n	8002d34 <HAL_DMA_IRQHandler+0xb0>
 8002d32:	2304      	movs	r3, #4
 8002d34:	4a55      	ldr	r2, [pc, #340]	; (8002e8c <HAL_DMA_IRQHandler+0x208>)
 8002d36:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8094 	beq.w	8002e6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d4a:	e08e      	b.n	8002e6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	2202      	movs	r2, #2
 8002d52:	409a      	lsls	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d056      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x186>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d051      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10b      	bne.n	8002d8c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 020a 	bic.w	r2, r2, #10
 8002d82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a38      	ldr	r2, [pc, #224]	; (8002e74 <HAL_DMA_IRQHandler+0x1f0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d029      	beq.n	8002dea <HAL_DMA_IRQHandler+0x166>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a37      	ldr	r2, [pc, #220]	; (8002e78 <HAL_DMA_IRQHandler+0x1f4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d022      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x162>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a35      	ldr	r2, [pc, #212]	; (8002e7c <HAL_DMA_IRQHandler+0x1f8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01a      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x15c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a34      	ldr	r2, [pc, #208]	; (8002e80 <HAL_DMA_IRQHandler+0x1fc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d012      	beq.n	8002dda <HAL_DMA_IRQHandler+0x156>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a32      	ldr	r2, [pc, #200]	; (8002e84 <HAL_DMA_IRQHandler+0x200>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x150>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a31      	ldr	r2, [pc, #196]	; (8002e88 <HAL_DMA_IRQHandler+0x204>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d102      	bne.n	8002dce <HAL_DMA_IRQHandler+0x14a>
 8002dc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dcc:	e00e      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd2:	e00b      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd8:	e008      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dde:	e005      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002de4:	e002      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002de6:	2320      	movs	r3, #32
 8002de8:	e000      	b.n	8002dec <HAL_DMA_IRQHandler+0x168>
 8002dea:	2302      	movs	r3, #2
 8002dec:	4a27      	ldr	r2, [pc, #156]	; (8002e8c <HAL_DMA_IRQHandler+0x208>)
 8002dee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d034      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e08:	e02f      	b.n	8002e6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2208      	movs	r2, #8
 8002e10:	409a      	lsls	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d028      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x1e8>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d023      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 020e 	bic.w	r2, r2, #14
 8002e32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
    }
  }
  return;
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
}
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40020008 	.word	0x40020008
 8002e78:	4002001c 	.word	0x4002001c
 8002e7c:	40020030 	.word	0x40020030
 8002e80:	40020044 	.word	0x40020044
 8002e84:	40020058 	.word	0x40020058
 8002e88:	4002006c 	.word	0x4002006c
 8002e8c:	40020000 	.word	0x40020000

08002e90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	d108      	bne.n	8002ed0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ece:	e007      	b.n	8002ee0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	60da      	str	r2, [r3, #12]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b08b      	sub	sp, #44	; 0x2c
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002efa:	2300      	movs	r3, #0
 8002efc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efe:	e169      	b.n	80031d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f00:	2201      	movs	r2, #1
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	f040 8158 	bne.w	80031ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a9a      	ldr	r2, [pc, #616]	; (800318c <HAL_GPIO_Init+0x2a0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d05e      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
 8002f28:	4a98      	ldr	r2, [pc, #608]	; (800318c <HAL_GPIO_Init+0x2a0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d875      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f2e:	4a98      	ldr	r2, [pc, #608]	; (8003190 <HAL_GPIO_Init+0x2a4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d058      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
 8002f34:	4a96      	ldr	r2, [pc, #600]	; (8003190 <HAL_GPIO_Init+0x2a4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d86f      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f3a:	4a96      	ldr	r2, [pc, #600]	; (8003194 <HAL_GPIO_Init+0x2a8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d052      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
 8002f40:	4a94      	ldr	r2, [pc, #592]	; (8003194 <HAL_GPIO_Init+0x2a8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d869      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f46:	4a94      	ldr	r2, [pc, #592]	; (8003198 <HAL_GPIO_Init+0x2ac>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d04c      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
 8002f4c:	4a92      	ldr	r2, [pc, #584]	; (8003198 <HAL_GPIO_Init+0x2ac>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d863      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f52:	4a92      	ldr	r2, [pc, #584]	; (800319c <HAL_GPIO_Init+0x2b0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d046      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
 8002f58:	4a90      	ldr	r2, [pc, #576]	; (800319c <HAL_GPIO_Init+0x2b0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d85d      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f5e:	2b12      	cmp	r3, #18
 8002f60:	d82a      	bhi.n	8002fb8 <HAL_GPIO_Init+0xcc>
 8002f62:	2b12      	cmp	r3, #18
 8002f64:	d859      	bhi.n	800301a <HAL_GPIO_Init+0x12e>
 8002f66:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <HAL_GPIO_Init+0x80>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002fe7 	.word	0x08002fe7
 8002f70:	08002fc1 	.word	0x08002fc1
 8002f74:	08002fd3 	.word	0x08002fd3
 8002f78:	08003015 	.word	0x08003015
 8002f7c:	0800301b 	.word	0x0800301b
 8002f80:	0800301b 	.word	0x0800301b
 8002f84:	0800301b 	.word	0x0800301b
 8002f88:	0800301b 	.word	0x0800301b
 8002f8c:	0800301b 	.word	0x0800301b
 8002f90:	0800301b 	.word	0x0800301b
 8002f94:	0800301b 	.word	0x0800301b
 8002f98:	0800301b 	.word	0x0800301b
 8002f9c:	0800301b 	.word	0x0800301b
 8002fa0:	0800301b 	.word	0x0800301b
 8002fa4:	0800301b 	.word	0x0800301b
 8002fa8:	0800301b 	.word	0x0800301b
 8002fac:	0800301b 	.word	0x0800301b
 8002fb0:	08002fc9 	.word	0x08002fc9
 8002fb4:	08002fdd 	.word	0x08002fdd
 8002fb8:	4a79      	ldr	r2, [pc, #484]	; (80031a0 <HAL_GPIO_Init+0x2b4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fbe:	e02c      	b.n	800301a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	623b      	str	r3, [r7, #32]
          break;
 8002fc6:	e029      	b.n	800301c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	623b      	str	r3, [r7, #32]
          break;
 8002fd0:	e024      	b.n	800301c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	623b      	str	r3, [r7, #32]
          break;
 8002fda:	e01f      	b.n	800301c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	330c      	adds	r3, #12
 8002fe2:	623b      	str	r3, [r7, #32]
          break;
 8002fe4:	e01a      	b.n	800301c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fee:	2304      	movs	r3, #4
 8002ff0:	623b      	str	r3, [r7, #32]
          break;
 8002ff2:	e013      	b.n	800301c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d105      	bne.n	8003008 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	611a      	str	r2, [r3, #16]
          break;
 8003006:	e009      	b.n	800301c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003008:	2308      	movs	r3, #8
 800300a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	615a      	str	r2, [r3, #20]
          break;
 8003012:	e003      	b.n	800301c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003014:	2300      	movs	r3, #0
 8003016:	623b      	str	r3, [r7, #32]
          break;
 8003018:	e000      	b.n	800301c <HAL_GPIO_Init+0x130>
          break;
 800301a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2bff      	cmp	r3, #255	; 0xff
 8003020:	d801      	bhi.n	8003026 <HAL_GPIO_Init+0x13a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	e001      	b.n	800302a <HAL_GPIO_Init+0x13e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3304      	adds	r3, #4
 800302a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2bff      	cmp	r3, #255	; 0xff
 8003030:	d802      	bhi.n	8003038 <HAL_GPIO_Init+0x14c>
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	e002      	b.n	800303e <HAL_GPIO_Init+0x152>
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	3b08      	subs	r3, #8
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	210f      	movs	r1, #15
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	fa01 f303 	lsl.w	r3, r1, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	401a      	ands	r2, r3
 8003050:	6a39      	ldr	r1, [r7, #32]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	431a      	orrs	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80b1 	beq.w	80031ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800306c:	4b4d      	ldr	r3, [pc, #308]	; (80031a4 <HAL_GPIO_Init+0x2b8>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	4a4c      	ldr	r2, [pc, #304]	; (80031a4 <HAL_GPIO_Init+0x2b8>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6193      	str	r3, [r2, #24]
 8003078:	4b4a      	ldr	r3, [pc, #296]	; (80031a4 <HAL_GPIO_Init+0x2b8>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003084:	4a48      	ldr	r2, [pc, #288]	; (80031a8 <HAL_GPIO_Init+0x2bc>)
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	3302      	adds	r3, #2
 800308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003090:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	220f      	movs	r2, #15
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a40      	ldr	r2, [pc, #256]	; (80031ac <HAL_GPIO_Init+0x2c0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d013      	beq.n	80030d8 <HAL_GPIO_Init+0x1ec>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a3f      	ldr	r2, [pc, #252]	; (80031b0 <HAL_GPIO_Init+0x2c4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00d      	beq.n	80030d4 <HAL_GPIO_Init+0x1e8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a3e      	ldr	r2, [pc, #248]	; (80031b4 <HAL_GPIO_Init+0x2c8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d007      	beq.n	80030d0 <HAL_GPIO_Init+0x1e4>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a3d      	ldr	r2, [pc, #244]	; (80031b8 <HAL_GPIO_Init+0x2cc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d101      	bne.n	80030cc <HAL_GPIO_Init+0x1e0>
 80030c8:	2303      	movs	r3, #3
 80030ca:	e006      	b.n	80030da <HAL_GPIO_Init+0x1ee>
 80030cc:	2304      	movs	r3, #4
 80030ce:	e004      	b.n	80030da <HAL_GPIO_Init+0x1ee>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e002      	b.n	80030da <HAL_GPIO_Init+0x1ee>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_GPIO_Init+0x1ee>
 80030d8:	2300      	movs	r3, #0
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	f002 0203 	and.w	r2, r2, #3
 80030e0:	0092      	lsls	r2, r2, #2
 80030e2:	4093      	lsls	r3, r2
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030ea:	492f      	ldr	r1, [pc, #188]	; (80031a8 <HAL_GPIO_Init+0x2bc>)
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	3302      	adds	r3, #2
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d006      	beq.n	8003112 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003104:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	492c      	ldr	r1, [pc, #176]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	600b      	str	r3, [r1, #0]
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003112:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	43db      	mvns	r3, r3
 800311a:	4928      	ldr	r1, [pc, #160]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800311c:	4013      	ands	r3, r2
 800311e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d006      	beq.n	800313a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	4922      	ldr	r1, [pc, #136]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
 8003138:	e006      	b.n	8003148 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	43db      	mvns	r3, r3
 8003142:	491e      	ldr	r1, [pc, #120]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003144:	4013      	ands	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d006      	beq.n	8003162 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	4918      	ldr	r1, [pc, #96]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	608b      	str	r3, [r1, #8]
 8003160:	e006      	b.n	8003170 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003162:	4b16      	ldr	r3, [pc, #88]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	43db      	mvns	r3, r3
 800316a:	4914      	ldr	r1, [pc, #80]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800316c:	4013      	ands	r3, r2
 800316e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d021      	beq.n	80031c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	490e      	ldr	r1, [pc, #56]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	4313      	orrs	r3, r2
 8003186:	60cb      	str	r3, [r1, #12]
 8003188:	e021      	b.n	80031ce <HAL_GPIO_Init+0x2e2>
 800318a:	bf00      	nop
 800318c:	10320000 	.word	0x10320000
 8003190:	10310000 	.word	0x10310000
 8003194:	10220000 	.word	0x10220000
 8003198:	10210000 	.word	0x10210000
 800319c:	10120000 	.word	0x10120000
 80031a0:	10110000 	.word	0x10110000
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40010000 	.word	0x40010000
 80031ac:	40010800 	.word	0x40010800
 80031b0:	40010c00 	.word	0x40010c00
 80031b4:	40011000 	.word	0x40011000
 80031b8:	40011400 	.word	0x40011400
 80031bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_GPIO_Init+0x304>)
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	4909      	ldr	r1, [pc, #36]	; (80031f0 <HAL_GPIO_Init+0x304>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	3301      	adds	r3, #1
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	fa22 f303 	lsr.w	r3, r2, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f47f ae8e 	bne.w	8002f00 <HAL_GPIO_Init+0x14>
  }
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	372c      	adds	r7, #44	; 0x2c
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	40010400 	.word	0x40010400

080031f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e272      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 8087 	beq.w	8003322 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003214:	4b92      	ldr	r3, [pc, #584]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b04      	cmp	r3, #4
 800321e:	d00c      	beq.n	800323a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003220:	4b8f      	ldr	r3, [pc, #572]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 030c 	and.w	r3, r3, #12
 8003228:	2b08      	cmp	r3, #8
 800322a:	d112      	bne.n	8003252 <HAL_RCC_OscConfig+0x5e>
 800322c:	4b8c      	ldr	r3, [pc, #560]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003238:	d10b      	bne.n	8003252 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323a:	4b89      	ldr	r3, [pc, #548]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d06c      	beq.n	8003320 <HAL_RCC_OscConfig+0x12c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d168      	bne.n	8003320 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e24c      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325a:	d106      	bne.n	800326a <HAL_RCC_OscConfig+0x76>
 800325c:	4b80      	ldr	r3, [pc, #512]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a7f      	ldr	r2, [pc, #508]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	e02e      	b.n	80032c8 <HAL_RCC_OscConfig+0xd4>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10c      	bne.n	800328c <HAL_RCC_OscConfig+0x98>
 8003272:	4b7b      	ldr	r3, [pc, #492]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a7a      	ldr	r2, [pc, #488]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b78      	ldr	r3, [pc, #480]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a77      	ldr	r2, [pc, #476]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003284:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e01d      	b.n	80032c8 <HAL_RCC_OscConfig+0xd4>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0xbc>
 8003296:	4b72      	ldr	r3, [pc, #456]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a71      	ldr	r2, [pc, #452]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800329c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b6f      	ldr	r3, [pc, #444]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a6e      	ldr	r2, [pc, #440]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e00b      	b.n	80032c8 <HAL_RCC_OscConfig+0xd4>
 80032b0:	4b6b      	ldr	r3, [pc, #428]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6a      	ldr	r2, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b68      	ldr	r3, [pc, #416]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a67      	ldr	r2, [pc, #412]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d013      	beq.n	80032f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe ff68 	bl	80021a4 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fe ff64 	bl	80021a4 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e200      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4b5d      	ldr	r3, [pc, #372]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0xe4>
 80032f6:	e014      	b.n	8003322 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fe ff54 	bl	80021a4 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003300:	f7fe ff50 	bl	80021a4 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	; 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e1ec      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003312:	4b53      	ldr	r3, [pc, #332]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x10c>
 800331e:	e000      	b.n	8003322 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d063      	beq.n	80033f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800332e:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800333a:	4b49      	ldr	r3, [pc, #292]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b08      	cmp	r3, #8
 8003344:	d11c      	bne.n	8003380 <HAL_RCC_OscConfig+0x18c>
 8003346:	4b46      	ldr	r3, [pc, #280]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d116      	bne.n	8003380 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003352:	4b43      	ldr	r3, [pc, #268]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <HAL_RCC_OscConfig+0x176>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d001      	beq.n	800336a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e1c0      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336a:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4939      	ldr	r1, [pc, #228]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800337a:	4313      	orrs	r3, r2
 800337c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337e:	e03a      	b.n	80033f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d020      	beq.n	80033ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003388:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800338a:	2201      	movs	r2, #1
 800338c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338e:	f7fe ff09 	bl	80021a4 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003396:	f7fe ff05 	bl	80021a4 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e1a1      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a8:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b4:	4b2a      	ldr	r3, [pc, #168]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4927      	ldr	r1, [pc, #156]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]
 80033c8:	e015      	b.n	80033f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ca:	4b26      	ldr	r3, [pc, #152]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fe fee8 	bl	80021a4 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d8:	f7fe fee4 	bl	80021a4 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e180      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d03a      	beq.n	8003478 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d019      	beq.n	800343e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800340a:	4b17      	ldr	r3, [pc, #92]	; (8003468 <HAL_RCC_OscConfig+0x274>)
 800340c:	2201      	movs	r2, #1
 800340e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003410:	f7fe fec8 	bl	80021a4 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003418:	f7fe fec4 	bl	80021a4 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e160      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003436:	2001      	movs	r0, #1
 8003438:	f000 fb08 	bl	8003a4c <RCC_Delay>
 800343c:	e01c      	b.n	8003478 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_RCC_OscConfig+0x274>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003444:	f7fe feae 	bl	80021a4 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344a:	e00f      	b.n	800346c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344c:	f7fe feaa 	bl	80021a4 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d908      	bls.n	800346c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e146      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000
 8003464:	42420000 	.word	0x42420000
 8003468:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800346c:	4b92      	ldr	r3, [pc, #584]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e9      	bne.n	800344c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80a6 	beq.w	80035d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348a:	4b8b      	ldr	r3, [pc, #556]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10d      	bne.n	80034b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003496:	4b88      	ldr	r3, [pc, #544]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	4a87      	ldr	r2, [pc, #540]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800349c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a0:	61d3      	str	r3, [r2, #28]
 80034a2:	4b85      	ldr	r3, [pc, #532]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ae:	2301      	movs	r3, #1
 80034b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b2:	4b82      	ldr	r3, [pc, #520]	; (80036bc <HAL_RCC_OscConfig+0x4c8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d118      	bne.n	80034f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034be:	4b7f      	ldr	r3, [pc, #508]	; (80036bc <HAL_RCC_OscConfig+0x4c8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a7e      	ldr	r2, [pc, #504]	; (80036bc <HAL_RCC_OscConfig+0x4c8>)
 80034c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ca:	f7fe fe6b 	bl	80021a4 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d2:	f7fe fe67 	bl	80021a4 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b64      	cmp	r3, #100	; 0x64
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e103      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	4b75      	ldr	r3, [pc, #468]	; (80036bc <HAL_RCC_OscConfig+0x4c8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d106      	bne.n	8003506 <HAL_RCC_OscConfig+0x312>
 80034f8:	4b6f      	ldr	r3, [pc, #444]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	4a6e      	ldr	r2, [pc, #440]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	6213      	str	r3, [r2, #32]
 8003504:	e02d      	b.n	8003562 <HAL_RCC_OscConfig+0x36e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10c      	bne.n	8003528 <HAL_RCC_OscConfig+0x334>
 800350e:	4b6a      	ldr	r3, [pc, #424]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4a69      	ldr	r2, [pc, #420]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	6213      	str	r3, [r2, #32]
 800351a:	4b67      	ldr	r3, [pc, #412]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	4a66      	ldr	r2, [pc, #408]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	f023 0304 	bic.w	r3, r3, #4
 8003524:	6213      	str	r3, [r2, #32]
 8003526:	e01c      	b.n	8003562 <HAL_RCC_OscConfig+0x36e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b05      	cmp	r3, #5
 800352e:	d10c      	bne.n	800354a <HAL_RCC_OscConfig+0x356>
 8003530:	4b61      	ldr	r3, [pc, #388]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4a60      	ldr	r2, [pc, #384]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003536:	f043 0304 	orr.w	r3, r3, #4
 800353a:	6213      	str	r3, [r2, #32]
 800353c:	4b5e      	ldr	r3, [pc, #376]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	4a5d      	ldr	r2, [pc, #372]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	6213      	str	r3, [r2, #32]
 8003548:	e00b      	b.n	8003562 <HAL_RCC_OscConfig+0x36e>
 800354a:	4b5b      	ldr	r3, [pc, #364]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4a5a      	ldr	r2, [pc, #360]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	6213      	str	r3, [r2, #32]
 8003556:	4b58      	ldr	r3, [pc, #352]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	4a57      	ldr	r2, [pc, #348]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800355c:	f023 0304 	bic.w	r3, r3, #4
 8003560:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d015      	beq.n	8003596 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356a:	f7fe fe1b 	bl	80021a4 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003570:	e00a      	b.n	8003588 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003572:	f7fe fe17 	bl	80021a4 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003580:	4293      	cmp	r3, r2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e0b1      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003588:	4b4b      	ldr	r3, [pc, #300]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0ee      	beq.n	8003572 <HAL_RCC_OscConfig+0x37e>
 8003594:	e014      	b.n	80035c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003596:	f7fe fe05 	bl	80021a4 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fe fe01 	bl	80021a4 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e09b      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b4:	4b40      	ldr	r3, [pc, #256]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1ee      	bne.n	800359e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d105      	bne.n	80035d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c6:	4b3c      	ldr	r3, [pc, #240]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	4a3b      	ldr	r2, [pc, #236]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8087 	beq.w	80036ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035dc:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 030c 	and.w	r3, r3, #12
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d061      	beq.n	80036ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d146      	bne.n	800367e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f0:	4b33      	ldr	r3, [pc, #204]	; (80036c0 <HAL_RCC_OscConfig+0x4cc>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f6:	f7fe fdd5 	bl	80021a4 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fe fdd1 	bl	80021a4 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e06d      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003610:	4b29      	ldr	r3, [pc, #164]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f0      	bne.n	80035fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003624:	d108      	bne.n	8003638 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	4921      	ldr	r1, [pc, #132]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003638:	4b1f      	ldr	r3, [pc, #124]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a19      	ldr	r1, [r3, #32]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	430b      	orrs	r3, r1
 800364a:	491b      	ldr	r1, [pc, #108]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003650:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <HAL_RCC_OscConfig+0x4cc>)
 8003652:	2201      	movs	r2, #1
 8003654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003656:	f7fe fda5 	bl	80021a4 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365e:	f7fe fda1 	bl	80021a4 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e03d      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003670:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x46a>
 800367c:	e035      	b.n	80036ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367e:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <HAL_RCC_OscConfig+0x4cc>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7fe fd8e 	bl	80021a4 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368c:	f7fe fd8a 	bl	80021a4 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e026      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x498>
 80036aa:	e01e      	b.n	80036ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d107      	bne.n	80036c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e019      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40007000 	.word	0x40007000
 80036c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_RCC_OscConfig+0x500>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d106      	bne.n	80036e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d001      	beq.n	80036ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40021000 	.word	0x40021000

080036f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0d0      	b.n	80038ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800370c:	4b6a      	ldr	r3, [pc, #424]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d910      	bls.n	800373c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b67      	ldr	r3, [pc, #412]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 0207 	bic.w	r2, r3, #7
 8003722:	4965      	ldr	r1, [pc, #404]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b63      	ldr	r3, [pc, #396]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0b8      	b.n	80038ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d020      	beq.n	800378a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003754:	4b59      	ldr	r3, [pc, #356]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a58      	ldr	r2, [pc, #352]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800375e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800376c:	4b53      	ldr	r3, [pc, #332]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4a52      	ldr	r2, [pc, #328]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003776:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003778:	4b50      	ldr	r3, [pc, #320]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	494d      	ldr	r1, [pc, #308]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d040      	beq.n	8003818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d107      	bne.n	80037ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	4b47      	ldr	r3, [pc, #284]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d115      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e07f      	b.n	80038ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b6:	4b41      	ldr	r3, [pc, #260]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e073      	b.n	80038ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c6:	4b3d      	ldr	r3, [pc, #244]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e06b      	b.n	80038ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d6:	4b39      	ldr	r3, [pc, #228]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f023 0203 	bic.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4936      	ldr	r1, [pc, #216]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e8:	f7fe fcdc 	bl	80021a4 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f0:	f7fe fcd8 	bl	80021a4 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e053      	b.n	80038ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	4b2d      	ldr	r3, [pc, #180]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 020c 	and.w	r2, r3, #12
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	429a      	cmp	r2, r3
 8003816:	d1eb      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003818:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d210      	bcs.n	8003848 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 0207 	bic.w	r2, r3, #7
 800382e:	4922      	ldr	r1, [pc, #136]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e032      	b.n	80038ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003854:	4b19      	ldr	r3, [pc, #100]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4916      	ldr	r1, [pc, #88]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003872:	4b12      	ldr	r3, [pc, #72]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	490e      	ldr	r1, [pc, #56]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003886:	f000 f821 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 800388a:	4602      	mov	r2, r0
 800388c:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	490a      	ldr	r1, [pc, #40]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003898:	5ccb      	ldrb	r3, [r1, r3]
 800389a:	fa22 f303 	lsr.w	r3, r2, r3
 800389e:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <HAL_RCC_ClockConfig+0x1cc>)
 80038a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038a2:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1d0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe fac8 	bl	8001e3c <HAL_InitTick>

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40022000 	.word	0x40022000
 80038bc:	40021000 	.word	0x40021000
 80038c0:	08009c10 	.word	0x08009c10
 80038c4:	20000014 	.word	0x20000014
 80038c8:	20000018 	.word	0x20000018

080038cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038cc:	b490      	push	{r4, r7}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038d2:	4b29      	ldr	r3, [pc, #164]	; (8003978 <HAL_RCC_GetSysClockFreq+0xac>)
 80038d4:	1d3c      	adds	r4, r7, #4
 80038d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038dc:	f240 2301 	movw	r3, #513	; 0x201
 80038e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	2300      	movs	r3, #0
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038f6:	4b21      	ldr	r3, [pc, #132]	; (800397c <HAL_RCC_GetSysClockFreq+0xb0>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b04      	cmp	r3, #4
 8003904:	d002      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x40>
 8003906:	2b08      	cmp	r3, #8
 8003908:	d003      	beq.n	8003912 <HAL_RCC_GetSysClockFreq+0x46>
 800390a:	e02b      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800390c:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <HAL_RCC_GetSysClockFreq+0xb4>)
 800390e:	623b      	str	r3, [r7, #32]
      break;
 8003910:	e02b      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	0c9b      	lsrs	r3, r3, #18
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	3328      	adds	r3, #40	; 0x28
 800391c:	443b      	add	r3, r7
 800391e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003922:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d012      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800392e:	4b13      	ldr	r3, [pc, #76]	; (800397c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0c5b      	lsrs	r3, r3, #17
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	3328      	adds	r3, #40	; 0x28
 800393a:	443b      	add	r3, r7
 800393c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003940:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	4a0e      	ldr	r2, [pc, #56]	; (8003980 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003946:	fb03 f202 	mul.w	r2, r3, r2
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
 8003952:	e004      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	4a0b      	ldr	r2, [pc, #44]	; (8003984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003958:	fb02 f303 	mul.w	r3, r2, r3
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	623b      	str	r3, [r7, #32]
      break;
 8003962:	e002      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003966:	623b      	str	r3, [r7, #32]
      break;
 8003968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396a:	6a3b      	ldr	r3, [r7, #32]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3728      	adds	r7, #40	; 0x28
 8003970:	46bd      	mov	sp, r7
 8003972:	bc90      	pop	{r4, r7}
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	08009bf8 	.word	0x08009bf8
 800397c:	40021000 	.word	0x40021000
 8003980:	007a1200 	.word	0x007a1200
 8003984:	003d0900 	.word	0x003d0900

08003988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800398c:	4b02      	ldr	r3, [pc, #8]	; (8003998 <HAL_RCC_GetHCLKFreq+0x10>)
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	20000014 	.word	0x20000014

0800399c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039a0:	f7ff fff2 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4903      	ldr	r1, [pc, #12]	; (80039c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	08009c20 	.word	0x08009c20

080039c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039c8:	f7ff ffde 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039cc:	4602      	mov	r2, r0
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	0adb      	lsrs	r3, r3, #11
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	4903      	ldr	r1, [pc, #12]	; (80039e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039da:	5ccb      	ldrb	r3, [r1, r3]
 80039dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021000 	.word	0x40021000
 80039e8:	08009c20 	.word	0x08009c20

080039ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	220f      	movs	r2, #15
 80039fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_RCC_GetClockConfig+0x58>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0203 	and.w	r2, r3, #3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a08:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <HAL_RCC_GetClockConfig+0x58>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCC_GetClockConfig+0x58>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a20:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <HAL_RCC_GetClockConfig+0x58>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	08db      	lsrs	r3, r3, #3
 8003a26:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_RCC_GetClockConfig+0x5c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0207 	and.w	r2, r3, #7
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40022000 	.word	0x40022000

08003a4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <RCC_Delay+0x34>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <RCC_Delay+0x38>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	0a5b      	lsrs	r3, r3, #9
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a68:	bf00      	nop
  }
  while (Delay --);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1e5a      	subs	r2, r3, #1
 8003a6e:	60fa      	str	r2, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f9      	bne.n	8003a68 <RCC_Delay+0x1c>
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr
 8003a80:	20000014 	.word	0x20000014
 8003a84:	10624dd3 	.word	0x10624dd3

08003a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d07d      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa8:	4b4f      	ldr	r3, [pc, #316]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10d      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	4a4b      	ldr	r2, [pc, #300]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abe:	61d3      	str	r3, [r2, #28]
 8003ac0:	4b49      	ldr	r3, [pc, #292]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003acc:	2301      	movs	r3, #1
 8003ace:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	4b46      	ldr	r3, [pc, #280]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d118      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003adc:	4b43      	ldr	r3, [pc, #268]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a42      	ldr	r2, [pc, #264]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae8:	f7fe fb5c 	bl	80021a4 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aee:	e008      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af0:	f7fe fb58 	bl	80021a4 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	; 0x64
 8003afc:	d901      	bls.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e06d      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b02:	4b3a      	ldr	r3, [pc, #232]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b0e:	4b36      	ldr	r3, [pc, #216]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d02e      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d027      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b2c:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b36:	4b2e      	ldr	r3, [pc, #184]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b3c:	4b2c      	ldr	r3, [pc, #176]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b42:	4a29      	ldr	r2, [pc, #164]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d014      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b52:	f7fe fb27 	bl	80021a4 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b58:	e00a      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5a:	f7fe fb23 	bl	80021a4 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e036      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0ee      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b7c:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	4917      	ldr	r1, [pc, #92]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	490b      	ldr	r1, [pc, #44]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d008      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bca:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	4904      	ldr	r1, [pc, #16]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	42420440 	.word	0x42420440

08003bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e041      	b.n	8003c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd ffec 	bl	8001bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f001 f912 	bl	8004e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d001      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e03a      	b.n	8003d22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <HAL_TIM_Base_Start_IT+0x98>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00e      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x58>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd6:	d009      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x58>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a14      	ldr	r2, [pc, #80]	; (8003d30 <HAL_TIM_Base_Start_IT+0x9c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x58>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d111      	bne.n	8003d10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b06      	cmp	r3, #6
 8003cfc:	d010      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0e:	e007      	b.n	8003d20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800

08003d38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e041      	b.n	8003dce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f839 	bl	8003dd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f001 f870 	bl	8004e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <HAL_TIM_PWM_Start_DMA+0x28>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e022      	b.n	8003e56 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d109      	bne.n	8003e2a <HAL_TIM_PWM_Start_DMA+0x42>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	bf0c      	ite	eq
 8003e22:	2301      	moveq	r3, #1
 8003e24:	2300      	movne	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	e015      	b.n	8003e56 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d109      	bne.n	8003e44 <HAL_TIM_PWM_Start_DMA+0x5c>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e008      	b.n	8003e56 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e14e      	b.n	80040fc <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <HAL_TIM_PWM_Start_DMA+0x90>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e022      	b.n	8003ebe <HAL_TIM_PWM_Start_DMA+0xd6>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d109      	bne.n	8003e92 <HAL_TIM_PWM_Start_DMA+0xaa>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	bf0c      	ite	eq
 8003e8a:	2301      	moveq	r3, #1
 8003e8c:	2300      	movne	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	e015      	b.n	8003ebe <HAL_TIM_PWM_Start_DMA+0xd6>
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d109      	bne.n	8003eac <HAL_TIM_PWM_Start_DMA+0xc4>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	e008      	b.n	8003ebe <HAL_TIM_PWM_Start_DMA+0xd6>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d024      	beq.n	8003f0c <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d104      	bne.n	8003ed2 <HAL_TIM_PWM_Start_DMA+0xea>
 8003ec8:	887b      	ldrh	r3, [r7, #2]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e114      	b.n	80040fc <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <HAL_TIM_PWM_Start_DMA+0xfa>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ee0:	e016      	b.n	8003f10 <HAL_TIM_PWM_Start_DMA+0x128>
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d104      	bne.n	8003ef2 <HAL_TIM_PWM_Start_DMA+0x10a>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ef0:	e00e      	b.n	8003f10 <HAL_TIM_PWM_Start_DMA+0x128>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d104      	bne.n	8003f02 <HAL_TIM_PWM_Start_DMA+0x11a>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f00:	e006      	b.n	8003f10 <HAL_TIM_PWM_Start_DMA+0x128>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2202      	movs	r2, #2
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f0a:	e001      	b.n	8003f10 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0f5      	b.n	80040fc <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b0c      	cmp	r3, #12
 8003f14:	f200 80ae 	bhi.w	8004074 <HAL_TIM_PWM_Start_DMA+0x28c>
 8003f18:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <HAL_TIM_PWM_Start_DMA+0x138>)
 8003f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1e:	bf00      	nop
 8003f20:	08003f55 	.word	0x08003f55
 8003f24:	08004075 	.word	0x08004075
 8003f28:	08004075 	.word	0x08004075
 8003f2c:	08004075 	.word	0x08004075
 8003f30:	08003f9d 	.word	0x08003f9d
 8003f34:	08004075 	.word	0x08004075
 8003f38:	08004075 	.word	0x08004075
 8003f3c:	08004075 	.word	0x08004075
 8003f40:	08003fe5 	.word	0x08003fe5
 8003f44:	08004075 	.word	0x08004075
 8003f48:	08004075 	.word	0x08004075
 8003f4c:	08004075 	.word	0x08004075
 8003f50:	0800402d 	.word	0x0800402d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	4a6a      	ldr	r2, [pc, #424]	; (8004104 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	4a69      	ldr	r2, [pc, #420]	; (8004108 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003f62:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	4a68      	ldr	r2, [pc, #416]	; (800410c <HAL_TIM_PWM_Start_DMA+0x324>)
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3334      	adds	r3, #52	; 0x34
 8003f78:	461a      	mov	r2, r3
 8003f7a:	887b      	ldrh	r3, [r7, #2]
 8003f7c:	f7fe fe22 	bl	8002bc4 <HAL_DMA_Start_IT>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e0b8      	b.n	80040fc <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f98:	60da      	str	r2, [r3, #12]
      break;
 8003f9a:	e06c      	b.n	8004076 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	4a58      	ldr	r2, [pc, #352]	; (8004104 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003fa2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	4a57      	ldr	r2, [pc, #348]	; (8004108 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003faa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	4a56      	ldr	r2, [pc, #344]	; (800410c <HAL_TIM_PWM_Start_DMA+0x324>)
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3338      	adds	r3, #56	; 0x38
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	887b      	ldrh	r3, [r7, #2]
 8003fc4:	f7fe fdfe 	bl	8002bc4 <HAL_DMA_Start_IT>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e094      	b.n	80040fc <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fe0:	60da      	str	r2, [r3, #12]
      break;
 8003fe2:	e048      	b.n	8004076 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	4a46      	ldr	r2, [pc, #280]	; (8004104 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	4a45      	ldr	r2, [pc, #276]	; (8004108 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003ff2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	4a44      	ldr	r2, [pc, #272]	; (800410c <HAL_TIM_PWM_Start_DMA+0x324>)
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	333c      	adds	r3, #60	; 0x3c
 8004008:	461a      	mov	r2, r3
 800400a:	887b      	ldrh	r3, [r7, #2]
 800400c:	f7fe fdda 	bl	8002bc4 <HAL_DMA_Start_IT>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e070      	b.n	80040fc <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004028:	60da      	str	r2, [r3, #12]
      break;
 800402a:	e024      	b.n	8004076 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	4a34      	ldr	r2, [pc, #208]	; (8004104 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	4a33      	ldr	r2, [pc, #204]	; (8004108 <HAL_TIM_PWM_Start_DMA+0x320>)
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	4a32      	ldr	r2, [pc, #200]	; (800410c <HAL_TIM_PWM_Start_DMA+0x324>)
 8004042:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3340      	adds	r3, #64	; 0x40
 8004050:	461a      	mov	r2, r3
 8004052:	887b      	ldrh	r3, [r7, #2]
 8004054:	f7fe fdb6 	bl	8002bc4 <HAL_DMA_Start_IT>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e04c      	b.n	80040fc <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004070:	60da      	str	r2, [r3, #12]
      break;
 8004072:	e000      	b.n	8004076 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8004074:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2201      	movs	r2, #1
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	4618      	mov	r0, r3
 8004080:	f001 fb07 	bl	8005692 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a21      	ldr	r2, [pc, #132]	; (8004110 <HAL_TIM_PWM_Start_DMA+0x328>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d107      	bne.n	800409e <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800409c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1b      	ldr	r2, [pc, #108]	; (8004110 <HAL_TIM_PWM_Start_DMA+0x328>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00e      	beq.n	80040c6 <HAL_TIM_PWM_Start_DMA+0x2de>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b0:	d009      	beq.n	80040c6 <HAL_TIM_PWM_Start_DMA+0x2de>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a17      	ldr	r2, [pc, #92]	; (8004114 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d004      	beq.n	80040c6 <HAL_TIM_PWM_Start_DMA+0x2de>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a15      	ldr	r2, [pc, #84]	; (8004118 <HAL_TIM_PWM_Start_DMA+0x330>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d111      	bne.n	80040ea <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b06      	cmp	r3, #6
 80040d6:	d010      	beq.n	80040fa <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e8:	e007      	b.n	80040fa <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	08004d4d 	.word	0x08004d4d
 8004108:	08004df5 	.word	0x08004df5
 800410c:	08004cbb 	.word	0x08004cbb
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800

0800411c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e041      	b.n	80041b2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fd fdb4 	bl	8001cb0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	4619      	mov	r1, r3
 800415a:	4610      	mov	r0, r2
 800415c:	f000 fe7e 	bl	8004e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_IC_Start_IT+0x1a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	e013      	b.n	80041fe <HAL_TIM_IC_Start_IT+0x42>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_IC_Start_IT+0x2a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	e00b      	b.n	80041fe <HAL_TIM_IC_Start_IT+0x42>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_IC_Start_IT+0x3a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e003      	b.n	80041fe <HAL_TIM_IC_Start_IT+0x42>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d104      	bne.n	8004210 <HAL_TIM_IC_Start_IT+0x54>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e013      	b.n	8004238 <HAL_TIM_IC_Start_IT+0x7c>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b04      	cmp	r3, #4
 8004214:	d104      	bne.n	8004220 <HAL_TIM_IC_Start_IT+0x64>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e00b      	b.n	8004238 <HAL_TIM_IC_Start_IT+0x7c>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b08      	cmp	r3, #8
 8004224:	d104      	bne.n	8004230 <HAL_TIM_IC_Start_IT+0x74>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800422c:	b2db      	uxtb	r3, r3
 800422e:	e003      	b.n	8004238 <HAL_TIM_IC_Start_IT+0x7c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004236:	b2db      	uxtb	r3, r3
 8004238:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d102      	bne.n	8004246 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004240:	7bbb      	ldrb	r3, [r7, #14]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d001      	beq.n	800424a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e0b3      	b.n	80043b2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d104      	bne.n	800425a <HAL_TIM_IC_Start_IT+0x9e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004258:	e013      	b.n	8004282 <HAL_TIM_IC_Start_IT+0xc6>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d104      	bne.n	800426a <HAL_TIM_IC_Start_IT+0xae>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004268:	e00b      	b.n	8004282 <HAL_TIM_IC_Start_IT+0xc6>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d104      	bne.n	800427a <HAL_TIM_IC_Start_IT+0xbe>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004278:	e003      	b.n	8004282 <HAL_TIM_IC_Start_IT+0xc6>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d104      	bne.n	8004292 <HAL_TIM_IC_Start_IT+0xd6>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004290:	e013      	b.n	80042ba <HAL_TIM_IC_Start_IT+0xfe>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b04      	cmp	r3, #4
 8004296:	d104      	bne.n	80042a2 <HAL_TIM_IC_Start_IT+0xe6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042a0:	e00b      	b.n	80042ba <HAL_TIM_IC_Start_IT+0xfe>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d104      	bne.n	80042b2 <HAL_TIM_IC_Start_IT+0xf6>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042b0:	e003      	b.n	80042ba <HAL_TIM_IC_Start_IT+0xfe>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2202      	movs	r2, #2
 80042b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b0c      	cmp	r3, #12
 80042be:	d841      	bhi.n	8004344 <HAL_TIM_IC_Start_IT+0x188>
 80042c0:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <HAL_TIM_IC_Start_IT+0x10c>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042fd 	.word	0x080042fd
 80042cc:	08004345 	.word	0x08004345
 80042d0:	08004345 	.word	0x08004345
 80042d4:	08004345 	.word	0x08004345
 80042d8:	0800430f 	.word	0x0800430f
 80042dc:	08004345 	.word	0x08004345
 80042e0:	08004345 	.word	0x08004345
 80042e4:	08004345 	.word	0x08004345
 80042e8:	08004321 	.word	0x08004321
 80042ec:	08004345 	.word	0x08004345
 80042f0:	08004345 	.word	0x08004345
 80042f4:	08004345 	.word	0x08004345
 80042f8:	08004333 	.word	0x08004333
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0202 	orr.w	r2, r2, #2
 800430a:	60da      	str	r2, [r3, #12]
      break;
 800430c:	e01b      	b.n	8004346 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0204 	orr.w	r2, r2, #4
 800431c:	60da      	str	r2, [r3, #12]
      break;
 800431e:	e012      	b.n	8004346 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0208 	orr.w	r2, r2, #8
 800432e:	60da      	str	r2, [r3, #12]
      break;
 8004330:	e009      	b.n	8004346 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0210 	orr.w	r2, r2, #16
 8004340:	60da      	str	r2, [r3, #12]
      break;
 8004342:	e000      	b.n	8004346 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004344:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2201      	movs	r2, #1
 800434c:	6839      	ldr	r1, [r7, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f001 f99f 	bl	8005692 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a18      	ldr	r2, [pc, #96]	; (80043bc <HAL_TIM_IC_Start_IT+0x200>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00e      	beq.n	800437c <HAL_TIM_IC_Start_IT+0x1c0>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004366:	d009      	beq.n	800437c <HAL_TIM_IC_Start_IT+0x1c0>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a14      	ldr	r2, [pc, #80]	; (80043c0 <HAL_TIM_IC_Start_IT+0x204>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_TIM_IC_Start_IT+0x1c0>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a13      	ldr	r2, [pc, #76]	; (80043c4 <HAL_TIM_IC_Start_IT+0x208>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d111      	bne.n	80043a0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b06      	cmp	r3, #6
 800438c:	d010      	beq.n	80043b0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0201 	orr.w	r2, r2, #1
 800439c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439e:	e007      	b.n	80043b0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40012c00 	.word	0x40012c00
 80043c0:	40000400 	.word	0x40000400
 80043c4:	40000800 	.word	0x40000800

080043c8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b0c      	cmp	r3, #12
 80043d6:	d841      	bhi.n	800445c <HAL_TIM_IC_Stop_IT+0x94>
 80043d8:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <HAL_TIM_IC_Stop_IT+0x18>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	08004415 	.word	0x08004415
 80043e4:	0800445d 	.word	0x0800445d
 80043e8:	0800445d 	.word	0x0800445d
 80043ec:	0800445d 	.word	0x0800445d
 80043f0:	08004427 	.word	0x08004427
 80043f4:	0800445d 	.word	0x0800445d
 80043f8:	0800445d 	.word	0x0800445d
 80043fc:	0800445d 	.word	0x0800445d
 8004400:	08004439 	.word	0x08004439
 8004404:	0800445d 	.word	0x0800445d
 8004408:	0800445d 	.word	0x0800445d
 800440c:	0800445d 	.word	0x0800445d
 8004410:	0800444b 	.word	0x0800444b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0202 	bic.w	r2, r2, #2
 8004422:	60da      	str	r2, [r3, #12]
      break;
 8004424:	e01b      	b.n	800445e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0204 	bic.w	r2, r2, #4
 8004434:	60da      	str	r2, [r3, #12]
      break;
 8004436:	e012      	b.n	800445e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0208 	bic.w	r2, r2, #8
 8004446:	60da      	str	r2, [r3, #12]
      break;
 8004448:	e009      	b.n	800445e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0210 	bic.w	r2, r2, #16
 8004458:	60da      	str	r2, [r3, #12]
      break;
 800445a:	e000      	b.n	800445e <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 800445c:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	6839      	ldr	r1, [r7, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f001 f913 	bl	8005692 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6a1a      	ldr	r2, [r3, #32]
 8004472:	f241 1311 	movw	r3, #4369	; 0x1111
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10f      	bne.n	800449c <HAL_TIM_IC_Stop_IT+0xd4>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6a1a      	ldr	r2, [r3, #32]
 8004482:	f240 4344 	movw	r3, #1092	; 0x444
 8004486:	4013      	ands	r3, r2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d107      	bne.n	800449c <HAL_TIM_IC_Stop_IT+0xd4>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0201 	bic.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d104      	bne.n	80044ac <HAL_TIM_IC_Stop_IT+0xe4>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044aa:	e013      	b.n	80044d4 <HAL_TIM_IC_Stop_IT+0x10c>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d104      	bne.n	80044bc <HAL_TIM_IC_Stop_IT+0xf4>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044ba:	e00b      	b.n	80044d4 <HAL_TIM_IC_Stop_IT+0x10c>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d104      	bne.n	80044cc <HAL_TIM_IC_Stop_IT+0x104>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ca:	e003      	b.n	80044d4 <HAL_TIM_IC_Stop_IT+0x10c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d104      	bne.n	80044e4 <HAL_TIM_IC_Stop_IT+0x11c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044e2:	e013      	b.n	800450c <HAL_TIM_IC_Stop_IT+0x144>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d104      	bne.n	80044f4 <HAL_TIM_IC_Stop_IT+0x12c>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044f2:	e00b      	b.n	800450c <HAL_TIM_IC_Stop_IT+0x144>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d104      	bne.n	8004504 <HAL_TIM_IC_Stop_IT+0x13c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004502:	e003      	b.n	800450c <HAL_TIM_IC_Stop_IT+0x144>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop

08004518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b02      	cmp	r3, #2
 800452c:	d122      	bne.n	8004574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b02      	cmp	r3, #2
 800453a:	d11b      	bne.n	8004574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0202 	mvn.w	r2, #2
 8004544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fc fdf8 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fb7c 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fb82 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b04      	cmp	r3, #4
 8004580:	d122      	bne.n	80045c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b04      	cmp	r3, #4
 800458e:	d11b      	bne.n	80045c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0204 	mvn.w	r2, #4
 8004598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2202      	movs	r2, #2
 800459e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fc fdce 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 80045b4:	e005      	b.n	80045c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fb52 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fb58 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d122      	bne.n	800461c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d11b      	bne.n	800461c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0208 	mvn.w	r2, #8
 80045ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2204      	movs	r2, #4
 80045f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fc fda4 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 8004608:	e005      	b.n	8004616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fb28 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fb2e 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b10      	cmp	r3, #16
 8004628:	d122      	bne.n	8004670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b10      	cmp	r3, #16
 8004636:	d11b      	bne.n	8004670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0210 	mvn.w	r2, #16
 8004640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2208      	movs	r2, #8
 8004646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fc fd7a 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 800465c:	e005      	b.n	800466a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fafe 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fb04 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b01      	cmp	r3, #1
 800467c:	d10e      	bne.n	800469c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b01      	cmp	r3, #1
 800468a:	d107      	bne.n	800469c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0201 	mvn.w	r2, #1
 8004694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fc fede 	bl	8001458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a6:	2b80      	cmp	r3, #128	; 0x80
 80046a8:	d10e      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b4:	2b80      	cmp	r3, #128	; 0x80
 80046b6:	d107      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f001 f8c2 	bl	800584c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d2:	2b40      	cmp	r3, #64	; 0x40
 80046d4:	d10e      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b40      	cmp	r3, #64	; 0x40
 80046e2:	d107      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fad1 	bl	8004c96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b20      	cmp	r3, #32
 8004700:	d10e      	bne.n	8004720 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b20      	cmp	r3, #32
 800470e:	d107      	bne.n	8004720 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0220 	mvn.w	r2, #32
 8004718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f001 f88d 	bl	800583a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_TIM_IC_ConfigChannel+0x1a>
 800473e:	2302      	movs	r3, #2
 8004740:	e082      	b.n	8004848 <HAL_TIM_IC_ConfigChannel+0x120>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d11b      	bne.n	8004788 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6819      	ldr	r1, [r3, #0]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f000 fdf4 	bl	800534c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 020c 	bic.w	r2, r2, #12
 8004772:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6999      	ldr	r1, [r3, #24]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	619a      	str	r2, [r3, #24]
 8004786:	e05a      	b.n	800483e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b04      	cmp	r3, #4
 800478c:	d11c      	bne.n	80047c8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f000 fe5d 	bl	800545c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699a      	ldr	r2, [r3, #24]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6999      	ldr	r1, [r3, #24]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	021a      	lsls	r2, r3, #8
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	619a      	str	r2, [r3, #24]
 80047c6:	e03a      	b.n	800483e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d11b      	bne.n	8004806 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	6819      	ldr	r1, [r3, #0]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f000 fea8 	bl	8005532 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 020c 	bic.w	r2, r2, #12
 80047f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69d9      	ldr	r1, [r3, #28]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	61da      	str	r2, [r3, #28]
 8004804:	e01b      	b.n	800483e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	6819      	ldr	r1, [r3, #0]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f000 fec7 	bl	80055a8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69da      	ldr	r2, [r3, #28]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004828:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69d9      	ldr	r1, [r3, #28]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	021a      	lsls	r2, r3, #8
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004866:	2302      	movs	r3, #2
 8004868:	e0ac      	b.n	80049c4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b0c      	cmp	r3, #12
 8004876:	f200 809f 	bhi.w	80049b8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800487a:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800487c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004880:	080048b5 	.word	0x080048b5
 8004884:	080049b9 	.word	0x080049b9
 8004888:	080049b9 	.word	0x080049b9
 800488c:	080049b9 	.word	0x080049b9
 8004890:	080048f5 	.word	0x080048f5
 8004894:	080049b9 	.word	0x080049b9
 8004898:	080049b9 	.word	0x080049b9
 800489c:	080049b9 	.word	0x080049b9
 80048a0:	08004937 	.word	0x08004937
 80048a4:	080049b9 	.word	0x080049b9
 80048a8:	080049b9 	.word	0x080049b9
 80048ac:	080049b9 	.word	0x080049b9
 80048b0:	08004977 	.word	0x08004977
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fb30 	bl	8004f20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0208 	orr.w	r2, r2, #8
 80048ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0204 	bic.w	r2, r2, #4
 80048de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6999      	ldr	r1, [r3, #24]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	619a      	str	r2, [r3, #24]
      break;
 80048f2:	e062      	b.n	80049ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fb76 	bl	8004fec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800490e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6999      	ldr	r1, [r3, #24]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	021a      	lsls	r2, r3, #8
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	619a      	str	r2, [r3, #24]
      break;
 8004934:	e041      	b.n	80049ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fbbf 	bl	80050c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0208 	orr.w	r2, r2, #8
 8004950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69da      	ldr	r2, [r3, #28]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0204 	bic.w	r2, r2, #4
 8004960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69d9      	ldr	r1, [r3, #28]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	61da      	str	r2, [r3, #28]
      break;
 8004974:	e021      	b.n	80049ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fc09 	bl	8005194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69da      	ldr	r2, [r3, #28]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69d9      	ldr	r1, [r3, #28]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	021a      	lsls	r2, r3, #8
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	61da      	str	r2, [r3, #28]
      break;
 80049b6:	e000      	b.n	80049ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80049b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_TIM_ConfigClockSource+0x18>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e0b3      	b.n	8004b4c <HAL_TIM_ConfigClockSource+0x180>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a1c:	d03e      	beq.n	8004a9c <HAL_TIM_ConfigClockSource+0xd0>
 8004a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a22:	f200 8087 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x168>
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2a:	f000 8085 	beq.w	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a32:	d87f      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x168>
 8004a34:	2b70      	cmp	r3, #112	; 0x70
 8004a36:	d01a      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0xa2>
 8004a38:	2b70      	cmp	r3, #112	; 0x70
 8004a3a:	d87b      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x168>
 8004a3c:	2b60      	cmp	r3, #96	; 0x60
 8004a3e:	d050      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x116>
 8004a40:	2b60      	cmp	r3, #96	; 0x60
 8004a42:	d877      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x168>
 8004a44:	2b50      	cmp	r3, #80	; 0x50
 8004a46:	d03c      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0xf6>
 8004a48:	2b50      	cmp	r3, #80	; 0x50
 8004a4a:	d873      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x168>
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d058      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x136>
 8004a50:	2b40      	cmp	r3, #64	; 0x40
 8004a52:	d86f      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x168>
 8004a54:	2b30      	cmp	r3, #48	; 0x30
 8004a56:	d064      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x156>
 8004a58:	2b30      	cmp	r3, #48	; 0x30
 8004a5a:	d86b      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x168>
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d060      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x156>
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d867      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x168>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d05c      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x156>
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d05a      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a6c:	e062      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6899      	ldr	r1, [r3, #8]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f000 fde9 	bl	8005654 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a90:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	609a      	str	r2, [r3, #8]
      break;
 8004a9a:	e04e      	b.n	8004b3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6899      	ldr	r1, [r3, #8]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f000 fdd2 	bl	8005654 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004abe:	609a      	str	r2, [r3, #8]
      break;
 8004ac0:	e03b      	b.n	8004b3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6859      	ldr	r1, [r3, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f000 fc96 	bl	8005400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2150      	movs	r1, #80	; 0x50
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fda0 	bl	8005620 <TIM_ITRx_SetConfig>
      break;
 8004ae0:	e02b      	b.n	8004b3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6859      	ldr	r1, [r3, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	461a      	mov	r2, r3
 8004af0:	f000 fcf0 	bl	80054d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2160      	movs	r1, #96	; 0x60
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fd90 	bl	8005620 <TIM_ITRx_SetConfig>
      break;
 8004b00:	e01b      	b.n	8004b3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6818      	ldr	r0, [r3, #0]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6859      	ldr	r1, [r3, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f000 fc76 	bl	8005400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2140      	movs	r1, #64	; 0x40
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fd80 	bl	8005620 <TIM_ITRx_SetConfig>
      break;
 8004b20:	e00b      	b.n	8004b3a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	f000 fd77 	bl	8005620 <TIM_ITRx_SetConfig>
        break;
 8004b32:	e002      	b.n	8004b3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b34:	bf00      	nop
 8004b36:	e000      	b.n	8004b3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004b38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_TIM_SlaveConfigSynchro+0x18>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e031      	b.n	8004bd0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004b7c:	6839      	ldr	r1, [r7, #0]
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fb56 	bl	8005230 <TIM_SlaveTimer_SetConfig>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d009      	beq.n	8004b9e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e018      	b.n	8004bd0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bac:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bbc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b0c      	cmp	r3, #12
 8004bea:	d831      	bhi.n	8004c50 <HAL_TIM_ReadCapturedValue+0x78>
 8004bec:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf2:	bf00      	nop
 8004bf4:	08004c29 	.word	0x08004c29
 8004bf8:	08004c51 	.word	0x08004c51
 8004bfc:	08004c51 	.word	0x08004c51
 8004c00:	08004c51 	.word	0x08004c51
 8004c04:	08004c33 	.word	0x08004c33
 8004c08:	08004c51 	.word	0x08004c51
 8004c0c:	08004c51 	.word	0x08004c51
 8004c10:	08004c51 	.word	0x08004c51
 8004c14:	08004c3d 	.word	0x08004c3d
 8004c18:	08004c51 	.word	0x08004c51
 8004c1c:	08004c51 	.word	0x08004c51
 8004c20:	08004c51 	.word	0x08004c51
 8004c24:	08004c47 	.word	0x08004c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2e:	60fb      	str	r3, [r7, #12]

      break;
 8004c30:	e00f      	b.n	8004c52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	60fb      	str	r3, [r7, #12]

      break;
 8004c3a:	e00a      	b.n	8004c52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c42:	60fb      	str	r3, [r7, #12]

      break;
 8004c44:	e005      	b.n	8004c52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	60fb      	str	r3, [r7, #12]

      break;
 8004c4e:	e000      	b.n	8004c52 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004c50:	bf00      	nop
  }

  return tmpreg;
 8004c52:	68fb      	ldr	r3, [r7, #12]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop

08004c60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr

08004c72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr

08004cba <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d107      	bne.n	8004ce2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce0:	e02a      	b.n	8004d38 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d107      	bne.n	8004cfc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cfa:	e01d      	b.n	8004d38 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d107      	bne.n	8004d16 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2204      	movs	r2, #4
 8004d0a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d14:	e010      	b.n	8004d38 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d107      	bne.n	8004d30 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2208      	movs	r2, #8
 8004d24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d2e:	e003      	b.n	8004d38 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f7ff ffb5 	bl	8004ca8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	771a      	strb	r2, [r3, #28]
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d10b      	bne.n	8004d7c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d136      	bne.n	8004de0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d7a:	e031      	b.n	8004de0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d10b      	bne.n	8004d9e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d125      	bne.n	8004de0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d9c:	e020      	b.n	8004de0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d10b      	bne.n	8004dc0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2204      	movs	r2, #4
 8004dac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d114      	bne.n	8004de0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dbe:	e00f      	b.n	8004de0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d10a      	bne.n	8004de0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2208      	movs	r2, #8
 8004dce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d103      	bne.n	8004de0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f7ff ff46 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	771a      	strb	r2, [r3, #28]
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d103      	bne.n	8004e14 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	771a      	strb	r2, [r3, #28]
 8004e12:	e019      	b.n	8004e48 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d103      	bne.n	8004e26 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2202      	movs	r2, #2
 8004e22:	771a      	strb	r2, [r3, #28]
 8004e24:	e010      	b.n	8004e48 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d103      	bne.n	8004e38 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2204      	movs	r2, #4
 8004e34:	771a      	strb	r2, [r3, #28]
 8004e36:	e007      	b.n	8004e48 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d102      	bne.n	8004e48 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2208      	movs	r2, #8
 8004e46:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f7ff ff1b 	bl	8004c84 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	771a      	strb	r2, [r3, #28]
}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a29      	ldr	r2, [pc, #164]	; (8004f14 <TIM_Base_SetConfig+0xb8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00b      	beq.n	8004e8c <TIM_Base_SetConfig+0x30>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7a:	d007      	beq.n	8004e8c <TIM_Base_SetConfig+0x30>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a26      	ldr	r2, [pc, #152]	; (8004f18 <TIM_Base_SetConfig+0xbc>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d003      	beq.n	8004e8c <TIM_Base_SetConfig+0x30>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a25      	ldr	r2, [pc, #148]	; (8004f1c <TIM_Base_SetConfig+0xc0>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d108      	bne.n	8004e9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <TIM_Base_SetConfig+0xb8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00b      	beq.n	8004ebe <TIM_Base_SetConfig+0x62>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eac:	d007      	beq.n	8004ebe <TIM_Base_SetConfig+0x62>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a19      	ldr	r2, [pc, #100]	; (8004f18 <TIM_Base_SetConfig+0xbc>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d003      	beq.n	8004ebe <TIM_Base_SetConfig+0x62>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a18      	ldr	r2, [pc, #96]	; (8004f1c <TIM_Base_SetConfig+0xc0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d108      	bne.n	8004ed0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a07      	ldr	r2, [pc, #28]	; (8004f14 <TIM_Base_SetConfig+0xb8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d103      	bne.n	8004f04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	615a      	str	r2, [r3, #20]
}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr
 8004f14:	40012c00 	.word	0x40012c00
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800

08004f20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	f023 0201 	bic.w	r2, r3, #1
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0303 	bic.w	r3, r3, #3
 8004f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f023 0302 	bic.w	r3, r3, #2
 8004f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a1c      	ldr	r2, [pc, #112]	; (8004fe8 <TIM_OC1_SetConfig+0xc8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d10c      	bne.n	8004f96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f023 0308 	bic.w	r3, r3, #8
 8004f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f023 0304 	bic.w	r3, r3, #4
 8004f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a13      	ldr	r2, [pc, #76]	; (8004fe8 <TIM_OC1_SetConfig+0xc8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d111      	bne.n	8004fc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	621a      	str	r2, [r3, #32]
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40012c00 	.word	0x40012c00

08004fec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f023 0210 	bic.w	r2, r3, #16
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f023 0320 	bic.w	r3, r3, #32
 8005036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a1d      	ldr	r2, [pc, #116]	; (80050bc <TIM_OC2_SetConfig+0xd0>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d10d      	bne.n	8005068 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005066:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a14      	ldr	r2, [pc, #80]	; (80050bc <TIM_OC2_SetConfig+0xd0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d113      	bne.n	8005098 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005076:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800507e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr
 80050bc:	40012c00 	.word	0x40012c00

080050c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0303 	bic.w	r3, r3, #3
 80050f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a1d      	ldr	r2, [pc, #116]	; (8005190 <TIM_OC3_SetConfig+0xd0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d10d      	bne.n	800513a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a14      	ldr	r2, [pc, #80]	; (8005190 <TIM_OC3_SetConfig+0xd0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d113      	bne.n	800516a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	621a      	str	r2, [r3, #32]
}
 8005184:	bf00      	nop
 8005186:	371c      	adds	r7, #28
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40012c00 	.word	0x40012c00

08005194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	031b      	lsls	r3, r3, #12
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a0f      	ldr	r2, [pc, #60]	; (800522c <TIM_OC4_SetConfig+0x98>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d109      	bne.n	8005208 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	019b      	lsls	r3, r3, #6
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr
 800522c:	40012c00 	.word	0x40012c00

08005230 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005248:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f023 0307 	bic.w	r3, r3, #7
 800525a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b70      	cmp	r3, #112	; 0x70
 8005274:	d01a      	beq.n	80052ac <TIM_SlaveTimer_SetConfig+0x7c>
 8005276:	2b70      	cmp	r3, #112	; 0x70
 8005278:	d860      	bhi.n	800533c <TIM_SlaveTimer_SetConfig+0x10c>
 800527a:	2b60      	cmp	r3, #96	; 0x60
 800527c:	d054      	beq.n	8005328 <TIM_SlaveTimer_SetConfig+0xf8>
 800527e:	2b60      	cmp	r3, #96	; 0x60
 8005280:	d85c      	bhi.n	800533c <TIM_SlaveTimer_SetConfig+0x10c>
 8005282:	2b50      	cmp	r3, #80	; 0x50
 8005284:	d046      	beq.n	8005314 <TIM_SlaveTimer_SetConfig+0xe4>
 8005286:	2b50      	cmp	r3, #80	; 0x50
 8005288:	d858      	bhi.n	800533c <TIM_SlaveTimer_SetConfig+0x10c>
 800528a:	2b40      	cmp	r3, #64	; 0x40
 800528c:	d019      	beq.n	80052c2 <TIM_SlaveTimer_SetConfig+0x92>
 800528e:	2b40      	cmp	r3, #64	; 0x40
 8005290:	d854      	bhi.n	800533c <TIM_SlaveTimer_SetConfig+0x10c>
 8005292:	2b30      	cmp	r3, #48	; 0x30
 8005294:	d054      	beq.n	8005340 <TIM_SlaveTimer_SetConfig+0x110>
 8005296:	2b30      	cmp	r3, #48	; 0x30
 8005298:	d850      	bhi.n	800533c <TIM_SlaveTimer_SetConfig+0x10c>
 800529a:	2b20      	cmp	r3, #32
 800529c:	d050      	beq.n	8005340 <TIM_SlaveTimer_SetConfig+0x110>
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d84c      	bhi.n	800533c <TIM_SlaveTimer_SetConfig+0x10c>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d04c      	beq.n	8005340 <TIM_SlaveTimer_SetConfig+0x110>
 80052a6:	2b10      	cmp	r3, #16
 80052a8:	d04a      	beq.n	8005340 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80052aa:	e047      	b.n	800533c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	68d9      	ldr	r1, [r3, #12]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f000 f9ca 	bl	8005654 <TIM_ETR_SetConfig>
      break;
 80052c0:	e03f      	b.n	8005342 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d101      	bne.n	80052ce <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e03a      	b.n	8005344 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6a1a      	ldr	r2, [r3, #32]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052f4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	621a      	str	r2, [r3, #32]
      break;
 8005312:	e016      	b.n	8005342 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6818      	ldr	r0, [r3, #0]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	6899      	ldr	r1, [r3, #8]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	461a      	mov	r2, r3
 8005322:	f000 f86d 	bl	8005400 <TIM_TI1_ConfigInputStage>
      break;
 8005326:	e00c      	b.n	8005342 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	6899      	ldr	r1, [r3, #8]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	461a      	mov	r2, r3
 8005336:	f000 f8cd 	bl	80054d4 <TIM_TI2_ConfigInputStage>
      break;
 800533a:	e002      	b.n	8005342 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800533c:	bf00      	nop
 800533e:	e000      	b.n	8005342 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8005340:	bf00      	nop
  }
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	f023 0201 	bic.w	r2, r3, #1
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4a1f      	ldr	r2, [pc, #124]	; (80053f4 <TIM_TI1_SetConfig+0xa8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00b      	beq.n	8005392 <TIM_TI1_SetConfig+0x46>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005380:	d007      	beq.n	8005392 <TIM_TI1_SetConfig+0x46>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4a1c      	ldr	r2, [pc, #112]	; (80053f8 <TIM_TI1_SetConfig+0xac>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_TI1_SetConfig+0x46>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4a1b      	ldr	r2, [pc, #108]	; (80053fc <TIM_TI1_SetConfig+0xb0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d101      	bne.n	8005396 <TIM_TI1_SetConfig+0x4a>
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <TIM_TI1_SetConfig+0x4c>
 8005396:	2300      	movs	r3, #0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	e003      	b.n	80053b6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f023 030a 	bic.w	r3, r3, #10
 80053d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f003 030a 	and.w	r3, r3, #10
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40000400 	.word	0x40000400
 80053fc:	40000800 	.word	0x40000800

08005400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f023 0201 	bic.w	r2, r3, #1
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800542a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f023 030a 	bic.w	r3, r3, #10
 800543c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr

0800545c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f023 0210 	bic.w	r2, r3, #16
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800549a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	031b      	lsls	r3, r3, #12
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	f023 0210 	bic.w	r2, r3, #16
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	031b      	lsls	r3, r3, #12
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005510:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	621a      	str	r2, [r3, #32]
}
 8005528:	bf00      	nop
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	bc80      	pop	{r7}
 8005530:	4770      	bx	lr

08005532 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005532:	b480      	push	{r7}
 8005534:	b087      	sub	sp, #28
 8005536:	af00      	add	r7, sp, #0
 8005538:	60f8      	str	r0, [r7, #12]
 800553a:	60b9      	str	r1, [r7, #8]
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0303 	bic.w	r3, r3, #3
 800555e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800556e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	b2db      	uxtb	r3, r3
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005582:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr

080055a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	021b      	lsls	r3, r3, #8
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	031b      	lsls	r3, r3, #12
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	031b      	lsls	r3, r3, #12
 8005600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	621a      	str	r2, [r3, #32]
}
 8005616:	bf00      	nop
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr

08005620 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005636:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4313      	orrs	r3, r2
 800563e:	f043 0307 	orr.w	r3, r3, #7
 8005642:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	609a      	str	r2, [r3, #8]
}
 800564a:	bf00      	nop
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr

08005654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800566e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	021a      	lsls	r2, r3, #8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	431a      	orrs	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4313      	orrs	r3, r2
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	609a      	str	r2, [r3, #8]
}
 8005688:	bf00      	nop
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr

08005692 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005692:	b480      	push	{r7}
 8005694:	b087      	sub	sp, #28
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f003 031f 	and.w	r3, r3, #31
 80056a4:	2201      	movs	r2, #1
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a1a      	ldr	r2, [r3, #32]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	43db      	mvns	r3, r3
 80056b4:	401a      	ands	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1a      	ldr	r2, [r3, #32]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f003 031f 	and.w	r3, r3, #31
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ca:	431a      	orrs	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	621a      	str	r2, [r3, #32]
}
 80056d0:	bf00      	nop
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr
	...

080056dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e046      	b.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a16      	ldr	r2, [pc, #88]	; (800578c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d00e      	beq.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005740:	d009      	beq.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a12      	ldr	r2, [pc, #72]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d004      	beq.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a10      	ldr	r2, [pc, #64]	; (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d10c      	bne.n	8005770 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800575c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	4313      	orrs	r3, r2
 8005766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40000400 	.word	0x40000400
 8005794:	40000800 	.word	0x40000800

08005798 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e03d      	b.n	8005830 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr

0800583a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr

0800585e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e03f      	b.n	80058f0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d106      	bne.n	800588a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7fc fa8d 	bl	8001da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2224      	movs	r2, #36	; 0x24
 800588e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058a0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f904 	bl	8005ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691a      	ldr	r2, [r3, #16]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058c6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	; 0x28
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b20      	cmp	r3, #32
 8005916:	d17c      	bne.n	8005a12 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <HAL_UART_Transmit+0x2c>
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e075      	b.n	8005a14 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_UART_Transmit+0x3e>
 8005932:	2302      	movs	r3, #2
 8005934:	e06e      	b.n	8005a14 <HAL_UART_Transmit+0x11c>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2221      	movs	r2, #33	; 0x21
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800594c:	f7fc fc2a 	bl	80021a4 <HAL_GetTick>
 8005950:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	88fa      	ldrh	r2, [r7, #6]
 8005956:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	88fa      	ldrh	r2, [r7, #6]
 800595c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005966:	d108      	bne.n	800597a <HAL_UART_Transmit+0x82>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005970:	2300      	movs	r3, #0
 8005972:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	61bb      	str	r3, [r7, #24]
 8005978:	e003      	b.n	8005982 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800598a:	e02a      	b.n	80059e2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2200      	movs	r2, #0
 8005994:	2180      	movs	r1, #128	; 0x80
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f840 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e036      	b.n	8005a14 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10b      	bne.n	80059c4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059ba:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	3302      	adds	r3, #2
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e007      	b.n	80059d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	781a      	ldrb	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	3301      	adds	r3, #1
 80059d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1cf      	bne.n	800598c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2200      	movs	r2, #0
 80059f4:	2140      	movs	r1, #64	; 0x40
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 f810 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e006      	b.n	8005a14 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e000      	b.n	8005a14 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a12:	2302      	movs	r3, #2
  }
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3720      	adds	r7, #32
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2c:	e02c      	b.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a34:	d028      	beq.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a3c:	f7fc fbb2 	bl	80021a4 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d21d      	bcs.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a5a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695a      	ldr	r2, [r3, #20]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0201 	bic.w	r2, r2, #1
 8005a6a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e00f      	b.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4013      	ands	r3, r2
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	bf0c      	ite	eq
 8005a98:	2301      	moveq	r3, #1
 8005a9a:	2300      	movne	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d0c3      	beq.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005aea:	f023 030c 	bic.w	r3, r3, #12
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6812      	ldr	r2, [r2, #0]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	430b      	orrs	r3, r1
 8005af6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a2c      	ldr	r2, [pc, #176]	; (8005bc4 <UART_SetConfig+0x114>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d103      	bne.n	8005b20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b18:	f7fd ff54 	bl	80039c4 <HAL_RCC_GetPCLK2Freq>
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	e002      	b.n	8005b26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b20:	f7fd ff3c 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8005b24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009a      	lsls	r2, r3, #2
 8005b30:	441a      	add	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3c:	4a22      	ldr	r2, [pc, #136]	; (8005bc8 <UART_SetConfig+0x118>)
 8005b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	0119      	lsls	r1, r3, #4
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009a      	lsls	r2, r3, #2
 8005b50:	441a      	add	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b5c:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <UART_SetConfig+0x118>)
 8005b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	2064      	movs	r0, #100	; 0x64
 8005b66:	fb00 f303 	mul.w	r3, r0, r3
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	3332      	adds	r3, #50	; 0x32
 8005b70:	4a15      	ldr	r2, [pc, #84]	; (8005bc8 <UART_SetConfig+0x118>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b7c:	4419      	add	r1, r3
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	009a      	lsls	r2, r3, #2
 8005b88:	441a      	add	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b94:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <UART_SetConfig+0x118>)
 8005b96:	fba3 0302 	umull	r0, r3, r3, r2
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	2064      	movs	r0, #100	; 0x64
 8005b9e:	fb00 f303 	mul.w	r3, r0, r3
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	3332      	adds	r3, #50	; 0x32
 8005ba8:	4a07      	ldr	r2, [pc, #28]	; (8005bc8 <UART_SetConfig+0x118>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	f003 020f 	and.w	r2, r3, #15
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	440a      	add	r2, r1
 8005bba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005bbc:	bf00      	nop
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40013800 	.word	0x40013800
 8005bc8:	51eb851f 	.word	0x51eb851f

08005bcc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bde:	2b84      	cmp	r3, #132	; 0x84
 8005be0:	d005      	beq.n	8005bee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005be2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4413      	add	r3, r2
 8005bea:	3303      	adds	r3, #3
 8005bec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005bee:	68fb      	ldr	r3, [r7, #12]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr

08005bfa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005bfe:	f000 fae7 	bl	80061d0 <vTaskStartScheduler>
  
  return osOK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c0a:	b089      	sub	sp, #36	; 0x24
 8005c0c:	af04      	add	r7, sp, #16
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d020      	beq.n	8005c5c <osThreadCreate+0x54>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d01c      	beq.n	8005c5c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685c      	ldr	r4, [r3, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681d      	ldr	r5, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691e      	ldr	r6, [r3, #16]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff ffc9 	bl	8005bcc <makeFreeRtosPriority>
 8005c3a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c44:	9202      	str	r2, [sp, #8]
 8005c46:	9301      	str	r3, [sp, #4]
 8005c48:	9100      	str	r1, [sp, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	4632      	mov	r2, r6
 8005c4e:	4629      	mov	r1, r5
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 f8e8 	bl	8005e26 <xTaskCreateStatic>
 8005c56:	4603      	mov	r3, r0
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	e01c      	b.n	8005c96 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685c      	ldr	r4, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c68:	b29e      	uxth	r6, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff ffab 	bl	8005bcc <makeFreeRtosPriority>
 8005c76:	4602      	mov	r2, r0
 8005c78:	f107 030c 	add.w	r3, r7, #12
 8005c7c:	9301      	str	r3, [sp, #4]
 8005c7e:	9200      	str	r2, [sp, #0]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	4632      	mov	r2, r6
 8005c84:	4629      	mov	r1, r5
 8005c86:	4620      	mov	r0, r4
 8005c88:	f000 f929 	bl	8005ede <xTaskCreate>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d001      	beq.n	8005c96 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e000      	b.n	8005c98 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005c96:	68fb      	ldr	r3, [r7, #12]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ca0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <osDelay+0x16>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	e000      	b.n	8005cb8 <osDelay+0x18>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 fa55 	bl	8006168 <vTaskDelay>
  
  return osOK;
 8005cbe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f103 0208 	add.w	r2, r3, #8
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ce0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f103 0208 	add.w	r2, r3, #8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f103 0208 	add.w	r2, r3, #8
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr

08005d06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bc80      	pop	{r7}
 8005d1c:	4770      	bx	lr

08005d1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b085      	sub	sp, #20
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	601a      	str	r2, [r3, #0]
}
 8005d5a:	bf00      	nop
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bc80      	pop	{r7}
 8005d62:	4770      	bx	lr

08005d64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d7a:	d103      	bne.n	8005d84 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	e00c      	b.n	8005d9e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3308      	adds	r3, #8
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	e002      	b.n	8005d92 <vListInsert+0x2e>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d2f6      	bcs.n	8005d8c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	1c5a      	adds	r2, r3, #1
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	601a      	str	r2, [r3, #0]
}
 8005dca:	bf00      	nop
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr

08005dd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6892      	ldr	r2, [r2, #8]
 8005dea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6852      	ldr	r2, [r2, #4]
 8005df4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d103      	bne.n	8005e08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	1e5a      	subs	r2, r3, #1
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bc80      	pop	{r7}
 8005e24:	4770      	bx	lr

08005e26 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b08e      	sub	sp, #56	; 0x38
 8005e2a:	af04      	add	r7, sp, #16
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	607a      	str	r2, [r7, #4]
 8005e32:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e4c:	bf00      	nop
 8005e4e:	e7fe      	b.n	8005e4e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10a      	bne.n	8005e6c <xTaskCreateStatic+0x46>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	61fb      	str	r3, [r7, #28]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e6c:	23b4      	movs	r3, #180	; 0xb4
 8005e6e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	2bb4      	cmp	r3, #180	; 0xb4
 8005e74:	d00a      	beq.n	8005e8c <xTaskCreateStatic+0x66>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	61bb      	str	r3, [r7, #24]
}
 8005e88:	bf00      	nop
 8005e8a:	e7fe      	b.n	8005e8a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d01e      	beq.n	8005ed0 <xTaskCreateStatic+0xaa>
 8005e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01b      	beq.n	8005ed0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005eaa:	2300      	movs	r3, #0
 8005eac:	9303      	str	r3, [sp, #12]
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	9302      	str	r3, [sp, #8]
 8005eb2:	f107 0314 	add.w	r3, r7, #20
 8005eb6:	9301      	str	r3, [sp, #4]
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	68b9      	ldr	r1, [r7, #8]
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 f850 	bl	8005f68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005eca:	f000 f8e3 	bl	8006094 <prvAddNewTaskToReadyList>
 8005ece:	e001      	b.n	8005ed4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ed4:	697b      	ldr	r3, [r7, #20]
	}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3728      	adds	r7, #40	; 0x28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b08c      	sub	sp, #48	; 0x30
 8005ee2:	af04      	add	r7, sp, #16
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	603b      	str	r3, [r7, #0]
 8005eea:	4613      	mov	r3, r2
 8005eec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fe94 	bl	8006c20 <pvPortMalloc>
 8005ef8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00e      	beq.n	8005f1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f00:	20b4      	movs	r0, #180	; 0xb4
 8005f02:	f000 fe8d 	bl	8006c20 <pvPortMalloc>
 8005f06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	631a      	str	r2, [r3, #48]	; 0x30
 8005f14:	e005      	b.n	8005f22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f16:	6978      	ldr	r0, [r7, #20]
 8005f18:	f000 ff46 	bl	8006da8 <vPortFree>
 8005f1c:	e001      	b.n	8005f22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d017      	beq.n	8005f58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f30:	88fa      	ldrh	r2, [r7, #6]
 8005f32:	2300      	movs	r3, #0
 8005f34:	9303      	str	r3, [sp, #12]
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	9302      	str	r3, [sp, #8]
 8005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3c:	9301      	str	r3, [sp, #4]
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68b9      	ldr	r1, [r7, #8]
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 f80e 	bl	8005f68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f4c:	69f8      	ldr	r0, [r7, #28]
 8005f4e:	f000 f8a1 	bl	8006094 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f52:	2301      	movs	r3, #1
 8005f54:	61bb      	str	r3, [r7, #24]
 8005f56:	e002      	b.n	8005f5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
	}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3720      	adds	r7, #32
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f80:	3b01      	subs	r3, #1
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	f023 0307 	bic.w	r3, r3, #7
 8005f8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	617b      	str	r3, [r7, #20]
}
 8005fac:	bf00      	nop
 8005fae:	e7fe      	b.n	8005fae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	e012      	b.n	8005fdc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	7819      	ldrb	r1, [r3, #0]
 8005fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	3334      	adds	r3, #52	; 0x34
 8005fc6:	460a      	mov	r2, r1
 8005fc8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	4413      	add	r3, r2
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d006      	beq.n	8005fe4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	61fb      	str	r3, [r7, #28]
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	2b0f      	cmp	r3, #15
 8005fe0:	d9e9      	bls.n	8005fb6 <prvInitialiseNewTask+0x4e>
 8005fe2:	e000      	b.n	8005fe6 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005fe4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	2b06      	cmp	r3, #6
 8005ff2:	d901      	bls.n	8005ff8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ff4:	2306      	movs	r3, #6
 8005ff6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ffc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006002:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006006:	2200      	movs	r2, #0
 8006008:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	3304      	adds	r3, #4
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fe79 	bl	8005d06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	3318      	adds	r3, #24
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff fe74 	bl	8005d06 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006022:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	f1c3 0207 	rsb	r2, r3, #7
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006032:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	2200      	movs	r2, #0
 8006038:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	2200      	movs	r2, #0
 8006040:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	334c      	adds	r3, #76	; 0x4c
 8006048:	2260      	movs	r2, #96	; 0x60
 800604a:	2100      	movs	r1, #0
 800604c:	4618      	mov	r0, r3
 800604e:	f001 f8f0 	bl	8007232 <memset>
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	4a0c      	ldr	r2, [pc, #48]	; (8006088 <prvInitialiseNewTask+0x120>)
 8006056:	651a      	str	r2, [r3, #80]	; 0x50
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	4a0c      	ldr	r2, [pc, #48]	; (800608c <prvInitialiseNewTask+0x124>)
 800605c:	655a      	str	r2, [r3, #84]	; 0x54
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	4a0b      	ldr	r2, [pc, #44]	; (8006090 <prvInitialiseNewTask+0x128>)
 8006062:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	69b8      	ldr	r0, [r7, #24]
 800606a:	f000 fc29 	bl	80068c0 <pxPortInitialiseStack>
 800606e:	4602      	mov	r2, r0
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800607e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006080:	bf00      	nop
 8006082:	3720      	adds	r7, #32
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	08009c48 	.word	0x08009c48
 800608c:	08009c68 	.word	0x08009c68
 8006090:	08009c28 	.word	0x08009c28

08006094 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800609c:	f000 fcfe 	bl	8006a9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060a0:	4b2a      	ldr	r3, [pc, #168]	; (800614c <prvAddNewTaskToReadyList+0xb8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	4a29      	ldr	r2, [pc, #164]	; (800614c <prvAddNewTaskToReadyList+0xb8>)
 80060a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060aa:	4b29      	ldr	r3, [pc, #164]	; (8006150 <prvAddNewTaskToReadyList+0xbc>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060b2:	4a27      	ldr	r2, [pc, #156]	; (8006150 <prvAddNewTaskToReadyList+0xbc>)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060b8:	4b24      	ldr	r3, [pc, #144]	; (800614c <prvAddNewTaskToReadyList+0xb8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d110      	bne.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060c0:	f000 fad2 	bl	8006668 <prvInitialiseTaskLists>
 80060c4:	e00d      	b.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060c6:	4b23      	ldr	r3, [pc, #140]	; (8006154 <prvAddNewTaskToReadyList+0xc0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060ce:	4b20      	ldr	r3, [pc, #128]	; (8006150 <prvAddNewTaskToReadyList+0xbc>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	429a      	cmp	r2, r3
 80060da:	d802      	bhi.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060dc:	4a1c      	ldr	r2, [pc, #112]	; (8006150 <prvAddNewTaskToReadyList+0xbc>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060e2:	4b1d      	ldr	r3, [pc, #116]	; (8006158 <prvAddNewTaskToReadyList+0xc4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3301      	adds	r3, #1
 80060e8:	4a1b      	ldr	r2, [pc, #108]	; (8006158 <prvAddNewTaskToReadyList+0xc4>)
 80060ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	2201      	movs	r2, #1
 80060f2:	409a      	lsls	r2, r3
 80060f4:	4b19      	ldr	r3, [pc, #100]	; (800615c <prvAddNewTaskToReadyList+0xc8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	4a18      	ldr	r2, [pc, #96]	; (800615c <prvAddNewTaskToReadyList+0xc8>)
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4a15      	ldr	r2, [pc, #84]	; (8006160 <prvAddNewTaskToReadyList+0xcc>)
 800610c:	441a      	add	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3304      	adds	r3, #4
 8006112:	4619      	mov	r1, r3
 8006114:	4610      	mov	r0, r2
 8006116:	f7ff fe02 	bl	8005d1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800611a:	f000 fcef 	bl	8006afc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800611e:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <prvAddNewTaskToReadyList+0xc0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00e      	beq.n	8006144 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006126:	4b0a      	ldr	r3, [pc, #40]	; (8006150 <prvAddNewTaskToReadyList+0xbc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	429a      	cmp	r2, r3
 8006132:	d207      	bcs.n	8006144 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006134:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <prvAddNewTaskToReadyList+0xd0>)
 8006136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20001778 	.word	0x20001778
 8006150:	20001678 	.word	0x20001678
 8006154:	20001784 	.word	0x20001784
 8006158:	20001794 	.word	0x20001794
 800615c:	20001780 	.word	0x20001780
 8006160:	2000167c 	.word	0x2000167c
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006170:	2300      	movs	r3, #0
 8006172:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d017      	beq.n	80061aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800617a:	4b13      	ldr	r3, [pc, #76]	; (80061c8 <vTaskDelay+0x60>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <vTaskDelay+0x30>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	60bb      	str	r3, [r7, #8]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006198:	f000 f884 	bl	80062a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800619c:	2100      	movs	r1, #0
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fb28 	bl	80067f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061a4:	f000 f88c 	bl	80062c0 <xTaskResumeAll>
 80061a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d107      	bne.n	80061c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061b0:	4b06      	ldr	r3, [pc, #24]	; (80061cc <vTaskDelay+0x64>)
 80061b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061c0:	bf00      	nop
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	200017a0 	.word	0x200017a0
 80061cc:	e000ed04 	.word	0xe000ed04

080061d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08a      	sub	sp, #40	; 0x28
 80061d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061da:	2300      	movs	r3, #0
 80061dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061de:	463a      	mov	r2, r7
 80061e0:	1d39      	adds	r1, r7, #4
 80061e2:	f107 0308 	add.w	r3, r7, #8
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fa fc9e 	bl	8000b28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	9202      	str	r2, [sp, #8]
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	2300      	movs	r3, #0
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	2300      	movs	r3, #0
 80061fc:	460a      	mov	r2, r1
 80061fe:	4921      	ldr	r1, [pc, #132]	; (8006284 <vTaskStartScheduler+0xb4>)
 8006200:	4821      	ldr	r0, [pc, #132]	; (8006288 <vTaskStartScheduler+0xb8>)
 8006202:	f7ff fe10 	bl	8005e26 <xTaskCreateStatic>
 8006206:	4603      	mov	r3, r0
 8006208:	4a20      	ldr	r2, [pc, #128]	; (800628c <vTaskStartScheduler+0xbc>)
 800620a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800620c:	4b1f      	ldr	r3, [pc, #124]	; (800628c <vTaskStartScheduler+0xbc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006214:	2301      	movs	r3, #1
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	e001      	b.n	800621e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800621a:	2300      	movs	r3, #0
 800621c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d11b      	bne.n	800625c <vTaskStartScheduler+0x8c>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	613b      	str	r3, [r7, #16]
}
 8006236:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006238:	4b15      	ldr	r3, [pc, #84]	; (8006290 <vTaskStartScheduler+0xc0>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	334c      	adds	r3, #76	; 0x4c
 800623e:	4a15      	ldr	r2, [pc, #84]	; (8006294 <vTaskStartScheduler+0xc4>)
 8006240:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006242:	4b15      	ldr	r3, [pc, #84]	; (8006298 <vTaskStartScheduler+0xc8>)
 8006244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006248:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800624a:	4b14      	ldr	r3, [pc, #80]	; (800629c <vTaskStartScheduler+0xcc>)
 800624c:	2201      	movs	r2, #1
 800624e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006250:	4b13      	ldr	r3, [pc, #76]	; (80062a0 <vTaskStartScheduler+0xd0>)
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006256:	f000 fbaf 	bl	80069b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800625a:	e00e      	b.n	800627a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006262:	d10a      	bne.n	800627a <vTaskStartScheduler+0xaa>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	60fb      	str	r3, [r7, #12]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <vTaskStartScheduler+0xa8>
}
 800627a:	bf00      	nop
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	08009c08 	.word	0x08009c08
 8006288:	08006639 	.word	0x08006639
 800628c:	2000179c 	.word	0x2000179c
 8006290:	20001678 	.word	0x20001678
 8006294:	20000024 	.word	0x20000024
 8006298:	20001798 	.word	0x20001798
 800629c:	20001784 	.word	0x20001784
 80062a0:	2000177c 	.word	0x2000177c

080062a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80062a8:	4b04      	ldr	r3, [pc, #16]	; (80062bc <vTaskSuspendAll+0x18>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3301      	adds	r3, #1
 80062ae:	4a03      	ldr	r2, [pc, #12]	; (80062bc <vTaskSuspendAll+0x18>)
 80062b0:	6013      	str	r3, [r2, #0]
}
 80062b2:	bf00      	nop
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bc80      	pop	{r7}
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	200017a0 	.word	0x200017a0

080062c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062ce:	4b41      	ldr	r3, [pc, #260]	; (80063d4 <xTaskResumeAll+0x114>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10a      	bne.n	80062ec <xTaskResumeAll+0x2c>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	603b      	str	r3, [r7, #0]
}
 80062e8:	bf00      	nop
 80062ea:	e7fe      	b.n	80062ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062ec:	f000 fbd6 	bl	8006a9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062f0:	4b38      	ldr	r3, [pc, #224]	; (80063d4 <xTaskResumeAll+0x114>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	4a37      	ldr	r2, [pc, #220]	; (80063d4 <xTaskResumeAll+0x114>)
 80062f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062fa:	4b36      	ldr	r3, [pc, #216]	; (80063d4 <xTaskResumeAll+0x114>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d161      	bne.n	80063c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006302:	4b35      	ldr	r3, [pc, #212]	; (80063d8 <xTaskResumeAll+0x118>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d05d      	beq.n	80063c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800630a:	e02e      	b.n	800636a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800630c:	4b33      	ldr	r3, [pc, #204]	; (80063dc <xTaskResumeAll+0x11c>)
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3318      	adds	r3, #24
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff fd5b 	bl	8005dd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3304      	adds	r3, #4
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff fd56 	bl	8005dd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	2201      	movs	r2, #1
 800632e:	409a      	lsls	r2, r3
 8006330:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <xTaskResumeAll+0x120>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4313      	orrs	r3, r2
 8006336:	4a2a      	ldr	r2, [pc, #168]	; (80063e0 <xTaskResumeAll+0x120>)
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4a27      	ldr	r2, [pc, #156]	; (80063e4 <xTaskResumeAll+0x124>)
 8006348:	441a      	add	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3304      	adds	r3, #4
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f7ff fce4 	bl	8005d1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635a:	4b23      	ldr	r3, [pc, #140]	; (80063e8 <xTaskResumeAll+0x128>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006360:	429a      	cmp	r2, r3
 8006362:	d302      	bcc.n	800636a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006364:	4b21      	ldr	r3, [pc, #132]	; (80063ec <xTaskResumeAll+0x12c>)
 8006366:	2201      	movs	r2, #1
 8006368:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800636a:	4b1c      	ldr	r3, [pc, #112]	; (80063dc <xTaskResumeAll+0x11c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1cc      	bne.n	800630c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006378:	f000 fa18 	bl	80067ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800637c:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <xTaskResumeAll+0x130>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d010      	beq.n	80063aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006388:	f000 f836 	bl	80063f8 <xTaskIncrementTick>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006392:	4b16      	ldr	r3, [pc, #88]	; (80063ec <xTaskResumeAll+0x12c>)
 8006394:	2201      	movs	r2, #1
 8006396:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3b01      	subs	r3, #1
 800639c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f1      	bne.n	8006388 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80063a4:	4b12      	ldr	r3, [pc, #72]	; (80063f0 <xTaskResumeAll+0x130>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <xTaskResumeAll+0x12c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063b2:	2301      	movs	r3, #1
 80063b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063b6:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <xTaskResumeAll+0x134>)
 80063b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063c6:	f000 fb99 	bl	8006afc <vPortExitCritical>

	return xAlreadyYielded;
 80063ca:	68bb      	ldr	r3, [r7, #8]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	200017a0 	.word	0x200017a0
 80063d8:	20001778 	.word	0x20001778
 80063dc:	20001738 	.word	0x20001738
 80063e0:	20001780 	.word	0x20001780
 80063e4:	2000167c 	.word	0x2000167c
 80063e8:	20001678 	.word	0x20001678
 80063ec:	2000178c 	.word	0x2000178c
 80063f0:	20001788 	.word	0x20001788
 80063f4:	e000ed04 	.word	0xe000ed04

080063f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006402:	4b51      	ldr	r3, [pc, #324]	; (8006548 <xTaskIncrementTick+0x150>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	f040 808d 	bne.w	8006526 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800640c:	4b4f      	ldr	r3, [pc, #316]	; (800654c <xTaskIncrementTick+0x154>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3301      	adds	r3, #1
 8006412:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006414:	4a4d      	ldr	r2, [pc, #308]	; (800654c <xTaskIncrementTick+0x154>)
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d120      	bne.n	8006462 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006420:	4b4b      	ldr	r3, [pc, #300]	; (8006550 <xTaskIncrementTick+0x158>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <xTaskIncrementTick+0x48>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	603b      	str	r3, [r7, #0]
}
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <xTaskIncrementTick+0x46>
 8006440:	4b43      	ldr	r3, [pc, #268]	; (8006550 <xTaskIncrementTick+0x158>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	4b43      	ldr	r3, [pc, #268]	; (8006554 <xTaskIncrementTick+0x15c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a41      	ldr	r2, [pc, #260]	; (8006550 <xTaskIncrementTick+0x158>)
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	4a41      	ldr	r2, [pc, #260]	; (8006554 <xTaskIncrementTick+0x15c>)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	4b40      	ldr	r3, [pc, #256]	; (8006558 <xTaskIncrementTick+0x160>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3301      	adds	r3, #1
 800645a:	4a3f      	ldr	r2, [pc, #252]	; (8006558 <xTaskIncrementTick+0x160>)
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	f000 f9a5 	bl	80067ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006462:	4b3e      	ldr	r3, [pc, #248]	; (800655c <xTaskIncrementTick+0x164>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	429a      	cmp	r2, r3
 800646a:	d34d      	bcc.n	8006508 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800646c:	4b38      	ldr	r3, [pc, #224]	; (8006550 <xTaskIncrementTick+0x158>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <xTaskIncrementTick+0x82>
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <xTaskIncrementTick+0x84>
 800647a:	2300      	movs	r3, #0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d004      	beq.n	800648a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006480:	4b36      	ldr	r3, [pc, #216]	; (800655c <xTaskIncrementTick+0x164>)
 8006482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006486:	601a      	str	r2, [r3, #0]
					break;
 8006488:	e03e      	b.n	8006508 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800648a:	4b31      	ldr	r3, [pc, #196]	; (8006550 <xTaskIncrementTick+0x158>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d203      	bcs.n	80064aa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064a2:	4a2e      	ldr	r2, [pc, #184]	; (800655c <xTaskIncrementTick+0x164>)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6013      	str	r3, [r2, #0]
						break;
 80064a8:	e02e      	b.n	8006508 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	3304      	adds	r3, #4
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff fc90 	bl	8005dd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d004      	beq.n	80064c6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	3318      	adds	r3, #24
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff fc87 	bl	8005dd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ca:	2201      	movs	r2, #1
 80064cc:	409a      	lsls	r2, r3
 80064ce:	4b24      	ldr	r3, [pc, #144]	; (8006560 <xTaskIncrementTick+0x168>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	4a22      	ldr	r2, [pc, #136]	; (8006560 <xTaskIncrementTick+0x168>)
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064dc:	4613      	mov	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4a1f      	ldr	r2, [pc, #124]	; (8006564 <xTaskIncrementTick+0x16c>)
 80064e6:	441a      	add	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4619      	mov	r1, r3
 80064ee:	4610      	mov	r0, r2
 80064f0:	f7ff fc15 	bl	8005d1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f8:	4b1b      	ldr	r3, [pc, #108]	; (8006568 <xTaskIncrementTick+0x170>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	429a      	cmp	r2, r3
 8006500:	d3b4      	bcc.n	800646c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006502:	2301      	movs	r3, #1
 8006504:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006506:	e7b1      	b.n	800646c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006508:	4b17      	ldr	r3, [pc, #92]	; (8006568 <xTaskIncrementTick+0x170>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650e:	4915      	ldr	r1, [pc, #84]	; (8006564 <xTaskIncrementTick+0x16c>)
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d907      	bls.n	8006530 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006520:	2301      	movs	r3, #1
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	e004      	b.n	8006530 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006526:	4b11      	ldr	r3, [pc, #68]	; (800656c <xTaskIncrementTick+0x174>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3301      	adds	r3, #1
 800652c:	4a0f      	ldr	r2, [pc, #60]	; (800656c <xTaskIncrementTick+0x174>)
 800652e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006530:	4b0f      	ldr	r3, [pc, #60]	; (8006570 <xTaskIncrementTick+0x178>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006538:	2301      	movs	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800653c:	697b      	ldr	r3, [r7, #20]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	200017a0 	.word	0x200017a0
 800654c:	2000177c 	.word	0x2000177c
 8006550:	20001730 	.word	0x20001730
 8006554:	20001734 	.word	0x20001734
 8006558:	20001790 	.word	0x20001790
 800655c:	20001798 	.word	0x20001798
 8006560:	20001780 	.word	0x20001780
 8006564:	2000167c 	.word	0x2000167c
 8006568:	20001678 	.word	0x20001678
 800656c:	20001788 	.word	0x20001788
 8006570:	2000178c 	.word	0x2000178c

08006574 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800657a:	4b29      	ldr	r3, [pc, #164]	; (8006620 <vTaskSwitchContext+0xac>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006582:	4b28      	ldr	r3, [pc, #160]	; (8006624 <vTaskSwitchContext+0xb0>)
 8006584:	2201      	movs	r2, #1
 8006586:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006588:	e044      	b.n	8006614 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800658a:	4b26      	ldr	r3, [pc, #152]	; (8006624 <vTaskSwitchContext+0xb0>)
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006590:	4b25      	ldr	r3, [pc, #148]	; (8006628 <vTaskSwitchContext+0xb4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	fab3 f383 	clz	r3, r3
 800659c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800659e:	7afb      	ldrb	r3, [r7, #11]
 80065a0:	f1c3 031f 	rsb	r3, r3, #31
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	4921      	ldr	r1, [pc, #132]	; (800662c <vTaskSwitchContext+0xb8>)
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	4613      	mov	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	440b      	add	r3, r1
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10a      	bne.n	80065d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	607b      	str	r3, [r7, #4]
}
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <vTaskSwitchContext+0x5a>
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4a14      	ldr	r2, [pc, #80]	; (800662c <vTaskSwitchContext+0xb8>)
 80065dc:	4413      	add	r3, r2
 80065de:	613b      	str	r3, [r7, #16]
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	605a      	str	r2, [r3, #4]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	3308      	adds	r3, #8
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d104      	bne.n	8006600 <vTaskSwitchContext+0x8c>
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	605a      	str	r2, [r3, #4]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	4a0a      	ldr	r2, [pc, #40]	; (8006630 <vTaskSwitchContext+0xbc>)
 8006608:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800660a:	4b09      	ldr	r3, [pc, #36]	; (8006630 <vTaskSwitchContext+0xbc>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	334c      	adds	r3, #76	; 0x4c
 8006610:	4a08      	ldr	r2, [pc, #32]	; (8006634 <vTaskSwitchContext+0xc0>)
 8006612:	6013      	str	r3, [r2, #0]
}
 8006614:	bf00      	nop
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	bc80      	pop	{r7}
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	200017a0 	.word	0x200017a0
 8006624:	2000178c 	.word	0x2000178c
 8006628:	20001780 	.word	0x20001780
 800662c:	2000167c 	.word	0x2000167c
 8006630:	20001678 	.word	0x20001678
 8006634:	20000024 	.word	0x20000024

08006638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006640:	f000 f852 	bl	80066e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006644:	4b06      	ldr	r3, [pc, #24]	; (8006660 <prvIdleTask+0x28>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d9f9      	bls.n	8006640 <prvIdleTask+0x8>
			{
				taskYIELD();
 800664c:	4b05      	ldr	r3, [pc, #20]	; (8006664 <prvIdleTask+0x2c>)
 800664e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800665c:	e7f0      	b.n	8006640 <prvIdleTask+0x8>
 800665e:	bf00      	nop
 8006660:	2000167c 	.word	0x2000167c
 8006664:	e000ed04 	.word	0xe000ed04

08006668 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800666e:	2300      	movs	r3, #0
 8006670:	607b      	str	r3, [r7, #4]
 8006672:	e00c      	b.n	800668e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4a12      	ldr	r2, [pc, #72]	; (80066c8 <prvInitialiseTaskLists+0x60>)
 8006680:	4413      	add	r3, r2
 8006682:	4618      	mov	r0, r3
 8006684:	f7ff fb20 	bl	8005cc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3301      	adds	r3, #1
 800668c:	607b      	str	r3, [r7, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b06      	cmp	r3, #6
 8006692:	d9ef      	bls.n	8006674 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006694:	480d      	ldr	r0, [pc, #52]	; (80066cc <prvInitialiseTaskLists+0x64>)
 8006696:	f7ff fb17 	bl	8005cc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800669a:	480d      	ldr	r0, [pc, #52]	; (80066d0 <prvInitialiseTaskLists+0x68>)
 800669c:	f7ff fb14 	bl	8005cc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066a0:	480c      	ldr	r0, [pc, #48]	; (80066d4 <prvInitialiseTaskLists+0x6c>)
 80066a2:	f7ff fb11 	bl	8005cc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066a6:	480c      	ldr	r0, [pc, #48]	; (80066d8 <prvInitialiseTaskLists+0x70>)
 80066a8:	f7ff fb0e 	bl	8005cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066ac:	480b      	ldr	r0, [pc, #44]	; (80066dc <prvInitialiseTaskLists+0x74>)
 80066ae:	f7ff fb0b 	bl	8005cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066b2:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <prvInitialiseTaskLists+0x78>)
 80066b4:	4a05      	ldr	r2, [pc, #20]	; (80066cc <prvInitialiseTaskLists+0x64>)
 80066b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066b8:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <prvInitialiseTaskLists+0x7c>)
 80066ba:	4a05      	ldr	r2, [pc, #20]	; (80066d0 <prvInitialiseTaskLists+0x68>)
 80066bc:	601a      	str	r2, [r3, #0]
}
 80066be:	bf00      	nop
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	2000167c 	.word	0x2000167c
 80066cc:	20001708 	.word	0x20001708
 80066d0:	2000171c 	.word	0x2000171c
 80066d4:	20001738 	.word	0x20001738
 80066d8:	2000174c 	.word	0x2000174c
 80066dc:	20001764 	.word	0x20001764
 80066e0:	20001730 	.word	0x20001730
 80066e4:	20001734 	.word	0x20001734

080066e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066ee:	e019      	b.n	8006724 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066f0:	f000 f9d4 	bl	8006a9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80066f4:	4b10      	ldr	r3, [pc, #64]	; (8006738 <prvCheckTasksWaitingTermination+0x50>)
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3304      	adds	r3, #4
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff fb67 	bl	8005dd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006706:	4b0d      	ldr	r3, [pc, #52]	; (800673c <prvCheckTasksWaitingTermination+0x54>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3b01      	subs	r3, #1
 800670c:	4a0b      	ldr	r2, [pc, #44]	; (800673c <prvCheckTasksWaitingTermination+0x54>)
 800670e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006710:	4b0b      	ldr	r3, [pc, #44]	; (8006740 <prvCheckTasksWaitingTermination+0x58>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3b01      	subs	r3, #1
 8006716:	4a0a      	ldr	r2, [pc, #40]	; (8006740 <prvCheckTasksWaitingTermination+0x58>)
 8006718:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800671a:	f000 f9ef 	bl	8006afc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f810 	bl	8006744 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <prvCheckTasksWaitingTermination+0x58>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e1      	bne.n	80066f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800672c:	bf00      	nop
 800672e:	bf00      	nop
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	2000174c 	.word	0x2000174c
 800673c:	20001778 	.word	0x20001778
 8006740:	20001760 	.word	0x20001760

08006744 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	334c      	adds	r3, #76	; 0x4c
 8006750:	4618      	mov	r0, r3
 8006752:	f001 fa91 	bl	8007c78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d108      	bne.n	8006772 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fb1f 	bl	8006da8 <vPortFree>
				vPortFree( pxTCB );
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fb1c 	bl	8006da8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006770:	e018      	b.n	80067a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006778:	2b01      	cmp	r3, #1
 800677a:	d103      	bne.n	8006784 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fb13 	bl	8006da8 <vPortFree>
	}
 8006782:	e00f      	b.n	80067a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800678a:	2b02      	cmp	r3, #2
 800678c:	d00a      	beq.n	80067a4 <prvDeleteTCB+0x60>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	60fb      	str	r3, [r7, #12]
}
 80067a0:	bf00      	nop
 80067a2:	e7fe      	b.n	80067a2 <prvDeleteTCB+0x5e>
	}
 80067a4:	bf00      	nop
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b2:	4b0e      	ldr	r3, [pc, #56]	; (80067ec <prvResetNextTaskUnblockTime+0x40>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <prvResetNextTaskUnblockTime+0x14>
 80067bc:	2301      	movs	r3, #1
 80067be:	e000      	b.n	80067c2 <prvResetNextTaskUnblockTime+0x16>
 80067c0:	2300      	movs	r3, #0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d004      	beq.n	80067d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067c6:	4b0a      	ldr	r3, [pc, #40]	; (80067f0 <prvResetNextTaskUnblockTime+0x44>)
 80067c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067ce:	e008      	b.n	80067e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067d0:	4b06      	ldr	r3, [pc, #24]	; (80067ec <prvResetNextTaskUnblockTime+0x40>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	4a04      	ldr	r2, [pc, #16]	; (80067f0 <prvResetNextTaskUnblockTime+0x44>)
 80067e0:	6013      	str	r3, [r2, #0]
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr
 80067ec:	20001730 	.word	0x20001730
 80067f0:	20001798 	.word	0x20001798

080067f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067fe:	4b29      	ldr	r3, [pc, #164]	; (80068a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006804:	4b28      	ldr	r3, [pc, #160]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3304      	adds	r3, #4
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff fae2 	bl	8005dd4 <uxListRemove>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10b      	bne.n	800682e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006816:	4b24      	ldr	r3, [pc, #144]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	2201      	movs	r2, #1
 800681e:	fa02 f303 	lsl.w	r3, r2, r3
 8006822:	43da      	mvns	r2, r3
 8006824:	4b21      	ldr	r3, [pc, #132]	; (80068ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4013      	ands	r3, r2
 800682a:	4a20      	ldr	r2, [pc, #128]	; (80068ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800682c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006834:	d10a      	bne.n	800684c <prvAddCurrentTaskToDelayedList+0x58>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d007      	beq.n	800684c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800683c:	4b1a      	ldr	r3, [pc, #104]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3304      	adds	r3, #4
 8006842:	4619      	mov	r1, r3
 8006844:	481a      	ldr	r0, [pc, #104]	; (80068b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006846:	f7ff fa6a 	bl	8005d1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800684a:	e026      	b.n	800689a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4413      	add	r3, r2
 8006852:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006854:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	429a      	cmp	r2, r3
 8006862:	d209      	bcs.n	8006878 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006864:	4b13      	ldr	r3, [pc, #76]	; (80068b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3304      	adds	r3, #4
 800686e:	4619      	mov	r1, r3
 8006870:	4610      	mov	r0, r2
 8006872:	f7ff fa77 	bl	8005d64 <vListInsert>
}
 8006876:	e010      	b.n	800689a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006878:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3304      	adds	r3, #4
 8006882:	4619      	mov	r1, r3
 8006884:	4610      	mov	r0, r2
 8006886:	f7ff fa6d 	bl	8005d64 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800688a:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	429a      	cmp	r2, r3
 8006892:	d202      	bcs.n	800689a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006894:	4a09      	ldr	r2, [pc, #36]	; (80068bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	6013      	str	r3, [r2, #0]
}
 800689a:	bf00      	nop
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	2000177c 	.word	0x2000177c
 80068a8:	20001678 	.word	0x20001678
 80068ac:	20001780 	.word	0x20001780
 80068b0:	20001764 	.word	0x20001764
 80068b4:	20001734 	.word	0x20001734
 80068b8:	20001730 	.word	0x20001730
 80068bc:	20001798 	.word	0x20001798

080068c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	3b04      	subs	r3, #4
 80068d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3b04      	subs	r3, #4
 80068de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f023 0201 	bic.w	r2, r3, #1
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3b04      	subs	r3, #4
 80068ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068f0:	4a08      	ldr	r2, [pc, #32]	; (8006914 <pxPortInitialiseStack+0x54>)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3b14      	subs	r3, #20
 80068fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3b20      	subs	r3, #32
 8006906:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006908:	68fb      	ldr	r3, [r7, #12]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	bc80      	pop	{r7}
 8006912:	4770      	bx	lr
 8006914:	08006919 	.word	0x08006919

08006918 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800691e:	2300      	movs	r3, #0
 8006920:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006922:	4b12      	ldr	r3, [pc, #72]	; (800696c <prvTaskExitError+0x54>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800692a:	d00a      	beq.n	8006942 <prvTaskExitError+0x2a>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	60fb      	str	r3, [r7, #12]
}
 800693e:	bf00      	nop
 8006940:	e7fe      	b.n	8006940 <prvTaskExitError+0x28>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	60bb      	str	r3, [r7, #8]
}
 8006954:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006956:	bf00      	nop
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0fc      	beq.n	8006958 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800695e:	bf00      	nop
 8006960:	bf00      	nop
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	20000020 	.word	0x20000020

08006970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006970:	4b07      	ldr	r3, [pc, #28]	; (8006990 <pxCurrentTCBConst2>)
 8006972:	6819      	ldr	r1, [r3, #0]
 8006974:	6808      	ldr	r0, [r1, #0]
 8006976:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800697a:	f380 8809 	msr	PSP, r0
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f04f 0000 	mov.w	r0, #0
 8006986:	f380 8811 	msr	BASEPRI, r0
 800698a:	f04e 0e0d 	orr.w	lr, lr, #13
 800698e:	4770      	bx	lr

08006990 <pxCurrentTCBConst2>:
 8006990:	20001678 	.word	0x20001678
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop

08006998 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006998:	4806      	ldr	r0, [pc, #24]	; (80069b4 <prvPortStartFirstTask+0x1c>)
 800699a:	6800      	ldr	r0, [r0, #0]
 800699c:	6800      	ldr	r0, [r0, #0]
 800699e:	f380 8808 	msr	MSP, r0
 80069a2:	b662      	cpsie	i
 80069a4:	b661      	cpsie	f
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	df00      	svc	0
 80069b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069b2:	bf00      	nop
 80069b4:	e000ed08 	.word	0xe000ed08

080069b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069be:	4b32      	ldr	r3, [pc, #200]	; (8006a88 <xPortStartScheduler+0xd0>)
 80069c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	22ff      	movs	r2, #255	; 0xff
 80069ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	4b2a      	ldr	r3, [pc, #168]	; (8006a8c <xPortStartScheduler+0xd4>)
 80069e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069e6:	4b2a      	ldr	r3, [pc, #168]	; (8006a90 <xPortStartScheduler+0xd8>)
 80069e8:	2207      	movs	r2, #7
 80069ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069ec:	e009      	b.n	8006a02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80069ee:	4b28      	ldr	r3, [pc, #160]	; (8006a90 <xPortStartScheduler+0xd8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	4a26      	ldr	r2, [pc, #152]	; (8006a90 <xPortStartScheduler+0xd8>)
 80069f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069f8:	78fb      	ldrb	r3, [r7, #3]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a02:	78fb      	ldrb	r3, [r7, #3]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0a:	2b80      	cmp	r3, #128	; 0x80
 8006a0c:	d0ef      	beq.n	80069ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a0e:	4b20      	ldr	r3, [pc, #128]	; (8006a90 <xPortStartScheduler+0xd8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f1c3 0307 	rsb	r3, r3, #7
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d00a      	beq.n	8006a30 <xPortStartScheduler+0x78>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	60bb      	str	r3, [r7, #8]
}
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a30:	4b17      	ldr	r3, [pc, #92]	; (8006a90 <xPortStartScheduler+0xd8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	021b      	lsls	r3, r3, #8
 8006a36:	4a16      	ldr	r2, [pc, #88]	; (8006a90 <xPortStartScheduler+0xd8>)
 8006a38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a3a:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <xPortStartScheduler+0xd8>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a42:	4a13      	ldr	r2, [pc, #76]	; (8006a90 <xPortStartScheduler+0xd8>)
 8006a44:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a4e:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <xPortStartScheduler+0xdc>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a10      	ldr	r2, [pc, #64]	; (8006a94 <xPortStartScheduler+0xdc>)
 8006a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a5a:	4b0e      	ldr	r3, [pc, #56]	; (8006a94 <xPortStartScheduler+0xdc>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a0d      	ldr	r2, [pc, #52]	; (8006a94 <xPortStartScheduler+0xdc>)
 8006a60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a64:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a66:	f000 f8b9 	bl	8006bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a6a:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <xPortStartScheduler+0xe0>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a70:	f7ff ff92 	bl	8006998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a74:	f7ff fd7e 	bl	8006574 <vTaskSwitchContext>
	prvTaskExitError();
 8006a78:	f7ff ff4e 	bl	8006918 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	e000e400 	.word	0xe000e400
 8006a8c:	200017a4 	.word	0x200017a4
 8006a90:	200017a8 	.word	0x200017a8
 8006a94:	e000ed20 	.word	0xe000ed20
 8006a98:	20000020 	.word	0x20000020

08006a9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	607b      	str	r3, [r7, #4]
}
 8006ab4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ab6:	4b0f      	ldr	r3, [pc, #60]	; (8006af4 <vPortEnterCritical+0x58>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3301      	adds	r3, #1
 8006abc:	4a0d      	ldr	r2, [pc, #52]	; (8006af4 <vPortEnterCritical+0x58>)
 8006abe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ac0:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <vPortEnterCritical+0x58>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d10f      	bne.n	8006ae8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ac8:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <vPortEnterCritical+0x5c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	603b      	str	r3, [r7, #0]
}
 8006ae4:	bf00      	nop
 8006ae6:	e7fe      	b.n	8006ae6 <vPortEnterCritical+0x4a>
	}
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bc80      	pop	{r7}
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20000020 	.word	0x20000020
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b02:	4b11      	ldr	r3, [pc, #68]	; (8006b48 <vPortExitCritical+0x4c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <vPortExitCritical+0x24>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	607b      	str	r3, [r7, #4]
}
 8006b1c:	bf00      	nop
 8006b1e:	e7fe      	b.n	8006b1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b20:	4b09      	ldr	r3, [pc, #36]	; (8006b48 <vPortExitCritical+0x4c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3b01      	subs	r3, #1
 8006b26:	4a08      	ldr	r2, [pc, #32]	; (8006b48 <vPortExitCritical+0x4c>)
 8006b28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b2a:	4b07      	ldr	r3, [pc, #28]	; (8006b48 <vPortExitCritical+0x4c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d105      	bne.n	8006b3e <vPortExitCritical+0x42>
 8006b32:	2300      	movs	r3, #0
 8006b34:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr
 8006b48:	20000020 	.word	0x20000020
 8006b4c:	00000000 	.word	0x00000000

08006b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b50:	f3ef 8009 	mrs	r0, PSP
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	4b0d      	ldr	r3, [pc, #52]	; (8006b90 <pxCurrentTCBConst>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b60:	6010      	str	r0, [r2, #0]
 8006b62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006b66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b6a:	f380 8811 	msr	BASEPRI, r0
 8006b6e:	f7ff fd01 	bl	8006574 <vTaskSwitchContext>
 8006b72:	f04f 0000 	mov.w	r0, #0
 8006b76:	f380 8811 	msr	BASEPRI, r0
 8006b7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b7e:	6819      	ldr	r1, [r3, #0]
 8006b80:	6808      	ldr	r0, [r1, #0]
 8006b82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b86:	f380 8809 	msr	PSP, r0
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	4770      	bx	lr

08006b90 <pxCurrentTCBConst>:
 8006b90:	20001678 	.word	0x20001678
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop

08006b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
}
 8006bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bb2:	f7ff fc21 	bl	80063f8 <xTaskIncrementTick>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <SysTick_Handler+0x40>)
 8006bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	f383 8811 	msr	BASEPRI, r3
}
 8006bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006be0:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <vPortSetupTimerInterrupt+0x30>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006be6:	4b0a      	ldr	r3, [pc, #40]	; (8006c10 <vPortSetupTimerInterrupt+0x34>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bec:	4b09      	ldr	r3, [pc, #36]	; (8006c14 <vPortSetupTimerInterrupt+0x38>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a09      	ldr	r2, [pc, #36]	; (8006c18 <vPortSetupTimerInterrupt+0x3c>)
 8006bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf6:	099b      	lsrs	r3, r3, #6
 8006bf8:	4a08      	ldr	r2, [pc, #32]	; (8006c1c <vPortSetupTimerInterrupt+0x40>)
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bfe:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <vPortSetupTimerInterrupt+0x30>)
 8006c00:	2207      	movs	r2, #7
 8006c02:	601a      	str	r2, [r3, #0]
}
 8006c04:	bf00      	nop
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr
 8006c0c:	e000e010 	.word	0xe000e010
 8006c10:	e000e018 	.word	0xe000e018
 8006c14:	20000014 	.word	0x20000014
 8006c18:	10624dd3 	.word	0x10624dd3
 8006c1c:	e000e014 	.word	0xe000e014

08006c20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	; 0x28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c2c:	f7ff fb3a 	bl	80062a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c30:	4b58      	ldr	r3, [pc, #352]	; (8006d94 <pvPortMalloc+0x174>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c38:	f000 f910 	bl	8006e5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c3c:	4b56      	ldr	r3, [pc, #344]	; (8006d98 <pvPortMalloc+0x178>)
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4013      	ands	r3, r2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f040 808e 	bne.w	8006d66 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01d      	beq.n	8006c8c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c50:	2208      	movs	r2, #8
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4413      	add	r3, r2
 8006c56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f003 0307 	and.w	r3, r3, #7
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d014      	beq.n	8006c8c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f023 0307 	bic.w	r3, r3, #7
 8006c68:	3308      	adds	r3, #8
 8006c6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <pvPortMalloc+0x6c>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	617b      	str	r3, [r7, #20]
}
 8006c88:	bf00      	nop
 8006c8a:	e7fe      	b.n	8006c8a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d069      	beq.n	8006d66 <pvPortMalloc+0x146>
 8006c92:	4b42      	ldr	r3, [pc, #264]	; (8006d9c <pvPortMalloc+0x17c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d864      	bhi.n	8006d66 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c9c:	4b40      	ldr	r3, [pc, #256]	; (8006da0 <pvPortMalloc+0x180>)
 8006c9e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ca0:	4b3f      	ldr	r3, [pc, #252]	; (8006da0 <pvPortMalloc+0x180>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ca6:	e004      	b.n	8006cb2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d903      	bls.n	8006cc4 <pvPortMalloc+0xa4>
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1f1      	bne.n	8006ca8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cc4:	4b33      	ldr	r3, [pc, #204]	; (8006d94 <pvPortMalloc+0x174>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d04b      	beq.n	8006d66 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2208      	movs	r2, #8
 8006cd4:	4413      	add	r3, r2
 8006cd6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	1ad2      	subs	r2, r2, r3
 8006ce8:	2308      	movs	r3, #8
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d91f      	bls.n	8006d30 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <pvPortMalloc+0xf8>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	613b      	str	r3, [r7, #16]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	1ad2      	subs	r2, r2, r3
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d2a:	69b8      	ldr	r0, [r7, #24]
 8006d2c:	f000 f8f8 	bl	8006f20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d30:	4b1a      	ldr	r3, [pc, #104]	; (8006d9c <pvPortMalloc+0x17c>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	4a18      	ldr	r2, [pc, #96]	; (8006d9c <pvPortMalloc+0x17c>)
 8006d3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d3e:	4b17      	ldr	r3, [pc, #92]	; (8006d9c <pvPortMalloc+0x17c>)
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4b18      	ldr	r3, [pc, #96]	; (8006da4 <pvPortMalloc+0x184>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d203      	bcs.n	8006d52 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d4a:	4b14      	ldr	r3, [pc, #80]	; (8006d9c <pvPortMalloc+0x17c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a15      	ldr	r2, [pc, #84]	; (8006da4 <pvPortMalloc+0x184>)
 8006d50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	4b10      	ldr	r3, [pc, #64]	; (8006d98 <pvPortMalloc+0x178>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d66:	f7ff faab 	bl	80062c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	f003 0307 	and.w	r3, r3, #7
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <pvPortMalloc+0x16a>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	60fb      	str	r3, [r7, #12]
}
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <pvPortMalloc+0x168>
	return pvReturn;
 8006d8a:	69fb      	ldr	r3, [r7, #28]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3728      	adds	r7, #40	; 0x28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	200023b4 	.word	0x200023b4
 8006d98:	200023c0 	.word	0x200023c0
 8006d9c:	200023b8 	.word	0x200023b8
 8006da0:	200023ac 	.word	0x200023ac
 8006da4:	200023bc 	.word	0x200023bc

08006da8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d048      	beq.n	8006e4c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dba:	2308      	movs	r3, #8
 8006dbc:	425b      	negs	r3, r3
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	4b21      	ldr	r3, [pc, #132]	; (8006e54 <vPortFree+0xac>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10a      	bne.n	8006dec <vPortFree+0x44>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	60fb      	str	r3, [r7, #12]
}
 8006de8:	bf00      	nop
 8006dea:	e7fe      	b.n	8006dea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <vPortFree+0x62>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	60bb      	str	r3, [r7, #8]
}
 8006e06:	bf00      	nop
 8006e08:	e7fe      	b.n	8006e08 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	4b11      	ldr	r3, [pc, #68]	; (8006e54 <vPortFree+0xac>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4013      	ands	r3, r2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d019      	beq.n	8006e4c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d115      	bne.n	8006e4c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <vPortFree+0xac>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	401a      	ands	r2, r3
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e30:	f7ff fa38 	bl	80062a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	4b07      	ldr	r3, [pc, #28]	; (8006e58 <vPortFree+0xb0>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	4a06      	ldr	r2, [pc, #24]	; (8006e58 <vPortFree+0xb0>)
 8006e40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e42:	6938      	ldr	r0, [r7, #16]
 8006e44:	f000 f86c 	bl	8006f20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e48:	f7ff fa3a 	bl	80062c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e4c:	bf00      	nop
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	200023c0 	.word	0x200023c0
 8006e58:	200023b8 	.word	0x200023b8

08006e5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e68:	4b27      	ldr	r3, [pc, #156]	; (8006f08 <prvHeapInit+0xac>)
 8006e6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f003 0307 	and.w	r3, r3, #7
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00c      	beq.n	8006e90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3307      	adds	r3, #7
 8006e7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 0307 	bic.w	r3, r3, #7
 8006e82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	4a1f      	ldr	r2, [pc, #124]	; (8006f08 <prvHeapInit+0xac>)
 8006e8c:	4413      	add	r3, r2
 8006e8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e94:	4a1d      	ldr	r2, [pc, #116]	; (8006f0c <prvHeapInit+0xb0>)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e9a:	4b1c      	ldr	r3, [pc, #112]	; (8006f0c <prvHeapInit+0xb0>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	1a9b      	subs	r3, r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0307 	bic.w	r3, r3, #7
 8006eb6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4a15      	ldr	r2, [pc, #84]	; (8006f10 <prvHeapInit+0xb4>)
 8006ebc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ebe:	4b14      	ldr	r3, [pc, #80]	; (8006f10 <prvHeapInit+0xb4>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ec6:	4b12      	ldr	r3, [pc, #72]	; (8006f10 <prvHeapInit+0xb4>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	1ad2      	subs	r2, r2, r3
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006edc:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <prvHeapInit+0xb4>)
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	4a0a      	ldr	r2, [pc, #40]	; (8006f14 <prvHeapInit+0xb8>)
 8006eea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	4a09      	ldr	r2, [pc, #36]	; (8006f18 <prvHeapInit+0xbc>)
 8006ef2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ef4:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <prvHeapInit+0xc0>)
 8006ef6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006efa:	601a      	str	r2, [r3, #0]
}
 8006efc:	bf00      	nop
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bc80      	pop	{r7}
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	200017ac 	.word	0x200017ac
 8006f0c:	200023ac 	.word	0x200023ac
 8006f10:	200023b4 	.word	0x200023b4
 8006f14:	200023bc 	.word	0x200023bc
 8006f18:	200023b8 	.word	0x200023b8
 8006f1c:	200023c0 	.word	0x200023c0

08006f20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f28:	4b27      	ldr	r3, [pc, #156]	; (8006fc8 <prvInsertBlockIntoFreeList+0xa8>)
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	e002      	b.n	8006f34 <prvInsertBlockIntoFreeList+0x14>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d8f7      	bhi.n	8006f2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	4413      	add	r3, r2
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d108      	bne.n	8006f62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	441a      	add	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	441a      	add	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d118      	bne.n	8006fa8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	4b14      	ldr	r3, [pc, #80]	; (8006fcc <prvInsertBlockIntoFreeList+0xac>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d00d      	beq.n	8006f9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	441a      	add	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	e008      	b.n	8006fb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f9e:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <prvInsertBlockIntoFreeList+0xac>)
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	e003      	b.n	8006fb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d002      	beq.n	8006fbe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fbe:	bf00      	nop
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr
 8006fc8:	200023ac 	.word	0x200023ac
 8006fcc:	200023b4 	.word	0x200023b4

08006fd0 <__errno>:
 8006fd0:	4b01      	ldr	r3, [pc, #4]	; (8006fd8 <__errno+0x8>)
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20000024 	.word	0x20000024

08006fdc <std>:
 8006fdc:	2300      	movs	r3, #0
 8006fde:	b510      	push	{r4, lr}
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8006fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fea:	6083      	str	r3, [r0, #8]
 8006fec:	8181      	strh	r1, [r0, #12]
 8006fee:	6643      	str	r3, [r0, #100]	; 0x64
 8006ff0:	81c2      	strh	r2, [r0, #14]
 8006ff2:	6183      	str	r3, [r0, #24]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	2208      	movs	r2, #8
 8006ff8:	305c      	adds	r0, #92	; 0x5c
 8006ffa:	f000 f91a 	bl	8007232 <memset>
 8006ffe:	4b05      	ldr	r3, [pc, #20]	; (8007014 <std+0x38>)
 8007000:	6224      	str	r4, [r4, #32]
 8007002:	6263      	str	r3, [r4, #36]	; 0x24
 8007004:	4b04      	ldr	r3, [pc, #16]	; (8007018 <std+0x3c>)
 8007006:	62a3      	str	r3, [r4, #40]	; 0x28
 8007008:	4b04      	ldr	r3, [pc, #16]	; (800701c <std+0x40>)
 800700a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800700c:	4b04      	ldr	r3, [pc, #16]	; (8007020 <std+0x44>)
 800700e:	6323      	str	r3, [r4, #48]	; 0x30
 8007010:	bd10      	pop	{r4, pc}
 8007012:	bf00      	nop
 8007014:	08007d51 	.word	0x08007d51
 8007018:	08007d73 	.word	0x08007d73
 800701c:	08007dab 	.word	0x08007dab
 8007020:	08007dcf 	.word	0x08007dcf

08007024 <_cleanup_r>:
 8007024:	4901      	ldr	r1, [pc, #4]	; (800702c <_cleanup_r+0x8>)
 8007026:	f000 b8af 	b.w	8007188 <_fwalk_reent>
 800702a:	bf00      	nop
 800702c:	08008c19 	.word	0x08008c19

08007030 <__sfmoreglue>:
 8007030:	2268      	movs	r2, #104	; 0x68
 8007032:	b570      	push	{r4, r5, r6, lr}
 8007034:	1e4d      	subs	r5, r1, #1
 8007036:	4355      	muls	r5, r2
 8007038:	460e      	mov	r6, r1
 800703a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800703e:	f000 f921 	bl	8007284 <_malloc_r>
 8007042:	4604      	mov	r4, r0
 8007044:	b140      	cbz	r0, 8007058 <__sfmoreglue+0x28>
 8007046:	2100      	movs	r1, #0
 8007048:	e9c0 1600 	strd	r1, r6, [r0]
 800704c:	300c      	adds	r0, #12
 800704e:	60a0      	str	r0, [r4, #8]
 8007050:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007054:	f000 f8ed 	bl	8007232 <memset>
 8007058:	4620      	mov	r0, r4
 800705a:	bd70      	pop	{r4, r5, r6, pc}

0800705c <__sfp_lock_acquire>:
 800705c:	4801      	ldr	r0, [pc, #4]	; (8007064 <__sfp_lock_acquire+0x8>)
 800705e:	f000 b8d8 	b.w	8007212 <__retarget_lock_acquire_recursive>
 8007062:	bf00      	nop
 8007064:	200023c5 	.word	0x200023c5

08007068 <__sfp_lock_release>:
 8007068:	4801      	ldr	r0, [pc, #4]	; (8007070 <__sfp_lock_release+0x8>)
 800706a:	f000 b8d3 	b.w	8007214 <__retarget_lock_release_recursive>
 800706e:	bf00      	nop
 8007070:	200023c5 	.word	0x200023c5

08007074 <__sinit_lock_acquire>:
 8007074:	4801      	ldr	r0, [pc, #4]	; (800707c <__sinit_lock_acquire+0x8>)
 8007076:	f000 b8cc 	b.w	8007212 <__retarget_lock_acquire_recursive>
 800707a:	bf00      	nop
 800707c:	200023c6 	.word	0x200023c6

08007080 <__sinit_lock_release>:
 8007080:	4801      	ldr	r0, [pc, #4]	; (8007088 <__sinit_lock_release+0x8>)
 8007082:	f000 b8c7 	b.w	8007214 <__retarget_lock_release_recursive>
 8007086:	bf00      	nop
 8007088:	200023c6 	.word	0x200023c6

0800708c <__sinit>:
 800708c:	b510      	push	{r4, lr}
 800708e:	4604      	mov	r4, r0
 8007090:	f7ff fff0 	bl	8007074 <__sinit_lock_acquire>
 8007094:	69a3      	ldr	r3, [r4, #24]
 8007096:	b11b      	cbz	r3, 80070a0 <__sinit+0x14>
 8007098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800709c:	f7ff bff0 	b.w	8007080 <__sinit_lock_release>
 80070a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070a4:	6523      	str	r3, [r4, #80]	; 0x50
 80070a6:	4b13      	ldr	r3, [pc, #76]	; (80070f4 <__sinit+0x68>)
 80070a8:	4a13      	ldr	r2, [pc, #76]	; (80070f8 <__sinit+0x6c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80070ae:	42a3      	cmp	r3, r4
 80070b0:	bf08      	it	eq
 80070b2:	2301      	moveq	r3, #1
 80070b4:	4620      	mov	r0, r4
 80070b6:	bf08      	it	eq
 80070b8:	61a3      	streq	r3, [r4, #24]
 80070ba:	f000 f81f 	bl	80070fc <__sfp>
 80070be:	6060      	str	r0, [r4, #4]
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 f81b 	bl	80070fc <__sfp>
 80070c6:	60a0      	str	r0, [r4, #8]
 80070c8:	4620      	mov	r0, r4
 80070ca:	f000 f817 	bl	80070fc <__sfp>
 80070ce:	2200      	movs	r2, #0
 80070d0:	2104      	movs	r1, #4
 80070d2:	60e0      	str	r0, [r4, #12]
 80070d4:	6860      	ldr	r0, [r4, #4]
 80070d6:	f7ff ff81 	bl	8006fdc <std>
 80070da:	2201      	movs	r2, #1
 80070dc:	2109      	movs	r1, #9
 80070de:	68a0      	ldr	r0, [r4, #8]
 80070e0:	f7ff ff7c 	bl	8006fdc <std>
 80070e4:	2202      	movs	r2, #2
 80070e6:	2112      	movs	r1, #18
 80070e8:	68e0      	ldr	r0, [r4, #12]
 80070ea:	f7ff ff77 	bl	8006fdc <std>
 80070ee:	2301      	movs	r3, #1
 80070f0:	61a3      	str	r3, [r4, #24]
 80070f2:	e7d1      	b.n	8007098 <__sinit+0xc>
 80070f4:	08009c88 	.word	0x08009c88
 80070f8:	08007025 	.word	0x08007025

080070fc <__sfp>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	4607      	mov	r7, r0
 8007100:	f7ff ffac 	bl	800705c <__sfp_lock_acquire>
 8007104:	4b1e      	ldr	r3, [pc, #120]	; (8007180 <__sfp+0x84>)
 8007106:	681e      	ldr	r6, [r3, #0]
 8007108:	69b3      	ldr	r3, [r6, #24]
 800710a:	b913      	cbnz	r3, 8007112 <__sfp+0x16>
 800710c:	4630      	mov	r0, r6
 800710e:	f7ff ffbd 	bl	800708c <__sinit>
 8007112:	3648      	adds	r6, #72	; 0x48
 8007114:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007118:	3b01      	subs	r3, #1
 800711a:	d503      	bpl.n	8007124 <__sfp+0x28>
 800711c:	6833      	ldr	r3, [r6, #0]
 800711e:	b30b      	cbz	r3, 8007164 <__sfp+0x68>
 8007120:	6836      	ldr	r6, [r6, #0]
 8007122:	e7f7      	b.n	8007114 <__sfp+0x18>
 8007124:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007128:	b9d5      	cbnz	r5, 8007160 <__sfp+0x64>
 800712a:	4b16      	ldr	r3, [pc, #88]	; (8007184 <__sfp+0x88>)
 800712c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007130:	60e3      	str	r3, [r4, #12]
 8007132:	6665      	str	r5, [r4, #100]	; 0x64
 8007134:	f000 f86c 	bl	8007210 <__retarget_lock_init_recursive>
 8007138:	f7ff ff96 	bl	8007068 <__sfp_lock_release>
 800713c:	2208      	movs	r2, #8
 800713e:	4629      	mov	r1, r5
 8007140:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007144:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007148:	6025      	str	r5, [r4, #0]
 800714a:	61a5      	str	r5, [r4, #24]
 800714c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007150:	f000 f86f 	bl	8007232 <memset>
 8007154:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007158:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800715c:	4620      	mov	r0, r4
 800715e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007160:	3468      	adds	r4, #104	; 0x68
 8007162:	e7d9      	b.n	8007118 <__sfp+0x1c>
 8007164:	2104      	movs	r1, #4
 8007166:	4638      	mov	r0, r7
 8007168:	f7ff ff62 	bl	8007030 <__sfmoreglue>
 800716c:	4604      	mov	r4, r0
 800716e:	6030      	str	r0, [r6, #0]
 8007170:	2800      	cmp	r0, #0
 8007172:	d1d5      	bne.n	8007120 <__sfp+0x24>
 8007174:	f7ff ff78 	bl	8007068 <__sfp_lock_release>
 8007178:	230c      	movs	r3, #12
 800717a:	603b      	str	r3, [r7, #0]
 800717c:	e7ee      	b.n	800715c <__sfp+0x60>
 800717e:	bf00      	nop
 8007180:	08009c88 	.word	0x08009c88
 8007184:	ffff0001 	.word	0xffff0001

08007188 <_fwalk_reent>:
 8007188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800718c:	4606      	mov	r6, r0
 800718e:	4688      	mov	r8, r1
 8007190:	2700      	movs	r7, #0
 8007192:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007196:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800719a:	f1b9 0901 	subs.w	r9, r9, #1
 800719e:	d505      	bpl.n	80071ac <_fwalk_reent+0x24>
 80071a0:	6824      	ldr	r4, [r4, #0]
 80071a2:	2c00      	cmp	r4, #0
 80071a4:	d1f7      	bne.n	8007196 <_fwalk_reent+0xe>
 80071a6:	4638      	mov	r0, r7
 80071a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ac:	89ab      	ldrh	r3, [r5, #12]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d907      	bls.n	80071c2 <_fwalk_reent+0x3a>
 80071b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071b6:	3301      	adds	r3, #1
 80071b8:	d003      	beq.n	80071c2 <_fwalk_reent+0x3a>
 80071ba:	4629      	mov	r1, r5
 80071bc:	4630      	mov	r0, r6
 80071be:	47c0      	blx	r8
 80071c0:	4307      	orrs	r7, r0
 80071c2:	3568      	adds	r5, #104	; 0x68
 80071c4:	e7e9      	b.n	800719a <_fwalk_reent+0x12>
	...

080071c8 <__libc_init_array>:
 80071c8:	b570      	push	{r4, r5, r6, lr}
 80071ca:	2600      	movs	r6, #0
 80071cc:	4d0c      	ldr	r5, [pc, #48]	; (8007200 <__libc_init_array+0x38>)
 80071ce:	4c0d      	ldr	r4, [pc, #52]	; (8007204 <__libc_init_array+0x3c>)
 80071d0:	1b64      	subs	r4, r4, r5
 80071d2:	10a4      	asrs	r4, r4, #2
 80071d4:	42a6      	cmp	r6, r4
 80071d6:	d109      	bne.n	80071ec <__libc_init_array+0x24>
 80071d8:	f002 fcbc 	bl	8009b54 <_init>
 80071dc:	2600      	movs	r6, #0
 80071de:	4d0a      	ldr	r5, [pc, #40]	; (8007208 <__libc_init_array+0x40>)
 80071e0:	4c0a      	ldr	r4, [pc, #40]	; (800720c <__libc_init_array+0x44>)
 80071e2:	1b64      	subs	r4, r4, r5
 80071e4:	10a4      	asrs	r4, r4, #2
 80071e6:	42a6      	cmp	r6, r4
 80071e8:	d105      	bne.n	80071f6 <__libc_init_array+0x2e>
 80071ea:	bd70      	pop	{r4, r5, r6, pc}
 80071ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f0:	4798      	blx	r3
 80071f2:	3601      	adds	r6, #1
 80071f4:	e7ee      	b.n	80071d4 <__libc_init_array+0xc>
 80071f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071fa:	4798      	blx	r3
 80071fc:	3601      	adds	r6, #1
 80071fe:	e7f2      	b.n	80071e6 <__libc_init_array+0x1e>
 8007200:	0800a004 	.word	0x0800a004
 8007204:	0800a004 	.word	0x0800a004
 8007208:	0800a004 	.word	0x0800a004
 800720c:	0800a008 	.word	0x0800a008

08007210 <__retarget_lock_init_recursive>:
 8007210:	4770      	bx	lr

08007212 <__retarget_lock_acquire_recursive>:
 8007212:	4770      	bx	lr

08007214 <__retarget_lock_release_recursive>:
 8007214:	4770      	bx	lr

08007216 <memcpy>:
 8007216:	440a      	add	r2, r1
 8007218:	4291      	cmp	r1, r2
 800721a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800721e:	d100      	bne.n	8007222 <memcpy+0xc>
 8007220:	4770      	bx	lr
 8007222:	b510      	push	{r4, lr}
 8007224:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007228:	4291      	cmp	r1, r2
 800722a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800722e:	d1f9      	bne.n	8007224 <memcpy+0xe>
 8007230:	bd10      	pop	{r4, pc}

08007232 <memset>:
 8007232:	4603      	mov	r3, r0
 8007234:	4402      	add	r2, r0
 8007236:	4293      	cmp	r3, r2
 8007238:	d100      	bne.n	800723c <memset+0xa>
 800723a:	4770      	bx	lr
 800723c:	f803 1b01 	strb.w	r1, [r3], #1
 8007240:	e7f9      	b.n	8007236 <memset+0x4>
	...

08007244 <sbrk_aligned>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	4e0e      	ldr	r6, [pc, #56]	; (8007280 <sbrk_aligned+0x3c>)
 8007248:	460c      	mov	r4, r1
 800724a:	6831      	ldr	r1, [r6, #0]
 800724c:	4605      	mov	r5, r0
 800724e:	b911      	cbnz	r1, 8007256 <sbrk_aligned+0x12>
 8007250:	f000 fd6e 	bl	8007d30 <_sbrk_r>
 8007254:	6030      	str	r0, [r6, #0]
 8007256:	4621      	mov	r1, r4
 8007258:	4628      	mov	r0, r5
 800725a:	f000 fd69 	bl	8007d30 <_sbrk_r>
 800725e:	1c43      	adds	r3, r0, #1
 8007260:	d00a      	beq.n	8007278 <sbrk_aligned+0x34>
 8007262:	1cc4      	adds	r4, r0, #3
 8007264:	f024 0403 	bic.w	r4, r4, #3
 8007268:	42a0      	cmp	r0, r4
 800726a:	d007      	beq.n	800727c <sbrk_aligned+0x38>
 800726c:	1a21      	subs	r1, r4, r0
 800726e:	4628      	mov	r0, r5
 8007270:	f000 fd5e 	bl	8007d30 <_sbrk_r>
 8007274:	3001      	adds	r0, #1
 8007276:	d101      	bne.n	800727c <sbrk_aligned+0x38>
 8007278:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800727c:	4620      	mov	r0, r4
 800727e:	bd70      	pop	{r4, r5, r6, pc}
 8007280:	200023cc 	.word	0x200023cc

08007284 <_malloc_r>:
 8007284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007288:	1ccd      	adds	r5, r1, #3
 800728a:	f025 0503 	bic.w	r5, r5, #3
 800728e:	3508      	adds	r5, #8
 8007290:	2d0c      	cmp	r5, #12
 8007292:	bf38      	it	cc
 8007294:	250c      	movcc	r5, #12
 8007296:	2d00      	cmp	r5, #0
 8007298:	4607      	mov	r7, r0
 800729a:	db01      	blt.n	80072a0 <_malloc_r+0x1c>
 800729c:	42a9      	cmp	r1, r5
 800729e:	d905      	bls.n	80072ac <_malloc_r+0x28>
 80072a0:	230c      	movs	r3, #12
 80072a2:	2600      	movs	r6, #0
 80072a4:	603b      	str	r3, [r7, #0]
 80072a6:	4630      	mov	r0, r6
 80072a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ac:	4e2e      	ldr	r6, [pc, #184]	; (8007368 <_malloc_r+0xe4>)
 80072ae:	f001 fd1b 	bl	8008ce8 <__malloc_lock>
 80072b2:	6833      	ldr	r3, [r6, #0]
 80072b4:	461c      	mov	r4, r3
 80072b6:	bb34      	cbnz	r4, 8007306 <_malloc_r+0x82>
 80072b8:	4629      	mov	r1, r5
 80072ba:	4638      	mov	r0, r7
 80072bc:	f7ff ffc2 	bl	8007244 <sbrk_aligned>
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	4604      	mov	r4, r0
 80072c4:	d14d      	bne.n	8007362 <_malloc_r+0xde>
 80072c6:	6834      	ldr	r4, [r6, #0]
 80072c8:	4626      	mov	r6, r4
 80072ca:	2e00      	cmp	r6, #0
 80072cc:	d140      	bne.n	8007350 <_malloc_r+0xcc>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	4631      	mov	r1, r6
 80072d2:	4638      	mov	r0, r7
 80072d4:	eb04 0803 	add.w	r8, r4, r3
 80072d8:	f000 fd2a 	bl	8007d30 <_sbrk_r>
 80072dc:	4580      	cmp	r8, r0
 80072de:	d13a      	bne.n	8007356 <_malloc_r+0xd2>
 80072e0:	6821      	ldr	r1, [r4, #0]
 80072e2:	3503      	adds	r5, #3
 80072e4:	1a6d      	subs	r5, r5, r1
 80072e6:	f025 0503 	bic.w	r5, r5, #3
 80072ea:	3508      	adds	r5, #8
 80072ec:	2d0c      	cmp	r5, #12
 80072ee:	bf38      	it	cc
 80072f0:	250c      	movcc	r5, #12
 80072f2:	4638      	mov	r0, r7
 80072f4:	4629      	mov	r1, r5
 80072f6:	f7ff ffa5 	bl	8007244 <sbrk_aligned>
 80072fa:	3001      	adds	r0, #1
 80072fc:	d02b      	beq.n	8007356 <_malloc_r+0xd2>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	442b      	add	r3, r5
 8007302:	6023      	str	r3, [r4, #0]
 8007304:	e00e      	b.n	8007324 <_malloc_r+0xa0>
 8007306:	6822      	ldr	r2, [r4, #0]
 8007308:	1b52      	subs	r2, r2, r5
 800730a:	d41e      	bmi.n	800734a <_malloc_r+0xc6>
 800730c:	2a0b      	cmp	r2, #11
 800730e:	d916      	bls.n	800733e <_malloc_r+0xba>
 8007310:	1961      	adds	r1, r4, r5
 8007312:	42a3      	cmp	r3, r4
 8007314:	6025      	str	r5, [r4, #0]
 8007316:	bf18      	it	ne
 8007318:	6059      	strne	r1, [r3, #4]
 800731a:	6863      	ldr	r3, [r4, #4]
 800731c:	bf08      	it	eq
 800731e:	6031      	streq	r1, [r6, #0]
 8007320:	5162      	str	r2, [r4, r5]
 8007322:	604b      	str	r3, [r1, #4]
 8007324:	4638      	mov	r0, r7
 8007326:	f104 060b 	add.w	r6, r4, #11
 800732a:	f001 fce3 	bl	8008cf4 <__malloc_unlock>
 800732e:	f026 0607 	bic.w	r6, r6, #7
 8007332:	1d23      	adds	r3, r4, #4
 8007334:	1af2      	subs	r2, r6, r3
 8007336:	d0b6      	beq.n	80072a6 <_malloc_r+0x22>
 8007338:	1b9b      	subs	r3, r3, r6
 800733a:	50a3      	str	r3, [r4, r2]
 800733c:	e7b3      	b.n	80072a6 <_malloc_r+0x22>
 800733e:	6862      	ldr	r2, [r4, #4]
 8007340:	42a3      	cmp	r3, r4
 8007342:	bf0c      	ite	eq
 8007344:	6032      	streq	r2, [r6, #0]
 8007346:	605a      	strne	r2, [r3, #4]
 8007348:	e7ec      	b.n	8007324 <_malloc_r+0xa0>
 800734a:	4623      	mov	r3, r4
 800734c:	6864      	ldr	r4, [r4, #4]
 800734e:	e7b2      	b.n	80072b6 <_malloc_r+0x32>
 8007350:	4634      	mov	r4, r6
 8007352:	6876      	ldr	r6, [r6, #4]
 8007354:	e7b9      	b.n	80072ca <_malloc_r+0x46>
 8007356:	230c      	movs	r3, #12
 8007358:	4638      	mov	r0, r7
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	f001 fcca 	bl	8008cf4 <__malloc_unlock>
 8007360:	e7a1      	b.n	80072a6 <_malloc_r+0x22>
 8007362:	6025      	str	r5, [r4, #0]
 8007364:	e7de      	b.n	8007324 <_malloc_r+0xa0>
 8007366:	bf00      	nop
 8007368:	200023c8 	.word	0x200023c8

0800736c <__cvt>:
 800736c:	2b00      	cmp	r3, #0
 800736e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007372:	461f      	mov	r7, r3
 8007374:	bfbb      	ittet	lt
 8007376:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800737a:	461f      	movlt	r7, r3
 800737c:	2300      	movge	r3, #0
 800737e:	232d      	movlt	r3, #45	; 0x2d
 8007380:	b088      	sub	sp, #32
 8007382:	4614      	mov	r4, r2
 8007384:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007386:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007388:	7013      	strb	r3, [r2, #0]
 800738a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800738c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007390:	f023 0820 	bic.w	r8, r3, #32
 8007394:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007398:	d005      	beq.n	80073a6 <__cvt+0x3a>
 800739a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800739e:	d100      	bne.n	80073a2 <__cvt+0x36>
 80073a0:	3501      	adds	r5, #1
 80073a2:	2302      	movs	r3, #2
 80073a4:	e000      	b.n	80073a8 <__cvt+0x3c>
 80073a6:	2303      	movs	r3, #3
 80073a8:	aa07      	add	r2, sp, #28
 80073aa:	9204      	str	r2, [sp, #16]
 80073ac:	aa06      	add	r2, sp, #24
 80073ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80073b2:	e9cd 3500 	strd	r3, r5, [sp]
 80073b6:	4622      	mov	r2, r4
 80073b8:	463b      	mov	r3, r7
 80073ba:	f000 fdbd 	bl	8007f38 <_dtoa_r>
 80073be:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80073c2:	4606      	mov	r6, r0
 80073c4:	d102      	bne.n	80073cc <__cvt+0x60>
 80073c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073c8:	07db      	lsls	r3, r3, #31
 80073ca:	d522      	bpl.n	8007412 <__cvt+0xa6>
 80073cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073d0:	eb06 0905 	add.w	r9, r6, r5
 80073d4:	d110      	bne.n	80073f8 <__cvt+0x8c>
 80073d6:	7833      	ldrb	r3, [r6, #0]
 80073d8:	2b30      	cmp	r3, #48	; 0x30
 80073da:	d10a      	bne.n	80073f2 <__cvt+0x86>
 80073dc:	2200      	movs	r2, #0
 80073de:	2300      	movs	r3, #0
 80073e0:	4620      	mov	r0, r4
 80073e2:	4639      	mov	r1, r7
 80073e4:	f7f9 fae0 	bl	80009a8 <__aeabi_dcmpeq>
 80073e8:	b918      	cbnz	r0, 80073f2 <__cvt+0x86>
 80073ea:	f1c5 0501 	rsb	r5, r5, #1
 80073ee:	f8ca 5000 	str.w	r5, [sl]
 80073f2:	f8da 3000 	ldr.w	r3, [sl]
 80073f6:	4499      	add	r9, r3
 80073f8:	2200      	movs	r2, #0
 80073fa:	2300      	movs	r3, #0
 80073fc:	4620      	mov	r0, r4
 80073fe:	4639      	mov	r1, r7
 8007400:	f7f9 fad2 	bl	80009a8 <__aeabi_dcmpeq>
 8007404:	b108      	cbz	r0, 800740a <__cvt+0x9e>
 8007406:	f8cd 901c 	str.w	r9, [sp, #28]
 800740a:	2230      	movs	r2, #48	; 0x30
 800740c:	9b07      	ldr	r3, [sp, #28]
 800740e:	454b      	cmp	r3, r9
 8007410:	d307      	bcc.n	8007422 <__cvt+0xb6>
 8007412:	4630      	mov	r0, r6
 8007414:	9b07      	ldr	r3, [sp, #28]
 8007416:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007418:	1b9b      	subs	r3, r3, r6
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	b008      	add	sp, #32
 800741e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007422:	1c59      	adds	r1, r3, #1
 8007424:	9107      	str	r1, [sp, #28]
 8007426:	701a      	strb	r2, [r3, #0]
 8007428:	e7f0      	b.n	800740c <__cvt+0xa0>

0800742a <__exponent>:
 800742a:	4603      	mov	r3, r0
 800742c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800742e:	2900      	cmp	r1, #0
 8007430:	f803 2b02 	strb.w	r2, [r3], #2
 8007434:	bfb6      	itet	lt
 8007436:	222d      	movlt	r2, #45	; 0x2d
 8007438:	222b      	movge	r2, #43	; 0x2b
 800743a:	4249      	neglt	r1, r1
 800743c:	2909      	cmp	r1, #9
 800743e:	7042      	strb	r2, [r0, #1]
 8007440:	dd2b      	ble.n	800749a <__exponent+0x70>
 8007442:	f10d 0407 	add.w	r4, sp, #7
 8007446:	46a4      	mov	ip, r4
 8007448:	270a      	movs	r7, #10
 800744a:	fb91 f6f7 	sdiv	r6, r1, r7
 800744e:	460a      	mov	r2, r1
 8007450:	46a6      	mov	lr, r4
 8007452:	fb07 1516 	mls	r5, r7, r6, r1
 8007456:	2a63      	cmp	r2, #99	; 0x63
 8007458:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800745c:	4631      	mov	r1, r6
 800745e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007462:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007466:	dcf0      	bgt.n	800744a <__exponent+0x20>
 8007468:	3130      	adds	r1, #48	; 0x30
 800746a:	f1ae 0502 	sub.w	r5, lr, #2
 800746e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007472:	4629      	mov	r1, r5
 8007474:	1c44      	adds	r4, r0, #1
 8007476:	4561      	cmp	r1, ip
 8007478:	d30a      	bcc.n	8007490 <__exponent+0x66>
 800747a:	f10d 0209 	add.w	r2, sp, #9
 800747e:	eba2 020e 	sub.w	r2, r2, lr
 8007482:	4565      	cmp	r5, ip
 8007484:	bf88      	it	hi
 8007486:	2200      	movhi	r2, #0
 8007488:	4413      	add	r3, r2
 800748a:	1a18      	subs	r0, r3, r0
 800748c:	b003      	add	sp, #12
 800748e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007490:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007494:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007498:	e7ed      	b.n	8007476 <__exponent+0x4c>
 800749a:	2330      	movs	r3, #48	; 0x30
 800749c:	3130      	adds	r1, #48	; 0x30
 800749e:	7083      	strb	r3, [r0, #2]
 80074a0:	70c1      	strb	r1, [r0, #3]
 80074a2:	1d03      	adds	r3, r0, #4
 80074a4:	e7f1      	b.n	800748a <__exponent+0x60>
	...

080074a8 <_printf_float>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	b091      	sub	sp, #68	; 0x44
 80074ae:	460c      	mov	r4, r1
 80074b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80074b4:	4616      	mov	r6, r2
 80074b6:	461f      	mov	r7, r3
 80074b8:	4605      	mov	r5, r0
 80074ba:	f001 fbe9 	bl	8008c90 <_localeconv_r>
 80074be:	6803      	ldr	r3, [r0, #0]
 80074c0:	4618      	mov	r0, r3
 80074c2:	9309      	str	r3, [sp, #36]	; 0x24
 80074c4:	f7f8 fe44 	bl	8000150 <strlen>
 80074c8:	2300      	movs	r3, #0
 80074ca:	930e      	str	r3, [sp, #56]	; 0x38
 80074cc:	f8d8 3000 	ldr.w	r3, [r8]
 80074d0:	900a      	str	r0, [sp, #40]	; 0x28
 80074d2:	3307      	adds	r3, #7
 80074d4:	f023 0307 	bic.w	r3, r3, #7
 80074d8:	f103 0208 	add.w	r2, r3, #8
 80074dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80074e0:	f8d4 b000 	ldr.w	fp, [r4]
 80074e4:	f8c8 2000 	str.w	r2, [r8]
 80074e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074f0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80074f4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80074f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074fe:	4640      	mov	r0, r8
 8007500:	4b9c      	ldr	r3, [pc, #624]	; (8007774 <_printf_float+0x2cc>)
 8007502:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007504:	f7f9 fa82 	bl	8000a0c <__aeabi_dcmpun>
 8007508:	bb70      	cbnz	r0, 8007568 <_printf_float+0xc0>
 800750a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800750e:	4640      	mov	r0, r8
 8007510:	4b98      	ldr	r3, [pc, #608]	; (8007774 <_printf_float+0x2cc>)
 8007512:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007514:	f7f9 fa5c 	bl	80009d0 <__aeabi_dcmple>
 8007518:	bb30      	cbnz	r0, 8007568 <_printf_float+0xc0>
 800751a:	2200      	movs	r2, #0
 800751c:	2300      	movs	r3, #0
 800751e:	4640      	mov	r0, r8
 8007520:	4651      	mov	r1, sl
 8007522:	f7f9 fa4b 	bl	80009bc <__aeabi_dcmplt>
 8007526:	b110      	cbz	r0, 800752e <_printf_float+0x86>
 8007528:	232d      	movs	r3, #45	; 0x2d
 800752a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800752e:	4b92      	ldr	r3, [pc, #584]	; (8007778 <_printf_float+0x2d0>)
 8007530:	4892      	ldr	r0, [pc, #584]	; (800777c <_printf_float+0x2d4>)
 8007532:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007536:	bf94      	ite	ls
 8007538:	4698      	movls	r8, r3
 800753a:	4680      	movhi	r8, r0
 800753c:	2303      	movs	r3, #3
 800753e:	f04f 0a00 	mov.w	sl, #0
 8007542:	6123      	str	r3, [r4, #16]
 8007544:	f02b 0304 	bic.w	r3, fp, #4
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	4633      	mov	r3, r6
 800754c:	4621      	mov	r1, r4
 800754e:	4628      	mov	r0, r5
 8007550:	9700      	str	r7, [sp, #0]
 8007552:	aa0f      	add	r2, sp, #60	; 0x3c
 8007554:	f000 f9d4 	bl	8007900 <_printf_common>
 8007558:	3001      	adds	r0, #1
 800755a:	f040 8090 	bne.w	800767e <_printf_float+0x1d6>
 800755e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007562:	b011      	add	sp, #68	; 0x44
 8007564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007568:	4642      	mov	r2, r8
 800756a:	4653      	mov	r3, sl
 800756c:	4640      	mov	r0, r8
 800756e:	4651      	mov	r1, sl
 8007570:	f7f9 fa4c 	bl	8000a0c <__aeabi_dcmpun>
 8007574:	b148      	cbz	r0, 800758a <_printf_float+0xe2>
 8007576:	f1ba 0f00 	cmp.w	sl, #0
 800757a:	bfb8      	it	lt
 800757c:	232d      	movlt	r3, #45	; 0x2d
 800757e:	4880      	ldr	r0, [pc, #512]	; (8007780 <_printf_float+0x2d8>)
 8007580:	bfb8      	it	lt
 8007582:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007586:	4b7f      	ldr	r3, [pc, #508]	; (8007784 <_printf_float+0x2dc>)
 8007588:	e7d3      	b.n	8007532 <_printf_float+0x8a>
 800758a:	6863      	ldr	r3, [r4, #4]
 800758c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	d142      	bne.n	800761a <_printf_float+0x172>
 8007594:	2306      	movs	r3, #6
 8007596:	6063      	str	r3, [r4, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	9206      	str	r2, [sp, #24]
 800759c:	aa0e      	add	r2, sp, #56	; 0x38
 800759e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80075a2:	aa0d      	add	r2, sp, #52	; 0x34
 80075a4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80075a8:	9203      	str	r2, [sp, #12]
 80075aa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80075ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80075b2:	6023      	str	r3, [r4, #0]
 80075b4:	6863      	ldr	r3, [r4, #4]
 80075b6:	4642      	mov	r2, r8
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	4628      	mov	r0, r5
 80075bc:	4653      	mov	r3, sl
 80075be:	910b      	str	r1, [sp, #44]	; 0x2c
 80075c0:	f7ff fed4 	bl	800736c <__cvt>
 80075c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075c6:	4680      	mov	r8, r0
 80075c8:	2947      	cmp	r1, #71	; 0x47
 80075ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80075cc:	d108      	bne.n	80075e0 <_printf_float+0x138>
 80075ce:	1cc8      	adds	r0, r1, #3
 80075d0:	db02      	blt.n	80075d8 <_printf_float+0x130>
 80075d2:	6863      	ldr	r3, [r4, #4]
 80075d4:	4299      	cmp	r1, r3
 80075d6:	dd40      	ble.n	800765a <_printf_float+0x1b2>
 80075d8:	f1a9 0902 	sub.w	r9, r9, #2
 80075dc:	fa5f f989 	uxtb.w	r9, r9
 80075e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80075e4:	d81f      	bhi.n	8007626 <_printf_float+0x17e>
 80075e6:	464a      	mov	r2, r9
 80075e8:	3901      	subs	r1, #1
 80075ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075ee:	910d      	str	r1, [sp, #52]	; 0x34
 80075f0:	f7ff ff1b 	bl	800742a <__exponent>
 80075f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075f6:	4682      	mov	sl, r0
 80075f8:	1813      	adds	r3, r2, r0
 80075fa:	2a01      	cmp	r2, #1
 80075fc:	6123      	str	r3, [r4, #16]
 80075fe:	dc02      	bgt.n	8007606 <_printf_float+0x15e>
 8007600:	6822      	ldr	r2, [r4, #0]
 8007602:	07d2      	lsls	r2, r2, #31
 8007604:	d501      	bpl.n	800760a <_printf_float+0x162>
 8007606:	3301      	adds	r3, #1
 8007608:	6123      	str	r3, [r4, #16]
 800760a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800760e:	2b00      	cmp	r3, #0
 8007610:	d09b      	beq.n	800754a <_printf_float+0xa2>
 8007612:	232d      	movs	r3, #45	; 0x2d
 8007614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007618:	e797      	b.n	800754a <_printf_float+0xa2>
 800761a:	2947      	cmp	r1, #71	; 0x47
 800761c:	d1bc      	bne.n	8007598 <_printf_float+0xf0>
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1ba      	bne.n	8007598 <_printf_float+0xf0>
 8007622:	2301      	movs	r3, #1
 8007624:	e7b7      	b.n	8007596 <_printf_float+0xee>
 8007626:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800762a:	d118      	bne.n	800765e <_printf_float+0x1b6>
 800762c:	2900      	cmp	r1, #0
 800762e:	6863      	ldr	r3, [r4, #4]
 8007630:	dd0b      	ble.n	800764a <_printf_float+0x1a2>
 8007632:	6121      	str	r1, [r4, #16]
 8007634:	b913      	cbnz	r3, 800763c <_printf_float+0x194>
 8007636:	6822      	ldr	r2, [r4, #0]
 8007638:	07d0      	lsls	r0, r2, #31
 800763a:	d502      	bpl.n	8007642 <_printf_float+0x19a>
 800763c:	3301      	adds	r3, #1
 800763e:	440b      	add	r3, r1
 8007640:	6123      	str	r3, [r4, #16]
 8007642:	f04f 0a00 	mov.w	sl, #0
 8007646:	65a1      	str	r1, [r4, #88]	; 0x58
 8007648:	e7df      	b.n	800760a <_printf_float+0x162>
 800764a:	b913      	cbnz	r3, 8007652 <_printf_float+0x1aa>
 800764c:	6822      	ldr	r2, [r4, #0]
 800764e:	07d2      	lsls	r2, r2, #31
 8007650:	d501      	bpl.n	8007656 <_printf_float+0x1ae>
 8007652:	3302      	adds	r3, #2
 8007654:	e7f4      	b.n	8007640 <_printf_float+0x198>
 8007656:	2301      	movs	r3, #1
 8007658:	e7f2      	b.n	8007640 <_printf_float+0x198>
 800765a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800765e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007660:	4299      	cmp	r1, r3
 8007662:	db05      	blt.n	8007670 <_printf_float+0x1c8>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	6121      	str	r1, [r4, #16]
 8007668:	07d8      	lsls	r0, r3, #31
 800766a:	d5ea      	bpl.n	8007642 <_printf_float+0x19a>
 800766c:	1c4b      	adds	r3, r1, #1
 800766e:	e7e7      	b.n	8007640 <_printf_float+0x198>
 8007670:	2900      	cmp	r1, #0
 8007672:	bfcc      	ite	gt
 8007674:	2201      	movgt	r2, #1
 8007676:	f1c1 0202 	rsble	r2, r1, #2
 800767a:	4413      	add	r3, r2
 800767c:	e7e0      	b.n	8007640 <_printf_float+0x198>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	055a      	lsls	r2, r3, #21
 8007682:	d407      	bmi.n	8007694 <_printf_float+0x1ec>
 8007684:	6923      	ldr	r3, [r4, #16]
 8007686:	4642      	mov	r2, r8
 8007688:	4631      	mov	r1, r6
 800768a:	4628      	mov	r0, r5
 800768c:	47b8      	blx	r7
 800768e:	3001      	adds	r0, #1
 8007690:	d12b      	bne.n	80076ea <_printf_float+0x242>
 8007692:	e764      	b.n	800755e <_printf_float+0xb6>
 8007694:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007698:	f240 80dd 	bls.w	8007856 <_printf_float+0x3ae>
 800769c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076a0:	2200      	movs	r2, #0
 80076a2:	2300      	movs	r3, #0
 80076a4:	f7f9 f980 	bl	80009a8 <__aeabi_dcmpeq>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d033      	beq.n	8007714 <_printf_float+0x26c>
 80076ac:	2301      	movs	r3, #1
 80076ae:	4631      	mov	r1, r6
 80076b0:	4628      	mov	r0, r5
 80076b2:	4a35      	ldr	r2, [pc, #212]	; (8007788 <_printf_float+0x2e0>)
 80076b4:	47b8      	blx	r7
 80076b6:	3001      	adds	r0, #1
 80076b8:	f43f af51 	beq.w	800755e <_printf_float+0xb6>
 80076bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80076c0:	429a      	cmp	r2, r3
 80076c2:	db02      	blt.n	80076ca <_printf_float+0x222>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	07d8      	lsls	r0, r3, #31
 80076c8:	d50f      	bpl.n	80076ea <_printf_float+0x242>
 80076ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076ce:	4631      	mov	r1, r6
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	f43f af42 	beq.w	800755e <_printf_float+0xb6>
 80076da:	f04f 0800 	mov.w	r8, #0
 80076de:	f104 091a 	add.w	r9, r4, #26
 80076e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076e4:	3b01      	subs	r3, #1
 80076e6:	4543      	cmp	r3, r8
 80076e8:	dc09      	bgt.n	80076fe <_printf_float+0x256>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	079b      	lsls	r3, r3, #30
 80076ee:	f100 8102 	bmi.w	80078f6 <_printf_float+0x44e>
 80076f2:	68e0      	ldr	r0, [r4, #12]
 80076f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076f6:	4298      	cmp	r0, r3
 80076f8:	bfb8      	it	lt
 80076fa:	4618      	movlt	r0, r3
 80076fc:	e731      	b.n	8007562 <_printf_float+0xba>
 80076fe:	2301      	movs	r3, #1
 8007700:	464a      	mov	r2, r9
 8007702:	4631      	mov	r1, r6
 8007704:	4628      	mov	r0, r5
 8007706:	47b8      	blx	r7
 8007708:	3001      	adds	r0, #1
 800770a:	f43f af28 	beq.w	800755e <_printf_float+0xb6>
 800770e:	f108 0801 	add.w	r8, r8, #1
 8007712:	e7e6      	b.n	80076e2 <_printf_float+0x23a>
 8007714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007716:	2b00      	cmp	r3, #0
 8007718:	dc38      	bgt.n	800778c <_printf_float+0x2e4>
 800771a:	2301      	movs	r3, #1
 800771c:	4631      	mov	r1, r6
 800771e:	4628      	mov	r0, r5
 8007720:	4a19      	ldr	r2, [pc, #100]	; (8007788 <_printf_float+0x2e0>)
 8007722:	47b8      	blx	r7
 8007724:	3001      	adds	r0, #1
 8007726:	f43f af1a 	beq.w	800755e <_printf_float+0xb6>
 800772a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800772e:	4313      	orrs	r3, r2
 8007730:	d102      	bne.n	8007738 <_printf_float+0x290>
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	07d9      	lsls	r1, r3, #31
 8007736:	d5d8      	bpl.n	80076ea <_printf_float+0x242>
 8007738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800773c:	4631      	mov	r1, r6
 800773e:	4628      	mov	r0, r5
 8007740:	47b8      	blx	r7
 8007742:	3001      	adds	r0, #1
 8007744:	f43f af0b 	beq.w	800755e <_printf_float+0xb6>
 8007748:	f04f 0900 	mov.w	r9, #0
 800774c:	f104 0a1a 	add.w	sl, r4, #26
 8007750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007752:	425b      	negs	r3, r3
 8007754:	454b      	cmp	r3, r9
 8007756:	dc01      	bgt.n	800775c <_printf_float+0x2b4>
 8007758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800775a:	e794      	b.n	8007686 <_printf_float+0x1de>
 800775c:	2301      	movs	r3, #1
 800775e:	4652      	mov	r2, sl
 8007760:	4631      	mov	r1, r6
 8007762:	4628      	mov	r0, r5
 8007764:	47b8      	blx	r7
 8007766:	3001      	adds	r0, #1
 8007768:	f43f aef9 	beq.w	800755e <_printf_float+0xb6>
 800776c:	f109 0901 	add.w	r9, r9, #1
 8007770:	e7ee      	b.n	8007750 <_printf_float+0x2a8>
 8007772:	bf00      	nop
 8007774:	7fefffff 	.word	0x7fefffff
 8007778:	08009c8c 	.word	0x08009c8c
 800777c:	08009c90 	.word	0x08009c90
 8007780:	08009c98 	.word	0x08009c98
 8007784:	08009c94 	.word	0x08009c94
 8007788:	08009c9c 	.word	0x08009c9c
 800778c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800778e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007790:	429a      	cmp	r2, r3
 8007792:	bfa8      	it	ge
 8007794:	461a      	movge	r2, r3
 8007796:	2a00      	cmp	r2, #0
 8007798:	4691      	mov	r9, r2
 800779a:	dc37      	bgt.n	800780c <_printf_float+0x364>
 800779c:	f04f 0b00 	mov.w	fp, #0
 80077a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077a4:	f104 021a 	add.w	r2, r4, #26
 80077a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80077ac:	ebaa 0309 	sub.w	r3, sl, r9
 80077b0:	455b      	cmp	r3, fp
 80077b2:	dc33      	bgt.n	800781c <_printf_float+0x374>
 80077b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80077b8:	429a      	cmp	r2, r3
 80077ba:	db3b      	blt.n	8007834 <_printf_float+0x38c>
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	07da      	lsls	r2, r3, #31
 80077c0:	d438      	bmi.n	8007834 <_printf_float+0x38c>
 80077c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80077c6:	eba3 020a 	sub.w	r2, r3, sl
 80077ca:	eba3 0901 	sub.w	r9, r3, r1
 80077ce:	4591      	cmp	r9, r2
 80077d0:	bfa8      	it	ge
 80077d2:	4691      	movge	r9, r2
 80077d4:	f1b9 0f00 	cmp.w	r9, #0
 80077d8:	dc34      	bgt.n	8007844 <_printf_float+0x39c>
 80077da:	f04f 0800 	mov.w	r8, #0
 80077de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077e2:	f104 0a1a 	add.w	sl, r4, #26
 80077e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80077ea:	1a9b      	subs	r3, r3, r2
 80077ec:	eba3 0309 	sub.w	r3, r3, r9
 80077f0:	4543      	cmp	r3, r8
 80077f2:	f77f af7a 	ble.w	80076ea <_printf_float+0x242>
 80077f6:	2301      	movs	r3, #1
 80077f8:	4652      	mov	r2, sl
 80077fa:	4631      	mov	r1, r6
 80077fc:	4628      	mov	r0, r5
 80077fe:	47b8      	blx	r7
 8007800:	3001      	adds	r0, #1
 8007802:	f43f aeac 	beq.w	800755e <_printf_float+0xb6>
 8007806:	f108 0801 	add.w	r8, r8, #1
 800780a:	e7ec      	b.n	80077e6 <_printf_float+0x33e>
 800780c:	4613      	mov	r3, r2
 800780e:	4631      	mov	r1, r6
 8007810:	4642      	mov	r2, r8
 8007812:	4628      	mov	r0, r5
 8007814:	47b8      	blx	r7
 8007816:	3001      	adds	r0, #1
 8007818:	d1c0      	bne.n	800779c <_printf_float+0x2f4>
 800781a:	e6a0      	b.n	800755e <_printf_float+0xb6>
 800781c:	2301      	movs	r3, #1
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	920b      	str	r2, [sp, #44]	; 0x2c
 8007824:	47b8      	blx	r7
 8007826:	3001      	adds	r0, #1
 8007828:	f43f ae99 	beq.w	800755e <_printf_float+0xb6>
 800782c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800782e:	f10b 0b01 	add.w	fp, fp, #1
 8007832:	e7b9      	b.n	80077a8 <_printf_float+0x300>
 8007834:	4631      	mov	r1, r6
 8007836:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800783a:	4628      	mov	r0, r5
 800783c:	47b8      	blx	r7
 800783e:	3001      	adds	r0, #1
 8007840:	d1bf      	bne.n	80077c2 <_printf_float+0x31a>
 8007842:	e68c      	b.n	800755e <_printf_float+0xb6>
 8007844:	464b      	mov	r3, r9
 8007846:	4631      	mov	r1, r6
 8007848:	4628      	mov	r0, r5
 800784a:	eb08 020a 	add.w	r2, r8, sl
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	d1c2      	bne.n	80077da <_printf_float+0x332>
 8007854:	e683      	b.n	800755e <_printf_float+0xb6>
 8007856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007858:	2a01      	cmp	r2, #1
 800785a:	dc01      	bgt.n	8007860 <_printf_float+0x3b8>
 800785c:	07db      	lsls	r3, r3, #31
 800785e:	d537      	bpl.n	80078d0 <_printf_float+0x428>
 8007860:	2301      	movs	r3, #1
 8007862:	4642      	mov	r2, r8
 8007864:	4631      	mov	r1, r6
 8007866:	4628      	mov	r0, r5
 8007868:	47b8      	blx	r7
 800786a:	3001      	adds	r0, #1
 800786c:	f43f ae77 	beq.w	800755e <_printf_float+0xb6>
 8007870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	f43f ae6f 	beq.w	800755e <_printf_float+0xb6>
 8007880:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007884:	2200      	movs	r2, #0
 8007886:	2300      	movs	r3, #0
 8007888:	f7f9 f88e 	bl	80009a8 <__aeabi_dcmpeq>
 800788c:	b9d8      	cbnz	r0, 80078c6 <_printf_float+0x41e>
 800788e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007890:	f108 0201 	add.w	r2, r8, #1
 8007894:	3b01      	subs	r3, #1
 8007896:	4631      	mov	r1, r6
 8007898:	4628      	mov	r0, r5
 800789a:	47b8      	blx	r7
 800789c:	3001      	adds	r0, #1
 800789e:	d10e      	bne.n	80078be <_printf_float+0x416>
 80078a0:	e65d      	b.n	800755e <_printf_float+0xb6>
 80078a2:	2301      	movs	r3, #1
 80078a4:	464a      	mov	r2, r9
 80078a6:	4631      	mov	r1, r6
 80078a8:	4628      	mov	r0, r5
 80078aa:	47b8      	blx	r7
 80078ac:	3001      	adds	r0, #1
 80078ae:	f43f ae56 	beq.w	800755e <_printf_float+0xb6>
 80078b2:	f108 0801 	add.w	r8, r8, #1
 80078b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078b8:	3b01      	subs	r3, #1
 80078ba:	4543      	cmp	r3, r8
 80078bc:	dcf1      	bgt.n	80078a2 <_printf_float+0x3fa>
 80078be:	4653      	mov	r3, sl
 80078c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078c4:	e6e0      	b.n	8007688 <_printf_float+0x1e0>
 80078c6:	f04f 0800 	mov.w	r8, #0
 80078ca:	f104 091a 	add.w	r9, r4, #26
 80078ce:	e7f2      	b.n	80078b6 <_printf_float+0x40e>
 80078d0:	2301      	movs	r3, #1
 80078d2:	4642      	mov	r2, r8
 80078d4:	e7df      	b.n	8007896 <_printf_float+0x3ee>
 80078d6:	2301      	movs	r3, #1
 80078d8:	464a      	mov	r2, r9
 80078da:	4631      	mov	r1, r6
 80078dc:	4628      	mov	r0, r5
 80078de:	47b8      	blx	r7
 80078e0:	3001      	adds	r0, #1
 80078e2:	f43f ae3c 	beq.w	800755e <_printf_float+0xb6>
 80078e6:	f108 0801 	add.w	r8, r8, #1
 80078ea:	68e3      	ldr	r3, [r4, #12]
 80078ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078ee:	1a5b      	subs	r3, r3, r1
 80078f0:	4543      	cmp	r3, r8
 80078f2:	dcf0      	bgt.n	80078d6 <_printf_float+0x42e>
 80078f4:	e6fd      	b.n	80076f2 <_printf_float+0x24a>
 80078f6:	f04f 0800 	mov.w	r8, #0
 80078fa:	f104 0919 	add.w	r9, r4, #25
 80078fe:	e7f4      	b.n	80078ea <_printf_float+0x442>

08007900 <_printf_common>:
 8007900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007904:	4616      	mov	r6, r2
 8007906:	4699      	mov	r9, r3
 8007908:	688a      	ldr	r2, [r1, #8]
 800790a:	690b      	ldr	r3, [r1, #16]
 800790c:	4607      	mov	r7, r0
 800790e:	4293      	cmp	r3, r2
 8007910:	bfb8      	it	lt
 8007912:	4613      	movlt	r3, r2
 8007914:	6033      	str	r3, [r6, #0]
 8007916:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800791a:	460c      	mov	r4, r1
 800791c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007920:	b10a      	cbz	r2, 8007926 <_printf_common+0x26>
 8007922:	3301      	adds	r3, #1
 8007924:	6033      	str	r3, [r6, #0]
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	0699      	lsls	r1, r3, #26
 800792a:	bf42      	ittt	mi
 800792c:	6833      	ldrmi	r3, [r6, #0]
 800792e:	3302      	addmi	r3, #2
 8007930:	6033      	strmi	r3, [r6, #0]
 8007932:	6825      	ldr	r5, [r4, #0]
 8007934:	f015 0506 	ands.w	r5, r5, #6
 8007938:	d106      	bne.n	8007948 <_printf_common+0x48>
 800793a:	f104 0a19 	add.w	sl, r4, #25
 800793e:	68e3      	ldr	r3, [r4, #12]
 8007940:	6832      	ldr	r2, [r6, #0]
 8007942:	1a9b      	subs	r3, r3, r2
 8007944:	42ab      	cmp	r3, r5
 8007946:	dc28      	bgt.n	800799a <_printf_common+0x9a>
 8007948:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800794c:	1e13      	subs	r3, r2, #0
 800794e:	6822      	ldr	r2, [r4, #0]
 8007950:	bf18      	it	ne
 8007952:	2301      	movne	r3, #1
 8007954:	0692      	lsls	r2, r2, #26
 8007956:	d42d      	bmi.n	80079b4 <_printf_common+0xb4>
 8007958:	4649      	mov	r1, r9
 800795a:	4638      	mov	r0, r7
 800795c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007960:	47c0      	blx	r8
 8007962:	3001      	adds	r0, #1
 8007964:	d020      	beq.n	80079a8 <_printf_common+0xa8>
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	68e5      	ldr	r5, [r4, #12]
 800796a:	f003 0306 	and.w	r3, r3, #6
 800796e:	2b04      	cmp	r3, #4
 8007970:	bf18      	it	ne
 8007972:	2500      	movne	r5, #0
 8007974:	6832      	ldr	r2, [r6, #0]
 8007976:	f04f 0600 	mov.w	r6, #0
 800797a:	68a3      	ldr	r3, [r4, #8]
 800797c:	bf08      	it	eq
 800797e:	1aad      	subeq	r5, r5, r2
 8007980:	6922      	ldr	r2, [r4, #16]
 8007982:	bf08      	it	eq
 8007984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007988:	4293      	cmp	r3, r2
 800798a:	bfc4      	itt	gt
 800798c:	1a9b      	subgt	r3, r3, r2
 800798e:	18ed      	addgt	r5, r5, r3
 8007990:	341a      	adds	r4, #26
 8007992:	42b5      	cmp	r5, r6
 8007994:	d11a      	bne.n	80079cc <_printf_common+0xcc>
 8007996:	2000      	movs	r0, #0
 8007998:	e008      	b.n	80079ac <_printf_common+0xac>
 800799a:	2301      	movs	r3, #1
 800799c:	4652      	mov	r2, sl
 800799e:	4649      	mov	r1, r9
 80079a0:	4638      	mov	r0, r7
 80079a2:	47c0      	blx	r8
 80079a4:	3001      	adds	r0, #1
 80079a6:	d103      	bne.n	80079b0 <_printf_common+0xb0>
 80079a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b0:	3501      	adds	r5, #1
 80079b2:	e7c4      	b.n	800793e <_printf_common+0x3e>
 80079b4:	2030      	movs	r0, #48	; 0x30
 80079b6:	18e1      	adds	r1, r4, r3
 80079b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079c2:	4422      	add	r2, r4
 80079c4:	3302      	adds	r3, #2
 80079c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079ca:	e7c5      	b.n	8007958 <_printf_common+0x58>
 80079cc:	2301      	movs	r3, #1
 80079ce:	4622      	mov	r2, r4
 80079d0:	4649      	mov	r1, r9
 80079d2:	4638      	mov	r0, r7
 80079d4:	47c0      	blx	r8
 80079d6:	3001      	adds	r0, #1
 80079d8:	d0e6      	beq.n	80079a8 <_printf_common+0xa8>
 80079da:	3601      	adds	r6, #1
 80079dc:	e7d9      	b.n	8007992 <_printf_common+0x92>
	...

080079e0 <_printf_i>:
 80079e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079e4:	7e0f      	ldrb	r7, [r1, #24]
 80079e6:	4691      	mov	r9, r2
 80079e8:	2f78      	cmp	r7, #120	; 0x78
 80079ea:	4680      	mov	r8, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	469a      	mov	sl, r3
 80079f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079f6:	d807      	bhi.n	8007a08 <_printf_i+0x28>
 80079f8:	2f62      	cmp	r7, #98	; 0x62
 80079fa:	d80a      	bhi.n	8007a12 <_printf_i+0x32>
 80079fc:	2f00      	cmp	r7, #0
 80079fe:	f000 80d9 	beq.w	8007bb4 <_printf_i+0x1d4>
 8007a02:	2f58      	cmp	r7, #88	; 0x58
 8007a04:	f000 80a4 	beq.w	8007b50 <_printf_i+0x170>
 8007a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a10:	e03a      	b.n	8007a88 <_printf_i+0xa8>
 8007a12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a16:	2b15      	cmp	r3, #21
 8007a18:	d8f6      	bhi.n	8007a08 <_printf_i+0x28>
 8007a1a:	a101      	add	r1, pc, #4	; (adr r1, 8007a20 <_printf_i+0x40>)
 8007a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a20:	08007a79 	.word	0x08007a79
 8007a24:	08007a8d 	.word	0x08007a8d
 8007a28:	08007a09 	.word	0x08007a09
 8007a2c:	08007a09 	.word	0x08007a09
 8007a30:	08007a09 	.word	0x08007a09
 8007a34:	08007a09 	.word	0x08007a09
 8007a38:	08007a8d 	.word	0x08007a8d
 8007a3c:	08007a09 	.word	0x08007a09
 8007a40:	08007a09 	.word	0x08007a09
 8007a44:	08007a09 	.word	0x08007a09
 8007a48:	08007a09 	.word	0x08007a09
 8007a4c:	08007b9b 	.word	0x08007b9b
 8007a50:	08007abd 	.word	0x08007abd
 8007a54:	08007b7d 	.word	0x08007b7d
 8007a58:	08007a09 	.word	0x08007a09
 8007a5c:	08007a09 	.word	0x08007a09
 8007a60:	08007bbd 	.word	0x08007bbd
 8007a64:	08007a09 	.word	0x08007a09
 8007a68:	08007abd 	.word	0x08007abd
 8007a6c:	08007a09 	.word	0x08007a09
 8007a70:	08007a09 	.word	0x08007a09
 8007a74:	08007b85 	.word	0x08007b85
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	1d1a      	adds	r2, r3, #4
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	602a      	str	r2, [r5, #0]
 8007a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e0a4      	b.n	8007bd6 <_printf_i+0x1f6>
 8007a8c:	6820      	ldr	r0, [r4, #0]
 8007a8e:	6829      	ldr	r1, [r5, #0]
 8007a90:	0606      	lsls	r6, r0, #24
 8007a92:	f101 0304 	add.w	r3, r1, #4
 8007a96:	d50a      	bpl.n	8007aae <_printf_i+0xce>
 8007a98:	680e      	ldr	r6, [r1, #0]
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	2e00      	cmp	r6, #0
 8007a9e:	da03      	bge.n	8007aa8 <_printf_i+0xc8>
 8007aa0:	232d      	movs	r3, #45	; 0x2d
 8007aa2:	4276      	negs	r6, r6
 8007aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aa8:	230a      	movs	r3, #10
 8007aaa:	485e      	ldr	r0, [pc, #376]	; (8007c24 <_printf_i+0x244>)
 8007aac:	e019      	b.n	8007ae2 <_printf_i+0x102>
 8007aae:	680e      	ldr	r6, [r1, #0]
 8007ab0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ab4:	602b      	str	r3, [r5, #0]
 8007ab6:	bf18      	it	ne
 8007ab8:	b236      	sxthne	r6, r6
 8007aba:	e7ef      	b.n	8007a9c <_printf_i+0xbc>
 8007abc:	682b      	ldr	r3, [r5, #0]
 8007abe:	6820      	ldr	r0, [r4, #0]
 8007ac0:	1d19      	adds	r1, r3, #4
 8007ac2:	6029      	str	r1, [r5, #0]
 8007ac4:	0601      	lsls	r1, r0, #24
 8007ac6:	d501      	bpl.n	8007acc <_printf_i+0xec>
 8007ac8:	681e      	ldr	r6, [r3, #0]
 8007aca:	e002      	b.n	8007ad2 <_printf_i+0xf2>
 8007acc:	0646      	lsls	r6, r0, #25
 8007ace:	d5fb      	bpl.n	8007ac8 <_printf_i+0xe8>
 8007ad0:	881e      	ldrh	r6, [r3, #0]
 8007ad2:	2f6f      	cmp	r7, #111	; 0x6f
 8007ad4:	bf0c      	ite	eq
 8007ad6:	2308      	moveq	r3, #8
 8007ad8:	230a      	movne	r3, #10
 8007ada:	4852      	ldr	r0, [pc, #328]	; (8007c24 <_printf_i+0x244>)
 8007adc:	2100      	movs	r1, #0
 8007ade:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ae2:	6865      	ldr	r5, [r4, #4]
 8007ae4:	2d00      	cmp	r5, #0
 8007ae6:	bfa8      	it	ge
 8007ae8:	6821      	ldrge	r1, [r4, #0]
 8007aea:	60a5      	str	r5, [r4, #8]
 8007aec:	bfa4      	itt	ge
 8007aee:	f021 0104 	bicge.w	r1, r1, #4
 8007af2:	6021      	strge	r1, [r4, #0]
 8007af4:	b90e      	cbnz	r6, 8007afa <_printf_i+0x11a>
 8007af6:	2d00      	cmp	r5, #0
 8007af8:	d04d      	beq.n	8007b96 <_printf_i+0x1b6>
 8007afa:	4615      	mov	r5, r2
 8007afc:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b00:	fb03 6711 	mls	r7, r3, r1, r6
 8007b04:	5dc7      	ldrb	r7, [r0, r7]
 8007b06:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b0a:	4637      	mov	r7, r6
 8007b0c:	42bb      	cmp	r3, r7
 8007b0e:	460e      	mov	r6, r1
 8007b10:	d9f4      	bls.n	8007afc <_printf_i+0x11c>
 8007b12:	2b08      	cmp	r3, #8
 8007b14:	d10b      	bne.n	8007b2e <_printf_i+0x14e>
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	07de      	lsls	r6, r3, #31
 8007b1a:	d508      	bpl.n	8007b2e <_printf_i+0x14e>
 8007b1c:	6923      	ldr	r3, [r4, #16]
 8007b1e:	6861      	ldr	r1, [r4, #4]
 8007b20:	4299      	cmp	r1, r3
 8007b22:	bfde      	ittt	le
 8007b24:	2330      	movle	r3, #48	; 0x30
 8007b26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b2a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007b2e:	1b52      	subs	r2, r2, r5
 8007b30:	6122      	str	r2, [r4, #16]
 8007b32:	464b      	mov	r3, r9
 8007b34:	4621      	mov	r1, r4
 8007b36:	4640      	mov	r0, r8
 8007b38:	f8cd a000 	str.w	sl, [sp]
 8007b3c:	aa03      	add	r2, sp, #12
 8007b3e:	f7ff fedf 	bl	8007900 <_printf_common>
 8007b42:	3001      	adds	r0, #1
 8007b44:	d14c      	bne.n	8007be0 <_printf_i+0x200>
 8007b46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b4a:	b004      	add	sp, #16
 8007b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b50:	4834      	ldr	r0, [pc, #208]	; (8007c24 <_printf_i+0x244>)
 8007b52:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b56:	6829      	ldr	r1, [r5, #0]
 8007b58:	6823      	ldr	r3, [r4, #0]
 8007b5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b5e:	6029      	str	r1, [r5, #0]
 8007b60:	061d      	lsls	r5, r3, #24
 8007b62:	d514      	bpl.n	8007b8e <_printf_i+0x1ae>
 8007b64:	07df      	lsls	r7, r3, #31
 8007b66:	bf44      	itt	mi
 8007b68:	f043 0320 	orrmi.w	r3, r3, #32
 8007b6c:	6023      	strmi	r3, [r4, #0]
 8007b6e:	b91e      	cbnz	r6, 8007b78 <_printf_i+0x198>
 8007b70:	6823      	ldr	r3, [r4, #0]
 8007b72:	f023 0320 	bic.w	r3, r3, #32
 8007b76:	6023      	str	r3, [r4, #0]
 8007b78:	2310      	movs	r3, #16
 8007b7a:	e7af      	b.n	8007adc <_printf_i+0xfc>
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	f043 0320 	orr.w	r3, r3, #32
 8007b82:	6023      	str	r3, [r4, #0]
 8007b84:	2378      	movs	r3, #120	; 0x78
 8007b86:	4828      	ldr	r0, [pc, #160]	; (8007c28 <_printf_i+0x248>)
 8007b88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b8c:	e7e3      	b.n	8007b56 <_printf_i+0x176>
 8007b8e:	0659      	lsls	r1, r3, #25
 8007b90:	bf48      	it	mi
 8007b92:	b2b6      	uxthmi	r6, r6
 8007b94:	e7e6      	b.n	8007b64 <_printf_i+0x184>
 8007b96:	4615      	mov	r5, r2
 8007b98:	e7bb      	b.n	8007b12 <_printf_i+0x132>
 8007b9a:	682b      	ldr	r3, [r5, #0]
 8007b9c:	6826      	ldr	r6, [r4, #0]
 8007b9e:	1d18      	adds	r0, r3, #4
 8007ba0:	6961      	ldr	r1, [r4, #20]
 8007ba2:	6028      	str	r0, [r5, #0]
 8007ba4:	0635      	lsls	r5, r6, #24
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	d501      	bpl.n	8007bae <_printf_i+0x1ce>
 8007baa:	6019      	str	r1, [r3, #0]
 8007bac:	e002      	b.n	8007bb4 <_printf_i+0x1d4>
 8007bae:	0670      	lsls	r0, r6, #25
 8007bb0:	d5fb      	bpl.n	8007baa <_printf_i+0x1ca>
 8007bb2:	8019      	strh	r1, [r3, #0]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	4615      	mov	r5, r2
 8007bb8:	6123      	str	r3, [r4, #16]
 8007bba:	e7ba      	b.n	8007b32 <_printf_i+0x152>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	1d1a      	adds	r2, r3, #4
 8007bc2:	602a      	str	r2, [r5, #0]
 8007bc4:	681d      	ldr	r5, [r3, #0]
 8007bc6:	6862      	ldr	r2, [r4, #4]
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f001 f87f 	bl	8008ccc <memchr>
 8007bce:	b108      	cbz	r0, 8007bd4 <_printf_i+0x1f4>
 8007bd0:	1b40      	subs	r0, r0, r5
 8007bd2:	6060      	str	r0, [r4, #4]
 8007bd4:	6863      	ldr	r3, [r4, #4]
 8007bd6:	6123      	str	r3, [r4, #16]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bde:	e7a8      	b.n	8007b32 <_printf_i+0x152>
 8007be0:	462a      	mov	r2, r5
 8007be2:	4649      	mov	r1, r9
 8007be4:	4640      	mov	r0, r8
 8007be6:	6923      	ldr	r3, [r4, #16]
 8007be8:	47d0      	blx	sl
 8007bea:	3001      	adds	r0, #1
 8007bec:	d0ab      	beq.n	8007b46 <_printf_i+0x166>
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	079b      	lsls	r3, r3, #30
 8007bf2:	d413      	bmi.n	8007c1c <_printf_i+0x23c>
 8007bf4:	68e0      	ldr	r0, [r4, #12]
 8007bf6:	9b03      	ldr	r3, [sp, #12]
 8007bf8:	4298      	cmp	r0, r3
 8007bfa:	bfb8      	it	lt
 8007bfc:	4618      	movlt	r0, r3
 8007bfe:	e7a4      	b.n	8007b4a <_printf_i+0x16a>
 8007c00:	2301      	movs	r3, #1
 8007c02:	4632      	mov	r2, r6
 8007c04:	4649      	mov	r1, r9
 8007c06:	4640      	mov	r0, r8
 8007c08:	47d0      	blx	sl
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	d09b      	beq.n	8007b46 <_printf_i+0x166>
 8007c0e:	3501      	adds	r5, #1
 8007c10:	68e3      	ldr	r3, [r4, #12]
 8007c12:	9903      	ldr	r1, [sp, #12]
 8007c14:	1a5b      	subs	r3, r3, r1
 8007c16:	42ab      	cmp	r3, r5
 8007c18:	dcf2      	bgt.n	8007c00 <_printf_i+0x220>
 8007c1a:	e7eb      	b.n	8007bf4 <_printf_i+0x214>
 8007c1c:	2500      	movs	r5, #0
 8007c1e:	f104 0619 	add.w	r6, r4, #25
 8007c22:	e7f5      	b.n	8007c10 <_printf_i+0x230>
 8007c24:	08009c9e 	.word	0x08009c9e
 8007c28:	08009caf 	.word	0x08009caf

08007c2c <iprintf>:
 8007c2c:	b40f      	push	{r0, r1, r2, r3}
 8007c2e:	4b0a      	ldr	r3, [pc, #40]	; (8007c58 <iprintf+0x2c>)
 8007c30:	b513      	push	{r0, r1, r4, lr}
 8007c32:	681c      	ldr	r4, [r3, #0]
 8007c34:	b124      	cbz	r4, 8007c40 <iprintf+0x14>
 8007c36:	69a3      	ldr	r3, [r4, #24]
 8007c38:	b913      	cbnz	r3, 8007c40 <iprintf+0x14>
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f7ff fa26 	bl	800708c <__sinit>
 8007c40:	ab05      	add	r3, sp, #20
 8007c42:	4620      	mov	r0, r4
 8007c44:	9a04      	ldr	r2, [sp, #16]
 8007c46:	68a1      	ldr	r1, [r4, #8]
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	f001 fc5f 	bl	800950c <_vfiprintf_r>
 8007c4e:	b002      	add	sp, #8
 8007c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c54:	b004      	add	sp, #16
 8007c56:	4770      	bx	lr
 8007c58:	20000024 	.word	0x20000024

08007c5c <cleanup_glue>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	460c      	mov	r4, r1
 8007c60:	6809      	ldr	r1, [r1, #0]
 8007c62:	4605      	mov	r5, r0
 8007c64:	b109      	cbz	r1, 8007c6a <cleanup_glue+0xe>
 8007c66:	f7ff fff9 	bl	8007c5c <cleanup_glue>
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c72:	f001 bbdb 	b.w	800942c <_free_r>
	...

08007c78 <_reclaim_reent>:
 8007c78:	4b2c      	ldr	r3, [pc, #176]	; (8007d2c <_reclaim_reent+0xb4>)
 8007c7a:	b570      	push	{r4, r5, r6, lr}
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4604      	mov	r4, r0
 8007c80:	4283      	cmp	r3, r0
 8007c82:	d051      	beq.n	8007d28 <_reclaim_reent+0xb0>
 8007c84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007c86:	b143      	cbz	r3, 8007c9a <_reclaim_reent+0x22>
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d14a      	bne.n	8007d24 <_reclaim_reent+0xac>
 8007c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c90:	6819      	ldr	r1, [r3, #0]
 8007c92:	b111      	cbz	r1, 8007c9a <_reclaim_reent+0x22>
 8007c94:	4620      	mov	r0, r4
 8007c96:	f001 fbc9 	bl	800942c <_free_r>
 8007c9a:	6961      	ldr	r1, [r4, #20]
 8007c9c:	b111      	cbz	r1, 8007ca4 <_reclaim_reent+0x2c>
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f001 fbc4 	bl	800942c <_free_r>
 8007ca4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007ca6:	b111      	cbz	r1, 8007cae <_reclaim_reent+0x36>
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f001 fbbf 	bl	800942c <_free_r>
 8007cae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007cb0:	b111      	cbz	r1, 8007cb8 <_reclaim_reent+0x40>
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f001 fbba 	bl	800942c <_free_r>
 8007cb8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007cba:	b111      	cbz	r1, 8007cc2 <_reclaim_reent+0x4a>
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f001 fbb5 	bl	800942c <_free_r>
 8007cc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007cc4:	b111      	cbz	r1, 8007ccc <_reclaim_reent+0x54>
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f001 fbb0 	bl	800942c <_free_r>
 8007ccc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007cce:	b111      	cbz	r1, 8007cd6 <_reclaim_reent+0x5e>
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f001 fbab 	bl	800942c <_free_r>
 8007cd6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007cd8:	b111      	cbz	r1, 8007ce0 <_reclaim_reent+0x68>
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f001 fba6 	bl	800942c <_free_r>
 8007ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ce2:	b111      	cbz	r1, 8007cea <_reclaim_reent+0x72>
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f001 fba1 	bl	800942c <_free_r>
 8007cea:	69a3      	ldr	r3, [r4, #24]
 8007cec:	b1e3      	cbz	r3, 8007d28 <_reclaim_reent+0xb0>
 8007cee:	4620      	mov	r0, r4
 8007cf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007cf2:	4798      	blx	r3
 8007cf4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007cf6:	b1b9      	cbz	r1, 8007d28 <_reclaim_reent+0xb0>
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007cfe:	f7ff bfad 	b.w	8007c5c <cleanup_glue>
 8007d02:	5949      	ldr	r1, [r1, r5]
 8007d04:	b941      	cbnz	r1, 8007d18 <_reclaim_reent+0xa0>
 8007d06:	3504      	adds	r5, #4
 8007d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d0a:	2d80      	cmp	r5, #128	; 0x80
 8007d0c:	68d9      	ldr	r1, [r3, #12]
 8007d0e:	d1f8      	bne.n	8007d02 <_reclaim_reent+0x8a>
 8007d10:	4620      	mov	r0, r4
 8007d12:	f001 fb8b 	bl	800942c <_free_r>
 8007d16:	e7ba      	b.n	8007c8e <_reclaim_reent+0x16>
 8007d18:	680e      	ldr	r6, [r1, #0]
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f001 fb86 	bl	800942c <_free_r>
 8007d20:	4631      	mov	r1, r6
 8007d22:	e7ef      	b.n	8007d04 <_reclaim_reent+0x8c>
 8007d24:	2500      	movs	r5, #0
 8007d26:	e7ef      	b.n	8007d08 <_reclaim_reent+0x90>
 8007d28:	bd70      	pop	{r4, r5, r6, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000024 	.word	0x20000024

08007d30 <_sbrk_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	2300      	movs	r3, #0
 8007d34:	4d05      	ldr	r5, [pc, #20]	; (8007d4c <_sbrk_r+0x1c>)
 8007d36:	4604      	mov	r4, r0
 8007d38:	4608      	mov	r0, r1
 8007d3a:	602b      	str	r3, [r5, #0]
 8007d3c:	f7fa f9a8 	bl	8002090 <_sbrk>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d102      	bne.n	8007d4a <_sbrk_r+0x1a>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	b103      	cbz	r3, 8007d4a <_sbrk_r+0x1a>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	200023d0 	.word	0x200023d0

08007d50 <__sread>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	460c      	mov	r4, r1
 8007d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d58:	f001 fd08 	bl	800976c <_read_r>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	bfab      	itete	ge
 8007d60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d62:	89a3      	ldrhlt	r3, [r4, #12]
 8007d64:	181b      	addge	r3, r3, r0
 8007d66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d6a:	bfac      	ite	ge
 8007d6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d6e:	81a3      	strhlt	r3, [r4, #12]
 8007d70:	bd10      	pop	{r4, pc}

08007d72 <__swrite>:
 8007d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d76:	461f      	mov	r7, r3
 8007d78:	898b      	ldrh	r3, [r1, #12]
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	05db      	lsls	r3, r3, #23
 8007d7e:	460c      	mov	r4, r1
 8007d80:	4616      	mov	r6, r2
 8007d82:	d505      	bpl.n	8007d90 <__swrite+0x1e>
 8007d84:	2302      	movs	r3, #2
 8007d86:	2200      	movs	r2, #0
 8007d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d8c:	f000 ff84 	bl	8008c98 <_lseek_r>
 8007d90:	89a3      	ldrh	r3, [r4, #12]
 8007d92:	4632      	mov	r2, r6
 8007d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d98:	81a3      	strh	r3, [r4, #12]
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	463b      	mov	r3, r7
 8007d9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007da6:	f000 b817 	b.w	8007dd8 <_write_r>

08007daa <__sseek>:
 8007daa:	b510      	push	{r4, lr}
 8007dac:	460c      	mov	r4, r1
 8007dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db2:	f000 ff71 	bl	8008c98 <_lseek_r>
 8007db6:	1c43      	adds	r3, r0, #1
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	bf15      	itete	ne
 8007dbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007dbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007dc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dc6:	81a3      	strheq	r3, [r4, #12]
 8007dc8:	bf18      	it	ne
 8007dca:	81a3      	strhne	r3, [r4, #12]
 8007dcc:	bd10      	pop	{r4, pc}

08007dce <__sclose>:
 8007dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd2:	f000 b813 	b.w	8007dfc <_close_r>
	...

08007dd8 <_write_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	4604      	mov	r4, r0
 8007ddc:	4608      	mov	r0, r1
 8007dde:	4611      	mov	r1, r2
 8007de0:	2200      	movs	r2, #0
 8007de2:	4d05      	ldr	r5, [pc, #20]	; (8007df8 <_write_r+0x20>)
 8007de4:	602a      	str	r2, [r5, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	f7f8 fedc 	bl	8000ba4 <_write>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	d102      	bne.n	8007df6 <_write_r+0x1e>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	b103      	cbz	r3, 8007df6 <_write_r+0x1e>
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	bd38      	pop	{r3, r4, r5, pc}
 8007df8:	200023d0 	.word	0x200023d0

08007dfc <_close_r>:
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	2300      	movs	r3, #0
 8007e00:	4d05      	ldr	r5, [pc, #20]	; (8007e18 <_close_r+0x1c>)
 8007e02:	4604      	mov	r4, r0
 8007e04:	4608      	mov	r0, r1
 8007e06:	602b      	str	r3, [r5, #0]
 8007e08:	f7fa f912 	bl	8002030 <_close>
 8007e0c:	1c43      	adds	r3, r0, #1
 8007e0e:	d102      	bne.n	8007e16 <_close_r+0x1a>
 8007e10:	682b      	ldr	r3, [r5, #0]
 8007e12:	b103      	cbz	r3, 8007e16 <_close_r+0x1a>
 8007e14:	6023      	str	r3, [r4, #0]
 8007e16:	bd38      	pop	{r3, r4, r5, pc}
 8007e18:	200023d0 	.word	0x200023d0

08007e1c <quorem>:
 8007e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e20:	6903      	ldr	r3, [r0, #16]
 8007e22:	690c      	ldr	r4, [r1, #16]
 8007e24:	4607      	mov	r7, r0
 8007e26:	42a3      	cmp	r3, r4
 8007e28:	f2c0 8082 	blt.w	8007f30 <quorem+0x114>
 8007e2c:	3c01      	subs	r4, #1
 8007e2e:	f100 0514 	add.w	r5, r0, #20
 8007e32:	f101 0814 	add.w	r8, r1, #20
 8007e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e3a:	9301      	str	r3, [sp, #4]
 8007e3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e44:	3301      	adds	r3, #1
 8007e46:	429a      	cmp	r2, r3
 8007e48:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e54:	d331      	bcc.n	8007eba <quorem+0x9e>
 8007e56:	f04f 0e00 	mov.w	lr, #0
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	46ac      	mov	ip, r5
 8007e5e:	46f2      	mov	sl, lr
 8007e60:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e64:	b293      	uxth	r3, r2
 8007e66:	fb06 e303 	mla	r3, r6, r3, lr
 8007e6a:	0c12      	lsrs	r2, r2, #16
 8007e6c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	fb06 e202 	mla	r2, r6, r2, lr
 8007e76:	ebaa 0303 	sub.w	r3, sl, r3
 8007e7a:	f8dc a000 	ldr.w	sl, [ip]
 8007e7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e82:	fa1f fa8a 	uxth.w	sl, sl
 8007e86:	4453      	add	r3, sl
 8007e88:	f8dc a000 	ldr.w	sl, [ip]
 8007e8c:	b292      	uxth	r2, r2
 8007e8e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e9c:	4581      	cmp	r9, r0
 8007e9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ea2:	f84c 3b04 	str.w	r3, [ip], #4
 8007ea6:	d2db      	bcs.n	8007e60 <quorem+0x44>
 8007ea8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007eac:	b92b      	cbnz	r3, 8007eba <quorem+0x9e>
 8007eae:	9b01      	ldr	r3, [sp, #4]
 8007eb0:	3b04      	subs	r3, #4
 8007eb2:	429d      	cmp	r5, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	d32f      	bcc.n	8007f18 <quorem+0xfc>
 8007eb8:	613c      	str	r4, [r7, #16]
 8007eba:	4638      	mov	r0, r7
 8007ebc:	f001 f99e 	bl	80091fc <__mcmp>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	db25      	blt.n	8007f10 <quorem+0xf4>
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f04f 0c00 	mov.w	ip, #0
 8007eca:	3601      	adds	r6, #1
 8007ecc:	f858 1b04 	ldr.w	r1, [r8], #4
 8007ed0:	f8d0 e000 	ldr.w	lr, [r0]
 8007ed4:	b28b      	uxth	r3, r1
 8007ed6:	ebac 0303 	sub.w	r3, ip, r3
 8007eda:	fa1f f28e 	uxth.w	r2, lr
 8007ede:	4413      	add	r3, r2
 8007ee0:	0c0a      	lsrs	r2, r1, #16
 8007ee2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ee6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ef0:	45c1      	cmp	r9, r8
 8007ef2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ef6:	f840 3b04 	str.w	r3, [r0], #4
 8007efa:	d2e7      	bcs.n	8007ecc <quorem+0xb0>
 8007efc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f04:	b922      	cbnz	r2, 8007f10 <quorem+0xf4>
 8007f06:	3b04      	subs	r3, #4
 8007f08:	429d      	cmp	r5, r3
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	d30a      	bcc.n	8007f24 <quorem+0x108>
 8007f0e:	613c      	str	r4, [r7, #16]
 8007f10:	4630      	mov	r0, r6
 8007f12:	b003      	add	sp, #12
 8007f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f18:	6812      	ldr	r2, [r2, #0]
 8007f1a:	3b04      	subs	r3, #4
 8007f1c:	2a00      	cmp	r2, #0
 8007f1e:	d1cb      	bne.n	8007eb8 <quorem+0x9c>
 8007f20:	3c01      	subs	r4, #1
 8007f22:	e7c6      	b.n	8007eb2 <quorem+0x96>
 8007f24:	6812      	ldr	r2, [r2, #0]
 8007f26:	3b04      	subs	r3, #4
 8007f28:	2a00      	cmp	r2, #0
 8007f2a:	d1f0      	bne.n	8007f0e <quorem+0xf2>
 8007f2c:	3c01      	subs	r4, #1
 8007f2e:	e7eb      	b.n	8007f08 <quorem+0xec>
 8007f30:	2000      	movs	r0, #0
 8007f32:	e7ee      	b.n	8007f12 <quorem+0xf6>
 8007f34:	0000      	movs	r0, r0
	...

08007f38 <_dtoa_r>:
 8007f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	4616      	mov	r6, r2
 8007f3e:	461f      	mov	r7, r3
 8007f40:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007f42:	b099      	sub	sp, #100	; 0x64
 8007f44:	4605      	mov	r5, r0
 8007f46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007f4a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007f4e:	b974      	cbnz	r4, 8007f6e <_dtoa_r+0x36>
 8007f50:	2010      	movs	r0, #16
 8007f52:	f000 feb3 	bl	8008cbc <malloc>
 8007f56:	4602      	mov	r2, r0
 8007f58:	6268      	str	r0, [r5, #36]	; 0x24
 8007f5a:	b920      	cbnz	r0, 8007f66 <_dtoa_r+0x2e>
 8007f5c:	21ea      	movs	r1, #234	; 0xea
 8007f5e:	4ba8      	ldr	r3, [pc, #672]	; (8008200 <_dtoa_r+0x2c8>)
 8007f60:	48a8      	ldr	r0, [pc, #672]	; (8008204 <_dtoa_r+0x2cc>)
 8007f62:	f001 fcd5 	bl	8009910 <__assert_func>
 8007f66:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f6a:	6004      	str	r4, [r0, #0]
 8007f6c:	60c4      	str	r4, [r0, #12]
 8007f6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f70:	6819      	ldr	r1, [r3, #0]
 8007f72:	b151      	cbz	r1, 8007f8a <_dtoa_r+0x52>
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	2301      	movs	r3, #1
 8007f78:	4093      	lsls	r3, r2
 8007f7a:	604a      	str	r2, [r1, #4]
 8007f7c:	608b      	str	r3, [r1, #8]
 8007f7e:	4628      	mov	r0, r5
 8007f80:	f000 fefe 	bl	8008d80 <_Bfree>
 8007f84:	2200      	movs	r2, #0
 8007f86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	1e3b      	subs	r3, r7, #0
 8007f8c:	bfaf      	iteee	ge
 8007f8e:	2300      	movge	r3, #0
 8007f90:	2201      	movlt	r2, #1
 8007f92:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f96:	9305      	strlt	r3, [sp, #20]
 8007f98:	bfa8      	it	ge
 8007f9a:	f8c8 3000 	strge.w	r3, [r8]
 8007f9e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007fa2:	4b99      	ldr	r3, [pc, #612]	; (8008208 <_dtoa_r+0x2d0>)
 8007fa4:	bfb8      	it	lt
 8007fa6:	f8c8 2000 	strlt.w	r2, [r8]
 8007faa:	ea33 0309 	bics.w	r3, r3, r9
 8007fae:	d119      	bne.n	8007fe4 <_dtoa_r+0xac>
 8007fb0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fb4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007fb6:	6013      	str	r3, [r2, #0]
 8007fb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fbc:	4333      	orrs	r3, r6
 8007fbe:	f000 857f 	beq.w	8008ac0 <_dtoa_r+0xb88>
 8007fc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007fc4:	b953      	cbnz	r3, 8007fdc <_dtoa_r+0xa4>
 8007fc6:	4b91      	ldr	r3, [pc, #580]	; (800820c <_dtoa_r+0x2d4>)
 8007fc8:	e022      	b.n	8008010 <_dtoa_r+0xd8>
 8007fca:	4b91      	ldr	r3, [pc, #580]	; (8008210 <_dtoa_r+0x2d8>)
 8007fcc:	9303      	str	r3, [sp, #12]
 8007fce:	3308      	adds	r3, #8
 8007fd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	9803      	ldr	r0, [sp, #12]
 8007fd6:	b019      	add	sp, #100	; 0x64
 8007fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fdc:	4b8b      	ldr	r3, [pc, #556]	; (800820c <_dtoa_r+0x2d4>)
 8007fde:	9303      	str	r3, [sp, #12]
 8007fe0:	3303      	adds	r3, #3
 8007fe2:	e7f5      	b.n	8007fd0 <_dtoa_r+0x98>
 8007fe4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007fe8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007fec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f7f8 fcd8 	bl	80009a8 <__aeabi_dcmpeq>
 8007ff8:	4680      	mov	r8, r0
 8007ffa:	b158      	cbz	r0, 8008014 <_dtoa_r+0xdc>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 8558 	beq.w	8008aba <_dtoa_r+0xb82>
 800800a:	4882      	ldr	r0, [pc, #520]	; (8008214 <_dtoa_r+0x2dc>)
 800800c:	6018      	str	r0, [r3, #0]
 800800e:	1e43      	subs	r3, r0, #1
 8008010:	9303      	str	r3, [sp, #12]
 8008012:	e7df      	b.n	8007fd4 <_dtoa_r+0x9c>
 8008014:	ab16      	add	r3, sp, #88	; 0x58
 8008016:	9301      	str	r3, [sp, #4]
 8008018:	ab17      	add	r3, sp, #92	; 0x5c
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	4628      	mov	r0, r5
 800801e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008022:	f001 f993 	bl	800934c <__d2b>
 8008026:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800802a:	4683      	mov	fp, r0
 800802c:	2c00      	cmp	r4, #0
 800802e:	d07f      	beq.n	8008130 <_dtoa_r+0x1f8>
 8008030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008036:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800803a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800803e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008042:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008046:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800804a:	2200      	movs	r2, #0
 800804c:	4b72      	ldr	r3, [pc, #456]	; (8008218 <_dtoa_r+0x2e0>)
 800804e:	f7f8 f88b 	bl	8000168 <__aeabi_dsub>
 8008052:	a365      	add	r3, pc, #404	; (adr r3, 80081e8 <_dtoa_r+0x2b0>)
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	f7f8 fa3e 	bl	80004d8 <__aeabi_dmul>
 800805c:	a364      	add	r3, pc, #400	; (adr r3, 80081f0 <_dtoa_r+0x2b8>)
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	f7f8 f883 	bl	800016c <__adddf3>
 8008066:	4606      	mov	r6, r0
 8008068:	4620      	mov	r0, r4
 800806a:	460f      	mov	r7, r1
 800806c:	f7f8 f9ca 	bl	8000404 <__aeabi_i2d>
 8008070:	a361      	add	r3, pc, #388	; (adr r3, 80081f8 <_dtoa_r+0x2c0>)
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	f7f8 fa2f 	bl	80004d8 <__aeabi_dmul>
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	4630      	mov	r0, r6
 8008080:	4639      	mov	r1, r7
 8008082:	f7f8 f873 	bl	800016c <__adddf3>
 8008086:	4606      	mov	r6, r0
 8008088:	460f      	mov	r7, r1
 800808a:	f7f8 fcd5 	bl	8000a38 <__aeabi_d2iz>
 800808e:	2200      	movs	r2, #0
 8008090:	4682      	mov	sl, r0
 8008092:	2300      	movs	r3, #0
 8008094:	4630      	mov	r0, r6
 8008096:	4639      	mov	r1, r7
 8008098:	f7f8 fc90 	bl	80009bc <__aeabi_dcmplt>
 800809c:	b148      	cbz	r0, 80080b2 <_dtoa_r+0x17a>
 800809e:	4650      	mov	r0, sl
 80080a0:	f7f8 f9b0 	bl	8000404 <__aeabi_i2d>
 80080a4:	4632      	mov	r2, r6
 80080a6:	463b      	mov	r3, r7
 80080a8:	f7f8 fc7e 	bl	80009a8 <__aeabi_dcmpeq>
 80080ac:	b908      	cbnz	r0, 80080b2 <_dtoa_r+0x17a>
 80080ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80080b2:	f1ba 0f16 	cmp.w	sl, #22
 80080b6:	d858      	bhi.n	800816a <_dtoa_r+0x232>
 80080b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080bc:	4b57      	ldr	r3, [pc, #348]	; (800821c <_dtoa_r+0x2e4>)
 80080be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80080c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c6:	f7f8 fc79 	bl	80009bc <__aeabi_dcmplt>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d04f      	beq.n	800816e <_dtoa_r+0x236>
 80080ce:	2300      	movs	r3, #0
 80080d0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80080d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80080d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80080d8:	1b1c      	subs	r4, r3, r4
 80080da:	1e63      	subs	r3, r4, #1
 80080dc:	9309      	str	r3, [sp, #36]	; 0x24
 80080de:	bf49      	itett	mi
 80080e0:	f1c4 0301 	rsbmi	r3, r4, #1
 80080e4:	2300      	movpl	r3, #0
 80080e6:	9306      	strmi	r3, [sp, #24]
 80080e8:	2300      	movmi	r3, #0
 80080ea:	bf54      	ite	pl
 80080ec:	9306      	strpl	r3, [sp, #24]
 80080ee:	9309      	strmi	r3, [sp, #36]	; 0x24
 80080f0:	f1ba 0f00 	cmp.w	sl, #0
 80080f4:	db3d      	blt.n	8008172 <_dtoa_r+0x23a>
 80080f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80080fc:	4453      	add	r3, sl
 80080fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008100:	2300      	movs	r3, #0
 8008102:	930a      	str	r3, [sp, #40]	; 0x28
 8008104:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008106:	2b09      	cmp	r3, #9
 8008108:	f200 808c 	bhi.w	8008224 <_dtoa_r+0x2ec>
 800810c:	2b05      	cmp	r3, #5
 800810e:	bfc4      	itt	gt
 8008110:	3b04      	subgt	r3, #4
 8008112:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008114:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008116:	bfc8      	it	gt
 8008118:	2400      	movgt	r4, #0
 800811a:	f1a3 0302 	sub.w	r3, r3, #2
 800811e:	bfd8      	it	le
 8008120:	2401      	movle	r4, #1
 8008122:	2b03      	cmp	r3, #3
 8008124:	f200 808a 	bhi.w	800823c <_dtoa_r+0x304>
 8008128:	e8df f003 	tbb	[pc, r3]
 800812c:	5b4d4f2d 	.word	0x5b4d4f2d
 8008130:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008134:	441c      	add	r4, r3
 8008136:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800813a:	2b20      	cmp	r3, #32
 800813c:	bfc3      	ittte	gt
 800813e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008142:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008146:	fa09 f303 	lslgt.w	r3, r9, r3
 800814a:	f1c3 0320 	rsble	r3, r3, #32
 800814e:	bfc6      	itte	gt
 8008150:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008154:	4318      	orrgt	r0, r3
 8008156:	fa06 f003 	lslle.w	r0, r6, r3
 800815a:	f7f8 f943 	bl	80003e4 <__aeabi_ui2d>
 800815e:	2301      	movs	r3, #1
 8008160:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008164:	3c01      	subs	r4, #1
 8008166:	9313      	str	r3, [sp, #76]	; 0x4c
 8008168:	e76f      	b.n	800804a <_dtoa_r+0x112>
 800816a:	2301      	movs	r3, #1
 800816c:	e7b2      	b.n	80080d4 <_dtoa_r+0x19c>
 800816e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008170:	e7b1      	b.n	80080d6 <_dtoa_r+0x19e>
 8008172:	9b06      	ldr	r3, [sp, #24]
 8008174:	eba3 030a 	sub.w	r3, r3, sl
 8008178:	9306      	str	r3, [sp, #24]
 800817a:	f1ca 0300 	rsb	r3, sl, #0
 800817e:	930a      	str	r3, [sp, #40]	; 0x28
 8008180:	2300      	movs	r3, #0
 8008182:	930e      	str	r3, [sp, #56]	; 0x38
 8008184:	e7be      	b.n	8008104 <_dtoa_r+0x1cc>
 8008186:	2300      	movs	r3, #0
 8008188:	930b      	str	r3, [sp, #44]	; 0x2c
 800818a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800818c:	2b00      	cmp	r3, #0
 800818e:	dc58      	bgt.n	8008242 <_dtoa_r+0x30a>
 8008190:	f04f 0901 	mov.w	r9, #1
 8008194:	464b      	mov	r3, r9
 8008196:	f8cd 9020 	str.w	r9, [sp, #32]
 800819a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800819e:	2200      	movs	r2, #0
 80081a0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80081a2:	6042      	str	r2, [r0, #4]
 80081a4:	2204      	movs	r2, #4
 80081a6:	f102 0614 	add.w	r6, r2, #20
 80081aa:	429e      	cmp	r6, r3
 80081ac:	6841      	ldr	r1, [r0, #4]
 80081ae:	d94e      	bls.n	800824e <_dtoa_r+0x316>
 80081b0:	4628      	mov	r0, r5
 80081b2:	f000 fda5 	bl	8008d00 <_Balloc>
 80081b6:	9003      	str	r0, [sp, #12]
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d14c      	bne.n	8008256 <_dtoa_r+0x31e>
 80081bc:	4602      	mov	r2, r0
 80081be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081c2:	4b17      	ldr	r3, [pc, #92]	; (8008220 <_dtoa_r+0x2e8>)
 80081c4:	e6cc      	b.n	8007f60 <_dtoa_r+0x28>
 80081c6:	2301      	movs	r3, #1
 80081c8:	e7de      	b.n	8008188 <_dtoa_r+0x250>
 80081ca:	2300      	movs	r3, #0
 80081cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80081ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081d0:	eb0a 0903 	add.w	r9, sl, r3
 80081d4:	f109 0301 	add.w	r3, r9, #1
 80081d8:	2b01      	cmp	r3, #1
 80081da:	9308      	str	r3, [sp, #32]
 80081dc:	bfb8      	it	lt
 80081de:	2301      	movlt	r3, #1
 80081e0:	e7dd      	b.n	800819e <_dtoa_r+0x266>
 80081e2:	2301      	movs	r3, #1
 80081e4:	e7f2      	b.n	80081cc <_dtoa_r+0x294>
 80081e6:	bf00      	nop
 80081e8:	636f4361 	.word	0x636f4361
 80081ec:	3fd287a7 	.word	0x3fd287a7
 80081f0:	8b60c8b3 	.word	0x8b60c8b3
 80081f4:	3fc68a28 	.word	0x3fc68a28
 80081f8:	509f79fb 	.word	0x509f79fb
 80081fc:	3fd34413 	.word	0x3fd34413
 8008200:	08009ccd 	.word	0x08009ccd
 8008204:	08009ce4 	.word	0x08009ce4
 8008208:	7ff00000 	.word	0x7ff00000
 800820c:	08009cc9 	.word	0x08009cc9
 8008210:	08009cc0 	.word	0x08009cc0
 8008214:	08009c9d 	.word	0x08009c9d
 8008218:	3ff80000 	.word	0x3ff80000
 800821c:	08009dd8 	.word	0x08009dd8
 8008220:	08009d3f 	.word	0x08009d3f
 8008224:	2401      	movs	r4, #1
 8008226:	2300      	movs	r3, #0
 8008228:	940b      	str	r4, [sp, #44]	; 0x2c
 800822a:	9322      	str	r3, [sp, #136]	; 0x88
 800822c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008230:	2200      	movs	r2, #0
 8008232:	2312      	movs	r3, #18
 8008234:	f8cd 9020 	str.w	r9, [sp, #32]
 8008238:	9223      	str	r2, [sp, #140]	; 0x8c
 800823a:	e7b0      	b.n	800819e <_dtoa_r+0x266>
 800823c:	2301      	movs	r3, #1
 800823e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008240:	e7f4      	b.n	800822c <_dtoa_r+0x2f4>
 8008242:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008246:	464b      	mov	r3, r9
 8008248:	f8cd 9020 	str.w	r9, [sp, #32]
 800824c:	e7a7      	b.n	800819e <_dtoa_r+0x266>
 800824e:	3101      	adds	r1, #1
 8008250:	6041      	str	r1, [r0, #4]
 8008252:	0052      	lsls	r2, r2, #1
 8008254:	e7a7      	b.n	80081a6 <_dtoa_r+0x26e>
 8008256:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008258:	9a03      	ldr	r2, [sp, #12]
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	9b08      	ldr	r3, [sp, #32]
 800825e:	2b0e      	cmp	r3, #14
 8008260:	f200 80a8 	bhi.w	80083b4 <_dtoa_r+0x47c>
 8008264:	2c00      	cmp	r4, #0
 8008266:	f000 80a5 	beq.w	80083b4 <_dtoa_r+0x47c>
 800826a:	f1ba 0f00 	cmp.w	sl, #0
 800826e:	dd34      	ble.n	80082da <_dtoa_r+0x3a2>
 8008270:	4a9a      	ldr	r2, [pc, #616]	; (80084dc <_dtoa_r+0x5a4>)
 8008272:	f00a 030f 	and.w	r3, sl, #15
 8008276:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800827a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800827e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008282:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008286:	ea4f 142a 	mov.w	r4, sl, asr #4
 800828a:	d016      	beq.n	80082ba <_dtoa_r+0x382>
 800828c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008290:	4b93      	ldr	r3, [pc, #588]	; (80084e0 <_dtoa_r+0x5a8>)
 8008292:	2703      	movs	r7, #3
 8008294:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008298:	f7f8 fa48 	bl	800072c <__aeabi_ddiv>
 800829c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082a0:	f004 040f 	and.w	r4, r4, #15
 80082a4:	4e8e      	ldr	r6, [pc, #568]	; (80084e0 <_dtoa_r+0x5a8>)
 80082a6:	b954      	cbnz	r4, 80082be <_dtoa_r+0x386>
 80082a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082b0:	f7f8 fa3c 	bl	800072c <__aeabi_ddiv>
 80082b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082b8:	e029      	b.n	800830e <_dtoa_r+0x3d6>
 80082ba:	2702      	movs	r7, #2
 80082bc:	e7f2      	b.n	80082a4 <_dtoa_r+0x36c>
 80082be:	07e1      	lsls	r1, r4, #31
 80082c0:	d508      	bpl.n	80082d4 <_dtoa_r+0x39c>
 80082c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082ca:	f7f8 f905 	bl	80004d8 <__aeabi_dmul>
 80082ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80082d2:	3701      	adds	r7, #1
 80082d4:	1064      	asrs	r4, r4, #1
 80082d6:	3608      	adds	r6, #8
 80082d8:	e7e5      	b.n	80082a6 <_dtoa_r+0x36e>
 80082da:	f000 80a5 	beq.w	8008428 <_dtoa_r+0x4f0>
 80082de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082e2:	f1ca 0400 	rsb	r4, sl, #0
 80082e6:	4b7d      	ldr	r3, [pc, #500]	; (80084dc <_dtoa_r+0x5a4>)
 80082e8:	f004 020f 	and.w	r2, r4, #15
 80082ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f4:	f7f8 f8f0 	bl	80004d8 <__aeabi_dmul>
 80082f8:	2702      	movs	r7, #2
 80082fa:	2300      	movs	r3, #0
 80082fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008300:	4e77      	ldr	r6, [pc, #476]	; (80084e0 <_dtoa_r+0x5a8>)
 8008302:	1124      	asrs	r4, r4, #4
 8008304:	2c00      	cmp	r4, #0
 8008306:	f040 8084 	bne.w	8008412 <_dtoa_r+0x4da>
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1d2      	bne.n	80082b4 <_dtoa_r+0x37c>
 800830e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 808b 	beq.w	800842c <_dtoa_r+0x4f4>
 8008316:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800831a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800831e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008322:	2200      	movs	r2, #0
 8008324:	4b6f      	ldr	r3, [pc, #444]	; (80084e4 <_dtoa_r+0x5ac>)
 8008326:	f7f8 fb49 	bl	80009bc <__aeabi_dcmplt>
 800832a:	2800      	cmp	r0, #0
 800832c:	d07e      	beq.n	800842c <_dtoa_r+0x4f4>
 800832e:	9b08      	ldr	r3, [sp, #32]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d07b      	beq.n	800842c <_dtoa_r+0x4f4>
 8008334:	f1b9 0f00 	cmp.w	r9, #0
 8008338:	dd38      	ble.n	80083ac <_dtoa_r+0x474>
 800833a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800833e:	2200      	movs	r2, #0
 8008340:	4b69      	ldr	r3, [pc, #420]	; (80084e8 <_dtoa_r+0x5b0>)
 8008342:	f7f8 f8c9 	bl	80004d8 <__aeabi_dmul>
 8008346:	464c      	mov	r4, r9
 8008348:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800834c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8008350:	3701      	adds	r7, #1
 8008352:	4638      	mov	r0, r7
 8008354:	f7f8 f856 	bl	8000404 <__aeabi_i2d>
 8008358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800835c:	f7f8 f8bc 	bl	80004d8 <__aeabi_dmul>
 8008360:	2200      	movs	r2, #0
 8008362:	4b62      	ldr	r3, [pc, #392]	; (80084ec <_dtoa_r+0x5b4>)
 8008364:	f7f7 ff02 	bl	800016c <__adddf3>
 8008368:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800836c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008370:	9611      	str	r6, [sp, #68]	; 0x44
 8008372:	2c00      	cmp	r4, #0
 8008374:	d15d      	bne.n	8008432 <_dtoa_r+0x4fa>
 8008376:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800837a:	2200      	movs	r2, #0
 800837c:	4b5c      	ldr	r3, [pc, #368]	; (80084f0 <_dtoa_r+0x5b8>)
 800837e:	f7f7 fef3 	bl	8000168 <__aeabi_dsub>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800838a:	4633      	mov	r3, r6
 800838c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800838e:	f7f8 fb33 	bl	80009f8 <__aeabi_dcmpgt>
 8008392:	2800      	cmp	r0, #0
 8008394:	f040 829c 	bne.w	80088d0 <_dtoa_r+0x998>
 8008398:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800839c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800839e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80083a2:	f7f8 fb0b 	bl	80009bc <__aeabi_dcmplt>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	f040 8290 	bne.w	80088cc <_dtoa_r+0x994>
 80083ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80083b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80083b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f2c0 8152 	blt.w	8008660 <_dtoa_r+0x728>
 80083bc:	f1ba 0f0e 	cmp.w	sl, #14
 80083c0:	f300 814e 	bgt.w	8008660 <_dtoa_r+0x728>
 80083c4:	4b45      	ldr	r3, [pc, #276]	; (80084dc <_dtoa_r+0x5a4>)
 80083c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80083ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80083d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f280 80db 	bge.w	8008590 <_dtoa_r+0x658>
 80083da:	9b08      	ldr	r3, [sp, #32]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f300 80d7 	bgt.w	8008590 <_dtoa_r+0x658>
 80083e2:	f040 8272 	bne.w	80088ca <_dtoa_r+0x992>
 80083e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083ea:	2200      	movs	r2, #0
 80083ec:	4b40      	ldr	r3, [pc, #256]	; (80084f0 <_dtoa_r+0x5b8>)
 80083ee:	f7f8 f873 	bl	80004d8 <__aeabi_dmul>
 80083f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083f6:	f7f8 faf5 	bl	80009e4 <__aeabi_dcmpge>
 80083fa:	9c08      	ldr	r4, [sp, #32]
 80083fc:	4626      	mov	r6, r4
 80083fe:	2800      	cmp	r0, #0
 8008400:	f040 8248 	bne.w	8008894 <_dtoa_r+0x95c>
 8008404:	2331      	movs	r3, #49	; 0x31
 8008406:	9f03      	ldr	r7, [sp, #12]
 8008408:	f10a 0a01 	add.w	sl, sl, #1
 800840c:	f807 3b01 	strb.w	r3, [r7], #1
 8008410:	e244      	b.n	800889c <_dtoa_r+0x964>
 8008412:	07e2      	lsls	r2, r4, #31
 8008414:	d505      	bpl.n	8008422 <_dtoa_r+0x4ea>
 8008416:	e9d6 2300 	ldrd	r2, r3, [r6]
 800841a:	f7f8 f85d 	bl	80004d8 <__aeabi_dmul>
 800841e:	2301      	movs	r3, #1
 8008420:	3701      	adds	r7, #1
 8008422:	1064      	asrs	r4, r4, #1
 8008424:	3608      	adds	r6, #8
 8008426:	e76d      	b.n	8008304 <_dtoa_r+0x3cc>
 8008428:	2702      	movs	r7, #2
 800842a:	e770      	b.n	800830e <_dtoa_r+0x3d6>
 800842c:	46d0      	mov	r8, sl
 800842e:	9c08      	ldr	r4, [sp, #32]
 8008430:	e78f      	b.n	8008352 <_dtoa_r+0x41a>
 8008432:	9903      	ldr	r1, [sp, #12]
 8008434:	4b29      	ldr	r3, [pc, #164]	; (80084dc <_dtoa_r+0x5a4>)
 8008436:	4421      	add	r1, r4
 8008438:	9112      	str	r1, [sp, #72]	; 0x48
 800843a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800843c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008440:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008444:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008448:	2900      	cmp	r1, #0
 800844a:	d055      	beq.n	80084f8 <_dtoa_r+0x5c0>
 800844c:	2000      	movs	r0, #0
 800844e:	4929      	ldr	r1, [pc, #164]	; (80084f4 <_dtoa_r+0x5bc>)
 8008450:	f7f8 f96c 	bl	800072c <__aeabi_ddiv>
 8008454:	463b      	mov	r3, r7
 8008456:	4632      	mov	r2, r6
 8008458:	f7f7 fe86 	bl	8000168 <__aeabi_dsub>
 800845c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008460:	9f03      	ldr	r7, [sp, #12]
 8008462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008466:	f7f8 fae7 	bl	8000a38 <__aeabi_d2iz>
 800846a:	4604      	mov	r4, r0
 800846c:	f7f7 ffca 	bl	8000404 <__aeabi_i2d>
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008478:	f7f7 fe76 	bl	8000168 <__aeabi_dsub>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	3430      	adds	r4, #48	; 0x30
 8008482:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008486:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800848a:	f807 4b01 	strb.w	r4, [r7], #1
 800848e:	f7f8 fa95 	bl	80009bc <__aeabi_dcmplt>
 8008492:	2800      	cmp	r0, #0
 8008494:	d174      	bne.n	8008580 <_dtoa_r+0x648>
 8008496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800849a:	2000      	movs	r0, #0
 800849c:	4911      	ldr	r1, [pc, #68]	; (80084e4 <_dtoa_r+0x5ac>)
 800849e:	f7f7 fe63 	bl	8000168 <__aeabi_dsub>
 80084a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80084a6:	f7f8 fa89 	bl	80009bc <__aeabi_dcmplt>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	f040 80b7 	bne.w	800861e <_dtoa_r+0x6e6>
 80084b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084b2:	429f      	cmp	r7, r3
 80084b4:	f43f af7a 	beq.w	80083ac <_dtoa_r+0x474>
 80084b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80084bc:	2200      	movs	r2, #0
 80084be:	4b0a      	ldr	r3, [pc, #40]	; (80084e8 <_dtoa_r+0x5b0>)
 80084c0:	f7f8 f80a 	bl	80004d8 <__aeabi_dmul>
 80084c4:	2200      	movs	r2, #0
 80084c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80084ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084ce:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <_dtoa_r+0x5b0>)
 80084d0:	f7f8 f802 	bl	80004d8 <__aeabi_dmul>
 80084d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084d8:	e7c3      	b.n	8008462 <_dtoa_r+0x52a>
 80084da:	bf00      	nop
 80084dc:	08009dd8 	.word	0x08009dd8
 80084e0:	08009db0 	.word	0x08009db0
 80084e4:	3ff00000 	.word	0x3ff00000
 80084e8:	40240000 	.word	0x40240000
 80084ec:	401c0000 	.word	0x401c0000
 80084f0:	40140000 	.word	0x40140000
 80084f4:	3fe00000 	.word	0x3fe00000
 80084f8:	4630      	mov	r0, r6
 80084fa:	4639      	mov	r1, r7
 80084fc:	f7f7 ffec 	bl	80004d8 <__aeabi_dmul>
 8008500:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008502:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008506:	9c03      	ldr	r4, [sp, #12]
 8008508:	9314      	str	r3, [sp, #80]	; 0x50
 800850a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800850e:	f7f8 fa93 	bl	8000a38 <__aeabi_d2iz>
 8008512:	9015      	str	r0, [sp, #84]	; 0x54
 8008514:	f7f7 ff76 	bl	8000404 <__aeabi_i2d>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008520:	f7f7 fe22 	bl	8000168 <__aeabi_dsub>
 8008524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008526:	4606      	mov	r6, r0
 8008528:	3330      	adds	r3, #48	; 0x30
 800852a:	f804 3b01 	strb.w	r3, [r4], #1
 800852e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008530:	460f      	mov	r7, r1
 8008532:	429c      	cmp	r4, r3
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	d124      	bne.n	8008584 <_dtoa_r+0x64c>
 800853a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800853e:	4bb0      	ldr	r3, [pc, #704]	; (8008800 <_dtoa_r+0x8c8>)
 8008540:	f7f7 fe14 	bl	800016c <__adddf3>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4630      	mov	r0, r6
 800854a:	4639      	mov	r1, r7
 800854c:	f7f8 fa54 	bl	80009f8 <__aeabi_dcmpgt>
 8008550:	2800      	cmp	r0, #0
 8008552:	d163      	bne.n	800861c <_dtoa_r+0x6e4>
 8008554:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008558:	2000      	movs	r0, #0
 800855a:	49a9      	ldr	r1, [pc, #676]	; (8008800 <_dtoa_r+0x8c8>)
 800855c:	f7f7 fe04 	bl	8000168 <__aeabi_dsub>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4630      	mov	r0, r6
 8008566:	4639      	mov	r1, r7
 8008568:	f7f8 fa28 	bl	80009bc <__aeabi_dcmplt>
 800856c:	2800      	cmp	r0, #0
 800856e:	f43f af1d 	beq.w	80083ac <_dtoa_r+0x474>
 8008572:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008574:	1e7b      	subs	r3, r7, #1
 8008576:	9314      	str	r3, [sp, #80]	; 0x50
 8008578:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800857c:	2b30      	cmp	r3, #48	; 0x30
 800857e:	d0f8      	beq.n	8008572 <_dtoa_r+0x63a>
 8008580:	46c2      	mov	sl, r8
 8008582:	e03b      	b.n	80085fc <_dtoa_r+0x6c4>
 8008584:	4b9f      	ldr	r3, [pc, #636]	; (8008804 <_dtoa_r+0x8cc>)
 8008586:	f7f7 ffa7 	bl	80004d8 <__aeabi_dmul>
 800858a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800858e:	e7bc      	b.n	800850a <_dtoa_r+0x5d2>
 8008590:	9f03      	ldr	r7, [sp, #12]
 8008592:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008596:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800859a:	4640      	mov	r0, r8
 800859c:	4649      	mov	r1, r9
 800859e:	f7f8 f8c5 	bl	800072c <__aeabi_ddiv>
 80085a2:	f7f8 fa49 	bl	8000a38 <__aeabi_d2iz>
 80085a6:	4604      	mov	r4, r0
 80085a8:	f7f7 ff2c 	bl	8000404 <__aeabi_i2d>
 80085ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085b0:	f7f7 ff92 	bl	80004d8 <__aeabi_dmul>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4640      	mov	r0, r8
 80085ba:	4649      	mov	r1, r9
 80085bc:	f7f7 fdd4 	bl	8000168 <__aeabi_dsub>
 80085c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80085c4:	f807 6b01 	strb.w	r6, [r7], #1
 80085c8:	9e03      	ldr	r6, [sp, #12]
 80085ca:	f8dd c020 	ldr.w	ip, [sp, #32]
 80085ce:	1bbe      	subs	r6, r7, r6
 80085d0:	45b4      	cmp	ip, r6
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	d136      	bne.n	8008646 <_dtoa_r+0x70e>
 80085d8:	f7f7 fdc8 	bl	800016c <__adddf3>
 80085dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085e0:	4680      	mov	r8, r0
 80085e2:	4689      	mov	r9, r1
 80085e4:	f7f8 fa08 	bl	80009f8 <__aeabi_dcmpgt>
 80085e8:	bb58      	cbnz	r0, 8008642 <_dtoa_r+0x70a>
 80085ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085ee:	4640      	mov	r0, r8
 80085f0:	4649      	mov	r1, r9
 80085f2:	f7f8 f9d9 	bl	80009a8 <__aeabi_dcmpeq>
 80085f6:	b108      	cbz	r0, 80085fc <_dtoa_r+0x6c4>
 80085f8:	07e1      	lsls	r1, r4, #31
 80085fa:	d422      	bmi.n	8008642 <_dtoa_r+0x70a>
 80085fc:	4628      	mov	r0, r5
 80085fe:	4659      	mov	r1, fp
 8008600:	f000 fbbe 	bl	8008d80 <_Bfree>
 8008604:	2300      	movs	r3, #0
 8008606:	703b      	strb	r3, [r7, #0]
 8008608:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800860a:	f10a 0001 	add.w	r0, sl, #1
 800860e:	6018      	str	r0, [r3, #0]
 8008610:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008612:	2b00      	cmp	r3, #0
 8008614:	f43f acde 	beq.w	8007fd4 <_dtoa_r+0x9c>
 8008618:	601f      	str	r7, [r3, #0]
 800861a:	e4db      	b.n	8007fd4 <_dtoa_r+0x9c>
 800861c:	4627      	mov	r7, r4
 800861e:	463b      	mov	r3, r7
 8008620:	461f      	mov	r7, r3
 8008622:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008626:	2a39      	cmp	r2, #57	; 0x39
 8008628:	d107      	bne.n	800863a <_dtoa_r+0x702>
 800862a:	9a03      	ldr	r2, [sp, #12]
 800862c:	429a      	cmp	r2, r3
 800862e:	d1f7      	bne.n	8008620 <_dtoa_r+0x6e8>
 8008630:	2230      	movs	r2, #48	; 0x30
 8008632:	9903      	ldr	r1, [sp, #12]
 8008634:	f108 0801 	add.w	r8, r8, #1
 8008638:	700a      	strb	r2, [r1, #0]
 800863a:	781a      	ldrb	r2, [r3, #0]
 800863c:	3201      	adds	r2, #1
 800863e:	701a      	strb	r2, [r3, #0]
 8008640:	e79e      	b.n	8008580 <_dtoa_r+0x648>
 8008642:	46d0      	mov	r8, sl
 8008644:	e7eb      	b.n	800861e <_dtoa_r+0x6e6>
 8008646:	2200      	movs	r2, #0
 8008648:	4b6e      	ldr	r3, [pc, #440]	; (8008804 <_dtoa_r+0x8cc>)
 800864a:	f7f7 ff45 	bl	80004d8 <__aeabi_dmul>
 800864e:	2200      	movs	r2, #0
 8008650:	2300      	movs	r3, #0
 8008652:	4680      	mov	r8, r0
 8008654:	4689      	mov	r9, r1
 8008656:	f7f8 f9a7 	bl	80009a8 <__aeabi_dcmpeq>
 800865a:	2800      	cmp	r0, #0
 800865c:	d09b      	beq.n	8008596 <_dtoa_r+0x65e>
 800865e:	e7cd      	b.n	80085fc <_dtoa_r+0x6c4>
 8008660:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008662:	2a00      	cmp	r2, #0
 8008664:	f000 80d0 	beq.w	8008808 <_dtoa_r+0x8d0>
 8008668:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800866a:	2a01      	cmp	r2, #1
 800866c:	f300 80ae 	bgt.w	80087cc <_dtoa_r+0x894>
 8008670:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008672:	2a00      	cmp	r2, #0
 8008674:	f000 80a6 	beq.w	80087c4 <_dtoa_r+0x88c>
 8008678:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800867c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800867e:	9f06      	ldr	r7, [sp, #24]
 8008680:	9a06      	ldr	r2, [sp, #24]
 8008682:	2101      	movs	r1, #1
 8008684:	441a      	add	r2, r3
 8008686:	9206      	str	r2, [sp, #24]
 8008688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800868a:	4628      	mov	r0, r5
 800868c:	441a      	add	r2, r3
 800868e:	9209      	str	r2, [sp, #36]	; 0x24
 8008690:	f000 fc2c 	bl	8008eec <__i2b>
 8008694:	4606      	mov	r6, r0
 8008696:	2f00      	cmp	r7, #0
 8008698:	dd0c      	ble.n	80086b4 <_dtoa_r+0x77c>
 800869a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869c:	2b00      	cmp	r3, #0
 800869e:	dd09      	ble.n	80086b4 <_dtoa_r+0x77c>
 80086a0:	42bb      	cmp	r3, r7
 80086a2:	bfa8      	it	ge
 80086a4:	463b      	movge	r3, r7
 80086a6:	9a06      	ldr	r2, [sp, #24]
 80086a8:	1aff      	subs	r7, r7, r3
 80086aa:	1ad2      	subs	r2, r2, r3
 80086ac:	9206      	str	r2, [sp, #24]
 80086ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	9309      	str	r3, [sp, #36]	; 0x24
 80086b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b6:	b1f3      	cbz	r3, 80086f6 <_dtoa_r+0x7be>
 80086b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f000 80a8 	beq.w	8008810 <_dtoa_r+0x8d8>
 80086c0:	2c00      	cmp	r4, #0
 80086c2:	dd10      	ble.n	80086e6 <_dtoa_r+0x7ae>
 80086c4:	4631      	mov	r1, r6
 80086c6:	4622      	mov	r2, r4
 80086c8:	4628      	mov	r0, r5
 80086ca:	f000 fccd 	bl	8009068 <__pow5mult>
 80086ce:	465a      	mov	r2, fp
 80086d0:	4601      	mov	r1, r0
 80086d2:	4606      	mov	r6, r0
 80086d4:	4628      	mov	r0, r5
 80086d6:	f000 fc1f 	bl	8008f18 <__multiply>
 80086da:	4680      	mov	r8, r0
 80086dc:	4659      	mov	r1, fp
 80086de:	4628      	mov	r0, r5
 80086e0:	f000 fb4e 	bl	8008d80 <_Bfree>
 80086e4:	46c3      	mov	fp, r8
 80086e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086e8:	1b1a      	subs	r2, r3, r4
 80086ea:	d004      	beq.n	80086f6 <_dtoa_r+0x7be>
 80086ec:	4659      	mov	r1, fp
 80086ee:	4628      	mov	r0, r5
 80086f0:	f000 fcba 	bl	8009068 <__pow5mult>
 80086f4:	4683      	mov	fp, r0
 80086f6:	2101      	movs	r1, #1
 80086f8:	4628      	mov	r0, r5
 80086fa:	f000 fbf7 	bl	8008eec <__i2b>
 80086fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008700:	4604      	mov	r4, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	f340 8086 	ble.w	8008814 <_dtoa_r+0x8dc>
 8008708:	461a      	mov	r2, r3
 800870a:	4601      	mov	r1, r0
 800870c:	4628      	mov	r0, r5
 800870e:	f000 fcab 	bl	8009068 <__pow5mult>
 8008712:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008714:	4604      	mov	r4, r0
 8008716:	2b01      	cmp	r3, #1
 8008718:	dd7f      	ble.n	800881a <_dtoa_r+0x8e2>
 800871a:	f04f 0800 	mov.w	r8, #0
 800871e:	6923      	ldr	r3, [r4, #16]
 8008720:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008724:	6918      	ldr	r0, [r3, #16]
 8008726:	f000 fb93 	bl	8008e50 <__hi0bits>
 800872a:	f1c0 0020 	rsb	r0, r0, #32
 800872e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008730:	4418      	add	r0, r3
 8008732:	f010 001f 	ands.w	r0, r0, #31
 8008736:	f000 8092 	beq.w	800885e <_dtoa_r+0x926>
 800873a:	f1c0 0320 	rsb	r3, r0, #32
 800873e:	2b04      	cmp	r3, #4
 8008740:	f340 808a 	ble.w	8008858 <_dtoa_r+0x920>
 8008744:	f1c0 001c 	rsb	r0, r0, #28
 8008748:	9b06      	ldr	r3, [sp, #24]
 800874a:	4407      	add	r7, r0
 800874c:	4403      	add	r3, r0
 800874e:	9306      	str	r3, [sp, #24]
 8008750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008752:	4403      	add	r3, r0
 8008754:	9309      	str	r3, [sp, #36]	; 0x24
 8008756:	9b06      	ldr	r3, [sp, #24]
 8008758:	2b00      	cmp	r3, #0
 800875a:	dd05      	ble.n	8008768 <_dtoa_r+0x830>
 800875c:	4659      	mov	r1, fp
 800875e:	461a      	mov	r2, r3
 8008760:	4628      	mov	r0, r5
 8008762:	f000 fcdb 	bl	800911c <__lshift>
 8008766:	4683      	mov	fp, r0
 8008768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800876a:	2b00      	cmp	r3, #0
 800876c:	dd05      	ble.n	800877a <_dtoa_r+0x842>
 800876e:	4621      	mov	r1, r4
 8008770:	461a      	mov	r2, r3
 8008772:	4628      	mov	r0, r5
 8008774:	f000 fcd2 	bl	800911c <__lshift>
 8008778:	4604      	mov	r4, r0
 800877a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800877c:	2b00      	cmp	r3, #0
 800877e:	d070      	beq.n	8008862 <_dtoa_r+0x92a>
 8008780:	4621      	mov	r1, r4
 8008782:	4658      	mov	r0, fp
 8008784:	f000 fd3a 	bl	80091fc <__mcmp>
 8008788:	2800      	cmp	r0, #0
 800878a:	da6a      	bge.n	8008862 <_dtoa_r+0x92a>
 800878c:	2300      	movs	r3, #0
 800878e:	4659      	mov	r1, fp
 8008790:	220a      	movs	r2, #10
 8008792:	4628      	mov	r0, r5
 8008794:	f000 fb16 	bl	8008dc4 <__multadd>
 8008798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800879a:	4683      	mov	fp, r0
 800879c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 8194 	beq.w	8008ace <_dtoa_r+0xb96>
 80087a6:	4631      	mov	r1, r6
 80087a8:	2300      	movs	r3, #0
 80087aa:	220a      	movs	r2, #10
 80087ac:	4628      	mov	r0, r5
 80087ae:	f000 fb09 	bl	8008dc4 <__multadd>
 80087b2:	f1b9 0f00 	cmp.w	r9, #0
 80087b6:	4606      	mov	r6, r0
 80087b8:	f300 8093 	bgt.w	80088e2 <_dtoa_r+0x9aa>
 80087bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087be:	2b02      	cmp	r3, #2
 80087c0:	dc57      	bgt.n	8008872 <_dtoa_r+0x93a>
 80087c2:	e08e      	b.n	80088e2 <_dtoa_r+0x9aa>
 80087c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80087c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087ca:	e757      	b.n	800867c <_dtoa_r+0x744>
 80087cc:	9b08      	ldr	r3, [sp, #32]
 80087ce:	1e5c      	subs	r4, r3, #1
 80087d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d2:	42a3      	cmp	r3, r4
 80087d4:	bfb7      	itett	lt
 80087d6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80087d8:	1b1c      	subge	r4, r3, r4
 80087da:	1ae2      	sublt	r2, r4, r3
 80087dc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80087de:	bfbe      	ittt	lt
 80087e0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80087e2:	189b      	addlt	r3, r3, r2
 80087e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80087e6:	9b08      	ldr	r3, [sp, #32]
 80087e8:	bfb8      	it	lt
 80087ea:	2400      	movlt	r4, #0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	bfbb      	ittet	lt
 80087f0:	9b06      	ldrlt	r3, [sp, #24]
 80087f2:	9a08      	ldrlt	r2, [sp, #32]
 80087f4:	9f06      	ldrge	r7, [sp, #24]
 80087f6:	1a9f      	sublt	r7, r3, r2
 80087f8:	bfac      	ite	ge
 80087fa:	9b08      	ldrge	r3, [sp, #32]
 80087fc:	2300      	movlt	r3, #0
 80087fe:	e73f      	b.n	8008680 <_dtoa_r+0x748>
 8008800:	3fe00000 	.word	0x3fe00000
 8008804:	40240000 	.word	0x40240000
 8008808:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800880a:	9f06      	ldr	r7, [sp, #24]
 800880c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800880e:	e742      	b.n	8008696 <_dtoa_r+0x75e>
 8008810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008812:	e76b      	b.n	80086ec <_dtoa_r+0x7b4>
 8008814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008816:	2b01      	cmp	r3, #1
 8008818:	dc19      	bgt.n	800884e <_dtoa_r+0x916>
 800881a:	9b04      	ldr	r3, [sp, #16]
 800881c:	b9bb      	cbnz	r3, 800884e <_dtoa_r+0x916>
 800881e:	9b05      	ldr	r3, [sp, #20]
 8008820:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008824:	b99b      	cbnz	r3, 800884e <_dtoa_r+0x916>
 8008826:	9b05      	ldr	r3, [sp, #20]
 8008828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800882c:	0d1b      	lsrs	r3, r3, #20
 800882e:	051b      	lsls	r3, r3, #20
 8008830:	b183      	cbz	r3, 8008854 <_dtoa_r+0x91c>
 8008832:	f04f 0801 	mov.w	r8, #1
 8008836:	9b06      	ldr	r3, [sp, #24]
 8008838:	3301      	adds	r3, #1
 800883a:	9306      	str	r3, [sp, #24]
 800883c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800883e:	3301      	adds	r3, #1
 8008840:	9309      	str	r3, [sp, #36]	; 0x24
 8008842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008844:	2b00      	cmp	r3, #0
 8008846:	f47f af6a 	bne.w	800871e <_dtoa_r+0x7e6>
 800884a:	2001      	movs	r0, #1
 800884c:	e76f      	b.n	800872e <_dtoa_r+0x7f6>
 800884e:	f04f 0800 	mov.w	r8, #0
 8008852:	e7f6      	b.n	8008842 <_dtoa_r+0x90a>
 8008854:	4698      	mov	r8, r3
 8008856:	e7f4      	b.n	8008842 <_dtoa_r+0x90a>
 8008858:	f43f af7d 	beq.w	8008756 <_dtoa_r+0x81e>
 800885c:	4618      	mov	r0, r3
 800885e:	301c      	adds	r0, #28
 8008860:	e772      	b.n	8008748 <_dtoa_r+0x810>
 8008862:	9b08      	ldr	r3, [sp, #32]
 8008864:	2b00      	cmp	r3, #0
 8008866:	dc36      	bgt.n	80088d6 <_dtoa_r+0x99e>
 8008868:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800886a:	2b02      	cmp	r3, #2
 800886c:	dd33      	ble.n	80088d6 <_dtoa_r+0x99e>
 800886e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008872:	f1b9 0f00 	cmp.w	r9, #0
 8008876:	d10d      	bne.n	8008894 <_dtoa_r+0x95c>
 8008878:	4621      	mov	r1, r4
 800887a:	464b      	mov	r3, r9
 800887c:	2205      	movs	r2, #5
 800887e:	4628      	mov	r0, r5
 8008880:	f000 faa0 	bl	8008dc4 <__multadd>
 8008884:	4601      	mov	r1, r0
 8008886:	4604      	mov	r4, r0
 8008888:	4658      	mov	r0, fp
 800888a:	f000 fcb7 	bl	80091fc <__mcmp>
 800888e:	2800      	cmp	r0, #0
 8008890:	f73f adb8 	bgt.w	8008404 <_dtoa_r+0x4cc>
 8008894:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008896:	9f03      	ldr	r7, [sp, #12]
 8008898:	ea6f 0a03 	mvn.w	sl, r3
 800889c:	f04f 0800 	mov.w	r8, #0
 80088a0:	4621      	mov	r1, r4
 80088a2:	4628      	mov	r0, r5
 80088a4:	f000 fa6c 	bl	8008d80 <_Bfree>
 80088a8:	2e00      	cmp	r6, #0
 80088aa:	f43f aea7 	beq.w	80085fc <_dtoa_r+0x6c4>
 80088ae:	f1b8 0f00 	cmp.w	r8, #0
 80088b2:	d005      	beq.n	80088c0 <_dtoa_r+0x988>
 80088b4:	45b0      	cmp	r8, r6
 80088b6:	d003      	beq.n	80088c0 <_dtoa_r+0x988>
 80088b8:	4641      	mov	r1, r8
 80088ba:	4628      	mov	r0, r5
 80088bc:	f000 fa60 	bl	8008d80 <_Bfree>
 80088c0:	4631      	mov	r1, r6
 80088c2:	4628      	mov	r0, r5
 80088c4:	f000 fa5c 	bl	8008d80 <_Bfree>
 80088c8:	e698      	b.n	80085fc <_dtoa_r+0x6c4>
 80088ca:	2400      	movs	r4, #0
 80088cc:	4626      	mov	r6, r4
 80088ce:	e7e1      	b.n	8008894 <_dtoa_r+0x95c>
 80088d0:	46c2      	mov	sl, r8
 80088d2:	4626      	mov	r6, r4
 80088d4:	e596      	b.n	8008404 <_dtoa_r+0x4cc>
 80088d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 80fd 	beq.w	8008adc <_dtoa_r+0xba4>
 80088e2:	2f00      	cmp	r7, #0
 80088e4:	dd05      	ble.n	80088f2 <_dtoa_r+0x9ba>
 80088e6:	4631      	mov	r1, r6
 80088e8:	463a      	mov	r2, r7
 80088ea:	4628      	mov	r0, r5
 80088ec:	f000 fc16 	bl	800911c <__lshift>
 80088f0:	4606      	mov	r6, r0
 80088f2:	f1b8 0f00 	cmp.w	r8, #0
 80088f6:	d05c      	beq.n	80089b2 <_dtoa_r+0xa7a>
 80088f8:	4628      	mov	r0, r5
 80088fa:	6871      	ldr	r1, [r6, #4]
 80088fc:	f000 fa00 	bl	8008d00 <_Balloc>
 8008900:	4607      	mov	r7, r0
 8008902:	b928      	cbnz	r0, 8008910 <_dtoa_r+0x9d8>
 8008904:	4602      	mov	r2, r0
 8008906:	f240 21ea 	movw	r1, #746	; 0x2ea
 800890a:	4b7f      	ldr	r3, [pc, #508]	; (8008b08 <_dtoa_r+0xbd0>)
 800890c:	f7ff bb28 	b.w	8007f60 <_dtoa_r+0x28>
 8008910:	6932      	ldr	r2, [r6, #16]
 8008912:	f106 010c 	add.w	r1, r6, #12
 8008916:	3202      	adds	r2, #2
 8008918:	0092      	lsls	r2, r2, #2
 800891a:	300c      	adds	r0, #12
 800891c:	f7fe fc7b 	bl	8007216 <memcpy>
 8008920:	2201      	movs	r2, #1
 8008922:	4639      	mov	r1, r7
 8008924:	4628      	mov	r0, r5
 8008926:	f000 fbf9 	bl	800911c <__lshift>
 800892a:	46b0      	mov	r8, r6
 800892c:	4606      	mov	r6, r0
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	3301      	adds	r3, #1
 8008932:	9308      	str	r3, [sp, #32]
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	444b      	add	r3, r9
 8008938:	930a      	str	r3, [sp, #40]	; 0x28
 800893a:	9b04      	ldr	r3, [sp, #16]
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	9309      	str	r3, [sp, #36]	; 0x24
 8008942:	9b08      	ldr	r3, [sp, #32]
 8008944:	4621      	mov	r1, r4
 8008946:	3b01      	subs	r3, #1
 8008948:	4658      	mov	r0, fp
 800894a:	9304      	str	r3, [sp, #16]
 800894c:	f7ff fa66 	bl	8007e1c <quorem>
 8008950:	4603      	mov	r3, r0
 8008952:	4641      	mov	r1, r8
 8008954:	3330      	adds	r3, #48	; 0x30
 8008956:	9006      	str	r0, [sp, #24]
 8008958:	4658      	mov	r0, fp
 800895a:	930b      	str	r3, [sp, #44]	; 0x2c
 800895c:	f000 fc4e 	bl	80091fc <__mcmp>
 8008960:	4632      	mov	r2, r6
 8008962:	4681      	mov	r9, r0
 8008964:	4621      	mov	r1, r4
 8008966:	4628      	mov	r0, r5
 8008968:	f000 fc64 	bl	8009234 <__mdiff>
 800896c:	68c2      	ldr	r2, [r0, #12]
 800896e:	4607      	mov	r7, r0
 8008970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008972:	bb02      	cbnz	r2, 80089b6 <_dtoa_r+0xa7e>
 8008974:	4601      	mov	r1, r0
 8008976:	4658      	mov	r0, fp
 8008978:	f000 fc40 	bl	80091fc <__mcmp>
 800897c:	4602      	mov	r2, r0
 800897e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008980:	4639      	mov	r1, r7
 8008982:	4628      	mov	r0, r5
 8008984:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008988:	f000 f9fa 	bl	8008d80 <_Bfree>
 800898c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800898e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008990:	9f08      	ldr	r7, [sp, #32]
 8008992:	ea43 0102 	orr.w	r1, r3, r2
 8008996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008998:	430b      	orrs	r3, r1
 800899a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800899c:	d10d      	bne.n	80089ba <_dtoa_r+0xa82>
 800899e:	2b39      	cmp	r3, #57	; 0x39
 80089a0:	d029      	beq.n	80089f6 <_dtoa_r+0xabe>
 80089a2:	f1b9 0f00 	cmp.w	r9, #0
 80089a6:	dd01      	ble.n	80089ac <_dtoa_r+0xa74>
 80089a8:	9b06      	ldr	r3, [sp, #24]
 80089aa:	3331      	adds	r3, #49	; 0x31
 80089ac:	9a04      	ldr	r2, [sp, #16]
 80089ae:	7013      	strb	r3, [r2, #0]
 80089b0:	e776      	b.n	80088a0 <_dtoa_r+0x968>
 80089b2:	4630      	mov	r0, r6
 80089b4:	e7b9      	b.n	800892a <_dtoa_r+0x9f2>
 80089b6:	2201      	movs	r2, #1
 80089b8:	e7e2      	b.n	8008980 <_dtoa_r+0xa48>
 80089ba:	f1b9 0f00 	cmp.w	r9, #0
 80089be:	db06      	blt.n	80089ce <_dtoa_r+0xa96>
 80089c0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80089c2:	ea41 0909 	orr.w	r9, r1, r9
 80089c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089c8:	ea59 0101 	orrs.w	r1, r9, r1
 80089cc:	d120      	bne.n	8008a10 <_dtoa_r+0xad8>
 80089ce:	2a00      	cmp	r2, #0
 80089d0:	ddec      	ble.n	80089ac <_dtoa_r+0xa74>
 80089d2:	4659      	mov	r1, fp
 80089d4:	2201      	movs	r2, #1
 80089d6:	4628      	mov	r0, r5
 80089d8:	9308      	str	r3, [sp, #32]
 80089da:	f000 fb9f 	bl	800911c <__lshift>
 80089de:	4621      	mov	r1, r4
 80089e0:	4683      	mov	fp, r0
 80089e2:	f000 fc0b 	bl	80091fc <__mcmp>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	9b08      	ldr	r3, [sp, #32]
 80089ea:	dc02      	bgt.n	80089f2 <_dtoa_r+0xaba>
 80089ec:	d1de      	bne.n	80089ac <_dtoa_r+0xa74>
 80089ee:	07da      	lsls	r2, r3, #31
 80089f0:	d5dc      	bpl.n	80089ac <_dtoa_r+0xa74>
 80089f2:	2b39      	cmp	r3, #57	; 0x39
 80089f4:	d1d8      	bne.n	80089a8 <_dtoa_r+0xa70>
 80089f6:	2339      	movs	r3, #57	; 0x39
 80089f8:	9a04      	ldr	r2, [sp, #16]
 80089fa:	7013      	strb	r3, [r2, #0]
 80089fc:	463b      	mov	r3, r7
 80089fe:	461f      	mov	r7, r3
 8008a00:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008a04:	3b01      	subs	r3, #1
 8008a06:	2a39      	cmp	r2, #57	; 0x39
 8008a08:	d050      	beq.n	8008aac <_dtoa_r+0xb74>
 8008a0a:	3201      	adds	r2, #1
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	e747      	b.n	80088a0 <_dtoa_r+0x968>
 8008a10:	2a00      	cmp	r2, #0
 8008a12:	dd03      	ble.n	8008a1c <_dtoa_r+0xae4>
 8008a14:	2b39      	cmp	r3, #57	; 0x39
 8008a16:	d0ee      	beq.n	80089f6 <_dtoa_r+0xabe>
 8008a18:	3301      	adds	r3, #1
 8008a1a:	e7c7      	b.n	80089ac <_dtoa_r+0xa74>
 8008a1c:	9a08      	ldr	r2, [sp, #32]
 8008a1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a20:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a24:	428a      	cmp	r2, r1
 8008a26:	d02a      	beq.n	8008a7e <_dtoa_r+0xb46>
 8008a28:	4659      	mov	r1, fp
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	220a      	movs	r2, #10
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f000 f9c8 	bl	8008dc4 <__multadd>
 8008a34:	45b0      	cmp	r8, r6
 8008a36:	4683      	mov	fp, r0
 8008a38:	f04f 0300 	mov.w	r3, #0
 8008a3c:	f04f 020a 	mov.w	r2, #10
 8008a40:	4641      	mov	r1, r8
 8008a42:	4628      	mov	r0, r5
 8008a44:	d107      	bne.n	8008a56 <_dtoa_r+0xb1e>
 8008a46:	f000 f9bd 	bl	8008dc4 <__multadd>
 8008a4a:	4680      	mov	r8, r0
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	9b08      	ldr	r3, [sp, #32]
 8008a50:	3301      	adds	r3, #1
 8008a52:	9308      	str	r3, [sp, #32]
 8008a54:	e775      	b.n	8008942 <_dtoa_r+0xa0a>
 8008a56:	f000 f9b5 	bl	8008dc4 <__multadd>
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	4680      	mov	r8, r0
 8008a5e:	2300      	movs	r3, #0
 8008a60:	220a      	movs	r2, #10
 8008a62:	4628      	mov	r0, r5
 8008a64:	f000 f9ae 	bl	8008dc4 <__multadd>
 8008a68:	4606      	mov	r6, r0
 8008a6a:	e7f0      	b.n	8008a4e <_dtoa_r+0xb16>
 8008a6c:	f1b9 0f00 	cmp.w	r9, #0
 8008a70:	bfcc      	ite	gt
 8008a72:	464f      	movgt	r7, r9
 8008a74:	2701      	movle	r7, #1
 8008a76:	f04f 0800 	mov.w	r8, #0
 8008a7a:	9a03      	ldr	r2, [sp, #12]
 8008a7c:	4417      	add	r7, r2
 8008a7e:	4659      	mov	r1, fp
 8008a80:	2201      	movs	r2, #1
 8008a82:	4628      	mov	r0, r5
 8008a84:	9308      	str	r3, [sp, #32]
 8008a86:	f000 fb49 	bl	800911c <__lshift>
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4683      	mov	fp, r0
 8008a8e:	f000 fbb5 	bl	80091fc <__mcmp>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	dcb2      	bgt.n	80089fc <_dtoa_r+0xac4>
 8008a96:	d102      	bne.n	8008a9e <_dtoa_r+0xb66>
 8008a98:	9b08      	ldr	r3, [sp, #32]
 8008a9a:	07db      	lsls	r3, r3, #31
 8008a9c:	d4ae      	bmi.n	80089fc <_dtoa_r+0xac4>
 8008a9e:	463b      	mov	r3, r7
 8008aa0:	461f      	mov	r7, r3
 8008aa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aa6:	2a30      	cmp	r2, #48	; 0x30
 8008aa8:	d0fa      	beq.n	8008aa0 <_dtoa_r+0xb68>
 8008aaa:	e6f9      	b.n	80088a0 <_dtoa_r+0x968>
 8008aac:	9a03      	ldr	r2, [sp, #12]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d1a5      	bne.n	80089fe <_dtoa_r+0xac6>
 8008ab2:	2331      	movs	r3, #49	; 0x31
 8008ab4:	f10a 0a01 	add.w	sl, sl, #1
 8008ab8:	e779      	b.n	80089ae <_dtoa_r+0xa76>
 8008aba:	4b14      	ldr	r3, [pc, #80]	; (8008b0c <_dtoa_r+0xbd4>)
 8008abc:	f7ff baa8 	b.w	8008010 <_dtoa_r+0xd8>
 8008ac0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f47f aa81 	bne.w	8007fca <_dtoa_r+0x92>
 8008ac8:	4b11      	ldr	r3, [pc, #68]	; (8008b10 <_dtoa_r+0xbd8>)
 8008aca:	f7ff baa1 	b.w	8008010 <_dtoa_r+0xd8>
 8008ace:	f1b9 0f00 	cmp.w	r9, #0
 8008ad2:	dc03      	bgt.n	8008adc <_dtoa_r+0xba4>
 8008ad4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	f73f aecb 	bgt.w	8008872 <_dtoa_r+0x93a>
 8008adc:	9f03      	ldr	r7, [sp, #12]
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4658      	mov	r0, fp
 8008ae2:	f7ff f99b 	bl	8007e1c <quorem>
 8008ae6:	9a03      	ldr	r2, [sp, #12]
 8008ae8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008aec:	f807 3b01 	strb.w	r3, [r7], #1
 8008af0:	1aba      	subs	r2, r7, r2
 8008af2:	4591      	cmp	r9, r2
 8008af4:	ddba      	ble.n	8008a6c <_dtoa_r+0xb34>
 8008af6:	4659      	mov	r1, fp
 8008af8:	2300      	movs	r3, #0
 8008afa:	220a      	movs	r2, #10
 8008afc:	4628      	mov	r0, r5
 8008afe:	f000 f961 	bl	8008dc4 <__multadd>
 8008b02:	4683      	mov	fp, r0
 8008b04:	e7eb      	b.n	8008ade <_dtoa_r+0xba6>
 8008b06:	bf00      	nop
 8008b08:	08009d3f 	.word	0x08009d3f
 8008b0c:	08009c9c 	.word	0x08009c9c
 8008b10:	08009cc0 	.word	0x08009cc0

08008b14 <__sflush_r>:
 8008b14:	898a      	ldrh	r2, [r1, #12]
 8008b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b18:	4605      	mov	r5, r0
 8008b1a:	0710      	lsls	r0, r2, #28
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	d457      	bmi.n	8008bd0 <__sflush_r+0xbc>
 8008b20:	684b      	ldr	r3, [r1, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	dc04      	bgt.n	8008b30 <__sflush_r+0x1c>
 8008b26:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	dc01      	bgt.n	8008b30 <__sflush_r+0x1c>
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b32:	2e00      	cmp	r6, #0
 8008b34:	d0fa      	beq.n	8008b2c <__sflush_r+0x18>
 8008b36:	2300      	movs	r3, #0
 8008b38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b3c:	682f      	ldr	r7, [r5, #0]
 8008b3e:	602b      	str	r3, [r5, #0]
 8008b40:	d032      	beq.n	8008ba8 <__sflush_r+0x94>
 8008b42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	075a      	lsls	r2, r3, #29
 8008b48:	d505      	bpl.n	8008b56 <__sflush_r+0x42>
 8008b4a:	6863      	ldr	r3, [r4, #4]
 8008b4c:	1ac0      	subs	r0, r0, r3
 8008b4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b50:	b10b      	cbz	r3, 8008b56 <__sflush_r+0x42>
 8008b52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b54:	1ac0      	subs	r0, r0, r3
 8008b56:	2300      	movs	r3, #0
 8008b58:	4602      	mov	r2, r0
 8008b5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	6a21      	ldr	r1, [r4, #32]
 8008b60:	47b0      	blx	r6
 8008b62:	1c43      	adds	r3, r0, #1
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	d106      	bne.n	8008b76 <__sflush_r+0x62>
 8008b68:	6829      	ldr	r1, [r5, #0]
 8008b6a:	291d      	cmp	r1, #29
 8008b6c:	d82c      	bhi.n	8008bc8 <__sflush_r+0xb4>
 8008b6e:	4a29      	ldr	r2, [pc, #164]	; (8008c14 <__sflush_r+0x100>)
 8008b70:	40ca      	lsrs	r2, r1
 8008b72:	07d6      	lsls	r6, r2, #31
 8008b74:	d528      	bpl.n	8008bc8 <__sflush_r+0xb4>
 8008b76:	2200      	movs	r2, #0
 8008b78:	6062      	str	r2, [r4, #4]
 8008b7a:	6922      	ldr	r2, [r4, #16]
 8008b7c:	04d9      	lsls	r1, r3, #19
 8008b7e:	6022      	str	r2, [r4, #0]
 8008b80:	d504      	bpl.n	8008b8c <__sflush_r+0x78>
 8008b82:	1c42      	adds	r2, r0, #1
 8008b84:	d101      	bne.n	8008b8a <__sflush_r+0x76>
 8008b86:	682b      	ldr	r3, [r5, #0]
 8008b88:	b903      	cbnz	r3, 8008b8c <__sflush_r+0x78>
 8008b8a:	6560      	str	r0, [r4, #84]	; 0x54
 8008b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b8e:	602f      	str	r7, [r5, #0]
 8008b90:	2900      	cmp	r1, #0
 8008b92:	d0cb      	beq.n	8008b2c <__sflush_r+0x18>
 8008b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b98:	4299      	cmp	r1, r3
 8008b9a:	d002      	beq.n	8008ba2 <__sflush_r+0x8e>
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	f000 fc45 	bl	800942c <_free_r>
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	6360      	str	r0, [r4, #52]	; 0x34
 8008ba6:	e7c2      	b.n	8008b2e <__sflush_r+0x1a>
 8008ba8:	6a21      	ldr	r1, [r4, #32]
 8008baa:	2301      	movs	r3, #1
 8008bac:	4628      	mov	r0, r5
 8008bae:	47b0      	blx	r6
 8008bb0:	1c41      	adds	r1, r0, #1
 8008bb2:	d1c7      	bne.n	8008b44 <__sflush_r+0x30>
 8008bb4:	682b      	ldr	r3, [r5, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0c4      	beq.n	8008b44 <__sflush_r+0x30>
 8008bba:	2b1d      	cmp	r3, #29
 8008bbc:	d001      	beq.n	8008bc2 <__sflush_r+0xae>
 8008bbe:	2b16      	cmp	r3, #22
 8008bc0:	d101      	bne.n	8008bc6 <__sflush_r+0xb2>
 8008bc2:	602f      	str	r7, [r5, #0]
 8008bc4:	e7b2      	b.n	8008b2c <__sflush_r+0x18>
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bcc:	81a3      	strh	r3, [r4, #12]
 8008bce:	e7ae      	b.n	8008b2e <__sflush_r+0x1a>
 8008bd0:	690f      	ldr	r7, [r1, #16]
 8008bd2:	2f00      	cmp	r7, #0
 8008bd4:	d0aa      	beq.n	8008b2c <__sflush_r+0x18>
 8008bd6:	0793      	lsls	r3, r2, #30
 8008bd8:	bf18      	it	ne
 8008bda:	2300      	movne	r3, #0
 8008bdc:	680e      	ldr	r6, [r1, #0]
 8008bde:	bf08      	it	eq
 8008be0:	694b      	ldreq	r3, [r1, #20]
 8008be2:	1bf6      	subs	r6, r6, r7
 8008be4:	600f      	str	r7, [r1, #0]
 8008be6:	608b      	str	r3, [r1, #8]
 8008be8:	2e00      	cmp	r6, #0
 8008bea:	dd9f      	ble.n	8008b2c <__sflush_r+0x18>
 8008bec:	4633      	mov	r3, r6
 8008bee:	463a      	mov	r2, r7
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	6a21      	ldr	r1, [r4, #32]
 8008bf4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008bf8:	47e0      	blx	ip
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	dc06      	bgt.n	8008c0c <__sflush_r+0xf8>
 8008bfe:	89a3      	ldrh	r3, [r4, #12]
 8008c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c08:	81a3      	strh	r3, [r4, #12]
 8008c0a:	e790      	b.n	8008b2e <__sflush_r+0x1a>
 8008c0c:	4407      	add	r7, r0
 8008c0e:	1a36      	subs	r6, r6, r0
 8008c10:	e7ea      	b.n	8008be8 <__sflush_r+0xd4>
 8008c12:	bf00      	nop
 8008c14:	20400001 	.word	0x20400001

08008c18 <_fflush_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	690b      	ldr	r3, [r1, #16]
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	460c      	mov	r4, r1
 8008c20:	b913      	cbnz	r3, 8008c28 <_fflush_r+0x10>
 8008c22:	2500      	movs	r5, #0
 8008c24:	4628      	mov	r0, r5
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	b118      	cbz	r0, 8008c32 <_fflush_r+0x1a>
 8008c2a:	6983      	ldr	r3, [r0, #24]
 8008c2c:	b90b      	cbnz	r3, 8008c32 <_fflush_r+0x1a>
 8008c2e:	f7fe fa2d 	bl	800708c <__sinit>
 8008c32:	4b14      	ldr	r3, [pc, #80]	; (8008c84 <_fflush_r+0x6c>)
 8008c34:	429c      	cmp	r4, r3
 8008c36:	d11b      	bne.n	8008c70 <_fflush_r+0x58>
 8008c38:	686c      	ldr	r4, [r5, #4]
 8008c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d0ef      	beq.n	8008c22 <_fflush_r+0xa>
 8008c42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c44:	07d0      	lsls	r0, r2, #31
 8008c46:	d404      	bmi.n	8008c52 <_fflush_r+0x3a>
 8008c48:	0599      	lsls	r1, r3, #22
 8008c4a:	d402      	bmi.n	8008c52 <_fflush_r+0x3a>
 8008c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c4e:	f7fe fae0 	bl	8007212 <__retarget_lock_acquire_recursive>
 8008c52:	4628      	mov	r0, r5
 8008c54:	4621      	mov	r1, r4
 8008c56:	f7ff ff5d 	bl	8008b14 <__sflush_r>
 8008c5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c5c:	4605      	mov	r5, r0
 8008c5e:	07da      	lsls	r2, r3, #31
 8008c60:	d4e0      	bmi.n	8008c24 <_fflush_r+0xc>
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	059b      	lsls	r3, r3, #22
 8008c66:	d4dd      	bmi.n	8008c24 <_fflush_r+0xc>
 8008c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c6a:	f7fe fad3 	bl	8007214 <__retarget_lock_release_recursive>
 8008c6e:	e7d9      	b.n	8008c24 <_fflush_r+0xc>
 8008c70:	4b05      	ldr	r3, [pc, #20]	; (8008c88 <_fflush_r+0x70>)
 8008c72:	429c      	cmp	r4, r3
 8008c74:	d101      	bne.n	8008c7a <_fflush_r+0x62>
 8008c76:	68ac      	ldr	r4, [r5, #8]
 8008c78:	e7df      	b.n	8008c3a <_fflush_r+0x22>
 8008c7a:	4b04      	ldr	r3, [pc, #16]	; (8008c8c <_fflush_r+0x74>)
 8008c7c:	429c      	cmp	r4, r3
 8008c7e:	bf08      	it	eq
 8008c80:	68ec      	ldreq	r4, [r5, #12]
 8008c82:	e7da      	b.n	8008c3a <_fflush_r+0x22>
 8008c84:	08009c48 	.word	0x08009c48
 8008c88:	08009c68 	.word	0x08009c68
 8008c8c:	08009c28 	.word	0x08009c28

08008c90 <_localeconv_r>:
 8008c90:	4800      	ldr	r0, [pc, #0]	; (8008c94 <_localeconv_r+0x4>)
 8008c92:	4770      	bx	lr
 8008c94:	20000178 	.word	0x20000178

08008c98 <_lseek_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	4d05      	ldr	r5, [pc, #20]	; (8008cb8 <_lseek_r+0x20>)
 8008ca4:	602a      	str	r2, [r5, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f7f9 f9e6 	bl	8002078 <_lseek>
 8008cac:	1c43      	adds	r3, r0, #1
 8008cae:	d102      	bne.n	8008cb6 <_lseek_r+0x1e>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	b103      	cbz	r3, 8008cb6 <_lseek_r+0x1e>
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
 8008cb8:	200023d0 	.word	0x200023d0

08008cbc <malloc>:
 8008cbc:	4b02      	ldr	r3, [pc, #8]	; (8008cc8 <malloc+0xc>)
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	f7fe badf 	b.w	8007284 <_malloc_r>
 8008cc6:	bf00      	nop
 8008cc8:	20000024 	.word	0x20000024

08008ccc <memchr>:
 8008ccc:	4603      	mov	r3, r0
 8008cce:	b510      	push	{r4, lr}
 8008cd0:	b2c9      	uxtb	r1, r1
 8008cd2:	4402      	add	r2, r0
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	d101      	bne.n	8008cde <memchr+0x12>
 8008cda:	2000      	movs	r0, #0
 8008cdc:	e003      	b.n	8008ce6 <memchr+0x1a>
 8008cde:	7804      	ldrb	r4, [r0, #0]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	428c      	cmp	r4, r1
 8008ce4:	d1f6      	bne.n	8008cd4 <memchr+0x8>
 8008ce6:	bd10      	pop	{r4, pc}

08008ce8 <__malloc_lock>:
 8008ce8:	4801      	ldr	r0, [pc, #4]	; (8008cf0 <__malloc_lock+0x8>)
 8008cea:	f7fe ba92 	b.w	8007212 <__retarget_lock_acquire_recursive>
 8008cee:	bf00      	nop
 8008cf0:	200023c4 	.word	0x200023c4

08008cf4 <__malloc_unlock>:
 8008cf4:	4801      	ldr	r0, [pc, #4]	; (8008cfc <__malloc_unlock+0x8>)
 8008cf6:	f7fe ba8d 	b.w	8007214 <__retarget_lock_release_recursive>
 8008cfa:	bf00      	nop
 8008cfc:	200023c4 	.word	0x200023c4

08008d00 <_Balloc>:
 8008d00:	b570      	push	{r4, r5, r6, lr}
 8008d02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d04:	4604      	mov	r4, r0
 8008d06:	460d      	mov	r5, r1
 8008d08:	b976      	cbnz	r6, 8008d28 <_Balloc+0x28>
 8008d0a:	2010      	movs	r0, #16
 8008d0c:	f7ff ffd6 	bl	8008cbc <malloc>
 8008d10:	4602      	mov	r2, r0
 8008d12:	6260      	str	r0, [r4, #36]	; 0x24
 8008d14:	b920      	cbnz	r0, 8008d20 <_Balloc+0x20>
 8008d16:	2166      	movs	r1, #102	; 0x66
 8008d18:	4b17      	ldr	r3, [pc, #92]	; (8008d78 <_Balloc+0x78>)
 8008d1a:	4818      	ldr	r0, [pc, #96]	; (8008d7c <_Balloc+0x7c>)
 8008d1c:	f000 fdf8 	bl	8009910 <__assert_func>
 8008d20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d24:	6006      	str	r6, [r0, #0]
 8008d26:	60c6      	str	r6, [r0, #12]
 8008d28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d2a:	68f3      	ldr	r3, [r6, #12]
 8008d2c:	b183      	cbz	r3, 8008d50 <_Balloc+0x50>
 8008d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d36:	b9b8      	cbnz	r0, 8008d68 <_Balloc+0x68>
 8008d38:	2101      	movs	r1, #1
 8008d3a:	fa01 f605 	lsl.w	r6, r1, r5
 8008d3e:	1d72      	adds	r2, r6, #5
 8008d40:	4620      	mov	r0, r4
 8008d42:	0092      	lsls	r2, r2, #2
 8008d44:	f000 fb5e 	bl	8009404 <_calloc_r>
 8008d48:	b160      	cbz	r0, 8008d64 <_Balloc+0x64>
 8008d4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d4e:	e00e      	b.n	8008d6e <_Balloc+0x6e>
 8008d50:	2221      	movs	r2, #33	; 0x21
 8008d52:	2104      	movs	r1, #4
 8008d54:	4620      	mov	r0, r4
 8008d56:	f000 fb55 	bl	8009404 <_calloc_r>
 8008d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d5c:	60f0      	str	r0, [r6, #12]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e4      	bne.n	8008d2e <_Balloc+0x2e>
 8008d64:	2000      	movs	r0, #0
 8008d66:	bd70      	pop	{r4, r5, r6, pc}
 8008d68:	6802      	ldr	r2, [r0, #0]
 8008d6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d74:	e7f7      	b.n	8008d66 <_Balloc+0x66>
 8008d76:	bf00      	nop
 8008d78:	08009ccd 	.word	0x08009ccd
 8008d7c:	08009d50 	.word	0x08009d50

08008d80 <_Bfree>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d84:	4605      	mov	r5, r0
 8008d86:	460c      	mov	r4, r1
 8008d88:	b976      	cbnz	r6, 8008da8 <_Bfree+0x28>
 8008d8a:	2010      	movs	r0, #16
 8008d8c:	f7ff ff96 	bl	8008cbc <malloc>
 8008d90:	4602      	mov	r2, r0
 8008d92:	6268      	str	r0, [r5, #36]	; 0x24
 8008d94:	b920      	cbnz	r0, 8008da0 <_Bfree+0x20>
 8008d96:	218a      	movs	r1, #138	; 0x8a
 8008d98:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <_Bfree+0x3c>)
 8008d9a:	4809      	ldr	r0, [pc, #36]	; (8008dc0 <_Bfree+0x40>)
 8008d9c:	f000 fdb8 	bl	8009910 <__assert_func>
 8008da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008da4:	6006      	str	r6, [r0, #0]
 8008da6:	60c6      	str	r6, [r0, #12]
 8008da8:	b13c      	cbz	r4, 8008dba <_Bfree+0x3a>
 8008daa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008dac:	6862      	ldr	r2, [r4, #4]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008db4:	6021      	str	r1, [r4, #0]
 8008db6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dba:	bd70      	pop	{r4, r5, r6, pc}
 8008dbc:	08009ccd 	.word	0x08009ccd
 8008dc0:	08009d50 	.word	0x08009d50

08008dc4 <__multadd>:
 8008dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc8:	4607      	mov	r7, r0
 8008dca:	460c      	mov	r4, r1
 8008dcc:	461e      	mov	r6, r3
 8008dce:	2000      	movs	r0, #0
 8008dd0:	690d      	ldr	r5, [r1, #16]
 8008dd2:	f101 0c14 	add.w	ip, r1, #20
 8008dd6:	f8dc 3000 	ldr.w	r3, [ip]
 8008dda:	3001      	adds	r0, #1
 8008ddc:	b299      	uxth	r1, r3
 8008dde:	fb02 6101 	mla	r1, r2, r1, r6
 8008de2:	0c1e      	lsrs	r6, r3, #16
 8008de4:	0c0b      	lsrs	r3, r1, #16
 8008de6:	fb02 3306 	mla	r3, r2, r6, r3
 8008dea:	b289      	uxth	r1, r1
 8008dec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008df0:	4285      	cmp	r5, r0
 8008df2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008df6:	f84c 1b04 	str.w	r1, [ip], #4
 8008dfa:	dcec      	bgt.n	8008dd6 <__multadd+0x12>
 8008dfc:	b30e      	cbz	r6, 8008e42 <__multadd+0x7e>
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	42ab      	cmp	r3, r5
 8008e02:	dc19      	bgt.n	8008e38 <__multadd+0x74>
 8008e04:	6861      	ldr	r1, [r4, #4]
 8008e06:	4638      	mov	r0, r7
 8008e08:	3101      	adds	r1, #1
 8008e0a:	f7ff ff79 	bl	8008d00 <_Balloc>
 8008e0e:	4680      	mov	r8, r0
 8008e10:	b928      	cbnz	r0, 8008e1e <__multadd+0x5a>
 8008e12:	4602      	mov	r2, r0
 8008e14:	21b5      	movs	r1, #181	; 0xb5
 8008e16:	4b0c      	ldr	r3, [pc, #48]	; (8008e48 <__multadd+0x84>)
 8008e18:	480c      	ldr	r0, [pc, #48]	; (8008e4c <__multadd+0x88>)
 8008e1a:	f000 fd79 	bl	8009910 <__assert_func>
 8008e1e:	6922      	ldr	r2, [r4, #16]
 8008e20:	f104 010c 	add.w	r1, r4, #12
 8008e24:	3202      	adds	r2, #2
 8008e26:	0092      	lsls	r2, r2, #2
 8008e28:	300c      	adds	r0, #12
 8008e2a:	f7fe f9f4 	bl	8007216 <memcpy>
 8008e2e:	4621      	mov	r1, r4
 8008e30:	4638      	mov	r0, r7
 8008e32:	f7ff ffa5 	bl	8008d80 <_Bfree>
 8008e36:	4644      	mov	r4, r8
 8008e38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e3c:	3501      	adds	r5, #1
 8008e3e:	615e      	str	r6, [r3, #20]
 8008e40:	6125      	str	r5, [r4, #16]
 8008e42:	4620      	mov	r0, r4
 8008e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e48:	08009d3f 	.word	0x08009d3f
 8008e4c:	08009d50 	.word	0x08009d50

08008e50 <__hi0bits>:
 8008e50:	0c02      	lsrs	r2, r0, #16
 8008e52:	0412      	lsls	r2, r2, #16
 8008e54:	4603      	mov	r3, r0
 8008e56:	b9ca      	cbnz	r2, 8008e8c <__hi0bits+0x3c>
 8008e58:	0403      	lsls	r3, r0, #16
 8008e5a:	2010      	movs	r0, #16
 8008e5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008e60:	bf04      	itt	eq
 8008e62:	021b      	lsleq	r3, r3, #8
 8008e64:	3008      	addeq	r0, #8
 8008e66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008e6a:	bf04      	itt	eq
 8008e6c:	011b      	lsleq	r3, r3, #4
 8008e6e:	3004      	addeq	r0, #4
 8008e70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008e74:	bf04      	itt	eq
 8008e76:	009b      	lsleq	r3, r3, #2
 8008e78:	3002      	addeq	r0, #2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	db05      	blt.n	8008e8a <__hi0bits+0x3a>
 8008e7e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008e82:	f100 0001 	add.w	r0, r0, #1
 8008e86:	bf08      	it	eq
 8008e88:	2020      	moveq	r0, #32
 8008e8a:	4770      	bx	lr
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e7e5      	b.n	8008e5c <__hi0bits+0xc>

08008e90 <__lo0bits>:
 8008e90:	6803      	ldr	r3, [r0, #0]
 8008e92:	4602      	mov	r2, r0
 8008e94:	f013 0007 	ands.w	r0, r3, #7
 8008e98:	d00b      	beq.n	8008eb2 <__lo0bits+0x22>
 8008e9a:	07d9      	lsls	r1, r3, #31
 8008e9c:	d421      	bmi.n	8008ee2 <__lo0bits+0x52>
 8008e9e:	0798      	lsls	r0, r3, #30
 8008ea0:	bf49      	itett	mi
 8008ea2:	085b      	lsrmi	r3, r3, #1
 8008ea4:	089b      	lsrpl	r3, r3, #2
 8008ea6:	2001      	movmi	r0, #1
 8008ea8:	6013      	strmi	r3, [r2, #0]
 8008eaa:	bf5c      	itt	pl
 8008eac:	2002      	movpl	r0, #2
 8008eae:	6013      	strpl	r3, [r2, #0]
 8008eb0:	4770      	bx	lr
 8008eb2:	b299      	uxth	r1, r3
 8008eb4:	b909      	cbnz	r1, 8008eba <__lo0bits+0x2a>
 8008eb6:	2010      	movs	r0, #16
 8008eb8:	0c1b      	lsrs	r3, r3, #16
 8008eba:	b2d9      	uxtb	r1, r3
 8008ebc:	b909      	cbnz	r1, 8008ec2 <__lo0bits+0x32>
 8008ebe:	3008      	adds	r0, #8
 8008ec0:	0a1b      	lsrs	r3, r3, #8
 8008ec2:	0719      	lsls	r1, r3, #28
 8008ec4:	bf04      	itt	eq
 8008ec6:	091b      	lsreq	r3, r3, #4
 8008ec8:	3004      	addeq	r0, #4
 8008eca:	0799      	lsls	r1, r3, #30
 8008ecc:	bf04      	itt	eq
 8008ece:	089b      	lsreq	r3, r3, #2
 8008ed0:	3002      	addeq	r0, #2
 8008ed2:	07d9      	lsls	r1, r3, #31
 8008ed4:	d403      	bmi.n	8008ede <__lo0bits+0x4e>
 8008ed6:	085b      	lsrs	r3, r3, #1
 8008ed8:	f100 0001 	add.w	r0, r0, #1
 8008edc:	d003      	beq.n	8008ee6 <__lo0bits+0x56>
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	4770      	bx	lr
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	4770      	bx	lr
 8008ee6:	2020      	movs	r0, #32
 8008ee8:	4770      	bx	lr
	...

08008eec <__i2b>:
 8008eec:	b510      	push	{r4, lr}
 8008eee:	460c      	mov	r4, r1
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	f7ff ff05 	bl	8008d00 <_Balloc>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	b928      	cbnz	r0, 8008f06 <__i2b+0x1a>
 8008efa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008efe:	4b04      	ldr	r3, [pc, #16]	; (8008f10 <__i2b+0x24>)
 8008f00:	4804      	ldr	r0, [pc, #16]	; (8008f14 <__i2b+0x28>)
 8008f02:	f000 fd05 	bl	8009910 <__assert_func>
 8008f06:	2301      	movs	r3, #1
 8008f08:	6144      	str	r4, [r0, #20]
 8008f0a:	6103      	str	r3, [r0, #16]
 8008f0c:	bd10      	pop	{r4, pc}
 8008f0e:	bf00      	nop
 8008f10:	08009d3f 	.word	0x08009d3f
 8008f14:	08009d50 	.word	0x08009d50

08008f18 <__multiply>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	4691      	mov	r9, r2
 8008f1e:	690a      	ldr	r2, [r1, #16]
 8008f20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f24:	460c      	mov	r4, r1
 8008f26:	429a      	cmp	r2, r3
 8008f28:	bfbe      	ittt	lt
 8008f2a:	460b      	movlt	r3, r1
 8008f2c:	464c      	movlt	r4, r9
 8008f2e:	4699      	movlt	r9, r3
 8008f30:	6927      	ldr	r7, [r4, #16]
 8008f32:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f36:	68a3      	ldr	r3, [r4, #8]
 8008f38:	6861      	ldr	r1, [r4, #4]
 8008f3a:	eb07 060a 	add.w	r6, r7, sl
 8008f3e:	42b3      	cmp	r3, r6
 8008f40:	b085      	sub	sp, #20
 8008f42:	bfb8      	it	lt
 8008f44:	3101      	addlt	r1, #1
 8008f46:	f7ff fedb 	bl	8008d00 <_Balloc>
 8008f4a:	b930      	cbnz	r0, 8008f5a <__multiply+0x42>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	f240 115d 	movw	r1, #349	; 0x15d
 8008f52:	4b43      	ldr	r3, [pc, #268]	; (8009060 <__multiply+0x148>)
 8008f54:	4843      	ldr	r0, [pc, #268]	; (8009064 <__multiply+0x14c>)
 8008f56:	f000 fcdb 	bl	8009910 <__assert_func>
 8008f5a:	f100 0514 	add.w	r5, r0, #20
 8008f5e:	462b      	mov	r3, r5
 8008f60:	2200      	movs	r2, #0
 8008f62:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f66:	4543      	cmp	r3, r8
 8008f68:	d321      	bcc.n	8008fae <__multiply+0x96>
 8008f6a:	f104 0314 	add.w	r3, r4, #20
 8008f6e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f72:	f109 0314 	add.w	r3, r9, #20
 8008f76:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f7a:	9202      	str	r2, [sp, #8]
 8008f7c:	1b3a      	subs	r2, r7, r4
 8008f7e:	3a15      	subs	r2, #21
 8008f80:	f022 0203 	bic.w	r2, r2, #3
 8008f84:	3204      	adds	r2, #4
 8008f86:	f104 0115 	add.w	r1, r4, #21
 8008f8a:	428f      	cmp	r7, r1
 8008f8c:	bf38      	it	cc
 8008f8e:	2204      	movcc	r2, #4
 8008f90:	9201      	str	r2, [sp, #4]
 8008f92:	9a02      	ldr	r2, [sp, #8]
 8008f94:	9303      	str	r3, [sp, #12]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d80c      	bhi.n	8008fb4 <__multiply+0x9c>
 8008f9a:	2e00      	cmp	r6, #0
 8008f9c:	dd03      	ble.n	8008fa6 <__multiply+0x8e>
 8008f9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d059      	beq.n	800905a <__multiply+0x142>
 8008fa6:	6106      	str	r6, [r0, #16]
 8008fa8:	b005      	add	sp, #20
 8008faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fae:	f843 2b04 	str.w	r2, [r3], #4
 8008fb2:	e7d8      	b.n	8008f66 <__multiply+0x4e>
 8008fb4:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fb8:	f1ba 0f00 	cmp.w	sl, #0
 8008fbc:	d023      	beq.n	8009006 <__multiply+0xee>
 8008fbe:	46a9      	mov	r9, r5
 8008fc0:	f04f 0c00 	mov.w	ip, #0
 8008fc4:	f104 0e14 	add.w	lr, r4, #20
 8008fc8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008fcc:	f8d9 1000 	ldr.w	r1, [r9]
 8008fd0:	fa1f fb82 	uxth.w	fp, r2
 8008fd4:	b289      	uxth	r1, r1
 8008fd6:	fb0a 110b 	mla	r1, sl, fp, r1
 8008fda:	4461      	add	r1, ip
 8008fdc:	f8d9 c000 	ldr.w	ip, [r9]
 8008fe0:	0c12      	lsrs	r2, r2, #16
 8008fe2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008fe6:	fb0a c202 	mla	r2, sl, r2, ip
 8008fea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fee:	b289      	uxth	r1, r1
 8008ff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ff4:	4577      	cmp	r7, lr
 8008ff6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ffa:	f849 1b04 	str.w	r1, [r9], #4
 8008ffe:	d8e3      	bhi.n	8008fc8 <__multiply+0xb0>
 8009000:	9a01      	ldr	r2, [sp, #4]
 8009002:	f845 c002 	str.w	ip, [r5, r2]
 8009006:	9a03      	ldr	r2, [sp, #12]
 8009008:	3304      	adds	r3, #4
 800900a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800900e:	f1b9 0f00 	cmp.w	r9, #0
 8009012:	d020      	beq.n	8009056 <__multiply+0x13e>
 8009014:	46ae      	mov	lr, r5
 8009016:	f04f 0a00 	mov.w	sl, #0
 800901a:	6829      	ldr	r1, [r5, #0]
 800901c:	f104 0c14 	add.w	ip, r4, #20
 8009020:	f8bc b000 	ldrh.w	fp, [ip]
 8009024:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009028:	b289      	uxth	r1, r1
 800902a:	fb09 220b 	mla	r2, r9, fp, r2
 800902e:	4492      	add	sl, r2
 8009030:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009034:	f84e 1b04 	str.w	r1, [lr], #4
 8009038:	f85c 2b04 	ldr.w	r2, [ip], #4
 800903c:	f8be 1000 	ldrh.w	r1, [lr]
 8009040:	0c12      	lsrs	r2, r2, #16
 8009042:	fb09 1102 	mla	r1, r9, r2, r1
 8009046:	4567      	cmp	r7, ip
 8009048:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800904c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009050:	d8e6      	bhi.n	8009020 <__multiply+0x108>
 8009052:	9a01      	ldr	r2, [sp, #4]
 8009054:	50a9      	str	r1, [r5, r2]
 8009056:	3504      	adds	r5, #4
 8009058:	e79b      	b.n	8008f92 <__multiply+0x7a>
 800905a:	3e01      	subs	r6, #1
 800905c:	e79d      	b.n	8008f9a <__multiply+0x82>
 800905e:	bf00      	nop
 8009060:	08009d3f 	.word	0x08009d3f
 8009064:	08009d50 	.word	0x08009d50

08009068 <__pow5mult>:
 8009068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800906c:	4615      	mov	r5, r2
 800906e:	f012 0203 	ands.w	r2, r2, #3
 8009072:	4606      	mov	r6, r0
 8009074:	460f      	mov	r7, r1
 8009076:	d007      	beq.n	8009088 <__pow5mult+0x20>
 8009078:	4c25      	ldr	r4, [pc, #148]	; (8009110 <__pow5mult+0xa8>)
 800907a:	3a01      	subs	r2, #1
 800907c:	2300      	movs	r3, #0
 800907e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009082:	f7ff fe9f 	bl	8008dc4 <__multadd>
 8009086:	4607      	mov	r7, r0
 8009088:	10ad      	asrs	r5, r5, #2
 800908a:	d03d      	beq.n	8009108 <__pow5mult+0xa0>
 800908c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800908e:	b97c      	cbnz	r4, 80090b0 <__pow5mult+0x48>
 8009090:	2010      	movs	r0, #16
 8009092:	f7ff fe13 	bl	8008cbc <malloc>
 8009096:	4602      	mov	r2, r0
 8009098:	6270      	str	r0, [r6, #36]	; 0x24
 800909a:	b928      	cbnz	r0, 80090a8 <__pow5mult+0x40>
 800909c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090a0:	4b1c      	ldr	r3, [pc, #112]	; (8009114 <__pow5mult+0xac>)
 80090a2:	481d      	ldr	r0, [pc, #116]	; (8009118 <__pow5mult+0xb0>)
 80090a4:	f000 fc34 	bl	8009910 <__assert_func>
 80090a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090ac:	6004      	str	r4, [r0, #0]
 80090ae:	60c4      	str	r4, [r0, #12]
 80090b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090b8:	b94c      	cbnz	r4, 80090ce <__pow5mult+0x66>
 80090ba:	f240 2171 	movw	r1, #625	; 0x271
 80090be:	4630      	mov	r0, r6
 80090c0:	f7ff ff14 	bl	8008eec <__i2b>
 80090c4:	2300      	movs	r3, #0
 80090c6:	4604      	mov	r4, r0
 80090c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80090cc:	6003      	str	r3, [r0, #0]
 80090ce:	f04f 0900 	mov.w	r9, #0
 80090d2:	07eb      	lsls	r3, r5, #31
 80090d4:	d50a      	bpl.n	80090ec <__pow5mult+0x84>
 80090d6:	4639      	mov	r1, r7
 80090d8:	4622      	mov	r2, r4
 80090da:	4630      	mov	r0, r6
 80090dc:	f7ff ff1c 	bl	8008f18 <__multiply>
 80090e0:	4680      	mov	r8, r0
 80090e2:	4639      	mov	r1, r7
 80090e4:	4630      	mov	r0, r6
 80090e6:	f7ff fe4b 	bl	8008d80 <_Bfree>
 80090ea:	4647      	mov	r7, r8
 80090ec:	106d      	asrs	r5, r5, #1
 80090ee:	d00b      	beq.n	8009108 <__pow5mult+0xa0>
 80090f0:	6820      	ldr	r0, [r4, #0]
 80090f2:	b938      	cbnz	r0, 8009104 <__pow5mult+0x9c>
 80090f4:	4622      	mov	r2, r4
 80090f6:	4621      	mov	r1, r4
 80090f8:	4630      	mov	r0, r6
 80090fa:	f7ff ff0d 	bl	8008f18 <__multiply>
 80090fe:	6020      	str	r0, [r4, #0]
 8009100:	f8c0 9000 	str.w	r9, [r0]
 8009104:	4604      	mov	r4, r0
 8009106:	e7e4      	b.n	80090d2 <__pow5mult+0x6a>
 8009108:	4638      	mov	r0, r7
 800910a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800910e:	bf00      	nop
 8009110:	08009ea0 	.word	0x08009ea0
 8009114:	08009ccd 	.word	0x08009ccd
 8009118:	08009d50 	.word	0x08009d50

0800911c <__lshift>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	460c      	mov	r4, r1
 8009122:	4607      	mov	r7, r0
 8009124:	4691      	mov	r9, r2
 8009126:	6923      	ldr	r3, [r4, #16]
 8009128:	6849      	ldr	r1, [r1, #4]
 800912a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800912e:	68a3      	ldr	r3, [r4, #8]
 8009130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009134:	f108 0601 	add.w	r6, r8, #1
 8009138:	42b3      	cmp	r3, r6
 800913a:	db0b      	blt.n	8009154 <__lshift+0x38>
 800913c:	4638      	mov	r0, r7
 800913e:	f7ff fddf 	bl	8008d00 <_Balloc>
 8009142:	4605      	mov	r5, r0
 8009144:	b948      	cbnz	r0, 800915a <__lshift+0x3e>
 8009146:	4602      	mov	r2, r0
 8009148:	f240 11d9 	movw	r1, #473	; 0x1d9
 800914c:	4b29      	ldr	r3, [pc, #164]	; (80091f4 <__lshift+0xd8>)
 800914e:	482a      	ldr	r0, [pc, #168]	; (80091f8 <__lshift+0xdc>)
 8009150:	f000 fbde 	bl	8009910 <__assert_func>
 8009154:	3101      	adds	r1, #1
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	e7ee      	b.n	8009138 <__lshift+0x1c>
 800915a:	2300      	movs	r3, #0
 800915c:	f100 0114 	add.w	r1, r0, #20
 8009160:	f100 0210 	add.w	r2, r0, #16
 8009164:	4618      	mov	r0, r3
 8009166:	4553      	cmp	r3, sl
 8009168:	db37      	blt.n	80091da <__lshift+0xbe>
 800916a:	6920      	ldr	r0, [r4, #16]
 800916c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009170:	f104 0314 	add.w	r3, r4, #20
 8009174:	f019 091f 	ands.w	r9, r9, #31
 8009178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800917c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009180:	d02f      	beq.n	80091e2 <__lshift+0xc6>
 8009182:	468a      	mov	sl, r1
 8009184:	f04f 0c00 	mov.w	ip, #0
 8009188:	f1c9 0e20 	rsb	lr, r9, #32
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	fa02 f209 	lsl.w	r2, r2, r9
 8009192:	ea42 020c 	orr.w	r2, r2, ip
 8009196:	f84a 2b04 	str.w	r2, [sl], #4
 800919a:	f853 2b04 	ldr.w	r2, [r3], #4
 800919e:	4298      	cmp	r0, r3
 80091a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80091a4:	d8f2      	bhi.n	800918c <__lshift+0x70>
 80091a6:	1b03      	subs	r3, r0, r4
 80091a8:	3b15      	subs	r3, #21
 80091aa:	f023 0303 	bic.w	r3, r3, #3
 80091ae:	3304      	adds	r3, #4
 80091b0:	f104 0215 	add.w	r2, r4, #21
 80091b4:	4290      	cmp	r0, r2
 80091b6:	bf38      	it	cc
 80091b8:	2304      	movcc	r3, #4
 80091ba:	f841 c003 	str.w	ip, [r1, r3]
 80091be:	f1bc 0f00 	cmp.w	ip, #0
 80091c2:	d001      	beq.n	80091c8 <__lshift+0xac>
 80091c4:	f108 0602 	add.w	r6, r8, #2
 80091c8:	3e01      	subs	r6, #1
 80091ca:	4638      	mov	r0, r7
 80091cc:	4621      	mov	r1, r4
 80091ce:	612e      	str	r6, [r5, #16]
 80091d0:	f7ff fdd6 	bl	8008d80 <_Bfree>
 80091d4:	4628      	mov	r0, r5
 80091d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091da:	f842 0f04 	str.w	r0, [r2, #4]!
 80091de:	3301      	adds	r3, #1
 80091e0:	e7c1      	b.n	8009166 <__lshift+0x4a>
 80091e2:	3904      	subs	r1, #4
 80091e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e8:	4298      	cmp	r0, r3
 80091ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80091ee:	d8f9      	bhi.n	80091e4 <__lshift+0xc8>
 80091f0:	e7ea      	b.n	80091c8 <__lshift+0xac>
 80091f2:	bf00      	nop
 80091f4:	08009d3f 	.word	0x08009d3f
 80091f8:	08009d50 	.word	0x08009d50

080091fc <__mcmp>:
 80091fc:	4603      	mov	r3, r0
 80091fe:	690a      	ldr	r2, [r1, #16]
 8009200:	6900      	ldr	r0, [r0, #16]
 8009202:	b530      	push	{r4, r5, lr}
 8009204:	1a80      	subs	r0, r0, r2
 8009206:	d10d      	bne.n	8009224 <__mcmp+0x28>
 8009208:	3314      	adds	r3, #20
 800920a:	3114      	adds	r1, #20
 800920c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009210:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009214:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009218:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800921c:	4295      	cmp	r5, r2
 800921e:	d002      	beq.n	8009226 <__mcmp+0x2a>
 8009220:	d304      	bcc.n	800922c <__mcmp+0x30>
 8009222:	2001      	movs	r0, #1
 8009224:	bd30      	pop	{r4, r5, pc}
 8009226:	42a3      	cmp	r3, r4
 8009228:	d3f4      	bcc.n	8009214 <__mcmp+0x18>
 800922a:	e7fb      	b.n	8009224 <__mcmp+0x28>
 800922c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009230:	e7f8      	b.n	8009224 <__mcmp+0x28>
	...

08009234 <__mdiff>:
 8009234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009238:	460d      	mov	r5, r1
 800923a:	4607      	mov	r7, r0
 800923c:	4611      	mov	r1, r2
 800923e:	4628      	mov	r0, r5
 8009240:	4614      	mov	r4, r2
 8009242:	f7ff ffdb 	bl	80091fc <__mcmp>
 8009246:	1e06      	subs	r6, r0, #0
 8009248:	d111      	bne.n	800926e <__mdiff+0x3a>
 800924a:	4631      	mov	r1, r6
 800924c:	4638      	mov	r0, r7
 800924e:	f7ff fd57 	bl	8008d00 <_Balloc>
 8009252:	4602      	mov	r2, r0
 8009254:	b928      	cbnz	r0, 8009262 <__mdiff+0x2e>
 8009256:	f240 2132 	movw	r1, #562	; 0x232
 800925a:	4b3a      	ldr	r3, [pc, #232]	; (8009344 <__mdiff+0x110>)
 800925c:	483a      	ldr	r0, [pc, #232]	; (8009348 <__mdiff+0x114>)
 800925e:	f000 fb57 	bl	8009910 <__assert_func>
 8009262:	2301      	movs	r3, #1
 8009264:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009268:	4610      	mov	r0, r2
 800926a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926e:	bfa4      	itt	ge
 8009270:	4623      	movge	r3, r4
 8009272:	462c      	movge	r4, r5
 8009274:	4638      	mov	r0, r7
 8009276:	6861      	ldr	r1, [r4, #4]
 8009278:	bfa6      	itte	ge
 800927a:	461d      	movge	r5, r3
 800927c:	2600      	movge	r6, #0
 800927e:	2601      	movlt	r6, #1
 8009280:	f7ff fd3e 	bl	8008d00 <_Balloc>
 8009284:	4602      	mov	r2, r0
 8009286:	b918      	cbnz	r0, 8009290 <__mdiff+0x5c>
 8009288:	f44f 7110 	mov.w	r1, #576	; 0x240
 800928c:	4b2d      	ldr	r3, [pc, #180]	; (8009344 <__mdiff+0x110>)
 800928e:	e7e5      	b.n	800925c <__mdiff+0x28>
 8009290:	f102 0814 	add.w	r8, r2, #20
 8009294:	46c2      	mov	sl, r8
 8009296:	f04f 0c00 	mov.w	ip, #0
 800929a:	6927      	ldr	r7, [r4, #16]
 800929c:	60c6      	str	r6, [r0, #12]
 800929e:	692e      	ldr	r6, [r5, #16]
 80092a0:	f104 0014 	add.w	r0, r4, #20
 80092a4:	f105 0914 	add.w	r9, r5, #20
 80092a8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80092ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80092b0:	3410      	adds	r4, #16
 80092b2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80092b6:	f859 3b04 	ldr.w	r3, [r9], #4
 80092ba:	fa1f f18b 	uxth.w	r1, fp
 80092be:	448c      	add	ip, r1
 80092c0:	b299      	uxth	r1, r3
 80092c2:	0c1b      	lsrs	r3, r3, #16
 80092c4:	ebac 0101 	sub.w	r1, ip, r1
 80092c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092cc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80092d0:	b289      	uxth	r1, r1
 80092d2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80092d6:	454e      	cmp	r6, r9
 80092d8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80092dc:	f84a 3b04 	str.w	r3, [sl], #4
 80092e0:	d8e7      	bhi.n	80092b2 <__mdiff+0x7e>
 80092e2:	1b73      	subs	r3, r6, r5
 80092e4:	3b15      	subs	r3, #21
 80092e6:	f023 0303 	bic.w	r3, r3, #3
 80092ea:	3515      	adds	r5, #21
 80092ec:	3304      	adds	r3, #4
 80092ee:	42ae      	cmp	r6, r5
 80092f0:	bf38      	it	cc
 80092f2:	2304      	movcc	r3, #4
 80092f4:	4418      	add	r0, r3
 80092f6:	4443      	add	r3, r8
 80092f8:	461e      	mov	r6, r3
 80092fa:	4605      	mov	r5, r0
 80092fc:	4575      	cmp	r5, lr
 80092fe:	d30e      	bcc.n	800931e <__mdiff+0xea>
 8009300:	f10e 0103 	add.w	r1, lr, #3
 8009304:	1a09      	subs	r1, r1, r0
 8009306:	f021 0103 	bic.w	r1, r1, #3
 800930a:	3803      	subs	r0, #3
 800930c:	4586      	cmp	lr, r0
 800930e:	bf38      	it	cc
 8009310:	2100      	movcc	r1, #0
 8009312:	4419      	add	r1, r3
 8009314:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009318:	b18b      	cbz	r3, 800933e <__mdiff+0x10a>
 800931a:	6117      	str	r7, [r2, #16]
 800931c:	e7a4      	b.n	8009268 <__mdiff+0x34>
 800931e:	f855 8b04 	ldr.w	r8, [r5], #4
 8009322:	fa1f f188 	uxth.w	r1, r8
 8009326:	4461      	add	r1, ip
 8009328:	140c      	asrs	r4, r1, #16
 800932a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800932e:	b289      	uxth	r1, r1
 8009330:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009334:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009338:	f846 1b04 	str.w	r1, [r6], #4
 800933c:	e7de      	b.n	80092fc <__mdiff+0xc8>
 800933e:	3f01      	subs	r7, #1
 8009340:	e7e8      	b.n	8009314 <__mdiff+0xe0>
 8009342:	bf00      	nop
 8009344:	08009d3f 	.word	0x08009d3f
 8009348:	08009d50 	.word	0x08009d50

0800934c <__d2b>:
 800934c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009350:	2101      	movs	r1, #1
 8009352:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009356:	4690      	mov	r8, r2
 8009358:	461d      	mov	r5, r3
 800935a:	f7ff fcd1 	bl	8008d00 <_Balloc>
 800935e:	4604      	mov	r4, r0
 8009360:	b930      	cbnz	r0, 8009370 <__d2b+0x24>
 8009362:	4602      	mov	r2, r0
 8009364:	f240 310a 	movw	r1, #778	; 0x30a
 8009368:	4b24      	ldr	r3, [pc, #144]	; (80093fc <__d2b+0xb0>)
 800936a:	4825      	ldr	r0, [pc, #148]	; (8009400 <__d2b+0xb4>)
 800936c:	f000 fad0 	bl	8009910 <__assert_func>
 8009370:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009374:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009378:	bb2d      	cbnz	r5, 80093c6 <__d2b+0x7a>
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	f1b8 0300 	subs.w	r3, r8, #0
 8009380:	d026      	beq.n	80093d0 <__d2b+0x84>
 8009382:	4668      	mov	r0, sp
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	f7ff fd83 	bl	8008e90 <__lo0bits>
 800938a:	9900      	ldr	r1, [sp, #0]
 800938c:	b1f0      	cbz	r0, 80093cc <__d2b+0x80>
 800938e:	9a01      	ldr	r2, [sp, #4]
 8009390:	f1c0 0320 	rsb	r3, r0, #32
 8009394:	fa02 f303 	lsl.w	r3, r2, r3
 8009398:	430b      	orrs	r3, r1
 800939a:	40c2      	lsrs	r2, r0
 800939c:	6163      	str	r3, [r4, #20]
 800939e:	9201      	str	r2, [sp, #4]
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	bf14      	ite	ne
 80093a6:	2102      	movne	r1, #2
 80093a8:	2101      	moveq	r1, #1
 80093aa:	61a3      	str	r3, [r4, #24]
 80093ac:	6121      	str	r1, [r4, #16]
 80093ae:	b1c5      	cbz	r5, 80093e2 <__d2b+0x96>
 80093b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093b4:	4405      	add	r5, r0
 80093b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093ba:	603d      	str	r5, [r7, #0]
 80093bc:	6030      	str	r0, [r6, #0]
 80093be:	4620      	mov	r0, r4
 80093c0:	b002      	add	sp, #8
 80093c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093ca:	e7d6      	b.n	800937a <__d2b+0x2e>
 80093cc:	6161      	str	r1, [r4, #20]
 80093ce:	e7e7      	b.n	80093a0 <__d2b+0x54>
 80093d0:	a801      	add	r0, sp, #4
 80093d2:	f7ff fd5d 	bl	8008e90 <__lo0bits>
 80093d6:	2101      	movs	r1, #1
 80093d8:	9b01      	ldr	r3, [sp, #4]
 80093da:	6121      	str	r1, [r4, #16]
 80093dc:	6163      	str	r3, [r4, #20]
 80093de:	3020      	adds	r0, #32
 80093e0:	e7e5      	b.n	80093ae <__d2b+0x62>
 80093e2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80093e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093ea:	6038      	str	r0, [r7, #0]
 80093ec:	6918      	ldr	r0, [r3, #16]
 80093ee:	f7ff fd2f 	bl	8008e50 <__hi0bits>
 80093f2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80093f6:	6031      	str	r1, [r6, #0]
 80093f8:	e7e1      	b.n	80093be <__d2b+0x72>
 80093fa:	bf00      	nop
 80093fc:	08009d3f 	.word	0x08009d3f
 8009400:	08009d50 	.word	0x08009d50

08009404 <_calloc_r>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	fba1 5402 	umull	r5, r4, r1, r2
 800940a:	b934      	cbnz	r4, 800941a <_calloc_r+0x16>
 800940c:	4629      	mov	r1, r5
 800940e:	f7fd ff39 	bl	8007284 <_malloc_r>
 8009412:	4606      	mov	r6, r0
 8009414:	b928      	cbnz	r0, 8009422 <_calloc_r+0x1e>
 8009416:	4630      	mov	r0, r6
 8009418:	bd70      	pop	{r4, r5, r6, pc}
 800941a:	220c      	movs	r2, #12
 800941c:	2600      	movs	r6, #0
 800941e:	6002      	str	r2, [r0, #0]
 8009420:	e7f9      	b.n	8009416 <_calloc_r+0x12>
 8009422:	462a      	mov	r2, r5
 8009424:	4621      	mov	r1, r4
 8009426:	f7fd ff04 	bl	8007232 <memset>
 800942a:	e7f4      	b.n	8009416 <_calloc_r+0x12>

0800942c <_free_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4605      	mov	r5, r0
 8009430:	2900      	cmp	r1, #0
 8009432:	d040      	beq.n	80094b6 <_free_r+0x8a>
 8009434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009438:	1f0c      	subs	r4, r1, #4
 800943a:	2b00      	cmp	r3, #0
 800943c:	bfb8      	it	lt
 800943e:	18e4      	addlt	r4, r4, r3
 8009440:	f7ff fc52 	bl	8008ce8 <__malloc_lock>
 8009444:	4a1c      	ldr	r2, [pc, #112]	; (80094b8 <_free_r+0x8c>)
 8009446:	6813      	ldr	r3, [r2, #0]
 8009448:	b933      	cbnz	r3, 8009458 <_free_r+0x2c>
 800944a:	6063      	str	r3, [r4, #4]
 800944c:	6014      	str	r4, [r2, #0]
 800944e:	4628      	mov	r0, r5
 8009450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009454:	f7ff bc4e 	b.w	8008cf4 <__malloc_unlock>
 8009458:	42a3      	cmp	r3, r4
 800945a:	d908      	bls.n	800946e <_free_r+0x42>
 800945c:	6820      	ldr	r0, [r4, #0]
 800945e:	1821      	adds	r1, r4, r0
 8009460:	428b      	cmp	r3, r1
 8009462:	bf01      	itttt	eq
 8009464:	6819      	ldreq	r1, [r3, #0]
 8009466:	685b      	ldreq	r3, [r3, #4]
 8009468:	1809      	addeq	r1, r1, r0
 800946a:	6021      	streq	r1, [r4, #0]
 800946c:	e7ed      	b.n	800944a <_free_r+0x1e>
 800946e:	461a      	mov	r2, r3
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	b10b      	cbz	r3, 8009478 <_free_r+0x4c>
 8009474:	42a3      	cmp	r3, r4
 8009476:	d9fa      	bls.n	800946e <_free_r+0x42>
 8009478:	6811      	ldr	r1, [r2, #0]
 800947a:	1850      	adds	r0, r2, r1
 800947c:	42a0      	cmp	r0, r4
 800947e:	d10b      	bne.n	8009498 <_free_r+0x6c>
 8009480:	6820      	ldr	r0, [r4, #0]
 8009482:	4401      	add	r1, r0
 8009484:	1850      	adds	r0, r2, r1
 8009486:	4283      	cmp	r3, r0
 8009488:	6011      	str	r1, [r2, #0]
 800948a:	d1e0      	bne.n	800944e <_free_r+0x22>
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	4401      	add	r1, r0
 8009492:	6011      	str	r1, [r2, #0]
 8009494:	6053      	str	r3, [r2, #4]
 8009496:	e7da      	b.n	800944e <_free_r+0x22>
 8009498:	d902      	bls.n	80094a0 <_free_r+0x74>
 800949a:	230c      	movs	r3, #12
 800949c:	602b      	str	r3, [r5, #0]
 800949e:	e7d6      	b.n	800944e <_free_r+0x22>
 80094a0:	6820      	ldr	r0, [r4, #0]
 80094a2:	1821      	adds	r1, r4, r0
 80094a4:	428b      	cmp	r3, r1
 80094a6:	bf01      	itttt	eq
 80094a8:	6819      	ldreq	r1, [r3, #0]
 80094aa:	685b      	ldreq	r3, [r3, #4]
 80094ac:	1809      	addeq	r1, r1, r0
 80094ae:	6021      	streq	r1, [r4, #0]
 80094b0:	6063      	str	r3, [r4, #4]
 80094b2:	6054      	str	r4, [r2, #4]
 80094b4:	e7cb      	b.n	800944e <_free_r+0x22>
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	200023c8 	.word	0x200023c8

080094bc <__sfputc_r>:
 80094bc:	6893      	ldr	r3, [r2, #8]
 80094be:	b410      	push	{r4}
 80094c0:	3b01      	subs	r3, #1
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	6093      	str	r3, [r2, #8]
 80094c6:	da07      	bge.n	80094d8 <__sfputc_r+0x1c>
 80094c8:	6994      	ldr	r4, [r2, #24]
 80094ca:	42a3      	cmp	r3, r4
 80094cc:	db01      	blt.n	80094d2 <__sfputc_r+0x16>
 80094ce:	290a      	cmp	r1, #10
 80094d0:	d102      	bne.n	80094d8 <__sfputc_r+0x1c>
 80094d2:	bc10      	pop	{r4}
 80094d4:	f000 b95c 	b.w	8009790 <__swbuf_r>
 80094d8:	6813      	ldr	r3, [r2, #0]
 80094da:	1c58      	adds	r0, r3, #1
 80094dc:	6010      	str	r0, [r2, #0]
 80094de:	7019      	strb	r1, [r3, #0]
 80094e0:	4608      	mov	r0, r1
 80094e2:	bc10      	pop	{r4}
 80094e4:	4770      	bx	lr

080094e6 <__sfputs_r>:
 80094e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e8:	4606      	mov	r6, r0
 80094ea:	460f      	mov	r7, r1
 80094ec:	4614      	mov	r4, r2
 80094ee:	18d5      	adds	r5, r2, r3
 80094f0:	42ac      	cmp	r4, r5
 80094f2:	d101      	bne.n	80094f8 <__sfputs_r+0x12>
 80094f4:	2000      	movs	r0, #0
 80094f6:	e007      	b.n	8009508 <__sfputs_r+0x22>
 80094f8:	463a      	mov	r2, r7
 80094fa:	4630      	mov	r0, r6
 80094fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009500:	f7ff ffdc 	bl	80094bc <__sfputc_r>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d1f3      	bne.n	80094f0 <__sfputs_r+0xa>
 8009508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800950c <_vfiprintf_r>:
 800950c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009510:	460d      	mov	r5, r1
 8009512:	4614      	mov	r4, r2
 8009514:	4698      	mov	r8, r3
 8009516:	4606      	mov	r6, r0
 8009518:	b09d      	sub	sp, #116	; 0x74
 800951a:	b118      	cbz	r0, 8009524 <_vfiprintf_r+0x18>
 800951c:	6983      	ldr	r3, [r0, #24]
 800951e:	b90b      	cbnz	r3, 8009524 <_vfiprintf_r+0x18>
 8009520:	f7fd fdb4 	bl	800708c <__sinit>
 8009524:	4b89      	ldr	r3, [pc, #548]	; (800974c <_vfiprintf_r+0x240>)
 8009526:	429d      	cmp	r5, r3
 8009528:	d11b      	bne.n	8009562 <_vfiprintf_r+0x56>
 800952a:	6875      	ldr	r5, [r6, #4]
 800952c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800952e:	07d9      	lsls	r1, r3, #31
 8009530:	d405      	bmi.n	800953e <_vfiprintf_r+0x32>
 8009532:	89ab      	ldrh	r3, [r5, #12]
 8009534:	059a      	lsls	r2, r3, #22
 8009536:	d402      	bmi.n	800953e <_vfiprintf_r+0x32>
 8009538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800953a:	f7fd fe6a 	bl	8007212 <__retarget_lock_acquire_recursive>
 800953e:	89ab      	ldrh	r3, [r5, #12]
 8009540:	071b      	lsls	r3, r3, #28
 8009542:	d501      	bpl.n	8009548 <_vfiprintf_r+0x3c>
 8009544:	692b      	ldr	r3, [r5, #16]
 8009546:	b9eb      	cbnz	r3, 8009584 <_vfiprintf_r+0x78>
 8009548:	4629      	mov	r1, r5
 800954a:	4630      	mov	r0, r6
 800954c:	f000 f972 	bl	8009834 <__swsetup_r>
 8009550:	b1c0      	cbz	r0, 8009584 <_vfiprintf_r+0x78>
 8009552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009554:	07dc      	lsls	r4, r3, #31
 8009556:	d50e      	bpl.n	8009576 <_vfiprintf_r+0x6a>
 8009558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800955c:	b01d      	add	sp, #116	; 0x74
 800955e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009562:	4b7b      	ldr	r3, [pc, #492]	; (8009750 <_vfiprintf_r+0x244>)
 8009564:	429d      	cmp	r5, r3
 8009566:	d101      	bne.n	800956c <_vfiprintf_r+0x60>
 8009568:	68b5      	ldr	r5, [r6, #8]
 800956a:	e7df      	b.n	800952c <_vfiprintf_r+0x20>
 800956c:	4b79      	ldr	r3, [pc, #484]	; (8009754 <_vfiprintf_r+0x248>)
 800956e:	429d      	cmp	r5, r3
 8009570:	bf08      	it	eq
 8009572:	68f5      	ldreq	r5, [r6, #12]
 8009574:	e7da      	b.n	800952c <_vfiprintf_r+0x20>
 8009576:	89ab      	ldrh	r3, [r5, #12]
 8009578:	0598      	lsls	r0, r3, #22
 800957a:	d4ed      	bmi.n	8009558 <_vfiprintf_r+0x4c>
 800957c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800957e:	f7fd fe49 	bl	8007214 <__retarget_lock_release_recursive>
 8009582:	e7e9      	b.n	8009558 <_vfiprintf_r+0x4c>
 8009584:	2300      	movs	r3, #0
 8009586:	9309      	str	r3, [sp, #36]	; 0x24
 8009588:	2320      	movs	r3, #32
 800958a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800958e:	2330      	movs	r3, #48	; 0x30
 8009590:	f04f 0901 	mov.w	r9, #1
 8009594:	f8cd 800c 	str.w	r8, [sp, #12]
 8009598:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009758 <_vfiprintf_r+0x24c>
 800959c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095a0:	4623      	mov	r3, r4
 80095a2:	469a      	mov	sl, r3
 80095a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095a8:	b10a      	cbz	r2, 80095ae <_vfiprintf_r+0xa2>
 80095aa:	2a25      	cmp	r2, #37	; 0x25
 80095ac:	d1f9      	bne.n	80095a2 <_vfiprintf_r+0x96>
 80095ae:	ebba 0b04 	subs.w	fp, sl, r4
 80095b2:	d00b      	beq.n	80095cc <_vfiprintf_r+0xc0>
 80095b4:	465b      	mov	r3, fp
 80095b6:	4622      	mov	r2, r4
 80095b8:	4629      	mov	r1, r5
 80095ba:	4630      	mov	r0, r6
 80095bc:	f7ff ff93 	bl	80094e6 <__sfputs_r>
 80095c0:	3001      	adds	r0, #1
 80095c2:	f000 80aa 	beq.w	800971a <_vfiprintf_r+0x20e>
 80095c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095c8:	445a      	add	r2, fp
 80095ca:	9209      	str	r2, [sp, #36]	; 0x24
 80095cc:	f89a 3000 	ldrb.w	r3, [sl]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 80a2 	beq.w	800971a <_vfiprintf_r+0x20e>
 80095d6:	2300      	movs	r3, #0
 80095d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095e0:	f10a 0a01 	add.w	sl, sl, #1
 80095e4:	9304      	str	r3, [sp, #16]
 80095e6:	9307      	str	r3, [sp, #28]
 80095e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095ec:	931a      	str	r3, [sp, #104]	; 0x68
 80095ee:	4654      	mov	r4, sl
 80095f0:	2205      	movs	r2, #5
 80095f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095f6:	4858      	ldr	r0, [pc, #352]	; (8009758 <_vfiprintf_r+0x24c>)
 80095f8:	f7ff fb68 	bl	8008ccc <memchr>
 80095fc:	9a04      	ldr	r2, [sp, #16]
 80095fe:	b9d8      	cbnz	r0, 8009638 <_vfiprintf_r+0x12c>
 8009600:	06d1      	lsls	r1, r2, #27
 8009602:	bf44      	itt	mi
 8009604:	2320      	movmi	r3, #32
 8009606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800960a:	0713      	lsls	r3, r2, #28
 800960c:	bf44      	itt	mi
 800960e:	232b      	movmi	r3, #43	; 0x2b
 8009610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009614:	f89a 3000 	ldrb.w	r3, [sl]
 8009618:	2b2a      	cmp	r3, #42	; 0x2a
 800961a:	d015      	beq.n	8009648 <_vfiprintf_r+0x13c>
 800961c:	4654      	mov	r4, sl
 800961e:	2000      	movs	r0, #0
 8009620:	f04f 0c0a 	mov.w	ip, #10
 8009624:	9a07      	ldr	r2, [sp, #28]
 8009626:	4621      	mov	r1, r4
 8009628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800962c:	3b30      	subs	r3, #48	; 0x30
 800962e:	2b09      	cmp	r3, #9
 8009630:	d94e      	bls.n	80096d0 <_vfiprintf_r+0x1c4>
 8009632:	b1b0      	cbz	r0, 8009662 <_vfiprintf_r+0x156>
 8009634:	9207      	str	r2, [sp, #28]
 8009636:	e014      	b.n	8009662 <_vfiprintf_r+0x156>
 8009638:	eba0 0308 	sub.w	r3, r0, r8
 800963c:	fa09 f303 	lsl.w	r3, r9, r3
 8009640:	4313      	orrs	r3, r2
 8009642:	46a2      	mov	sl, r4
 8009644:	9304      	str	r3, [sp, #16]
 8009646:	e7d2      	b.n	80095ee <_vfiprintf_r+0xe2>
 8009648:	9b03      	ldr	r3, [sp, #12]
 800964a:	1d19      	adds	r1, r3, #4
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	9103      	str	r1, [sp, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	bfbb      	ittet	lt
 8009654:	425b      	neglt	r3, r3
 8009656:	f042 0202 	orrlt.w	r2, r2, #2
 800965a:	9307      	strge	r3, [sp, #28]
 800965c:	9307      	strlt	r3, [sp, #28]
 800965e:	bfb8      	it	lt
 8009660:	9204      	strlt	r2, [sp, #16]
 8009662:	7823      	ldrb	r3, [r4, #0]
 8009664:	2b2e      	cmp	r3, #46	; 0x2e
 8009666:	d10c      	bne.n	8009682 <_vfiprintf_r+0x176>
 8009668:	7863      	ldrb	r3, [r4, #1]
 800966a:	2b2a      	cmp	r3, #42	; 0x2a
 800966c:	d135      	bne.n	80096da <_vfiprintf_r+0x1ce>
 800966e:	9b03      	ldr	r3, [sp, #12]
 8009670:	3402      	adds	r4, #2
 8009672:	1d1a      	adds	r2, r3, #4
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	9203      	str	r2, [sp, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	bfb8      	it	lt
 800967c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009680:	9305      	str	r3, [sp, #20]
 8009682:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800975c <_vfiprintf_r+0x250>
 8009686:	2203      	movs	r2, #3
 8009688:	4650      	mov	r0, sl
 800968a:	7821      	ldrb	r1, [r4, #0]
 800968c:	f7ff fb1e 	bl	8008ccc <memchr>
 8009690:	b140      	cbz	r0, 80096a4 <_vfiprintf_r+0x198>
 8009692:	2340      	movs	r3, #64	; 0x40
 8009694:	eba0 000a 	sub.w	r0, r0, sl
 8009698:	fa03 f000 	lsl.w	r0, r3, r0
 800969c:	9b04      	ldr	r3, [sp, #16]
 800969e:	3401      	adds	r4, #1
 80096a0:	4303      	orrs	r3, r0
 80096a2:	9304      	str	r3, [sp, #16]
 80096a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a8:	2206      	movs	r2, #6
 80096aa:	482d      	ldr	r0, [pc, #180]	; (8009760 <_vfiprintf_r+0x254>)
 80096ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096b0:	f7ff fb0c 	bl	8008ccc <memchr>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d03f      	beq.n	8009738 <_vfiprintf_r+0x22c>
 80096b8:	4b2a      	ldr	r3, [pc, #168]	; (8009764 <_vfiprintf_r+0x258>)
 80096ba:	bb1b      	cbnz	r3, 8009704 <_vfiprintf_r+0x1f8>
 80096bc:	9b03      	ldr	r3, [sp, #12]
 80096be:	3307      	adds	r3, #7
 80096c0:	f023 0307 	bic.w	r3, r3, #7
 80096c4:	3308      	adds	r3, #8
 80096c6:	9303      	str	r3, [sp, #12]
 80096c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ca:	443b      	add	r3, r7
 80096cc:	9309      	str	r3, [sp, #36]	; 0x24
 80096ce:	e767      	b.n	80095a0 <_vfiprintf_r+0x94>
 80096d0:	460c      	mov	r4, r1
 80096d2:	2001      	movs	r0, #1
 80096d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80096d8:	e7a5      	b.n	8009626 <_vfiprintf_r+0x11a>
 80096da:	2300      	movs	r3, #0
 80096dc:	f04f 0c0a 	mov.w	ip, #10
 80096e0:	4619      	mov	r1, r3
 80096e2:	3401      	adds	r4, #1
 80096e4:	9305      	str	r3, [sp, #20]
 80096e6:	4620      	mov	r0, r4
 80096e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096ec:	3a30      	subs	r2, #48	; 0x30
 80096ee:	2a09      	cmp	r2, #9
 80096f0:	d903      	bls.n	80096fa <_vfiprintf_r+0x1ee>
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d0c5      	beq.n	8009682 <_vfiprintf_r+0x176>
 80096f6:	9105      	str	r1, [sp, #20]
 80096f8:	e7c3      	b.n	8009682 <_vfiprintf_r+0x176>
 80096fa:	4604      	mov	r4, r0
 80096fc:	2301      	movs	r3, #1
 80096fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009702:	e7f0      	b.n	80096e6 <_vfiprintf_r+0x1da>
 8009704:	ab03      	add	r3, sp, #12
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	462a      	mov	r2, r5
 800970a:	4630      	mov	r0, r6
 800970c:	4b16      	ldr	r3, [pc, #88]	; (8009768 <_vfiprintf_r+0x25c>)
 800970e:	a904      	add	r1, sp, #16
 8009710:	f7fd feca 	bl	80074a8 <_printf_float>
 8009714:	4607      	mov	r7, r0
 8009716:	1c78      	adds	r0, r7, #1
 8009718:	d1d6      	bne.n	80096c8 <_vfiprintf_r+0x1bc>
 800971a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800971c:	07d9      	lsls	r1, r3, #31
 800971e:	d405      	bmi.n	800972c <_vfiprintf_r+0x220>
 8009720:	89ab      	ldrh	r3, [r5, #12]
 8009722:	059a      	lsls	r2, r3, #22
 8009724:	d402      	bmi.n	800972c <_vfiprintf_r+0x220>
 8009726:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009728:	f7fd fd74 	bl	8007214 <__retarget_lock_release_recursive>
 800972c:	89ab      	ldrh	r3, [r5, #12]
 800972e:	065b      	lsls	r3, r3, #25
 8009730:	f53f af12 	bmi.w	8009558 <_vfiprintf_r+0x4c>
 8009734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009736:	e711      	b.n	800955c <_vfiprintf_r+0x50>
 8009738:	ab03      	add	r3, sp, #12
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	462a      	mov	r2, r5
 800973e:	4630      	mov	r0, r6
 8009740:	4b09      	ldr	r3, [pc, #36]	; (8009768 <_vfiprintf_r+0x25c>)
 8009742:	a904      	add	r1, sp, #16
 8009744:	f7fe f94c 	bl	80079e0 <_printf_i>
 8009748:	e7e4      	b.n	8009714 <_vfiprintf_r+0x208>
 800974a:	bf00      	nop
 800974c:	08009c48 	.word	0x08009c48
 8009750:	08009c68 	.word	0x08009c68
 8009754:	08009c28 	.word	0x08009c28
 8009758:	08009eac 	.word	0x08009eac
 800975c:	08009eb2 	.word	0x08009eb2
 8009760:	08009eb6 	.word	0x08009eb6
 8009764:	080074a9 	.word	0x080074a9
 8009768:	080094e7 	.word	0x080094e7

0800976c <_read_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4604      	mov	r4, r0
 8009770:	4608      	mov	r0, r1
 8009772:	4611      	mov	r1, r2
 8009774:	2200      	movs	r2, #0
 8009776:	4d05      	ldr	r5, [pc, #20]	; (800978c <_read_r+0x20>)
 8009778:	602a      	str	r2, [r5, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	f7f8 fc3b 	bl	8001ff6 <_read>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	d102      	bne.n	800978a <_read_r+0x1e>
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	b103      	cbz	r3, 800978a <_read_r+0x1e>
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	200023d0 	.word	0x200023d0

08009790 <__swbuf_r>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	460e      	mov	r6, r1
 8009794:	4614      	mov	r4, r2
 8009796:	4605      	mov	r5, r0
 8009798:	b118      	cbz	r0, 80097a2 <__swbuf_r+0x12>
 800979a:	6983      	ldr	r3, [r0, #24]
 800979c:	b90b      	cbnz	r3, 80097a2 <__swbuf_r+0x12>
 800979e:	f7fd fc75 	bl	800708c <__sinit>
 80097a2:	4b21      	ldr	r3, [pc, #132]	; (8009828 <__swbuf_r+0x98>)
 80097a4:	429c      	cmp	r4, r3
 80097a6:	d12b      	bne.n	8009800 <__swbuf_r+0x70>
 80097a8:	686c      	ldr	r4, [r5, #4]
 80097aa:	69a3      	ldr	r3, [r4, #24]
 80097ac:	60a3      	str	r3, [r4, #8]
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	071a      	lsls	r2, r3, #28
 80097b2:	d52f      	bpl.n	8009814 <__swbuf_r+0x84>
 80097b4:	6923      	ldr	r3, [r4, #16]
 80097b6:	b36b      	cbz	r3, 8009814 <__swbuf_r+0x84>
 80097b8:	6923      	ldr	r3, [r4, #16]
 80097ba:	6820      	ldr	r0, [r4, #0]
 80097bc:	b2f6      	uxtb	r6, r6
 80097be:	1ac0      	subs	r0, r0, r3
 80097c0:	6963      	ldr	r3, [r4, #20]
 80097c2:	4637      	mov	r7, r6
 80097c4:	4283      	cmp	r3, r0
 80097c6:	dc04      	bgt.n	80097d2 <__swbuf_r+0x42>
 80097c8:	4621      	mov	r1, r4
 80097ca:	4628      	mov	r0, r5
 80097cc:	f7ff fa24 	bl	8008c18 <_fflush_r>
 80097d0:	bb30      	cbnz	r0, 8009820 <__swbuf_r+0x90>
 80097d2:	68a3      	ldr	r3, [r4, #8]
 80097d4:	3001      	adds	r0, #1
 80097d6:	3b01      	subs	r3, #1
 80097d8:	60a3      	str	r3, [r4, #8]
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	1c5a      	adds	r2, r3, #1
 80097de:	6022      	str	r2, [r4, #0]
 80097e0:	701e      	strb	r6, [r3, #0]
 80097e2:	6963      	ldr	r3, [r4, #20]
 80097e4:	4283      	cmp	r3, r0
 80097e6:	d004      	beq.n	80097f2 <__swbuf_r+0x62>
 80097e8:	89a3      	ldrh	r3, [r4, #12]
 80097ea:	07db      	lsls	r3, r3, #31
 80097ec:	d506      	bpl.n	80097fc <__swbuf_r+0x6c>
 80097ee:	2e0a      	cmp	r6, #10
 80097f0:	d104      	bne.n	80097fc <__swbuf_r+0x6c>
 80097f2:	4621      	mov	r1, r4
 80097f4:	4628      	mov	r0, r5
 80097f6:	f7ff fa0f 	bl	8008c18 <_fflush_r>
 80097fa:	b988      	cbnz	r0, 8009820 <__swbuf_r+0x90>
 80097fc:	4638      	mov	r0, r7
 80097fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009800:	4b0a      	ldr	r3, [pc, #40]	; (800982c <__swbuf_r+0x9c>)
 8009802:	429c      	cmp	r4, r3
 8009804:	d101      	bne.n	800980a <__swbuf_r+0x7a>
 8009806:	68ac      	ldr	r4, [r5, #8]
 8009808:	e7cf      	b.n	80097aa <__swbuf_r+0x1a>
 800980a:	4b09      	ldr	r3, [pc, #36]	; (8009830 <__swbuf_r+0xa0>)
 800980c:	429c      	cmp	r4, r3
 800980e:	bf08      	it	eq
 8009810:	68ec      	ldreq	r4, [r5, #12]
 8009812:	e7ca      	b.n	80097aa <__swbuf_r+0x1a>
 8009814:	4621      	mov	r1, r4
 8009816:	4628      	mov	r0, r5
 8009818:	f000 f80c 	bl	8009834 <__swsetup_r>
 800981c:	2800      	cmp	r0, #0
 800981e:	d0cb      	beq.n	80097b8 <__swbuf_r+0x28>
 8009820:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009824:	e7ea      	b.n	80097fc <__swbuf_r+0x6c>
 8009826:	bf00      	nop
 8009828:	08009c48 	.word	0x08009c48
 800982c:	08009c68 	.word	0x08009c68
 8009830:	08009c28 	.word	0x08009c28

08009834 <__swsetup_r>:
 8009834:	4b32      	ldr	r3, [pc, #200]	; (8009900 <__swsetup_r+0xcc>)
 8009836:	b570      	push	{r4, r5, r6, lr}
 8009838:	681d      	ldr	r5, [r3, #0]
 800983a:	4606      	mov	r6, r0
 800983c:	460c      	mov	r4, r1
 800983e:	b125      	cbz	r5, 800984a <__swsetup_r+0x16>
 8009840:	69ab      	ldr	r3, [r5, #24]
 8009842:	b913      	cbnz	r3, 800984a <__swsetup_r+0x16>
 8009844:	4628      	mov	r0, r5
 8009846:	f7fd fc21 	bl	800708c <__sinit>
 800984a:	4b2e      	ldr	r3, [pc, #184]	; (8009904 <__swsetup_r+0xd0>)
 800984c:	429c      	cmp	r4, r3
 800984e:	d10f      	bne.n	8009870 <__swsetup_r+0x3c>
 8009850:	686c      	ldr	r4, [r5, #4]
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009858:	0719      	lsls	r1, r3, #28
 800985a:	d42c      	bmi.n	80098b6 <__swsetup_r+0x82>
 800985c:	06dd      	lsls	r5, r3, #27
 800985e:	d411      	bmi.n	8009884 <__swsetup_r+0x50>
 8009860:	2309      	movs	r3, #9
 8009862:	6033      	str	r3, [r6, #0]
 8009864:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800986c:	81a3      	strh	r3, [r4, #12]
 800986e:	e03e      	b.n	80098ee <__swsetup_r+0xba>
 8009870:	4b25      	ldr	r3, [pc, #148]	; (8009908 <__swsetup_r+0xd4>)
 8009872:	429c      	cmp	r4, r3
 8009874:	d101      	bne.n	800987a <__swsetup_r+0x46>
 8009876:	68ac      	ldr	r4, [r5, #8]
 8009878:	e7eb      	b.n	8009852 <__swsetup_r+0x1e>
 800987a:	4b24      	ldr	r3, [pc, #144]	; (800990c <__swsetup_r+0xd8>)
 800987c:	429c      	cmp	r4, r3
 800987e:	bf08      	it	eq
 8009880:	68ec      	ldreq	r4, [r5, #12]
 8009882:	e7e6      	b.n	8009852 <__swsetup_r+0x1e>
 8009884:	0758      	lsls	r0, r3, #29
 8009886:	d512      	bpl.n	80098ae <__swsetup_r+0x7a>
 8009888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800988a:	b141      	cbz	r1, 800989e <__swsetup_r+0x6a>
 800988c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009890:	4299      	cmp	r1, r3
 8009892:	d002      	beq.n	800989a <__swsetup_r+0x66>
 8009894:	4630      	mov	r0, r6
 8009896:	f7ff fdc9 	bl	800942c <_free_r>
 800989a:	2300      	movs	r3, #0
 800989c:	6363      	str	r3, [r4, #52]	; 0x34
 800989e:	89a3      	ldrh	r3, [r4, #12]
 80098a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098a4:	81a3      	strh	r3, [r4, #12]
 80098a6:	2300      	movs	r3, #0
 80098a8:	6063      	str	r3, [r4, #4]
 80098aa:	6923      	ldr	r3, [r4, #16]
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	f043 0308 	orr.w	r3, r3, #8
 80098b4:	81a3      	strh	r3, [r4, #12]
 80098b6:	6923      	ldr	r3, [r4, #16]
 80098b8:	b94b      	cbnz	r3, 80098ce <__swsetup_r+0x9a>
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098c4:	d003      	beq.n	80098ce <__swsetup_r+0x9a>
 80098c6:	4621      	mov	r1, r4
 80098c8:	4630      	mov	r0, r6
 80098ca:	f000 f877 	bl	80099bc <__smakebuf_r>
 80098ce:	89a0      	ldrh	r0, [r4, #12]
 80098d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098d4:	f010 0301 	ands.w	r3, r0, #1
 80098d8:	d00a      	beq.n	80098f0 <__swsetup_r+0xbc>
 80098da:	2300      	movs	r3, #0
 80098dc:	60a3      	str	r3, [r4, #8]
 80098de:	6963      	ldr	r3, [r4, #20]
 80098e0:	425b      	negs	r3, r3
 80098e2:	61a3      	str	r3, [r4, #24]
 80098e4:	6923      	ldr	r3, [r4, #16]
 80098e6:	b943      	cbnz	r3, 80098fa <__swsetup_r+0xc6>
 80098e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098ec:	d1ba      	bne.n	8009864 <__swsetup_r+0x30>
 80098ee:	bd70      	pop	{r4, r5, r6, pc}
 80098f0:	0781      	lsls	r1, r0, #30
 80098f2:	bf58      	it	pl
 80098f4:	6963      	ldrpl	r3, [r4, #20]
 80098f6:	60a3      	str	r3, [r4, #8]
 80098f8:	e7f4      	b.n	80098e4 <__swsetup_r+0xb0>
 80098fa:	2000      	movs	r0, #0
 80098fc:	e7f7      	b.n	80098ee <__swsetup_r+0xba>
 80098fe:	bf00      	nop
 8009900:	20000024 	.word	0x20000024
 8009904:	08009c48 	.word	0x08009c48
 8009908:	08009c68 	.word	0x08009c68
 800990c:	08009c28 	.word	0x08009c28

08009910 <__assert_func>:
 8009910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009912:	4614      	mov	r4, r2
 8009914:	461a      	mov	r2, r3
 8009916:	4b09      	ldr	r3, [pc, #36]	; (800993c <__assert_func+0x2c>)
 8009918:	4605      	mov	r5, r0
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68d8      	ldr	r0, [r3, #12]
 800991e:	b14c      	cbz	r4, 8009934 <__assert_func+0x24>
 8009920:	4b07      	ldr	r3, [pc, #28]	; (8009940 <__assert_func+0x30>)
 8009922:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009926:	9100      	str	r1, [sp, #0]
 8009928:	462b      	mov	r3, r5
 800992a:	4906      	ldr	r1, [pc, #24]	; (8009944 <__assert_func+0x34>)
 800992c:	f000 f80e 	bl	800994c <fiprintf>
 8009930:	f000 f8a3 	bl	8009a7a <abort>
 8009934:	4b04      	ldr	r3, [pc, #16]	; (8009948 <__assert_func+0x38>)
 8009936:	461c      	mov	r4, r3
 8009938:	e7f3      	b.n	8009922 <__assert_func+0x12>
 800993a:	bf00      	nop
 800993c:	20000024 	.word	0x20000024
 8009940:	08009ebd 	.word	0x08009ebd
 8009944:	08009eca 	.word	0x08009eca
 8009948:	08009ef8 	.word	0x08009ef8

0800994c <fiprintf>:
 800994c:	b40e      	push	{r1, r2, r3}
 800994e:	b503      	push	{r0, r1, lr}
 8009950:	4601      	mov	r1, r0
 8009952:	ab03      	add	r3, sp, #12
 8009954:	4805      	ldr	r0, [pc, #20]	; (800996c <fiprintf+0x20>)
 8009956:	f853 2b04 	ldr.w	r2, [r3], #4
 800995a:	6800      	ldr	r0, [r0, #0]
 800995c:	9301      	str	r3, [sp, #4]
 800995e:	f7ff fdd5 	bl	800950c <_vfiprintf_r>
 8009962:	b002      	add	sp, #8
 8009964:	f85d eb04 	ldr.w	lr, [sp], #4
 8009968:	b003      	add	sp, #12
 800996a:	4770      	bx	lr
 800996c:	20000024 	.word	0x20000024

08009970 <__swhatbuf_r>:
 8009970:	b570      	push	{r4, r5, r6, lr}
 8009972:	460e      	mov	r6, r1
 8009974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009978:	4614      	mov	r4, r2
 800997a:	2900      	cmp	r1, #0
 800997c:	461d      	mov	r5, r3
 800997e:	b096      	sub	sp, #88	; 0x58
 8009980:	da08      	bge.n	8009994 <__swhatbuf_r+0x24>
 8009982:	2200      	movs	r2, #0
 8009984:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009988:	602a      	str	r2, [r5, #0]
 800998a:	061a      	lsls	r2, r3, #24
 800998c:	d410      	bmi.n	80099b0 <__swhatbuf_r+0x40>
 800998e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009992:	e00e      	b.n	80099b2 <__swhatbuf_r+0x42>
 8009994:	466a      	mov	r2, sp
 8009996:	f000 f877 	bl	8009a88 <_fstat_r>
 800999a:	2800      	cmp	r0, #0
 800999c:	dbf1      	blt.n	8009982 <__swhatbuf_r+0x12>
 800999e:	9a01      	ldr	r2, [sp, #4]
 80099a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099a8:	425a      	negs	r2, r3
 80099aa:	415a      	adcs	r2, r3
 80099ac:	602a      	str	r2, [r5, #0]
 80099ae:	e7ee      	b.n	800998e <__swhatbuf_r+0x1e>
 80099b0:	2340      	movs	r3, #64	; 0x40
 80099b2:	2000      	movs	r0, #0
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	b016      	add	sp, #88	; 0x58
 80099b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080099bc <__smakebuf_r>:
 80099bc:	898b      	ldrh	r3, [r1, #12]
 80099be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099c0:	079d      	lsls	r5, r3, #30
 80099c2:	4606      	mov	r6, r0
 80099c4:	460c      	mov	r4, r1
 80099c6:	d507      	bpl.n	80099d8 <__smakebuf_r+0x1c>
 80099c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	6123      	str	r3, [r4, #16]
 80099d0:	2301      	movs	r3, #1
 80099d2:	6163      	str	r3, [r4, #20]
 80099d4:	b002      	add	sp, #8
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	466a      	mov	r2, sp
 80099da:	ab01      	add	r3, sp, #4
 80099dc:	f7ff ffc8 	bl	8009970 <__swhatbuf_r>
 80099e0:	9900      	ldr	r1, [sp, #0]
 80099e2:	4605      	mov	r5, r0
 80099e4:	4630      	mov	r0, r6
 80099e6:	f7fd fc4d 	bl	8007284 <_malloc_r>
 80099ea:	b948      	cbnz	r0, 8009a00 <__smakebuf_r+0x44>
 80099ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f0:	059a      	lsls	r2, r3, #22
 80099f2:	d4ef      	bmi.n	80099d4 <__smakebuf_r+0x18>
 80099f4:	f023 0303 	bic.w	r3, r3, #3
 80099f8:	f043 0302 	orr.w	r3, r3, #2
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	e7e3      	b.n	80099c8 <__smakebuf_r+0xc>
 8009a00:	4b0d      	ldr	r3, [pc, #52]	; (8009a38 <__smakebuf_r+0x7c>)
 8009a02:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	6020      	str	r0, [r4, #0]
 8009a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a0c:	81a3      	strh	r3, [r4, #12]
 8009a0e:	9b00      	ldr	r3, [sp, #0]
 8009a10:	6120      	str	r0, [r4, #16]
 8009a12:	6163      	str	r3, [r4, #20]
 8009a14:	9b01      	ldr	r3, [sp, #4]
 8009a16:	b15b      	cbz	r3, 8009a30 <__smakebuf_r+0x74>
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a1e:	f000 f845 	bl	8009aac <_isatty_r>
 8009a22:	b128      	cbz	r0, 8009a30 <__smakebuf_r+0x74>
 8009a24:	89a3      	ldrh	r3, [r4, #12]
 8009a26:	f023 0303 	bic.w	r3, r3, #3
 8009a2a:	f043 0301 	orr.w	r3, r3, #1
 8009a2e:	81a3      	strh	r3, [r4, #12]
 8009a30:	89a0      	ldrh	r0, [r4, #12]
 8009a32:	4305      	orrs	r5, r0
 8009a34:	81a5      	strh	r5, [r4, #12]
 8009a36:	e7cd      	b.n	80099d4 <__smakebuf_r+0x18>
 8009a38:	08007025 	.word	0x08007025

08009a3c <__ascii_mbtowc>:
 8009a3c:	b082      	sub	sp, #8
 8009a3e:	b901      	cbnz	r1, 8009a42 <__ascii_mbtowc+0x6>
 8009a40:	a901      	add	r1, sp, #4
 8009a42:	b142      	cbz	r2, 8009a56 <__ascii_mbtowc+0x1a>
 8009a44:	b14b      	cbz	r3, 8009a5a <__ascii_mbtowc+0x1e>
 8009a46:	7813      	ldrb	r3, [r2, #0]
 8009a48:	600b      	str	r3, [r1, #0]
 8009a4a:	7812      	ldrb	r2, [r2, #0]
 8009a4c:	1e10      	subs	r0, r2, #0
 8009a4e:	bf18      	it	ne
 8009a50:	2001      	movne	r0, #1
 8009a52:	b002      	add	sp, #8
 8009a54:	4770      	bx	lr
 8009a56:	4610      	mov	r0, r2
 8009a58:	e7fb      	b.n	8009a52 <__ascii_mbtowc+0x16>
 8009a5a:	f06f 0001 	mvn.w	r0, #1
 8009a5e:	e7f8      	b.n	8009a52 <__ascii_mbtowc+0x16>

08009a60 <__ascii_wctomb>:
 8009a60:	4603      	mov	r3, r0
 8009a62:	4608      	mov	r0, r1
 8009a64:	b141      	cbz	r1, 8009a78 <__ascii_wctomb+0x18>
 8009a66:	2aff      	cmp	r2, #255	; 0xff
 8009a68:	d904      	bls.n	8009a74 <__ascii_wctomb+0x14>
 8009a6a:	228a      	movs	r2, #138	; 0x8a
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	4770      	bx	lr
 8009a74:	2001      	movs	r0, #1
 8009a76:	700a      	strb	r2, [r1, #0]
 8009a78:	4770      	bx	lr

08009a7a <abort>:
 8009a7a:	2006      	movs	r0, #6
 8009a7c:	b508      	push	{r3, lr}
 8009a7e:	f000 f84d 	bl	8009b1c <raise>
 8009a82:	2001      	movs	r0, #1
 8009a84:	f7f8 faad 	bl	8001fe2 <_exit>

08009a88 <_fstat_r>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	4d06      	ldr	r5, [pc, #24]	; (8009aa8 <_fstat_r+0x20>)
 8009a8e:	4604      	mov	r4, r0
 8009a90:	4608      	mov	r0, r1
 8009a92:	4611      	mov	r1, r2
 8009a94:	602b      	str	r3, [r5, #0]
 8009a96:	f7f8 fad6 	bl	8002046 <_fstat>
 8009a9a:	1c43      	adds	r3, r0, #1
 8009a9c:	d102      	bne.n	8009aa4 <_fstat_r+0x1c>
 8009a9e:	682b      	ldr	r3, [r5, #0]
 8009aa0:	b103      	cbz	r3, 8009aa4 <_fstat_r+0x1c>
 8009aa2:	6023      	str	r3, [r4, #0]
 8009aa4:	bd38      	pop	{r3, r4, r5, pc}
 8009aa6:	bf00      	nop
 8009aa8:	200023d0 	.word	0x200023d0

08009aac <_isatty_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	2300      	movs	r3, #0
 8009ab0:	4d05      	ldr	r5, [pc, #20]	; (8009ac8 <_isatty_r+0x1c>)
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	602b      	str	r3, [r5, #0]
 8009ab8:	f7f8 fad4 	bl	8002064 <_isatty>
 8009abc:	1c43      	adds	r3, r0, #1
 8009abe:	d102      	bne.n	8009ac6 <_isatty_r+0x1a>
 8009ac0:	682b      	ldr	r3, [r5, #0]
 8009ac2:	b103      	cbz	r3, 8009ac6 <_isatty_r+0x1a>
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	200023d0 	.word	0x200023d0

08009acc <_raise_r>:
 8009acc:	291f      	cmp	r1, #31
 8009ace:	b538      	push	{r3, r4, r5, lr}
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	460d      	mov	r5, r1
 8009ad4:	d904      	bls.n	8009ae0 <_raise_r+0x14>
 8009ad6:	2316      	movs	r3, #22
 8009ad8:	6003      	str	r3, [r0, #0]
 8009ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ade:	bd38      	pop	{r3, r4, r5, pc}
 8009ae0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ae2:	b112      	cbz	r2, 8009aea <_raise_r+0x1e>
 8009ae4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ae8:	b94b      	cbnz	r3, 8009afe <_raise_r+0x32>
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 f830 	bl	8009b50 <_getpid_r>
 8009af0:	462a      	mov	r2, r5
 8009af2:	4601      	mov	r1, r0
 8009af4:	4620      	mov	r0, r4
 8009af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009afa:	f000 b817 	b.w	8009b2c <_kill_r>
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d00a      	beq.n	8009b18 <_raise_r+0x4c>
 8009b02:	1c59      	adds	r1, r3, #1
 8009b04:	d103      	bne.n	8009b0e <_raise_r+0x42>
 8009b06:	2316      	movs	r3, #22
 8009b08:	6003      	str	r3, [r0, #0]
 8009b0a:	2001      	movs	r0, #1
 8009b0c:	e7e7      	b.n	8009ade <_raise_r+0x12>
 8009b0e:	2400      	movs	r4, #0
 8009b10:	4628      	mov	r0, r5
 8009b12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b16:	4798      	blx	r3
 8009b18:	2000      	movs	r0, #0
 8009b1a:	e7e0      	b.n	8009ade <_raise_r+0x12>

08009b1c <raise>:
 8009b1c:	4b02      	ldr	r3, [pc, #8]	; (8009b28 <raise+0xc>)
 8009b1e:	4601      	mov	r1, r0
 8009b20:	6818      	ldr	r0, [r3, #0]
 8009b22:	f7ff bfd3 	b.w	8009acc <_raise_r>
 8009b26:	bf00      	nop
 8009b28:	20000024 	.word	0x20000024

08009b2c <_kill_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	2300      	movs	r3, #0
 8009b30:	4d06      	ldr	r5, [pc, #24]	; (8009b4c <_kill_r+0x20>)
 8009b32:	4604      	mov	r4, r0
 8009b34:	4608      	mov	r0, r1
 8009b36:	4611      	mov	r1, r2
 8009b38:	602b      	str	r3, [r5, #0]
 8009b3a:	f7f8 fa42 	bl	8001fc2 <_kill>
 8009b3e:	1c43      	adds	r3, r0, #1
 8009b40:	d102      	bne.n	8009b48 <_kill_r+0x1c>
 8009b42:	682b      	ldr	r3, [r5, #0]
 8009b44:	b103      	cbz	r3, 8009b48 <_kill_r+0x1c>
 8009b46:	6023      	str	r3, [r4, #0]
 8009b48:	bd38      	pop	{r3, r4, r5, pc}
 8009b4a:	bf00      	nop
 8009b4c:	200023d0 	.word	0x200023d0

08009b50 <_getpid_r>:
 8009b50:	f7f8 ba30 	b.w	8001fb4 <_getpid>

08009b54 <_init>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	bf00      	nop
 8009b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5a:	bc08      	pop	{r3}
 8009b5c:	469e      	mov	lr, r3
 8009b5e:	4770      	bx	lr

08009b60 <_fini>:
 8009b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b62:	bf00      	nop
 8009b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b66:	bc08      	pop	{r3}
 8009b68:	469e      	mov	lr, r3
 8009b6a:	4770      	bx	lr
