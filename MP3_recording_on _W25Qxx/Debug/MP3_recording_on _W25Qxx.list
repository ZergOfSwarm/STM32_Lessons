
MP3_recording_on _W25Qxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050fc  080050fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080050fc  080050fc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050fc  080050fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  20000070  08005174  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  08005174  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da9d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000227c  00000000  00000000  0002db36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0002fdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00030ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018da7  00000000  00000000  00031b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f57c  00000000  00000000  0004a92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d984  00000000  00000000  00059eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e782f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e8  00000000  00000000  000e7880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080046ec 	.word	0x080046ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080046ec 	.word	0x080046ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d013      	beq.n	800019c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800017c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00b      	beq.n	800019c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000184:	e000      	b.n	8000188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	b2d2      	uxtb	r2, r2
 800019a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI2_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 50);
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	b29a      	uxth	r2, r3
 80001b8:	2332      	movs	r3, #50	; 0x32
 80001ba:	68b9      	ldr	r1, [r7, #8]
 80001bc:	480c      	ldr	r0, [pc, #48]	; (80001f0 <_write+0x48>)
 80001be:	f003 f83e 	bl	800323e <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80001c2:	2300      	movs	r3, #0
 80001c4:	617b      	str	r3, [r7, #20]
 80001c6:	e009      	b.n	80001dc <_write+0x34>
		ITM_SendChar(*ptr++);
 80001c8:	68bb      	ldr	r3, [r7, #8]
 80001ca:	1c5a      	adds	r2, r3, #1
 80001cc:	60ba      	str	r2, [r7, #8]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	4618      	mov	r0, r3
 80001d2:	f7ff ffc3 	bl	800015c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80001d6:	697b      	ldr	r3, [r7, #20]
 80001d8:	3301      	adds	r3, #1
 80001da:	617b      	str	r3, [r7, #20]
 80001dc:	697a      	ldr	r2, [r7, #20]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	dbf1      	blt.n	80001c8 <_write+0x20>
	}
	return len;
 80001e4:	687b      	ldr	r3, [r7, #4]
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3718      	adds	r7, #24
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	200004fc 	.word	0x200004fc

080001f4 <W25Qxxx>:
		printf("%c, ", arr[i]);
	}
	printf("\n");
}

void W25Qxxx() {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	///////////////////////////////////// ИНИЦИАЛИЗАЦИЯ ФЛЕШКИ ////////////////////////////////
	W25qxx_Init();
 80001f8:	f000 fdb6 	bl	8000d68 <W25qxx_Init>
	///////////////////////////////////// ОЧИСТКА ВСЕЙ ФЛЕШКИ ////////////////////////////////
	W25qxx_EraseChip();
 80001fc:	f000 ff06 	bl	800100c <W25qxx_EraseChip>
//	  uint8_t clear = W25qxx_IsEmptyPage(0, 40);
	/////////////////////////////////// СТЁРТ ЛИ СЕКТОР //////////////////////
//	  clear = W25qxx_IsEmptySector(0, 1360);
	/////////////////////////////////// СТЁРТ ЛИ БЛОК ////////////////////////
//	  clear = W25qxx_IsEmptyBlock(0, 9360);
}
 8000200:	bf00      	nop
 8000202:	bd80      	pop	{r7, pc}

08000204 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800020a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800020c:	f001 f8f8 	bl	8001400 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000210:	f000 f968 	bl	80004e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000214:	f000 fa0c 	bl	8000630 <MX_GPIO_Init>
	MX_SPI2_Init();
 8000218:	f000 f9aa 	bl	8000570 <MX_SPI2_Init>
	MX_USART3_UART_Init();
 800021c:	f000 f9de 	bl	80005dc <MX_USART3_UART_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_UART_Receive(&huart3, (uint8_t*) Rx_data, SIZE, 1000); // Слушаем UART
 8000220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000224:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8000228:	499c      	ldr	r1, [pc, #624]	; (800049c <main+0x298>)
 800022a:	489d      	ldr	r0, [pc, #628]	; (80004a0 <main+0x29c>)
 800022c:	f003 f899 	bl	8003362 <HAL_UART_Receive>

		if (strlen((char*) Rx_data) != 0) { // Если есть данные то
 8000230:	4b9a      	ldr	r3, [pc, #616]	; (800049c <main+0x298>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d0f3      	beq.n	8000220 <main+0x1c>
			memcpy(MainBuf, Rx_data, SIZE); // Записываем Rx_data в переменную MainBuf
 8000238:	4a9a      	ldr	r2, [pc, #616]	; (80004a4 <main+0x2a0>)
 800023a:	4b98      	ldr	r3, [pc, #608]	; (800049c <main+0x298>)
 800023c:	4610      	mov	r0, r2
 800023e:	4619      	mov	r1, r3
 8000240:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8000244:	461a      	mov	r2, r3
 8000246:	f003 fa31 	bl	80036ac <memcpy>
			printf("MainBuf - %s\r\n", (char*) MainBuf);
 800024a:	4996      	ldr	r1, [pc, #600]	; (80004a4 <main+0x2a0>)
 800024c:	4896      	ldr	r0, [pc, #600]	; (80004a8 <main+0x2a4>)
 800024e:	f003 fa43 	bl	80036d8 <iprintf>
			memset(Rx_data, 0, SIZE); /* To empty a Rx_data array*/
 8000252:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8000256:	2100      	movs	r1, #0
 8000258:	4890      	ldr	r0, [pc, #576]	; (800049c <main+0x298>)
 800025a:	f003 fa35 	bl	80036c8 <memset>
			char w_buf[pagesize] = { 0, }; // Создали буфер в размер страницы
 800025e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000262:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	3304      	adds	r3, #4
 800026c:	22fc      	movs	r2, #252	; 0xfc
 800026e:	2100      	movs	r1, #0
 8000270:	4618      	mov	r0, r3
 8000272:	f003 fa29 	bl	80036c8 <memset>
			W25Qxxx(); /* Инициализация W25Qxxx */
 8000276:	f7ff ffbd 	bl	80001f4 <W25Qxxx>
			HAL_Delay(10);
 800027a:	200a      	movs	r0, #10
 800027c:	f001 f8f2 	bl	8001464 <HAL_Delay>
///////////////////////////////////// ЗАПИСЬ СТРАНИЦЫ ////////////////////////////////
			//Calculate length of array
			size_t n = strlen(MainBuf);			// Узнаем размер MainBuf
 8000280:	4888      	ldr	r0, [pc, #544]	; (80004a4 <main+0x2a0>)
 8000282:	f7ff ff63 	bl	800014c <strlen>
 8000286:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
			printf("size of MainBuf - %d\r\n", n);
 800028a:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800028e:	4887      	ldr	r0, [pc, #540]	; (80004ac <main+0x2a8>)
 8000290:	f003 fa22 	bl	80036d8 <iprintf>

			// Computes quotient
			int quotient = (int) n / (int) pagesize; // Узнаем целое количесво PAGE's в массиве
 8000294:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000298:	2b00      	cmp	r3, #0
 800029a:	da00      	bge.n	800029e <main+0x9a>
 800029c:	33ff      	adds	r3, #255	; 0xff
 800029e:	121b      	asrs	r3, r3, #8
 80002a0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
			printf("quotient %d\r\n", quotient);
 80002a4:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80002a8:	4881      	ldr	r0, [pc, #516]	; (80004b0 <main+0x2ac>)
 80002aa:	f003 fa15 	bl	80036d8 <iprintf>
			// Computes remainder
			int remainder = (int) n % (int) pagesize; // Узнаем остаток от деления PAGE's в массиве
 80002ae:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80002b2:	425a      	negs	r2, r3
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	b2d2      	uxtb	r2, r2
 80002b8:	bf58      	it	pl
 80002ba:	4253      	negpl	r3, r2
 80002bc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			printf("remainder %d\r\n", remainder);
 80002c0:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80002c4:	487b      	ldr	r0, [pc, #492]	; (80004b4 <main+0x2b0>)
 80002c6:	f003 fa07 	bl	80036d8 <iprintf>

			for (int q = 0; q < quotient; q++) {
 80002ca:	2300      	movs	r3, #0
 80002cc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80002d0:	e057      	b.n	8000382 <main+0x17e>
				int i = q * pagesize; // При первом проходе это выражение = 0
 80002d2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80002d6:	021b      	lsls	r3, r3, #8
 80002d8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
				n = pagesize + i;
 80002dc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80002e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80002e4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
//				printf("i = %d\r\n", i);
//				printf("n = %d\r\n", n);

				for (z = i, a = 0; z < n, a < pagesize; z++, a++) {
 80002e8:	4a73      	ldr	r2, [pc, #460]	; (80004b8 <main+0x2b4>)
 80002ea:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80002ee:	6013      	str	r3, [r2, #0]
 80002f0:	4b72      	ldr	r3, [pc, #456]	; (80004bc <main+0x2b8>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	e014      	b.n	8000322 <main+0x11e>
					w_buf[a] = MainBuf[z]; // Copy elements of array into page.
 80002f8:	4b6f      	ldr	r3, [pc, #444]	; (80004b8 <main+0x2b4>)
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	4b6f      	ldr	r3, [pc, #444]	; (80004bc <main+0x2b8>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4968      	ldr	r1, [pc, #416]	; (80004a4 <main+0x2a0>)
 8000302:	5c89      	ldrb	r1, [r1, r2]
 8000304:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000308:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 800030c:	54d1      	strb	r1, [r2, r3]
				for (z = i, a = 0; z < n, a < pagesize; z++, a++) {
 800030e:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <main+0x2b4>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	3301      	adds	r3, #1
 8000314:	4a68      	ldr	r2, [pc, #416]	; (80004b8 <main+0x2b4>)
 8000316:	6013      	str	r3, [r2, #0]
 8000318:	4b68      	ldr	r3, [pc, #416]	; (80004bc <main+0x2b8>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	3301      	adds	r3, #1
 800031e:	4a67      	ldr	r2, [pc, #412]	; (80004bc <main+0x2b8>)
 8000320:	6013      	str	r3, [r2, #0]
 8000322:	4b66      	ldr	r3, [pc, #408]	; (80004bc <main+0x2b8>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2bff      	cmp	r3, #255	; 0xff
 8000328:	dde6      	ble.n	80002f8 <main+0xf4>
				}
				printf("w_buf - %s\r\n", (char*) w_buf);
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4619      	mov	r1, r3
 800032e:	4864      	ldr	r0, [pc, #400]	; (80004c0 <main+0x2bc>)
 8000330:	f003 f9d2 	bl	80036d8 <iprintf>
				W25qxx_WritePage(w_buf, q, 0, sizeof(w_buf));
 8000334:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8000338:	1d38      	adds	r0, r7, #4
 800033a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800033e:	2200      	movs	r2, #0
 8000340:	f000 feaa 	bl	8001098 <W25qxx_WritePage>
				for (j = 0; j < pagesize; j++) { // Очистка w_buf
 8000344:	4b5f      	ldr	r3, [pc, #380]	; (80004c4 <main+0x2c0>)
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	e00c      	b.n	8000366 <main+0x162>
					w_buf[j] = 0;
 800034c:	4b5d      	ldr	r3, [pc, #372]	; (80004c4 <main+0x2c0>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000354:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 8000358:	2100      	movs	r1, #0
 800035a:	54d1      	strb	r1, [r2, r3]
				for (j = 0; j < pagesize; j++) { // Очистка w_buf
 800035c:	4b59      	ldr	r3, [pc, #356]	; (80004c4 <main+0x2c0>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3301      	adds	r3, #1
 8000362:	4a58      	ldr	r2, [pc, #352]	; (80004c4 <main+0x2c0>)
 8000364:	6013      	str	r3, [r2, #0]
 8000366:	4b57      	ldr	r3, [pc, #348]	; (80004c4 <main+0x2c0>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2bff      	cmp	r3, #255	; 0xff
 800036c:	ddee      	ble.n	800034c <main+0x148>
//					printf("%d", w_buf[j]);
				}
//				printf("w_buf is cleared!\r\n");
//				printf("\r\n The number of elements in 'w_buf' = %d\r\n", j);
				printf("Page %d is DANE! \r\n", q);
 800036e:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8000372:	4855      	ldr	r0, [pc, #340]	; (80004c8 <main+0x2c4>)
 8000374:	f003 f9b0 	bl	80036d8 <iprintf>
			for (int q = 0; q < quotient; q++) {
 8000378:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800037c:	3301      	adds	r3, #1
 800037e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000382:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000386:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800038a:	429a      	cmp	r2, r3
 800038c:	dba1      	blt.n	80002d2 <main+0xce>
			}

//			printf("remainder = %d\r\n", remainder);
			if (remainder != 0) { // Если остаток не равен нулю
 800038e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000392:	2b00      	cmp	r3, #0
 8000394:	d04a      	beq.n	800042c <main+0x228>
				int i = quotient * pagesize; // При первом проходе это выражение = 0
 8000396:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800039a:	021b      	lsls	r3, r3, #8
 800039c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
				int s = i + remainder;
 80003a0:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80003a4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80003a8:	4413      	add	r3, r2
 80003aa:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
//				printf("i = %d\r\n", i);
//				printf("s = %d\r\n", s);
				for (z = i, a = 0; z < s; z++, a++) {
 80003ae:	4a42      	ldr	r2, [pc, #264]	; (80004b8 <main+0x2b4>)
 80003b0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80003b4:	6013      	str	r3, [r2, #0]
 80003b6:	4b41      	ldr	r3, [pc, #260]	; (80004bc <main+0x2b8>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	e014      	b.n	80003e8 <main+0x1e4>
					w_buf[a] = MainBuf[z]; /* Copy elements of array into last page.*/
 80003be:	4b3e      	ldr	r3, [pc, #248]	; (80004b8 <main+0x2b4>)
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	4b3e      	ldr	r3, [pc, #248]	; (80004bc <main+0x2b8>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4937      	ldr	r1, [pc, #220]	; (80004a4 <main+0x2a0>)
 80003c8:	5c89      	ldrb	r1, [r1, r2]
 80003ca:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80003ce:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 80003d2:	54d1      	strb	r1, [r2, r3]
				for (z = i, a = 0; z < s; z++, a++) {
 80003d4:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <main+0x2b4>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3301      	adds	r3, #1
 80003da:	4a37      	ldr	r2, [pc, #220]	; (80004b8 <main+0x2b4>)
 80003dc:	6013      	str	r3, [r2, #0]
 80003de:	4b37      	ldr	r3, [pc, #220]	; (80004bc <main+0x2b8>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	3301      	adds	r3, #1
 80003e4:	4a35      	ldr	r2, [pc, #212]	; (80004bc <main+0x2b8>)
 80003e6:	6013      	str	r3, [r2, #0]
 80003e8:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <main+0x2b4>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80003f0:	429a      	cmp	r2, r3
 80003f2:	dce4      	bgt.n	80003be <main+0x1ba>
				}
				printf("This is the last loop and 'w_buf' has only these elements - %s\r\n", (char*) w_buf);
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	4619      	mov	r1, r3
 80003f8:	4834      	ldr	r0, [pc, #208]	; (80004cc <main+0x2c8>)
 80003fa:	f003 f96d 	bl	80036d8 <iprintf>
				W25qxx_WritePage(w_buf, quotient, 0, remainder);
 80003fe:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8000402:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000406:	1d38      	adds	r0, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	f000 fe45 	bl	8001098 <W25qxx_WritePage>
				memset(w_buf, 0, pagesize); /* To empty a char array*/
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f003 f956 	bl	80036c8 <memset>
				printf("Page %d (Last one) is DANE! \r\n", quotient);
 800041c:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8000420:	482b      	ldr	r0, [pc, #172]	; (80004d0 <main+0x2cc>)
 8000422:	f003 f959 	bl	80036d8 <iprintf>
				flag = 1;
 8000426:	4b2b      	ldr	r3, [pc, #172]	; (80004d4 <main+0x2d0>)
 8000428:	2201      	movs	r2, #1
 800042a:	601a      	str	r2, [r3, #0]
			}

///////////////////////////////////// ЧТЕНИЕ СТРАНИЦЫ ////////////////////////////////
			if (flag == 1) {
 800042c:	4b29      	ldr	r3, [pc, #164]	; (80004d4 <main+0x2d0>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b01      	cmp	r3, #1
 8000432:	f47f aef5 	bne.w	8000220 <main+0x1c>
				y = quotient;
 8000436:	4a28      	ldr	r2, [pc, #160]	; (80004d8 <main+0x2d4>)
 8000438:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800043c:	6013      	str	r3, [r2, #0]
				for (x = 0; x <= y; x++) {
 800043e:	4b27      	ldr	r3, [pc, #156]	; (80004dc <main+0x2d8>)
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	e020      	b.n	8000488 <main+0x284>
//					printf("x = %d\r\n", x);
//					printf("y = %d\r\n", y);
					uint8_t buf[pagesize] = { 0, }; // Это буфер в который запишутся данные
 8000446:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800044a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	3304      	adds	r3, #4
 8000454:	22fc      	movs	r2, #252	; 0xfc
 8000456:	2100      	movs	r1, #0
 8000458:	4618      	mov	r0, r3
 800045a:	f003 f935 	bl	80036c8 <memset>
				    W25qxx_ReadPage(buf, x, 0, pagesize);
 800045e:	4b1f      	ldr	r3, [pc, #124]	; (80004dc <main+0x2d8>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4619      	mov	r1, r3
 8000464:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800046c:	2200      	movs	r2, #0
 800046e:	f000 fedd 	bl	800122c <W25qxx_ReadPage>
					printf("Page %d read! \r\n", x);
 8000472:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <main+0x2d8>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4619      	mov	r1, r3
 8000478:	4819      	ldr	r0, [pc, #100]	; (80004e0 <main+0x2dc>)
 800047a:	f003 f92d 	bl	80036d8 <iprintf>
				for (x = 0; x <= y; x++) {
 800047e:	4b17      	ldr	r3, [pc, #92]	; (80004dc <main+0x2d8>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	3301      	adds	r3, #1
 8000484:	4a15      	ldr	r2, [pc, #84]	; (80004dc <main+0x2d8>)
 8000486:	6013      	str	r3, [r2, #0]
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <main+0x2d8>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <main+0x2d4>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	429a      	cmp	r2, r3
 8000492:	ddd8      	ble.n	8000446 <main+0x242>
				}
				flag = 0;
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <main+0x2d0>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive(&huart3, (uint8_t*) Rx_data, SIZE, 1000); // Слушаем UART
 800049a:	e6c1      	b.n	8000220 <main+0x1c>
 800049c:	20000298 	.word	0x20000298
 80004a0:	200004fc 	.word	0x200004fc
 80004a4:	2000008c 	.word	0x2000008c
 80004a8:	0800470c 	.word	0x0800470c
 80004ac:	0800471c 	.word	0x0800471c
 80004b0:	08004734 	.word	0x08004734
 80004b4:	08004744 	.word	0x08004744
 80004b8:	20000540 	.word	0x20000540
 80004bc:	20000544 	.word	0x20000544
 80004c0:	08004754 	.word	0x08004754
 80004c4:	20000548 	.word	0x20000548
 80004c8:	08004764 	.word	0x08004764
 80004cc:	08004778 	.word	0x08004778
 80004d0:	080047bc 	.word	0x080047bc
 80004d4:	20000554 	.word	0x20000554
 80004d8:	20000550 	.word	0x20000550
 80004dc:	2000054c 	.word	0x2000054c
 80004e0:	080047dc 	.word	0x080047dc

080004e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b090      	sub	sp, #64	; 0x40
 80004e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004ea:	f107 0318 	add.w	r3, r7, #24
 80004ee:	2228      	movs	r2, #40	; 0x28
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 f8e8 	bl	80036c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000506:	2301      	movs	r3, #1
 8000508:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800050a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800050e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000514:	2301      	movs	r3, #1
 8000516:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000518:	2302      	movs	r3, #2
 800051a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000520:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000522:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000526:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000528:	f107 0318 	add.w	r3, r7, #24
 800052c:	4618      	mov	r0, r3
 800052e:	f001 fa39 	bl	80019a4 <HAL_RCC_OscConfig>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x58>
		Error_Handler();
 8000538:	f000 f8fa 	bl	8000730 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800053c:	230f      	movs	r3, #15
 800053e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000540:	2302      	movs	r3, #2
 8000542:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2102      	movs	r1, #2
 8000556:	4618      	mov	r0, r3
 8000558:	f001 fca6 	bl	8001ea8 <HAL_RCC_ClockConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x82>
		Error_Handler();
 8000562:	f000 f8e5 	bl	8000730 <Error_Handler>
	}
}
 8000566:	bf00      	nop
 8000568:	3740      	adds	r7, #64	; 0x40
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <MX_SPI2_Init+0x64>)
 8000576:	4a18      	ldr	r2, [pc, #96]	; (80005d8 <MX_SPI2_Init+0x68>)
 8000578:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <MX_SPI2_Init+0x64>)
 800057c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000580:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_SPI2_Init+0x64>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <MX_SPI2_Init+0x64>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_SPI2_Init+0x64>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_SPI2_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_SPI2_Init+0x64>)
 800059c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005a0:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_SPI2_Init+0x64>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <MX_SPI2_Init+0x64>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_SPI2_Init+0x64>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <MX_SPI2_Init+0x64>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_SPI2_Init+0x64>)
 80005bc:	220a      	movs	r2, #10
 80005be:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <MX_SPI2_Init+0x64>)
 80005c2:	f001 fe39 	bl	8002238 <HAL_SPI_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_SPI2_Init+0x60>
		Error_Handler();
 80005cc:	f000 f8b0 	bl	8000730 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200004a4 	.word	0x200004a4
 80005d8:	40003800 	.word	0x40003800

080005dc <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_USART3_UART_Init+0x50>)
 80005e4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 80005e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ec:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART3_UART_Init+0x4c>)
 8000614:	f002 fdc6 	bl	80031a4 <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800061e:	f000 f887 	bl	8000730 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200004fc 	.word	0x200004fc
 800062c:	40004800 	.word	0x40004800

08000630 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b2e      	ldr	r3, [pc, #184]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a2d      	ldr	r2, [pc, #180]	; (8000700 <MX_GPIO_Init+0xd0>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0310 	and.w	r3, r3, #16
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <MX_GPIO_Init+0xd0>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a27      	ldr	r2, [pc, #156]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000662:	f043 0320 	orr.w	r3, r3, #32
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <MX_GPIO_Init+0xd0>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <MX_GPIO_Init+0xd0>)
 800067a:	f043 0308 	orr.w	r3, r3, #8
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0308 	and.w	r3, r3, #8
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MX_GPIO_Init+0xd0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a1b      	ldr	r2, [pc, #108]	; (8000700 <MX_GPIO_Init+0xd0>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_GPIO_Init+0xd0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4816      	ldr	r0, [pc, #88]	; (8000704 <MX_GPIO_Init+0xd4>)
 80006ac:	f001 f962 	bl	8001974 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b6:	4814      	ldr	r0, [pc, #80]	; (8000708 <MX_GPIO_Init+0xd8>)
 80006b8:	f001 f95c 	bl	8001974 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80006bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	4619      	mov	r1, r3
 80006d4:	480b      	ldr	r0, [pc, #44]	; (8000704 <MX_GPIO_Init+0xd4>)
 80006d6:	f000 ffc9 	bl	800166c <HAL_GPIO_Init>

	/*Configure GPIO pin : FLASH_CS_Pin */
	GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2302      	movs	r3, #2
 80006ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	4619      	mov	r1, r3
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_GPIO_Init+0xd8>)
 80006f4:	f000 ffba 	bl	800166c <HAL_GPIO_Init>

}
 80006f8:	bf00      	nop
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000
 8000704:	40011000 	.word	0x40011000
 8000708:	40010c00 	.word	0x40010c00

0800070c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d101      	bne.n	8000722 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800071e:	f000 fe85 	bl	800142c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40000800 	.word	0x40000800

08000730 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000738:	e7fe      	b.n	8000738 <Error_Handler+0x8>
	...

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_MspInit+0x5c>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <HAL_MspInit+0x5c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6193      	str	r3, [r2, #24]
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_MspInit+0x5c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_MspInit+0x5c>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <HAL_MspInit+0x5c>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_MspInit+0x5c>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <HAL_MspInit+0x60>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <HAL_MspInit+0x60>)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	40021000 	.word	0x40021000
 800079c:	40010000 	.word	0x40010000

080007a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <HAL_SPI_MspInit+0x8c>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d131      	bne.n	8000824 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <HAL_SPI_MspInit+0x90>)
 80007c2:	69db      	ldr	r3, [r3, #28]
 80007c4:	4a1a      	ldr	r2, [pc, #104]	; (8000830 <HAL_SPI_MspInit+0x90>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ca:	61d3      	str	r3, [r2, #28]
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <HAL_SPI_MspInit+0x90>)
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <HAL_SPI_MspInit+0x90>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a14      	ldr	r2, [pc, #80]	; (8000830 <HAL_SPI_MspInit+0x90>)
 80007de:	f043 0308 	orr.w	r3, r3, #8
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_SPI_MspInit+0x90>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f003 0308 	and.w	r3, r3, #8
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80007f0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80007f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	4619      	mov	r1, r3
 8000804:	480b      	ldr	r0, [pc, #44]	; (8000834 <HAL_SPI_MspInit+0x94>)
 8000806:	f000 ff31 	bl	800166c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800080a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800080e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	4619      	mov	r1, r3
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <HAL_SPI_MspInit+0x94>)
 8000820:	f000 ff24 	bl	800166c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40003800 	.word	0x40003800
 8000830:	40021000 	.word	0x40021000
 8000834:	40010c00 	.word	0x40010c00

08000838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <HAL_UART_MspInit+0x8c>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d131      	bne.n	80008bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <HAL_UART_MspInit+0x90>)
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	4a1a      	ldr	r2, [pc, #104]	; (80008c8 <HAL_UART_MspInit+0x90>)
 800085e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000862:	61d3      	str	r3, [r2, #28]
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_UART_MspInit+0x90>)
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_UART_MspInit+0x90>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <HAL_UART_MspInit+0x90>)
 8000876:	f043 0308 	orr.w	r3, r3, #8
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_UART_MspInit+0x90>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	4619      	mov	r1, r3
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <HAL_UART_MspInit+0x94>)
 800089e:	f000 fee5 	bl	800166c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <HAL_UART_MspInit+0x94>)
 80008b8:	f000 fed8 	bl	800166c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40004800 	.word	0x40004800
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40010c00 	.word	0x40010c00

080008d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08e      	sub	sp, #56	; 0x38
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008e6:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <HAL_InitTick+0xe8>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	4a33      	ldr	r2, [pc, #204]	; (80009b8 <HAL_InitTick+0xe8>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	61d3      	str	r3, [r2, #28]
 80008f2:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <HAL_InitTick+0xe8>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008fe:	f107 0210 	add.w	r2, r7, #16
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fc47 	bl	800219c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800090e:	6a3b      	ldr	r3, [r7, #32]
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000914:	2b00      	cmp	r3, #0
 8000916:	d103      	bne.n	8000920 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000918:	f001 fc18 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 800091c:	6378      	str	r0, [r7, #52]	; 0x34
 800091e:	e004      	b.n	800092a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000920:	f001 fc14 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8000924:	4603      	mov	r3, r0
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800092c:	4a23      	ldr	r2, [pc, #140]	; (80009bc <HAL_InitTick+0xec>)
 800092e:	fba2 2303 	umull	r2, r3, r2, r3
 8000932:	0c9b      	lsrs	r3, r3, #18
 8000934:	3b01      	subs	r3, #1
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <HAL_InitTick+0xf0>)
 800093a:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <HAL_InitTick+0xf4>)
 800093c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <HAL_InitTick+0xf0>)
 8000940:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000944:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000946:	4a1e      	ldr	r2, [pc, #120]	; (80009c0 <HAL_InitTick+0xf0>)
 8000948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <HAL_InitTick+0xf0>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <HAL_InitTick+0xf0>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_InitTick+0xf0>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800095e:	4818      	ldr	r0, [pc, #96]	; (80009c0 <HAL_InitTick+0xf0>)
 8000960:	f002 f9d6 	bl	8002d10 <HAL_TIM_Base_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800096a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800096e:	2b00      	cmp	r3, #0
 8000970:	d11b      	bne.n	80009aa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000972:	4813      	ldr	r0, [pc, #76]	; (80009c0 <HAL_InitTick+0xf0>)
 8000974:	f002 fa24 	bl	8002dc0 <HAL_TIM_Base_Start_IT>
 8000978:	4603      	mov	r3, r0
 800097a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800097e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000982:	2b00      	cmp	r3, #0
 8000984:	d111      	bne.n	80009aa <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000986:	201e      	movs	r0, #30
 8000988:	f000 fe61 	bl	800164e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b0f      	cmp	r3, #15
 8000990:	d808      	bhi.n	80009a4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000992:	2200      	movs	r2, #0
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	201e      	movs	r0, #30
 8000998:	f000 fe3d 	bl	8001616 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_InitTick+0xf8>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
 80009a2:	e002      	b.n	80009aa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3738      	adds	r7, #56	; 0x38
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000
 80009bc:	431bde83 	.word	0x431bde83
 80009c0:	20000558 	.word	0x20000558
 80009c4:	40000800 	.word	0x40000800
 80009c8:	20000004 	.word	0x20000004

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr

08000a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr

08000a0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
	...

08000a1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <TIM4_IRQHandler+0x10>)
 8000a22:	f002 fa1f 	bl	8002e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000558 	.word	0x20000558

08000a30 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	e00a      	b.n	8000a58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a42:	f3af 8000 	nop.w
 8000a46:	4601      	mov	r1, r0
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	60ba      	str	r2, [r7, #8]
 8000a4e:	b2ca      	uxtb	r2, r1
 8000a50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3301      	adds	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697a      	ldr	r2, [r7, #20]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	dbf0      	blt.n	8000a42 <_read+0x12>
	}

return len;
 8000a60:	687b      	ldr	r3, [r7, #4]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
	return -1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a90:	605a      	str	r2, [r3, #4]
	return 0;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <_isatty>:

int _isatty(int file)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
	return 1;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr

08000ab2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b085      	sub	sp, #20
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
	...

08000acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad4:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <_sbrk+0x5c>)
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <_sbrk+0x60>)
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d102      	bne.n	8000aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <_sbrk+0x64>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <_sbrk+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d207      	bcs.n	8000b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000afc:	f002 fdac 	bl	8003658 <__errno>
 8000b00:	4603      	mov	r3, r0
 8000b02:	220c      	movs	r2, #12
 8000b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b0a:	e009      	b.n	8000b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <_sbrk+0x64>)
 8000b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20005000 	.word	0x20005000
 8000b2c:	00000400 	.word	0x00000400
 8000b30:	200005a0 	.word	0x200005a0
 8000b34:	200005e0 	.word	0x200005e0

08000b38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8000b4e:	f107 020f 	add.w	r2, r7, #15
 8000b52:	1df9      	adds	r1, r7, #7
 8000b54:	2364      	movs	r3, #100	; 0x64
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	4804      	ldr	r0, [pc, #16]	; (8000b6c <W25qxx_Spi+0x28>)
 8000b5c:	f001 fe3d 	bl	80027da <HAL_SPI_TransmitReceive>
	return ret;
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200004a4 	.word	0x200004a4

08000b70 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b8c:	4813      	ldr	r0, [pc, #76]	; (8000bdc <W25qxx_ReadID+0x6c>)
 8000b8e:	f000 fef1 	bl	8001974 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8000b92:	209f      	movs	r0, #159	; 0x9f
 8000b94:	f7ff ffd6 	bl	8000b44 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000b98:	20a5      	movs	r0, #165	; 0xa5
 8000b9a:	f7ff ffd3 	bl	8000b44 <W25qxx_Spi>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000ba2:	20a5      	movs	r0, #165	; 0xa5
 8000ba4:	f7ff ffce 	bl	8000b44 <W25qxx_Spi>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000bac:	20a5      	movs	r0, #165	; 0xa5
 8000bae:	f7ff ffc9 	bl	8000b44 <W25qxx_Spi>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <W25qxx_ReadID+0x6c>)
 8000bbe:	f000 fed9 	bl	8001974 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	041a      	lsls	r2, r3, #16
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	021b      	lsls	r3, r3, #8
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	683a      	ldr	r2, [r7, #0]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
	return Temp;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40010c00 	.word	0x40010c00

08000be0 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bec:	4816      	ldr	r0, [pc, #88]	; (8000c48 <W25qxx_ReadUniqID+0x68>)
 8000bee:	f000 fec1 	bl	8001974 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8000bf2:	204b      	movs	r0, #75	; 0x4b
 8000bf4:	f7ff ffa6 	bl	8000b44 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	e005      	b.n	8000c0a <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000bfe:	20a5      	movs	r0, #165	; 0xa5
 8000c00:	f7ff ffa0 	bl	8000b44 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	3301      	adds	r3, #1
 8000c08:	71fb      	strb	r3, [r7, #7]
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d9f6      	bls.n	8000bfe <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	71bb      	strb	r3, [r7, #6]
 8000c14:	e00b      	b.n	8000c2e <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000c16:	79bc      	ldrb	r4, [r7, #6]
 8000c18:	20a5      	movs	r0, #165	; 0xa5
 8000c1a:	f7ff ff93 	bl	8000b44 <W25qxx_Spi>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <W25qxx_ReadUniqID+0x6c>)
 8000c24:	4423      	add	r3, r4
 8000c26:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8000c28:	79bb      	ldrb	r3, [r7, #6]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	71bb      	strb	r3, [r7, #6]
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	2b07      	cmp	r3, #7
 8000c32:	d9f0      	bls.n	8000c16 <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c3a:	4803      	ldr	r0, [pc, #12]	; (8000c48 <W25qxx_ReadUniqID+0x68>)
 8000c3c:	f000 fe9a 	bl	8001974 <HAL_GPIO_WritePin>
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd90      	pop	{r4, r7, pc}
 8000c48:	40010c00 	.word	0x40010c00
 8000c4c:	200005a4 	.word	0x200005a4

08000c50 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5a:	4808      	ldr	r0, [pc, #32]	; (8000c7c <W25qxx_WriteEnable+0x2c>)
 8000c5c:	f000 fe8a 	bl	8001974 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8000c60:	2006      	movs	r0, #6
 8000c62:	f7ff ff6f 	bl	8000b44 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <W25qxx_WriteEnable+0x2c>)
 8000c6e:	f000 fe81 	bl	8001974 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f000 fbf6 	bl	8001464 <HAL_Delay>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c94:	481c      	ldr	r0, [pc, #112]	; (8000d08 <W25qxx_ReadStatusRegister+0x88>)
 8000c96:	f000 fe6d 	bl	8001974 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d10c      	bne.n	8000cba <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8000ca0:	2005      	movs	r0, #5
 8000ca2:	f7ff ff4f 	bl	8000b44 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000ca6:	20a5      	movs	r0, #165	; 0xa5
 8000ca8:	f7ff ff4c 	bl	8000b44 <W25qxx_Spi>
 8000cac:	4603      	mov	r3, r0
 8000cae:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8000cb0:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <W25qxx_ReadStatusRegister+0x8c>)
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8000cb8:	e01b      	b.n	8000cf2 <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d10c      	bne.n	8000cda <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8000cc0:	2035      	movs	r0, #53	; 0x35
 8000cc2:	f7ff ff3f 	bl	8000b44 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000cc6:	20a5      	movs	r0, #165	; 0xa5
 8000cc8:	f7ff ff3c 	bl	8000b44 <W25qxx_Spi>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8000cd0:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <W25qxx_ReadStatusRegister+0x8c>)
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8000cd8:	e00b      	b.n	8000cf2 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8000cda:	2015      	movs	r0, #21
 8000cdc:	f7ff ff32 	bl	8000b44 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000ce0:	20a5      	movs	r0, #165	; 0xa5
 8000ce2:	f7ff ff2f 	bl	8000b44 <W25qxx_Spi>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <W25qxx_ReadStatusRegister+0x8c>)
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf8:	4803      	ldr	r0, [pc, #12]	; (8000d08 <W25qxx_ReadStatusRegister+0x88>)
 8000cfa:	f000 fe3b 	bl	8001974 <HAL_GPIO_WritePin>
	return status;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40010c00 	.word	0x40010c00
 8000d0c:	200005a4 	.word	0x200005a4

08000d10 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 fba5 	bl	8001464 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d20:	480f      	ldr	r0, [pc, #60]	; (8000d60 <W25qxx_WaitForWriteEnd+0x50>)
 8000d22:	f000 fe27 	bl	8001974 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8000d26:	2005      	movs	r0, #5
 8000d28:	f7ff ff0c 	bl	8000b44 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000d2c:	20a5      	movs	r0, #165	; 0xa5
 8000d2e:	f7ff ff09 	bl	8000b44 <W25qxx_Spi>
 8000d32:	4603      	mov	r3, r0
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <W25qxx_WaitForWriteEnd+0x54>)
 8000d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f000 fb91 	bl	8001464 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <W25qxx_WaitForWriteEnd+0x54>)
 8000d44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1ed      	bne.n	8000d2c <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d56:	4802      	ldr	r0, [pc, #8]	; (8000d60 <W25qxx_WaitForWriteEnd+0x50>)
 8000d58:	f000 fe0c 	bl	8001974 <HAL_GPIO_WritePin>
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40010c00 	.word	0x40010c00
 8000d64:	200005a4 	.word	0x200005a4

08000d68 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8000d6e:	4b90      	ldr	r3, [pc, #576]	; (8000fb0 <W25qxx_Init+0x248>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8000d76:	e002      	b.n	8000d7e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f000 fb73 	bl	8001464 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8000d7e:	f000 fb67 	bl	8001450 <HAL_GetTick>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b63      	cmp	r3, #99	; 0x63
 8000d86:	d9f7      	bls.n	8000d78 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d8e:	4889      	ldr	r0, [pc, #548]	; (8000fb4 <W25qxx_Init+0x24c>)
 8000d90:	f000 fdf0 	bl	8001974 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8000d94:	2064      	movs	r0, #100	; 0x64
 8000d96:	f000 fb65 	bl	8001464 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8000d9a:	4887      	ldr	r0, [pc, #540]	; (8000fb8 <W25qxx_Init+0x250>)
 8000d9c:	f002 fd22 	bl	80037e4 <puts>
#endif
	id = W25qxx_ReadID();
 8000da0:	f7ff fee6 	bl	8000b70 <W25qxx_ReadID>
 8000da4:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	4884      	ldr	r0, [pc, #528]	; (8000fbc <W25qxx_Init+0x254>)
 8000daa:	f002 fc95 	bl	80036d8 <iprintf>
#endif
	switch (id & 0x000000FF)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	3b11      	subs	r3, #17
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	f200 808a 	bhi.w	8000ece <W25qxx_Init+0x166>
 8000dba:	a201      	add	r2, pc, #4	; (adr r2, 8000dc0 <W25qxx_Init+0x58>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000ebb 	.word	0x08000ebb
 8000dc4:	08000ea7 	.word	0x08000ea7
 8000dc8:	08000e93 	.word	0x08000e93
 8000dcc:	08000e7f 	.word	0x08000e7f
 8000dd0:	08000e6b 	.word	0x08000e6b
 8000dd4:	08000e57 	.word	0x08000e57
 8000dd8:	08000e43 	.word	0x08000e43
 8000ddc:	08000e2d 	.word	0x08000e2d
 8000de0:	08000e17 	.word	0x08000e17
 8000de4:	08000ecf 	.word	0x08000ecf
 8000de8:	08000ecf 	.word	0x08000ecf
 8000dec:	08000ecf 	.word	0x08000ecf
 8000df0:	08000ecf 	.word	0x08000ecf
 8000df4:	08000ecf 	.word	0x08000ecf
 8000df8:	08000ecf 	.word	0x08000ecf
 8000dfc:	08000e01 	.word	0x08000e01
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8000e00:	4b6b      	ldr	r3, [pc, #428]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e02:	220a      	movs	r2, #10
 8000e04:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8000e06:	4b6a      	ldr	r3, [pc, #424]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8000e0e:	486c      	ldr	r0, [pc, #432]	; (8000fc0 <W25qxx_Init+0x258>)
 8000e10:	f002 fce8 	bl	80037e4 <puts>
#endif
		break;
 8000e14:	e064      	b.n	8000ee0 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8000e16:	4b66      	ldr	r3, [pc, #408]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e18:	2209      	movs	r2, #9
 8000e1a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8000e1c:	4b64      	ldr	r3, [pc, #400]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e22:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8000e24:	4867      	ldr	r0, [pc, #412]	; (8000fc4 <W25qxx_Init+0x25c>)
 8000e26:	f002 fcdd 	bl	80037e4 <puts>
#endif
		break;
 8000e2a:	e059      	b.n	8000ee0 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8000e2c:	4b60      	ldr	r3, [pc, #384]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e2e:	2208      	movs	r2, #8
 8000e30:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8000e32:	4b5f      	ldr	r3, [pc, #380]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e38:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8000e3a:	4863      	ldr	r0, [pc, #396]	; (8000fc8 <W25qxx_Init+0x260>)
 8000e3c:	f002 fcd2 	bl	80037e4 <puts>
#endif
		break;
 8000e40:	e04e      	b.n	8000ee0 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8000e42:	4b5b      	ldr	r3, [pc, #364]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8000e48:	4b59      	ldr	r3, [pc, #356]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8000e4e:	485f      	ldr	r0, [pc, #380]	; (8000fcc <W25qxx_Init+0x264>)
 8000e50:	f002 fcc8 	bl	80037e4 <puts>
#endif
		break;
 8000e54:	e044      	b.n	8000ee0 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8000e56:	4b56      	ldr	r3, [pc, #344]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e58:	2206      	movs	r2, #6
 8000e5a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8000e5c:	4b54      	ldr	r3, [pc, #336]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e5e:	2240      	movs	r2, #64	; 0x40
 8000e60:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8000e62:	485b      	ldr	r0, [pc, #364]	; (8000fd0 <W25qxx_Init+0x268>)
 8000e64:	f002 fcbe 	bl	80037e4 <puts>
#endif
		break;
 8000e68:	e03a      	b.n	8000ee0 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8000e6a:	4b51      	ldr	r3, [pc, #324]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8000e70:	4b4f      	ldr	r3, [pc, #316]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e72:	2220      	movs	r2, #32
 8000e74:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8000e76:	4857      	ldr	r0, [pc, #348]	; (8000fd4 <W25qxx_Init+0x26c>)
 8000e78:	f002 fcb4 	bl	80037e4 <puts>
#endif
		break;
 8000e7c:	e030      	b.n	8000ee0 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8000e7e:	4b4c      	ldr	r3, [pc, #304]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e80:	2204      	movs	r2, #4
 8000e82:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8000e84:	4b4a      	ldr	r3, [pc, #296]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e86:	2210      	movs	r2, #16
 8000e88:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8000e8a:	4853      	ldr	r0, [pc, #332]	; (8000fd8 <W25qxx_Init+0x270>)
 8000e8c:	f002 fcaa 	bl	80037e4 <puts>
#endif
		break;
 8000e90:	e026      	b.n	8000ee0 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8000e92:	4b47      	ldr	r3, [pc, #284]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e94:	2203      	movs	r2, #3
 8000e96:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8000e98:	4b45      	ldr	r3, [pc, #276]	; (8000fb0 <W25qxx_Init+0x248>)
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8000e9e:	484f      	ldr	r0, [pc, #316]	; (8000fdc <W25qxx_Init+0x274>)
 8000ea0:	f002 fca0 	bl	80037e4 <puts>
#endif
		break;
 8000ea4:	e01c      	b.n	8000ee0 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8000ea6:	4b42      	ldr	r3, [pc, #264]	; (8000fb0 <W25qxx_Init+0x248>)
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8000eac:	4b40      	ldr	r3, [pc, #256]	; (8000fb0 <W25qxx_Init+0x248>)
 8000eae:	2204      	movs	r2, #4
 8000eb0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8000eb2:	484b      	ldr	r0, [pc, #300]	; (8000fe0 <W25qxx_Init+0x278>)
 8000eb4:	f002 fc96 	bl	80037e4 <puts>
#endif
		break;
 8000eb8:	e012      	b.n	8000ee0 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8000eba:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <W25qxx_Init+0x248>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8000ec0:	4b3b      	ldr	r3, [pc, #236]	; (8000fb0 <W25qxx_Init+0x248>)
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8000ec6:	4847      	ldr	r0, [pc, #284]	; (8000fe4 <W25qxx_Init+0x27c>)
 8000ec8:	f002 fc8c 	bl	80037e4 <puts>
#endif
		break;
 8000ecc:	e008      	b.n	8000ee0 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8000ece:	4846      	ldr	r0, [pc, #280]	; (8000fe8 <W25qxx_Init+0x280>)
 8000ed0:	f002 fc88 	bl	80037e4 <puts>
#endif
		w25qxx.Lock = 0;
 8000ed4:	4b36      	ldr	r3, [pc, #216]	; (8000fb0 <W25qxx_Init+0x248>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8000edc:	2300      	movs	r3, #0
 8000ede:	e063      	b.n	8000fa8 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8000ee0:	4b33      	ldr	r3, [pc, #204]	; (8000fb0 <W25qxx_Init+0x248>)
 8000ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ee6:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8000ee8:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <W25qxx_Init+0x248>)
 8000eea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eee:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <W25qxx_Init+0x248>)
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	4a2e      	ldr	r2, [pc, #184]	; (8000fb0 <W25qxx_Init+0x248>)
 8000ef8:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8000efa:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <W25qxx_Init+0x248>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	4a2c      	ldr	r2, [pc, #176]	; (8000fb0 <W25qxx_Init+0x248>)
 8000f00:	6912      	ldr	r2, [r2, #16]
 8000f02:	fb02 f303 	mul.w	r3, r2, r3
 8000f06:	4a2a      	ldr	r2, [pc, #168]	; (8000fb0 <W25qxx_Init+0x248>)
 8000f08:	8952      	ldrh	r2, [r2, #10]
 8000f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f0e:	4a28      	ldr	r2, [pc, #160]	; (8000fb0 <W25qxx_Init+0x248>)
 8000f10:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8000f12:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <W25qxx_Init+0x248>)
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	4a25      	ldr	r2, [pc, #148]	; (8000fb0 <W25qxx_Init+0x248>)
 8000f1a:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <W25qxx_Init+0x248>)
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <W25qxx_Init+0x248>)
 8000f22:	6912      	ldr	r2, [r2, #16]
 8000f24:	fb02 f303 	mul.w	r3, r2, r3
 8000f28:	0a9b      	lsrs	r3, r3, #10
 8000f2a:	4a21      	ldr	r2, [pc, #132]	; (8000fb0 <W25qxx_Init+0x248>)
 8000f2c:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8000f2e:	f7ff fe57 	bl	8000be0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f7ff fea4 	bl	8000c80 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f7ff fea1 	bl	8000c80 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f7ff fe9e 	bl	8000c80 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <W25qxx_Init+0x248>)
 8000f46:	895b      	ldrh	r3, [r3, #10]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4828      	ldr	r0, [pc, #160]	; (8000fec <W25qxx_Init+0x284>)
 8000f4c:	f002 fbc4 	bl	80036d8 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <W25qxx_Init+0x248>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	4619      	mov	r1, r3
 8000f56:	4826      	ldr	r0, [pc, #152]	; (8000ff0 <W25qxx_Init+0x288>)
 8000f58:	f002 fbbe 	bl	80036d8 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <W25qxx_Init+0x248>)
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4824      	ldr	r0, [pc, #144]	; (8000ff4 <W25qxx_Init+0x28c>)
 8000f64:	f002 fbb8 	bl	80036d8 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <W25qxx_Init+0x248>)
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4822      	ldr	r0, [pc, #136]	; (8000ff8 <W25qxx_Init+0x290>)
 8000f70:	f002 fbb2 	bl	80036d8 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <W25qxx_Init+0x248>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4820      	ldr	r0, [pc, #128]	; (8000ffc <W25qxx_Init+0x294>)
 8000f7c:	f002 fbac 	bl	80036d8 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <W25qxx_Init+0x248>)
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	4619      	mov	r1, r3
 8000f86:	481e      	ldr	r0, [pc, #120]	; (8001000 <W25qxx_Init+0x298>)
 8000f88:	f002 fba6 	bl	80036d8 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <W25qxx_Init+0x248>)
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	4619      	mov	r1, r3
 8000f92:	481c      	ldr	r0, [pc, #112]	; (8001004 <W25qxx_Init+0x29c>)
 8000f94:	f002 fba0 	bl	80036d8 <iprintf>
	printf("w25qxx Init Done\r\n");
 8000f98:	481b      	ldr	r0, [pc, #108]	; (8001008 <W25qxx_Init+0x2a0>)
 8000f9a:	f002 fc23 	bl	80037e4 <puts>
#endif
	w25qxx.Lock = 0;
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <W25qxx_Init+0x248>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200005a4 	.word	0x200005a4
 8000fb4:	40010c00 	.word	0x40010c00
 8000fb8:	080047f0 	.word	0x080047f0
 8000fbc:	08004808 	.word	0x08004808
 8000fc0:	0800481c 	.word	0x0800481c
 8000fc4:	08004834 	.word	0x08004834
 8000fc8:	0800484c 	.word	0x0800484c
 8000fcc:	08004864 	.word	0x08004864
 8000fd0:	0800487c 	.word	0x0800487c
 8000fd4:	08004894 	.word	0x08004894
 8000fd8:	080048ac 	.word	0x080048ac
 8000fdc:	080048c4 	.word	0x080048c4
 8000fe0:	080048dc 	.word	0x080048dc
 8000fe4:	080048f4 	.word	0x080048f4
 8000fe8:	0800490c 	.word	0x0800490c
 8000fec:	08004920 	.word	0x08004920
 8000ff0:	08004940 	.word	0x08004940
 8000ff4:	08004958 	.word	0x08004958
 8000ff8:	08004978 	.word	0x08004978
 8000ffc:	08004994 	.word	0x08004994
 8001000:	080049b4 	.word	0x080049b4
 8001004:	080049d0 	.word	0x080049d0
 8001008:	080049f0 	.word	0x080049f0

0800100c <W25qxx_EraseChip>:
//###################################################################################################################
void W25qxx_EraseChip(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	while (w25qxx.Lock == 1)
 8001012:	e002      	b.n	800101a <W25qxx_EraseChip+0xe>
		W25qxx_Delay(1);
 8001014:	2001      	movs	r0, #1
 8001016:	f000 fa25 	bl	8001464 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800101a:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <W25qxx_EraseChip+0x7c>)
 800101c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001020:	2b01      	cmp	r3, #1
 8001022:	d0f7      	beq.n	8001014 <W25qxx_EraseChip+0x8>
	w25qxx.Lock = 1;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <W25qxx_EraseChip+0x7c>)
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 800102c:	f000 fa10 	bl	8001450 <HAL_GetTick>
 8001030:	6078      	str	r0, [r7, #4]
	printf("w25qxx EraseChip Begin...\r\n");
 8001032:	4816      	ldr	r0, [pc, #88]	; (800108c <W25qxx_EraseChip+0x80>)
 8001034:	f002 fbd6 	bl	80037e4 <puts>
#endif
	W25qxx_WriteEnable();
 8001038:	f7ff fe0a 	bl	8000c50 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001042:	4813      	ldr	r0, [pc, #76]	; (8001090 <W25qxx_EraseChip+0x84>)
 8001044:	f000 fc96 	bl	8001974 <HAL_GPIO_WritePin>
	W25qxx_Spi(0xC7);
 8001048:	20c7      	movs	r0, #199	; 0xc7
 800104a:	f7ff fd7b 	bl	8000b44 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001054:	480e      	ldr	r0, [pc, #56]	; (8001090 <W25qxx_EraseChip+0x84>)
 8001056:	f000 fc8d 	bl	8001974 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800105a:	f7ff fe59 	bl	8000d10 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms!\r\n", HAL_GetTick() - StartTime);
 800105e:	f000 f9f7 	bl	8001450 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	4619      	mov	r1, r3
 800106a:	480a      	ldr	r0, [pc, #40]	; (8001094 <W25qxx_EraseChip+0x88>)
 800106c:	f002 fb34 	bl	80036d8 <iprintf>
#endif
	W25qxx_Delay(10);
 8001070:	200a      	movs	r0, #10
 8001072:	f000 f9f7 	bl	8001464 <HAL_Delay>
	w25qxx.Lock = 0;
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <W25qxx_EraseChip+0x7c>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200005a4 	.word	0x200005a4
 800108c:	08004a04 	.word	0x08004a04
 8001090:	40010c00 	.word	0x40010c00
 8001094:	08004a20 	.word	0x08004a20

08001098 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80010a6:	e002      	b.n	80010ae <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 f9db 	bl	8001464 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80010ae:	4b58      	ldr	r3, [pc, #352]	; (8001210 <W25qxx_WritePage+0x178>)
 80010b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d0f7      	beq.n	80010a8 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80010b8:	4b55      	ldr	r3, [pc, #340]	; (8001210 <W25qxx_WritePage+0x178>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a52      	ldr	r2, [pc, #328]	; (8001210 <W25qxx_WritePage+0x178>)
 80010c8:	8952      	ldrh	r2, [r2, #10]
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d802      	bhi.n	80010d4 <W25qxx_WritePage+0x3c>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d105      	bne.n	80010e0 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80010d4:	4b4e      	ldr	r3, [pc, #312]	; (8001210 <W25qxx_WritePage+0x178>)
 80010d6:	895b      	ldrh	r3, [r3, #10]
 80010d8:	461a      	mov	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a4a      	ldr	r2, [pc, #296]	; (8001210 <W25qxx_WritePage+0x178>)
 80010e8:	8952      	ldrh	r2, [r2, #10]
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d905      	bls.n	80010fa <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80010ee:	4b48      	ldr	r3, [pc, #288]	; (8001210 <W25qxx_WritePage+0x178>)
 80010f0:	895b      	ldrh	r3, [r3, #10]
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	68b9      	ldr	r1, [r7, #8]
 8001100:	4844      	ldr	r0, [pc, #272]	; (8001214 <W25qxx_WritePage+0x17c>)
 8001102:	f002 fae9 	bl	80036d8 <iprintf>
	W25qxx_Delay(100);
 8001106:	2064      	movs	r0, #100	; 0x64
 8001108:	f000 f9ac 	bl	8001464 <HAL_Delay>
	uint32_t StartTime = HAL_GetTick();
 800110c:	f000 f9a0 	bl	8001450 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8001112:	f7ff fdfd 	bl	8000d10 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8001116:	f7ff fd9b 	bl	8000c50 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001120:	483d      	ldr	r0, [pc, #244]	; (8001218 <W25qxx_WritePage+0x180>)
 8001122:	f000 fc27 	bl	8001974 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8001126:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <W25qxx_WritePage+0x178>)
 8001128:	895b      	ldrh	r3, [r3, #10]
 800112a:	461a      	mov	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	fb02 f303 	mul.w	r3, r2, r3
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8001138:	4b35      	ldr	r3, [pc, #212]	; (8001210 <W25qxx_WritePage+0x178>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b08      	cmp	r3, #8
 800113e:	d909      	bls.n	8001154 <W25qxx_WritePage+0xbc>
	{
		W25qxx_Spi(0x12);
 8001140:	2012      	movs	r0, #18
 8001142:	f7ff fcff 	bl	8000b44 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	0e1b      	lsrs	r3, r3, #24
 800114a:	b2db      	uxtb	r3, r3
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fcf9 	bl	8000b44 <W25qxx_Spi>
 8001152:	e002      	b.n	800115a <W25qxx_WritePage+0xc2>
	}
	else
	{
		W25qxx_Spi(0x02);
 8001154:	2002      	movs	r0, #2
 8001156:	f7ff fcf5 	bl	8000b44 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	0c1b      	lsrs	r3, r3, #16
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fcef 	bl	8000b44 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fce9 	bl	8000b44 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fce4 	bl	8000b44 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b29a      	uxth	r2, r3
 8001180:	2364      	movs	r3, #100	; 0x64
 8001182:	68f9      	ldr	r1, [r7, #12]
 8001184:	4825      	ldr	r0, [pc, #148]	; (800121c <W25qxx_WritePage+0x184>)
 8001186:	f001 f8db 	bl	8002340 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001190:	4821      	ldr	r0, [pc, #132]	; (8001218 <W25qxx_WritePage+0x180>)
 8001192:	f000 fbef 	bl	8001974 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8001196:	f7ff fdbb 	bl	8000d10 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 800119a:	f000 f959 	bl	8001450 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e018      	b.n	80011de <W25qxx_WritePage+0x146>
	{
		if ((i % 8 == 0) && (i > 2))
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d108      	bne.n	80011c8 <W25qxx_WritePage+0x130>
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d905      	bls.n	80011c8 <W25qxx_WritePage+0x130>
		{
			printf("\r\n");
 80011bc:	4818      	ldr	r0, [pc, #96]	; (8001220 <W25qxx_WritePage+0x188>)
 80011be:	f002 fb11 	bl	80037e4 <puts>
			W25qxx_Delay(10);
 80011c2:	200a      	movs	r0, #10
 80011c4:	f000 f94e 	bl	8001464 <HAL_Delay>
		}
		printf("0x%02X,", pBuffer[i]);
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <W25qxx_WritePage+0x18c>)
 80011d4:	f002 fa80 	bl	80036d8 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3301      	adds	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d3e2      	bcc.n	80011ac <W25qxx_WritePage+0x114>
	}
	printf("\r\n");
 80011e6:	480e      	ldr	r0, [pc, #56]	; (8001220 <W25qxx_WritePage+0x188>)
 80011e8:	f002 fafc 	bl	80037e4 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 80011ec:	6939      	ldr	r1, [r7, #16]
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <W25qxx_WritePage+0x190>)
 80011f0:	f002 fa72 	bl	80036d8 <iprintf>
	W25qxx_Delay(100);
 80011f4:	2064      	movs	r0, #100	; 0x64
 80011f6:	f000 f935 	bl	8001464 <HAL_Delay>
#endif
	W25qxx_Delay(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f000 f932 	bl	8001464 <HAL_Delay>
	w25qxx.Lock = 0;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <W25qxx_WritePage+0x178>)
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200005a4 	.word	0x200005a4
 8001214:	08004cd0 	.word	0x08004cd0
 8001218:	40010c00 	.word	0x40010c00
 800121c:	200004a4 	.word	0x200004a4
 8001220:	08004d0c 	.word	0x08004d0c
 8001224:	08004d10 	.word	0x08004d10
 8001228:	08004d18 	.word	0x08004d18

0800122c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800123a:	e002      	b.n	8001242 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f000 f911 	bl	8001464 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8001242:	4b55      	ldr	r3, [pc, #340]	; (8001398 <W25qxx_ReadPage+0x16c>)
 8001244:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001248:	2b01      	cmp	r3, #1
 800124a:	d0f7      	beq.n	800123c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800124c:	4b52      	ldr	r3, [pc, #328]	; (8001398 <W25qxx_ReadPage+0x16c>)
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8001254:	4b50      	ldr	r3, [pc, #320]	; (8001398 <W25qxx_ReadPage+0x16c>)
 8001256:	895b      	ldrh	r3, [r3, #10]
 8001258:	461a      	mov	r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	4293      	cmp	r3, r2
 800125e:	d802      	bhi.n	8001266 <W25qxx_ReadPage+0x3a>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d102      	bne.n	800126c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8001266:	4b4c      	ldr	r3, [pc, #304]	; (8001398 <W25qxx_ReadPage+0x16c>)
 8001268:	895b      	ldrh	r3, [r3, #10]
 800126a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	4413      	add	r3, r2
 8001272:	4a49      	ldr	r2, [pc, #292]	; (8001398 <W25qxx_ReadPage+0x16c>)
 8001274:	8952      	ldrh	r2, [r2, #10]
 8001276:	4293      	cmp	r3, r2
 8001278:	d905      	bls.n	8001286 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <W25qxx_ReadPage+0x16c>)
 800127c:	895b      	ldrh	r3, [r3, #10]
 800127e:	461a      	mov	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	68b9      	ldr	r1, [r7, #8]
 800128c:	4843      	ldr	r0, [pc, #268]	; (800139c <W25qxx_ReadPage+0x170>)
 800128e:	f002 fa23 	bl	80036d8 <iprintf>
	W25qxx_Delay(100);
 8001292:	2064      	movs	r0, #100	; 0x64
 8001294:	f000 f8e6 	bl	8001464 <HAL_Delay>
	uint32_t StartTime = HAL_GetTick();
 8001298:	f000 f8da 	bl	8001450 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800129e:	4b3e      	ldr	r3, [pc, #248]	; (8001398 <W25qxx_ReadPage+0x16c>)
 80012a0:	895b      	ldrh	r3, [r3, #10]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	fb02 f303 	mul.w	r3, r2, r3
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b6:	483a      	ldr	r0, [pc, #232]	; (80013a0 <W25qxx_ReadPage+0x174>)
 80012b8:	f000 fb5c 	bl	8001974 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80012bc:	4b36      	ldr	r3, [pc, #216]	; (8001398 <W25qxx_ReadPage+0x16c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d909      	bls.n	80012d8 <W25qxx_ReadPage+0xac>
	{
		W25qxx_Spi(0x0C);
 80012c4:	200c      	movs	r0, #12
 80012c6:	f7ff fc3d 	bl	8000b44 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	0e1b      	lsrs	r3, r3, #24
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fc37 	bl	8000b44 <W25qxx_Spi>
 80012d6:	e002      	b.n	80012de <W25qxx_ReadPage+0xb2>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80012d8:	200b      	movs	r0, #11
 80012da:	f7ff fc33 	bl	8000b44 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	0c1b      	lsrs	r3, r3, #16
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fc2d 	bl	8000b44 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fc27 	bl	8000b44 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fc22 	bl	8000b44 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff fc1f 	bl	8000b44 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b29a      	uxth	r2, r3
 800130a:	2364      	movs	r3, #100	; 0x64
 800130c:	68f9      	ldr	r1, [r7, #12]
 800130e:	4825      	ldr	r0, [pc, #148]	; (80013a4 <W25qxx_ReadPage+0x178>)
 8001310:	f001 f952 	bl	80025b8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131a:	4821      	ldr	r0, [pc, #132]	; (80013a0 <W25qxx_ReadPage+0x174>)
 800131c:	f000 fb2a 	bl	8001974 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8001320:	f000 f896 	bl	8001450 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e018      	b.n	8001364 <W25qxx_ReadPage+0x138>
	{
		if ((i % 8 == 0) && (i > 2))
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	2b00      	cmp	r3, #0
 800133a:	d108      	bne.n	800134e <W25qxx_ReadPage+0x122>
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d905      	bls.n	800134e <W25qxx_ReadPage+0x122>
		{
			printf("\r\n");
 8001342:	4819      	ldr	r0, [pc, #100]	; (80013a8 <W25qxx_ReadPage+0x17c>)
 8001344:	f002 fa4e 	bl	80037e4 <puts>
			W25qxx_Delay(10);
 8001348:	200a      	movs	r0, #10
 800134a:	f000 f88b 	bl	8001464 <HAL_Delay>
		}
		printf("0x%02X,", pBuffer[i]);
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	4413      	add	r3, r2
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4619      	mov	r1, r3
 8001358:	4814      	ldr	r0, [pc, #80]	; (80013ac <W25qxx_ReadPage+0x180>)
 800135a:	f002 f9bd 	bl	80036d8 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d3e2      	bcc.n	8001332 <W25qxx_ReadPage+0x106>
	}
	printf("\r\n");
 800136c:	480e      	ldr	r0, [pc, #56]	; (80013a8 <W25qxx_ReadPage+0x17c>)
 800136e:	f002 fa39 	bl	80037e4 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8001372:	6939      	ldr	r1, [r7, #16]
 8001374:	480e      	ldr	r0, [pc, #56]	; (80013b0 <W25qxx_ReadPage+0x184>)
 8001376:	f002 f9af 	bl	80036d8 <iprintf>
	W25qxx_Delay(100);
 800137a:	2064      	movs	r0, #100	; 0x64
 800137c:	f000 f872 	bl	8001464 <HAL_Delay>
#endif
	W25qxx_Delay(1);
 8001380:	2001      	movs	r0, #1
 8001382:	f000 f86f 	bl	8001464 <HAL_Delay>
	w25qxx.Lock = 0;
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <W25qxx_ReadPage+0x16c>)
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200005a4 	.word	0x200005a4
 800139c:	08004ee8 	.word	0x08004ee8
 80013a0:	40010c00 	.word	0x40010c00
 80013a4:	200004a4 	.word	0x200004a4
 80013a8:	08004d0c 	.word	0x08004d0c
 80013ac:	08004d10 	.word	0x08004d10
 80013b0:	08004f24 	.word	0x08004f24

080013b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013b6:	490d      	ldr	r1, [pc, #52]	; (80013ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013cc:	4c0a      	ldr	r4, [pc, #40]	; (80013f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013da:	f7ff fbad 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013de:	f002 f941 	bl	8003664 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013e2:	f7fe ff0f 	bl	8000204 <main>
  bx lr
 80013e6:	4770      	bx	lr
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013f0:	08005104 	.word	0x08005104
  ldr r2, =_sbss
 80013f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013f8:	200005e0 	.word	0x200005e0

080013fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC1_2_IRQHandler>
	...

08001400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_Init+0x28>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_Init+0x28>)
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001410:	2003      	movs	r0, #3
 8001412:	f000 f8f5 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001416:	200f      	movs	r0, #15
 8001418:	f7ff fa5a 	bl	80008d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800141c:	f7ff f98e 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40022000 	.word	0x40022000

0800142c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x1c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_IncTick+0x20>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <HAL_IncTick+0x20>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	20000008 	.word	0x20000008
 800144c:	200005cc 	.word	0x200005cc

08001450 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b02      	ldr	r3, [pc, #8]	; (8001460 <HAL_GetTick+0x10>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	200005cc 	.word	0x200005cc

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff fff0 	bl	8001450 <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800147c:	d005      	beq.n	800148a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_Delay+0x44>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148a:	bf00      	nop
 800148c:	f7ff ffe0 	bl	8001450 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f7      	bhi.n	800148c <HAL_Delay+0x28>
  {
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000008 	.word	0x20000008

080014ac <__NVIC_SetPriorityGrouping>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4906      	ldr	r1, [pc, #24]	; (8001544 <__NVIC_EnableIRQ+0x34>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff4f 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001628:	f7ff ff64 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 800162c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff ffb2 	bl	800159c <NVIC_EncodePriority>
 8001638:	4602      	mov	r2, r0
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff81 	bl	8001548 <__NVIC_SetPriority>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff57 	bl	8001510 <__NVIC_EnableIRQ>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b08b      	sub	sp, #44	; 0x2c
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167e:	e169      	b.n	8001954 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001680:	2201      	movs	r2, #1
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	429a      	cmp	r2, r3
 800169a:	f040 8158 	bne.w	800194e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4a9a      	ldr	r2, [pc, #616]	; (800190c <HAL_GPIO_Init+0x2a0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d05e      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016a8:	4a98      	ldr	r2, [pc, #608]	; (800190c <HAL_GPIO_Init+0x2a0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d875      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016ae:	4a98      	ldr	r2, [pc, #608]	; (8001910 <HAL_GPIO_Init+0x2a4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d058      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016b4:	4a96      	ldr	r2, [pc, #600]	; (8001910 <HAL_GPIO_Init+0x2a4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d86f      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016ba:	4a96      	ldr	r2, [pc, #600]	; (8001914 <HAL_GPIO_Init+0x2a8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d052      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016c0:	4a94      	ldr	r2, [pc, #592]	; (8001914 <HAL_GPIO_Init+0x2a8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d869      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016c6:	4a94      	ldr	r2, [pc, #592]	; (8001918 <HAL_GPIO_Init+0x2ac>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d04c      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016cc:	4a92      	ldr	r2, [pc, #584]	; (8001918 <HAL_GPIO_Init+0x2ac>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d863      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016d2:	4a92      	ldr	r2, [pc, #584]	; (800191c <HAL_GPIO_Init+0x2b0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d046      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016d8:	4a90      	ldr	r2, [pc, #576]	; (800191c <HAL_GPIO_Init+0x2b0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d85d      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016de:	2b12      	cmp	r3, #18
 80016e0:	d82a      	bhi.n	8001738 <HAL_GPIO_Init+0xcc>
 80016e2:	2b12      	cmp	r3, #18
 80016e4:	d859      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016e6:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <HAL_GPIO_Init+0x80>)
 80016e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ec:	08001767 	.word	0x08001767
 80016f0:	08001741 	.word	0x08001741
 80016f4:	08001753 	.word	0x08001753
 80016f8:	08001795 	.word	0x08001795
 80016fc:	0800179b 	.word	0x0800179b
 8001700:	0800179b 	.word	0x0800179b
 8001704:	0800179b 	.word	0x0800179b
 8001708:	0800179b 	.word	0x0800179b
 800170c:	0800179b 	.word	0x0800179b
 8001710:	0800179b 	.word	0x0800179b
 8001714:	0800179b 	.word	0x0800179b
 8001718:	0800179b 	.word	0x0800179b
 800171c:	0800179b 	.word	0x0800179b
 8001720:	0800179b 	.word	0x0800179b
 8001724:	0800179b 	.word	0x0800179b
 8001728:	0800179b 	.word	0x0800179b
 800172c:	0800179b 	.word	0x0800179b
 8001730:	08001749 	.word	0x08001749
 8001734:	0800175d 	.word	0x0800175d
 8001738:	4a79      	ldr	r2, [pc, #484]	; (8001920 <HAL_GPIO_Init+0x2b4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800173e:	e02c      	b.n	800179a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	623b      	str	r3, [r7, #32]
          break;
 8001746:	e029      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	3304      	adds	r3, #4
 800174e:	623b      	str	r3, [r7, #32]
          break;
 8001750:	e024      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	3308      	adds	r3, #8
 8001758:	623b      	str	r3, [r7, #32]
          break;
 800175a:	e01f      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	330c      	adds	r3, #12
 8001762:	623b      	str	r3, [r7, #32]
          break;
 8001764:	e01a      	b.n	800179c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800176e:	2304      	movs	r3, #4
 8001770:	623b      	str	r3, [r7, #32]
          break;
 8001772:	e013      	b.n	800179c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800177c:	2308      	movs	r3, #8
 800177e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	611a      	str	r2, [r3, #16]
          break;
 8001786:	e009      	b.n	800179c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001788:	2308      	movs	r3, #8
 800178a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	615a      	str	r2, [r3, #20]
          break;
 8001792:	e003      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
          break;
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x130>
          break;
 800179a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2bff      	cmp	r3, #255	; 0xff
 80017a0:	d801      	bhi.n	80017a6 <HAL_GPIO_Init+0x13a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	e001      	b.n	80017aa <HAL_GPIO_Init+0x13e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3304      	adds	r3, #4
 80017aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2bff      	cmp	r3, #255	; 0xff
 80017b0:	d802      	bhi.n	80017b8 <HAL_GPIO_Init+0x14c>
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	e002      	b.n	80017be <HAL_GPIO_Init+0x152>
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	3b08      	subs	r3, #8
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	210f      	movs	r1, #15
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	401a      	ands	r2, r3
 80017d0:	6a39      	ldr	r1, [r7, #32]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	431a      	orrs	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80b1 	beq.w	800194e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ec:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a4c      	ldr	r2, [pc, #304]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001804:	4a48      	ldr	r2, [pc, #288]	; (8001928 <HAL_GPIO_Init+0x2bc>)
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	3302      	adds	r3, #2
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	220f      	movs	r2, #15
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a40      	ldr	r2, [pc, #256]	; (800192c <HAL_GPIO_Init+0x2c0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d013      	beq.n	8001858 <HAL_GPIO_Init+0x1ec>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a3f      	ldr	r2, [pc, #252]	; (8001930 <HAL_GPIO_Init+0x2c4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d00d      	beq.n	8001854 <HAL_GPIO_Init+0x1e8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3e      	ldr	r2, [pc, #248]	; (8001934 <HAL_GPIO_Init+0x2c8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d007      	beq.n	8001850 <HAL_GPIO_Init+0x1e4>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3d      	ldr	r2, [pc, #244]	; (8001938 <HAL_GPIO_Init+0x2cc>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d101      	bne.n	800184c <HAL_GPIO_Init+0x1e0>
 8001848:	2303      	movs	r3, #3
 800184a:	e006      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 800184c:	2304      	movs	r3, #4
 800184e:	e004      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 8001850:	2302      	movs	r3, #2
 8001852:	e002      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 8001858:	2300      	movs	r3, #0
 800185a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185c:	f002 0203 	and.w	r2, r2, #3
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	4093      	lsls	r3, r2
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800186a:	492f      	ldr	r1, [pc, #188]	; (8001928 <HAL_GPIO_Init+0x2bc>)
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_GPIO_Init+0x2d0>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	492c      	ldr	r1, [pc, #176]	; (800193c <HAL_GPIO_Init+0x2d0>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_GPIO_Init+0x2d0>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	43db      	mvns	r3, r3
 800189a:	4928      	ldr	r1, [pc, #160]	; (800193c <HAL_GPIO_Init+0x2d0>)
 800189c:	4013      	ands	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4922      	ldr	r1, [pc, #136]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	491e      	ldr	r1, [pc, #120]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	4918      	ldr	r1, [pc, #96]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	608b      	str	r3, [r1, #8]
 80018e0:	e006      	b.n	80018f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	4914      	ldr	r1, [pc, #80]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d021      	beq.n	8001940 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	490e      	ldr	r1, [pc, #56]	; (800193c <HAL_GPIO_Init+0x2d0>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	60cb      	str	r3, [r1, #12]
 8001908:	e021      	b.n	800194e <HAL_GPIO_Init+0x2e2>
 800190a:	bf00      	nop
 800190c:	10320000 	.word	0x10320000
 8001910:	10310000 	.word	0x10310000
 8001914:	10220000 	.word	0x10220000
 8001918:	10210000 	.word	0x10210000
 800191c:	10120000 	.word	0x10120000
 8001920:	10110000 	.word	0x10110000
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000
 800192c:	40010800 	.word	0x40010800
 8001930:	40010c00 	.word	0x40010c00
 8001934:	40011000 	.word	0x40011000
 8001938:	40011400 	.word	0x40011400
 800193c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_GPIO_Init+0x304>)
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	43db      	mvns	r3, r3
 8001948:	4909      	ldr	r1, [pc, #36]	; (8001970 <HAL_GPIO_Init+0x304>)
 800194a:	4013      	ands	r3, r2
 800194c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	3301      	adds	r3, #1
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	fa22 f303 	lsr.w	r3, r2, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	f47f ae8e 	bne.w	8001680 <HAL_GPIO_Init+0x14>
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	372c      	adds	r7, #44	; 0x2c
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001990:	e003      	b.n	800199a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	041a      	lsls	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	611a      	str	r2, [r3, #16]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e272      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8087 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c4:	4b92      	ldr	r3, [pc, #584]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d00c      	beq.n	80019ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d0:	4b8f      	ldr	r3, [pc, #572]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d112      	bne.n	8001a02 <HAL_RCC_OscConfig+0x5e>
 80019dc:	4b8c      	ldr	r3, [pc, #560]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e8:	d10b      	bne.n	8001a02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ea:	4b89      	ldr	r3, [pc, #548]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d06c      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x12c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d168      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e24c      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x76>
 8001a0c:	4b80      	ldr	r3, [pc, #512]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a7f      	ldr	r2, [pc, #508]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	e02e      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x98>
 8001a22:	4b7b      	ldr	r3, [pc, #492]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a7a      	ldr	r2, [pc, #488]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b78      	ldr	r3, [pc, #480]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a77      	ldr	r2, [pc, #476]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e01d      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0xbc>
 8001a46:	4b72      	ldr	r3, [pc, #456]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a71      	ldr	r2, [pc, #452]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b6f      	ldr	r3, [pc, #444]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a6e      	ldr	r2, [pc, #440]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a60:	4b6b      	ldr	r3, [pc, #428]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a6a      	ldr	r2, [pc, #424]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a67      	ldr	r2, [pc, #412]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fce6 	bl	8001450 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a88:	f7ff fce2 	bl	8001450 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e200      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0xe4>
 8001aa6:	e014      	b.n	8001ad2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fcd2 	bl	8001450 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fcce 	bl	8001450 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1ec      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	4b53      	ldr	r3, [pc, #332]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x10c>
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d063      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ade:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aea:	4b49      	ldr	r3, [pc, #292]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d11c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x18c>
 8001af6:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d116      	bne.n	8001b30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x176>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e1c0      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4939      	ldr	r1, [pc, #228]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	e03a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b38:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fc87 	bl	8001450 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b46:	f7ff fc83 	bl	8001450 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e1a1      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4927      	ldr	r1, [pc, #156]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
 8001b78:	e015      	b.n	8001ba6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fc66 	bl	8001450 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b88:	f7ff fc62 	bl	8001450 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e180      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d03a      	beq.n	8001c28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d019      	beq.n	8001bee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fc46 	bl	8001450 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc8:	f7ff fc42 	bl	8001450 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e160      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f000 fb08 	bl	80021fc <RCC_Delay>
 8001bec:	e01c      	b.n	8001c28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fc2c 	bl	8001450 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfa:	e00f      	b.n	8001c1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fc28 	bl	8001450 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d908      	bls.n	8001c1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e146      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	42420000 	.word	0x42420000
 8001c18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	4b92      	ldr	r3, [pc, #584]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e9      	bne.n	8001bfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a6 	beq.w	8001d82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3a:	4b8b      	ldr	r3, [pc, #556]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10d      	bne.n	8001c62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	4b88      	ldr	r3, [pc, #544]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a87      	ldr	r2, [pc, #540]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	61d3      	str	r3, [r2, #28]
 8001c52:	4b85      	ldr	r3, [pc, #532]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c62:	4b82      	ldr	r3, [pc, #520]	; (8001e6c <HAL_RCC_OscConfig+0x4c8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d118      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6e:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <HAL_RCC_OscConfig+0x4c8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a7e      	ldr	r2, [pc, #504]	; (8001e6c <HAL_RCC_OscConfig+0x4c8>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7a:	f7ff fbe9 	bl	8001450 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c82:	f7ff fbe5 	bl	8001450 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b64      	cmp	r3, #100	; 0x64
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e103      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	4b75      	ldr	r3, [pc, #468]	; (8001e6c <HAL_RCC_OscConfig+0x4c8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x312>
 8001ca8:	4b6f      	ldr	r3, [pc, #444]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4a6e      	ldr	r2, [pc, #440]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6213      	str	r3, [r2, #32]
 8001cb4:	e02d      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x334>
 8001cbe:	4b6a      	ldr	r3, [pc, #424]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a69      	ldr	r2, [pc, #420]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	4b67      	ldr	r3, [pc, #412]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a66      	ldr	r2, [pc, #408]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	e01c      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d10c      	bne.n	8001cfa <HAL_RCC_OscConfig+0x356>
 8001ce0:	4b61      	ldr	r3, [pc, #388]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4a60      	ldr	r2, [pc, #384]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6213      	str	r3, [r2, #32]
 8001cec:	4b5e      	ldr	r3, [pc, #376]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a5d      	ldr	r2, [pc, #372]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	e00b      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cfa:	4b5b      	ldr	r3, [pc, #364]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a5a      	ldr	r2, [pc, #360]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	4b58      	ldr	r3, [pc, #352]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a57      	ldr	r2, [pc, #348]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d015      	beq.n	8001d46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff fb99 	bl	8001450 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d20:	e00a      	b.n	8001d38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7ff fb95 	bl	8001450 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0b1      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d38:	4b4b      	ldr	r3, [pc, #300]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0ee      	beq.n	8001d22 <HAL_RCC_OscConfig+0x37e>
 8001d44:	e014      	b.n	8001d70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d46:	f7ff fb83 	bl	8001450 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7ff fb7f 	bl	8001450 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e09b      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d64:	4b40      	ldr	r3, [pc, #256]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1ee      	bne.n	8001d4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d105      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d76:	4b3c      	ldr	r3, [pc, #240]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4a3b      	ldr	r2, [pc, #236]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 8087 	beq.w	8001e9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8c:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d061      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d146      	bne.n	8001e2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da0:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <HAL_RCC_OscConfig+0x4cc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7ff fb53 	bl	8001450 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7ff fb4f 	bl	8001450 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e06d      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc0:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f0      	bne.n	8001dae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd4:	d108      	bne.n	8001de8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	4921      	ldr	r1, [pc, #132]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de8:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a19      	ldr	r1, [r3, #32]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	491b      	ldr	r1, [pc, #108]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_RCC_OscConfig+0x4cc>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff fb23 	bl	8001450 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff fb1f 	bl	8001450 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e03d      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x46a>
 8001e2c:	e035      	b.n	8001e9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_RCC_OscConfig+0x4cc>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fb0c 	bl	8001450 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7ff fb08 	bl	8001450 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e026      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x498>
 8001e5a:	e01e      	b.n	8001e9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e019      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_OscConfig+0x500>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0d0      	b.n	800205e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d910      	bls.n	8001eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b67      	ldr	r3, [pc, #412]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 0207 	bic.w	r2, r3, #7
 8001ed2:	4965      	ldr	r1, [pc, #404]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b63      	ldr	r3, [pc, #396]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0b8      	b.n	800205e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d020      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f04:	4b59      	ldr	r3, [pc, #356]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a58      	ldr	r2, [pc, #352]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f1c:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4a52      	ldr	r2, [pc, #328]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f28:	4b50      	ldr	r3, [pc, #320]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	494d      	ldr	r1, [pc, #308]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d040      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d115      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e07f      	b.n	800205e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f66:	4b41      	ldr	r3, [pc, #260]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e073      	b.n	800205e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e06b      	b.n	800205e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f86:	4b39      	ldr	r3, [pc, #228]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f023 0203 	bic.w	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4936      	ldr	r1, [pc, #216]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f98:	f7ff fa5a 	bl	8001450 <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7ff fa56 	bl	8001450 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e053      	b.n	800205e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 020c 	and.w	r2, r3, #12
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d1eb      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b27      	ldr	r3, [pc, #156]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d210      	bcs.n	8001ff8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 0207 	bic.w	r2, r3, #7
 8001fde:	4922      	ldr	r1, [pc, #136]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e032      	b.n	800205e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4916      	ldr	r1, [pc, #88]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	490e      	ldr	r1, [pc, #56]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002036:	f000 f821 	bl	800207c <HAL_RCC_GetSysClockFreq>
 800203a:	4602      	mov	r2, r0
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	490a      	ldr	r1, [pc, #40]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8002048:	5ccb      	ldrb	r3, [r1, r3]
 800204a:	fa22 f303 	lsr.w	r3, r2, r3
 800204e:	4a09      	ldr	r2, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x1cc>)
 8002050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1d0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fc3a 	bl	80008d0 <HAL_InitTick>

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40022000 	.word	0x40022000
 800206c:	40021000 	.word	0x40021000
 8002070:	0800504c 	.word	0x0800504c
 8002074:	20000000 	.word	0x20000000
 8002078:	20000004 	.word	0x20000004

0800207c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800207c:	b490      	push	{r4, r7}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002082:	4b29      	ldr	r3, [pc, #164]	; (8002128 <HAL_RCC_GetSysClockFreq+0xac>)
 8002084:	1d3c      	adds	r4, r7, #4
 8002086:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800208c:	f240 2301 	movw	r3, #513	; 0x201
 8002090:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_RCC_GetSysClockFreq+0xb0>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d002      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x40>
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d003      	beq.n	80020c2 <HAL_RCC_GetSysClockFreq+0x46>
 80020ba:	e02b      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020bc:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020be:	623b      	str	r3, [r7, #32]
      break;
 80020c0:	e02b      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	0c9b      	lsrs	r3, r3, #18
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	3328      	adds	r3, #40	; 0x28
 80020cc:	443b      	add	r3, r7
 80020ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d012      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_RCC_GetSysClockFreq+0xb0>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	0c5b      	lsrs	r3, r3, #17
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	3328      	adds	r3, #40	; 0x28
 80020ea:	443b      	add	r3, r7
 80020ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020f6:	fb03 f202 	mul.w	r2, r3, r2
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	e004      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	623b      	str	r3, [r7, #32]
      break;
 8002112:	e002      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002116:	623b      	str	r3, [r7, #32]
      break;
 8002118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211a:	6a3b      	ldr	r3, [r7, #32]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bc90      	pop	{r4, r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	0800503c 	.word	0x0800503c
 800212c:	40021000 	.word	0x40021000
 8002130:	007a1200 	.word	0x007a1200
 8002134:	003d0900 	.word	0x003d0900

08002138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <HAL_RCC_GetHCLKFreq+0x10>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	20000000 	.word	0x20000000

0800214c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002150:	f7ff fff2 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4903      	ldr	r1, [pc, #12]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002162:	5ccb      	ldrb	r3, [r1, r3]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	0800505c 	.word	0x0800505c

08002174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002178:	f7ff ffde 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0adb      	lsrs	r3, r3, #11
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4903      	ldr	r1, [pc, #12]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	0800505c 	.word	0x0800505c

0800219c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	220f      	movs	r2, #15
 80021aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_RCC_GetClockConfig+0x58>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0203 	and.w	r2, r3, #3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_RCC_GetClockConfig+0x58>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_GetClockConfig+0x58>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <HAL_RCC_GetClockConfig+0x58>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	08db      	lsrs	r3, r3, #3
 80021d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_GetClockConfig+0x5c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0207 	and.w	r2, r3, #7
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40022000 	.word	0x40022000

080021fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <RCC_Delay+0x34>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <RCC_Delay+0x38>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0a5b      	lsrs	r3, r3, #9
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002218:	bf00      	nop
  }
  while (Delay --);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1e5a      	subs	r2, r3, #1
 800221e:	60fa      	str	r2, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f9      	bne.n	8002218 <RCC_Delay+0x1c>
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	20000000 	.word	0x20000000
 8002234:	10624dd3 	.word	0x10624dd3

08002238 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e076      	b.n	8002338 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	2b00      	cmp	r3, #0
 8002250:	d108      	bne.n	8002264 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800225a:	d009      	beq.n	8002270 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
 8002262:	e005      	b.n	8002270 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fa88 	bl	80007a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f4:	ea42 0103 	orr.w	r1, r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	0c1a      	lsrs	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f002 0204 	and.w	r2, r2, #4
 8002316:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002326:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_SPI_Transmit+0x22>
 800235e:	2302      	movs	r3, #2
 8002360:	e126      	b.n	80025b0 <HAL_SPI_Transmit+0x270>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800236a:	f7ff f871 	bl	8001450 <HAL_GetTick>
 800236e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	d002      	beq.n	8002386 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002380:	2302      	movs	r3, #2
 8002382:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002384:	e10b      	b.n	800259e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <HAL_SPI_Transmit+0x52>
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002396:	e102      	b.n	800259e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2203      	movs	r2, #3
 800239c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	88fa      	ldrh	r2, [r7, #6]
 80023b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	88fa      	ldrh	r2, [r7, #6]
 80023b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023de:	d10f      	bne.n	8002400 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240a:	2b40      	cmp	r3, #64	; 0x40
 800240c:	d007      	beq.n	800241e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800241c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002426:	d14b      	bne.n	80024c0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_SPI_Transmit+0xf6>
 8002430:	8afb      	ldrh	r3, [r7, #22]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d13e      	bne.n	80024b4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	881a      	ldrh	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	1c9a      	adds	r2, r3, #2
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800245a:	e02b      	b.n	80024b4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b02      	cmp	r3, #2
 8002468:	d112      	bne.n	8002490 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	1c9a      	adds	r2, r3, #2
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	86da      	strh	r2, [r3, #54]	; 0x36
 800248e:	e011      	b.n	80024b4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002490:	f7fe ffde 	bl	8001450 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d803      	bhi.n	80024a8 <HAL_SPI_Transmit+0x168>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024a6:	d102      	bne.n	80024ae <HAL_SPI_Transmit+0x16e>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024b2:	e074      	b.n	800259e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1ce      	bne.n	800245c <HAL_SPI_Transmit+0x11c>
 80024be:	e04c      	b.n	800255a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <HAL_SPI_Transmit+0x18e>
 80024c8:	8afb      	ldrh	r3, [r7, #22]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d140      	bne.n	8002550 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	330c      	adds	r3, #12
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024f4:	e02c      	b.n	8002550 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b02      	cmp	r3, #2
 8002502:	d113      	bne.n	800252c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	7812      	ldrb	r2, [r2, #0]
 8002510:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	86da      	strh	r2, [r3, #54]	; 0x36
 800252a:	e011      	b.n	8002550 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800252c:	f7fe ff90 	bl	8001450 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d803      	bhi.n	8002544 <HAL_SPI_Transmit+0x204>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002542:	d102      	bne.n	800254a <HAL_SPI_Transmit+0x20a>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800254e:	e026      	b.n	800259e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1cd      	bne.n	80024f6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	6839      	ldr	r1, [r7, #0]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 fbb8 	bl	8002cd4 <SPI_EndRxTxTransaction>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	77fb      	strb	r3, [r7, #31]
 800259a:	e000      	b.n	800259e <HAL_SPI_Transmit+0x25e>
  }

error:
 800259c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	4613      	mov	r3, r2
 80025c6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025d4:	d112      	bne.n	80025fc <HAL_SPI_Receive+0x44>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10e      	bne.n	80025fc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2204      	movs	r2, #4
 80025e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025e6:	88fa      	ldrh	r2, [r7, #6]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f8f1 	bl	80027da <HAL_SPI_TransmitReceive>
 80025f8:	4603      	mov	r3, r0
 80025fa:	e0ea      	b.n	80027d2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_SPI_Receive+0x52>
 8002606:	2302      	movs	r3, #2
 8002608:	e0e3      	b.n	80027d2 <HAL_SPI_Receive+0x21a>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002612:	f7fe ff1d 	bl	8001450 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d002      	beq.n	800262a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002624:	2302      	movs	r3, #2
 8002626:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002628:	e0ca      	b.n	80027c0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_SPI_Receive+0x7e>
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d102      	bne.n	800263c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	75fb      	strb	r3, [r7, #23]
    goto error;
 800263a:	e0c1      	b.n	80027c0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2204      	movs	r2, #4
 8002640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	88fa      	ldrh	r2, [r7, #6]
 800265a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002682:	d10f      	bne.n	80026a4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002692:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026a2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d007      	beq.n	80026c2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d162      	bne.n	8002790 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026ca:	e02e      	b.n	800272a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d115      	bne.n	8002706 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f103 020c 	add.w	r2, r3, #12
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	7812      	ldrb	r2, [r2, #0]
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002704:	e011      	b.n	800272a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002706:	f7fe fea3 	bl	8001450 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d803      	bhi.n	800271e <HAL_SPI_Receive+0x166>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800271c:	d102      	bne.n	8002724 <HAL_SPI_Receive+0x16c>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002728:	e04a      	b.n	80027c0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1cb      	bne.n	80026cc <HAL_SPI_Receive+0x114>
 8002734:	e031      	b.n	800279a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d113      	bne.n	800276c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	b292      	uxth	r2, r2
 8002750:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	1c9a      	adds	r2, r3, #2
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	87da      	strh	r2, [r3, #62]	; 0x3e
 800276a:	e011      	b.n	8002790 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800276c:	f7fe fe70 	bl	8001450 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d803      	bhi.n	8002784 <HAL_SPI_Receive+0x1cc>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002782:	d102      	bne.n	800278a <HAL_SPI_Receive+0x1d2>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800278e:	e017      	b.n	80027c0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1cd      	bne.n	8002736 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	6839      	ldr	r1, [r7, #0]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 fa46 	bl	8002c30 <SPI_EndRxTransaction>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	75fb      	strb	r3, [r7, #23]
 80027bc:	e000      	b.n	80027c0 <HAL_SPI_Receive+0x208>
  }

error :
 80027be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b08c      	sub	sp, #48	; 0x30
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027e8:	2301      	movs	r3, #1
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_SPI_TransmitReceive+0x26>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e18a      	b.n	8002b16 <HAL_SPI_TransmitReceive+0x33c>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002808:	f7fe fe22 	bl	8001450 <HAL_GetTick>
 800280c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002822:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002826:	2b01      	cmp	r3, #1
 8002828:	d00f      	beq.n	800284a <HAL_SPI_TransmitReceive+0x70>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002830:	d107      	bne.n	8002842 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <HAL_SPI_TransmitReceive+0x68>
 800283a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800283e:	2b04      	cmp	r3, #4
 8002840:	d003      	beq.n	800284a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002842:	2302      	movs	r3, #2
 8002844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002848:	e15b      	b.n	8002b02 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_SPI_TransmitReceive+0x82>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_SPI_TransmitReceive+0x82>
 8002856:	887b      	ldrh	r3, [r7, #2]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d103      	bne.n	8002864 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002862:	e14e      	b.n	8002b02 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b04      	cmp	r3, #4
 800286e:	d003      	beq.n	8002878 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2205      	movs	r2, #5
 8002874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	887a      	ldrh	r2, [r7, #2]
 800288e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	887a      	ldrh	r2, [r7, #2]
 800289a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	2b40      	cmp	r3, #64	; 0x40
 80028ba:	d007      	beq.n	80028cc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028d4:	d178      	bne.n	80029c8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_SPI_TransmitReceive+0x10a>
 80028de:	8b7b      	ldrh	r3, [r7, #26]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d166      	bne.n	80029b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	881a      	ldrh	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	1c9a      	adds	r2, r3, #2
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002908:	e053      	b.n	80029b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b02      	cmp	r3, #2
 8002916:	d11b      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x176>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d016      	beq.n	8002950 <HAL_SPI_TransmitReceive+0x176>
 8002922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d113      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	881a      	ldrh	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	1c9a      	adds	r2, r3, #2
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d119      	bne.n	8002992 <HAL_SPI_TransmitReceive+0x1b8>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d014      	beq.n	8002992 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	b292      	uxth	r2, r2
 8002974:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	1c9a      	adds	r2, r3, #2
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800298e:	2301      	movs	r3, #1
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002992:	f7fe fd5d 	bl	8001450 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800299e:	429a      	cmp	r2, r3
 80029a0:	d807      	bhi.n	80029b2 <HAL_SPI_TransmitReceive+0x1d8>
 80029a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029a8:	d003      	beq.n	80029b2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029b0:	e0a7      	b.n	8002b02 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1a6      	bne.n	800290a <HAL_SPI_TransmitReceive+0x130>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1a1      	bne.n	800290a <HAL_SPI_TransmitReceive+0x130>
 80029c6:	e07c      	b.n	8002ac2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_SPI_TransmitReceive+0x1fc>
 80029d0:	8b7b      	ldrh	r3, [r7, #26]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d16b      	bne.n	8002aae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	330c      	adds	r3, #12
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029fc:	e057      	b.n	8002aae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d11c      	bne.n	8002a46 <HAL_SPI_TransmitReceive+0x26c>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d017      	beq.n	8002a46 <HAL_SPI_TransmitReceive+0x26c>
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d114      	bne.n	8002a46 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	330c      	adds	r3, #12
 8002a26:	7812      	ldrb	r2, [r2, #0]
 8002a28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d119      	bne.n	8002a88 <HAL_SPI_TransmitReceive+0x2ae>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d014      	beq.n	8002a88 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a84:	2301      	movs	r3, #1
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a88:	f7fe fce2 	bl	8001450 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d803      	bhi.n	8002aa0 <HAL_SPI_TransmitReceive+0x2c6>
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a9e:	d102      	bne.n	8002aa6 <HAL_SPI_TransmitReceive+0x2cc>
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002aac:	e029      	b.n	8002b02 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1a2      	bne.n	80029fe <HAL_SPI_TransmitReceive+0x224>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d19d      	bne.n	80029fe <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f904 	bl	8002cd4 <SPI_EndRxTxTransaction>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ade:	e010      	b.n	8002b02 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	e000      	b.n	8002b02 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002b00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3730      	adds	r7, #48	; 0x30
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b30:	f7fe fc8e 	bl	8001450 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b40:	f7fe fc86 	bl	8001450 <HAL_GetTick>
 8002b44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b46:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	015b      	lsls	r3, r3, #5
 8002b4c:	0d1b      	lsrs	r3, r3, #20
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	fb02 f303 	mul.w	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b56:	e054      	b.n	8002c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b5e:	d050      	beq.n	8002c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b60:	f7fe fc76 	bl	8001450 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d902      	bls.n	8002b76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d13d      	bne.n	8002bf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8e:	d111      	bne.n	8002bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b98:	d004      	beq.n	8002ba4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba2:	d107      	bne.n	8002bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bbc:	d10f      	bne.n	8002bde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e017      	b.n	8002c22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d19b      	bne.n	8002b58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000000 	.word	0x20000000

08002c30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c44:	d111      	bne.n	8002c6a <SPI_EndRxTransaction+0x3a>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4e:	d004      	beq.n	8002c5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c58:	d107      	bne.n	8002c6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c68:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c72:	d117      	bne.n	8002ca4 <SPI_EndRxTransaction+0x74>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7c:	d112      	bne.n	8002ca4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2200      	movs	r2, #0
 8002c86:	2101      	movs	r1, #1
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f7ff ff49 	bl	8002b20 <SPI_WaitFlagStateUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01a      	beq.n	8002cca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c98:	f043 0220 	orr.w	r2, r3, #32
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e013      	b.n	8002ccc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2200      	movs	r2, #0
 8002cac:	2180      	movs	r1, #128	; 0x80
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff ff36 	bl	8002b20 <SPI_WaitFlagStateUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d007      	beq.n	8002cca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	f043 0220 	orr.w	r2, r3, #32
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e000      	b.n	8002ccc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f7ff ff18 	bl	8002b20 <SPI_WaitFlagStateUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d007      	beq.n	8002d06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f043 0220 	orr.w	r2, r3, #32
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e000      	b.n	8002d08 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e041      	b.n	8002da6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f839 	bl	8002dae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 f9b4 	bl	80030bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d001      	beq.n	8002dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e03a      	b.n	8002e4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a18      	ldr	r2, [pc, #96]	; (8002e58 <HAL_TIM_Base_Start_IT+0x98>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00e      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x58>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e02:	d009      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x58>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <HAL_TIM_Base_Start_IT+0x9c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x58>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d111      	bne.n	8002e3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d010      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3a:	e007      	b.n	8002e4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40000800 	.word	0x40000800

08002e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d122      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d11b      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0202 	mvn.w	r2, #2
 8002e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8ed 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002eac:	e005      	b.n	8002eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f8e0 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f8ef 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d122      	bne.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d11b      	bne.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0204 	mvn.w	r2, #4
 8002ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f8c3 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002f00:	e005      	b.n	8002f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8b6 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f8c5 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d122      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d11b      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0208 	mvn.w	r2, #8
 8002f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f899 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002f54:	e005      	b.n	8002f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f88c 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f89b 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b10      	cmp	r3, #16
 8002f74:	d122      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d11b      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0210 	mvn.w	r2, #16
 8002f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2208      	movs	r2, #8
 8002f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f86f 	bl	8003086 <HAL_TIM_IC_CaptureCallback>
 8002fa8:	e005      	b.n	8002fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f862 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f871 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d10e      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d107      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0201 	mvn.w	r2, #1
 8002fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fd fb92 	bl	800070c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b80      	cmp	r3, #128	; 0x80
 8002ff4:	d10e      	bne.n	8003014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003000:	2b80      	cmp	r3, #128	; 0x80
 8003002:	d107      	bne.n	8003014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800300c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8bf 	bl	8003192 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b40      	cmp	r3, #64	; 0x40
 8003020:	d10e      	bne.n	8003040 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d107      	bne.n	8003040 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f835 	bl	80030aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b20      	cmp	r3, #32
 800304c:	d10e      	bne.n	800306c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b20      	cmp	r3, #32
 800305a:	d107      	bne.n	800306c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0220 	mvn.w	r2, #32
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f88a 	bl	8003180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a29      	ldr	r2, [pc, #164]	; (8003174 <TIM_Base_SetConfig+0xb8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00b      	beq.n	80030ec <TIM_Base_SetConfig+0x30>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030da:	d007      	beq.n	80030ec <TIM_Base_SetConfig+0x30>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a26      	ldr	r2, [pc, #152]	; (8003178 <TIM_Base_SetConfig+0xbc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d003      	beq.n	80030ec <TIM_Base_SetConfig+0x30>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a25      	ldr	r2, [pc, #148]	; (800317c <TIM_Base_SetConfig+0xc0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d108      	bne.n	80030fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a1c      	ldr	r2, [pc, #112]	; (8003174 <TIM_Base_SetConfig+0xb8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00b      	beq.n	800311e <TIM_Base_SetConfig+0x62>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310c:	d007      	beq.n	800311e <TIM_Base_SetConfig+0x62>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a19      	ldr	r2, [pc, #100]	; (8003178 <TIM_Base_SetConfig+0xbc>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d003      	beq.n	800311e <TIM_Base_SetConfig+0x62>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a18      	ldr	r2, [pc, #96]	; (800317c <TIM_Base_SetConfig+0xc0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d108      	bne.n	8003130 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a07      	ldr	r2, [pc, #28]	; (8003174 <TIM_Base_SetConfig+0xb8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d103      	bne.n	8003164 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	615a      	str	r2, [r3, #20]
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	40012c00 	.word	0x40012c00
 8003178:	40000400 	.word	0x40000400
 800317c:	40000800 	.word	0x40000800

08003180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr

080031a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e03f      	b.n	8003236 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fd fb34 	bl	8000838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2224      	movs	r2, #36	; 0x24
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f9a7 	bl	800353c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800320c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800321c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b08a      	sub	sp, #40	; 0x28
 8003242:	af02      	add	r7, sp, #8
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	4613      	mov	r3, r2
 800324c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	d17c      	bne.n	8003358 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_UART_Transmit+0x2c>
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e075      	b.n	800335a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_UART_Transmit+0x3e>
 8003278:	2302      	movs	r3, #2
 800327a:	e06e      	b.n	800335a <HAL_UART_Transmit+0x11c>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2221      	movs	r2, #33	; 0x21
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003292:	f7fe f8dd 	bl	8001450 <HAL_GetTick>
 8003296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	88fa      	ldrh	r2, [r7, #6]
 80032a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ac:	d108      	bne.n	80032c0 <HAL_UART_Transmit+0x82>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d104      	bne.n	80032c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	e003      	b.n	80032c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032d0:	e02a      	b.n	8003328 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2200      	movs	r2, #0
 80032da:	2180      	movs	r1, #128	; 0x80
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f8e2 	bl	80034a6 <UART_WaitOnFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e036      	b.n	800335a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10b      	bne.n	800330a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003300:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	3302      	adds	r3, #2
 8003306:	61bb      	str	r3, [r7, #24]
 8003308:	e007      	b.n	800331a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	781a      	ldrb	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	3301      	adds	r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1cf      	bne.n	80032d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2200      	movs	r2, #0
 800333a:	2140      	movs	r1, #64	; 0x40
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f8b2 	bl	80034a6 <UART_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e006      	b.n	800335a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	e000      	b.n	800335a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003358:	2302      	movs	r3, #2
  }
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b08a      	sub	sp, #40	; 0x28
 8003366:	af02      	add	r7, sp, #8
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	603b      	str	r3, [r7, #0]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b20      	cmp	r3, #32
 8003380:	f040 808c 	bne.w	800349c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_UART_Receive+0x2e>
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e084      	b.n	800349e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Receive+0x40>
 800339e:	2302      	movs	r3, #2
 80033a0:	e07d      	b.n	800349e <HAL_UART_Receive+0x13c>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2222      	movs	r2, #34	; 0x22
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033be:	f7fe f847 	bl	8001450 <HAL_GetTick>
 80033c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	88fa      	ldrh	r2, [r7, #6]
 80033ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d8:	d108      	bne.n	80033ec <HAL_UART_Receive+0x8a>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d104      	bne.n	80033ec <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	61bb      	str	r3, [r7, #24]
 80033ea:	e003      	b.n	80033f4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80033fc:	e043      	b.n	8003486 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2200      	movs	r2, #0
 8003406:	2120      	movs	r1, #32
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f84c 	bl	80034a6 <UART_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e042      	b.n	800349e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10c      	bne.n	8003438 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	b29b      	uxth	r3, r3
 8003426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342a:	b29a      	uxth	r2, r3
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	3302      	adds	r3, #2
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	e01f      	b.n	8003478 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003440:	d007      	beq.n	8003452 <HAL_UART_Receive+0xf0>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <HAL_UART_Receive+0xfe>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	e008      	b.n	8003472 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800346c:	b2da      	uxtb	r2, r3
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3301      	adds	r3, #1
 8003476:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1b6      	bne.n	80033fe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	e000      	b.n	800349e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800349c:	2302      	movs	r3, #2
  }
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	4613      	mov	r3, r2
 80034b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b6:	e02c      	b.n	8003512 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034be:	d028      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80034c6:	f7fd ffc3 	bl	8001450 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d21d      	bcs.n	8003512 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034e4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0201 	bic.w	r2, r2, #1
 80034f4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e00f      	b.n	8003532 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4013      	ands	r3, r2
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	429a      	cmp	r2, r3
 800352e:	d0c3      	beq.n	80034b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003576:	f023 030c 	bic.w	r3, r3, #12
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	430b      	orrs	r3, r1
 8003582:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a2c      	ldr	r2, [pc, #176]	; (8003650 <UART_SetConfig+0x114>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d103      	bne.n	80035ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035a4:	f7fe fde6 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	e002      	b.n	80035b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035ac:	f7fe fdce 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 80035b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	009a      	lsls	r2, r3, #2
 80035bc:	441a      	add	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	4a22      	ldr	r2, [pc, #136]	; (8003654 <UART_SetConfig+0x118>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	0119      	lsls	r1, r3, #4
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	009a      	lsls	r2, r3, #2
 80035dc:	441a      	add	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e8:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <UART_SetConfig+0x118>)
 80035ea:	fba3 0302 	umull	r0, r3, r3, r2
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	2064      	movs	r0, #100	; 0x64
 80035f2:	fb00 f303 	mul.w	r3, r0, r3
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	3332      	adds	r3, #50	; 0x32
 80035fc:	4a15      	ldr	r2, [pc, #84]	; (8003654 <UART_SetConfig+0x118>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003608:	4419      	add	r1, r3
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	009a      	lsls	r2, r3, #2
 8003614:	441a      	add	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <UART_SetConfig+0x118>)
 8003622:	fba3 0302 	umull	r0, r3, r3, r2
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	2064      	movs	r0, #100	; 0x64
 800362a:	fb00 f303 	mul.w	r3, r0, r3
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	3332      	adds	r3, #50	; 0x32
 8003634:	4a07      	ldr	r2, [pc, #28]	; (8003654 <UART_SetConfig+0x118>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	f003 020f 	and.w	r2, r3, #15
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	440a      	add	r2, r1
 8003646:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40013800 	.word	0x40013800
 8003654:	51eb851f 	.word	0x51eb851f

08003658 <__errno>:
 8003658:	4b01      	ldr	r3, [pc, #4]	; (8003660 <__errno+0x8>)
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	2000000c 	.word	0x2000000c

08003664 <__libc_init_array>:
 8003664:	b570      	push	{r4, r5, r6, lr}
 8003666:	2600      	movs	r6, #0
 8003668:	4d0c      	ldr	r5, [pc, #48]	; (800369c <__libc_init_array+0x38>)
 800366a:	4c0d      	ldr	r4, [pc, #52]	; (80036a0 <__libc_init_array+0x3c>)
 800366c:	1b64      	subs	r4, r4, r5
 800366e:	10a4      	asrs	r4, r4, #2
 8003670:	42a6      	cmp	r6, r4
 8003672:	d109      	bne.n	8003688 <__libc_init_array+0x24>
 8003674:	f001 f83a 	bl	80046ec <_init>
 8003678:	2600      	movs	r6, #0
 800367a:	4d0a      	ldr	r5, [pc, #40]	; (80036a4 <__libc_init_array+0x40>)
 800367c:	4c0a      	ldr	r4, [pc, #40]	; (80036a8 <__libc_init_array+0x44>)
 800367e:	1b64      	subs	r4, r4, r5
 8003680:	10a4      	asrs	r4, r4, #2
 8003682:	42a6      	cmp	r6, r4
 8003684:	d105      	bne.n	8003692 <__libc_init_array+0x2e>
 8003686:	bd70      	pop	{r4, r5, r6, pc}
 8003688:	f855 3b04 	ldr.w	r3, [r5], #4
 800368c:	4798      	blx	r3
 800368e:	3601      	adds	r6, #1
 8003690:	e7ee      	b.n	8003670 <__libc_init_array+0xc>
 8003692:	f855 3b04 	ldr.w	r3, [r5], #4
 8003696:	4798      	blx	r3
 8003698:	3601      	adds	r6, #1
 800369a:	e7f2      	b.n	8003682 <__libc_init_array+0x1e>
 800369c:	080050fc 	.word	0x080050fc
 80036a0:	080050fc 	.word	0x080050fc
 80036a4:	080050fc 	.word	0x080050fc
 80036a8:	08005100 	.word	0x08005100

080036ac <memcpy>:
 80036ac:	440a      	add	r2, r1
 80036ae:	4291      	cmp	r1, r2
 80036b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80036b4:	d100      	bne.n	80036b8 <memcpy+0xc>
 80036b6:	4770      	bx	lr
 80036b8:	b510      	push	{r4, lr}
 80036ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036be:	4291      	cmp	r1, r2
 80036c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036c4:	d1f9      	bne.n	80036ba <memcpy+0xe>
 80036c6:	bd10      	pop	{r4, pc}

080036c8 <memset>:
 80036c8:	4603      	mov	r3, r0
 80036ca:	4402      	add	r2, r0
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d100      	bne.n	80036d2 <memset+0xa>
 80036d0:	4770      	bx	lr
 80036d2:	f803 1b01 	strb.w	r1, [r3], #1
 80036d6:	e7f9      	b.n	80036cc <memset+0x4>

080036d8 <iprintf>:
 80036d8:	b40f      	push	{r0, r1, r2, r3}
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <iprintf+0x2c>)
 80036dc:	b513      	push	{r0, r1, r4, lr}
 80036de:	681c      	ldr	r4, [r3, #0]
 80036e0:	b124      	cbz	r4, 80036ec <iprintf+0x14>
 80036e2:	69a3      	ldr	r3, [r4, #24]
 80036e4:	b913      	cbnz	r3, 80036ec <iprintf+0x14>
 80036e6:	4620      	mov	r0, r4
 80036e8:	f000 fa5a 	bl	8003ba0 <__sinit>
 80036ec:	ab05      	add	r3, sp, #20
 80036ee:	4620      	mov	r0, r4
 80036f0:	9a04      	ldr	r2, [sp, #16]
 80036f2:	68a1      	ldr	r1, [r4, #8]
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	f000 fc5d 	bl	8003fb4 <_vfiprintf_r>
 80036fa:	b002      	add	sp, #8
 80036fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003700:	b004      	add	sp, #16
 8003702:	4770      	bx	lr
 8003704:	2000000c 	.word	0x2000000c

08003708 <_puts_r>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	460e      	mov	r6, r1
 800370c:	4605      	mov	r5, r0
 800370e:	b118      	cbz	r0, 8003718 <_puts_r+0x10>
 8003710:	6983      	ldr	r3, [r0, #24]
 8003712:	b90b      	cbnz	r3, 8003718 <_puts_r+0x10>
 8003714:	f000 fa44 	bl	8003ba0 <__sinit>
 8003718:	69ab      	ldr	r3, [r5, #24]
 800371a:	68ac      	ldr	r4, [r5, #8]
 800371c:	b913      	cbnz	r3, 8003724 <_puts_r+0x1c>
 800371e:	4628      	mov	r0, r5
 8003720:	f000 fa3e 	bl	8003ba0 <__sinit>
 8003724:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <_puts_r+0xd0>)
 8003726:	429c      	cmp	r4, r3
 8003728:	d120      	bne.n	800376c <_puts_r+0x64>
 800372a:	686c      	ldr	r4, [r5, #4]
 800372c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800372e:	07db      	lsls	r3, r3, #31
 8003730:	d405      	bmi.n	800373e <_puts_r+0x36>
 8003732:	89a3      	ldrh	r3, [r4, #12]
 8003734:	0598      	lsls	r0, r3, #22
 8003736:	d402      	bmi.n	800373e <_puts_r+0x36>
 8003738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800373a:	f000 facf 	bl	8003cdc <__retarget_lock_acquire_recursive>
 800373e:	89a3      	ldrh	r3, [r4, #12]
 8003740:	0719      	lsls	r1, r3, #28
 8003742:	d51d      	bpl.n	8003780 <_puts_r+0x78>
 8003744:	6923      	ldr	r3, [r4, #16]
 8003746:	b1db      	cbz	r3, 8003780 <_puts_r+0x78>
 8003748:	3e01      	subs	r6, #1
 800374a:	68a3      	ldr	r3, [r4, #8]
 800374c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003750:	3b01      	subs	r3, #1
 8003752:	60a3      	str	r3, [r4, #8]
 8003754:	bb39      	cbnz	r1, 80037a6 <_puts_r+0x9e>
 8003756:	2b00      	cmp	r3, #0
 8003758:	da38      	bge.n	80037cc <_puts_r+0xc4>
 800375a:	4622      	mov	r2, r4
 800375c:	210a      	movs	r1, #10
 800375e:	4628      	mov	r0, r5
 8003760:	f000 f848 	bl	80037f4 <__swbuf_r>
 8003764:	3001      	adds	r0, #1
 8003766:	d011      	beq.n	800378c <_puts_r+0x84>
 8003768:	250a      	movs	r5, #10
 800376a:	e011      	b.n	8003790 <_puts_r+0x88>
 800376c:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <_puts_r+0xd4>)
 800376e:	429c      	cmp	r4, r3
 8003770:	d101      	bne.n	8003776 <_puts_r+0x6e>
 8003772:	68ac      	ldr	r4, [r5, #8]
 8003774:	e7da      	b.n	800372c <_puts_r+0x24>
 8003776:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <_puts_r+0xd8>)
 8003778:	429c      	cmp	r4, r3
 800377a:	bf08      	it	eq
 800377c:	68ec      	ldreq	r4, [r5, #12]
 800377e:	e7d5      	b.n	800372c <_puts_r+0x24>
 8003780:	4621      	mov	r1, r4
 8003782:	4628      	mov	r0, r5
 8003784:	f000 f888 	bl	8003898 <__swsetup_r>
 8003788:	2800      	cmp	r0, #0
 800378a:	d0dd      	beq.n	8003748 <_puts_r+0x40>
 800378c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003790:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003792:	07da      	lsls	r2, r3, #31
 8003794:	d405      	bmi.n	80037a2 <_puts_r+0x9a>
 8003796:	89a3      	ldrh	r3, [r4, #12]
 8003798:	059b      	lsls	r3, r3, #22
 800379a:	d402      	bmi.n	80037a2 <_puts_r+0x9a>
 800379c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800379e:	f000 fa9e 	bl	8003cde <__retarget_lock_release_recursive>
 80037a2:	4628      	mov	r0, r5
 80037a4:	bd70      	pop	{r4, r5, r6, pc}
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	da04      	bge.n	80037b4 <_puts_r+0xac>
 80037aa:	69a2      	ldr	r2, [r4, #24]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	dc06      	bgt.n	80037be <_puts_r+0xb6>
 80037b0:	290a      	cmp	r1, #10
 80037b2:	d004      	beq.n	80037be <_puts_r+0xb6>
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	6022      	str	r2, [r4, #0]
 80037ba:	7019      	strb	r1, [r3, #0]
 80037bc:	e7c5      	b.n	800374a <_puts_r+0x42>
 80037be:	4622      	mov	r2, r4
 80037c0:	4628      	mov	r0, r5
 80037c2:	f000 f817 	bl	80037f4 <__swbuf_r>
 80037c6:	3001      	adds	r0, #1
 80037c8:	d1bf      	bne.n	800374a <_puts_r+0x42>
 80037ca:	e7df      	b.n	800378c <_puts_r+0x84>
 80037cc:	250a      	movs	r5, #10
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	6022      	str	r2, [r4, #0]
 80037d4:	701d      	strb	r5, [r3, #0]
 80037d6:	e7db      	b.n	8003790 <_puts_r+0x88>
 80037d8:	08005088 	.word	0x08005088
 80037dc:	080050a8 	.word	0x080050a8
 80037e0:	08005068 	.word	0x08005068

080037e4 <puts>:
 80037e4:	4b02      	ldr	r3, [pc, #8]	; (80037f0 <puts+0xc>)
 80037e6:	4601      	mov	r1, r0
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	f7ff bf8d 	b.w	8003708 <_puts_r>
 80037ee:	bf00      	nop
 80037f0:	2000000c 	.word	0x2000000c

080037f4 <__swbuf_r>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	460e      	mov	r6, r1
 80037f8:	4614      	mov	r4, r2
 80037fa:	4605      	mov	r5, r0
 80037fc:	b118      	cbz	r0, 8003806 <__swbuf_r+0x12>
 80037fe:	6983      	ldr	r3, [r0, #24]
 8003800:	b90b      	cbnz	r3, 8003806 <__swbuf_r+0x12>
 8003802:	f000 f9cd 	bl	8003ba0 <__sinit>
 8003806:	4b21      	ldr	r3, [pc, #132]	; (800388c <__swbuf_r+0x98>)
 8003808:	429c      	cmp	r4, r3
 800380a:	d12b      	bne.n	8003864 <__swbuf_r+0x70>
 800380c:	686c      	ldr	r4, [r5, #4]
 800380e:	69a3      	ldr	r3, [r4, #24]
 8003810:	60a3      	str	r3, [r4, #8]
 8003812:	89a3      	ldrh	r3, [r4, #12]
 8003814:	071a      	lsls	r2, r3, #28
 8003816:	d52f      	bpl.n	8003878 <__swbuf_r+0x84>
 8003818:	6923      	ldr	r3, [r4, #16]
 800381a:	b36b      	cbz	r3, 8003878 <__swbuf_r+0x84>
 800381c:	6923      	ldr	r3, [r4, #16]
 800381e:	6820      	ldr	r0, [r4, #0]
 8003820:	b2f6      	uxtb	r6, r6
 8003822:	1ac0      	subs	r0, r0, r3
 8003824:	6963      	ldr	r3, [r4, #20]
 8003826:	4637      	mov	r7, r6
 8003828:	4283      	cmp	r3, r0
 800382a:	dc04      	bgt.n	8003836 <__swbuf_r+0x42>
 800382c:	4621      	mov	r1, r4
 800382e:	4628      	mov	r0, r5
 8003830:	f000 f922 	bl	8003a78 <_fflush_r>
 8003834:	bb30      	cbnz	r0, 8003884 <__swbuf_r+0x90>
 8003836:	68a3      	ldr	r3, [r4, #8]
 8003838:	3001      	adds	r0, #1
 800383a:	3b01      	subs	r3, #1
 800383c:	60a3      	str	r3, [r4, #8]
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	6022      	str	r2, [r4, #0]
 8003844:	701e      	strb	r6, [r3, #0]
 8003846:	6963      	ldr	r3, [r4, #20]
 8003848:	4283      	cmp	r3, r0
 800384a:	d004      	beq.n	8003856 <__swbuf_r+0x62>
 800384c:	89a3      	ldrh	r3, [r4, #12]
 800384e:	07db      	lsls	r3, r3, #31
 8003850:	d506      	bpl.n	8003860 <__swbuf_r+0x6c>
 8003852:	2e0a      	cmp	r6, #10
 8003854:	d104      	bne.n	8003860 <__swbuf_r+0x6c>
 8003856:	4621      	mov	r1, r4
 8003858:	4628      	mov	r0, r5
 800385a:	f000 f90d 	bl	8003a78 <_fflush_r>
 800385e:	b988      	cbnz	r0, 8003884 <__swbuf_r+0x90>
 8003860:	4638      	mov	r0, r7
 8003862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003864:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <__swbuf_r+0x9c>)
 8003866:	429c      	cmp	r4, r3
 8003868:	d101      	bne.n	800386e <__swbuf_r+0x7a>
 800386a:	68ac      	ldr	r4, [r5, #8]
 800386c:	e7cf      	b.n	800380e <__swbuf_r+0x1a>
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <__swbuf_r+0xa0>)
 8003870:	429c      	cmp	r4, r3
 8003872:	bf08      	it	eq
 8003874:	68ec      	ldreq	r4, [r5, #12]
 8003876:	e7ca      	b.n	800380e <__swbuf_r+0x1a>
 8003878:	4621      	mov	r1, r4
 800387a:	4628      	mov	r0, r5
 800387c:	f000 f80c 	bl	8003898 <__swsetup_r>
 8003880:	2800      	cmp	r0, #0
 8003882:	d0cb      	beq.n	800381c <__swbuf_r+0x28>
 8003884:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003888:	e7ea      	b.n	8003860 <__swbuf_r+0x6c>
 800388a:	bf00      	nop
 800388c:	08005088 	.word	0x08005088
 8003890:	080050a8 	.word	0x080050a8
 8003894:	08005068 	.word	0x08005068

08003898 <__swsetup_r>:
 8003898:	4b32      	ldr	r3, [pc, #200]	; (8003964 <__swsetup_r+0xcc>)
 800389a:	b570      	push	{r4, r5, r6, lr}
 800389c:	681d      	ldr	r5, [r3, #0]
 800389e:	4606      	mov	r6, r0
 80038a0:	460c      	mov	r4, r1
 80038a2:	b125      	cbz	r5, 80038ae <__swsetup_r+0x16>
 80038a4:	69ab      	ldr	r3, [r5, #24]
 80038a6:	b913      	cbnz	r3, 80038ae <__swsetup_r+0x16>
 80038a8:	4628      	mov	r0, r5
 80038aa:	f000 f979 	bl	8003ba0 <__sinit>
 80038ae:	4b2e      	ldr	r3, [pc, #184]	; (8003968 <__swsetup_r+0xd0>)
 80038b0:	429c      	cmp	r4, r3
 80038b2:	d10f      	bne.n	80038d4 <__swsetup_r+0x3c>
 80038b4:	686c      	ldr	r4, [r5, #4]
 80038b6:	89a3      	ldrh	r3, [r4, #12]
 80038b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038bc:	0719      	lsls	r1, r3, #28
 80038be:	d42c      	bmi.n	800391a <__swsetup_r+0x82>
 80038c0:	06dd      	lsls	r5, r3, #27
 80038c2:	d411      	bmi.n	80038e8 <__swsetup_r+0x50>
 80038c4:	2309      	movs	r3, #9
 80038c6:	6033      	str	r3, [r6, #0]
 80038c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038d0:	81a3      	strh	r3, [r4, #12]
 80038d2:	e03e      	b.n	8003952 <__swsetup_r+0xba>
 80038d4:	4b25      	ldr	r3, [pc, #148]	; (800396c <__swsetup_r+0xd4>)
 80038d6:	429c      	cmp	r4, r3
 80038d8:	d101      	bne.n	80038de <__swsetup_r+0x46>
 80038da:	68ac      	ldr	r4, [r5, #8]
 80038dc:	e7eb      	b.n	80038b6 <__swsetup_r+0x1e>
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <__swsetup_r+0xd8>)
 80038e0:	429c      	cmp	r4, r3
 80038e2:	bf08      	it	eq
 80038e4:	68ec      	ldreq	r4, [r5, #12]
 80038e6:	e7e6      	b.n	80038b6 <__swsetup_r+0x1e>
 80038e8:	0758      	lsls	r0, r3, #29
 80038ea:	d512      	bpl.n	8003912 <__swsetup_r+0x7a>
 80038ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038ee:	b141      	cbz	r1, 8003902 <__swsetup_r+0x6a>
 80038f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038f4:	4299      	cmp	r1, r3
 80038f6:	d002      	beq.n	80038fe <__swsetup_r+0x66>
 80038f8:	4630      	mov	r0, r6
 80038fa:	f000 fa57 	bl	8003dac <_free_r>
 80038fe:	2300      	movs	r3, #0
 8003900:	6363      	str	r3, [r4, #52]	; 0x34
 8003902:	89a3      	ldrh	r3, [r4, #12]
 8003904:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003908:	81a3      	strh	r3, [r4, #12]
 800390a:	2300      	movs	r3, #0
 800390c:	6063      	str	r3, [r4, #4]
 800390e:	6923      	ldr	r3, [r4, #16]
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	89a3      	ldrh	r3, [r4, #12]
 8003914:	f043 0308 	orr.w	r3, r3, #8
 8003918:	81a3      	strh	r3, [r4, #12]
 800391a:	6923      	ldr	r3, [r4, #16]
 800391c:	b94b      	cbnz	r3, 8003932 <__swsetup_r+0x9a>
 800391e:	89a3      	ldrh	r3, [r4, #12]
 8003920:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003928:	d003      	beq.n	8003932 <__swsetup_r+0x9a>
 800392a:	4621      	mov	r1, r4
 800392c:	4630      	mov	r0, r6
 800392e:	f000 f9fd 	bl	8003d2c <__smakebuf_r>
 8003932:	89a0      	ldrh	r0, [r4, #12]
 8003934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003938:	f010 0301 	ands.w	r3, r0, #1
 800393c:	d00a      	beq.n	8003954 <__swsetup_r+0xbc>
 800393e:	2300      	movs	r3, #0
 8003940:	60a3      	str	r3, [r4, #8]
 8003942:	6963      	ldr	r3, [r4, #20]
 8003944:	425b      	negs	r3, r3
 8003946:	61a3      	str	r3, [r4, #24]
 8003948:	6923      	ldr	r3, [r4, #16]
 800394a:	b943      	cbnz	r3, 800395e <__swsetup_r+0xc6>
 800394c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003950:	d1ba      	bne.n	80038c8 <__swsetup_r+0x30>
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	0781      	lsls	r1, r0, #30
 8003956:	bf58      	it	pl
 8003958:	6963      	ldrpl	r3, [r4, #20]
 800395a:	60a3      	str	r3, [r4, #8]
 800395c:	e7f4      	b.n	8003948 <__swsetup_r+0xb0>
 800395e:	2000      	movs	r0, #0
 8003960:	e7f7      	b.n	8003952 <__swsetup_r+0xba>
 8003962:	bf00      	nop
 8003964:	2000000c 	.word	0x2000000c
 8003968:	08005088 	.word	0x08005088
 800396c:	080050a8 	.word	0x080050a8
 8003970:	08005068 	.word	0x08005068

08003974 <__sflush_r>:
 8003974:	898a      	ldrh	r2, [r1, #12]
 8003976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003978:	4605      	mov	r5, r0
 800397a:	0710      	lsls	r0, r2, #28
 800397c:	460c      	mov	r4, r1
 800397e:	d457      	bmi.n	8003a30 <__sflush_r+0xbc>
 8003980:	684b      	ldr	r3, [r1, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	dc04      	bgt.n	8003990 <__sflush_r+0x1c>
 8003986:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	dc01      	bgt.n	8003990 <__sflush_r+0x1c>
 800398c:	2000      	movs	r0, #0
 800398e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003992:	2e00      	cmp	r6, #0
 8003994:	d0fa      	beq.n	800398c <__sflush_r+0x18>
 8003996:	2300      	movs	r3, #0
 8003998:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800399c:	682f      	ldr	r7, [r5, #0]
 800399e:	602b      	str	r3, [r5, #0]
 80039a0:	d032      	beq.n	8003a08 <__sflush_r+0x94>
 80039a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039a4:	89a3      	ldrh	r3, [r4, #12]
 80039a6:	075a      	lsls	r2, r3, #29
 80039a8:	d505      	bpl.n	80039b6 <__sflush_r+0x42>
 80039aa:	6863      	ldr	r3, [r4, #4]
 80039ac:	1ac0      	subs	r0, r0, r3
 80039ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039b0:	b10b      	cbz	r3, 80039b6 <__sflush_r+0x42>
 80039b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039b4:	1ac0      	subs	r0, r0, r3
 80039b6:	2300      	movs	r3, #0
 80039b8:	4602      	mov	r2, r0
 80039ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039bc:	4628      	mov	r0, r5
 80039be:	6a21      	ldr	r1, [r4, #32]
 80039c0:	47b0      	blx	r6
 80039c2:	1c43      	adds	r3, r0, #1
 80039c4:	89a3      	ldrh	r3, [r4, #12]
 80039c6:	d106      	bne.n	80039d6 <__sflush_r+0x62>
 80039c8:	6829      	ldr	r1, [r5, #0]
 80039ca:	291d      	cmp	r1, #29
 80039cc:	d82c      	bhi.n	8003a28 <__sflush_r+0xb4>
 80039ce:	4a29      	ldr	r2, [pc, #164]	; (8003a74 <__sflush_r+0x100>)
 80039d0:	40ca      	lsrs	r2, r1
 80039d2:	07d6      	lsls	r6, r2, #31
 80039d4:	d528      	bpl.n	8003a28 <__sflush_r+0xb4>
 80039d6:	2200      	movs	r2, #0
 80039d8:	6062      	str	r2, [r4, #4]
 80039da:	6922      	ldr	r2, [r4, #16]
 80039dc:	04d9      	lsls	r1, r3, #19
 80039de:	6022      	str	r2, [r4, #0]
 80039e0:	d504      	bpl.n	80039ec <__sflush_r+0x78>
 80039e2:	1c42      	adds	r2, r0, #1
 80039e4:	d101      	bne.n	80039ea <__sflush_r+0x76>
 80039e6:	682b      	ldr	r3, [r5, #0]
 80039e8:	b903      	cbnz	r3, 80039ec <__sflush_r+0x78>
 80039ea:	6560      	str	r0, [r4, #84]	; 0x54
 80039ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039ee:	602f      	str	r7, [r5, #0]
 80039f0:	2900      	cmp	r1, #0
 80039f2:	d0cb      	beq.n	800398c <__sflush_r+0x18>
 80039f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039f8:	4299      	cmp	r1, r3
 80039fa:	d002      	beq.n	8003a02 <__sflush_r+0x8e>
 80039fc:	4628      	mov	r0, r5
 80039fe:	f000 f9d5 	bl	8003dac <_free_r>
 8003a02:	2000      	movs	r0, #0
 8003a04:	6360      	str	r0, [r4, #52]	; 0x34
 8003a06:	e7c2      	b.n	800398e <__sflush_r+0x1a>
 8003a08:	6a21      	ldr	r1, [r4, #32]
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	47b0      	blx	r6
 8003a10:	1c41      	adds	r1, r0, #1
 8003a12:	d1c7      	bne.n	80039a4 <__sflush_r+0x30>
 8003a14:	682b      	ldr	r3, [r5, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0c4      	beq.n	80039a4 <__sflush_r+0x30>
 8003a1a:	2b1d      	cmp	r3, #29
 8003a1c:	d001      	beq.n	8003a22 <__sflush_r+0xae>
 8003a1e:	2b16      	cmp	r3, #22
 8003a20:	d101      	bne.n	8003a26 <__sflush_r+0xb2>
 8003a22:	602f      	str	r7, [r5, #0]
 8003a24:	e7b2      	b.n	800398c <__sflush_r+0x18>
 8003a26:	89a3      	ldrh	r3, [r4, #12]
 8003a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a2c:	81a3      	strh	r3, [r4, #12]
 8003a2e:	e7ae      	b.n	800398e <__sflush_r+0x1a>
 8003a30:	690f      	ldr	r7, [r1, #16]
 8003a32:	2f00      	cmp	r7, #0
 8003a34:	d0aa      	beq.n	800398c <__sflush_r+0x18>
 8003a36:	0793      	lsls	r3, r2, #30
 8003a38:	bf18      	it	ne
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	680e      	ldr	r6, [r1, #0]
 8003a3e:	bf08      	it	eq
 8003a40:	694b      	ldreq	r3, [r1, #20]
 8003a42:	1bf6      	subs	r6, r6, r7
 8003a44:	600f      	str	r7, [r1, #0]
 8003a46:	608b      	str	r3, [r1, #8]
 8003a48:	2e00      	cmp	r6, #0
 8003a4a:	dd9f      	ble.n	800398c <__sflush_r+0x18>
 8003a4c:	4633      	mov	r3, r6
 8003a4e:	463a      	mov	r2, r7
 8003a50:	4628      	mov	r0, r5
 8003a52:	6a21      	ldr	r1, [r4, #32]
 8003a54:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003a58:	47e0      	blx	ip
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	dc06      	bgt.n	8003a6c <__sflush_r+0xf8>
 8003a5e:	89a3      	ldrh	r3, [r4, #12]
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a68:	81a3      	strh	r3, [r4, #12]
 8003a6a:	e790      	b.n	800398e <__sflush_r+0x1a>
 8003a6c:	4407      	add	r7, r0
 8003a6e:	1a36      	subs	r6, r6, r0
 8003a70:	e7ea      	b.n	8003a48 <__sflush_r+0xd4>
 8003a72:	bf00      	nop
 8003a74:	20400001 	.word	0x20400001

08003a78 <_fflush_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	690b      	ldr	r3, [r1, #16]
 8003a7c:	4605      	mov	r5, r0
 8003a7e:	460c      	mov	r4, r1
 8003a80:	b913      	cbnz	r3, 8003a88 <_fflush_r+0x10>
 8003a82:	2500      	movs	r5, #0
 8003a84:	4628      	mov	r0, r5
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
 8003a88:	b118      	cbz	r0, 8003a92 <_fflush_r+0x1a>
 8003a8a:	6983      	ldr	r3, [r0, #24]
 8003a8c:	b90b      	cbnz	r3, 8003a92 <_fflush_r+0x1a>
 8003a8e:	f000 f887 	bl	8003ba0 <__sinit>
 8003a92:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <_fflush_r+0x6c>)
 8003a94:	429c      	cmp	r4, r3
 8003a96:	d11b      	bne.n	8003ad0 <_fflush_r+0x58>
 8003a98:	686c      	ldr	r4, [r5, #4]
 8003a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0ef      	beq.n	8003a82 <_fflush_r+0xa>
 8003aa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003aa4:	07d0      	lsls	r0, r2, #31
 8003aa6:	d404      	bmi.n	8003ab2 <_fflush_r+0x3a>
 8003aa8:	0599      	lsls	r1, r3, #22
 8003aaa:	d402      	bmi.n	8003ab2 <_fflush_r+0x3a>
 8003aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aae:	f000 f915 	bl	8003cdc <__retarget_lock_acquire_recursive>
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	f7ff ff5d 	bl	8003974 <__sflush_r>
 8003aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003abc:	4605      	mov	r5, r0
 8003abe:	07da      	lsls	r2, r3, #31
 8003ac0:	d4e0      	bmi.n	8003a84 <_fflush_r+0xc>
 8003ac2:	89a3      	ldrh	r3, [r4, #12]
 8003ac4:	059b      	lsls	r3, r3, #22
 8003ac6:	d4dd      	bmi.n	8003a84 <_fflush_r+0xc>
 8003ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aca:	f000 f908 	bl	8003cde <__retarget_lock_release_recursive>
 8003ace:	e7d9      	b.n	8003a84 <_fflush_r+0xc>
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <_fflush_r+0x70>)
 8003ad2:	429c      	cmp	r4, r3
 8003ad4:	d101      	bne.n	8003ada <_fflush_r+0x62>
 8003ad6:	68ac      	ldr	r4, [r5, #8]
 8003ad8:	e7df      	b.n	8003a9a <_fflush_r+0x22>
 8003ada:	4b04      	ldr	r3, [pc, #16]	; (8003aec <_fflush_r+0x74>)
 8003adc:	429c      	cmp	r4, r3
 8003ade:	bf08      	it	eq
 8003ae0:	68ec      	ldreq	r4, [r5, #12]
 8003ae2:	e7da      	b.n	8003a9a <_fflush_r+0x22>
 8003ae4:	08005088 	.word	0x08005088
 8003ae8:	080050a8 	.word	0x080050a8
 8003aec:	08005068 	.word	0x08005068

08003af0 <std>:
 8003af0:	2300      	movs	r3, #0
 8003af2:	b510      	push	{r4, lr}
 8003af4:	4604      	mov	r4, r0
 8003af6:	e9c0 3300 	strd	r3, r3, [r0]
 8003afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003afe:	6083      	str	r3, [r0, #8]
 8003b00:	8181      	strh	r1, [r0, #12]
 8003b02:	6643      	str	r3, [r0, #100]	; 0x64
 8003b04:	81c2      	strh	r2, [r0, #14]
 8003b06:	6183      	str	r3, [r0, #24]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	305c      	adds	r0, #92	; 0x5c
 8003b0e:	f7ff fddb 	bl	80036c8 <memset>
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <std+0x38>)
 8003b14:	6224      	str	r4, [r4, #32]
 8003b16:	6263      	str	r3, [r4, #36]	; 0x24
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <std+0x3c>)
 8003b1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <std+0x40>)
 8003b1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b20:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <std+0x44>)
 8003b22:	6323      	str	r3, [r4, #48]	; 0x30
 8003b24:	bd10      	pop	{r4, pc}
 8003b26:	bf00      	nop
 8003b28:	08004561 	.word	0x08004561
 8003b2c:	08004583 	.word	0x08004583
 8003b30:	080045bb 	.word	0x080045bb
 8003b34:	080045df 	.word	0x080045df

08003b38 <_cleanup_r>:
 8003b38:	4901      	ldr	r1, [pc, #4]	; (8003b40 <_cleanup_r+0x8>)
 8003b3a:	f000 b8af 	b.w	8003c9c <_fwalk_reent>
 8003b3e:	bf00      	nop
 8003b40:	08003a79 	.word	0x08003a79

08003b44 <__sfmoreglue>:
 8003b44:	2268      	movs	r2, #104	; 0x68
 8003b46:	b570      	push	{r4, r5, r6, lr}
 8003b48:	1e4d      	subs	r5, r1, #1
 8003b4a:	4355      	muls	r5, r2
 8003b4c:	460e      	mov	r6, r1
 8003b4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b52:	f000 f993 	bl	8003e7c <_malloc_r>
 8003b56:	4604      	mov	r4, r0
 8003b58:	b140      	cbz	r0, 8003b6c <__sfmoreglue+0x28>
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	e9c0 1600 	strd	r1, r6, [r0]
 8003b60:	300c      	adds	r0, #12
 8003b62:	60a0      	str	r0, [r4, #8]
 8003b64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b68:	f7ff fdae 	bl	80036c8 <memset>
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}

08003b70 <__sfp_lock_acquire>:
 8003b70:	4801      	ldr	r0, [pc, #4]	; (8003b78 <__sfp_lock_acquire+0x8>)
 8003b72:	f000 b8b3 	b.w	8003cdc <__retarget_lock_acquire_recursive>
 8003b76:	bf00      	nop
 8003b78:	200005d1 	.word	0x200005d1

08003b7c <__sfp_lock_release>:
 8003b7c:	4801      	ldr	r0, [pc, #4]	; (8003b84 <__sfp_lock_release+0x8>)
 8003b7e:	f000 b8ae 	b.w	8003cde <__retarget_lock_release_recursive>
 8003b82:	bf00      	nop
 8003b84:	200005d1 	.word	0x200005d1

08003b88 <__sinit_lock_acquire>:
 8003b88:	4801      	ldr	r0, [pc, #4]	; (8003b90 <__sinit_lock_acquire+0x8>)
 8003b8a:	f000 b8a7 	b.w	8003cdc <__retarget_lock_acquire_recursive>
 8003b8e:	bf00      	nop
 8003b90:	200005d2 	.word	0x200005d2

08003b94 <__sinit_lock_release>:
 8003b94:	4801      	ldr	r0, [pc, #4]	; (8003b9c <__sinit_lock_release+0x8>)
 8003b96:	f000 b8a2 	b.w	8003cde <__retarget_lock_release_recursive>
 8003b9a:	bf00      	nop
 8003b9c:	200005d2 	.word	0x200005d2

08003ba0 <__sinit>:
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	f7ff fff0 	bl	8003b88 <__sinit_lock_acquire>
 8003ba8:	69a3      	ldr	r3, [r4, #24]
 8003baa:	b11b      	cbz	r3, 8003bb4 <__sinit+0x14>
 8003bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb0:	f7ff bff0 	b.w	8003b94 <__sinit_lock_release>
 8003bb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003bb8:	6523      	str	r3, [r4, #80]	; 0x50
 8003bba:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <__sinit+0x68>)
 8003bbc:	4a13      	ldr	r2, [pc, #76]	; (8003c0c <__sinit+0x6c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003bc2:	42a3      	cmp	r3, r4
 8003bc4:	bf08      	it	eq
 8003bc6:	2301      	moveq	r3, #1
 8003bc8:	4620      	mov	r0, r4
 8003bca:	bf08      	it	eq
 8003bcc:	61a3      	streq	r3, [r4, #24]
 8003bce:	f000 f81f 	bl	8003c10 <__sfp>
 8003bd2:	6060      	str	r0, [r4, #4]
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f000 f81b 	bl	8003c10 <__sfp>
 8003bda:	60a0      	str	r0, [r4, #8]
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f000 f817 	bl	8003c10 <__sfp>
 8003be2:	2200      	movs	r2, #0
 8003be4:	2104      	movs	r1, #4
 8003be6:	60e0      	str	r0, [r4, #12]
 8003be8:	6860      	ldr	r0, [r4, #4]
 8003bea:	f7ff ff81 	bl	8003af0 <std>
 8003bee:	2201      	movs	r2, #1
 8003bf0:	2109      	movs	r1, #9
 8003bf2:	68a0      	ldr	r0, [r4, #8]
 8003bf4:	f7ff ff7c 	bl	8003af0 <std>
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	2112      	movs	r1, #18
 8003bfc:	68e0      	ldr	r0, [r4, #12]
 8003bfe:	f7ff ff77 	bl	8003af0 <std>
 8003c02:	2301      	movs	r3, #1
 8003c04:	61a3      	str	r3, [r4, #24]
 8003c06:	e7d1      	b.n	8003bac <__sinit+0xc>
 8003c08:	08005064 	.word	0x08005064
 8003c0c:	08003b39 	.word	0x08003b39

08003c10 <__sfp>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	4607      	mov	r7, r0
 8003c14:	f7ff ffac 	bl	8003b70 <__sfp_lock_acquire>
 8003c18:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <__sfp+0x84>)
 8003c1a:	681e      	ldr	r6, [r3, #0]
 8003c1c:	69b3      	ldr	r3, [r6, #24]
 8003c1e:	b913      	cbnz	r3, 8003c26 <__sfp+0x16>
 8003c20:	4630      	mov	r0, r6
 8003c22:	f7ff ffbd 	bl	8003ba0 <__sinit>
 8003c26:	3648      	adds	r6, #72	; 0x48
 8003c28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	d503      	bpl.n	8003c38 <__sfp+0x28>
 8003c30:	6833      	ldr	r3, [r6, #0]
 8003c32:	b30b      	cbz	r3, 8003c78 <__sfp+0x68>
 8003c34:	6836      	ldr	r6, [r6, #0]
 8003c36:	e7f7      	b.n	8003c28 <__sfp+0x18>
 8003c38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c3c:	b9d5      	cbnz	r5, 8003c74 <__sfp+0x64>
 8003c3e:	4b16      	ldr	r3, [pc, #88]	; (8003c98 <__sfp+0x88>)
 8003c40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c44:	60e3      	str	r3, [r4, #12]
 8003c46:	6665      	str	r5, [r4, #100]	; 0x64
 8003c48:	f000 f847 	bl	8003cda <__retarget_lock_init_recursive>
 8003c4c:	f7ff ff96 	bl	8003b7c <__sfp_lock_release>
 8003c50:	2208      	movs	r2, #8
 8003c52:	4629      	mov	r1, r5
 8003c54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003c58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003c5c:	6025      	str	r5, [r4, #0]
 8003c5e:	61a5      	str	r5, [r4, #24]
 8003c60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c64:	f7ff fd30 	bl	80036c8 <memset>
 8003c68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c70:	4620      	mov	r0, r4
 8003c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c74:	3468      	adds	r4, #104	; 0x68
 8003c76:	e7d9      	b.n	8003c2c <__sfp+0x1c>
 8003c78:	2104      	movs	r1, #4
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	f7ff ff62 	bl	8003b44 <__sfmoreglue>
 8003c80:	4604      	mov	r4, r0
 8003c82:	6030      	str	r0, [r6, #0]
 8003c84:	2800      	cmp	r0, #0
 8003c86:	d1d5      	bne.n	8003c34 <__sfp+0x24>
 8003c88:	f7ff ff78 	bl	8003b7c <__sfp_lock_release>
 8003c8c:	230c      	movs	r3, #12
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	e7ee      	b.n	8003c70 <__sfp+0x60>
 8003c92:	bf00      	nop
 8003c94:	08005064 	.word	0x08005064
 8003c98:	ffff0001 	.word	0xffff0001

08003c9c <_fwalk_reent>:
 8003c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ca0:	4606      	mov	r6, r0
 8003ca2:	4688      	mov	r8, r1
 8003ca4:	2700      	movs	r7, #0
 8003ca6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003caa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cae:	f1b9 0901 	subs.w	r9, r9, #1
 8003cb2:	d505      	bpl.n	8003cc0 <_fwalk_reent+0x24>
 8003cb4:	6824      	ldr	r4, [r4, #0]
 8003cb6:	2c00      	cmp	r4, #0
 8003cb8:	d1f7      	bne.n	8003caa <_fwalk_reent+0xe>
 8003cba:	4638      	mov	r0, r7
 8003cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cc0:	89ab      	ldrh	r3, [r5, #12]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d907      	bls.n	8003cd6 <_fwalk_reent+0x3a>
 8003cc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	d003      	beq.n	8003cd6 <_fwalk_reent+0x3a>
 8003cce:	4629      	mov	r1, r5
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	47c0      	blx	r8
 8003cd4:	4307      	orrs	r7, r0
 8003cd6:	3568      	adds	r5, #104	; 0x68
 8003cd8:	e7e9      	b.n	8003cae <_fwalk_reent+0x12>

08003cda <__retarget_lock_init_recursive>:
 8003cda:	4770      	bx	lr

08003cdc <__retarget_lock_acquire_recursive>:
 8003cdc:	4770      	bx	lr

08003cde <__retarget_lock_release_recursive>:
 8003cde:	4770      	bx	lr

08003ce0 <__swhatbuf_r>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	460e      	mov	r6, r1
 8003ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce8:	4614      	mov	r4, r2
 8003cea:	2900      	cmp	r1, #0
 8003cec:	461d      	mov	r5, r3
 8003cee:	b096      	sub	sp, #88	; 0x58
 8003cf0:	da08      	bge.n	8003d04 <__swhatbuf_r+0x24>
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003cf8:	602a      	str	r2, [r5, #0]
 8003cfa:	061a      	lsls	r2, r3, #24
 8003cfc:	d410      	bmi.n	8003d20 <__swhatbuf_r+0x40>
 8003cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d02:	e00e      	b.n	8003d22 <__swhatbuf_r+0x42>
 8003d04:	466a      	mov	r2, sp
 8003d06:	f000 fc91 	bl	800462c <_fstat_r>
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	dbf1      	blt.n	8003cf2 <__swhatbuf_r+0x12>
 8003d0e:	9a01      	ldr	r2, [sp, #4]
 8003d10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d18:	425a      	negs	r2, r3
 8003d1a:	415a      	adcs	r2, r3
 8003d1c:	602a      	str	r2, [r5, #0]
 8003d1e:	e7ee      	b.n	8003cfe <__swhatbuf_r+0x1e>
 8003d20:	2340      	movs	r3, #64	; 0x40
 8003d22:	2000      	movs	r0, #0
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	b016      	add	sp, #88	; 0x58
 8003d28:	bd70      	pop	{r4, r5, r6, pc}
	...

08003d2c <__smakebuf_r>:
 8003d2c:	898b      	ldrh	r3, [r1, #12]
 8003d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d30:	079d      	lsls	r5, r3, #30
 8003d32:	4606      	mov	r6, r0
 8003d34:	460c      	mov	r4, r1
 8003d36:	d507      	bpl.n	8003d48 <__smakebuf_r+0x1c>
 8003d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	6123      	str	r3, [r4, #16]
 8003d40:	2301      	movs	r3, #1
 8003d42:	6163      	str	r3, [r4, #20]
 8003d44:	b002      	add	sp, #8
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	466a      	mov	r2, sp
 8003d4a:	ab01      	add	r3, sp, #4
 8003d4c:	f7ff ffc8 	bl	8003ce0 <__swhatbuf_r>
 8003d50:	9900      	ldr	r1, [sp, #0]
 8003d52:	4605      	mov	r5, r0
 8003d54:	4630      	mov	r0, r6
 8003d56:	f000 f891 	bl	8003e7c <_malloc_r>
 8003d5a:	b948      	cbnz	r0, 8003d70 <__smakebuf_r+0x44>
 8003d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d60:	059a      	lsls	r2, r3, #22
 8003d62:	d4ef      	bmi.n	8003d44 <__smakebuf_r+0x18>
 8003d64:	f023 0303 	bic.w	r3, r3, #3
 8003d68:	f043 0302 	orr.w	r3, r3, #2
 8003d6c:	81a3      	strh	r3, [r4, #12]
 8003d6e:	e7e3      	b.n	8003d38 <__smakebuf_r+0xc>
 8003d70:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <__smakebuf_r+0x7c>)
 8003d72:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	6020      	str	r0, [r4, #0]
 8003d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7c:	81a3      	strh	r3, [r4, #12]
 8003d7e:	9b00      	ldr	r3, [sp, #0]
 8003d80:	6120      	str	r0, [r4, #16]
 8003d82:	6163      	str	r3, [r4, #20]
 8003d84:	9b01      	ldr	r3, [sp, #4]
 8003d86:	b15b      	cbz	r3, 8003da0 <__smakebuf_r+0x74>
 8003d88:	4630      	mov	r0, r6
 8003d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d8e:	f000 fc5f 	bl	8004650 <_isatty_r>
 8003d92:	b128      	cbz	r0, 8003da0 <__smakebuf_r+0x74>
 8003d94:	89a3      	ldrh	r3, [r4, #12]
 8003d96:	f023 0303 	bic.w	r3, r3, #3
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	81a3      	strh	r3, [r4, #12]
 8003da0:	89a0      	ldrh	r0, [r4, #12]
 8003da2:	4305      	orrs	r5, r0
 8003da4:	81a5      	strh	r5, [r4, #12]
 8003da6:	e7cd      	b.n	8003d44 <__smakebuf_r+0x18>
 8003da8:	08003b39 	.word	0x08003b39

08003dac <_free_r>:
 8003dac:	b538      	push	{r3, r4, r5, lr}
 8003dae:	4605      	mov	r5, r0
 8003db0:	2900      	cmp	r1, #0
 8003db2:	d040      	beq.n	8003e36 <_free_r+0x8a>
 8003db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003db8:	1f0c      	subs	r4, r1, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	bfb8      	it	lt
 8003dbe:	18e4      	addlt	r4, r4, r3
 8003dc0:	f000 fc76 	bl	80046b0 <__malloc_lock>
 8003dc4:	4a1c      	ldr	r2, [pc, #112]	; (8003e38 <_free_r+0x8c>)
 8003dc6:	6813      	ldr	r3, [r2, #0]
 8003dc8:	b933      	cbnz	r3, 8003dd8 <_free_r+0x2c>
 8003dca:	6063      	str	r3, [r4, #4]
 8003dcc:	6014      	str	r4, [r2, #0]
 8003dce:	4628      	mov	r0, r5
 8003dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dd4:	f000 bc72 	b.w	80046bc <__malloc_unlock>
 8003dd8:	42a3      	cmp	r3, r4
 8003dda:	d908      	bls.n	8003dee <_free_r+0x42>
 8003ddc:	6820      	ldr	r0, [r4, #0]
 8003dde:	1821      	adds	r1, r4, r0
 8003de0:	428b      	cmp	r3, r1
 8003de2:	bf01      	itttt	eq
 8003de4:	6819      	ldreq	r1, [r3, #0]
 8003de6:	685b      	ldreq	r3, [r3, #4]
 8003de8:	1809      	addeq	r1, r1, r0
 8003dea:	6021      	streq	r1, [r4, #0]
 8003dec:	e7ed      	b.n	8003dca <_free_r+0x1e>
 8003dee:	461a      	mov	r2, r3
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	b10b      	cbz	r3, 8003df8 <_free_r+0x4c>
 8003df4:	42a3      	cmp	r3, r4
 8003df6:	d9fa      	bls.n	8003dee <_free_r+0x42>
 8003df8:	6811      	ldr	r1, [r2, #0]
 8003dfa:	1850      	adds	r0, r2, r1
 8003dfc:	42a0      	cmp	r0, r4
 8003dfe:	d10b      	bne.n	8003e18 <_free_r+0x6c>
 8003e00:	6820      	ldr	r0, [r4, #0]
 8003e02:	4401      	add	r1, r0
 8003e04:	1850      	adds	r0, r2, r1
 8003e06:	4283      	cmp	r3, r0
 8003e08:	6011      	str	r1, [r2, #0]
 8003e0a:	d1e0      	bne.n	8003dce <_free_r+0x22>
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4401      	add	r1, r0
 8003e12:	6011      	str	r1, [r2, #0]
 8003e14:	6053      	str	r3, [r2, #4]
 8003e16:	e7da      	b.n	8003dce <_free_r+0x22>
 8003e18:	d902      	bls.n	8003e20 <_free_r+0x74>
 8003e1a:	230c      	movs	r3, #12
 8003e1c:	602b      	str	r3, [r5, #0]
 8003e1e:	e7d6      	b.n	8003dce <_free_r+0x22>
 8003e20:	6820      	ldr	r0, [r4, #0]
 8003e22:	1821      	adds	r1, r4, r0
 8003e24:	428b      	cmp	r3, r1
 8003e26:	bf01      	itttt	eq
 8003e28:	6819      	ldreq	r1, [r3, #0]
 8003e2a:	685b      	ldreq	r3, [r3, #4]
 8003e2c:	1809      	addeq	r1, r1, r0
 8003e2e:	6021      	streq	r1, [r4, #0]
 8003e30:	6063      	str	r3, [r4, #4]
 8003e32:	6054      	str	r4, [r2, #4]
 8003e34:	e7cb      	b.n	8003dce <_free_r+0x22>
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
 8003e38:	200005d4 	.word	0x200005d4

08003e3c <sbrk_aligned>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	4e0e      	ldr	r6, [pc, #56]	; (8003e78 <sbrk_aligned+0x3c>)
 8003e40:	460c      	mov	r4, r1
 8003e42:	6831      	ldr	r1, [r6, #0]
 8003e44:	4605      	mov	r5, r0
 8003e46:	b911      	cbnz	r1, 8003e4e <sbrk_aligned+0x12>
 8003e48:	f000 fb7a 	bl	8004540 <_sbrk_r>
 8003e4c:	6030      	str	r0, [r6, #0]
 8003e4e:	4621      	mov	r1, r4
 8003e50:	4628      	mov	r0, r5
 8003e52:	f000 fb75 	bl	8004540 <_sbrk_r>
 8003e56:	1c43      	adds	r3, r0, #1
 8003e58:	d00a      	beq.n	8003e70 <sbrk_aligned+0x34>
 8003e5a:	1cc4      	adds	r4, r0, #3
 8003e5c:	f024 0403 	bic.w	r4, r4, #3
 8003e60:	42a0      	cmp	r0, r4
 8003e62:	d007      	beq.n	8003e74 <sbrk_aligned+0x38>
 8003e64:	1a21      	subs	r1, r4, r0
 8003e66:	4628      	mov	r0, r5
 8003e68:	f000 fb6a 	bl	8004540 <_sbrk_r>
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	d101      	bne.n	8003e74 <sbrk_aligned+0x38>
 8003e70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003e74:	4620      	mov	r0, r4
 8003e76:	bd70      	pop	{r4, r5, r6, pc}
 8003e78:	200005d8 	.word	0x200005d8

08003e7c <_malloc_r>:
 8003e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e80:	1ccd      	adds	r5, r1, #3
 8003e82:	f025 0503 	bic.w	r5, r5, #3
 8003e86:	3508      	adds	r5, #8
 8003e88:	2d0c      	cmp	r5, #12
 8003e8a:	bf38      	it	cc
 8003e8c:	250c      	movcc	r5, #12
 8003e8e:	2d00      	cmp	r5, #0
 8003e90:	4607      	mov	r7, r0
 8003e92:	db01      	blt.n	8003e98 <_malloc_r+0x1c>
 8003e94:	42a9      	cmp	r1, r5
 8003e96:	d905      	bls.n	8003ea4 <_malloc_r+0x28>
 8003e98:	230c      	movs	r3, #12
 8003e9a:	2600      	movs	r6, #0
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ea4:	4e2e      	ldr	r6, [pc, #184]	; (8003f60 <_malloc_r+0xe4>)
 8003ea6:	f000 fc03 	bl	80046b0 <__malloc_lock>
 8003eaa:	6833      	ldr	r3, [r6, #0]
 8003eac:	461c      	mov	r4, r3
 8003eae:	bb34      	cbnz	r4, 8003efe <_malloc_r+0x82>
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	f7ff ffc2 	bl	8003e3c <sbrk_aligned>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	4604      	mov	r4, r0
 8003ebc:	d14d      	bne.n	8003f5a <_malloc_r+0xde>
 8003ebe:	6834      	ldr	r4, [r6, #0]
 8003ec0:	4626      	mov	r6, r4
 8003ec2:	2e00      	cmp	r6, #0
 8003ec4:	d140      	bne.n	8003f48 <_malloc_r+0xcc>
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	4631      	mov	r1, r6
 8003eca:	4638      	mov	r0, r7
 8003ecc:	eb04 0803 	add.w	r8, r4, r3
 8003ed0:	f000 fb36 	bl	8004540 <_sbrk_r>
 8003ed4:	4580      	cmp	r8, r0
 8003ed6:	d13a      	bne.n	8003f4e <_malloc_r+0xd2>
 8003ed8:	6821      	ldr	r1, [r4, #0]
 8003eda:	3503      	adds	r5, #3
 8003edc:	1a6d      	subs	r5, r5, r1
 8003ede:	f025 0503 	bic.w	r5, r5, #3
 8003ee2:	3508      	adds	r5, #8
 8003ee4:	2d0c      	cmp	r5, #12
 8003ee6:	bf38      	it	cc
 8003ee8:	250c      	movcc	r5, #12
 8003eea:	4638      	mov	r0, r7
 8003eec:	4629      	mov	r1, r5
 8003eee:	f7ff ffa5 	bl	8003e3c <sbrk_aligned>
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d02b      	beq.n	8003f4e <_malloc_r+0xd2>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	442b      	add	r3, r5
 8003efa:	6023      	str	r3, [r4, #0]
 8003efc:	e00e      	b.n	8003f1c <_malloc_r+0xa0>
 8003efe:	6822      	ldr	r2, [r4, #0]
 8003f00:	1b52      	subs	r2, r2, r5
 8003f02:	d41e      	bmi.n	8003f42 <_malloc_r+0xc6>
 8003f04:	2a0b      	cmp	r2, #11
 8003f06:	d916      	bls.n	8003f36 <_malloc_r+0xba>
 8003f08:	1961      	adds	r1, r4, r5
 8003f0a:	42a3      	cmp	r3, r4
 8003f0c:	6025      	str	r5, [r4, #0]
 8003f0e:	bf18      	it	ne
 8003f10:	6059      	strne	r1, [r3, #4]
 8003f12:	6863      	ldr	r3, [r4, #4]
 8003f14:	bf08      	it	eq
 8003f16:	6031      	streq	r1, [r6, #0]
 8003f18:	5162      	str	r2, [r4, r5]
 8003f1a:	604b      	str	r3, [r1, #4]
 8003f1c:	4638      	mov	r0, r7
 8003f1e:	f104 060b 	add.w	r6, r4, #11
 8003f22:	f000 fbcb 	bl	80046bc <__malloc_unlock>
 8003f26:	f026 0607 	bic.w	r6, r6, #7
 8003f2a:	1d23      	adds	r3, r4, #4
 8003f2c:	1af2      	subs	r2, r6, r3
 8003f2e:	d0b6      	beq.n	8003e9e <_malloc_r+0x22>
 8003f30:	1b9b      	subs	r3, r3, r6
 8003f32:	50a3      	str	r3, [r4, r2]
 8003f34:	e7b3      	b.n	8003e9e <_malloc_r+0x22>
 8003f36:	6862      	ldr	r2, [r4, #4]
 8003f38:	42a3      	cmp	r3, r4
 8003f3a:	bf0c      	ite	eq
 8003f3c:	6032      	streq	r2, [r6, #0]
 8003f3e:	605a      	strne	r2, [r3, #4]
 8003f40:	e7ec      	b.n	8003f1c <_malloc_r+0xa0>
 8003f42:	4623      	mov	r3, r4
 8003f44:	6864      	ldr	r4, [r4, #4]
 8003f46:	e7b2      	b.n	8003eae <_malloc_r+0x32>
 8003f48:	4634      	mov	r4, r6
 8003f4a:	6876      	ldr	r6, [r6, #4]
 8003f4c:	e7b9      	b.n	8003ec2 <_malloc_r+0x46>
 8003f4e:	230c      	movs	r3, #12
 8003f50:	4638      	mov	r0, r7
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	f000 fbb2 	bl	80046bc <__malloc_unlock>
 8003f58:	e7a1      	b.n	8003e9e <_malloc_r+0x22>
 8003f5a:	6025      	str	r5, [r4, #0]
 8003f5c:	e7de      	b.n	8003f1c <_malloc_r+0xa0>
 8003f5e:	bf00      	nop
 8003f60:	200005d4 	.word	0x200005d4

08003f64 <__sfputc_r>:
 8003f64:	6893      	ldr	r3, [r2, #8]
 8003f66:	b410      	push	{r4}
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	6093      	str	r3, [r2, #8]
 8003f6e:	da07      	bge.n	8003f80 <__sfputc_r+0x1c>
 8003f70:	6994      	ldr	r4, [r2, #24]
 8003f72:	42a3      	cmp	r3, r4
 8003f74:	db01      	blt.n	8003f7a <__sfputc_r+0x16>
 8003f76:	290a      	cmp	r1, #10
 8003f78:	d102      	bne.n	8003f80 <__sfputc_r+0x1c>
 8003f7a:	bc10      	pop	{r4}
 8003f7c:	f7ff bc3a 	b.w	80037f4 <__swbuf_r>
 8003f80:	6813      	ldr	r3, [r2, #0]
 8003f82:	1c58      	adds	r0, r3, #1
 8003f84:	6010      	str	r0, [r2, #0]
 8003f86:	7019      	strb	r1, [r3, #0]
 8003f88:	4608      	mov	r0, r1
 8003f8a:	bc10      	pop	{r4}
 8003f8c:	4770      	bx	lr

08003f8e <__sfputs_r>:
 8003f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f90:	4606      	mov	r6, r0
 8003f92:	460f      	mov	r7, r1
 8003f94:	4614      	mov	r4, r2
 8003f96:	18d5      	adds	r5, r2, r3
 8003f98:	42ac      	cmp	r4, r5
 8003f9a:	d101      	bne.n	8003fa0 <__sfputs_r+0x12>
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	e007      	b.n	8003fb0 <__sfputs_r+0x22>
 8003fa0:	463a      	mov	r2, r7
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa8:	f7ff ffdc 	bl	8003f64 <__sfputc_r>
 8003fac:	1c43      	adds	r3, r0, #1
 8003fae:	d1f3      	bne.n	8003f98 <__sfputs_r+0xa>
 8003fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fb4 <_vfiprintf_r>:
 8003fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb8:	460d      	mov	r5, r1
 8003fba:	4614      	mov	r4, r2
 8003fbc:	4698      	mov	r8, r3
 8003fbe:	4606      	mov	r6, r0
 8003fc0:	b09d      	sub	sp, #116	; 0x74
 8003fc2:	b118      	cbz	r0, 8003fcc <_vfiprintf_r+0x18>
 8003fc4:	6983      	ldr	r3, [r0, #24]
 8003fc6:	b90b      	cbnz	r3, 8003fcc <_vfiprintf_r+0x18>
 8003fc8:	f7ff fdea 	bl	8003ba0 <__sinit>
 8003fcc:	4b89      	ldr	r3, [pc, #548]	; (80041f4 <_vfiprintf_r+0x240>)
 8003fce:	429d      	cmp	r5, r3
 8003fd0:	d11b      	bne.n	800400a <_vfiprintf_r+0x56>
 8003fd2:	6875      	ldr	r5, [r6, #4]
 8003fd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fd6:	07d9      	lsls	r1, r3, #31
 8003fd8:	d405      	bmi.n	8003fe6 <_vfiprintf_r+0x32>
 8003fda:	89ab      	ldrh	r3, [r5, #12]
 8003fdc:	059a      	lsls	r2, r3, #22
 8003fde:	d402      	bmi.n	8003fe6 <_vfiprintf_r+0x32>
 8003fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fe2:	f7ff fe7b 	bl	8003cdc <__retarget_lock_acquire_recursive>
 8003fe6:	89ab      	ldrh	r3, [r5, #12]
 8003fe8:	071b      	lsls	r3, r3, #28
 8003fea:	d501      	bpl.n	8003ff0 <_vfiprintf_r+0x3c>
 8003fec:	692b      	ldr	r3, [r5, #16]
 8003fee:	b9eb      	cbnz	r3, 800402c <_vfiprintf_r+0x78>
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f7ff fc50 	bl	8003898 <__swsetup_r>
 8003ff8:	b1c0      	cbz	r0, 800402c <_vfiprintf_r+0x78>
 8003ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ffc:	07dc      	lsls	r4, r3, #31
 8003ffe:	d50e      	bpl.n	800401e <_vfiprintf_r+0x6a>
 8004000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004004:	b01d      	add	sp, #116	; 0x74
 8004006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800400a:	4b7b      	ldr	r3, [pc, #492]	; (80041f8 <_vfiprintf_r+0x244>)
 800400c:	429d      	cmp	r5, r3
 800400e:	d101      	bne.n	8004014 <_vfiprintf_r+0x60>
 8004010:	68b5      	ldr	r5, [r6, #8]
 8004012:	e7df      	b.n	8003fd4 <_vfiprintf_r+0x20>
 8004014:	4b79      	ldr	r3, [pc, #484]	; (80041fc <_vfiprintf_r+0x248>)
 8004016:	429d      	cmp	r5, r3
 8004018:	bf08      	it	eq
 800401a:	68f5      	ldreq	r5, [r6, #12]
 800401c:	e7da      	b.n	8003fd4 <_vfiprintf_r+0x20>
 800401e:	89ab      	ldrh	r3, [r5, #12]
 8004020:	0598      	lsls	r0, r3, #22
 8004022:	d4ed      	bmi.n	8004000 <_vfiprintf_r+0x4c>
 8004024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004026:	f7ff fe5a 	bl	8003cde <__retarget_lock_release_recursive>
 800402a:	e7e9      	b.n	8004000 <_vfiprintf_r+0x4c>
 800402c:	2300      	movs	r3, #0
 800402e:	9309      	str	r3, [sp, #36]	; 0x24
 8004030:	2320      	movs	r3, #32
 8004032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004036:	2330      	movs	r3, #48	; 0x30
 8004038:	f04f 0901 	mov.w	r9, #1
 800403c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004040:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004200 <_vfiprintf_r+0x24c>
 8004044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004048:	4623      	mov	r3, r4
 800404a:	469a      	mov	sl, r3
 800404c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004050:	b10a      	cbz	r2, 8004056 <_vfiprintf_r+0xa2>
 8004052:	2a25      	cmp	r2, #37	; 0x25
 8004054:	d1f9      	bne.n	800404a <_vfiprintf_r+0x96>
 8004056:	ebba 0b04 	subs.w	fp, sl, r4
 800405a:	d00b      	beq.n	8004074 <_vfiprintf_r+0xc0>
 800405c:	465b      	mov	r3, fp
 800405e:	4622      	mov	r2, r4
 8004060:	4629      	mov	r1, r5
 8004062:	4630      	mov	r0, r6
 8004064:	f7ff ff93 	bl	8003f8e <__sfputs_r>
 8004068:	3001      	adds	r0, #1
 800406a:	f000 80aa 	beq.w	80041c2 <_vfiprintf_r+0x20e>
 800406e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004070:	445a      	add	r2, fp
 8004072:	9209      	str	r2, [sp, #36]	; 0x24
 8004074:	f89a 3000 	ldrb.w	r3, [sl]
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 80a2 	beq.w	80041c2 <_vfiprintf_r+0x20e>
 800407e:	2300      	movs	r3, #0
 8004080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004088:	f10a 0a01 	add.w	sl, sl, #1
 800408c:	9304      	str	r3, [sp, #16]
 800408e:	9307      	str	r3, [sp, #28]
 8004090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004094:	931a      	str	r3, [sp, #104]	; 0x68
 8004096:	4654      	mov	r4, sl
 8004098:	2205      	movs	r2, #5
 800409a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800409e:	4858      	ldr	r0, [pc, #352]	; (8004200 <_vfiprintf_r+0x24c>)
 80040a0:	f000 faf8 	bl	8004694 <memchr>
 80040a4:	9a04      	ldr	r2, [sp, #16]
 80040a6:	b9d8      	cbnz	r0, 80040e0 <_vfiprintf_r+0x12c>
 80040a8:	06d1      	lsls	r1, r2, #27
 80040aa:	bf44      	itt	mi
 80040ac:	2320      	movmi	r3, #32
 80040ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040b2:	0713      	lsls	r3, r2, #28
 80040b4:	bf44      	itt	mi
 80040b6:	232b      	movmi	r3, #43	; 0x2b
 80040b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040bc:	f89a 3000 	ldrb.w	r3, [sl]
 80040c0:	2b2a      	cmp	r3, #42	; 0x2a
 80040c2:	d015      	beq.n	80040f0 <_vfiprintf_r+0x13c>
 80040c4:	4654      	mov	r4, sl
 80040c6:	2000      	movs	r0, #0
 80040c8:	f04f 0c0a 	mov.w	ip, #10
 80040cc:	9a07      	ldr	r2, [sp, #28]
 80040ce:	4621      	mov	r1, r4
 80040d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040d4:	3b30      	subs	r3, #48	; 0x30
 80040d6:	2b09      	cmp	r3, #9
 80040d8:	d94e      	bls.n	8004178 <_vfiprintf_r+0x1c4>
 80040da:	b1b0      	cbz	r0, 800410a <_vfiprintf_r+0x156>
 80040dc:	9207      	str	r2, [sp, #28]
 80040de:	e014      	b.n	800410a <_vfiprintf_r+0x156>
 80040e0:	eba0 0308 	sub.w	r3, r0, r8
 80040e4:	fa09 f303 	lsl.w	r3, r9, r3
 80040e8:	4313      	orrs	r3, r2
 80040ea:	46a2      	mov	sl, r4
 80040ec:	9304      	str	r3, [sp, #16]
 80040ee:	e7d2      	b.n	8004096 <_vfiprintf_r+0xe2>
 80040f0:	9b03      	ldr	r3, [sp, #12]
 80040f2:	1d19      	adds	r1, r3, #4
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	9103      	str	r1, [sp, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bfbb      	ittet	lt
 80040fc:	425b      	neglt	r3, r3
 80040fe:	f042 0202 	orrlt.w	r2, r2, #2
 8004102:	9307      	strge	r3, [sp, #28]
 8004104:	9307      	strlt	r3, [sp, #28]
 8004106:	bfb8      	it	lt
 8004108:	9204      	strlt	r2, [sp, #16]
 800410a:	7823      	ldrb	r3, [r4, #0]
 800410c:	2b2e      	cmp	r3, #46	; 0x2e
 800410e:	d10c      	bne.n	800412a <_vfiprintf_r+0x176>
 8004110:	7863      	ldrb	r3, [r4, #1]
 8004112:	2b2a      	cmp	r3, #42	; 0x2a
 8004114:	d135      	bne.n	8004182 <_vfiprintf_r+0x1ce>
 8004116:	9b03      	ldr	r3, [sp, #12]
 8004118:	3402      	adds	r4, #2
 800411a:	1d1a      	adds	r2, r3, #4
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	9203      	str	r2, [sp, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	bfb8      	it	lt
 8004124:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004128:	9305      	str	r3, [sp, #20]
 800412a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004204 <_vfiprintf_r+0x250>
 800412e:	2203      	movs	r2, #3
 8004130:	4650      	mov	r0, sl
 8004132:	7821      	ldrb	r1, [r4, #0]
 8004134:	f000 faae 	bl	8004694 <memchr>
 8004138:	b140      	cbz	r0, 800414c <_vfiprintf_r+0x198>
 800413a:	2340      	movs	r3, #64	; 0x40
 800413c:	eba0 000a 	sub.w	r0, r0, sl
 8004140:	fa03 f000 	lsl.w	r0, r3, r0
 8004144:	9b04      	ldr	r3, [sp, #16]
 8004146:	3401      	adds	r4, #1
 8004148:	4303      	orrs	r3, r0
 800414a:	9304      	str	r3, [sp, #16]
 800414c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004150:	2206      	movs	r2, #6
 8004152:	482d      	ldr	r0, [pc, #180]	; (8004208 <_vfiprintf_r+0x254>)
 8004154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004158:	f000 fa9c 	bl	8004694 <memchr>
 800415c:	2800      	cmp	r0, #0
 800415e:	d03f      	beq.n	80041e0 <_vfiprintf_r+0x22c>
 8004160:	4b2a      	ldr	r3, [pc, #168]	; (800420c <_vfiprintf_r+0x258>)
 8004162:	bb1b      	cbnz	r3, 80041ac <_vfiprintf_r+0x1f8>
 8004164:	9b03      	ldr	r3, [sp, #12]
 8004166:	3307      	adds	r3, #7
 8004168:	f023 0307 	bic.w	r3, r3, #7
 800416c:	3308      	adds	r3, #8
 800416e:	9303      	str	r3, [sp, #12]
 8004170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004172:	443b      	add	r3, r7
 8004174:	9309      	str	r3, [sp, #36]	; 0x24
 8004176:	e767      	b.n	8004048 <_vfiprintf_r+0x94>
 8004178:	460c      	mov	r4, r1
 800417a:	2001      	movs	r0, #1
 800417c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004180:	e7a5      	b.n	80040ce <_vfiprintf_r+0x11a>
 8004182:	2300      	movs	r3, #0
 8004184:	f04f 0c0a 	mov.w	ip, #10
 8004188:	4619      	mov	r1, r3
 800418a:	3401      	adds	r4, #1
 800418c:	9305      	str	r3, [sp, #20]
 800418e:	4620      	mov	r0, r4
 8004190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004194:	3a30      	subs	r2, #48	; 0x30
 8004196:	2a09      	cmp	r2, #9
 8004198:	d903      	bls.n	80041a2 <_vfiprintf_r+0x1ee>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0c5      	beq.n	800412a <_vfiprintf_r+0x176>
 800419e:	9105      	str	r1, [sp, #20]
 80041a0:	e7c3      	b.n	800412a <_vfiprintf_r+0x176>
 80041a2:	4604      	mov	r4, r0
 80041a4:	2301      	movs	r3, #1
 80041a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80041aa:	e7f0      	b.n	800418e <_vfiprintf_r+0x1da>
 80041ac:	ab03      	add	r3, sp, #12
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	462a      	mov	r2, r5
 80041b2:	4630      	mov	r0, r6
 80041b4:	4b16      	ldr	r3, [pc, #88]	; (8004210 <_vfiprintf_r+0x25c>)
 80041b6:	a904      	add	r1, sp, #16
 80041b8:	f3af 8000 	nop.w
 80041bc:	4607      	mov	r7, r0
 80041be:	1c78      	adds	r0, r7, #1
 80041c0:	d1d6      	bne.n	8004170 <_vfiprintf_r+0x1bc>
 80041c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041c4:	07d9      	lsls	r1, r3, #31
 80041c6:	d405      	bmi.n	80041d4 <_vfiprintf_r+0x220>
 80041c8:	89ab      	ldrh	r3, [r5, #12]
 80041ca:	059a      	lsls	r2, r3, #22
 80041cc:	d402      	bmi.n	80041d4 <_vfiprintf_r+0x220>
 80041ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041d0:	f7ff fd85 	bl	8003cde <__retarget_lock_release_recursive>
 80041d4:	89ab      	ldrh	r3, [r5, #12]
 80041d6:	065b      	lsls	r3, r3, #25
 80041d8:	f53f af12 	bmi.w	8004000 <_vfiprintf_r+0x4c>
 80041dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041de:	e711      	b.n	8004004 <_vfiprintf_r+0x50>
 80041e0:	ab03      	add	r3, sp, #12
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	462a      	mov	r2, r5
 80041e6:	4630      	mov	r0, r6
 80041e8:	4b09      	ldr	r3, [pc, #36]	; (8004210 <_vfiprintf_r+0x25c>)
 80041ea:	a904      	add	r1, sp, #16
 80041ec:	f000 f882 	bl	80042f4 <_printf_i>
 80041f0:	e7e4      	b.n	80041bc <_vfiprintf_r+0x208>
 80041f2:	bf00      	nop
 80041f4:	08005088 	.word	0x08005088
 80041f8:	080050a8 	.word	0x080050a8
 80041fc:	08005068 	.word	0x08005068
 8004200:	080050c8 	.word	0x080050c8
 8004204:	080050ce 	.word	0x080050ce
 8004208:	080050d2 	.word	0x080050d2
 800420c:	00000000 	.word	0x00000000
 8004210:	08003f8f 	.word	0x08003f8f

08004214 <_printf_common>:
 8004214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004218:	4616      	mov	r6, r2
 800421a:	4699      	mov	r9, r3
 800421c:	688a      	ldr	r2, [r1, #8]
 800421e:	690b      	ldr	r3, [r1, #16]
 8004220:	4607      	mov	r7, r0
 8004222:	4293      	cmp	r3, r2
 8004224:	bfb8      	it	lt
 8004226:	4613      	movlt	r3, r2
 8004228:	6033      	str	r3, [r6, #0]
 800422a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800422e:	460c      	mov	r4, r1
 8004230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004234:	b10a      	cbz	r2, 800423a <_printf_common+0x26>
 8004236:	3301      	adds	r3, #1
 8004238:	6033      	str	r3, [r6, #0]
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	0699      	lsls	r1, r3, #26
 800423e:	bf42      	ittt	mi
 8004240:	6833      	ldrmi	r3, [r6, #0]
 8004242:	3302      	addmi	r3, #2
 8004244:	6033      	strmi	r3, [r6, #0]
 8004246:	6825      	ldr	r5, [r4, #0]
 8004248:	f015 0506 	ands.w	r5, r5, #6
 800424c:	d106      	bne.n	800425c <_printf_common+0x48>
 800424e:	f104 0a19 	add.w	sl, r4, #25
 8004252:	68e3      	ldr	r3, [r4, #12]
 8004254:	6832      	ldr	r2, [r6, #0]
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	42ab      	cmp	r3, r5
 800425a:	dc28      	bgt.n	80042ae <_printf_common+0x9a>
 800425c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004260:	1e13      	subs	r3, r2, #0
 8004262:	6822      	ldr	r2, [r4, #0]
 8004264:	bf18      	it	ne
 8004266:	2301      	movne	r3, #1
 8004268:	0692      	lsls	r2, r2, #26
 800426a:	d42d      	bmi.n	80042c8 <_printf_common+0xb4>
 800426c:	4649      	mov	r1, r9
 800426e:	4638      	mov	r0, r7
 8004270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004274:	47c0      	blx	r8
 8004276:	3001      	adds	r0, #1
 8004278:	d020      	beq.n	80042bc <_printf_common+0xa8>
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	68e5      	ldr	r5, [r4, #12]
 800427e:	f003 0306 	and.w	r3, r3, #6
 8004282:	2b04      	cmp	r3, #4
 8004284:	bf18      	it	ne
 8004286:	2500      	movne	r5, #0
 8004288:	6832      	ldr	r2, [r6, #0]
 800428a:	f04f 0600 	mov.w	r6, #0
 800428e:	68a3      	ldr	r3, [r4, #8]
 8004290:	bf08      	it	eq
 8004292:	1aad      	subeq	r5, r5, r2
 8004294:	6922      	ldr	r2, [r4, #16]
 8004296:	bf08      	it	eq
 8004298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800429c:	4293      	cmp	r3, r2
 800429e:	bfc4      	itt	gt
 80042a0:	1a9b      	subgt	r3, r3, r2
 80042a2:	18ed      	addgt	r5, r5, r3
 80042a4:	341a      	adds	r4, #26
 80042a6:	42b5      	cmp	r5, r6
 80042a8:	d11a      	bne.n	80042e0 <_printf_common+0xcc>
 80042aa:	2000      	movs	r0, #0
 80042ac:	e008      	b.n	80042c0 <_printf_common+0xac>
 80042ae:	2301      	movs	r3, #1
 80042b0:	4652      	mov	r2, sl
 80042b2:	4649      	mov	r1, r9
 80042b4:	4638      	mov	r0, r7
 80042b6:	47c0      	blx	r8
 80042b8:	3001      	adds	r0, #1
 80042ba:	d103      	bne.n	80042c4 <_printf_common+0xb0>
 80042bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c4:	3501      	adds	r5, #1
 80042c6:	e7c4      	b.n	8004252 <_printf_common+0x3e>
 80042c8:	2030      	movs	r0, #48	; 0x30
 80042ca:	18e1      	adds	r1, r4, r3
 80042cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042d6:	4422      	add	r2, r4
 80042d8:	3302      	adds	r3, #2
 80042da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042de:	e7c5      	b.n	800426c <_printf_common+0x58>
 80042e0:	2301      	movs	r3, #1
 80042e2:	4622      	mov	r2, r4
 80042e4:	4649      	mov	r1, r9
 80042e6:	4638      	mov	r0, r7
 80042e8:	47c0      	blx	r8
 80042ea:	3001      	adds	r0, #1
 80042ec:	d0e6      	beq.n	80042bc <_printf_common+0xa8>
 80042ee:	3601      	adds	r6, #1
 80042f0:	e7d9      	b.n	80042a6 <_printf_common+0x92>
	...

080042f4 <_printf_i>:
 80042f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042f8:	7e0f      	ldrb	r7, [r1, #24]
 80042fa:	4691      	mov	r9, r2
 80042fc:	2f78      	cmp	r7, #120	; 0x78
 80042fe:	4680      	mov	r8, r0
 8004300:	460c      	mov	r4, r1
 8004302:	469a      	mov	sl, r3
 8004304:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004306:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800430a:	d807      	bhi.n	800431c <_printf_i+0x28>
 800430c:	2f62      	cmp	r7, #98	; 0x62
 800430e:	d80a      	bhi.n	8004326 <_printf_i+0x32>
 8004310:	2f00      	cmp	r7, #0
 8004312:	f000 80d9 	beq.w	80044c8 <_printf_i+0x1d4>
 8004316:	2f58      	cmp	r7, #88	; 0x58
 8004318:	f000 80a4 	beq.w	8004464 <_printf_i+0x170>
 800431c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004324:	e03a      	b.n	800439c <_printf_i+0xa8>
 8004326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800432a:	2b15      	cmp	r3, #21
 800432c:	d8f6      	bhi.n	800431c <_printf_i+0x28>
 800432e:	a101      	add	r1, pc, #4	; (adr r1, 8004334 <_printf_i+0x40>)
 8004330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004334:	0800438d 	.word	0x0800438d
 8004338:	080043a1 	.word	0x080043a1
 800433c:	0800431d 	.word	0x0800431d
 8004340:	0800431d 	.word	0x0800431d
 8004344:	0800431d 	.word	0x0800431d
 8004348:	0800431d 	.word	0x0800431d
 800434c:	080043a1 	.word	0x080043a1
 8004350:	0800431d 	.word	0x0800431d
 8004354:	0800431d 	.word	0x0800431d
 8004358:	0800431d 	.word	0x0800431d
 800435c:	0800431d 	.word	0x0800431d
 8004360:	080044af 	.word	0x080044af
 8004364:	080043d1 	.word	0x080043d1
 8004368:	08004491 	.word	0x08004491
 800436c:	0800431d 	.word	0x0800431d
 8004370:	0800431d 	.word	0x0800431d
 8004374:	080044d1 	.word	0x080044d1
 8004378:	0800431d 	.word	0x0800431d
 800437c:	080043d1 	.word	0x080043d1
 8004380:	0800431d 	.word	0x0800431d
 8004384:	0800431d 	.word	0x0800431d
 8004388:	08004499 	.word	0x08004499
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	1d1a      	adds	r2, r3, #4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	602a      	str	r2, [r5, #0]
 8004394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800439c:	2301      	movs	r3, #1
 800439e:	e0a4      	b.n	80044ea <_printf_i+0x1f6>
 80043a0:	6820      	ldr	r0, [r4, #0]
 80043a2:	6829      	ldr	r1, [r5, #0]
 80043a4:	0606      	lsls	r6, r0, #24
 80043a6:	f101 0304 	add.w	r3, r1, #4
 80043aa:	d50a      	bpl.n	80043c2 <_printf_i+0xce>
 80043ac:	680e      	ldr	r6, [r1, #0]
 80043ae:	602b      	str	r3, [r5, #0]
 80043b0:	2e00      	cmp	r6, #0
 80043b2:	da03      	bge.n	80043bc <_printf_i+0xc8>
 80043b4:	232d      	movs	r3, #45	; 0x2d
 80043b6:	4276      	negs	r6, r6
 80043b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043bc:	230a      	movs	r3, #10
 80043be:	485e      	ldr	r0, [pc, #376]	; (8004538 <_printf_i+0x244>)
 80043c0:	e019      	b.n	80043f6 <_printf_i+0x102>
 80043c2:	680e      	ldr	r6, [r1, #0]
 80043c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043c8:	602b      	str	r3, [r5, #0]
 80043ca:	bf18      	it	ne
 80043cc:	b236      	sxthne	r6, r6
 80043ce:	e7ef      	b.n	80043b0 <_printf_i+0xbc>
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	6820      	ldr	r0, [r4, #0]
 80043d4:	1d19      	adds	r1, r3, #4
 80043d6:	6029      	str	r1, [r5, #0]
 80043d8:	0601      	lsls	r1, r0, #24
 80043da:	d501      	bpl.n	80043e0 <_printf_i+0xec>
 80043dc:	681e      	ldr	r6, [r3, #0]
 80043de:	e002      	b.n	80043e6 <_printf_i+0xf2>
 80043e0:	0646      	lsls	r6, r0, #25
 80043e2:	d5fb      	bpl.n	80043dc <_printf_i+0xe8>
 80043e4:	881e      	ldrh	r6, [r3, #0]
 80043e6:	2f6f      	cmp	r7, #111	; 0x6f
 80043e8:	bf0c      	ite	eq
 80043ea:	2308      	moveq	r3, #8
 80043ec:	230a      	movne	r3, #10
 80043ee:	4852      	ldr	r0, [pc, #328]	; (8004538 <_printf_i+0x244>)
 80043f0:	2100      	movs	r1, #0
 80043f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043f6:	6865      	ldr	r5, [r4, #4]
 80043f8:	2d00      	cmp	r5, #0
 80043fa:	bfa8      	it	ge
 80043fc:	6821      	ldrge	r1, [r4, #0]
 80043fe:	60a5      	str	r5, [r4, #8]
 8004400:	bfa4      	itt	ge
 8004402:	f021 0104 	bicge.w	r1, r1, #4
 8004406:	6021      	strge	r1, [r4, #0]
 8004408:	b90e      	cbnz	r6, 800440e <_printf_i+0x11a>
 800440a:	2d00      	cmp	r5, #0
 800440c:	d04d      	beq.n	80044aa <_printf_i+0x1b6>
 800440e:	4615      	mov	r5, r2
 8004410:	fbb6 f1f3 	udiv	r1, r6, r3
 8004414:	fb03 6711 	mls	r7, r3, r1, r6
 8004418:	5dc7      	ldrb	r7, [r0, r7]
 800441a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800441e:	4637      	mov	r7, r6
 8004420:	42bb      	cmp	r3, r7
 8004422:	460e      	mov	r6, r1
 8004424:	d9f4      	bls.n	8004410 <_printf_i+0x11c>
 8004426:	2b08      	cmp	r3, #8
 8004428:	d10b      	bne.n	8004442 <_printf_i+0x14e>
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	07de      	lsls	r6, r3, #31
 800442e:	d508      	bpl.n	8004442 <_printf_i+0x14e>
 8004430:	6923      	ldr	r3, [r4, #16]
 8004432:	6861      	ldr	r1, [r4, #4]
 8004434:	4299      	cmp	r1, r3
 8004436:	bfde      	ittt	le
 8004438:	2330      	movle	r3, #48	; 0x30
 800443a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800443e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004442:	1b52      	subs	r2, r2, r5
 8004444:	6122      	str	r2, [r4, #16]
 8004446:	464b      	mov	r3, r9
 8004448:	4621      	mov	r1, r4
 800444a:	4640      	mov	r0, r8
 800444c:	f8cd a000 	str.w	sl, [sp]
 8004450:	aa03      	add	r2, sp, #12
 8004452:	f7ff fedf 	bl	8004214 <_printf_common>
 8004456:	3001      	adds	r0, #1
 8004458:	d14c      	bne.n	80044f4 <_printf_i+0x200>
 800445a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800445e:	b004      	add	sp, #16
 8004460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004464:	4834      	ldr	r0, [pc, #208]	; (8004538 <_printf_i+0x244>)
 8004466:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800446a:	6829      	ldr	r1, [r5, #0]
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004472:	6029      	str	r1, [r5, #0]
 8004474:	061d      	lsls	r5, r3, #24
 8004476:	d514      	bpl.n	80044a2 <_printf_i+0x1ae>
 8004478:	07df      	lsls	r7, r3, #31
 800447a:	bf44      	itt	mi
 800447c:	f043 0320 	orrmi.w	r3, r3, #32
 8004480:	6023      	strmi	r3, [r4, #0]
 8004482:	b91e      	cbnz	r6, 800448c <_printf_i+0x198>
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	f023 0320 	bic.w	r3, r3, #32
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	2310      	movs	r3, #16
 800448e:	e7af      	b.n	80043f0 <_printf_i+0xfc>
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	f043 0320 	orr.w	r3, r3, #32
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	2378      	movs	r3, #120	; 0x78
 800449a:	4828      	ldr	r0, [pc, #160]	; (800453c <_printf_i+0x248>)
 800449c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044a0:	e7e3      	b.n	800446a <_printf_i+0x176>
 80044a2:	0659      	lsls	r1, r3, #25
 80044a4:	bf48      	it	mi
 80044a6:	b2b6      	uxthmi	r6, r6
 80044a8:	e7e6      	b.n	8004478 <_printf_i+0x184>
 80044aa:	4615      	mov	r5, r2
 80044ac:	e7bb      	b.n	8004426 <_printf_i+0x132>
 80044ae:	682b      	ldr	r3, [r5, #0]
 80044b0:	6826      	ldr	r6, [r4, #0]
 80044b2:	1d18      	adds	r0, r3, #4
 80044b4:	6961      	ldr	r1, [r4, #20]
 80044b6:	6028      	str	r0, [r5, #0]
 80044b8:	0635      	lsls	r5, r6, #24
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	d501      	bpl.n	80044c2 <_printf_i+0x1ce>
 80044be:	6019      	str	r1, [r3, #0]
 80044c0:	e002      	b.n	80044c8 <_printf_i+0x1d4>
 80044c2:	0670      	lsls	r0, r6, #25
 80044c4:	d5fb      	bpl.n	80044be <_printf_i+0x1ca>
 80044c6:	8019      	strh	r1, [r3, #0]
 80044c8:	2300      	movs	r3, #0
 80044ca:	4615      	mov	r5, r2
 80044cc:	6123      	str	r3, [r4, #16]
 80044ce:	e7ba      	b.n	8004446 <_printf_i+0x152>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	2100      	movs	r1, #0
 80044d4:	1d1a      	adds	r2, r3, #4
 80044d6:	602a      	str	r2, [r5, #0]
 80044d8:	681d      	ldr	r5, [r3, #0]
 80044da:	6862      	ldr	r2, [r4, #4]
 80044dc:	4628      	mov	r0, r5
 80044de:	f000 f8d9 	bl	8004694 <memchr>
 80044e2:	b108      	cbz	r0, 80044e8 <_printf_i+0x1f4>
 80044e4:	1b40      	subs	r0, r0, r5
 80044e6:	6060      	str	r0, [r4, #4]
 80044e8:	6863      	ldr	r3, [r4, #4]
 80044ea:	6123      	str	r3, [r4, #16]
 80044ec:	2300      	movs	r3, #0
 80044ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f2:	e7a8      	b.n	8004446 <_printf_i+0x152>
 80044f4:	462a      	mov	r2, r5
 80044f6:	4649      	mov	r1, r9
 80044f8:	4640      	mov	r0, r8
 80044fa:	6923      	ldr	r3, [r4, #16]
 80044fc:	47d0      	blx	sl
 80044fe:	3001      	adds	r0, #1
 8004500:	d0ab      	beq.n	800445a <_printf_i+0x166>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	079b      	lsls	r3, r3, #30
 8004506:	d413      	bmi.n	8004530 <_printf_i+0x23c>
 8004508:	68e0      	ldr	r0, [r4, #12]
 800450a:	9b03      	ldr	r3, [sp, #12]
 800450c:	4298      	cmp	r0, r3
 800450e:	bfb8      	it	lt
 8004510:	4618      	movlt	r0, r3
 8004512:	e7a4      	b.n	800445e <_printf_i+0x16a>
 8004514:	2301      	movs	r3, #1
 8004516:	4632      	mov	r2, r6
 8004518:	4649      	mov	r1, r9
 800451a:	4640      	mov	r0, r8
 800451c:	47d0      	blx	sl
 800451e:	3001      	adds	r0, #1
 8004520:	d09b      	beq.n	800445a <_printf_i+0x166>
 8004522:	3501      	adds	r5, #1
 8004524:	68e3      	ldr	r3, [r4, #12]
 8004526:	9903      	ldr	r1, [sp, #12]
 8004528:	1a5b      	subs	r3, r3, r1
 800452a:	42ab      	cmp	r3, r5
 800452c:	dcf2      	bgt.n	8004514 <_printf_i+0x220>
 800452e:	e7eb      	b.n	8004508 <_printf_i+0x214>
 8004530:	2500      	movs	r5, #0
 8004532:	f104 0619 	add.w	r6, r4, #25
 8004536:	e7f5      	b.n	8004524 <_printf_i+0x230>
 8004538:	080050d9 	.word	0x080050d9
 800453c:	080050ea 	.word	0x080050ea

08004540 <_sbrk_r>:
 8004540:	b538      	push	{r3, r4, r5, lr}
 8004542:	2300      	movs	r3, #0
 8004544:	4d05      	ldr	r5, [pc, #20]	; (800455c <_sbrk_r+0x1c>)
 8004546:	4604      	mov	r4, r0
 8004548:	4608      	mov	r0, r1
 800454a:	602b      	str	r3, [r5, #0]
 800454c:	f7fc fabe 	bl	8000acc <_sbrk>
 8004550:	1c43      	adds	r3, r0, #1
 8004552:	d102      	bne.n	800455a <_sbrk_r+0x1a>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	b103      	cbz	r3, 800455a <_sbrk_r+0x1a>
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	bd38      	pop	{r3, r4, r5, pc}
 800455c:	200005dc 	.word	0x200005dc

08004560 <__sread>:
 8004560:	b510      	push	{r4, lr}
 8004562:	460c      	mov	r4, r1
 8004564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004568:	f000 f8ae 	bl	80046c8 <_read_r>
 800456c:	2800      	cmp	r0, #0
 800456e:	bfab      	itete	ge
 8004570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004572:	89a3      	ldrhlt	r3, [r4, #12]
 8004574:	181b      	addge	r3, r3, r0
 8004576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800457a:	bfac      	ite	ge
 800457c:	6563      	strge	r3, [r4, #84]	; 0x54
 800457e:	81a3      	strhlt	r3, [r4, #12]
 8004580:	bd10      	pop	{r4, pc}

08004582 <__swrite>:
 8004582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004586:	461f      	mov	r7, r3
 8004588:	898b      	ldrh	r3, [r1, #12]
 800458a:	4605      	mov	r5, r0
 800458c:	05db      	lsls	r3, r3, #23
 800458e:	460c      	mov	r4, r1
 8004590:	4616      	mov	r6, r2
 8004592:	d505      	bpl.n	80045a0 <__swrite+0x1e>
 8004594:	2302      	movs	r3, #2
 8004596:	2200      	movs	r2, #0
 8004598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800459c:	f000 f868 	bl	8004670 <_lseek_r>
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	4632      	mov	r2, r6
 80045a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045a8:	81a3      	strh	r3, [r4, #12]
 80045aa:	4628      	mov	r0, r5
 80045ac:	463b      	mov	r3, r7
 80045ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045b6:	f000 b817 	b.w	80045e8 <_write_r>

080045ba <__sseek>:
 80045ba:	b510      	push	{r4, lr}
 80045bc:	460c      	mov	r4, r1
 80045be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c2:	f000 f855 	bl	8004670 <_lseek_r>
 80045c6:	1c43      	adds	r3, r0, #1
 80045c8:	89a3      	ldrh	r3, [r4, #12]
 80045ca:	bf15      	itete	ne
 80045cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80045ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045d6:	81a3      	strheq	r3, [r4, #12]
 80045d8:	bf18      	it	ne
 80045da:	81a3      	strhne	r3, [r4, #12]
 80045dc:	bd10      	pop	{r4, pc}

080045de <__sclose>:
 80045de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e2:	f000 b813 	b.w	800460c <_close_r>
	...

080045e8 <_write_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4604      	mov	r4, r0
 80045ec:	4608      	mov	r0, r1
 80045ee:	4611      	mov	r1, r2
 80045f0:	2200      	movs	r2, #0
 80045f2:	4d05      	ldr	r5, [pc, #20]	; (8004608 <_write_r+0x20>)
 80045f4:	602a      	str	r2, [r5, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f7fb fdd6 	bl	80001a8 <_write>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_write_r+0x1e>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_write_r+0x1e>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	200005dc 	.word	0x200005dc

0800460c <_close_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	2300      	movs	r3, #0
 8004610:	4d05      	ldr	r5, [pc, #20]	; (8004628 <_close_r+0x1c>)
 8004612:	4604      	mov	r4, r0
 8004614:	4608      	mov	r0, r1
 8004616:	602b      	str	r3, [r5, #0]
 8004618:	f7fc fa27 	bl	8000a6a <_close>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d102      	bne.n	8004626 <_close_r+0x1a>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	b103      	cbz	r3, 8004626 <_close_r+0x1a>
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	200005dc 	.word	0x200005dc

0800462c <_fstat_r>:
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	2300      	movs	r3, #0
 8004630:	4d06      	ldr	r5, [pc, #24]	; (800464c <_fstat_r+0x20>)
 8004632:	4604      	mov	r4, r0
 8004634:	4608      	mov	r0, r1
 8004636:	4611      	mov	r1, r2
 8004638:	602b      	str	r3, [r5, #0]
 800463a:	f7fc fa21 	bl	8000a80 <_fstat>
 800463e:	1c43      	adds	r3, r0, #1
 8004640:	d102      	bne.n	8004648 <_fstat_r+0x1c>
 8004642:	682b      	ldr	r3, [r5, #0]
 8004644:	b103      	cbz	r3, 8004648 <_fstat_r+0x1c>
 8004646:	6023      	str	r3, [r4, #0]
 8004648:	bd38      	pop	{r3, r4, r5, pc}
 800464a:	bf00      	nop
 800464c:	200005dc 	.word	0x200005dc

08004650 <_isatty_r>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	2300      	movs	r3, #0
 8004654:	4d05      	ldr	r5, [pc, #20]	; (800466c <_isatty_r+0x1c>)
 8004656:	4604      	mov	r4, r0
 8004658:	4608      	mov	r0, r1
 800465a:	602b      	str	r3, [r5, #0]
 800465c:	f7fc fa1f 	bl	8000a9e <_isatty>
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	d102      	bne.n	800466a <_isatty_r+0x1a>
 8004664:	682b      	ldr	r3, [r5, #0]
 8004666:	b103      	cbz	r3, 800466a <_isatty_r+0x1a>
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	bd38      	pop	{r3, r4, r5, pc}
 800466c:	200005dc 	.word	0x200005dc

08004670 <_lseek_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	4604      	mov	r4, r0
 8004674:	4608      	mov	r0, r1
 8004676:	4611      	mov	r1, r2
 8004678:	2200      	movs	r2, #0
 800467a:	4d05      	ldr	r5, [pc, #20]	; (8004690 <_lseek_r+0x20>)
 800467c:	602a      	str	r2, [r5, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	f7fc fa17 	bl	8000ab2 <_lseek>
 8004684:	1c43      	adds	r3, r0, #1
 8004686:	d102      	bne.n	800468e <_lseek_r+0x1e>
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	b103      	cbz	r3, 800468e <_lseek_r+0x1e>
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	200005dc 	.word	0x200005dc

08004694 <memchr>:
 8004694:	4603      	mov	r3, r0
 8004696:	b510      	push	{r4, lr}
 8004698:	b2c9      	uxtb	r1, r1
 800469a:	4402      	add	r2, r0
 800469c:	4293      	cmp	r3, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	d101      	bne.n	80046a6 <memchr+0x12>
 80046a2:	2000      	movs	r0, #0
 80046a4:	e003      	b.n	80046ae <memchr+0x1a>
 80046a6:	7804      	ldrb	r4, [r0, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	428c      	cmp	r4, r1
 80046ac:	d1f6      	bne.n	800469c <memchr+0x8>
 80046ae:	bd10      	pop	{r4, pc}

080046b0 <__malloc_lock>:
 80046b0:	4801      	ldr	r0, [pc, #4]	; (80046b8 <__malloc_lock+0x8>)
 80046b2:	f7ff bb13 	b.w	8003cdc <__retarget_lock_acquire_recursive>
 80046b6:	bf00      	nop
 80046b8:	200005d0 	.word	0x200005d0

080046bc <__malloc_unlock>:
 80046bc:	4801      	ldr	r0, [pc, #4]	; (80046c4 <__malloc_unlock+0x8>)
 80046be:	f7ff bb0e 	b.w	8003cde <__retarget_lock_release_recursive>
 80046c2:	bf00      	nop
 80046c4:	200005d0 	.word	0x200005d0

080046c8 <_read_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	4604      	mov	r4, r0
 80046cc:	4608      	mov	r0, r1
 80046ce:	4611      	mov	r1, r2
 80046d0:	2200      	movs	r2, #0
 80046d2:	4d05      	ldr	r5, [pc, #20]	; (80046e8 <_read_r+0x20>)
 80046d4:	602a      	str	r2, [r5, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	f7fc f9aa 	bl	8000a30 <_read>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	d102      	bne.n	80046e6 <_read_r+0x1e>
 80046e0:	682b      	ldr	r3, [r5, #0]
 80046e2:	b103      	cbz	r3, 80046e6 <_read_r+0x1e>
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	bd38      	pop	{r3, r4, r5, pc}
 80046e8:	200005dc 	.word	0x200005dc

080046ec <_init>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	bf00      	nop
 80046f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	469e      	mov	lr, r3
 80046f6:	4770      	bx	lr

080046f8 <_fini>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	bf00      	nop
 80046fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fe:	bc08      	pop	{r3}
 8004700:	469e      	mov	lr, r3
 8004702:	4770      	bx	lr
