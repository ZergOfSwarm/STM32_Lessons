
Interups.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002908  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08002a14  08002a14  00012a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b04  08002b04  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002b04  08002b04  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b04  08002b04  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b04  08002b04  00012b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b08  08002b08  00012b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08002b7c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002b7c  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a923  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad1  00000000  00000000  0002a9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002c490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001842f  00000000  00000000  0002d818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a657  00000000  00000000  00045c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000897e8  00000000  00000000  0005029e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9a86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003168  00000000  00000000  000d9adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080029fc 	.word	0x080029fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080029fc 	.word	0x080029fc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fae1 	bl	8000718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f823 	bl	80001a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f867 	bl	800022c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int n = 10;
 800015e:	230a      	movs	r3, #10
 8000160:	603b      	str	r3, [r7, #0]
  //while (i < 1000)
  for (int i = 0; n; i++)
 8000162:	2300      	movs	r3, #0
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	e010      	b.n	800018a <main+0x3e>
  {
    /* USER CODE END WHILE */
		printf("Hello World! %d \n", i);
 8000168:	6879      	ldr	r1, [r7, #4]
 800016a:	480c      	ldr	r0, [pc, #48]	; (800019c <main+0x50>)
 800016c:	f001 fc70 	bl	8001a50 <iprintf>
		if (i == n) {
 8000170:	687a      	ldr	r2, [r7, #4]
 8000172:	683b      	ldr	r3, [r7, #0]
 8000174:	429a      	cmp	r2, r3
 8000176:	d101      	bne.n	800017c <main+0x30>
			i = 0;
 8000178:	2300      	movs	r3, #0
 800017a:	607b      	str	r3, [r7, #4]
		}
		HAL_Delay(500);
 800017c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000180:	f000 fafc 	bl	800077c <HAL_Delay>
  for (int i = 0; n; i++)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	3301      	adds	r3, #1
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	683b      	ldr	r3, [r7, #0]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d1eb      	bne.n	8000168 <main+0x1c>
 8000190:	2300      	movs	r3, #0
    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}
 8000192:	4618      	mov	r0, r3
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	08002a14 	.word	0x08002a14

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b090      	sub	sp, #64	; 0x40
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0318 	add.w	r3, r7, #24
 80001aa:	2228      	movs	r2, #40	; 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f001 fc46 	bl	8001a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]
 80001c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c2:	2301      	movs	r3, #1
 80001c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d0:	2301      	movs	r3, #1
 80001d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d4:	2302      	movs	r3, #2
 80001d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e4:	f107 0318 	add.w	r3, r7, #24
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 fd7f 	bl	8000cec <HAL_RCC_OscConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001f4:	f000 f8ce 	bl	8000394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f8:	230f      	movs	r3, #15
 80001fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fc:	2302      	movs	r3, #2
 80001fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2102      	movs	r1, #2
 8000212:	4618      	mov	r0, r3
 8000214:	f000 ffea 	bl	80011ec <HAL_RCC_ClockConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800021e:	f000 f8b9 	bl	8000394 <Error_Handler>
  }
}
 8000222:	bf00      	nop
 8000224:	3740      	adds	r7, #64	; 0x40
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b088      	sub	sp, #32
 8000230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000232:	f107 0310 	add.w	r3, r7, #16
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000240:	4b32      	ldr	r3, [pc, #200]	; (800030c <MX_GPIO_Init+0xe0>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	4a31      	ldr	r2, [pc, #196]	; (800030c <MX_GPIO_Init+0xe0>)
 8000246:	f043 0310 	orr.w	r3, r3, #16
 800024a:	6193      	str	r3, [r2, #24]
 800024c:	4b2f      	ldr	r3, [pc, #188]	; (800030c <MX_GPIO_Init+0xe0>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	f003 0310 	and.w	r3, r3, #16
 8000254:	60fb      	str	r3, [r7, #12]
 8000256:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000258:	4b2c      	ldr	r3, [pc, #176]	; (800030c <MX_GPIO_Init+0xe0>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a2b      	ldr	r2, [pc, #172]	; (800030c <MX_GPIO_Init+0xe0>)
 800025e:	f043 0320 	orr.w	r3, r3, #32
 8000262:	6193      	str	r3, [r2, #24]
 8000264:	4b29      	ldr	r3, [pc, #164]	; (800030c <MX_GPIO_Init+0xe0>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	f003 0320 	and.w	r3, r3, #32
 800026c:	60bb      	str	r3, [r7, #8]
 800026e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000270:	4b26      	ldr	r3, [pc, #152]	; (800030c <MX_GPIO_Init+0xe0>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a25      	ldr	r2, [pc, #148]	; (800030c <MX_GPIO_Init+0xe0>)
 8000276:	f043 0304 	orr.w	r3, r3, #4
 800027a:	6193      	str	r3, [r2, #24]
 800027c:	4b23      	ldr	r3, [pc, #140]	; (800030c <MX_GPIO_Init+0xe0>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	f003 0304 	and.w	r3, r3, #4
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000288:	4b20      	ldr	r3, [pc, #128]	; (800030c <MX_GPIO_Init+0xe0>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a1f      	ldr	r2, [pc, #124]	; (800030c <MX_GPIO_Init+0xe0>)
 800028e:	f043 0308 	orr.w	r3, r3, #8
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b1d      	ldr	r3, [pc, #116]	; (800030c <MX_GPIO_Init+0xe0>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0308 	and.w	r3, r3, #8
 800029c:	603b      	str	r3, [r7, #0]
 800029e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a6:	481a      	ldr	r0, [pc, #104]	; (8000310 <MX_GPIO_Init+0xe4>)
 80002a8:	f000 fcf0 	bl	8000c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b2:	2301      	movs	r3, #1
 80002b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ba:	2302      	movs	r3, #2
 80002bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	4619      	mov	r1, r3
 80002c4:	4812      	ldr	r0, [pc, #72]	; (8000310 <MX_GPIO_Init+0xe4>)
 80002c6:	f000 fb5d 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80002ca:	2303      	movs	r3, #3
 80002cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_GPIO_Init+0xe8>)
 80002d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002d2:	2302      	movs	r3, #2
 80002d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d6:	f107 0310 	add.w	r3, r7, #16
 80002da:	4619      	mov	r1, r3
 80002dc:	480e      	ldr	r0, [pc, #56]	; (8000318 <MX_GPIO_Init+0xec>)
 80002de:	f000 fb51 	bl	8000984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2100      	movs	r1, #0
 80002e6:	2006      	movs	r0, #6
 80002e8:	f000 fb21 	bl	800092e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80002ec:	2006      	movs	r0, #6
 80002ee:	f000 fb3a 	bl	8000966 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2100      	movs	r1, #0
 80002f6:	2007      	movs	r0, #7
 80002f8:	f000 fb19 	bl	800092e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80002fc:	2007      	movs	r0, #7
 80002fe:	f000 fb32 	bl	8000966 <HAL_NVIC_EnableIRQ>

}
 8000302:	bf00      	nop
 8000304:	3720      	adds	r7, #32
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000
 8000310:	40011000 	.word	0x40011000
 8000314:	10110000 	.word	0x10110000
 8000318:	40010800 	.word	0x40010800

0800031c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin==BTN1_Pin) {
 8000326:	88fb      	ldrh	r3, [r7, #6]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d109      	bne.n	8000340 <HAL_GPIO_EXTI_Callback+0x24>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000332:	480c      	ldr	r0, [pc, #48]	; (8000364 <HAL_GPIO_EXTI_Callback+0x48>)
 8000334:	f000 fcaa 	bl	8000c8c <HAL_GPIO_WritePin>
    printf("LED is OFF \r\n");
 8000338:	480b      	ldr	r0, [pc, #44]	; (8000368 <HAL_GPIO_EXTI_Callback+0x4c>)
 800033a:	f001 fc0f 	bl	8001b5c <puts>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
    printf("LED is ON \r\n");
  } else{
    __NOP(); //ничего не делаем
  }
}
 800033e:	e00d      	b.n	800035c <HAL_GPIO_EXTI_Callback+0x40>
  } else if(GPIO_Pin==BTN2_Pin) {
 8000340:	88fb      	ldrh	r3, [r7, #6]
 8000342:	2b02      	cmp	r3, #2
 8000344:	d109      	bne.n	800035a <HAL_GPIO_EXTI_Callback+0x3e>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034c:	4805      	ldr	r0, [pc, #20]	; (8000364 <HAL_GPIO_EXTI_Callback+0x48>)
 800034e:	f000 fc9d 	bl	8000c8c <HAL_GPIO_WritePin>
    printf("LED is ON \r\n");
 8000352:	4806      	ldr	r0, [pc, #24]	; (800036c <HAL_GPIO_EXTI_Callback+0x50>)
 8000354:	f001 fc02 	bl	8001b5c <puts>
}
 8000358:	e000      	b.n	800035c <HAL_GPIO_EXTI_Callback+0x40>
    __NOP(); //ничего не делаем
 800035a:	bf00      	nop
}
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40011000 	.word	0x40011000
 8000368:	08002a28 	.word	0x08002a28
 800036c:	08002a38 	.word	0x08002a38

08000370 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d101      	bne.n	8000386 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000382:	f000 f9df 	bl	8000744 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40000800 	.word	0x40000800

08000394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000398:	b672      	cpsid	i
}
 800039a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800039c:	e7fe      	b.n	800039c <Error_Handler+0x8>
	...

080003a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003a6:	4b15      	ldr	r3, [pc, #84]	; (80003fc <HAL_MspInit+0x5c>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a14      	ldr	r2, [pc, #80]	; (80003fc <HAL_MspInit+0x5c>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <HAL_MspInit+0x5c>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <HAL_MspInit+0x5c>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <HAL_MspInit+0x5c>)
 80003c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c8:	61d3      	str	r3, [r2, #28]
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <HAL_MspInit+0x5c>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <HAL_MspInit+0x60>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <HAL_MspInit+0x60>)
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010000 	.word	0x40010000

08000404 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08c      	sub	sp, #48	; 0x30
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000414:	2200      	movs	r2, #0
 8000416:	6879      	ldr	r1, [r7, #4]
 8000418:	201e      	movs	r0, #30
 800041a:	f000 fa88 	bl	800092e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800041e:	201e      	movs	r0, #30
 8000420:	f000 faa1 	bl	8000966 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000424:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <HAL_InitTick+0xa0>)
 8000426:	69db      	ldr	r3, [r3, #28]
 8000428:	4a1e      	ldr	r2, [pc, #120]	; (80004a4 <HAL_InitTick+0xa0>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	61d3      	str	r3, [r2, #28]
 8000430:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <HAL_InitTick+0xa0>)
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800043c:	f107 0210 	add.w	r2, r7, #16
 8000440:	f107 0314 	add.w	r3, r7, #20
 8000444:	4611      	mov	r1, r2
 8000446:	4618      	mov	r0, r3
 8000448:	f001 f838 	bl	80014bc <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800044c:	f001 f822 	bl	8001494 <HAL_RCC_GetPCLK1Freq>
 8000450:	4603      	mov	r3, r0
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000458:	4a13      	ldr	r2, [pc, #76]	; (80004a8 <HAL_InitTick+0xa4>)
 800045a:	fba2 2303 	umull	r2, r3, r2, r3
 800045e:	0c9b      	lsrs	r3, r3, #18
 8000460:	3b01      	subs	r3, #1
 8000462:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <HAL_InitTick+0xa8>)
 8000466:	4a12      	ldr	r2, [pc, #72]	; (80004b0 <HAL_InitTick+0xac>)
 8000468:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <HAL_InitTick+0xa8>)
 800046c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000470:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000472:	4a0e      	ldr	r2, [pc, #56]	; (80004ac <HAL_InitTick+0xa8>)
 8000474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000476:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <HAL_InitTick+0xa8>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <HAL_InitTick+0xa8>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000484:	4809      	ldr	r0, [pc, #36]	; (80004ac <HAL_InitTick+0xa8>)
 8000486:	f001 f867 	bl	8001558 <HAL_TIM_Base_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d104      	bne.n	800049a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000490:	4806      	ldr	r0, [pc, #24]	; (80004ac <HAL_InitTick+0xa8>)
 8000492:	f001 f8b9 	bl	8001608 <HAL_TIM_Base_Start_IT>
 8000496:	4603      	mov	r3, r0
 8000498:	e000      	b.n	800049c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800049a:	2301      	movs	r3, #1
}
 800049c:	4618      	mov	r0, r3
 800049e:	3730      	adds	r7, #48	; 0x30
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40021000 	.word	0x40021000
 80004a8:	431bde83 	.word	0x431bde83
 80004ac:	20000098 	.word	0x20000098
 80004b0:	40000800 	.word	0x40000800

080004b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <NMI_Handler+0x4>

080004ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <HardFault_Handler+0x4>

080004c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <MemManage_Handler+0x4>

080004c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <BusFault_Handler+0x4>

080004cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <UsageFault_Handler+0x4>

080004d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr

080004f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  //HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
	HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000506:	2001      	movs	r0, #1
 8000508:	f000 fbd8 	bl	8000cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  //HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
	HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8000514:	2002      	movs	r0, #2
 8000516:	f000 fbd1 	bl	8000cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <TIM4_IRQHandler+0x10>)
 8000526:	f001 f8c1 	bl	80016ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000098 	.word	0x20000098

08000534 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <ITM_SendChar+0x44>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <ITM_SendChar+0x44>)
 8000544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000548:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <ITM_SendChar+0x48>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a0b      	ldr	r2, [pc, #44]	; (800057c <ITM_SendChar+0x48>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000556:	bf00      	nop
 8000558:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0f8      	beq.n	8000558 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000566:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	6013      	str	r3, [r2, #0]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	e000edfc 	.word	0xe000edfc
 800057c:	e0000e00 	.word	0xe0000e00

08000580 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
 8000590:	e00a      	b.n	80005a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000592:	f3af 8000 	nop.w
 8000596:	4601      	mov	r1, r0
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	60ba      	str	r2, [r7, #8]
 800059e:	b2ca      	uxtb	r2, r1
 80005a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dbf0      	blt.n	8000592 <_read+0x12>
	}

return len;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b086      	sub	sp, #24
 80005be:	af00      	add	r7, sp, #0
 80005c0:	60f8      	str	r0, [r7, #12]
 80005c2:	60b9      	str	r1, [r7, #8]
 80005c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	e009      	b.n	80005e0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++); // И пропишем наш код для printf
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	60ba      	str	r2, [r7, #8]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffad 	bl	8000534 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbf1      	blt.n	80005cc <_write+0x12>
		//LCD_SEND // Если подключен LCD
		//UART_SET // Если подключен UART
	}
	return len;
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_close>:

int _close(int file)
{
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
	return -1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000618:	605a      	str	r2, [r3, #4]
	return 0;
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <_isatty>:

int _isatty(int file)
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
	return 1;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800063a:	b480      	push	{r7}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	60f8      	str	r0, [r7, #12]
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	607a      	str	r2, [r7, #4]
	return 0;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
	...

08000654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800065c:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <_sbrk+0x5c>)
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <_sbrk+0x60>)
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <_sbrk+0x64>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d102      	bne.n	8000676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <_sbrk+0x64>)
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <_sbrk+0x68>)
 8000674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <_sbrk+0x64>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	693a      	ldr	r2, [r7, #16]
 8000680:	429a      	cmp	r2, r3
 8000682:	d207      	bcs.n	8000694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000684:	f001 f9b2 	bl	80019ec <__errno>
 8000688:	4603      	mov	r3, r0
 800068a:	220c      	movs	r2, #12
 800068c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000692:	e009      	b.n	80006a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <_sbrk+0x64>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <_sbrk+0x64>)
 80006a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3718      	adds	r7, #24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20005000 	.word	0x20005000
 80006b4:	00000400 	.word	0x00000400
 80006b8:	2000008c 	.word	0x2000008c
 80006bc:	200000f8 	.word	0x200000f8

080006c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ce:	490d      	ldr	r1, [pc, #52]	; (8000704 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006d0:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006e4:	4c0a      	ldr	r4, [pc, #40]	; (8000710 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006f2:	f7ff ffe5 	bl	80006c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f6:	f001 f97f 	bl	80019f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fa:	f7ff fd27 	bl	800014c <main>
  bx lr
 80006fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000704:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000708:	08002b0c 	.word	0x08002b0c
  ldr r2, =_sbss
 800070c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000710:	200000f4 	.word	0x200000f4

08000714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC1_2_IRQHandler>
	...

08000718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_Init+0x28>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <HAL_Init+0x28>)
 8000722:	f043 0310 	orr.w	r3, r3, #16
 8000726:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f8f5 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072e:	2000      	movs	r0, #0
 8000730:	f7ff fe68 	bl	8000404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000734:	f7ff fe34 	bl	80003a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40022000 	.word	0x40022000

08000744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_IncTick+0x1c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_IncTick+0x20>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4413      	add	r3, r2
 8000754:	4a03      	ldr	r2, [pc, #12]	; (8000764 <HAL_IncTick+0x20>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000008 	.word	0x20000008
 8000764:	200000e0 	.word	0x200000e0

08000768 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;
 800076c:	4b02      	ldr	r3, [pc, #8]	; (8000778 <HAL_GetTick+0x10>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	200000e0 	.word	0x200000e0

0800077c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000784:	f7ff fff0 	bl	8000768 <HAL_GetTick>
 8000788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000794:	d005      	beq.n	80007a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_Delay+0x44>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4413      	add	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007a2:	bf00      	nop
 80007a4:	f7ff ffe0 	bl	8000768 <HAL_GetTick>
 80007a8:	4602      	mov	r2, r0
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d8f7      	bhi.n	80007a4 <HAL_Delay+0x28>
  {
  }
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000008 	.word	0x20000008

080007c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	db0b      	blt.n	8000852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f003 021f 	and.w	r2, r3, #31
 8000840:	4906      	ldr	r1, [pc, #24]	; (800085c <__NVIC_EnableIRQ+0x34>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	095b      	lsrs	r3, r3, #5
 8000848:	2001      	movs	r0, #1
 800084a:	fa00 f202 	lsl.w	r2, r0, r2
 800084e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100

08000860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	db0a      	blt.n	800088a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	490c      	ldr	r1, [pc, #48]	; (80008ac <__NVIC_SetPriority+0x4c>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	440b      	add	r3, r1
 8000884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000888:	e00a      	b.n	80008a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4908      	ldr	r1, [pc, #32]	; (80008b0 <__NVIC_SetPriority+0x50>)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	3b04      	subs	r3, #4
 8000898:	0112      	lsls	r2, r2, #4
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	440b      	add	r3, r1
 800089e:	761a      	strb	r2, [r3, #24]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f1c3 0307 	rsb	r3, r3, #7
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	bf28      	it	cs
 80008d2:	2304      	movcs	r3, #4
 80008d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3304      	adds	r3, #4
 80008da:	2b06      	cmp	r3, #6
 80008dc:	d902      	bls.n	80008e4 <NVIC_EncodePriority+0x30>
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3b03      	subs	r3, #3
 80008e2:	e000      	b.n	80008e6 <NVIC_EncodePriority+0x32>
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43da      	mvns	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	401a      	ands	r2, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43d9      	mvns	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	4313      	orrs	r3, r2
         );
}
 800090e:	4618      	mov	r0, r3
 8000910:	3724      	adds	r7, #36	; 0x24
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff4f 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000940:	f7ff ff64 	bl	800080c <__NVIC_GetPriorityGrouping>
 8000944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	68b9      	ldr	r1, [r7, #8]
 800094a:	6978      	ldr	r0, [r7, #20]
 800094c:	f7ff ffb2 	bl	80008b4 <NVIC_EncodePriority>
 8000950:	4602      	mov	r2, r0
 8000952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff81 	bl	8000860 <__NVIC_SetPriority>
}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff57 	bl	8000828 <__NVIC_EnableIRQ>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000984:	b480      	push	{r7}
 8000986:	b08b      	sub	sp, #44	; 0x2c
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000996:	e169      	b.n	8000c6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000998:	2201      	movs	r2, #1
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	69fa      	ldr	r2, [r7, #28]
 80009a8:	4013      	ands	r3, r2
 80009aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	f040 8158 	bne.w	8000c66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	4a9a      	ldr	r2, [pc, #616]	; (8000c24 <HAL_GPIO_Init+0x2a0>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d05e      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
 80009c0:	4a98      	ldr	r2, [pc, #608]	; (8000c24 <HAL_GPIO_Init+0x2a0>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d875      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009c6:	4a98      	ldr	r2, [pc, #608]	; (8000c28 <HAL_GPIO_Init+0x2a4>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d058      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
 80009cc:	4a96      	ldr	r2, [pc, #600]	; (8000c28 <HAL_GPIO_Init+0x2a4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d86f      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009d2:	4a96      	ldr	r2, [pc, #600]	; (8000c2c <HAL_GPIO_Init+0x2a8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d052      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
 80009d8:	4a94      	ldr	r2, [pc, #592]	; (8000c2c <HAL_GPIO_Init+0x2a8>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d869      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009de:	4a94      	ldr	r2, [pc, #592]	; (8000c30 <HAL_GPIO_Init+0x2ac>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d04c      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
 80009e4:	4a92      	ldr	r2, [pc, #584]	; (8000c30 <HAL_GPIO_Init+0x2ac>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d863      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009ea:	4a92      	ldr	r2, [pc, #584]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d046      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
 80009f0:	4a90      	ldr	r2, [pc, #576]	; (8000c34 <HAL_GPIO_Init+0x2b0>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d85d      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009f6:	2b12      	cmp	r3, #18
 80009f8:	d82a      	bhi.n	8000a50 <HAL_GPIO_Init+0xcc>
 80009fa:	2b12      	cmp	r3, #18
 80009fc:	d859      	bhi.n	8000ab2 <HAL_GPIO_Init+0x12e>
 80009fe:	a201      	add	r2, pc, #4	; (adr r2, 8000a04 <HAL_GPIO_Init+0x80>)
 8000a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a04:	08000a7f 	.word	0x08000a7f
 8000a08:	08000a59 	.word	0x08000a59
 8000a0c:	08000a6b 	.word	0x08000a6b
 8000a10:	08000aad 	.word	0x08000aad
 8000a14:	08000ab3 	.word	0x08000ab3
 8000a18:	08000ab3 	.word	0x08000ab3
 8000a1c:	08000ab3 	.word	0x08000ab3
 8000a20:	08000ab3 	.word	0x08000ab3
 8000a24:	08000ab3 	.word	0x08000ab3
 8000a28:	08000ab3 	.word	0x08000ab3
 8000a2c:	08000ab3 	.word	0x08000ab3
 8000a30:	08000ab3 	.word	0x08000ab3
 8000a34:	08000ab3 	.word	0x08000ab3
 8000a38:	08000ab3 	.word	0x08000ab3
 8000a3c:	08000ab3 	.word	0x08000ab3
 8000a40:	08000ab3 	.word	0x08000ab3
 8000a44:	08000ab3 	.word	0x08000ab3
 8000a48:	08000a61 	.word	0x08000a61
 8000a4c:	08000a75 	.word	0x08000a75
 8000a50:	4a79      	ldr	r2, [pc, #484]	; (8000c38 <HAL_GPIO_Init+0x2b4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d013      	beq.n	8000a7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a56:	e02c      	b.n	8000ab2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	623b      	str	r3, [r7, #32]
          break;
 8000a5e:	e029      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	3304      	adds	r3, #4
 8000a66:	623b      	str	r3, [r7, #32]
          break;
 8000a68:	e024      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	3308      	adds	r3, #8
 8000a70:	623b      	str	r3, [r7, #32]
          break;
 8000a72:	e01f      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	330c      	adds	r3, #12
 8000a7a:	623b      	str	r3, [r7, #32]
          break;
 8000a7c:	e01a      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d102      	bne.n	8000a8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a86:	2304      	movs	r3, #4
 8000a88:	623b      	str	r3, [r7, #32]
          break;
 8000a8a:	e013      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d105      	bne.n	8000aa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a94:	2308      	movs	r3, #8
 8000a96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	69fa      	ldr	r2, [r7, #28]
 8000a9c:	611a      	str	r2, [r3, #16]
          break;
 8000a9e:	e009      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	69fa      	ldr	r2, [r7, #28]
 8000aa8:	615a      	str	r2, [r3, #20]
          break;
 8000aaa:	e003      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
          break;
 8000ab0:	e000      	b.n	8000ab4 <HAL_GPIO_Init+0x130>
          break;
 8000ab2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	2bff      	cmp	r3, #255	; 0xff
 8000ab8:	d801      	bhi.n	8000abe <HAL_GPIO_Init+0x13a>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	e001      	b.n	8000ac2 <HAL_GPIO_Init+0x13e>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	2bff      	cmp	r3, #255	; 0xff
 8000ac8:	d802      	bhi.n	8000ad0 <HAL_GPIO_Init+0x14c>
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	e002      	b.n	8000ad6 <HAL_GPIO_Init+0x152>
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	3b08      	subs	r3, #8
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	210f      	movs	r1, #15
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	6a39      	ldr	r1, [r7, #32]
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	fa01 f303 	lsl.w	r3, r1, r3
 8000af0:	431a      	orrs	r2, r3
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 80b1 	beq.w	8000c66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b04:	4b4d      	ldr	r3, [pc, #308]	; (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a4c      	ldr	r2, [pc, #304]	; (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b4a      	ldr	r3, [pc, #296]	; (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b1c:	4a48      	ldr	r2, [pc, #288]	; (8000c40 <HAL_GPIO_Init+0x2bc>)
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	3302      	adds	r3, #2
 8000b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	220f      	movs	r2, #15
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a40      	ldr	r2, [pc, #256]	; (8000c44 <HAL_GPIO_Init+0x2c0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d013      	beq.n	8000b70 <HAL_GPIO_Init+0x1ec>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a3f      	ldr	r2, [pc, #252]	; (8000c48 <HAL_GPIO_Init+0x2c4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d00d      	beq.n	8000b6c <HAL_GPIO_Init+0x1e8>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a3e      	ldr	r2, [pc, #248]	; (8000c4c <HAL_GPIO_Init+0x2c8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d007      	beq.n	8000b68 <HAL_GPIO_Init+0x1e4>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a3d      	ldr	r2, [pc, #244]	; (8000c50 <HAL_GPIO_Init+0x2cc>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d101      	bne.n	8000b64 <HAL_GPIO_Init+0x1e0>
 8000b60:	2303      	movs	r3, #3
 8000b62:	e006      	b.n	8000b72 <HAL_GPIO_Init+0x1ee>
 8000b64:	2304      	movs	r3, #4
 8000b66:	e004      	b.n	8000b72 <HAL_GPIO_Init+0x1ee>
 8000b68:	2302      	movs	r3, #2
 8000b6a:	e002      	b.n	8000b72 <HAL_GPIO_Init+0x1ee>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e000      	b.n	8000b72 <HAL_GPIO_Init+0x1ee>
 8000b70:	2300      	movs	r3, #0
 8000b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b74:	f002 0203 	and.w	r2, r2, #3
 8000b78:	0092      	lsls	r2, r2, #2
 8000b7a:	4093      	lsls	r3, r2
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b82:	492f      	ldr	r1, [pc, #188]	; (8000c40 <HAL_GPIO_Init+0x2bc>)
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	3302      	adds	r3, #2
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d006      	beq.n	8000baa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	492c      	ldr	r1, [pc, #176]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	600b      	str	r3, [r1, #0]
 8000ba8:	e006      	b.n	8000bb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	4928      	ldr	r1, [pc, #160]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	4922      	ldr	r1, [pc, #136]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	604b      	str	r3, [r1, #4]
 8000bd0:	e006      	b.n	8000be0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bd2:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	491e      	ldr	r1, [pc, #120]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bdc:	4013      	ands	r3, r2
 8000bde:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d006      	beq.n	8000bfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bec:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	4918      	ldr	r1, [pc, #96]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	608b      	str	r3, [r1, #8]
 8000bf8:	e006      	b.n	8000c08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	4914      	ldr	r1, [pc, #80]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d021      	beq.n	8000c58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	490e      	ldr	r1, [pc, #56]	; (8000c54 <HAL_GPIO_Init+0x2d0>)
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	60cb      	str	r3, [r1, #12]
 8000c20:	e021      	b.n	8000c66 <HAL_GPIO_Init+0x2e2>
 8000c22:	bf00      	nop
 8000c24:	10320000 	.word	0x10320000
 8000c28:	10310000 	.word	0x10310000
 8000c2c:	10220000 	.word	0x10220000
 8000c30:	10210000 	.word	0x10210000
 8000c34:	10120000 	.word	0x10120000
 8000c38:	10110000 	.word	0x10110000
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010000 	.word	0x40010000
 8000c44:	40010800 	.word	0x40010800
 8000c48:	40010c00 	.word	0x40010c00
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	40011400 	.word	0x40011400
 8000c54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_GPIO_Init+0x304>)
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	4909      	ldr	r1, [pc, #36]	; (8000c88 <HAL_GPIO_Init+0x304>)
 8000c62:	4013      	ands	r3, r2
 8000c64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	3301      	adds	r3, #1
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	fa22 f303 	lsr.w	r3, r2, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f47f ae8e 	bne.w	8000998 <HAL_GPIO_Init+0x14>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	372c      	adds	r7, #44	; 0x2c
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	40010400 	.word	0x40010400

08000c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	807b      	strh	r3, [r7, #2]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c9c:	787b      	ldrb	r3, [r7, #1]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ca2:	887a      	ldrh	r2, [r7, #2]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ca8:	e003      	b.n	8000cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000caa:	887b      	ldrh	r3, [r7, #2]
 8000cac:	041a      	lsls	r2, r3, #16
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	611a      	str	r2, [r3, #16]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cc8:	695a      	ldr	r2, [r3, #20]
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d006      	beq.n	8000ce0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fb1e 	bl	800031c <HAL_GPIO_EXTI_Callback>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40010400 	.word	0x40010400

08000cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e26c      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 8087 	beq.w	8000e1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d0c:	4b92      	ldr	r3, [pc, #584]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	2b04      	cmp	r3, #4
 8000d16:	d00c      	beq.n	8000d32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d18:	4b8f      	ldr	r3, [pc, #572]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 030c 	and.w	r3, r3, #12
 8000d20:	2b08      	cmp	r3, #8
 8000d22:	d112      	bne.n	8000d4a <HAL_RCC_OscConfig+0x5e>
 8000d24:	4b8c      	ldr	r3, [pc, #560]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d30:	d10b      	bne.n	8000d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d32:	4b89      	ldr	r3, [pc, #548]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d06c      	beq.n	8000e18 <HAL_RCC_OscConfig+0x12c>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d168      	bne.n	8000e18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e246      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d52:	d106      	bne.n	8000d62 <HAL_RCC_OscConfig+0x76>
 8000d54:	4b80      	ldr	r3, [pc, #512]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a7f      	ldr	r2, [pc, #508]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e02e      	b.n	8000dc0 <HAL_RCC_OscConfig+0xd4>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10c      	bne.n	8000d84 <HAL_RCC_OscConfig+0x98>
 8000d6a:	4b7b      	ldr	r3, [pc, #492]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a7a      	ldr	r2, [pc, #488]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b78      	ldr	r3, [pc, #480]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a77      	ldr	r2, [pc, #476]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e01d      	b.n	8000dc0 <HAL_RCC_OscConfig+0xd4>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d8c:	d10c      	bne.n	8000da8 <HAL_RCC_OscConfig+0xbc>
 8000d8e:	4b72      	ldr	r3, [pc, #456]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a71      	ldr	r2, [pc, #452]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	4b6f      	ldr	r3, [pc, #444]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a6e      	ldr	r2, [pc, #440]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	e00b      	b.n	8000dc0 <HAL_RCC_OscConfig+0xd4>
 8000da8:	4b6b      	ldr	r3, [pc, #428]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a6a      	ldr	r2, [pc, #424]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b68      	ldr	r3, [pc, #416]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a67      	ldr	r2, [pc, #412]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d013      	beq.n	8000df0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc8:	f7ff fcce 	bl	8000768 <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd0:	f7ff fcca 	bl	8000768 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b64      	cmp	r3, #100	; 0x64
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e1fa      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de2:	4b5d      	ldr	r3, [pc, #372]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0xe4>
 8000dee:	e014      	b.n	8000e1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fcba 	bl	8000768 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df8:	f7ff fcb6 	bl	8000768 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b64      	cmp	r3, #100	; 0x64
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e1e6      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e0a:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f0      	bne.n	8000df8 <HAL_RCC_OscConfig+0x10c>
 8000e16:	e000      	b.n	8000e1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d063      	beq.n	8000eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e26:	4b4c      	ldr	r3, [pc, #304]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 030c 	and.w	r3, r3, #12
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00b      	beq.n	8000e4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e32:	4b49      	ldr	r3, [pc, #292]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 030c 	and.w	r3, r3, #12
 8000e3a:	2b08      	cmp	r3, #8
 8000e3c:	d11c      	bne.n	8000e78 <HAL_RCC_OscConfig+0x18c>
 8000e3e:	4b46      	ldr	r3, [pc, #280]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d116      	bne.n	8000e78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4a:	4b43      	ldr	r3, [pc, #268]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d005      	beq.n	8000e62 <HAL_RCC_OscConfig+0x176>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d001      	beq.n	8000e62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e1ba      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e62:	4b3d      	ldr	r3, [pc, #244]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	4939      	ldr	r1, [pc, #228]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000e72:	4313      	orrs	r3, r2
 8000e74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e76:	e03a      	b.n	8000eee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d020      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e80:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e86:	f7ff fc6f 	bl	8000768 <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e8c:	e008      	b.n	8000ea0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e8e:	f7ff fc6b 	bl	8000768 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e19b      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f0      	beq.n	8000e8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eac:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	4927      	ldr	r1, [pc, #156]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	600b      	str	r3, [r1, #0]
 8000ec0:	e015      	b.n	8000eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <HAL_RCC_OscConfig+0x270>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fc4e 	bl	8000768 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fc4a 	bl	8000768 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e17a      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f0      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d03a      	beq.n	8000f70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d019      	beq.n	8000f36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_RCC_OscConfig+0x274>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f08:	f7ff fc2e 	bl	8000768 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f10:	f7ff fc2a 	bl	8000768 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e15a      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f0      	beq.n	8000f10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f000 faf4 	bl	800151c <RCC_Delay>
 8000f34:	e01c      	b.n	8000f70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_RCC_OscConfig+0x274>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3c:	f7ff fc14 	bl	8000768 <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f42:	e00f      	b.n	8000f64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f44:	f7ff fc10 	bl	8000768 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d908      	bls.n	8000f64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e140      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	42420000 	.word	0x42420000
 8000f60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f64:	4b9e      	ldr	r3, [pc, #632]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1e9      	bne.n	8000f44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 80a6 	beq.w	80010ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f82:	4b97      	ldr	r3, [pc, #604]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10d      	bne.n	8000faa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	4b94      	ldr	r3, [pc, #592]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a93      	ldr	r2, [pc, #588]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b91      	ldr	r3, [pc, #580]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000faa:	4b8e      	ldr	r3, [pc, #568]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d118      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fb6:	4b8b      	ldr	r3, [pc, #556]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a8a      	ldr	r2, [pc, #552]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8000fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fc2:	f7ff fbd1 	bl	8000768 <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fca:	f7ff fbcd 	bl	8000768 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b64      	cmp	r3, #100	; 0x64
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e0fd      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fdc:	4b81      	ldr	r3, [pc, #516]	; (80011e4 <HAL_RCC_OscConfig+0x4f8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0f0      	beq.n	8000fca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d106      	bne.n	8000ffe <HAL_RCC_OscConfig+0x312>
 8000ff0:	4b7b      	ldr	r3, [pc, #492]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	4a7a      	ldr	r2, [pc, #488]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6213      	str	r3, [r2, #32]
 8000ffc:	e02d      	b.n	800105a <HAL_RCC_OscConfig+0x36e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10c      	bne.n	8001020 <HAL_RCC_OscConfig+0x334>
 8001006:	4b76      	ldr	r3, [pc, #472]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	4a75      	ldr	r2, [pc, #468]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 800100c:	f023 0301 	bic.w	r3, r3, #1
 8001010:	6213      	str	r3, [r2, #32]
 8001012:	4b73      	ldr	r3, [pc, #460]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	4a72      	ldr	r2, [pc, #456]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	f023 0304 	bic.w	r3, r3, #4
 800101c:	6213      	str	r3, [r2, #32]
 800101e:	e01c      	b.n	800105a <HAL_RCC_OscConfig+0x36e>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	2b05      	cmp	r3, #5
 8001026:	d10c      	bne.n	8001042 <HAL_RCC_OscConfig+0x356>
 8001028:	4b6d      	ldr	r3, [pc, #436]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	4a6c      	ldr	r2, [pc, #432]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	6213      	str	r3, [r2, #32]
 8001034:	4b6a      	ldr	r3, [pc, #424]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	4a69      	ldr	r2, [pc, #420]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6213      	str	r3, [r2, #32]
 8001040:	e00b      	b.n	800105a <HAL_RCC_OscConfig+0x36e>
 8001042:	4b67      	ldr	r3, [pc, #412]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	4a66      	ldr	r2, [pc, #408]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8001048:	f023 0301 	bic.w	r3, r3, #1
 800104c:	6213      	str	r3, [r2, #32]
 800104e:	4b64      	ldr	r3, [pc, #400]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	4a63      	ldr	r2, [pc, #396]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8001054:	f023 0304 	bic.w	r3, r3, #4
 8001058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d015      	beq.n	800108e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001062:	f7ff fb81 	bl	8000768 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001068:	e00a      	b.n	8001080 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106a:	f7ff fb7d 	bl	8000768 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	f241 3288 	movw	r2, #5000	; 0x1388
 8001078:	4293      	cmp	r3, r2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e0ab      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001080:	4b57      	ldr	r3, [pc, #348]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0ee      	beq.n	800106a <HAL_RCC_OscConfig+0x37e>
 800108c:	e014      	b.n	80010b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108e:	f7ff fb6b 	bl	8000768 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001094:	e00a      	b.n	80010ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001096:	f7ff fb67 	bl	8000768 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e095      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ac:	4b4c      	ldr	r3, [pc, #304]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1ee      	bne.n	8001096 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d105      	bne.n	80010ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a47      	ldr	r2, [pc, #284]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 80010c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 8081 	beq.w	80011d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010d4:	4b42      	ldr	r3, [pc, #264]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 030c 	and.w	r3, r3, #12
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d061      	beq.n	80011a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d146      	bne.n	8001176 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e8:	4b3f      	ldr	r3, [pc, #252]	; (80011e8 <HAL_RCC_OscConfig+0x4fc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ee:	f7ff fb3b 	bl	8000768 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f6:	f7ff fb37 	bl	8000768 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e067      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001108:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f0      	bne.n	80010f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111c:	d108      	bne.n	8001130 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800111e:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	492d      	ldr	r1, [pc, #180]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001130:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a19      	ldr	r1, [r3, #32]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	430b      	orrs	r3, r1
 8001142:	4927      	ldr	r1, [pc, #156]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8001144:	4313      	orrs	r3, r2
 8001146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <HAL_RCC_OscConfig+0x4fc>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff fb0b 	bl	8000768 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001156:	f7ff fb07 	bl	8000768 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e037      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x46a>
 8001174:	e02f      	b.n	80011d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_RCC_OscConfig+0x4fc>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff faf4 	bl	8000768 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001184:	f7ff faf0 	bl	8000768 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e020      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x498>
 80011a2:	e018      	b.n	80011d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d101      	bne.n	80011b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e013      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_RCC_OscConfig+0x4f4>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d106      	bne.n	80011d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d001      	beq.n	80011d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40007000 	.word	0x40007000
 80011e8:	42420060 	.word	0x42420060

080011ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e0d0      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001200:	4b6a      	ldr	r3, [pc, #424]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d910      	bls.n	8001230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120e:	4b67      	ldr	r3, [pc, #412]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 0207 	bic.w	r2, r3, #7
 8001216:	4965      	ldr	r1, [pc, #404]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121e:	4b63      	ldr	r3, [pc, #396]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d001      	beq.n	8001230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e0b8      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d020      	beq.n	800127e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001248:	4b59      	ldr	r3, [pc, #356]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4a58      	ldr	r2, [pc, #352]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001260:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a52      	ldr	r2, [pc, #328]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800126a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800126c:	4b50      	ldr	r3, [pc, #320]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	494d      	ldr	r1, [pc, #308]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	4313      	orrs	r3, r2
 800127c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d040      	beq.n	800130c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d115      	bne.n	80012ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e07f      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d107      	bne.n	80012ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012aa:	4b41      	ldr	r3, [pc, #260]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d109      	bne.n	80012ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e073      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ba:	4b3d      	ldr	r3, [pc, #244]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e06b      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ca:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f023 0203 	bic.w	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4936      	ldr	r1, [pc, #216]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012dc:	f7ff fa44 	bl	8000768 <HAL_GetTick>
 80012e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e2:	e00a      	b.n	80012fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e4:	f7ff fa40 	bl	8000768 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e053      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fa:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 020c 	and.w	r2, r3, #12
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	429a      	cmp	r2, r3
 800130a:	d1eb      	bne.n	80012e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d210      	bcs.n	800133c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 0207 	bic.w	r2, r3, #7
 8001322:	4922      	ldr	r1, [pc, #136]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	4313      	orrs	r3, r2
 8001328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d001      	beq.n	800133c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e032      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	d008      	beq.n	800135a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	4916      	ldr	r1, [pc, #88]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	4313      	orrs	r3, r2
 8001358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d009      	beq.n	800137a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	490e      	ldr	r1, [pc, #56]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800137a:	f000 f821 	bl	80013c0 <HAL_RCC_GetSysClockFreq>
 800137e:	4602      	mov	r2, r0
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	490a      	ldr	r1, [pc, #40]	; (80013b4 <HAL_RCC_ClockConfig+0x1c8>)
 800138c:	5ccb      	ldrb	r3, [r1, r3]
 800138e:	fa22 f303 	lsr.w	r3, r2, r3
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_RCC_ClockConfig+0x1d0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f832 	bl	8000404 <HAL_InitTick>

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40022000 	.word	0x40022000
 80013b0:	40021000 	.word	0x40021000
 80013b4:	08002a54 	.word	0x08002a54
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000004 	.word	0x20000004

080013c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013c0:	b490      	push	{r4, r7}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013c8:	1d3c      	adds	r4, r7, #4
 80013ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013d0:	f240 2301 	movw	r3, #513	; 0x201
 80013d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	d002      	beq.n	8001400 <HAL_RCC_GetSysClockFreq+0x40>
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d003      	beq.n	8001406 <HAL_RCC_GetSysClockFreq+0x46>
 80013fe:	e02d      	b.n	800145c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001402:	623b      	str	r3, [r7, #32]
      break;
 8001404:	e02d      	b.n	8001462 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	0c9b      	lsrs	r3, r3, #18
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001412:	4413      	add	r3, r2
 8001414:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001418:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d013      	beq.n	800144c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	0c5b      	lsrs	r3, r3, #17
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001432:	4413      	add	r3, r2
 8001434:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001438:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_RCC_GetSysClockFreq+0xb8>)
 800143e:	fb02 f203 	mul.w	r2, r2, r3
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	fbb2 f3f3 	udiv	r3, r2, r3
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
 800144a:	e004      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001450:	fb02 f303 	mul.w	r3, r2, r3
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	623b      	str	r3, [r7, #32]
      break;
 800145a:	e002      	b.n	8001462 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_RCC_GetSysClockFreq+0xb8>)
 800145e:	623b      	str	r3, [r7, #32]
      break;
 8001460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001462:	6a3b      	ldr	r3, [r7, #32]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bc90      	pop	{r4, r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	08002a44 	.word	0x08002a44
 8001474:	40021000 	.word	0x40021000
 8001478:	007a1200 	.word	0x007a1200
 800147c:	003d0900 	.word	0x003d0900

08001480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001484:	4b02      	ldr	r3, [pc, #8]	; (8001490 <HAL_RCC_GetHCLKFreq+0x10>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	20000000 	.word	0x20000000

08001494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001498:	f7ff fff2 	bl	8001480 <HAL_RCC_GetHCLKFreq>
 800149c:	4602      	mov	r2, r0
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	4903      	ldr	r1, [pc, #12]	; (80014b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014aa:	5ccb      	ldrb	r3, [r1, r3]
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000
 80014b8:	08002a64 	.word	0x08002a64

080014bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	220f      	movs	r2, #15
 80014ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_RCC_GetClockConfig+0x58>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0203 	and.w	r2, r3, #3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_RCC_GetClockConfig+0x58>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_RCC_GetClockConfig+0x58>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_RCC_GetClockConfig+0x58>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	08db      	lsrs	r3, r3, #3
 80014f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_RCC_GetClockConfig+0x5c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0207 	and.w	r2, r3, #7
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	40021000 	.word	0x40021000
 8001518:	40022000 	.word	0x40022000

0800151c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <RCC_Delay+0x34>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <RCC_Delay+0x38>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	0a5b      	lsrs	r3, r3, #9
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001538:	bf00      	nop
  }
  while (Delay --);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1e5a      	subs	r2, r3, #1
 800153e:	60fa      	str	r2, [r7, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f9      	bne.n	8001538 <RCC_Delay+0x1c>
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	20000000 	.word	0x20000000
 8001554:	10624dd3 	.word	0x10624dd3

08001558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e041      	b.n	80015ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f839 	bl	80015f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2202      	movs	r2, #2
 8001588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3304      	adds	r3, #4
 8001594:	4619      	mov	r1, r3
 8001596:	4610      	mov	r0, r2
 8001598:	f000 f9b4 	bl	8001904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b01      	cmp	r3, #1
 800161a:	d001      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e03a      	b.n	8001696 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2202      	movs	r2, #2
 8001624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <HAL_TIM_Base_Start_IT+0x98>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00e      	beq.n	8001660 <HAL_TIM_Base_Start_IT+0x58>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800164a:	d009      	beq.n	8001660 <HAL_TIM_Base_Start_IT+0x58>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d004      	beq.n	8001660 <HAL_TIM_Base_Start_IT+0x58>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d111      	bne.n	8001684 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b06      	cmp	r3, #6
 8001670:	d010      	beq.n	8001694 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 0201 	orr.w	r2, r2, #1
 8001680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001682:	e007      	b.n	8001694 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	40012c00 	.word	0x40012c00
 80016a4:	40000400 	.word	0x40000400
 80016a8:	40000800 	.word	0x40000800

080016ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d122      	bne.n	8001708 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d11b      	bne.n	8001708 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f06f 0202 	mvn.w	r2, #2
 80016d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f8ed 	bl	80018ce <HAL_TIM_IC_CaptureCallback>
 80016f4:	e005      	b.n	8001702 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f8e0 	bl	80018bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f8ef 	bl	80018e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b04      	cmp	r3, #4
 8001714:	d122      	bne.n	800175c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b04      	cmp	r3, #4
 8001722:	d11b      	bne.n	800175c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f06f 0204 	mvn.w	r2, #4
 800172c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2202      	movs	r2, #2
 8001732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f8c3 	bl	80018ce <HAL_TIM_IC_CaptureCallback>
 8001748:	e005      	b.n	8001756 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f8b6 	bl	80018bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f8c5 	bl	80018e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b08      	cmp	r3, #8
 8001768:	d122      	bne.n	80017b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b08      	cmp	r3, #8
 8001776:	d11b      	bne.n	80017b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f06f 0208 	mvn.w	r2, #8
 8001780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2204      	movs	r2, #4
 8001786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f899 	bl	80018ce <HAL_TIM_IC_CaptureCallback>
 800179c:	e005      	b.n	80017aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f88c 	bl	80018bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f89b 	bl	80018e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b10      	cmp	r3, #16
 80017bc:	d122      	bne.n	8001804 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	2b10      	cmp	r3, #16
 80017ca:	d11b      	bne.n	8001804 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f06f 0210 	mvn.w	r2, #16
 80017d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2208      	movs	r2, #8
 80017da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f86f 	bl	80018ce <HAL_TIM_IC_CaptureCallback>
 80017f0:	e005      	b.n	80017fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f862 	bl	80018bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f871 	bl	80018e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b01      	cmp	r3, #1
 8001810:	d10e      	bne.n	8001830 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b01      	cmp	r3, #1
 800181e:	d107      	bne.n	8001830 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f06f 0201 	mvn.w	r2, #1
 8001828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7fe fda0 	bl	8000370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183a:	2b80      	cmp	r3, #128	; 0x80
 800183c:	d10e      	bne.n	800185c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001848:	2b80      	cmp	r3, #128	; 0x80
 800184a:	d107      	bne.n	800185c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f8bf 	bl	80019da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001866:	2b40      	cmp	r3, #64	; 0x40
 8001868:	d10e      	bne.n	8001888 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001874:	2b40      	cmp	r3, #64	; 0x40
 8001876:	d107      	bne.n	8001888 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f835 	bl	80018f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	2b20      	cmp	r3, #32
 8001894:	d10e      	bne.n	80018b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b20      	cmp	r3, #32
 80018a2:	d107      	bne.n	80018b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f06f 0220 	mvn.w	r2, #32
 80018ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f88a 	bl	80019c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a29      	ldr	r2, [pc, #164]	; (80019bc <TIM_Base_SetConfig+0xb8>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d00b      	beq.n	8001934 <TIM_Base_SetConfig+0x30>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001922:	d007      	beq.n	8001934 <TIM_Base_SetConfig+0x30>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a26      	ldr	r2, [pc, #152]	; (80019c0 <TIM_Base_SetConfig+0xbc>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d003      	beq.n	8001934 <TIM_Base_SetConfig+0x30>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <TIM_Base_SetConfig+0xc0>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d108      	bne.n	8001946 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800193a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <TIM_Base_SetConfig+0xb8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00b      	beq.n	8001966 <TIM_Base_SetConfig+0x62>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001954:	d007      	beq.n	8001966 <TIM_Base_SetConfig+0x62>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <TIM_Base_SetConfig+0xbc>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d003      	beq.n	8001966 <TIM_Base_SetConfig+0x62>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <TIM_Base_SetConfig+0xc0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d108      	bne.n	8001978 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800196c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	4313      	orrs	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a07      	ldr	r2, [pc, #28]	; (80019bc <TIM_Base_SetConfig+0xb8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d103      	bne.n	80019ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	615a      	str	r2, [r3, #20]
}
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	40012c00 	.word	0x40012c00
 80019c0:	40000400 	.word	0x40000400
 80019c4:	40000800 	.word	0x40000800

080019c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <__errno>:
 80019ec:	4b01      	ldr	r3, [pc, #4]	; (80019f4 <__errno+0x8>)
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	2000000c 	.word	0x2000000c

080019f8 <__libc_init_array>:
 80019f8:	b570      	push	{r4, r5, r6, lr}
 80019fa:	2600      	movs	r6, #0
 80019fc:	4d0c      	ldr	r5, [pc, #48]	; (8001a30 <__libc_init_array+0x38>)
 80019fe:	4c0d      	ldr	r4, [pc, #52]	; (8001a34 <__libc_init_array+0x3c>)
 8001a00:	1b64      	subs	r4, r4, r5
 8001a02:	10a4      	asrs	r4, r4, #2
 8001a04:	42a6      	cmp	r6, r4
 8001a06:	d109      	bne.n	8001a1c <__libc_init_array+0x24>
 8001a08:	f000 fff8 	bl	80029fc <_init>
 8001a0c:	2600      	movs	r6, #0
 8001a0e:	4d0a      	ldr	r5, [pc, #40]	; (8001a38 <__libc_init_array+0x40>)
 8001a10:	4c0a      	ldr	r4, [pc, #40]	; (8001a3c <__libc_init_array+0x44>)
 8001a12:	1b64      	subs	r4, r4, r5
 8001a14:	10a4      	asrs	r4, r4, #2
 8001a16:	42a6      	cmp	r6, r4
 8001a18:	d105      	bne.n	8001a26 <__libc_init_array+0x2e>
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
 8001a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a20:	4798      	blx	r3
 8001a22:	3601      	adds	r6, #1
 8001a24:	e7ee      	b.n	8001a04 <__libc_init_array+0xc>
 8001a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a2a:	4798      	blx	r3
 8001a2c:	3601      	adds	r6, #1
 8001a2e:	e7f2      	b.n	8001a16 <__libc_init_array+0x1e>
 8001a30:	08002b04 	.word	0x08002b04
 8001a34:	08002b04 	.word	0x08002b04
 8001a38:	08002b04 	.word	0x08002b04
 8001a3c:	08002b08 	.word	0x08002b08

08001a40 <memset>:
 8001a40:	4603      	mov	r3, r0
 8001a42:	4402      	add	r2, r0
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d100      	bne.n	8001a4a <memset+0xa>
 8001a48:	4770      	bx	lr
 8001a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8001a4e:	e7f9      	b.n	8001a44 <memset+0x4>

08001a50 <iprintf>:
 8001a50:	b40f      	push	{r0, r1, r2, r3}
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <iprintf+0x2c>)
 8001a54:	b513      	push	{r0, r1, r4, lr}
 8001a56:	681c      	ldr	r4, [r3, #0]
 8001a58:	b124      	cbz	r4, 8001a64 <iprintf+0x14>
 8001a5a:	69a3      	ldr	r3, [r4, #24]
 8001a5c:	b913      	cbnz	r3, 8001a64 <iprintf+0x14>
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f000 fa5e 	bl	8001f20 <__sinit>
 8001a64:	ab05      	add	r3, sp, #20
 8001a66:	4620      	mov	r0, r4
 8001a68:	9a04      	ldr	r2, [sp, #16]
 8001a6a:	68a1      	ldr	r1, [r4, #8]
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	f000 fc29 	bl	80022c4 <_vfiprintf_r>
 8001a72:	b002      	add	sp, #8
 8001a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a78:	b004      	add	sp, #16
 8001a7a:	4770      	bx	lr
 8001a7c:	2000000c 	.word	0x2000000c

08001a80 <_puts_r>:
 8001a80:	b570      	push	{r4, r5, r6, lr}
 8001a82:	460e      	mov	r6, r1
 8001a84:	4605      	mov	r5, r0
 8001a86:	b118      	cbz	r0, 8001a90 <_puts_r+0x10>
 8001a88:	6983      	ldr	r3, [r0, #24]
 8001a8a:	b90b      	cbnz	r3, 8001a90 <_puts_r+0x10>
 8001a8c:	f000 fa48 	bl	8001f20 <__sinit>
 8001a90:	69ab      	ldr	r3, [r5, #24]
 8001a92:	68ac      	ldr	r4, [r5, #8]
 8001a94:	b913      	cbnz	r3, 8001a9c <_puts_r+0x1c>
 8001a96:	4628      	mov	r0, r5
 8001a98:	f000 fa42 	bl	8001f20 <__sinit>
 8001a9c:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <_puts_r+0xd0>)
 8001a9e:	429c      	cmp	r4, r3
 8001aa0:	d120      	bne.n	8001ae4 <_puts_r+0x64>
 8001aa2:	686c      	ldr	r4, [r5, #4]
 8001aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001aa6:	07db      	lsls	r3, r3, #31
 8001aa8:	d405      	bmi.n	8001ab6 <_puts_r+0x36>
 8001aaa:	89a3      	ldrh	r3, [r4, #12]
 8001aac:	0598      	lsls	r0, r3, #22
 8001aae:	d402      	bmi.n	8001ab6 <_puts_r+0x36>
 8001ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ab2:	f000 fad3 	bl	800205c <__retarget_lock_acquire_recursive>
 8001ab6:	89a3      	ldrh	r3, [r4, #12]
 8001ab8:	0719      	lsls	r1, r3, #28
 8001aba:	d51d      	bpl.n	8001af8 <_puts_r+0x78>
 8001abc:	6923      	ldr	r3, [r4, #16]
 8001abe:	b1db      	cbz	r3, 8001af8 <_puts_r+0x78>
 8001ac0:	3e01      	subs	r6, #1
 8001ac2:	68a3      	ldr	r3, [r4, #8]
 8001ac4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	60a3      	str	r3, [r4, #8]
 8001acc:	bb39      	cbnz	r1, 8001b1e <_puts_r+0x9e>
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da38      	bge.n	8001b44 <_puts_r+0xc4>
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	210a      	movs	r1, #10
 8001ad6:	4628      	mov	r0, r5
 8001ad8:	f000 f848 	bl	8001b6c <__swbuf_r>
 8001adc:	3001      	adds	r0, #1
 8001ade:	d011      	beq.n	8001b04 <_puts_r+0x84>
 8001ae0:	250a      	movs	r5, #10
 8001ae2:	e011      	b.n	8001b08 <_puts_r+0x88>
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <_puts_r+0xd4>)
 8001ae6:	429c      	cmp	r4, r3
 8001ae8:	d101      	bne.n	8001aee <_puts_r+0x6e>
 8001aea:	68ac      	ldr	r4, [r5, #8]
 8001aec:	e7da      	b.n	8001aa4 <_puts_r+0x24>
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <_puts_r+0xd8>)
 8001af0:	429c      	cmp	r4, r3
 8001af2:	bf08      	it	eq
 8001af4:	68ec      	ldreq	r4, [r5, #12]
 8001af6:	e7d5      	b.n	8001aa4 <_puts_r+0x24>
 8001af8:	4621      	mov	r1, r4
 8001afa:	4628      	mov	r0, r5
 8001afc:	f000 f888 	bl	8001c10 <__swsetup_r>
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d0dd      	beq.n	8001ac0 <_puts_r+0x40>
 8001b04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b0a:	07da      	lsls	r2, r3, #31
 8001b0c:	d405      	bmi.n	8001b1a <_puts_r+0x9a>
 8001b0e:	89a3      	ldrh	r3, [r4, #12]
 8001b10:	059b      	lsls	r3, r3, #22
 8001b12:	d402      	bmi.n	8001b1a <_puts_r+0x9a>
 8001b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b16:	f000 faa2 	bl	800205e <__retarget_lock_release_recursive>
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	bd70      	pop	{r4, r5, r6, pc}
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	da04      	bge.n	8001b2c <_puts_r+0xac>
 8001b22:	69a2      	ldr	r2, [r4, #24]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dc06      	bgt.n	8001b36 <_puts_r+0xb6>
 8001b28:	290a      	cmp	r1, #10
 8001b2a:	d004      	beq.n	8001b36 <_puts_r+0xb6>
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	6022      	str	r2, [r4, #0]
 8001b32:	7019      	strb	r1, [r3, #0]
 8001b34:	e7c5      	b.n	8001ac2 <_puts_r+0x42>
 8001b36:	4622      	mov	r2, r4
 8001b38:	4628      	mov	r0, r5
 8001b3a:	f000 f817 	bl	8001b6c <__swbuf_r>
 8001b3e:	3001      	adds	r0, #1
 8001b40:	d1bf      	bne.n	8001ac2 <_puts_r+0x42>
 8001b42:	e7df      	b.n	8001b04 <_puts_r+0x84>
 8001b44:	250a      	movs	r5, #10
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	6022      	str	r2, [r4, #0]
 8001b4c:	701d      	strb	r5, [r3, #0]
 8001b4e:	e7db      	b.n	8001b08 <_puts_r+0x88>
 8001b50:	08002a90 	.word	0x08002a90
 8001b54:	08002ab0 	.word	0x08002ab0
 8001b58:	08002a70 	.word	0x08002a70

08001b5c <puts>:
 8001b5c:	4b02      	ldr	r3, [pc, #8]	; (8001b68 <puts+0xc>)
 8001b5e:	4601      	mov	r1, r0
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	f7ff bf8d 	b.w	8001a80 <_puts_r>
 8001b66:	bf00      	nop
 8001b68:	2000000c 	.word	0x2000000c

08001b6c <__swbuf_r>:
 8001b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6e:	460e      	mov	r6, r1
 8001b70:	4614      	mov	r4, r2
 8001b72:	4605      	mov	r5, r0
 8001b74:	b118      	cbz	r0, 8001b7e <__swbuf_r+0x12>
 8001b76:	6983      	ldr	r3, [r0, #24]
 8001b78:	b90b      	cbnz	r3, 8001b7e <__swbuf_r+0x12>
 8001b7a:	f000 f9d1 	bl	8001f20 <__sinit>
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <__swbuf_r+0x98>)
 8001b80:	429c      	cmp	r4, r3
 8001b82:	d12b      	bne.n	8001bdc <__swbuf_r+0x70>
 8001b84:	686c      	ldr	r4, [r5, #4]
 8001b86:	69a3      	ldr	r3, [r4, #24]
 8001b88:	60a3      	str	r3, [r4, #8]
 8001b8a:	89a3      	ldrh	r3, [r4, #12]
 8001b8c:	071a      	lsls	r2, r3, #28
 8001b8e:	d52f      	bpl.n	8001bf0 <__swbuf_r+0x84>
 8001b90:	6923      	ldr	r3, [r4, #16]
 8001b92:	b36b      	cbz	r3, 8001bf0 <__swbuf_r+0x84>
 8001b94:	6923      	ldr	r3, [r4, #16]
 8001b96:	6820      	ldr	r0, [r4, #0]
 8001b98:	b2f6      	uxtb	r6, r6
 8001b9a:	1ac0      	subs	r0, r0, r3
 8001b9c:	6963      	ldr	r3, [r4, #20]
 8001b9e:	4637      	mov	r7, r6
 8001ba0:	4283      	cmp	r3, r0
 8001ba2:	dc04      	bgt.n	8001bae <__swbuf_r+0x42>
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	4628      	mov	r0, r5
 8001ba8:	f000 f926 	bl	8001df8 <_fflush_r>
 8001bac:	bb30      	cbnz	r0, 8001bfc <__swbuf_r+0x90>
 8001bae:	68a3      	ldr	r3, [r4, #8]
 8001bb0:	3001      	adds	r0, #1
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	60a3      	str	r3, [r4, #8]
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	6022      	str	r2, [r4, #0]
 8001bbc:	701e      	strb	r6, [r3, #0]
 8001bbe:	6963      	ldr	r3, [r4, #20]
 8001bc0:	4283      	cmp	r3, r0
 8001bc2:	d004      	beq.n	8001bce <__swbuf_r+0x62>
 8001bc4:	89a3      	ldrh	r3, [r4, #12]
 8001bc6:	07db      	lsls	r3, r3, #31
 8001bc8:	d506      	bpl.n	8001bd8 <__swbuf_r+0x6c>
 8001bca:	2e0a      	cmp	r6, #10
 8001bcc:	d104      	bne.n	8001bd8 <__swbuf_r+0x6c>
 8001bce:	4621      	mov	r1, r4
 8001bd0:	4628      	mov	r0, r5
 8001bd2:	f000 f911 	bl	8001df8 <_fflush_r>
 8001bd6:	b988      	cbnz	r0, 8001bfc <__swbuf_r+0x90>
 8001bd8:	4638      	mov	r0, r7
 8001bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <__swbuf_r+0x9c>)
 8001bde:	429c      	cmp	r4, r3
 8001be0:	d101      	bne.n	8001be6 <__swbuf_r+0x7a>
 8001be2:	68ac      	ldr	r4, [r5, #8]
 8001be4:	e7cf      	b.n	8001b86 <__swbuf_r+0x1a>
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <__swbuf_r+0xa0>)
 8001be8:	429c      	cmp	r4, r3
 8001bea:	bf08      	it	eq
 8001bec:	68ec      	ldreq	r4, [r5, #12]
 8001bee:	e7ca      	b.n	8001b86 <__swbuf_r+0x1a>
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	f000 f80c 	bl	8001c10 <__swsetup_r>
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	d0cb      	beq.n	8001b94 <__swbuf_r+0x28>
 8001bfc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001c00:	e7ea      	b.n	8001bd8 <__swbuf_r+0x6c>
 8001c02:	bf00      	nop
 8001c04:	08002a90 	.word	0x08002a90
 8001c08:	08002ab0 	.word	0x08002ab0
 8001c0c:	08002a70 	.word	0x08002a70

08001c10 <__swsetup_r>:
 8001c10:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <__swsetup_r+0xcc>)
 8001c12:	b570      	push	{r4, r5, r6, lr}
 8001c14:	681d      	ldr	r5, [r3, #0]
 8001c16:	4606      	mov	r6, r0
 8001c18:	460c      	mov	r4, r1
 8001c1a:	b125      	cbz	r5, 8001c26 <__swsetup_r+0x16>
 8001c1c:	69ab      	ldr	r3, [r5, #24]
 8001c1e:	b913      	cbnz	r3, 8001c26 <__swsetup_r+0x16>
 8001c20:	4628      	mov	r0, r5
 8001c22:	f000 f97d 	bl	8001f20 <__sinit>
 8001c26:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <__swsetup_r+0xd0>)
 8001c28:	429c      	cmp	r4, r3
 8001c2a:	d10f      	bne.n	8001c4c <__swsetup_r+0x3c>
 8001c2c:	686c      	ldr	r4, [r5, #4]
 8001c2e:	89a3      	ldrh	r3, [r4, #12]
 8001c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c34:	0719      	lsls	r1, r3, #28
 8001c36:	d42c      	bmi.n	8001c92 <__swsetup_r+0x82>
 8001c38:	06dd      	lsls	r5, r3, #27
 8001c3a:	d411      	bmi.n	8001c60 <__swsetup_r+0x50>
 8001c3c:	2309      	movs	r3, #9
 8001c3e:	6033      	str	r3, [r6, #0]
 8001c40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c48:	81a3      	strh	r3, [r4, #12]
 8001c4a:	e03e      	b.n	8001cca <__swsetup_r+0xba>
 8001c4c:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <__swsetup_r+0xd4>)
 8001c4e:	429c      	cmp	r4, r3
 8001c50:	d101      	bne.n	8001c56 <__swsetup_r+0x46>
 8001c52:	68ac      	ldr	r4, [r5, #8]
 8001c54:	e7eb      	b.n	8001c2e <__swsetup_r+0x1e>
 8001c56:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <__swsetup_r+0xd8>)
 8001c58:	429c      	cmp	r4, r3
 8001c5a:	bf08      	it	eq
 8001c5c:	68ec      	ldreq	r4, [r5, #12]
 8001c5e:	e7e6      	b.n	8001c2e <__swsetup_r+0x1e>
 8001c60:	0758      	lsls	r0, r3, #29
 8001c62:	d512      	bpl.n	8001c8a <__swsetup_r+0x7a>
 8001c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c66:	b141      	cbz	r1, 8001c7a <__swsetup_r+0x6a>
 8001c68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c6c:	4299      	cmp	r1, r3
 8001c6e:	d002      	beq.n	8001c76 <__swsetup_r+0x66>
 8001c70:	4630      	mov	r0, r6
 8001c72:	f000 fa59 	bl	8002128 <_free_r>
 8001c76:	2300      	movs	r3, #0
 8001c78:	6363      	str	r3, [r4, #52]	; 0x34
 8001c7a:	89a3      	ldrh	r3, [r4, #12]
 8001c7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c80:	81a3      	strh	r3, [r4, #12]
 8001c82:	2300      	movs	r3, #0
 8001c84:	6063      	str	r3, [r4, #4]
 8001c86:	6923      	ldr	r3, [r4, #16]
 8001c88:	6023      	str	r3, [r4, #0]
 8001c8a:	89a3      	ldrh	r3, [r4, #12]
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	81a3      	strh	r3, [r4, #12]
 8001c92:	6923      	ldr	r3, [r4, #16]
 8001c94:	b94b      	cbnz	r3, 8001caa <__swsetup_r+0x9a>
 8001c96:	89a3      	ldrh	r3, [r4, #12]
 8001c98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca0:	d003      	beq.n	8001caa <__swsetup_r+0x9a>
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	4630      	mov	r0, r6
 8001ca6:	f000 f9ff 	bl	80020a8 <__smakebuf_r>
 8001caa:	89a0      	ldrh	r0, [r4, #12]
 8001cac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001cb0:	f010 0301 	ands.w	r3, r0, #1
 8001cb4:	d00a      	beq.n	8001ccc <__swsetup_r+0xbc>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60a3      	str	r3, [r4, #8]
 8001cba:	6963      	ldr	r3, [r4, #20]
 8001cbc:	425b      	negs	r3, r3
 8001cbe:	61a3      	str	r3, [r4, #24]
 8001cc0:	6923      	ldr	r3, [r4, #16]
 8001cc2:	b943      	cbnz	r3, 8001cd6 <__swsetup_r+0xc6>
 8001cc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001cc8:	d1ba      	bne.n	8001c40 <__swsetup_r+0x30>
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
 8001ccc:	0781      	lsls	r1, r0, #30
 8001cce:	bf58      	it	pl
 8001cd0:	6963      	ldrpl	r3, [r4, #20]
 8001cd2:	60a3      	str	r3, [r4, #8]
 8001cd4:	e7f4      	b.n	8001cc0 <__swsetup_r+0xb0>
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	e7f7      	b.n	8001cca <__swsetup_r+0xba>
 8001cda:	bf00      	nop
 8001cdc:	2000000c 	.word	0x2000000c
 8001ce0:	08002a90 	.word	0x08002a90
 8001ce4:	08002ab0 	.word	0x08002ab0
 8001ce8:	08002a70 	.word	0x08002a70

08001cec <__sflush_r>:
 8001cec:	898a      	ldrh	r2, [r1, #12]
 8001cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf2:	4605      	mov	r5, r0
 8001cf4:	0710      	lsls	r0, r2, #28
 8001cf6:	460c      	mov	r4, r1
 8001cf8:	d458      	bmi.n	8001dac <__sflush_r+0xc0>
 8001cfa:	684b      	ldr	r3, [r1, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	dc05      	bgt.n	8001d0c <__sflush_r+0x20>
 8001d00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	dc02      	bgt.n	8001d0c <__sflush_r+0x20>
 8001d06:	2000      	movs	r0, #0
 8001d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d0e:	2e00      	cmp	r6, #0
 8001d10:	d0f9      	beq.n	8001d06 <__sflush_r+0x1a>
 8001d12:	2300      	movs	r3, #0
 8001d14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d18:	682f      	ldr	r7, [r5, #0]
 8001d1a:	602b      	str	r3, [r5, #0]
 8001d1c:	d032      	beq.n	8001d84 <__sflush_r+0x98>
 8001d1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d20:	89a3      	ldrh	r3, [r4, #12]
 8001d22:	075a      	lsls	r2, r3, #29
 8001d24:	d505      	bpl.n	8001d32 <__sflush_r+0x46>
 8001d26:	6863      	ldr	r3, [r4, #4]
 8001d28:	1ac0      	subs	r0, r0, r3
 8001d2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d2c:	b10b      	cbz	r3, 8001d32 <__sflush_r+0x46>
 8001d2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d30:	1ac0      	subs	r0, r0, r3
 8001d32:	2300      	movs	r3, #0
 8001d34:	4602      	mov	r2, r0
 8001d36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d38:	4628      	mov	r0, r5
 8001d3a:	6a21      	ldr	r1, [r4, #32]
 8001d3c:	47b0      	blx	r6
 8001d3e:	1c43      	adds	r3, r0, #1
 8001d40:	89a3      	ldrh	r3, [r4, #12]
 8001d42:	d106      	bne.n	8001d52 <__sflush_r+0x66>
 8001d44:	6829      	ldr	r1, [r5, #0]
 8001d46:	291d      	cmp	r1, #29
 8001d48:	d82c      	bhi.n	8001da4 <__sflush_r+0xb8>
 8001d4a:	4a2a      	ldr	r2, [pc, #168]	; (8001df4 <__sflush_r+0x108>)
 8001d4c:	40ca      	lsrs	r2, r1
 8001d4e:	07d6      	lsls	r6, r2, #31
 8001d50:	d528      	bpl.n	8001da4 <__sflush_r+0xb8>
 8001d52:	2200      	movs	r2, #0
 8001d54:	6062      	str	r2, [r4, #4]
 8001d56:	6922      	ldr	r2, [r4, #16]
 8001d58:	04d9      	lsls	r1, r3, #19
 8001d5a:	6022      	str	r2, [r4, #0]
 8001d5c:	d504      	bpl.n	8001d68 <__sflush_r+0x7c>
 8001d5e:	1c42      	adds	r2, r0, #1
 8001d60:	d101      	bne.n	8001d66 <__sflush_r+0x7a>
 8001d62:	682b      	ldr	r3, [r5, #0]
 8001d64:	b903      	cbnz	r3, 8001d68 <__sflush_r+0x7c>
 8001d66:	6560      	str	r0, [r4, #84]	; 0x54
 8001d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d6a:	602f      	str	r7, [r5, #0]
 8001d6c:	2900      	cmp	r1, #0
 8001d6e:	d0ca      	beq.n	8001d06 <__sflush_r+0x1a>
 8001d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d74:	4299      	cmp	r1, r3
 8001d76:	d002      	beq.n	8001d7e <__sflush_r+0x92>
 8001d78:	4628      	mov	r0, r5
 8001d7a:	f000 f9d5 	bl	8002128 <_free_r>
 8001d7e:	2000      	movs	r0, #0
 8001d80:	6360      	str	r0, [r4, #52]	; 0x34
 8001d82:	e7c1      	b.n	8001d08 <__sflush_r+0x1c>
 8001d84:	6a21      	ldr	r1, [r4, #32]
 8001d86:	2301      	movs	r3, #1
 8001d88:	4628      	mov	r0, r5
 8001d8a:	47b0      	blx	r6
 8001d8c:	1c41      	adds	r1, r0, #1
 8001d8e:	d1c7      	bne.n	8001d20 <__sflush_r+0x34>
 8001d90:	682b      	ldr	r3, [r5, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0c4      	beq.n	8001d20 <__sflush_r+0x34>
 8001d96:	2b1d      	cmp	r3, #29
 8001d98:	d001      	beq.n	8001d9e <__sflush_r+0xb2>
 8001d9a:	2b16      	cmp	r3, #22
 8001d9c:	d101      	bne.n	8001da2 <__sflush_r+0xb6>
 8001d9e:	602f      	str	r7, [r5, #0]
 8001da0:	e7b1      	b.n	8001d06 <__sflush_r+0x1a>
 8001da2:	89a3      	ldrh	r3, [r4, #12]
 8001da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001da8:	81a3      	strh	r3, [r4, #12]
 8001daa:	e7ad      	b.n	8001d08 <__sflush_r+0x1c>
 8001dac:	690f      	ldr	r7, [r1, #16]
 8001dae:	2f00      	cmp	r7, #0
 8001db0:	d0a9      	beq.n	8001d06 <__sflush_r+0x1a>
 8001db2:	0793      	lsls	r3, r2, #30
 8001db4:	bf18      	it	ne
 8001db6:	2300      	movne	r3, #0
 8001db8:	680e      	ldr	r6, [r1, #0]
 8001dba:	bf08      	it	eq
 8001dbc:	694b      	ldreq	r3, [r1, #20]
 8001dbe:	eba6 0807 	sub.w	r8, r6, r7
 8001dc2:	600f      	str	r7, [r1, #0]
 8001dc4:	608b      	str	r3, [r1, #8]
 8001dc6:	f1b8 0f00 	cmp.w	r8, #0
 8001dca:	dd9c      	ble.n	8001d06 <__sflush_r+0x1a>
 8001dcc:	4643      	mov	r3, r8
 8001dce:	463a      	mov	r2, r7
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	6a21      	ldr	r1, [r4, #32]
 8001dd4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001dd6:	47b0      	blx	r6
 8001dd8:	2800      	cmp	r0, #0
 8001dda:	dc06      	bgt.n	8001dea <__sflush_r+0xfe>
 8001ddc:	89a3      	ldrh	r3, [r4, #12]
 8001dde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de6:	81a3      	strh	r3, [r4, #12]
 8001de8:	e78e      	b.n	8001d08 <__sflush_r+0x1c>
 8001dea:	4407      	add	r7, r0
 8001dec:	eba8 0800 	sub.w	r8, r8, r0
 8001df0:	e7e9      	b.n	8001dc6 <__sflush_r+0xda>
 8001df2:	bf00      	nop
 8001df4:	20400001 	.word	0x20400001

08001df8 <_fflush_r>:
 8001df8:	b538      	push	{r3, r4, r5, lr}
 8001dfa:	690b      	ldr	r3, [r1, #16]
 8001dfc:	4605      	mov	r5, r0
 8001dfe:	460c      	mov	r4, r1
 8001e00:	b913      	cbnz	r3, 8001e08 <_fflush_r+0x10>
 8001e02:	2500      	movs	r5, #0
 8001e04:	4628      	mov	r0, r5
 8001e06:	bd38      	pop	{r3, r4, r5, pc}
 8001e08:	b118      	cbz	r0, 8001e12 <_fflush_r+0x1a>
 8001e0a:	6983      	ldr	r3, [r0, #24]
 8001e0c:	b90b      	cbnz	r3, 8001e12 <_fflush_r+0x1a>
 8001e0e:	f000 f887 	bl	8001f20 <__sinit>
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <_fflush_r+0x6c>)
 8001e14:	429c      	cmp	r4, r3
 8001e16:	d11b      	bne.n	8001e50 <_fflush_r+0x58>
 8001e18:	686c      	ldr	r4, [r5, #4]
 8001e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0ef      	beq.n	8001e02 <_fflush_r+0xa>
 8001e22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e24:	07d0      	lsls	r0, r2, #31
 8001e26:	d404      	bmi.n	8001e32 <_fflush_r+0x3a>
 8001e28:	0599      	lsls	r1, r3, #22
 8001e2a:	d402      	bmi.n	8001e32 <_fflush_r+0x3a>
 8001e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e2e:	f000 f915 	bl	800205c <__retarget_lock_acquire_recursive>
 8001e32:	4628      	mov	r0, r5
 8001e34:	4621      	mov	r1, r4
 8001e36:	f7ff ff59 	bl	8001cec <__sflush_r>
 8001e3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e3c:	4605      	mov	r5, r0
 8001e3e:	07da      	lsls	r2, r3, #31
 8001e40:	d4e0      	bmi.n	8001e04 <_fflush_r+0xc>
 8001e42:	89a3      	ldrh	r3, [r4, #12]
 8001e44:	059b      	lsls	r3, r3, #22
 8001e46:	d4dd      	bmi.n	8001e04 <_fflush_r+0xc>
 8001e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e4a:	f000 f908 	bl	800205e <__retarget_lock_release_recursive>
 8001e4e:	e7d9      	b.n	8001e04 <_fflush_r+0xc>
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <_fflush_r+0x70>)
 8001e52:	429c      	cmp	r4, r3
 8001e54:	d101      	bne.n	8001e5a <_fflush_r+0x62>
 8001e56:	68ac      	ldr	r4, [r5, #8]
 8001e58:	e7df      	b.n	8001e1a <_fflush_r+0x22>
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <_fflush_r+0x74>)
 8001e5c:	429c      	cmp	r4, r3
 8001e5e:	bf08      	it	eq
 8001e60:	68ec      	ldreq	r4, [r5, #12]
 8001e62:	e7da      	b.n	8001e1a <_fflush_r+0x22>
 8001e64:	08002a90 	.word	0x08002a90
 8001e68:	08002ab0 	.word	0x08002ab0
 8001e6c:	08002a70 	.word	0x08002a70

08001e70 <std>:
 8001e70:	2300      	movs	r3, #0
 8001e72:	b510      	push	{r4, lr}
 8001e74:	4604      	mov	r4, r0
 8001e76:	e9c0 3300 	strd	r3, r3, [r0]
 8001e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e7e:	6083      	str	r3, [r0, #8]
 8001e80:	8181      	strh	r1, [r0, #12]
 8001e82:	6643      	str	r3, [r0, #100]	; 0x64
 8001e84:	81c2      	strh	r2, [r0, #14]
 8001e86:	6183      	str	r3, [r0, #24]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	305c      	adds	r0, #92	; 0x5c
 8001e8e:	f7ff fdd7 	bl	8001a40 <memset>
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <std+0x38>)
 8001e94:	6224      	str	r4, [r4, #32]
 8001e96:	6263      	str	r3, [r4, #36]	; 0x24
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <std+0x3c>)
 8001e9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <std+0x40>)
 8001e9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <std+0x44>)
 8001ea2:	6323      	str	r3, [r4, #48]	; 0x30
 8001ea4:	bd10      	pop	{r4, pc}
 8001ea6:	bf00      	nop
 8001ea8:	08002871 	.word	0x08002871
 8001eac:	08002893 	.word	0x08002893
 8001eb0:	080028cb 	.word	0x080028cb
 8001eb4:	080028ef 	.word	0x080028ef

08001eb8 <_cleanup_r>:
 8001eb8:	4901      	ldr	r1, [pc, #4]	; (8001ec0 <_cleanup_r+0x8>)
 8001eba:	f000 b8af 	b.w	800201c <_fwalk_reent>
 8001ebe:	bf00      	nop
 8001ec0:	08001df9 	.word	0x08001df9

08001ec4 <__sfmoreglue>:
 8001ec4:	b570      	push	{r4, r5, r6, lr}
 8001ec6:	2568      	movs	r5, #104	; 0x68
 8001ec8:	1e4a      	subs	r2, r1, #1
 8001eca:	4355      	muls	r5, r2
 8001ecc:	460e      	mov	r6, r1
 8001ece:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ed2:	f000 f975 	bl	80021c0 <_malloc_r>
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	b140      	cbz	r0, 8001eec <__sfmoreglue+0x28>
 8001eda:	2100      	movs	r1, #0
 8001edc:	e9c0 1600 	strd	r1, r6, [r0]
 8001ee0:	300c      	adds	r0, #12
 8001ee2:	60a0      	str	r0, [r4, #8]
 8001ee4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ee8:	f7ff fdaa 	bl	8001a40 <memset>
 8001eec:	4620      	mov	r0, r4
 8001eee:	bd70      	pop	{r4, r5, r6, pc}

08001ef0 <__sfp_lock_acquire>:
 8001ef0:	4801      	ldr	r0, [pc, #4]	; (8001ef8 <__sfp_lock_acquire+0x8>)
 8001ef2:	f000 b8b3 	b.w	800205c <__retarget_lock_acquire_recursive>
 8001ef6:	bf00      	nop
 8001ef8:	200000ec 	.word	0x200000ec

08001efc <__sfp_lock_release>:
 8001efc:	4801      	ldr	r0, [pc, #4]	; (8001f04 <__sfp_lock_release+0x8>)
 8001efe:	f000 b8ae 	b.w	800205e <__retarget_lock_release_recursive>
 8001f02:	bf00      	nop
 8001f04:	200000ec 	.word	0x200000ec

08001f08 <__sinit_lock_acquire>:
 8001f08:	4801      	ldr	r0, [pc, #4]	; (8001f10 <__sinit_lock_acquire+0x8>)
 8001f0a:	f000 b8a7 	b.w	800205c <__retarget_lock_acquire_recursive>
 8001f0e:	bf00      	nop
 8001f10:	200000e7 	.word	0x200000e7

08001f14 <__sinit_lock_release>:
 8001f14:	4801      	ldr	r0, [pc, #4]	; (8001f1c <__sinit_lock_release+0x8>)
 8001f16:	f000 b8a2 	b.w	800205e <__retarget_lock_release_recursive>
 8001f1a:	bf00      	nop
 8001f1c:	200000e7 	.word	0x200000e7

08001f20 <__sinit>:
 8001f20:	b510      	push	{r4, lr}
 8001f22:	4604      	mov	r4, r0
 8001f24:	f7ff fff0 	bl	8001f08 <__sinit_lock_acquire>
 8001f28:	69a3      	ldr	r3, [r4, #24]
 8001f2a:	b11b      	cbz	r3, 8001f34 <__sinit+0x14>
 8001f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f30:	f7ff bff0 	b.w	8001f14 <__sinit_lock_release>
 8001f34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f38:	6523      	str	r3, [r4, #80]	; 0x50
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <__sinit+0x68>)
 8001f3c:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <__sinit+0x6c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f42:	42a3      	cmp	r3, r4
 8001f44:	bf08      	it	eq
 8001f46:	2301      	moveq	r3, #1
 8001f48:	4620      	mov	r0, r4
 8001f4a:	bf08      	it	eq
 8001f4c:	61a3      	streq	r3, [r4, #24]
 8001f4e:	f000 f81f 	bl	8001f90 <__sfp>
 8001f52:	6060      	str	r0, [r4, #4]
 8001f54:	4620      	mov	r0, r4
 8001f56:	f000 f81b 	bl	8001f90 <__sfp>
 8001f5a:	60a0      	str	r0, [r4, #8]
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f000 f817 	bl	8001f90 <__sfp>
 8001f62:	2200      	movs	r2, #0
 8001f64:	2104      	movs	r1, #4
 8001f66:	60e0      	str	r0, [r4, #12]
 8001f68:	6860      	ldr	r0, [r4, #4]
 8001f6a:	f7ff ff81 	bl	8001e70 <std>
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2109      	movs	r1, #9
 8001f72:	68a0      	ldr	r0, [r4, #8]
 8001f74:	f7ff ff7c 	bl	8001e70 <std>
 8001f78:	2202      	movs	r2, #2
 8001f7a:	2112      	movs	r1, #18
 8001f7c:	68e0      	ldr	r0, [r4, #12]
 8001f7e:	f7ff ff77 	bl	8001e70 <std>
 8001f82:	2301      	movs	r3, #1
 8001f84:	61a3      	str	r3, [r4, #24]
 8001f86:	e7d1      	b.n	8001f2c <__sinit+0xc>
 8001f88:	08002a6c 	.word	0x08002a6c
 8001f8c:	08001eb9 	.word	0x08001eb9

08001f90 <__sfp>:
 8001f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f92:	4607      	mov	r7, r0
 8001f94:	f7ff ffac 	bl	8001ef0 <__sfp_lock_acquire>
 8001f98:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <__sfp+0x84>)
 8001f9a:	681e      	ldr	r6, [r3, #0]
 8001f9c:	69b3      	ldr	r3, [r6, #24]
 8001f9e:	b913      	cbnz	r3, 8001fa6 <__sfp+0x16>
 8001fa0:	4630      	mov	r0, r6
 8001fa2:	f7ff ffbd 	bl	8001f20 <__sinit>
 8001fa6:	3648      	adds	r6, #72	; 0x48
 8001fa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	d503      	bpl.n	8001fb8 <__sfp+0x28>
 8001fb0:	6833      	ldr	r3, [r6, #0]
 8001fb2:	b30b      	cbz	r3, 8001ff8 <__sfp+0x68>
 8001fb4:	6836      	ldr	r6, [r6, #0]
 8001fb6:	e7f7      	b.n	8001fa8 <__sfp+0x18>
 8001fb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001fbc:	b9d5      	cbnz	r5, 8001ff4 <__sfp+0x64>
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <__sfp+0x88>)
 8001fc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001fc4:	60e3      	str	r3, [r4, #12]
 8001fc6:	6665      	str	r5, [r4, #100]	; 0x64
 8001fc8:	f000 f847 	bl	800205a <__retarget_lock_init_recursive>
 8001fcc:	f7ff ff96 	bl	8001efc <__sfp_lock_release>
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001fd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001fdc:	6025      	str	r5, [r4, #0]
 8001fde:	61a5      	str	r5, [r4, #24]
 8001fe0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001fe4:	f7ff fd2c 	bl	8001a40 <memset>
 8001fe8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001fec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ff4:	3468      	adds	r4, #104	; 0x68
 8001ff6:	e7d9      	b.n	8001fac <__sfp+0x1c>
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	4638      	mov	r0, r7
 8001ffc:	f7ff ff62 	bl	8001ec4 <__sfmoreglue>
 8002000:	4604      	mov	r4, r0
 8002002:	6030      	str	r0, [r6, #0]
 8002004:	2800      	cmp	r0, #0
 8002006:	d1d5      	bne.n	8001fb4 <__sfp+0x24>
 8002008:	f7ff ff78 	bl	8001efc <__sfp_lock_release>
 800200c:	230c      	movs	r3, #12
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	e7ee      	b.n	8001ff0 <__sfp+0x60>
 8002012:	bf00      	nop
 8002014:	08002a6c 	.word	0x08002a6c
 8002018:	ffff0001 	.word	0xffff0001

0800201c <_fwalk_reent>:
 800201c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002020:	4606      	mov	r6, r0
 8002022:	4688      	mov	r8, r1
 8002024:	2700      	movs	r7, #0
 8002026:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800202a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800202e:	f1b9 0901 	subs.w	r9, r9, #1
 8002032:	d505      	bpl.n	8002040 <_fwalk_reent+0x24>
 8002034:	6824      	ldr	r4, [r4, #0]
 8002036:	2c00      	cmp	r4, #0
 8002038:	d1f7      	bne.n	800202a <_fwalk_reent+0xe>
 800203a:	4638      	mov	r0, r7
 800203c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002040:	89ab      	ldrh	r3, [r5, #12]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d907      	bls.n	8002056 <_fwalk_reent+0x3a>
 8002046:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800204a:	3301      	adds	r3, #1
 800204c:	d003      	beq.n	8002056 <_fwalk_reent+0x3a>
 800204e:	4629      	mov	r1, r5
 8002050:	4630      	mov	r0, r6
 8002052:	47c0      	blx	r8
 8002054:	4307      	orrs	r7, r0
 8002056:	3568      	adds	r5, #104	; 0x68
 8002058:	e7e9      	b.n	800202e <_fwalk_reent+0x12>

0800205a <__retarget_lock_init_recursive>:
 800205a:	4770      	bx	lr

0800205c <__retarget_lock_acquire_recursive>:
 800205c:	4770      	bx	lr

0800205e <__retarget_lock_release_recursive>:
 800205e:	4770      	bx	lr

08002060 <__swhatbuf_r>:
 8002060:	b570      	push	{r4, r5, r6, lr}
 8002062:	460e      	mov	r6, r1
 8002064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002068:	4614      	mov	r4, r2
 800206a:	2900      	cmp	r1, #0
 800206c:	461d      	mov	r5, r3
 800206e:	b096      	sub	sp, #88	; 0x58
 8002070:	da07      	bge.n	8002082 <__swhatbuf_r+0x22>
 8002072:	2300      	movs	r3, #0
 8002074:	602b      	str	r3, [r5, #0]
 8002076:	89b3      	ldrh	r3, [r6, #12]
 8002078:	061a      	lsls	r2, r3, #24
 800207a:	d410      	bmi.n	800209e <__swhatbuf_r+0x3e>
 800207c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002080:	e00e      	b.n	80020a0 <__swhatbuf_r+0x40>
 8002082:	466a      	mov	r2, sp
 8002084:	f000 fc5a 	bl	800293c <_fstat_r>
 8002088:	2800      	cmp	r0, #0
 800208a:	dbf2      	blt.n	8002072 <__swhatbuf_r+0x12>
 800208c:	9a01      	ldr	r2, [sp, #4]
 800208e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002092:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002096:	425a      	negs	r2, r3
 8002098:	415a      	adcs	r2, r3
 800209a:	602a      	str	r2, [r5, #0]
 800209c:	e7ee      	b.n	800207c <__swhatbuf_r+0x1c>
 800209e:	2340      	movs	r3, #64	; 0x40
 80020a0:	2000      	movs	r0, #0
 80020a2:	6023      	str	r3, [r4, #0]
 80020a4:	b016      	add	sp, #88	; 0x58
 80020a6:	bd70      	pop	{r4, r5, r6, pc}

080020a8 <__smakebuf_r>:
 80020a8:	898b      	ldrh	r3, [r1, #12]
 80020aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020ac:	079d      	lsls	r5, r3, #30
 80020ae:	4606      	mov	r6, r0
 80020b0:	460c      	mov	r4, r1
 80020b2:	d507      	bpl.n	80020c4 <__smakebuf_r+0x1c>
 80020b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020b8:	6023      	str	r3, [r4, #0]
 80020ba:	6123      	str	r3, [r4, #16]
 80020bc:	2301      	movs	r3, #1
 80020be:	6163      	str	r3, [r4, #20]
 80020c0:	b002      	add	sp, #8
 80020c2:	bd70      	pop	{r4, r5, r6, pc}
 80020c4:	466a      	mov	r2, sp
 80020c6:	ab01      	add	r3, sp, #4
 80020c8:	f7ff ffca 	bl	8002060 <__swhatbuf_r>
 80020cc:	9900      	ldr	r1, [sp, #0]
 80020ce:	4605      	mov	r5, r0
 80020d0:	4630      	mov	r0, r6
 80020d2:	f000 f875 	bl	80021c0 <_malloc_r>
 80020d6:	b948      	cbnz	r0, 80020ec <__smakebuf_r+0x44>
 80020d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020dc:	059a      	lsls	r2, r3, #22
 80020de:	d4ef      	bmi.n	80020c0 <__smakebuf_r+0x18>
 80020e0:	f023 0303 	bic.w	r3, r3, #3
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	81a3      	strh	r3, [r4, #12]
 80020ea:	e7e3      	b.n	80020b4 <__smakebuf_r+0xc>
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <__smakebuf_r+0x7c>)
 80020ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80020f0:	89a3      	ldrh	r3, [r4, #12]
 80020f2:	6020      	str	r0, [r4, #0]
 80020f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f8:	81a3      	strh	r3, [r4, #12]
 80020fa:	9b00      	ldr	r3, [sp, #0]
 80020fc:	6120      	str	r0, [r4, #16]
 80020fe:	6163      	str	r3, [r4, #20]
 8002100:	9b01      	ldr	r3, [sp, #4]
 8002102:	b15b      	cbz	r3, 800211c <__smakebuf_r+0x74>
 8002104:	4630      	mov	r0, r6
 8002106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800210a:	f000 fc29 	bl	8002960 <_isatty_r>
 800210e:	b128      	cbz	r0, 800211c <__smakebuf_r+0x74>
 8002110:	89a3      	ldrh	r3, [r4, #12]
 8002112:	f023 0303 	bic.w	r3, r3, #3
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	81a3      	strh	r3, [r4, #12]
 800211c:	89a0      	ldrh	r0, [r4, #12]
 800211e:	4305      	orrs	r5, r0
 8002120:	81a5      	strh	r5, [r4, #12]
 8002122:	e7cd      	b.n	80020c0 <__smakebuf_r+0x18>
 8002124:	08001eb9 	.word	0x08001eb9

08002128 <_free_r>:
 8002128:	b538      	push	{r3, r4, r5, lr}
 800212a:	4605      	mov	r5, r0
 800212c:	2900      	cmp	r1, #0
 800212e:	d043      	beq.n	80021b8 <_free_r+0x90>
 8002130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002134:	1f0c      	subs	r4, r1, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	bfb8      	it	lt
 800213a:	18e4      	addlt	r4, r4, r3
 800213c:	f000 fc40 	bl	80029c0 <__malloc_lock>
 8002140:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <_free_r+0x94>)
 8002142:	6813      	ldr	r3, [r2, #0]
 8002144:	4610      	mov	r0, r2
 8002146:	b933      	cbnz	r3, 8002156 <_free_r+0x2e>
 8002148:	6063      	str	r3, [r4, #4]
 800214a:	6014      	str	r4, [r2, #0]
 800214c:	4628      	mov	r0, r5
 800214e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002152:	f000 bc3b 	b.w	80029cc <__malloc_unlock>
 8002156:	42a3      	cmp	r3, r4
 8002158:	d90a      	bls.n	8002170 <_free_r+0x48>
 800215a:	6821      	ldr	r1, [r4, #0]
 800215c:	1862      	adds	r2, r4, r1
 800215e:	4293      	cmp	r3, r2
 8002160:	bf01      	itttt	eq
 8002162:	681a      	ldreq	r2, [r3, #0]
 8002164:	685b      	ldreq	r3, [r3, #4]
 8002166:	1852      	addeq	r2, r2, r1
 8002168:	6022      	streq	r2, [r4, #0]
 800216a:	6063      	str	r3, [r4, #4]
 800216c:	6004      	str	r4, [r0, #0]
 800216e:	e7ed      	b.n	800214c <_free_r+0x24>
 8002170:	461a      	mov	r2, r3
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	b10b      	cbz	r3, 800217a <_free_r+0x52>
 8002176:	42a3      	cmp	r3, r4
 8002178:	d9fa      	bls.n	8002170 <_free_r+0x48>
 800217a:	6811      	ldr	r1, [r2, #0]
 800217c:	1850      	adds	r0, r2, r1
 800217e:	42a0      	cmp	r0, r4
 8002180:	d10b      	bne.n	800219a <_free_r+0x72>
 8002182:	6820      	ldr	r0, [r4, #0]
 8002184:	4401      	add	r1, r0
 8002186:	1850      	adds	r0, r2, r1
 8002188:	4283      	cmp	r3, r0
 800218a:	6011      	str	r1, [r2, #0]
 800218c:	d1de      	bne.n	800214c <_free_r+0x24>
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4401      	add	r1, r0
 8002194:	6011      	str	r1, [r2, #0]
 8002196:	6053      	str	r3, [r2, #4]
 8002198:	e7d8      	b.n	800214c <_free_r+0x24>
 800219a:	d902      	bls.n	80021a2 <_free_r+0x7a>
 800219c:	230c      	movs	r3, #12
 800219e:	602b      	str	r3, [r5, #0]
 80021a0:	e7d4      	b.n	800214c <_free_r+0x24>
 80021a2:	6820      	ldr	r0, [r4, #0]
 80021a4:	1821      	adds	r1, r4, r0
 80021a6:	428b      	cmp	r3, r1
 80021a8:	bf01      	itttt	eq
 80021aa:	6819      	ldreq	r1, [r3, #0]
 80021ac:	685b      	ldreq	r3, [r3, #4]
 80021ae:	1809      	addeq	r1, r1, r0
 80021b0:	6021      	streq	r1, [r4, #0]
 80021b2:	6063      	str	r3, [r4, #4]
 80021b4:	6054      	str	r4, [r2, #4]
 80021b6:	e7c9      	b.n	800214c <_free_r+0x24>
 80021b8:	bd38      	pop	{r3, r4, r5, pc}
 80021ba:	bf00      	nop
 80021bc:	20000090 	.word	0x20000090

080021c0 <_malloc_r>:
 80021c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c2:	1ccd      	adds	r5, r1, #3
 80021c4:	f025 0503 	bic.w	r5, r5, #3
 80021c8:	3508      	adds	r5, #8
 80021ca:	2d0c      	cmp	r5, #12
 80021cc:	bf38      	it	cc
 80021ce:	250c      	movcc	r5, #12
 80021d0:	2d00      	cmp	r5, #0
 80021d2:	4606      	mov	r6, r0
 80021d4:	db01      	blt.n	80021da <_malloc_r+0x1a>
 80021d6:	42a9      	cmp	r1, r5
 80021d8:	d903      	bls.n	80021e2 <_malloc_r+0x22>
 80021da:	230c      	movs	r3, #12
 80021dc:	6033      	str	r3, [r6, #0]
 80021de:	2000      	movs	r0, #0
 80021e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021e2:	f000 fbed 	bl	80029c0 <__malloc_lock>
 80021e6:	4921      	ldr	r1, [pc, #132]	; (800226c <_malloc_r+0xac>)
 80021e8:	680a      	ldr	r2, [r1, #0]
 80021ea:	4614      	mov	r4, r2
 80021ec:	b99c      	cbnz	r4, 8002216 <_malloc_r+0x56>
 80021ee:	4f20      	ldr	r7, [pc, #128]	; (8002270 <_malloc_r+0xb0>)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b923      	cbnz	r3, 80021fe <_malloc_r+0x3e>
 80021f4:	4621      	mov	r1, r4
 80021f6:	4630      	mov	r0, r6
 80021f8:	f000 fb2a 	bl	8002850 <_sbrk_r>
 80021fc:	6038      	str	r0, [r7, #0]
 80021fe:	4629      	mov	r1, r5
 8002200:	4630      	mov	r0, r6
 8002202:	f000 fb25 	bl	8002850 <_sbrk_r>
 8002206:	1c43      	adds	r3, r0, #1
 8002208:	d123      	bne.n	8002252 <_malloc_r+0x92>
 800220a:	230c      	movs	r3, #12
 800220c:	4630      	mov	r0, r6
 800220e:	6033      	str	r3, [r6, #0]
 8002210:	f000 fbdc 	bl	80029cc <__malloc_unlock>
 8002214:	e7e3      	b.n	80021de <_malloc_r+0x1e>
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	1b5b      	subs	r3, r3, r5
 800221a:	d417      	bmi.n	800224c <_malloc_r+0x8c>
 800221c:	2b0b      	cmp	r3, #11
 800221e:	d903      	bls.n	8002228 <_malloc_r+0x68>
 8002220:	6023      	str	r3, [r4, #0]
 8002222:	441c      	add	r4, r3
 8002224:	6025      	str	r5, [r4, #0]
 8002226:	e004      	b.n	8002232 <_malloc_r+0x72>
 8002228:	6863      	ldr	r3, [r4, #4]
 800222a:	42a2      	cmp	r2, r4
 800222c:	bf0c      	ite	eq
 800222e:	600b      	streq	r3, [r1, #0]
 8002230:	6053      	strne	r3, [r2, #4]
 8002232:	4630      	mov	r0, r6
 8002234:	f000 fbca 	bl	80029cc <__malloc_unlock>
 8002238:	f104 000b 	add.w	r0, r4, #11
 800223c:	1d23      	adds	r3, r4, #4
 800223e:	f020 0007 	bic.w	r0, r0, #7
 8002242:	1ac2      	subs	r2, r0, r3
 8002244:	d0cc      	beq.n	80021e0 <_malloc_r+0x20>
 8002246:	1a1b      	subs	r3, r3, r0
 8002248:	50a3      	str	r3, [r4, r2]
 800224a:	e7c9      	b.n	80021e0 <_malloc_r+0x20>
 800224c:	4622      	mov	r2, r4
 800224e:	6864      	ldr	r4, [r4, #4]
 8002250:	e7cc      	b.n	80021ec <_malloc_r+0x2c>
 8002252:	1cc4      	adds	r4, r0, #3
 8002254:	f024 0403 	bic.w	r4, r4, #3
 8002258:	42a0      	cmp	r0, r4
 800225a:	d0e3      	beq.n	8002224 <_malloc_r+0x64>
 800225c:	1a21      	subs	r1, r4, r0
 800225e:	4630      	mov	r0, r6
 8002260:	f000 faf6 	bl	8002850 <_sbrk_r>
 8002264:	3001      	adds	r0, #1
 8002266:	d1dd      	bne.n	8002224 <_malloc_r+0x64>
 8002268:	e7cf      	b.n	800220a <_malloc_r+0x4a>
 800226a:	bf00      	nop
 800226c:	20000090 	.word	0x20000090
 8002270:	20000094 	.word	0x20000094

08002274 <__sfputc_r>:
 8002274:	6893      	ldr	r3, [r2, #8]
 8002276:	b410      	push	{r4}
 8002278:	3b01      	subs	r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	6093      	str	r3, [r2, #8]
 800227e:	da07      	bge.n	8002290 <__sfputc_r+0x1c>
 8002280:	6994      	ldr	r4, [r2, #24]
 8002282:	42a3      	cmp	r3, r4
 8002284:	db01      	blt.n	800228a <__sfputc_r+0x16>
 8002286:	290a      	cmp	r1, #10
 8002288:	d102      	bne.n	8002290 <__sfputc_r+0x1c>
 800228a:	bc10      	pop	{r4}
 800228c:	f7ff bc6e 	b.w	8001b6c <__swbuf_r>
 8002290:	6813      	ldr	r3, [r2, #0]
 8002292:	1c58      	adds	r0, r3, #1
 8002294:	6010      	str	r0, [r2, #0]
 8002296:	7019      	strb	r1, [r3, #0]
 8002298:	4608      	mov	r0, r1
 800229a:	bc10      	pop	{r4}
 800229c:	4770      	bx	lr

0800229e <__sfputs_r>:
 800229e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a0:	4606      	mov	r6, r0
 80022a2:	460f      	mov	r7, r1
 80022a4:	4614      	mov	r4, r2
 80022a6:	18d5      	adds	r5, r2, r3
 80022a8:	42ac      	cmp	r4, r5
 80022aa:	d101      	bne.n	80022b0 <__sfputs_r+0x12>
 80022ac:	2000      	movs	r0, #0
 80022ae:	e007      	b.n	80022c0 <__sfputs_r+0x22>
 80022b0:	463a      	mov	r2, r7
 80022b2:	4630      	mov	r0, r6
 80022b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022b8:	f7ff ffdc 	bl	8002274 <__sfputc_r>
 80022bc:	1c43      	adds	r3, r0, #1
 80022be:	d1f3      	bne.n	80022a8 <__sfputs_r+0xa>
 80022c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080022c4 <_vfiprintf_r>:
 80022c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022c8:	460d      	mov	r5, r1
 80022ca:	4614      	mov	r4, r2
 80022cc:	4698      	mov	r8, r3
 80022ce:	4606      	mov	r6, r0
 80022d0:	b09d      	sub	sp, #116	; 0x74
 80022d2:	b118      	cbz	r0, 80022dc <_vfiprintf_r+0x18>
 80022d4:	6983      	ldr	r3, [r0, #24]
 80022d6:	b90b      	cbnz	r3, 80022dc <_vfiprintf_r+0x18>
 80022d8:	f7ff fe22 	bl	8001f20 <__sinit>
 80022dc:	4b89      	ldr	r3, [pc, #548]	; (8002504 <_vfiprintf_r+0x240>)
 80022de:	429d      	cmp	r5, r3
 80022e0:	d11b      	bne.n	800231a <_vfiprintf_r+0x56>
 80022e2:	6875      	ldr	r5, [r6, #4]
 80022e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022e6:	07d9      	lsls	r1, r3, #31
 80022e8:	d405      	bmi.n	80022f6 <_vfiprintf_r+0x32>
 80022ea:	89ab      	ldrh	r3, [r5, #12]
 80022ec:	059a      	lsls	r2, r3, #22
 80022ee:	d402      	bmi.n	80022f6 <_vfiprintf_r+0x32>
 80022f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022f2:	f7ff feb3 	bl	800205c <__retarget_lock_acquire_recursive>
 80022f6:	89ab      	ldrh	r3, [r5, #12]
 80022f8:	071b      	lsls	r3, r3, #28
 80022fa:	d501      	bpl.n	8002300 <_vfiprintf_r+0x3c>
 80022fc:	692b      	ldr	r3, [r5, #16]
 80022fe:	b9eb      	cbnz	r3, 800233c <_vfiprintf_r+0x78>
 8002300:	4629      	mov	r1, r5
 8002302:	4630      	mov	r0, r6
 8002304:	f7ff fc84 	bl	8001c10 <__swsetup_r>
 8002308:	b1c0      	cbz	r0, 800233c <_vfiprintf_r+0x78>
 800230a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800230c:	07dc      	lsls	r4, r3, #31
 800230e:	d50e      	bpl.n	800232e <_vfiprintf_r+0x6a>
 8002310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002314:	b01d      	add	sp, #116	; 0x74
 8002316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800231a:	4b7b      	ldr	r3, [pc, #492]	; (8002508 <_vfiprintf_r+0x244>)
 800231c:	429d      	cmp	r5, r3
 800231e:	d101      	bne.n	8002324 <_vfiprintf_r+0x60>
 8002320:	68b5      	ldr	r5, [r6, #8]
 8002322:	e7df      	b.n	80022e4 <_vfiprintf_r+0x20>
 8002324:	4b79      	ldr	r3, [pc, #484]	; (800250c <_vfiprintf_r+0x248>)
 8002326:	429d      	cmp	r5, r3
 8002328:	bf08      	it	eq
 800232a:	68f5      	ldreq	r5, [r6, #12]
 800232c:	e7da      	b.n	80022e4 <_vfiprintf_r+0x20>
 800232e:	89ab      	ldrh	r3, [r5, #12]
 8002330:	0598      	lsls	r0, r3, #22
 8002332:	d4ed      	bmi.n	8002310 <_vfiprintf_r+0x4c>
 8002334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002336:	f7ff fe92 	bl	800205e <__retarget_lock_release_recursive>
 800233a:	e7e9      	b.n	8002310 <_vfiprintf_r+0x4c>
 800233c:	2300      	movs	r3, #0
 800233e:	9309      	str	r3, [sp, #36]	; 0x24
 8002340:	2320      	movs	r3, #32
 8002342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002346:	2330      	movs	r3, #48	; 0x30
 8002348:	f04f 0901 	mov.w	r9, #1
 800234c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002350:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002510 <_vfiprintf_r+0x24c>
 8002354:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002358:	4623      	mov	r3, r4
 800235a:	469a      	mov	sl, r3
 800235c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002360:	b10a      	cbz	r2, 8002366 <_vfiprintf_r+0xa2>
 8002362:	2a25      	cmp	r2, #37	; 0x25
 8002364:	d1f9      	bne.n	800235a <_vfiprintf_r+0x96>
 8002366:	ebba 0b04 	subs.w	fp, sl, r4
 800236a:	d00b      	beq.n	8002384 <_vfiprintf_r+0xc0>
 800236c:	465b      	mov	r3, fp
 800236e:	4622      	mov	r2, r4
 8002370:	4629      	mov	r1, r5
 8002372:	4630      	mov	r0, r6
 8002374:	f7ff ff93 	bl	800229e <__sfputs_r>
 8002378:	3001      	adds	r0, #1
 800237a:	f000 80aa 	beq.w	80024d2 <_vfiprintf_r+0x20e>
 800237e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002380:	445a      	add	r2, fp
 8002382:	9209      	str	r2, [sp, #36]	; 0x24
 8002384:	f89a 3000 	ldrb.w	r3, [sl]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80a2 	beq.w	80024d2 <_vfiprintf_r+0x20e>
 800238e:	2300      	movs	r3, #0
 8002390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002398:	f10a 0a01 	add.w	sl, sl, #1
 800239c:	9304      	str	r3, [sp, #16]
 800239e:	9307      	str	r3, [sp, #28]
 80023a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023a4:	931a      	str	r3, [sp, #104]	; 0x68
 80023a6:	4654      	mov	r4, sl
 80023a8:	2205      	movs	r2, #5
 80023aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023ae:	4858      	ldr	r0, [pc, #352]	; (8002510 <_vfiprintf_r+0x24c>)
 80023b0:	f000 faf8 	bl	80029a4 <memchr>
 80023b4:	9a04      	ldr	r2, [sp, #16]
 80023b6:	b9d8      	cbnz	r0, 80023f0 <_vfiprintf_r+0x12c>
 80023b8:	06d1      	lsls	r1, r2, #27
 80023ba:	bf44      	itt	mi
 80023bc:	2320      	movmi	r3, #32
 80023be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023c2:	0713      	lsls	r3, r2, #28
 80023c4:	bf44      	itt	mi
 80023c6:	232b      	movmi	r3, #43	; 0x2b
 80023c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023cc:	f89a 3000 	ldrb.w	r3, [sl]
 80023d0:	2b2a      	cmp	r3, #42	; 0x2a
 80023d2:	d015      	beq.n	8002400 <_vfiprintf_r+0x13c>
 80023d4:	4654      	mov	r4, sl
 80023d6:	2000      	movs	r0, #0
 80023d8:	f04f 0c0a 	mov.w	ip, #10
 80023dc:	9a07      	ldr	r2, [sp, #28]
 80023de:	4621      	mov	r1, r4
 80023e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023e4:	3b30      	subs	r3, #48	; 0x30
 80023e6:	2b09      	cmp	r3, #9
 80023e8:	d94e      	bls.n	8002488 <_vfiprintf_r+0x1c4>
 80023ea:	b1b0      	cbz	r0, 800241a <_vfiprintf_r+0x156>
 80023ec:	9207      	str	r2, [sp, #28]
 80023ee:	e014      	b.n	800241a <_vfiprintf_r+0x156>
 80023f0:	eba0 0308 	sub.w	r3, r0, r8
 80023f4:	fa09 f303 	lsl.w	r3, r9, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	46a2      	mov	sl, r4
 80023fc:	9304      	str	r3, [sp, #16]
 80023fe:	e7d2      	b.n	80023a6 <_vfiprintf_r+0xe2>
 8002400:	9b03      	ldr	r3, [sp, #12]
 8002402:	1d19      	adds	r1, r3, #4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	9103      	str	r1, [sp, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	bfbb      	ittet	lt
 800240c:	425b      	neglt	r3, r3
 800240e:	f042 0202 	orrlt.w	r2, r2, #2
 8002412:	9307      	strge	r3, [sp, #28]
 8002414:	9307      	strlt	r3, [sp, #28]
 8002416:	bfb8      	it	lt
 8002418:	9204      	strlt	r2, [sp, #16]
 800241a:	7823      	ldrb	r3, [r4, #0]
 800241c:	2b2e      	cmp	r3, #46	; 0x2e
 800241e:	d10c      	bne.n	800243a <_vfiprintf_r+0x176>
 8002420:	7863      	ldrb	r3, [r4, #1]
 8002422:	2b2a      	cmp	r3, #42	; 0x2a
 8002424:	d135      	bne.n	8002492 <_vfiprintf_r+0x1ce>
 8002426:	9b03      	ldr	r3, [sp, #12]
 8002428:	3402      	adds	r4, #2
 800242a:	1d1a      	adds	r2, r3, #4
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	9203      	str	r2, [sp, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	bfb8      	it	lt
 8002434:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002438:	9305      	str	r3, [sp, #20]
 800243a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002520 <_vfiprintf_r+0x25c>
 800243e:	2203      	movs	r2, #3
 8002440:	4650      	mov	r0, sl
 8002442:	7821      	ldrb	r1, [r4, #0]
 8002444:	f000 faae 	bl	80029a4 <memchr>
 8002448:	b140      	cbz	r0, 800245c <_vfiprintf_r+0x198>
 800244a:	2340      	movs	r3, #64	; 0x40
 800244c:	eba0 000a 	sub.w	r0, r0, sl
 8002450:	fa03 f000 	lsl.w	r0, r3, r0
 8002454:	9b04      	ldr	r3, [sp, #16]
 8002456:	3401      	adds	r4, #1
 8002458:	4303      	orrs	r3, r0
 800245a:	9304      	str	r3, [sp, #16]
 800245c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002460:	2206      	movs	r2, #6
 8002462:	482c      	ldr	r0, [pc, #176]	; (8002514 <_vfiprintf_r+0x250>)
 8002464:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002468:	f000 fa9c 	bl	80029a4 <memchr>
 800246c:	2800      	cmp	r0, #0
 800246e:	d03f      	beq.n	80024f0 <_vfiprintf_r+0x22c>
 8002470:	4b29      	ldr	r3, [pc, #164]	; (8002518 <_vfiprintf_r+0x254>)
 8002472:	bb1b      	cbnz	r3, 80024bc <_vfiprintf_r+0x1f8>
 8002474:	9b03      	ldr	r3, [sp, #12]
 8002476:	3307      	adds	r3, #7
 8002478:	f023 0307 	bic.w	r3, r3, #7
 800247c:	3308      	adds	r3, #8
 800247e:	9303      	str	r3, [sp, #12]
 8002480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002482:	443b      	add	r3, r7
 8002484:	9309      	str	r3, [sp, #36]	; 0x24
 8002486:	e767      	b.n	8002358 <_vfiprintf_r+0x94>
 8002488:	460c      	mov	r4, r1
 800248a:	2001      	movs	r0, #1
 800248c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002490:	e7a5      	b.n	80023de <_vfiprintf_r+0x11a>
 8002492:	2300      	movs	r3, #0
 8002494:	f04f 0c0a 	mov.w	ip, #10
 8002498:	4619      	mov	r1, r3
 800249a:	3401      	adds	r4, #1
 800249c:	9305      	str	r3, [sp, #20]
 800249e:	4620      	mov	r0, r4
 80024a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024a4:	3a30      	subs	r2, #48	; 0x30
 80024a6:	2a09      	cmp	r2, #9
 80024a8:	d903      	bls.n	80024b2 <_vfiprintf_r+0x1ee>
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0c5      	beq.n	800243a <_vfiprintf_r+0x176>
 80024ae:	9105      	str	r1, [sp, #20]
 80024b0:	e7c3      	b.n	800243a <_vfiprintf_r+0x176>
 80024b2:	4604      	mov	r4, r0
 80024b4:	2301      	movs	r3, #1
 80024b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80024ba:	e7f0      	b.n	800249e <_vfiprintf_r+0x1da>
 80024bc:	ab03      	add	r3, sp, #12
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	462a      	mov	r2, r5
 80024c2:	4630      	mov	r0, r6
 80024c4:	4b15      	ldr	r3, [pc, #84]	; (800251c <_vfiprintf_r+0x258>)
 80024c6:	a904      	add	r1, sp, #16
 80024c8:	f3af 8000 	nop.w
 80024cc:	4607      	mov	r7, r0
 80024ce:	1c78      	adds	r0, r7, #1
 80024d0:	d1d6      	bne.n	8002480 <_vfiprintf_r+0x1bc>
 80024d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80024d4:	07d9      	lsls	r1, r3, #31
 80024d6:	d405      	bmi.n	80024e4 <_vfiprintf_r+0x220>
 80024d8:	89ab      	ldrh	r3, [r5, #12]
 80024da:	059a      	lsls	r2, r3, #22
 80024dc:	d402      	bmi.n	80024e4 <_vfiprintf_r+0x220>
 80024de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80024e0:	f7ff fdbd 	bl	800205e <__retarget_lock_release_recursive>
 80024e4:	89ab      	ldrh	r3, [r5, #12]
 80024e6:	065b      	lsls	r3, r3, #25
 80024e8:	f53f af12 	bmi.w	8002310 <_vfiprintf_r+0x4c>
 80024ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024ee:	e711      	b.n	8002314 <_vfiprintf_r+0x50>
 80024f0:	ab03      	add	r3, sp, #12
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	462a      	mov	r2, r5
 80024f6:	4630      	mov	r0, r6
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <_vfiprintf_r+0x258>)
 80024fa:	a904      	add	r1, sp, #16
 80024fc:	f000 f882 	bl	8002604 <_printf_i>
 8002500:	e7e4      	b.n	80024cc <_vfiprintf_r+0x208>
 8002502:	bf00      	nop
 8002504:	08002a90 	.word	0x08002a90
 8002508:	08002ab0 	.word	0x08002ab0
 800250c:	08002a70 	.word	0x08002a70
 8002510:	08002ad0 	.word	0x08002ad0
 8002514:	08002ada 	.word	0x08002ada
 8002518:	00000000 	.word	0x00000000
 800251c:	0800229f 	.word	0x0800229f
 8002520:	08002ad6 	.word	0x08002ad6

08002524 <_printf_common>:
 8002524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002528:	4616      	mov	r6, r2
 800252a:	4699      	mov	r9, r3
 800252c:	688a      	ldr	r2, [r1, #8]
 800252e:	690b      	ldr	r3, [r1, #16]
 8002530:	4607      	mov	r7, r0
 8002532:	4293      	cmp	r3, r2
 8002534:	bfb8      	it	lt
 8002536:	4613      	movlt	r3, r2
 8002538:	6033      	str	r3, [r6, #0]
 800253a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800253e:	460c      	mov	r4, r1
 8002540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002544:	b10a      	cbz	r2, 800254a <_printf_common+0x26>
 8002546:	3301      	adds	r3, #1
 8002548:	6033      	str	r3, [r6, #0]
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	0699      	lsls	r1, r3, #26
 800254e:	bf42      	ittt	mi
 8002550:	6833      	ldrmi	r3, [r6, #0]
 8002552:	3302      	addmi	r3, #2
 8002554:	6033      	strmi	r3, [r6, #0]
 8002556:	6825      	ldr	r5, [r4, #0]
 8002558:	f015 0506 	ands.w	r5, r5, #6
 800255c:	d106      	bne.n	800256c <_printf_common+0x48>
 800255e:	f104 0a19 	add.w	sl, r4, #25
 8002562:	68e3      	ldr	r3, [r4, #12]
 8002564:	6832      	ldr	r2, [r6, #0]
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	42ab      	cmp	r3, r5
 800256a:	dc28      	bgt.n	80025be <_printf_common+0x9a>
 800256c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002570:	1e13      	subs	r3, r2, #0
 8002572:	6822      	ldr	r2, [r4, #0]
 8002574:	bf18      	it	ne
 8002576:	2301      	movne	r3, #1
 8002578:	0692      	lsls	r2, r2, #26
 800257a:	d42d      	bmi.n	80025d8 <_printf_common+0xb4>
 800257c:	4649      	mov	r1, r9
 800257e:	4638      	mov	r0, r7
 8002580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002584:	47c0      	blx	r8
 8002586:	3001      	adds	r0, #1
 8002588:	d020      	beq.n	80025cc <_printf_common+0xa8>
 800258a:	6823      	ldr	r3, [r4, #0]
 800258c:	68e5      	ldr	r5, [r4, #12]
 800258e:	f003 0306 	and.w	r3, r3, #6
 8002592:	2b04      	cmp	r3, #4
 8002594:	bf18      	it	ne
 8002596:	2500      	movne	r5, #0
 8002598:	6832      	ldr	r2, [r6, #0]
 800259a:	f04f 0600 	mov.w	r6, #0
 800259e:	68a3      	ldr	r3, [r4, #8]
 80025a0:	bf08      	it	eq
 80025a2:	1aad      	subeq	r5, r5, r2
 80025a4:	6922      	ldr	r2, [r4, #16]
 80025a6:	bf08      	it	eq
 80025a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025ac:	4293      	cmp	r3, r2
 80025ae:	bfc4      	itt	gt
 80025b0:	1a9b      	subgt	r3, r3, r2
 80025b2:	18ed      	addgt	r5, r5, r3
 80025b4:	341a      	adds	r4, #26
 80025b6:	42b5      	cmp	r5, r6
 80025b8:	d11a      	bne.n	80025f0 <_printf_common+0xcc>
 80025ba:	2000      	movs	r0, #0
 80025bc:	e008      	b.n	80025d0 <_printf_common+0xac>
 80025be:	2301      	movs	r3, #1
 80025c0:	4652      	mov	r2, sl
 80025c2:	4649      	mov	r1, r9
 80025c4:	4638      	mov	r0, r7
 80025c6:	47c0      	blx	r8
 80025c8:	3001      	adds	r0, #1
 80025ca:	d103      	bne.n	80025d4 <_printf_common+0xb0>
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025d4:	3501      	adds	r5, #1
 80025d6:	e7c4      	b.n	8002562 <_printf_common+0x3e>
 80025d8:	2030      	movs	r0, #48	; 0x30
 80025da:	18e1      	adds	r1, r4, r3
 80025dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025e6:	4422      	add	r2, r4
 80025e8:	3302      	adds	r3, #2
 80025ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80025ee:	e7c5      	b.n	800257c <_printf_common+0x58>
 80025f0:	2301      	movs	r3, #1
 80025f2:	4622      	mov	r2, r4
 80025f4:	4649      	mov	r1, r9
 80025f6:	4638      	mov	r0, r7
 80025f8:	47c0      	blx	r8
 80025fa:	3001      	adds	r0, #1
 80025fc:	d0e6      	beq.n	80025cc <_printf_common+0xa8>
 80025fe:	3601      	adds	r6, #1
 8002600:	e7d9      	b.n	80025b6 <_printf_common+0x92>
	...

08002604 <_printf_i>:
 8002604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002608:	460c      	mov	r4, r1
 800260a:	7e27      	ldrb	r7, [r4, #24]
 800260c:	4691      	mov	r9, r2
 800260e:	2f78      	cmp	r7, #120	; 0x78
 8002610:	4680      	mov	r8, r0
 8002612:	469a      	mov	sl, r3
 8002614:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002616:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800261a:	d807      	bhi.n	800262c <_printf_i+0x28>
 800261c:	2f62      	cmp	r7, #98	; 0x62
 800261e:	d80a      	bhi.n	8002636 <_printf_i+0x32>
 8002620:	2f00      	cmp	r7, #0
 8002622:	f000 80d9 	beq.w	80027d8 <_printf_i+0x1d4>
 8002626:	2f58      	cmp	r7, #88	; 0x58
 8002628:	f000 80a4 	beq.w	8002774 <_printf_i+0x170>
 800262c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002630:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002634:	e03a      	b.n	80026ac <_printf_i+0xa8>
 8002636:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800263a:	2b15      	cmp	r3, #21
 800263c:	d8f6      	bhi.n	800262c <_printf_i+0x28>
 800263e:	a001      	add	r0, pc, #4	; (adr r0, 8002644 <_printf_i+0x40>)
 8002640:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002644:	0800269d 	.word	0x0800269d
 8002648:	080026b1 	.word	0x080026b1
 800264c:	0800262d 	.word	0x0800262d
 8002650:	0800262d 	.word	0x0800262d
 8002654:	0800262d 	.word	0x0800262d
 8002658:	0800262d 	.word	0x0800262d
 800265c:	080026b1 	.word	0x080026b1
 8002660:	0800262d 	.word	0x0800262d
 8002664:	0800262d 	.word	0x0800262d
 8002668:	0800262d 	.word	0x0800262d
 800266c:	0800262d 	.word	0x0800262d
 8002670:	080027bf 	.word	0x080027bf
 8002674:	080026e1 	.word	0x080026e1
 8002678:	080027a1 	.word	0x080027a1
 800267c:	0800262d 	.word	0x0800262d
 8002680:	0800262d 	.word	0x0800262d
 8002684:	080027e1 	.word	0x080027e1
 8002688:	0800262d 	.word	0x0800262d
 800268c:	080026e1 	.word	0x080026e1
 8002690:	0800262d 	.word	0x0800262d
 8002694:	0800262d 	.word	0x0800262d
 8002698:	080027a9 	.word	0x080027a9
 800269c:	680b      	ldr	r3, [r1, #0]
 800269e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80026a2:	1d1a      	adds	r2, r3, #4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	600a      	str	r2, [r1, #0]
 80026a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0a4      	b.n	80027fa <_printf_i+0x1f6>
 80026b0:	6825      	ldr	r5, [r4, #0]
 80026b2:	6808      	ldr	r0, [r1, #0]
 80026b4:	062e      	lsls	r6, r5, #24
 80026b6:	f100 0304 	add.w	r3, r0, #4
 80026ba:	d50a      	bpl.n	80026d2 <_printf_i+0xce>
 80026bc:	6805      	ldr	r5, [r0, #0]
 80026be:	600b      	str	r3, [r1, #0]
 80026c0:	2d00      	cmp	r5, #0
 80026c2:	da03      	bge.n	80026cc <_printf_i+0xc8>
 80026c4:	232d      	movs	r3, #45	; 0x2d
 80026c6:	426d      	negs	r5, r5
 80026c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026cc:	230a      	movs	r3, #10
 80026ce:	485e      	ldr	r0, [pc, #376]	; (8002848 <_printf_i+0x244>)
 80026d0:	e019      	b.n	8002706 <_printf_i+0x102>
 80026d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80026d6:	6805      	ldr	r5, [r0, #0]
 80026d8:	600b      	str	r3, [r1, #0]
 80026da:	bf18      	it	ne
 80026dc:	b22d      	sxthne	r5, r5
 80026de:	e7ef      	b.n	80026c0 <_printf_i+0xbc>
 80026e0:	680b      	ldr	r3, [r1, #0]
 80026e2:	6825      	ldr	r5, [r4, #0]
 80026e4:	1d18      	adds	r0, r3, #4
 80026e6:	6008      	str	r0, [r1, #0]
 80026e8:	0628      	lsls	r0, r5, #24
 80026ea:	d501      	bpl.n	80026f0 <_printf_i+0xec>
 80026ec:	681d      	ldr	r5, [r3, #0]
 80026ee:	e002      	b.n	80026f6 <_printf_i+0xf2>
 80026f0:	0669      	lsls	r1, r5, #25
 80026f2:	d5fb      	bpl.n	80026ec <_printf_i+0xe8>
 80026f4:	881d      	ldrh	r5, [r3, #0]
 80026f6:	2f6f      	cmp	r7, #111	; 0x6f
 80026f8:	bf0c      	ite	eq
 80026fa:	2308      	moveq	r3, #8
 80026fc:	230a      	movne	r3, #10
 80026fe:	4852      	ldr	r0, [pc, #328]	; (8002848 <_printf_i+0x244>)
 8002700:	2100      	movs	r1, #0
 8002702:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002706:	6866      	ldr	r6, [r4, #4]
 8002708:	2e00      	cmp	r6, #0
 800270a:	bfa8      	it	ge
 800270c:	6821      	ldrge	r1, [r4, #0]
 800270e:	60a6      	str	r6, [r4, #8]
 8002710:	bfa4      	itt	ge
 8002712:	f021 0104 	bicge.w	r1, r1, #4
 8002716:	6021      	strge	r1, [r4, #0]
 8002718:	b90d      	cbnz	r5, 800271e <_printf_i+0x11a>
 800271a:	2e00      	cmp	r6, #0
 800271c:	d04d      	beq.n	80027ba <_printf_i+0x1b6>
 800271e:	4616      	mov	r6, r2
 8002720:	fbb5 f1f3 	udiv	r1, r5, r3
 8002724:	fb03 5711 	mls	r7, r3, r1, r5
 8002728:	5dc7      	ldrb	r7, [r0, r7]
 800272a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800272e:	462f      	mov	r7, r5
 8002730:	42bb      	cmp	r3, r7
 8002732:	460d      	mov	r5, r1
 8002734:	d9f4      	bls.n	8002720 <_printf_i+0x11c>
 8002736:	2b08      	cmp	r3, #8
 8002738:	d10b      	bne.n	8002752 <_printf_i+0x14e>
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	07df      	lsls	r7, r3, #31
 800273e:	d508      	bpl.n	8002752 <_printf_i+0x14e>
 8002740:	6923      	ldr	r3, [r4, #16]
 8002742:	6861      	ldr	r1, [r4, #4]
 8002744:	4299      	cmp	r1, r3
 8002746:	bfde      	ittt	le
 8002748:	2330      	movle	r3, #48	; 0x30
 800274a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800274e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002752:	1b92      	subs	r2, r2, r6
 8002754:	6122      	str	r2, [r4, #16]
 8002756:	464b      	mov	r3, r9
 8002758:	4621      	mov	r1, r4
 800275a:	4640      	mov	r0, r8
 800275c:	f8cd a000 	str.w	sl, [sp]
 8002760:	aa03      	add	r2, sp, #12
 8002762:	f7ff fedf 	bl	8002524 <_printf_common>
 8002766:	3001      	adds	r0, #1
 8002768:	d14c      	bne.n	8002804 <_printf_i+0x200>
 800276a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800276e:	b004      	add	sp, #16
 8002770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002774:	4834      	ldr	r0, [pc, #208]	; (8002848 <_printf_i+0x244>)
 8002776:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800277a:	680e      	ldr	r6, [r1, #0]
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002782:	061f      	lsls	r7, r3, #24
 8002784:	600e      	str	r6, [r1, #0]
 8002786:	d514      	bpl.n	80027b2 <_printf_i+0x1ae>
 8002788:	07d9      	lsls	r1, r3, #31
 800278a:	bf44      	itt	mi
 800278c:	f043 0320 	orrmi.w	r3, r3, #32
 8002790:	6023      	strmi	r3, [r4, #0]
 8002792:	b91d      	cbnz	r5, 800279c <_printf_i+0x198>
 8002794:	6823      	ldr	r3, [r4, #0]
 8002796:	f023 0320 	bic.w	r3, r3, #32
 800279a:	6023      	str	r3, [r4, #0]
 800279c:	2310      	movs	r3, #16
 800279e:	e7af      	b.n	8002700 <_printf_i+0xfc>
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	f043 0320 	orr.w	r3, r3, #32
 80027a6:	6023      	str	r3, [r4, #0]
 80027a8:	2378      	movs	r3, #120	; 0x78
 80027aa:	4828      	ldr	r0, [pc, #160]	; (800284c <_printf_i+0x248>)
 80027ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027b0:	e7e3      	b.n	800277a <_printf_i+0x176>
 80027b2:	065e      	lsls	r6, r3, #25
 80027b4:	bf48      	it	mi
 80027b6:	b2ad      	uxthmi	r5, r5
 80027b8:	e7e6      	b.n	8002788 <_printf_i+0x184>
 80027ba:	4616      	mov	r6, r2
 80027bc:	e7bb      	b.n	8002736 <_printf_i+0x132>
 80027be:	680b      	ldr	r3, [r1, #0]
 80027c0:	6826      	ldr	r6, [r4, #0]
 80027c2:	1d1d      	adds	r5, r3, #4
 80027c4:	6960      	ldr	r0, [r4, #20]
 80027c6:	600d      	str	r5, [r1, #0]
 80027c8:	0635      	lsls	r5, r6, #24
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	d501      	bpl.n	80027d2 <_printf_i+0x1ce>
 80027ce:	6018      	str	r0, [r3, #0]
 80027d0:	e002      	b.n	80027d8 <_printf_i+0x1d4>
 80027d2:	0671      	lsls	r1, r6, #25
 80027d4:	d5fb      	bpl.n	80027ce <_printf_i+0x1ca>
 80027d6:	8018      	strh	r0, [r3, #0]
 80027d8:	2300      	movs	r3, #0
 80027da:	4616      	mov	r6, r2
 80027dc:	6123      	str	r3, [r4, #16]
 80027de:	e7ba      	b.n	8002756 <_printf_i+0x152>
 80027e0:	680b      	ldr	r3, [r1, #0]
 80027e2:	1d1a      	adds	r2, r3, #4
 80027e4:	600a      	str	r2, [r1, #0]
 80027e6:	681e      	ldr	r6, [r3, #0]
 80027e8:	2100      	movs	r1, #0
 80027ea:	4630      	mov	r0, r6
 80027ec:	6862      	ldr	r2, [r4, #4]
 80027ee:	f000 f8d9 	bl	80029a4 <memchr>
 80027f2:	b108      	cbz	r0, 80027f8 <_printf_i+0x1f4>
 80027f4:	1b80      	subs	r0, r0, r6
 80027f6:	6060      	str	r0, [r4, #4]
 80027f8:	6863      	ldr	r3, [r4, #4]
 80027fa:	6123      	str	r3, [r4, #16]
 80027fc:	2300      	movs	r3, #0
 80027fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002802:	e7a8      	b.n	8002756 <_printf_i+0x152>
 8002804:	4632      	mov	r2, r6
 8002806:	4649      	mov	r1, r9
 8002808:	4640      	mov	r0, r8
 800280a:	6923      	ldr	r3, [r4, #16]
 800280c:	47d0      	blx	sl
 800280e:	3001      	adds	r0, #1
 8002810:	d0ab      	beq.n	800276a <_printf_i+0x166>
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	079b      	lsls	r3, r3, #30
 8002816:	d413      	bmi.n	8002840 <_printf_i+0x23c>
 8002818:	68e0      	ldr	r0, [r4, #12]
 800281a:	9b03      	ldr	r3, [sp, #12]
 800281c:	4298      	cmp	r0, r3
 800281e:	bfb8      	it	lt
 8002820:	4618      	movlt	r0, r3
 8002822:	e7a4      	b.n	800276e <_printf_i+0x16a>
 8002824:	2301      	movs	r3, #1
 8002826:	4632      	mov	r2, r6
 8002828:	4649      	mov	r1, r9
 800282a:	4640      	mov	r0, r8
 800282c:	47d0      	blx	sl
 800282e:	3001      	adds	r0, #1
 8002830:	d09b      	beq.n	800276a <_printf_i+0x166>
 8002832:	3501      	adds	r5, #1
 8002834:	68e3      	ldr	r3, [r4, #12]
 8002836:	9903      	ldr	r1, [sp, #12]
 8002838:	1a5b      	subs	r3, r3, r1
 800283a:	42ab      	cmp	r3, r5
 800283c:	dcf2      	bgt.n	8002824 <_printf_i+0x220>
 800283e:	e7eb      	b.n	8002818 <_printf_i+0x214>
 8002840:	2500      	movs	r5, #0
 8002842:	f104 0619 	add.w	r6, r4, #25
 8002846:	e7f5      	b.n	8002834 <_printf_i+0x230>
 8002848:	08002ae1 	.word	0x08002ae1
 800284c:	08002af2 	.word	0x08002af2

08002850 <_sbrk_r>:
 8002850:	b538      	push	{r3, r4, r5, lr}
 8002852:	2300      	movs	r3, #0
 8002854:	4d05      	ldr	r5, [pc, #20]	; (800286c <_sbrk_r+0x1c>)
 8002856:	4604      	mov	r4, r0
 8002858:	4608      	mov	r0, r1
 800285a:	602b      	str	r3, [r5, #0]
 800285c:	f7fd fefa 	bl	8000654 <_sbrk>
 8002860:	1c43      	adds	r3, r0, #1
 8002862:	d102      	bne.n	800286a <_sbrk_r+0x1a>
 8002864:	682b      	ldr	r3, [r5, #0]
 8002866:	b103      	cbz	r3, 800286a <_sbrk_r+0x1a>
 8002868:	6023      	str	r3, [r4, #0]
 800286a:	bd38      	pop	{r3, r4, r5, pc}
 800286c:	200000f0 	.word	0x200000f0

08002870 <__sread>:
 8002870:	b510      	push	{r4, lr}
 8002872:	460c      	mov	r4, r1
 8002874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002878:	f000 f8ae 	bl	80029d8 <_read_r>
 800287c:	2800      	cmp	r0, #0
 800287e:	bfab      	itete	ge
 8002880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002882:	89a3      	ldrhlt	r3, [r4, #12]
 8002884:	181b      	addge	r3, r3, r0
 8002886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800288a:	bfac      	ite	ge
 800288c:	6563      	strge	r3, [r4, #84]	; 0x54
 800288e:	81a3      	strhlt	r3, [r4, #12]
 8002890:	bd10      	pop	{r4, pc}

08002892 <__swrite>:
 8002892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002896:	461f      	mov	r7, r3
 8002898:	898b      	ldrh	r3, [r1, #12]
 800289a:	4605      	mov	r5, r0
 800289c:	05db      	lsls	r3, r3, #23
 800289e:	460c      	mov	r4, r1
 80028a0:	4616      	mov	r6, r2
 80028a2:	d505      	bpl.n	80028b0 <__swrite+0x1e>
 80028a4:	2302      	movs	r3, #2
 80028a6:	2200      	movs	r2, #0
 80028a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028ac:	f000 f868 	bl	8002980 <_lseek_r>
 80028b0:	89a3      	ldrh	r3, [r4, #12]
 80028b2:	4632      	mov	r2, r6
 80028b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028b8:	81a3      	strh	r3, [r4, #12]
 80028ba:	4628      	mov	r0, r5
 80028bc:	463b      	mov	r3, r7
 80028be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028c6:	f000 b817 	b.w	80028f8 <_write_r>

080028ca <__sseek>:
 80028ca:	b510      	push	{r4, lr}
 80028cc:	460c      	mov	r4, r1
 80028ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028d2:	f000 f855 	bl	8002980 <_lseek_r>
 80028d6:	1c43      	adds	r3, r0, #1
 80028d8:	89a3      	ldrh	r3, [r4, #12]
 80028da:	bf15      	itete	ne
 80028dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80028de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80028e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80028e6:	81a3      	strheq	r3, [r4, #12]
 80028e8:	bf18      	it	ne
 80028ea:	81a3      	strhne	r3, [r4, #12]
 80028ec:	bd10      	pop	{r4, pc}

080028ee <__sclose>:
 80028ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028f2:	f000 b813 	b.w	800291c <_close_r>
	...

080028f8 <_write_r>:
 80028f8:	b538      	push	{r3, r4, r5, lr}
 80028fa:	4604      	mov	r4, r0
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
 8002900:	2200      	movs	r2, #0
 8002902:	4d05      	ldr	r5, [pc, #20]	; (8002918 <_write_r+0x20>)
 8002904:	602a      	str	r2, [r5, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	f7fd fe57 	bl	80005ba <_write>
 800290c:	1c43      	adds	r3, r0, #1
 800290e:	d102      	bne.n	8002916 <_write_r+0x1e>
 8002910:	682b      	ldr	r3, [r5, #0]
 8002912:	b103      	cbz	r3, 8002916 <_write_r+0x1e>
 8002914:	6023      	str	r3, [r4, #0]
 8002916:	bd38      	pop	{r3, r4, r5, pc}
 8002918:	200000f0 	.word	0x200000f0

0800291c <_close_r>:
 800291c:	b538      	push	{r3, r4, r5, lr}
 800291e:	2300      	movs	r3, #0
 8002920:	4d05      	ldr	r5, [pc, #20]	; (8002938 <_close_r+0x1c>)
 8002922:	4604      	mov	r4, r0
 8002924:	4608      	mov	r0, r1
 8002926:	602b      	str	r3, [r5, #0]
 8002928:	f7fd fe63 	bl	80005f2 <_close>
 800292c:	1c43      	adds	r3, r0, #1
 800292e:	d102      	bne.n	8002936 <_close_r+0x1a>
 8002930:	682b      	ldr	r3, [r5, #0]
 8002932:	b103      	cbz	r3, 8002936 <_close_r+0x1a>
 8002934:	6023      	str	r3, [r4, #0]
 8002936:	bd38      	pop	{r3, r4, r5, pc}
 8002938:	200000f0 	.word	0x200000f0

0800293c <_fstat_r>:
 800293c:	b538      	push	{r3, r4, r5, lr}
 800293e:	2300      	movs	r3, #0
 8002940:	4d06      	ldr	r5, [pc, #24]	; (800295c <_fstat_r+0x20>)
 8002942:	4604      	mov	r4, r0
 8002944:	4608      	mov	r0, r1
 8002946:	4611      	mov	r1, r2
 8002948:	602b      	str	r3, [r5, #0]
 800294a:	f7fd fe5d 	bl	8000608 <_fstat>
 800294e:	1c43      	adds	r3, r0, #1
 8002950:	d102      	bne.n	8002958 <_fstat_r+0x1c>
 8002952:	682b      	ldr	r3, [r5, #0]
 8002954:	b103      	cbz	r3, 8002958 <_fstat_r+0x1c>
 8002956:	6023      	str	r3, [r4, #0]
 8002958:	bd38      	pop	{r3, r4, r5, pc}
 800295a:	bf00      	nop
 800295c:	200000f0 	.word	0x200000f0

08002960 <_isatty_r>:
 8002960:	b538      	push	{r3, r4, r5, lr}
 8002962:	2300      	movs	r3, #0
 8002964:	4d05      	ldr	r5, [pc, #20]	; (800297c <_isatty_r+0x1c>)
 8002966:	4604      	mov	r4, r0
 8002968:	4608      	mov	r0, r1
 800296a:	602b      	str	r3, [r5, #0]
 800296c:	f7fd fe5b 	bl	8000626 <_isatty>
 8002970:	1c43      	adds	r3, r0, #1
 8002972:	d102      	bne.n	800297a <_isatty_r+0x1a>
 8002974:	682b      	ldr	r3, [r5, #0]
 8002976:	b103      	cbz	r3, 800297a <_isatty_r+0x1a>
 8002978:	6023      	str	r3, [r4, #0]
 800297a:	bd38      	pop	{r3, r4, r5, pc}
 800297c:	200000f0 	.word	0x200000f0

08002980 <_lseek_r>:
 8002980:	b538      	push	{r3, r4, r5, lr}
 8002982:	4604      	mov	r4, r0
 8002984:	4608      	mov	r0, r1
 8002986:	4611      	mov	r1, r2
 8002988:	2200      	movs	r2, #0
 800298a:	4d05      	ldr	r5, [pc, #20]	; (80029a0 <_lseek_r+0x20>)
 800298c:	602a      	str	r2, [r5, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	f7fd fe53 	bl	800063a <_lseek>
 8002994:	1c43      	adds	r3, r0, #1
 8002996:	d102      	bne.n	800299e <_lseek_r+0x1e>
 8002998:	682b      	ldr	r3, [r5, #0]
 800299a:	b103      	cbz	r3, 800299e <_lseek_r+0x1e>
 800299c:	6023      	str	r3, [r4, #0]
 800299e:	bd38      	pop	{r3, r4, r5, pc}
 80029a0:	200000f0 	.word	0x200000f0

080029a4 <memchr>:
 80029a4:	4603      	mov	r3, r0
 80029a6:	b510      	push	{r4, lr}
 80029a8:	b2c9      	uxtb	r1, r1
 80029aa:	4402      	add	r2, r0
 80029ac:	4293      	cmp	r3, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	d101      	bne.n	80029b6 <memchr+0x12>
 80029b2:	2000      	movs	r0, #0
 80029b4:	e003      	b.n	80029be <memchr+0x1a>
 80029b6:	7804      	ldrb	r4, [r0, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	428c      	cmp	r4, r1
 80029bc:	d1f6      	bne.n	80029ac <memchr+0x8>
 80029be:	bd10      	pop	{r4, pc}

080029c0 <__malloc_lock>:
 80029c0:	4801      	ldr	r0, [pc, #4]	; (80029c8 <__malloc_lock+0x8>)
 80029c2:	f7ff bb4b 	b.w	800205c <__retarget_lock_acquire_recursive>
 80029c6:	bf00      	nop
 80029c8:	200000e8 	.word	0x200000e8

080029cc <__malloc_unlock>:
 80029cc:	4801      	ldr	r0, [pc, #4]	; (80029d4 <__malloc_unlock+0x8>)
 80029ce:	f7ff bb46 	b.w	800205e <__retarget_lock_release_recursive>
 80029d2:	bf00      	nop
 80029d4:	200000e8 	.word	0x200000e8

080029d8 <_read_r>:
 80029d8:	b538      	push	{r3, r4, r5, lr}
 80029da:	4604      	mov	r4, r0
 80029dc:	4608      	mov	r0, r1
 80029de:	4611      	mov	r1, r2
 80029e0:	2200      	movs	r2, #0
 80029e2:	4d05      	ldr	r5, [pc, #20]	; (80029f8 <_read_r+0x20>)
 80029e4:	602a      	str	r2, [r5, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	f7fd fdca 	bl	8000580 <_read>
 80029ec:	1c43      	adds	r3, r0, #1
 80029ee:	d102      	bne.n	80029f6 <_read_r+0x1e>
 80029f0:	682b      	ldr	r3, [r5, #0]
 80029f2:	b103      	cbz	r3, 80029f6 <_read_r+0x1e>
 80029f4:	6023      	str	r3, [r4, #0]
 80029f6:	bd38      	pop	{r3, r4, r5, pc}
 80029f8:	200000f0 	.word	0x200000f0

080029fc <_init>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	bf00      	nop
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr

08002a08 <_fini>:
 8002a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0a:	bf00      	nop
 8002a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0e:	bc08      	pop	{r3}
 8002a10:	469e      	mov	lr, r3
 8002a12:	4770      	bx	lr
