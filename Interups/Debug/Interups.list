
Interups.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08002a00  08002a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002af0  08002af0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002af0  08002af0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002af0  08002af0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002af0  08002af0  00012af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002af4  08002af4  00012af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08002b68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002b68  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b225  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b4e  00000000  00000000  0002b2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002ce10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002d838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001858e  00000000  00000000  0002e188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a80a  00000000  00000000  00046716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000897e8  00000000  00000000  00050f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da708  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003144  00000000  00000000  000da75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080029e8 	.word	0x080029e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080029e8 	.word	0x080029e8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 facd 	bl	80006f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f81f 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f863 	bl	8000224 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //while (i < 1000)
  for (int i = 0; i<=10; i++)
 800015e:	2300      	movs	r3, #0
 8000160:	607b      	str	r3, [r7, #4]
 8000162:	e00f      	b.n	8000184 <main+0x38>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf("Hello World! %d \n", i);
 8000164:	6879      	ldr	r1, [r7, #4]
 8000166:	480b      	ldr	r0, [pc, #44]	; (8000194 <main+0x48>)
 8000168:	f001 fc68 	bl	8001a3c <iprintf>
		if (i == 10) {
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2b0a      	cmp	r3, #10
 8000170:	d101      	bne.n	8000176 <main+0x2a>
			i = 0;
 8000172:	2300      	movs	r3, #0
 8000174:	607b      	str	r3, [r7, #4]
		}
		HAL_Delay(500);
 8000176:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800017a:	f000 faeb 	bl	8000754 <HAL_Delay>
  for (int i = 0; i<=10; i++)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	3301      	adds	r3, #1
 8000182:	607b      	str	r3, [r7, #4]
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2b0a      	cmp	r3, #10
 8000188:	ddec      	ble.n	8000164 <main+0x18>
 800018a:	2300      	movs	r3, #0

  }
  /* USER CODE END 3 */
}
 800018c:	4618      	mov	r0, r3
 800018e:	3708      	adds	r7, #8
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}
 8000194:	08002a00 	.word	0x08002a00

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b090      	sub	sp, #64	; 0x40
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0318 	add.w	r3, r7, #24
 80001a2:	2228      	movs	r2, #40	; 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f001 fc40 	bl	8001a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]
 80001b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ba:	2301      	movs	r3, #1
 80001bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c4:	2300      	movs	r3, #0
 80001c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c8:	2301      	movs	r3, #1
 80001ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001cc:	2302      	movs	r3, #2
 80001ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001dc:	f107 0318 	add.w	r3, r7, #24
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fd79 	bl	8000cd8 <HAL_RCC_OscConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ec:	f000 f8a4 	bl	8000338 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f0:	230f      	movs	r3, #15
 80001f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f4:	2302      	movs	r3, #2
 80001f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2102      	movs	r1, #2
 800020a:	4618      	mov	r0, r3
 800020c:	f000 ffe4 	bl	80011d8 <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000216:	f000 f88f 	bl	8000338 <Error_Handler>
  }
}
 800021a:	bf00      	nop
 800021c:	3740      	adds	r7, #64	; 0x40
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 0310 	add.w	r3, r7, #16
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000238:	4b32      	ldr	r3, [pc, #200]	; (8000304 <MX_GPIO_Init+0xe0>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a31      	ldr	r2, [pc, #196]	; (8000304 <MX_GPIO_Init+0xe0>)
 800023e:	f043 0310 	orr.w	r3, r3, #16
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b2f      	ldr	r3, [pc, #188]	; (8000304 <MX_GPIO_Init+0xe0>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0310 	and.w	r3, r3, #16
 800024c:	60fb      	str	r3, [r7, #12]
 800024e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000250:	4b2c      	ldr	r3, [pc, #176]	; (8000304 <MX_GPIO_Init+0xe0>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a2b      	ldr	r2, [pc, #172]	; (8000304 <MX_GPIO_Init+0xe0>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b29      	ldr	r3, [pc, #164]	; (8000304 <MX_GPIO_Init+0xe0>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0320 	and.w	r3, r3, #32
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000268:	4b26      	ldr	r3, [pc, #152]	; (8000304 <MX_GPIO_Init+0xe0>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a25      	ldr	r2, [pc, #148]	; (8000304 <MX_GPIO_Init+0xe0>)
 800026e:	f043 0304 	orr.w	r3, r3, #4
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <MX_GPIO_Init+0xe0>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0304 	and.w	r3, r3, #4
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000280:	4b20      	ldr	r3, [pc, #128]	; (8000304 <MX_GPIO_Init+0xe0>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a1f      	ldr	r2, [pc, #124]	; (8000304 <MX_GPIO_Init+0xe0>)
 8000286:	f043 0308 	orr.w	r3, r3, #8
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <MX_GPIO_Init+0xe0>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0308 	and.w	r3, r3, #8
 8000294:	603b      	str	r3, [r7, #0]
 8000296:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800029e:	481a      	ldr	r0, [pc, #104]	; (8000308 <MX_GPIO_Init+0xe4>)
 80002a0:	f000 fce0 	bl	8000c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002aa:	2301      	movs	r3, #1
 80002ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b2:	2302      	movs	r3, #2
 80002b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	4619      	mov	r1, r3
 80002bc:	4812      	ldr	r0, [pc, #72]	; (8000308 <MX_GPIO_Init+0xe4>)
 80002be:	f000 fb4d 	bl	800095c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80002c2:	2303      	movs	r3, #3
 80002c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002c6:	4b11      	ldr	r3, [pc, #68]	; (800030c <MX_GPIO_Init+0xe8>)
 80002c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002ca:	2302      	movs	r3, #2
 80002cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ce:	f107 0310 	add.w	r3, r7, #16
 80002d2:	4619      	mov	r1, r3
 80002d4:	480e      	ldr	r0, [pc, #56]	; (8000310 <MX_GPIO_Init+0xec>)
 80002d6:	f000 fb41 	bl	800095c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80002da:	2200      	movs	r2, #0
 80002dc:	2100      	movs	r1, #0
 80002de:	2006      	movs	r0, #6
 80002e0:	f000 fb11 	bl	8000906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80002e4:	2006      	movs	r0, #6
 80002e6:	f000 fb2a 	bl	800093e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2100      	movs	r1, #0
 80002ee:	2007      	movs	r0, #7
 80002f0:	f000 fb09 	bl	8000906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80002f4:	2007      	movs	r0, #7
 80002f6:	f000 fb22 	bl	800093e <HAL_NVIC_EnableIRQ>

}
 80002fa:	bf00      	nop
 80002fc:	3720      	adds	r7, #32
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000
 8000308:	40011000 	.word	0x40011000
 800030c:	10110000 	.word	0x10110000
 8000310:	40010800 	.word	0x40010800

08000314 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d101      	bne.n	800032a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000326:	f000 f9f9 	bl	800071c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40000800 	.word	0x40000800

08000338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800033c:	b672      	cpsid	i
}
 800033e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000340:	e7fe      	b.n	8000340 <Error_Handler+0x8>
	...

08000344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <HAL_MspInit+0x5c>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <HAL_MspInit+0x5c>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6193      	str	r3, [r2, #24]
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <HAL_MspInit+0x5c>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	60bb      	str	r3, [r7, #8]
 8000360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000362:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <HAL_MspInit+0x5c>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	4a0e      	ldr	r2, [pc, #56]	; (80003a0 <HAL_MspInit+0x5c>)
 8000368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800036c:	61d3      	str	r3, [r2, #28]
 800036e:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <HAL_MspInit+0x5c>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <HAL_MspInit+0x60>)
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <HAL_MspInit+0x60>)
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40010000 	.word	0x40010000

080003a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08c      	sub	sp, #48	; 0x30
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80003b8:	2200      	movs	r2, #0
 80003ba:	6879      	ldr	r1, [r7, #4]
 80003bc:	201e      	movs	r0, #30
 80003be:	f000 faa2 	bl	8000906 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80003c2:	201e      	movs	r0, #30
 80003c4:	f000 fabb 	bl	800093e <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80003c8:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <HAL_InitTick+0xa0>)
 80003ca:	69db      	ldr	r3, [r3, #28]
 80003cc:	4a1e      	ldr	r2, [pc, #120]	; (8000448 <HAL_InitTick+0xa0>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	61d3      	str	r3, [r2, #28]
 80003d4:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <HAL_InitTick+0xa0>)
 80003d6:	69db      	ldr	r3, [r3, #28]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003e0:	f107 0210 	add.w	r2, r7, #16
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	4611      	mov	r1, r2
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 f85c 	bl	80014a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80003f0:	f001 f846 	bl	8001480 <HAL_RCC_GetPCLK1Freq>
 80003f4:	4603      	mov	r3, r0
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80003fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003fc:	4a13      	ldr	r2, [pc, #76]	; (800044c <HAL_InitTick+0xa4>)
 80003fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000402:	0c9b      	lsrs	r3, r3, #18
 8000404:	3b01      	subs	r3, #1
 8000406:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000408:	4b11      	ldr	r3, [pc, #68]	; (8000450 <HAL_InitTick+0xa8>)
 800040a:	4a12      	ldr	r2, [pc, #72]	; (8000454 <HAL_InitTick+0xac>)
 800040c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800040e:	4b10      	ldr	r3, [pc, #64]	; (8000450 <HAL_InitTick+0xa8>)
 8000410:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000414:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000416:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <HAL_InitTick+0xa8>)
 8000418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800041a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <HAL_InitTick+0xa8>)
 800041e:	2200      	movs	r2, #0
 8000420:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <HAL_InitTick+0xa8>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000428:	4809      	ldr	r0, [pc, #36]	; (8000450 <HAL_InitTick+0xa8>)
 800042a:	f001 f88b 	bl	8001544 <HAL_TIM_Base_Init>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d104      	bne.n	800043e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000434:	4806      	ldr	r0, [pc, #24]	; (8000450 <HAL_InitTick+0xa8>)
 8000436:	f001 f8dd 	bl	80015f4 <HAL_TIM_Base_Start_IT>
 800043a:	4603      	mov	r3, r0
 800043c:	e000      	b.n	8000440 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800043e:	2301      	movs	r3, #1
}
 8000440:	4618      	mov	r0, r3
 8000442:	3730      	adds	r7, #48	; 0x30
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40021000 	.word	0x40021000
 800044c:	431bde83 	.word	0x431bde83
 8000450:	20000098 	.word	0x20000098
 8000454:	40000800 	.word	0x40000800

08000458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800045c:	e7fe      	b.n	800045c <NMI_Handler+0x4>

0800045e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000462:	e7fe      	b.n	8000462 <HardFault_Handler+0x4>

08000464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <MemManage_Handler+0x4>

0800046a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <BusFault_Handler+0x4>

08000470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <UsageFault_Handler+0x4>

08000476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr

0800049a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
	...

080004a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <EXTI0_IRQHandler+0x20>)
 80004b4:	f000 fbd6 	bl	8000c64 <HAL_GPIO_WritePin>
	printf("LED is OFF \r\n"); // Отключен т.к. LED подключен по обратной схеме!
 80004b8:	4804      	ldr	r0, [pc, #16]	; (80004cc <EXTI0_IRQHandler+0x24>)
 80004ba:	f001 fb45 	bl	8001b48 <puts>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80004be:	2001      	movs	r0, #1
 80004c0:	f000 fbe8 	bl	8000c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40011000 	.word	0x40011000
 80004cc:	08002a14 	.word	0x08002a14

080004d0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <EXTI1_IRQHandler+0x20>)
 80004dc:	f000 fbc2 	bl	8000c64 <HAL_GPIO_WritePin>
	printf("LED is ON \r\n"); // Катод подключен к PC13, а анод к питанию +3.3В.
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <EXTI1_IRQHandler+0x24>)
 80004e2:	f001 fb31 	bl	8001b48 <puts>

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80004e6:	2002      	movs	r0, #2
 80004e8:	f000 fbd4 	bl	8000c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40011000 	.word	0x40011000
 80004f4:	08002a24 	.word	0x08002a24

080004f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <TIM4_IRQHandler+0x10>)
 80004fe:	f001 f8cb 	bl	8001698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000098 	.word	0x20000098

0800050c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <ITM_SendChar+0x44>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <ITM_SendChar+0x44>)
 800051c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000520:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <ITM_SendChar+0x48>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <ITM_SendChar+0x48>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800052e:	bf00      	nop
 8000530:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f8      	beq.n	8000530 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800053e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	6013      	str	r3, [r2, #0]
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	e000edfc 	.word	0xe000edfc
 8000554:	e0000e00 	.word	0xe0000e00

08000558 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	e00a      	b.n	8000580 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800056a:	f3af 8000 	nop.w
 800056e:	4601      	mov	r1, r0
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	1c5a      	adds	r2, r3, #1
 8000574:	60ba      	str	r2, [r7, #8]
 8000576:	b2ca      	uxtb	r2, r1
 8000578:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	3301      	adds	r3, #1
 800057e:	617b      	str	r3, [r7, #20]
 8000580:	697a      	ldr	r2, [r7, #20]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	429a      	cmp	r2, r3
 8000586:	dbf0      	blt.n	800056a <_read+0x12>
	}

return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	b086      	sub	sp, #24
 8000596:	af00      	add	r7, sp, #0
 8000598:	60f8      	str	r0, [r7, #12]
 800059a:	60b9      	str	r1, [r7, #8]
 800059c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
 80005a2:	e009      	b.n	80005b8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++); // И пропишем наш код для printf
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	1c5a      	adds	r2, r3, #1
 80005a8:	60ba      	str	r2, [r7, #8]
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ffad 	bl	800050c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	3301      	adds	r3, #1
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	697a      	ldr	r2, [r7, #20]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	429a      	cmp	r2, r3
 80005be:	dbf1      	blt.n	80005a4 <_write+0x12>
		//LCD_SEND // Если подключен LCD
		//UART_SET // Если подключен UART
	}
	return len;
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3718      	adds	r7, #24
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <_close>:

int _close(int file)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
	return -1;
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005f0:	605a      	str	r2, [r3, #4]
	return 0;
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr

080005fe <_isatty>:

int _isatty(int file)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
	return 1;
 8000606:	2301      	movs	r3, #1
}
 8000608:	4618      	mov	r0, r3
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr

08000612 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000612:	b480      	push	{r7}
 8000614:	b085      	sub	sp, #20
 8000616:	af00      	add	r7, sp, #0
 8000618:	60f8      	str	r0, [r7, #12]
 800061a:	60b9      	str	r1, [r7, #8]
 800061c:	607a      	str	r2, [r7, #4]
	return 0;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
	...

0800062c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000634:	4a14      	ldr	r2, [pc, #80]	; (8000688 <_sbrk+0x5c>)
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <_sbrk+0x60>)
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <_sbrk+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d102      	bne.n	800064e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <_sbrk+0x64>)
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <_sbrk+0x68>)
 800064c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	429a      	cmp	r2, r3
 800065a:	d207      	bcs.n	800066c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800065c:	f001 f9bc 	bl	80019d8 <__errno>
 8000660:	4603      	mov	r3, r0
 8000662:	220c      	movs	r2, #12
 8000664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800066a:	e009      	b.n	8000680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <_sbrk+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <_sbrk+0x64>)
 800067c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20005000 	.word	0x20005000
 800068c:	00000400 	.word	0x00000400
 8000690:	2000008c 	.word	0x2000008c
 8000694:	200000f8 	.word	0x200000f8

08000698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	; (80006e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ca:	f7ff ffe5 	bl	8000698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ce:	f001 f989 	bl	80019e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff fd3b 	bl	800014c <main>
  bx lr
 80006d6:	4770      	bx	lr
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006e0:	08002af8 	.word	0x08002af8
  ldr r2, =_sbss
 80006e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006e8:	200000f4 	.word	0x200000f4

080006ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_2_IRQHandler>
	...

080006f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_Init+0x28>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_Init+0x28>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f8f5 	bl	80008f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff fe4e 	bl	80003a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070c:	f7ff fe1a 	bl	8000344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40022000 	.word	0x40022000

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x1c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_IncTick+0x20>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <HAL_IncTick+0x20>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000008 	.word	0x20000008
 800073c:	200000e0 	.word	0x200000e0

08000740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <HAL_GetTick+0x10>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	200000e0 	.word	0x200000e0

08000754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800075c:	f7ff fff0 	bl	8000740 <HAL_GetTick>
 8000760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800076c:	d005      	beq.n	800077a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_Delay+0x44>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800077a:	bf00      	nop
 800077c:	f7ff ffe0 	bl	8000740 <HAL_GetTick>
 8000780:	4602      	mov	r2, r0
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	429a      	cmp	r2, r3
 800078a:	d8f7      	bhi.n	800077c <HAL_Delay+0x28>
  {
  }
}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000008 	.word	0x20000008

0800079c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ce:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	60d3      	str	r3, [r2, #12]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <__NVIC_GetPriorityGrouping+0x18>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	0a1b      	lsrs	r3, r3, #8
 80007ee:	f003 0307 	and.w	r3, r3, #7
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	2b00      	cmp	r3, #0
 8000810:	db0b      	blt.n	800082a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	f003 021f 	and.w	r2, r3, #31
 8000818:	4906      	ldr	r1, [pc, #24]	; (8000834 <__NVIC_EnableIRQ+0x34>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	095b      	lsrs	r3, r3, #5
 8000820:	2001      	movs	r0, #1
 8000822:	fa00 f202 	lsl.w	r2, r0, r2
 8000826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	e000e100 	.word	0xe000e100

08000838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	db0a      	blt.n	8000862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	490c      	ldr	r1, [pc, #48]	; (8000884 <__NVIC_SetPriority+0x4c>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	440b      	add	r3, r1
 800085c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000860:	e00a      	b.n	8000878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4908      	ldr	r1, [pc, #32]	; (8000888 <__NVIC_SetPriority+0x50>)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	f003 030f 	and.w	r3, r3, #15
 800086e:	3b04      	subs	r3, #4
 8000870:	0112      	lsls	r2, r2, #4
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	440b      	add	r3, r1
 8000876:	761a      	strb	r2, [r3, #24]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000e100 	.word	0xe000e100
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088c:	b480      	push	{r7}
 800088e:	b089      	sub	sp, #36	; 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	f1c3 0307 	rsb	r3, r3, #7
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	bf28      	it	cs
 80008aa:	2304      	movcs	r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3304      	adds	r3, #4
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	d902      	bls.n	80008bc <NVIC_EncodePriority+0x30>
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3b03      	subs	r3, #3
 80008ba:	e000      	b.n	80008be <NVIC_EncodePriority+0x32>
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43da      	mvns	r2, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	401a      	ands	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	43d9      	mvns	r1, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	4313      	orrs	r3, r2
         );
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3724      	adds	r7, #36	; 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ff4f 	bl	800079c <__NVIC_SetPriorityGrouping>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000918:	f7ff ff64 	bl	80007e4 <__NVIC_GetPriorityGrouping>
 800091c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	68b9      	ldr	r1, [r7, #8]
 8000922:	6978      	ldr	r0, [r7, #20]
 8000924:	f7ff ffb2 	bl	800088c <NVIC_EncodePriority>
 8000928:	4602      	mov	r2, r0
 800092a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff81 	bl	8000838 <__NVIC_SetPriority>
}
 8000936:	bf00      	nop
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff57 	bl	8000800 <__NVIC_EnableIRQ>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800095c:	b480      	push	{r7}
 800095e:	b08b      	sub	sp, #44	; 0x2c
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096e:	e169      	b.n	8000c44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000970:	2201      	movs	r2, #1
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	4013      	ands	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	429a      	cmp	r2, r3
 800098a:	f040 8158 	bne.w	8000c3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	4a9a      	ldr	r2, [pc, #616]	; (8000bfc <HAL_GPIO_Init+0x2a0>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d05e      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 8000998:	4a98      	ldr	r2, [pc, #608]	; (8000bfc <HAL_GPIO_Init+0x2a0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d875      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 800099e:	4a98      	ldr	r2, [pc, #608]	; (8000c00 <HAL_GPIO_Init+0x2a4>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d058      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009a4:	4a96      	ldr	r2, [pc, #600]	; (8000c00 <HAL_GPIO_Init+0x2a4>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d86f      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009aa:	4a96      	ldr	r2, [pc, #600]	; (8000c04 <HAL_GPIO_Init+0x2a8>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d052      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009b0:	4a94      	ldr	r2, [pc, #592]	; (8000c04 <HAL_GPIO_Init+0x2a8>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d869      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009b6:	4a94      	ldr	r2, [pc, #592]	; (8000c08 <HAL_GPIO_Init+0x2ac>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d04c      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009bc:	4a92      	ldr	r2, [pc, #584]	; (8000c08 <HAL_GPIO_Init+0x2ac>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d863      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009c2:	4a92      	ldr	r2, [pc, #584]	; (8000c0c <HAL_GPIO_Init+0x2b0>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d046      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009c8:	4a90      	ldr	r2, [pc, #576]	; (8000c0c <HAL_GPIO_Init+0x2b0>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d85d      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009ce:	2b12      	cmp	r3, #18
 80009d0:	d82a      	bhi.n	8000a28 <HAL_GPIO_Init+0xcc>
 80009d2:	2b12      	cmp	r3, #18
 80009d4:	d859      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009d6:	a201      	add	r2, pc, #4	; (adr r2, 80009dc <HAL_GPIO_Init+0x80>)
 80009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009dc:	08000a57 	.word	0x08000a57
 80009e0:	08000a31 	.word	0x08000a31
 80009e4:	08000a43 	.word	0x08000a43
 80009e8:	08000a85 	.word	0x08000a85
 80009ec:	08000a8b 	.word	0x08000a8b
 80009f0:	08000a8b 	.word	0x08000a8b
 80009f4:	08000a8b 	.word	0x08000a8b
 80009f8:	08000a8b 	.word	0x08000a8b
 80009fc:	08000a8b 	.word	0x08000a8b
 8000a00:	08000a8b 	.word	0x08000a8b
 8000a04:	08000a8b 	.word	0x08000a8b
 8000a08:	08000a8b 	.word	0x08000a8b
 8000a0c:	08000a8b 	.word	0x08000a8b
 8000a10:	08000a8b 	.word	0x08000a8b
 8000a14:	08000a8b 	.word	0x08000a8b
 8000a18:	08000a8b 	.word	0x08000a8b
 8000a1c:	08000a8b 	.word	0x08000a8b
 8000a20:	08000a39 	.word	0x08000a39
 8000a24:	08000a4d 	.word	0x08000a4d
 8000a28:	4a79      	ldr	r2, [pc, #484]	; (8000c10 <HAL_GPIO_Init+0x2b4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d013      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a2e:	e02c      	b.n	8000a8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	623b      	str	r3, [r7, #32]
          break;
 8000a36:	e029      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	623b      	str	r3, [r7, #32]
          break;
 8000a40:	e024      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	3308      	adds	r3, #8
 8000a48:	623b      	str	r3, [r7, #32]
          break;
 8000a4a:	e01f      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	330c      	adds	r3, #12
 8000a52:	623b      	str	r3, [r7, #32]
          break;
 8000a54:	e01a      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d102      	bne.n	8000a64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	623b      	str	r3, [r7, #32]
          break;
 8000a62:	e013      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d105      	bne.n	8000a78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	69fa      	ldr	r2, [r7, #28]
 8000a74:	611a      	str	r2, [r3, #16]
          break;
 8000a76:	e009      	b.n	8000a8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	69fa      	ldr	r2, [r7, #28]
 8000a80:	615a      	str	r2, [r3, #20]
          break;
 8000a82:	e003      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
          break;
 8000a88:	e000      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          break;
 8000a8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	2bff      	cmp	r3, #255	; 0xff
 8000a90:	d801      	bhi.n	8000a96 <HAL_GPIO_Init+0x13a>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	e001      	b.n	8000a9a <HAL_GPIO_Init+0x13e>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	2bff      	cmp	r3, #255	; 0xff
 8000aa0:	d802      	bhi.n	8000aa8 <HAL_GPIO_Init+0x14c>
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	e002      	b.n	8000aae <HAL_GPIO_Init+0x152>
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	3b08      	subs	r3, #8
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	401a      	ands	r2, r3
 8000ac0:	6a39      	ldr	r1, [r7, #32]
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 80b1 	beq.w	8000c3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000adc:	4b4d      	ldr	r3, [pc, #308]	; (8000c14 <HAL_GPIO_Init+0x2b8>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a4c      	ldr	r2, [pc, #304]	; (8000c14 <HAL_GPIO_Init+0x2b8>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b4a      	ldr	r3, [pc, #296]	; (8000c14 <HAL_GPIO_Init+0x2b8>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000af4:	4a48      	ldr	r2, [pc, #288]	; (8000c18 <HAL_GPIO_Init+0x2bc>)
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	4013      	ands	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a40      	ldr	r2, [pc, #256]	; (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d013      	beq.n	8000b48 <HAL_GPIO_Init+0x1ec>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a3f      	ldr	r2, [pc, #252]	; (8000c20 <HAL_GPIO_Init+0x2c4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d00d      	beq.n	8000b44 <HAL_GPIO_Init+0x1e8>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a3e      	ldr	r2, [pc, #248]	; (8000c24 <HAL_GPIO_Init+0x2c8>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d007      	beq.n	8000b40 <HAL_GPIO_Init+0x1e4>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a3d      	ldr	r2, [pc, #244]	; (8000c28 <HAL_GPIO_Init+0x2cc>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d101      	bne.n	8000b3c <HAL_GPIO_Init+0x1e0>
 8000b38:	2303      	movs	r3, #3
 8000b3a:	e006      	b.n	8000b4a <HAL_GPIO_Init+0x1ee>
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	e004      	b.n	8000b4a <HAL_GPIO_Init+0x1ee>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e002      	b.n	8000b4a <HAL_GPIO_Init+0x1ee>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <HAL_GPIO_Init+0x1ee>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b4c:	f002 0203 	and.w	r2, r2, #3
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	4093      	lsls	r3, r2
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b5a:	492f      	ldr	r1, [pc, #188]	; (8000c18 <HAL_GPIO_Init+0x2bc>)
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	3302      	adds	r3, #2
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d006      	beq.n	8000b82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b74:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	492c      	ldr	r1, [pc, #176]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	600b      	str	r3, [r1, #0]
 8000b80:	e006      	b.n	8000b90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b82:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	4928      	ldr	r1, [pc, #160]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d006      	beq.n	8000baa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	4922      	ldr	r1, [pc, #136]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	604b      	str	r3, [r1, #4]
 8000ba8:	e006      	b.n	8000bb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	491e      	ldr	r1, [pc, #120]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bc6:	689a      	ldr	r2, [r3, #8]
 8000bc8:	4918      	ldr	r1, [pc, #96]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	608b      	str	r3, [r1, #8]
 8000bd0:	e006      	b.n	8000be0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	4914      	ldr	r1, [pc, #80]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bdc:	4013      	ands	r3, r2
 8000bde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d021      	beq.n	8000c30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bee:	68da      	ldr	r2, [r3, #12]
 8000bf0:	490e      	ldr	r1, [pc, #56]	; (8000c2c <HAL_GPIO_Init+0x2d0>)
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	60cb      	str	r3, [r1, #12]
 8000bf8:	e021      	b.n	8000c3e <HAL_GPIO_Init+0x2e2>
 8000bfa:	bf00      	nop
 8000bfc:	10320000 	.word	0x10320000
 8000c00:	10310000 	.word	0x10310000
 8000c04:	10220000 	.word	0x10220000
 8000c08:	10210000 	.word	0x10210000
 8000c0c:	10120000 	.word	0x10120000
 8000c10:	10110000 	.word	0x10110000
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010000 	.word	0x40010000
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	40010c00 	.word	0x40010c00
 8000c24:	40011000 	.word	0x40011000
 8000c28:	40011400 	.word	0x40011400
 8000c2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_GPIO_Init+0x304>)
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	43db      	mvns	r3, r3
 8000c38:	4909      	ldr	r1, [pc, #36]	; (8000c60 <HAL_GPIO_Init+0x304>)
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	3301      	adds	r3, #1
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f47f ae8e 	bne.w	8000970 <HAL_GPIO_Init+0x14>
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	372c      	adds	r7, #44	; 0x2c
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	40010400 	.word	0x40010400

08000c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]
 8000c70:	4613      	mov	r3, r2
 8000c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c74:	787b      	ldrb	r3, [r7, #1]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c7a:	887a      	ldrh	r2, [r7, #2]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c80:	e003      	b.n	8000c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c82:	887b      	ldrh	r3, [r7, #2]
 8000c84:	041a      	lsls	r2, r3, #16
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	611a      	str	r2, [r3, #16]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ca0:	695a      	ldr	r2, [r3, #20]
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d006      	beq.n	8000cb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f806 	bl	8000cc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40010400 	.word	0x40010400

08000cc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e26c      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f000 8087 	beq.w	8000e06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf8:	4b92      	ldr	r3, [pc, #584]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 030c 	and.w	r3, r3, #12
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d00c      	beq.n	8000d1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d04:	4b8f      	ldr	r3, [pc, #572]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 030c 	and.w	r3, r3, #12
 8000d0c:	2b08      	cmp	r3, #8
 8000d0e:	d112      	bne.n	8000d36 <HAL_RCC_OscConfig+0x5e>
 8000d10:	4b8c      	ldr	r3, [pc, #560]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d1c:	d10b      	bne.n	8000d36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1e:	4b89      	ldr	r3, [pc, #548]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d06c      	beq.n	8000e04 <HAL_RCC_OscConfig+0x12c>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d168      	bne.n	8000e04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e246      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d3e:	d106      	bne.n	8000d4e <HAL_RCC_OscConfig+0x76>
 8000d40:	4b80      	ldr	r3, [pc, #512]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a7f      	ldr	r2, [pc, #508]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	e02e      	b.n	8000dac <HAL_RCC_OscConfig+0xd4>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10c      	bne.n	8000d70 <HAL_RCC_OscConfig+0x98>
 8000d56:	4b7b      	ldr	r3, [pc, #492]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a7a      	ldr	r2, [pc, #488]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	4b78      	ldr	r3, [pc, #480]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a77      	ldr	r2, [pc, #476]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e01d      	b.n	8000dac <HAL_RCC_OscConfig+0xd4>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d78:	d10c      	bne.n	8000d94 <HAL_RCC_OscConfig+0xbc>
 8000d7a:	4b72      	ldr	r3, [pc, #456]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a71      	ldr	r2, [pc, #452]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	4b6f      	ldr	r3, [pc, #444]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a6e      	ldr	r2, [pc, #440]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	e00b      	b.n	8000dac <HAL_RCC_OscConfig+0xd4>
 8000d94:	4b6b      	ldr	r3, [pc, #428]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a6a      	ldr	r2, [pc, #424]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4b68      	ldr	r3, [pc, #416]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a67      	ldr	r2, [pc, #412]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000daa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d013      	beq.n	8000ddc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db4:	f7ff fcc4 	bl	8000740 <HAL_GetTick>
 8000db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dbc:	f7ff fcc0 	bl	8000740 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b64      	cmp	r3, #100	; 0x64
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e1fa      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dce:	4b5d      	ldr	r3, [pc, #372]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f0      	beq.n	8000dbc <HAL_RCC_OscConfig+0xe4>
 8000dda:	e014      	b.n	8000e06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fcb0 	bl	8000740 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de4:	f7ff fcac 	bl	8000740 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b64      	cmp	r3, #100	; 0x64
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e1e6      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df6:	4b53      	ldr	r3, [pc, #332]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f0      	bne.n	8000de4 <HAL_RCC_OscConfig+0x10c>
 8000e02:	e000      	b.n	8000e06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d063      	beq.n	8000eda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e12:	4b4c      	ldr	r3, [pc, #304]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00b      	beq.n	8000e36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e1e:	4b49      	ldr	r3, [pc, #292]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 030c 	and.w	r3, r3, #12
 8000e26:	2b08      	cmp	r3, #8
 8000e28:	d11c      	bne.n	8000e64 <HAL_RCC_OscConfig+0x18c>
 8000e2a:	4b46      	ldr	r3, [pc, #280]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d116      	bne.n	8000e64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e36:	4b43      	ldr	r3, [pc, #268]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d005      	beq.n	8000e4e <HAL_RCC_OscConfig+0x176>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d001      	beq.n	8000e4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e1ba      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4e:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4939      	ldr	r1, [pc, #228]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e62:	e03a      	b.n	8000eda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d020      	beq.n	8000eae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e6c:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <HAL_RCC_OscConfig+0x270>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e72:	f7ff fc65 	bl	8000740 <HAL_GetTick>
 8000e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e78:	e008      	b.n	8000e8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e7a:	f7ff fc61 	bl	8000740 <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d901      	bls.n	8000e8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e19b      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0f0      	beq.n	8000e7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e98:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	4927      	ldr	r1, [pc, #156]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	600b      	str	r3, [r1, #0]
 8000eac:	e015      	b.n	8000eda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <HAL_RCC_OscConfig+0x270>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fc44 	bl	8000740 <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ebc:	f7ff fc40 	bl	8000740 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e17a      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f0      	bne.n	8000ebc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d03a      	beq.n	8000f5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d019      	beq.n	8000f22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_RCC_OscConfig+0x274>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef4:	f7ff fc24 	bl	8000740 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000efc:	f7ff fc20 	bl	8000740 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e15a      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f0      	beq.n	8000efc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f000 faf4 	bl	8001508 <RCC_Delay>
 8000f20:	e01c      	b.n	8000f5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_RCC_OscConfig+0x274>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f28:	f7ff fc0a 	bl	8000740 <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2e:	e00f      	b.n	8000f50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f30:	f7ff fc06 	bl	8000740 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d908      	bls.n	8000f50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e140      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000
 8000f48:	42420000 	.word	0x42420000
 8000f4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f50:	4b9e      	ldr	r3, [pc, #632]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8000f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1e9      	bne.n	8000f30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 80a6 	beq.w	80010b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f6e:	4b97      	ldr	r3, [pc, #604]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10d      	bne.n	8000f96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b94      	ldr	r3, [pc, #592]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a93      	ldr	r2, [pc, #588]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	61d3      	str	r3, [r2, #28]
 8000f86:	4b91      	ldr	r3, [pc, #580]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f92:	2301      	movs	r3, #1
 8000f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f96:	4b8e      	ldr	r3, [pc, #568]	; (80011d0 <HAL_RCC_OscConfig+0x4f8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d118      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fa2:	4b8b      	ldr	r3, [pc, #556]	; (80011d0 <HAL_RCC_OscConfig+0x4f8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a8a      	ldr	r2, [pc, #552]	; (80011d0 <HAL_RCC_OscConfig+0x4f8>)
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fae:	f7ff fbc7 	bl	8000740 <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb6:	f7ff fbc3 	bl	8000740 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b64      	cmp	r3, #100	; 0x64
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e0fd      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc8:	4b81      	ldr	r3, [pc, #516]	; (80011d0 <HAL_RCC_OscConfig+0x4f8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f0      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d106      	bne.n	8000fea <HAL_RCC_OscConfig+0x312>
 8000fdc:	4b7b      	ldr	r3, [pc, #492]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	4a7a      	ldr	r2, [pc, #488]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6213      	str	r3, [r2, #32]
 8000fe8:	e02d      	b.n	8001046 <HAL_RCC_OscConfig+0x36e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_OscConfig+0x334>
 8000ff2:	4b76      	ldr	r3, [pc, #472]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	6a1b      	ldr	r3, [r3, #32]
 8000ff6:	4a75      	ldr	r2, [pc, #468]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	6213      	str	r3, [r2, #32]
 8000ffe:	4b73      	ldr	r3, [pc, #460]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	4a72      	ldr	r2, [pc, #456]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8001004:	f023 0304 	bic.w	r3, r3, #4
 8001008:	6213      	str	r3, [r2, #32]
 800100a:	e01c      	b.n	8001046 <HAL_RCC_OscConfig+0x36e>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	2b05      	cmp	r3, #5
 8001012:	d10c      	bne.n	800102e <HAL_RCC_OscConfig+0x356>
 8001014:	4b6d      	ldr	r3, [pc, #436]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4a6c      	ldr	r2, [pc, #432]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6213      	str	r3, [r2, #32]
 8001020:	4b6a      	ldr	r3, [pc, #424]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	4a69      	ldr	r2, [pc, #420]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6213      	str	r3, [r2, #32]
 800102c:	e00b      	b.n	8001046 <HAL_RCC_OscConfig+0x36e>
 800102e:	4b67      	ldr	r3, [pc, #412]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4a66      	ldr	r2, [pc, #408]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	6213      	str	r3, [r2, #32]
 800103a:	4b64      	ldr	r3, [pc, #400]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	4a63      	ldr	r2, [pc, #396]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8001040:	f023 0304 	bic.w	r3, r3, #4
 8001044:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d015      	beq.n	800107a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104e:	f7ff fb77 	bl	8000740 <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001054:	e00a      	b.n	800106c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001056:	f7ff fb73 	bl	8000740 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	f241 3288 	movw	r2, #5000	; 0x1388
 8001064:	4293      	cmp	r3, r2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e0ab      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800106c:	4b57      	ldr	r3, [pc, #348]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0ee      	beq.n	8001056 <HAL_RCC_OscConfig+0x37e>
 8001078:	e014      	b.n	80010a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107a:	f7ff fb61 	bl	8000740 <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001080:	e00a      	b.n	8001098 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001082:	f7ff fb5d 	bl	8000740 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001090:	4293      	cmp	r3, r2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e095      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001098:	4b4c      	ldr	r3, [pc, #304]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1ee      	bne.n	8001082 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d105      	bne.n	80010b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010aa:	4b48      	ldr	r3, [pc, #288]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4a47      	ldr	r2, [pc, #284]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 80010b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8081 	beq.w	80011c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010c0:	4b42      	ldr	r3, [pc, #264]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d061      	beq.n	8001190 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d146      	bne.n	8001162 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d4:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <HAL_RCC_OscConfig+0x4fc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010da:	f7ff fb31 	bl	8000740 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e2:	f7ff fb2d 	bl	8000740 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e067      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f4:	4b35      	ldr	r3, [pc, #212]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f0      	bne.n	80010e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001108:	d108      	bne.n	800111c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	492d      	ldr	r1, [pc, #180]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8001118:	4313      	orrs	r3, r2
 800111a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a19      	ldr	r1, [r3, #32]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112c:	430b      	orrs	r3, r1
 800112e:	4927      	ldr	r1, [pc, #156]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8001130:	4313      	orrs	r3, r2
 8001132:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <HAL_RCC_OscConfig+0x4fc>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113a:	f7ff fb01 	bl	8000740 <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001142:	f7ff fafd 	bl	8000740 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e037      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0x46a>
 8001160:	e02f      	b.n	80011c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_RCC_OscConfig+0x4fc>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff faea 	bl	8000740 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001170:	f7ff fae6 	bl	8000740 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e020      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x498>
 800118e:	e018      	b.n	80011c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d101      	bne.n	800119c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e013      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_RCC_OscConfig+0x4f4>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d106      	bne.n	80011be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d001      	beq.n	80011c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40007000 	.word	0x40007000
 80011d4:	42420060 	.word	0x42420060

080011d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0d0      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011ec:	4b6a      	ldr	r3, [pc, #424]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d910      	bls.n	800121c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fa:	4b67      	ldr	r3, [pc, #412]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 0207 	bic.w	r2, r3, #7
 8001202:	4965      	ldr	r1, [pc, #404]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800120a:	4b63      	ldr	r3, [pc, #396]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d001      	beq.n	800121c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e0b8      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d020      	beq.n	800126a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001234:	4b59      	ldr	r3, [pc, #356]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	4a58      	ldr	r2, [pc, #352]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800123e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800124c:	4b53      	ldr	r3, [pc, #332]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a52      	ldr	r2, [pc, #328]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001256:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001258:	4b50      	ldr	r3, [pc, #320]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	494d      	ldr	r1, [pc, #308]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	4313      	orrs	r3, r2
 8001268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d040      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d107      	bne.n	800128e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	4b47      	ldr	r3, [pc, #284]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d115      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e07f      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d107      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001296:	4b41      	ldr	r3, [pc, #260]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e073      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a6:	4b3d      	ldr	r3, [pc, #244]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e06b      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b6:	4b39      	ldr	r3, [pc, #228]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f023 0203 	bic.w	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4936      	ldr	r1, [pc, #216]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c8:	f7ff fa3a 	bl	8000740 <HAL_GetTick>
 80012cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ce:	e00a      	b.n	80012e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d0:	f7ff fa36 	bl	8000740 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f241 3288 	movw	r2, #5000	; 0x1388
 80012de:	4293      	cmp	r3, r2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e053      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 020c 	and.w	r2, r3, #12
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d1eb      	bne.n	80012d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d210      	bcs.n	8001328 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 0207 	bic.w	r2, r3, #7
 800130e:	4922      	ldr	r1, [pc, #136]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	d001      	beq.n	8001328 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e032      	b.n	800138e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d008      	beq.n	8001346 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	4916      	ldr	r1, [pc, #88]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d009      	beq.n	8001366 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	490e      	ldr	r1, [pc, #56]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001366:	f000 f821 	bl	80013ac <HAL_RCC_GetSysClockFreq>
 800136a:	4602      	mov	r2, r0
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	490a      	ldr	r1, [pc, #40]	; (80013a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001378:	5ccb      	ldrb	r3, [r1, r3]
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
 800137e:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f80e 	bl	80003a8 <HAL_InitTick>

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40022000 	.word	0x40022000
 800139c:	40021000 	.word	0x40021000
 80013a0:	08002a40 	.word	0x08002a40
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000004 	.word	0x20000004

080013ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013ac:	b490      	push	{r4, r7}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <HAL_RCC_GetSysClockFreq+0xb0>)
 80013b4:	1d3c      	adds	r4, r7, #4
 80013b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013bc:	f240 2301 	movw	r3, #513	; 0x201
 80013c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d002      	beq.n	80013ec <HAL_RCC_GetSysClockFreq+0x40>
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d003      	beq.n	80013f2 <HAL_RCC_GetSysClockFreq+0x46>
 80013ea:	e02d      	b.n	8001448 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013ee:	623b      	str	r3, [r7, #32]
      break;
 80013f0:	e02d      	b.n	800144e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	0c9b      	lsrs	r3, r3, #18
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013fe:	4413      	add	r3, r2
 8001400:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001404:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	0c5b      	lsrs	r3, r3, #17
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800141e:	4413      	add	r3, r2
 8001420:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001424:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <HAL_RCC_GetSysClockFreq+0xb8>)
 800142a:	fb02 f203 	mul.w	r2, r2, r3
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	fbb2 f3f3 	udiv	r3, r2, r3
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
 8001436:	e004      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <HAL_RCC_GetSysClockFreq+0xbc>)
 800143c:	fb02 f303 	mul.w	r3, r2, r3
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	623b      	str	r3, [r7, #32]
      break;
 8001446:	e002      	b.n	800144e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_RCC_GetSysClockFreq+0xb8>)
 800144a:	623b      	str	r3, [r7, #32]
      break;
 800144c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800144e:	6a3b      	ldr	r3, [r7, #32]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3728      	adds	r7, #40	; 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bc90      	pop	{r4, r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	08002a30 	.word	0x08002a30
 8001460:	40021000 	.word	0x40021000
 8001464:	007a1200 	.word	0x007a1200
 8001468:	003d0900 	.word	0x003d0900

0800146c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001470:	4b02      	ldr	r3, [pc, #8]	; (800147c <HAL_RCC_GetHCLKFreq+0x10>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000000 	.word	0x20000000

08001480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001484:	f7ff fff2 	bl	800146c <HAL_RCC_GetHCLKFreq>
 8001488:	4602      	mov	r2, r0
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	4903      	ldr	r1, [pc, #12]	; (80014a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001496:	5ccb      	ldrb	r3, [r1, r3]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800149c:	4618      	mov	r0, r3
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000
 80014a4:	08002a50 	.word	0x08002a50

080014a8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	220f      	movs	r2, #15
 80014b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_RCC_GetClockConfig+0x58>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_RCC_GetClockConfig+0x58>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_RCC_GetClockConfig+0x58>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_RCC_GetClockConfig+0x58>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	08db      	lsrs	r3, r3, #3
 80014e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_RCC_GetClockConfig+0x5c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0207 	and.w	r2, r3, #7
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	40021000 	.word	0x40021000
 8001504:	40022000 	.word	0x40022000

08001508 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <RCC_Delay+0x34>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <RCC_Delay+0x38>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0a5b      	lsrs	r3, r3, #9
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001524:	bf00      	nop
  }
  while (Delay --);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1e5a      	subs	r2, r3, #1
 800152a:	60fa      	str	r2, [r7, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f9      	bne.n	8001524 <RCC_Delay+0x1c>
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	20000000 	.word	0x20000000
 8001540:	10624dd3 	.word	0x10624dd3

08001544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e041      	b.n	80015da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d106      	bne.n	8001570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f839 	bl	80015e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3304      	adds	r3, #4
 8001580:	4619      	mov	r1, r3
 8001582:	4610      	mov	r0, r2
 8001584:	f000 f9b4 	bl	80018f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b01      	cmp	r3, #1
 8001606:	d001      	beq.n	800160c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e03a      	b.n	8001682 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2202      	movs	r2, #2
 8001610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0201 	orr.w	r2, r2, #1
 8001622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a18      	ldr	r2, [pc, #96]	; (800168c <HAL_TIM_Base_Start_IT+0x98>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d00e      	beq.n	800164c <HAL_TIM_Base_Start_IT+0x58>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001636:	d009      	beq.n	800164c <HAL_TIM_Base_Start_IT+0x58>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a14      	ldr	r2, [pc, #80]	; (8001690 <HAL_TIM_Base_Start_IT+0x9c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d004      	beq.n	800164c <HAL_TIM_Base_Start_IT+0x58>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a13      	ldr	r2, [pc, #76]	; (8001694 <HAL_TIM_Base_Start_IT+0xa0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d111      	bne.n	8001670 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b06      	cmp	r3, #6
 800165c:	d010      	beq.n	8001680 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0201 	orr.w	r2, r2, #1
 800166c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800166e:	e007      	b.n	8001680 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	40012c00 	.word	0x40012c00
 8001690:	40000400 	.word	0x40000400
 8001694:	40000800 	.word	0x40000800

08001698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d122      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d11b      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f06f 0202 	mvn.w	r2, #2
 80016c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f8ed 	bl	80018ba <HAL_TIM_IC_CaptureCallback>
 80016e0:	e005      	b.n	80016ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f8e0 	bl	80018a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f8ef 	bl	80018cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d122      	bne.n	8001748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b04      	cmp	r3, #4
 800170e:	d11b      	bne.n	8001748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f06f 0204 	mvn.w	r2, #4
 8001718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2202      	movs	r2, #2
 800171e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f8c3 	bl	80018ba <HAL_TIM_IC_CaptureCallback>
 8001734:	e005      	b.n	8001742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f8b6 	bl	80018a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f8c5 	bl	80018cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b08      	cmp	r3, #8
 8001754:	d122      	bne.n	800179c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b08      	cmp	r3, #8
 8001762:	d11b      	bne.n	800179c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f06f 0208 	mvn.w	r2, #8
 800176c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2204      	movs	r2, #4
 8001772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f899 	bl	80018ba <HAL_TIM_IC_CaptureCallback>
 8001788:	e005      	b.n	8001796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f88c 	bl	80018a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f89b 	bl	80018cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d122      	bne.n	80017f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	2b10      	cmp	r3, #16
 80017b6:	d11b      	bne.n	80017f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f06f 0210 	mvn.w	r2, #16
 80017c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2208      	movs	r2, #8
 80017c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f86f 	bl	80018ba <HAL_TIM_IC_CaptureCallback>
 80017dc:	e005      	b.n	80017ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f862 	bl	80018a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f871 	bl	80018cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d10e      	bne.n	800181c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b01      	cmp	r3, #1
 800180a:	d107      	bne.n	800181c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f06f 0201 	mvn.w	r2, #1
 8001814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7fe fd7c 	bl	8000314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001826:	2b80      	cmp	r3, #128	; 0x80
 8001828:	d10e      	bne.n	8001848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001834:	2b80      	cmp	r3, #128	; 0x80
 8001836:	d107      	bne.n	8001848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f8bf 	bl	80019c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001852:	2b40      	cmp	r3, #64	; 0x40
 8001854:	d10e      	bne.n	8001874 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001860:	2b40      	cmp	r3, #64	; 0x40
 8001862:	d107      	bne.n	8001874 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800186c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f835 	bl	80018de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	f003 0320 	and.w	r3, r3, #32
 800187e:	2b20      	cmp	r3, #32
 8001880:	d10e      	bne.n	80018a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f003 0320 	and.w	r3, r3, #32
 800188c:	2b20      	cmp	r3, #32
 800188e:	d107      	bne.n	80018a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f06f 0220 	mvn.w	r2, #32
 8001898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f88a 	bl	80019b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <TIM_Base_SetConfig+0xb8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d00b      	beq.n	8001920 <TIM_Base_SetConfig+0x30>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190e:	d007      	beq.n	8001920 <TIM_Base_SetConfig+0x30>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a26      	ldr	r2, [pc, #152]	; (80019ac <TIM_Base_SetConfig+0xbc>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d003      	beq.n	8001920 <TIM_Base_SetConfig+0x30>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a25      	ldr	r2, [pc, #148]	; (80019b0 <TIM_Base_SetConfig+0xc0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d108      	bne.n	8001932 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <TIM_Base_SetConfig+0xb8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d00b      	beq.n	8001952 <TIM_Base_SetConfig+0x62>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001940:	d007      	beq.n	8001952 <TIM_Base_SetConfig+0x62>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <TIM_Base_SetConfig+0xbc>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d003      	beq.n	8001952 <TIM_Base_SetConfig+0x62>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <TIM_Base_SetConfig+0xc0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d108      	bne.n	8001964 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4313      	orrs	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	4313      	orrs	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <TIM_Base_SetConfig+0xb8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d103      	bne.n	8001998 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	615a      	str	r2, [r3, #20]
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	40012c00 	.word	0x40012c00
 80019ac:	40000400 	.word	0x40000400
 80019b0:	40000800 	.word	0x40000800

080019b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <__errno>:
 80019d8:	4b01      	ldr	r3, [pc, #4]	; (80019e0 <__errno+0x8>)
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	2000000c 	.word	0x2000000c

080019e4 <__libc_init_array>:
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	2600      	movs	r6, #0
 80019e8:	4d0c      	ldr	r5, [pc, #48]	; (8001a1c <__libc_init_array+0x38>)
 80019ea:	4c0d      	ldr	r4, [pc, #52]	; (8001a20 <__libc_init_array+0x3c>)
 80019ec:	1b64      	subs	r4, r4, r5
 80019ee:	10a4      	asrs	r4, r4, #2
 80019f0:	42a6      	cmp	r6, r4
 80019f2:	d109      	bne.n	8001a08 <__libc_init_array+0x24>
 80019f4:	f000 fff8 	bl	80029e8 <_init>
 80019f8:	2600      	movs	r6, #0
 80019fa:	4d0a      	ldr	r5, [pc, #40]	; (8001a24 <__libc_init_array+0x40>)
 80019fc:	4c0a      	ldr	r4, [pc, #40]	; (8001a28 <__libc_init_array+0x44>)
 80019fe:	1b64      	subs	r4, r4, r5
 8001a00:	10a4      	asrs	r4, r4, #2
 8001a02:	42a6      	cmp	r6, r4
 8001a04:	d105      	bne.n	8001a12 <__libc_init_array+0x2e>
 8001a06:	bd70      	pop	{r4, r5, r6, pc}
 8001a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a0c:	4798      	blx	r3
 8001a0e:	3601      	adds	r6, #1
 8001a10:	e7ee      	b.n	80019f0 <__libc_init_array+0xc>
 8001a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a16:	4798      	blx	r3
 8001a18:	3601      	adds	r6, #1
 8001a1a:	e7f2      	b.n	8001a02 <__libc_init_array+0x1e>
 8001a1c:	08002af0 	.word	0x08002af0
 8001a20:	08002af0 	.word	0x08002af0
 8001a24:	08002af0 	.word	0x08002af0
 8001a28:	08002af4 	.word	0x08002af4

08001a2c <memset>:
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4402      	add	r2, r0
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d100      	bne.n	8001a36 <memset+0xa>
 8001a34:	4770      	bx	lr
 8001a36:	f803 1b01 	strb.w	r1, [r3], #1
 8001a3a:	e7f9      	b.n	8001a30 <memset+0x4>

08001a3c <iprintf>:
 8001a3c:	b40f      	push	{r0, r1, r2, r3}
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <iprintf+0x2c>)
 8001a40:	b513      	push	{r0, r1, r4, lr}
 8001a42:	681c      	ldr	r4, [r3, #0]
 8001a44:	b124      	cbz	r4, 8001a50 <iprintf+0x14>
 8001a46:	69a3      	ldr	r3, [r4, #24]
 8001a48:	b913      	cbnz	r3, 8001a50 <iprintf+0x14>
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f000 fa5e 	bl	8001f0c <__sinit>
 8001a50:	ab05      	add	r3, sp, #20
 8001a52:	4620      	mov	r0, r4
 8001a54:	9a04      	ldr	r2, [sp, #16]
 8001a56:	68a1      	ldr	r1, [r4, #8]
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	f000 fc29 	bl	80022b0 <_vfiprintf_r>
 8001a5e:	b002      	add	sp, #8
 8001a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a64:	b004      	add	sp, #16
 8001a66:	4770      	bx	lr
 8001a68:	2000000c 	.word	0x2000000c

08001a6c <_puts_r>:
 8001a6c:	b570      	push	{r4, r5, r6, lr}
 8001a6e:	460e      	mov	r6, r1
 8001a70:	4605      	mov	r5, r0
 8001a72:	b118      	cbz	r0, 8001a7c <_puts_r+0x10>
 8001a74:	6983      	ldr	r3, [r0, #24]
 8001a76:	b90b      	cbnz	r3, 8001a7c <_puts_r+0x10>
 8001a78:	f000 fa48 	bl	8001f0c <__sinit>
 8001a7c:	69ab      	ldr	r3, [r5, #24]
 8001a7e:	68ac      	ldr	r4, [r5, #8]
 8001a80:	b913      	cbnz	r3, 8001a88 <_puts_r+0x1c>
 8001a82:	4628      	mov	r0, r5
 8001a84:	f000 fa42 	bl	8001f0c <__sinit>
 8001a88:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <_puts_r+0xd0>)
 8001a8a:	429c      	cmp	r4, r3
 8001a8c:	d120      	bne.n	8001ad0 <_puts_r+0x64>
 8001a8e:	686c      	ldr	r4, [r5, #4]
 8001a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a92:	07db      	lsls	r3, r3, #31
 8001a94:	d405      	bmi.n	8001aa2 <_puts_r+0x36>
 8001a96:	89a3      	ldrh	r3, [r4, #12]
 8001a98:	0598      	lsls	r0, r3, #22
 8001a9a:	d402      	bmi.n	8001aa2 <_puts_r+0x36>
 8001a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a9e:	f000 fad3 	bl	8002048 <__retarget_lock_acquire_recursive>
 8001aa2:	89a3      	ldrh	r3, [r4, #12]
 8001aa4:	0719      	lsls	r1, r3, #28
 8001aa6:	d51d      	bpl.n	8001ae4 <_puts_r+0x78>
 8001aa8:	6923      	ldr	r3, [r4, #16]
 8001aaa:	b1db      	cbz	r3, 8001ae4 <_puts_r+0x78>
 8001aac:	3e01      	subs	r6, #1
 8001aae:	68a3      	ldr	r3, [r4, #8]
 8001ab0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	60a3      	str	r3, [r4, #8]
 8001ab8:	bb39      	cbnz	r1, 8001b0a <_puts_r+0x9e>
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	da38      	bge.n	8001b30 <_puts_r+0xc4>
 8001abe:	4622      	mov	r2, r4
 8001ac0:	210a      	movs	r1, #10
 8001ac2:	4628      	mov	r0, r5
 8001ac4:	f000 f848 	bl	8001b58 <__swbuf_r>
 8001ac8:	3001      	adds	r0, #1
 8001aca:	d011      	beq.n	8001af0 <_puts_r+0x84>
 8001acc:	250a      	movs	r5, #10
 8001ace:	e011      	b.n	8001af4 <_puts_r+0x88>
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <_puts_r+0xd4>)
 8001ad2:	429c      	cmp	r4, r3
 8001ad4:	d101      	bne.n	8001ada <_puts_r+0x6e>
 8001ad6:	68ac      	ldr	r4, [r5, #8]
 8001ad8:	e7da      	b.n	8001a90 <_puts_r+0x24>
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <_puts_r+0xd8>)
 8001adc:	429c      	cmp	r4, r3
 8001ade:	bf08      	it	eq
 8001ae0:	68ec      	ldreq	r4, [r5, #12]
 8001ae2:	e7d5      	b.n	8001a90 <_puts_r+0x24>
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f000 f888 	bl	8001bfc <__swsetup_r>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	d0dd      	beq.n	8001aac <_puts_r+0x40>
 8001af0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001af4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001af6:	07da      	lsls	r2, r3, #31
 8001af8:	d405      	bmi.n	8001b06 <_puts_r+0x9a>
 8001afa:	89a3      	ldrh	r3, [r4, #12]
 8001afc:	059b      	lsls	r3, r3, #22
 8001afe:	d402      	bmi.n	8001b06 <_puts_r+0x9a>
 8001b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b02:	f000 faa2 	bl	800204a <__retarget_lock_release_recursive>
 8001b06:	4628      	mov	r0, r5
 8001b08:	bd70      	pop	{r4, r5, r6, pc}
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	da04      	bge.n	8001b18 <_puts_r+0xac>
 8001b0e:	69a2      	ldr	r2, [r4, #24]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dc06      	bgt.n	8001b22 <_puts_r+0xb6>
 8001b14:	290a      	cmp	r1, #10
 8001b16:	d004      	beq.n	8001b22 <_puts_r+0xb6>
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	6022      	str	r2, [r4, #0]
 8001b1e:	7019      	strb	r1, [r3, #0]
 8001b20:	e7c5      	b.n	8001aae <_puts_r+0x42>
 8001b22:	4622      	mov	r2, r4
 8001b24:	4628      	mov	r0, r5
 8001b26:	f000 f817 	bl	8001b58 <__swbuf_r>
 8001b2a:	3001      	adds	r0, #1
 8001b2c:	d1bf      	bne.n	8001aae <_puts_r+0x42>
 8001b2e:	e7df      	b.n	8001af0 <_puts_r+0x84>
 8001b30:	250a      	movs	r5, #10
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	6022      	str	r2, [r4, #0]
 8001b38:	701d      	strb	r5, [r3, #0]
 8001b3a:	e7db      	b.n	8001af4 <_puts_r+0x88>
 8001b3c:	08002a7c 	.word	0x08002a7c
 8001b40:	08002a9c 	.word	0x08002a9c
 8001b44:	08002a5c 	.word	0x08002a5c

08001b48 <puts>:
 8001b48:	4b02      	ldr	r3, [pc, #8]	; (8001b54 <puts+0xc>)
 8001b4a:	4601      	mov	r1, r0
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	f7ff bf8d 	b.w	8001a6c <_puts_r>
 8001b52:	bf00      	nop
 8001b54:	2000000c 	.word	0x2000000c

08001b58 <__swbuf_r>:
 8001b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b5a:	460e      	mov	r6, r1
 8001b5c:	4614      	mov	r4, r2
 8001b5e:	4605      	mov	r5, r0
 8001b60:	b118      	cbz	r0, 8001b6a <__swbuf_r+0x12>
 8001b62:	6983      	ldr	r3, [r0, #24]
 8001b64:	b90b      	cbnz	r3, 8001b6a <__swbuf_r+0x12>
 8001b66:	f000 f9d1 	bl	8001f0c <__sinit>
 8001b6a:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <__swbuf_r+0x98>)
 8001b6c:	429c      	cmp	r4, r3
 8001b6e:	d12b      	bne.n	8001bc8 <__swbuf_r+0x70>
 8001b70:	686c      	ldr	r4, [r5, #4]
 8001b72:	69a3      	ldr	r3, [r4, #24]
 8001b74:	60a3      	str	r3, [r4, #8]
 8001b76:	89a3      	ldrh	r3, [r4, #12]
 8001b78:	071a      	lsls	r2, r3, #28
 8001b7a:	d52f      	bpl.n	8001bdc <__swbuf_r+0x84>
 8001b7c:	6923      	ldr	r3, [r4, #16]
 8001b7e:	b36b      	cbz	r3, 8001bdc <__swbuf_r+0x84>
 8001b80:	6923      	ldr	r3, [r4, #16]
 8001b82:	6820      	ldr	r0, [r4, #0]
 8001b84:	b2f6      	uxtb	r6, r6
 8001b86:	1ac0      	subs	r0, r0, r3
 8001b88:	6963      	ldr	r3, [r4, #20]
 8001b8a:	4637      	mov	r7, r6
 8001b8c:	4283      	cmp	r3, r0
 8001b8e:	dc04      	bgt.n	8001b9a <__swbuf_r+0x42>
 8001b90:	4621      	mov	r1, r4
 8001b92:	4628      	mov	r0, r5
 8001b94:	f000 f926 	bl	8001de4 <_fflush_r>
 8001b98:	bb30      	cbnz	r0, 8001be8 <__swbuf_r+0x90>
 8001b9a:	68a3      	ldr	r3, [r4, #8]
 8001b9c:	3001      	adds	r0, #1
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	60a3      	str	r3, [r4, #8]
 8001ba2:	6823      	ldr	r3, [r4, #0]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	6022      	str	r2, [r4, #0]
 8001ba8:	701e      	strb	r6, [r3, #0]
 8001baa:	6963      	ldr	r3, [r4, #20]
 8001bac:	4283      	cmp	r3, r0
 8001bae:	d004      	beq.n	8001bba <__swbuf_r+0x62>
 8001bb0:	89a3      	ldrh	r3, [r4, #12]
 8001bb2:	07db      	lsls	r3, r3, #31
 8001bb4:	d506      	bpl.n	8001bc4 <__swbuf_r+0x6c>
 8001bb6:	2e0a      	cmp	r6, #10
 8001bb8:	d104      	bne.n	8001bc4 <__swbuf_r+0x6c>
 8001bba:	4621      	mov	r1, r4
 8001bbc:	4628      	mov	r0, r5
 8001bbe:	f000 f911 	bl	8001de4 <_fflush_r>
 8001bc2:	b988      	cbnz	r0, 8001be8 <__swbuf_r+0x90>
 8001bc4:	4638      	mov	r0, r7
 8001bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <__swbuf_r+0x9c>)
 8001bca:	429c      	cmp	r4, r3
 8001bcc:	d101      	bne.n	8001bd2 <__swbuf_r+0x7a>
 8001bce:	68ac      	ldr	r4, [r5, #8]
 8001bd0:	e7cf      	b.n	8001b72 <__swbuf_r+0x1a>
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <__swbuf_r+0xa0>)
 8001bd4:	429c      	cmp	r4, r3
 8001bd6:	bf08      	it	eq
 8001bd8:	68ec      	ldreq	r4, [r5, #12]
 8001bda:	e7ca      	b.n	8001b72 <__swbuf_r+0x1a>
 8001bdc:	4621      	mov	r1, r4
 8001bde:	4628      	mov	r0, r5
 8001be0:	f000 f80c 	bl	8001bfc <__swsetup_r>
 8001be4:	2800      	cmp	r0, #0
 8001be6:	d0cb      	beq.n	8001b80 <__swbuf_r+0x28>
 8001be8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001bec:	e7ea      	b.n	8001bc4 <__swbuf_r+0x6c>
 8001bee:	bf00      	nop
 8001bf0:	08002a7c 	.word	0x08002a7c
 8001bf4:	08002a9c 	.word	0x08002a9c
 8001bf8:	08002a5c 	.word	0x08002a5c

08001bfc <__swsetup_r>:
 8001bfc:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <__swsetup_r+0xcc>)
 8001bfe:	b570      	push	{r4, r5, r6, lr}
 8001c00:	681d      	ldr	r5, [r3, #0]
 8001c02:	4606      	mov	r6, r0
 8001c04:	460c      	mov	r4, r1
 8001c06:	b125      	cbz	r5, 8001c12 <__swsetup_r+0x16>
 8001c08:	69ab      	ldr	r3, [r5, #24]
 8001c0a:	b913      	cbnz	r3, 8001c12 <__swsetup_r+0x16>
 8001c0c:	4628      	mov	r0, r5
 8001c0e:	f000 f97d 	bl	8001f0c <__sinit>
 8001c12:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <__swsetup_r+0xd0>)
 8001c14:	429c      	cmp	r4, r3
 8001c16:	d10f      	bne.n	8001c38 <__swsetup_r+0x3c>
 8001c18:	686c      	ldr	r4, [r5, #4]
 8001c1a:	89a3      	ldrh	r3, [r4, #12]
 8001c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c20:	0719      	lsls	r1, r3, #28
 8001c22:	d42c      	bmi.n	8001c7e <__swsetup_r+0x82>
 8001c24:	06dd      	lsls	r5, r3, #27
 8001c26:	d411      	bmi.n	8001c4c <__swsetup_r+0x50>
 8001c28:	2309      	movs	r3, #9
 8001c2a:	6033      	str	r3, [r6, #0]
 8001c2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c34:	81a3      	strh	r3, [r4, #12]
 8001c36:	e03e      	b.n	8001cb6 <__swsetup_r+0xba>
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <__swsetup_r+0xd4>)
 8001c3a:	429c      	cmp	r4, r3
 8001c3c:	d101      	bne.n	8001c42 <__swsetup_r+0x46>
 8001c3e:	68ac      	ldr	r4, [r5, #8]
 8001c40:	e7eb      	b.n	8001c1a <__swsetup_r+0x1e>
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <__swsetup_r+0xd8>)
 8001c44:	429c      	cmp	r4, r3
 8001c46:	bf08      	it	eq
 8001c48:	68ec      	ldreq	r4, [r5, #12]
 8001c4a:	e7e6      	b.n	8001c1a <__swsetup_r+0x1e>
 8001c4c:	0758      	lsls	r0, r3, #29
 8001c4e:	d512      	bpl.n	8001c76 <__swsetup_r+0x7a>
 8001c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c52:	b141      	cbz	r1, 8001c66 <__swsetup_r+0x6a>
 8001c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c58:	4299      	cmp	r1, r3
 8001c5a:	d002      	beq.n	8001c62 <__swsetup_r+0x66>
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	f000 fa59 	bl	8002114 <_free_r>
 8001c62:	2300      	movs	r3, #0
 8001c64:	6363      	str	r3, [r4, #52]	; 0x34
 8001c66:	89a3      	ldrh	r3, [r4, #12]
 8001c68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c6c:	81a3      	strh	r3, [r4, #12]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	6063      	str	r3, [r4, #4]
 8001c72:	6923      	ldr	r3, [r4, #16]
 8001c74:	6023      	str	r3, [r4, #0]
 8001c76:	89a3      	ldrh	r3, [r4, #12]
 8001c78:	f043 0308 	orr.w	r3, r3, #8
 8001c7c:	81a3      	strh	r3, [r4, #12]
 8001c7e:	6923      	ldr	r3, [r4, #16]
 8001c80:	b94b      	cbnz	r3, 8001c96 <__swsetup_r+0x9a>
 8001c82:	89a3      	ldrh	r3, [r4, #12]
 8001c84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c8c:	d003      	beq.n	8001c96 <__swsetup_r+0x9a>
 8001c8e:	4621      	mov	r1, r4
 8001c90:	4630      	mov	r0, r6
 8001c92:	f000 f9ff 	bl	8002094 <__smakebuf_r>
 8001c96:	89a0      	ldrh	r0, [r4, #12]
 8001c98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c9c:	f010 0301 	ands.w	r3, r0, #1
 8001ca0:	d00a      	beq.n	8001cb8 <__swsetup_r+0xbc>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60a3      	str	r3, [r4, #8]
 8001ca6:	6963      	ldr	r3, [r4, #20]
 8001ca8:	425b      	negs	r3, r3
 8001caa:	61a3      	str	r3, [r4, #24]
 8001cac:	6923      	ldr	r3, [r4, #16]
 8001cae:	b943      	cbnz	r3, 8001cc2 <__swsetup_r+0xc6>
 8001cb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001cb4:	d1ba      	bne.n	8001c2c <__swsetup_r+0x30>
 8001cb6:	bd70      	pop	{r4, r5, r6, pc}
 8001cb8:	0781      	lsls	r1, r0, #30
 8001cba:	bf58      	it	pl
 8001cbc:	6963      	ldrpl	r3, [r4, #20]
 8001cbe:	60a3      	str	r3, [r4, #8]
 8001cc0:	e7f4      	b.n	8001cac <__swsetup_r+0xb0>
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	e7f7      	b.n	8001cb6 <__swsetup_r+0xba>
 8001cc6:	bf00      	nop
 8001cc8:	2000000c 	.word	0x2000000c
 8001ccc:	08002a7c 	.word	0x08002a7c
 8001cd0:	08002a9c 	.word	0x08002a9c
 8001cd4:	08002a5c 	.word	0x08002a5c

08001cd8 <__sflush_r>:
 8001cd8:	898a      	ldrh	r2, [r1, #12]
 8001cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cde:	4605      	mov	r5, r0
 8001ce0:	0710      	lsls	r0, r2, #28
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	d458      	bmi.n	8001d98 <__sflush_r+0xc0>
 8001ce6:	684b      	ldr	r3, [r1, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	dc05      	bgt.n	8001cf8 <__sflush_r+0x20>
 8001cec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	dc02      	bgt.n	8001cf8 <__sflush_r+0x20>
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cfa:	2e00      	cmp	r6, #0
 8001cfc:	d0f9      	beq.n	8001cf2 <__sflush_r+0x1a>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d04:	682f      	ldr	r7, [r5, #0]
 8001d06:	602b      	str	r3, [r5, #0]
 8001d08:	d032      	beq.n	8001d70 <__sflush_r+0x98>
 8001d0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d0c:	89a3      	ldrh	r3, [r4, #12]
 8001d0e:	075a      	lsls	r2, r3, #29
 8001d10:	d505      	bpl.n	8001d1e <__sflush_r+0x46>
 8001d12:	6863      	ldr	r3, [r4, #4]
 8001d14:	1ac0      	subs	r0, r0, r3
 8001d16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d18:	b10b      	cbz	r3, 8001d1e <__sflush_r+0x46>
 8001d1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d1c:	1ac0      	subs	r0, r0, r3
 8001d1e:	2300      	movs	r3, #0
 8001d20:	4602      	mov	r2, r0
 8001d22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d24:	4628      	mov	r0, r5
 8001d26:	6a21      	ldr	r1, [r4, #32]
 8001d28:	47b0      	blx	r6
 8001d2a:	1c43      	adds	r3, r0, #1
 8001d2c:	89a3      	ldrh	r3, [r4, #12]
 8001d2e:	d106      	bne.n	8001d3e <__sflush_r+0x66>
 8001d30:	6829      	ldr	r1, [r5, #0]
 8001d32:	291d      	cmp	r1, #29
 8001d34:	d82c      	bhi.n	8001d90 <__sflush_r+0xb8>
 8001d36:	4a2a      	ldr	r2, [pc, #168]	; (8001de0 <__sflush_r+0x108>)
 8001d38:	40ca      	lsrs	r2, r1
 8001d3a:	07d6      	lsls	r6, r2, #31
 8001d3c:	d528      	bpl.n	8001d90 <__sflush_r+0xb8>
 8001d3e:	2200      	movs	r2, #0
 8001d40:	6062      	str	r2, [r4, #4]
 8001d42:	6922      	ldr	r2, [r4, #16]
 8001d44:	04d9      	lsls	r1, r3, #19
 8001d46:	6022      	str	r2, [r4, #0]
 8001d48:	d504      	bpl.n	8001d54 <__sflush_r+0x7c>
 8001d4a:	1c42      	adds	r2, r0, #1
 8001d4c:	d101      	bne.n	8001d52 <__sflush_r+0x7a>
 8001d4e:	682b      	ldr	r3, [r5, #0]
 8001d50:	b903      	cbnz	r3, 8001d54 <__sflush_r+0x7c>
 8001d52:	6560      	str	r0, [r4, #84]	; 0x54
 8001d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d56:	602f      	str	r7, [r5, #0]
 8001d58:	2900      	cmp	r1, #0
 8001d5a:	d0ca      	beq.n	8001cf2 <__sflush_r+0x1a>
 8001d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d60:	4299      	cmp	r1, r3
 8001d62:	d002      	beq.n	8001d6a <__sflush_r+0x92>
 8001d64:	4628      	mov	r0, r5
 8001d66:	f000 f9d5 	bl	8002114 <_free_r>
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	6360      	str	r0, [r4, #52]	; 0x34
 8001d6e:	e7c1      	b.n	8001cf4 <__sflush_r+0x1c>
 8001d70:	6a21      	ldr	r1, [r4, #32]
 8001d72:	2301      	movs	r3, #1
 8001d74:	4628      	mov	r0, r5
 8001d76:	47b0      	blx	r6
 8001d78:	1c41      	adds	r1, r0, #1
 8001d7a:	d1c7      	bne.n	8001d0c <__sflush_r+0x34>
 8001d7c:	682b      	ldr	r3, [r5, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0c4      	beq.n	8001d0c <__sflush_r+0x34>
 8001d82:	2b1d      	cmp	r3, #29
 8001d84:	d001      	beq.n	8001d8a <__sflush_r+0xb2>
 8001d86:	2b16      	cmp	r3, #22
 8001d88:	d101      	bne.n	8001d8e <__sflush_r+0xb6>
 8001d8a:	602f      	str	r7, [r5, #0]
 8001d8c:	e7b1      	b.n	8001cf2 <__sflush_r+0x1a>
 8001d8e:	89a3      	ldrh	r3, [r4, #12]
 8001d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d94:	81a3      	strh	r3, [r4, #12]
 8001d96:	e7ad      	b.n	8001cf4 <__sflush_r+0x1c>
 8001d98:	690f      	ldr	r7, [r1, #16]
 8001d9a:	2f00      	cmp	r7, #0
 8001d9c:	d0a9      	beq.n	8001cf2 <__sflush_r+0x1a>
 8001d9e:	0793      	lsls	r3, r2, #30
 8001da0:	bf18      	it	ne
 8001da2:	2300      	movne	r3, #0
 8001da4:	680e      	ldr	r6, [r1, #0]
 8001da6:	bf08      	it	eq
 8001da8:	694b      	ldreq	r3, [r1, #20]
 8001daa:	eba6 0807 	sub.w	r8, r6, r7
 8001dae:	600f      	str	r7, [r1, #0]
 8001db0:	608b      	str	r3, [r1, #8]
 8001db2:	f1b8 0f00 	cmp.w	r8, #0
 8001db6:	dd9c      	ble.n	8001cf2 <__sflush_r+0x1a>
 8001db8:	4643      	mov	r3, r8
 8001dba:	463a      	mov	r2, r7
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	6a21      	ldr	r1, [r4, #32]
 8001dc0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001dc2:	47b0      	blx	r6
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	dc06      	bgt.n	8001dd6 <__sflush_r+0xfe>
 8001dc8:	89a3      	ldrh	r3, [r4, #12]
 8001dca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd2:	81a3      	strh	r3, [r4, #12]
 8001dd4:	e78e      	b.n	8001cf4 <__sflush_r+0x1c>
 8001dd6:	4407      	add	r7, r0
 8001dd8:	eba8 0800 	sub.w	r8, r8, r0
 8001ddc:	e7e9      	b.n	8001db2 <__sflush_r+0xda>
 8001dde:	bf00      	nop
 8001de0:	20400001 	.word	0x20400001

08001de4 <_fflush_r>:
 8001de4:	b538      	push	{r3, r4, r5, lr}
 8001de6:	690b      	ldr	r3, [r1, #16]
 8001de8:	4605      	mov	r5, r0
 8001dea:	460c      	mov	r4, r1
 8001dec:	b913      	cbnz	r3, 8001df4 <_fflush_r+0x10>
 8001dee:	2500      	movs	r5, #0
 8001df0:	4628      	mov	r0, r5
 8001df2:	bd38      	pop	{r3, r4, r5, pc}
 8001df4:	b118      	cbz	r0, 8001dfe <_fflush_r+0x1a>
 8001df6:	6983      	ldr	r3, [r0, #24]
 8001df8:	b90b      	cbnz	r3, 8001dfe <_fflush_r+0x1a>
 8001dfa:	f000 f887 	bl	8001f0c <__sinit>
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <_fflush_r+0x6c>)
 8001e00:	429c      	cmp	r4, r3
 8001e02:	d11b      	bne.n	8001e3c <_fflush_r+0x58>
 8001e04:	686c      	ldr	r4, [r5, #4]
 8001e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0ef      	beq.n	8001dee <_fflush_r+0xa>
 8001e0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e10:	07d0      	lsls	r0, r2, #31
 8001e12:	d404      	bmi.n	8001e1e <_fflush_r+0x3a>
 8001e14:	0599      	lsls	r1, r3, #22
 8001e16:	d402      	bmi.n	8001e1e <_fflush_r+0x3a>
 8001e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e1a:	f000 f915 	bl	8002048 <__retarget_lock_acquire_recursive>
 8001e1e:	4628      	mov	r0, r5
 8001e20:	4621      	mov	r1, r4
 8001e22:	f7ff ff59 	bl	8001cd8 <__sflush_r>
 8001e26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e28:	4605      	mov	r5, r0
 8001e2a:	07da      	lsls	r2, r3, #31
 8001e2c:	d4e0      	bmi.n	8001df0 <_fflush_r+0xc>
 8001e2e:	89a3      	ldrh	r3, [r4, #12]
 8001e30:	059b      	lsls	r3, r3, #22
 8001e32:	d4dd      	bmi.n	8001df0 <_fflush_r+0xc>
 8001e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e36:	f000 f908 	bl	800204a <__retarget_lock_release_recursive>
 8001e3a:	e7d9      	b.n	8001df0 <_fflush_r+0xc>
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <_fflush_r+0x70>)
 8001e3e:	429c      	cmp	r4, r3
 8001e40:	d101      	bne.n	8001e46 <_fflush_r+0x62>
 8001e42:	68ac      	ldr	r4, [r5, #8]
 8001e44:	e7df      	b.n	8001e06 <_fflush_r+0x22>
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <_fflush_r+0x74>)
 8001e48:	429c      	cmp	r4, r3
 8001e4a:	bf08      	it	eq
 8001e4c:	68ec      	ldreq	r4, [r5, #12]
 8001e4e:	e7da      	b.n	8001e06 <_fflush_r+0x22>
 8001e50:	08002a7c 	.word	0x08002a7c
 8001e54:	08002a9c 	.word	0x08002a9c
 8001e58:	08002a5c 	.word	0x08002a5c

08001e5c <std>:
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	b510      	push	{r4, lr}
 8001e60:	4604      	mov	r4, r0
 8001e62:	e9c0 3300 	strd	r3, r3, [r0]
 8001e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e6a:	6083      	str	r3, [r0, #8]
 8001e6c:	8181      	strh	r1, [r0, #12]
 8001e6e:	6643      	str	r3, [r0, #100]	; 0x64
 8001e70:	81c2      	strh	r2, [r0, #14]
 8001e72:	6183      	str	r3, [r0, #24]
 8001e74:	4619      	mov	r1, r3
 8001e76:	2208      	movs	r2, #8
 8001e78:	305c      	adds	r0, #92	; 0x5c
 8001e7a:	f7ff fdd7 	bl	8001a2c <memset>
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <std+0x38>)
 8001e80:	6224      	str	r4, [r4, #32]
 8001e82:	6263      	str	r3, [r4, #36]	; 0x24
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <std+0x3c>)
 8001e86:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <std+0x40>)
 8001e8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <std+0x44>)
 8001e8e:	6323      	str	r3, [r4, #48]	; 0x30
 8001e90:	bd10      	pop	{r4, pc}
 8001e92:	bf00      	nop
 8001e94:	0800285d 	.word	0x0800285d
 8001e98:	0800287f 	.word	0x0800287f
 8001e9c:	080028b7 	.word	0x080028b7
 8001ea0:	080028db 	.word	0x080028db

08001ea4 <_cleanup_r>:
 8001ea4:	4901      	ldr	r1, [pc, #4]	; (8001eac <_cleanup_r+0x8>)
 8001ea6:	f000 b8af 	b.w	8002008 <_fwalk_reent>
 8001eaa:	bf00      	nop
 8001eac:	08001de5 	.word	0x08001de5

08001eb0 <__sfmoreglue>:
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	2568      	movs	r5, #104	; 0x68
 8001eb4:	1e4a      	subs	r2, r1, #1
 8001eb6:	4355      	muls	r5, r2
 8001eb8:	460e      	mov	r6, r1
 8001eba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ebe:	f000 f975 	bl	80021ac <_malloc_r>
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	b140      	cbz	r0, 8001ed8 <__sfmoreglue+0x28>
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	e9c0 1600 	strd	r1, r6, [r0]
 8001ecc:	300c      	adds	r0, #12
 8001ece:	60a0      	str	r0, [r4, #8]
 8001ed0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ed4:	f7ff fdaa 	bl	8001a2c <memset>
 8001ed8:	4620      	mov	r0, r4
 8001eda:	bd70      	pop	{r4, r5, r6, pc}

08001edc <__sfp_lock_acquire>:
 8001edc:	4801      	ldr	r0, [pc, #4]	; (8001ee4 <__sfp_lock_acquire+0x8>)
 8001ede:	f000 b8b3 	b.w	8002048 <__retarget_lock_acquire_recursive>
 8001ee2:	bf00      	nop
 8001ee4:	200000ec 	.word	0x200000ec

08001ee8 <__sfp_lock_release>:
 8001ee8:	4801      	ldr	r0, [pc, #4]	; (8001ef0 <__sfp_lock_release+0x8>)
 8001eea:	f000 b8ae 	b.w	800204a <__retarget_lock_release_recursive>
 8001eee:	bf00      	nop
 8001ef0:	200000ec 	.word	0x200000ec

08001ef4 <__sinit_lock_acquire>:
 8001ef4:	4801      	ldr	r0, [pc, #4]	; (8001efc <__sinit_lock_acquire+0x8>)
 8001ef6:	f000 b8a7 	b.w	8002048 <__retarget_lock_acquire_recursive>
 8001efa:	bf00      	nop
 8001efc:	200000e7 	.word	0x200000e7

08001f00 <__sinit_lock_release>:
 8001f00:	4801      	ldr	r0, [pc, #4]	; (8001f08 <__sinit_lock_release+0x8>)
 8001f02:	f000 b8a2 	b.w	800204a <__retarget_lock_release_recursive>
 8001f06:	bf00      	nop
 8001f08:	200000e7 	.word	0x200000e7

08001f0c <__sinit>:
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	4604      	mov	r4, r0
 8001f10:	f7ff fff0 	bl	8001ef4 <__sinit_lock_acquire>
 8001f14:	69a3      	ldr	r3, [r4, #24]
 8001f16:	b11b      	cbz	r3, 8001f20 <__sinit+0x14>
 8001f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f1c:	f7ff bff0 	b.w	8001f00 <__sinit_lock_release>
 8001f20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f24:	6523      	str	r3, [r4, #80]	; 0x50
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <__sinit+0x68>)
 8001f28:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <__sinit+0x6c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f2e:	42a3      	cmp	r3, r4
 8001f30:	bf08      	it	eq
 8001f32:	2301      	moveq	r3, #1
 8001f34:	4620      	mov	r0, r4
 8001f36:	bf08      	it	eq
 8001f38:	61a3      	streq	r3, [r4, #24]
 8001f3a:	f000 f81f 	bl	8001f7c <__sfp>
 8001f3e:	6060      	str	r0, [r4, #4]
 8001f40:	4620      	mov	r0, r4
 8001f42:	f000 f81b 	bl	8001f7c <__sfp>
 8001f46:	60a0      	str	r0, [r4, #8]
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f000 f817 	bl	8001f7c <__sfp>
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2104      	movs	r1, #4
 8001f52:	60e0      	str	r0, [r4, #12]
 8001f54:	6860      	ldr	r0, [r4, #4]
 8001f56:	f7ff ff81 	bl	8001e5c <std>
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2109      	movs	r1, #9
 8001f5e:	68a0      	ldr	r0, [r4, #8]
 8001f60:	f7ff ff7c 	bl	8001e5c <std>
 8001f64:	2202      	movs	r2, #2
 8001f66:	2112      	movs	r1, #18
 8001f68:	68e0      	ldr	r0, [r4, #12]
 8001f6a:	f7ff ff77 	bl	8001e5c <std>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	61a3      	str	r3, [r4, #24]
 8001f72:	e7d1      	b.n	8001f18 <__sinit+0xc>
 8001f74:	08002a58 	.word	0x08002a58
 8001f78:	08001ea5 	.word	0x08001ea5

08001f7c <__sfp>:
 8001f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7e:	4607      	mov	r7, r0
 8001f80:	f7ff ffac 	bl	8001edc <__sfp_lock_acquire>
 8001f84:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <__sfp+0x84>)
 8001f86:	681e      	ldr	r6, [r3, #0]
 8001f88:	69b3      	ldr	r3, [r6, #24]
 8001f8a:	b913      	cbnz	r3, 8001f92 <__sfp+0x16>
 8001f8c:	4630      	mov	r0, r6
 8001f8e:	f7ff ffbd 	bl	8001f0c <__sinit>
 8001f92:	3648      	adds	r6, #72	; 0x48
 8001f94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	d503      	bpl.n	8001fa4 <__sfp+0x28>
 8001f9c:	6833      	ldr	r3, [r6, #0]
 8001f9e:	b30b      	cbz	r3, 8001fe4 <__sfp+0x68>
 8001fa0:	6836      	ldr	r6, [r6, #0]
 8001fa2:	e7f7      	b.n	8001f94 <__sfp+0x18>
 8001fa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001fa8:	b9d5      	cbnz	r5, 8001fe0 <__sfp+0x64>
 8001faa:	4b16      	ldr	r3, [pc, #88]	; (8002004 <__sfp+0x88>)
 8001fac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001fb0:	60e3      	str	r3, [r4, #12]
 8001fb2:	6665      	str	r5, [r4, #100]	; 0x64
 8001fb4:	f000 f847 	bl	8002046 <__retarget_lock_init_recursive>
 8001fb8:	f7ff ff96 	bl	8001ee8 <__sfp_lock_release>
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001fc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001fc8:	6025      	str	r5, [r4, #0]
 8001fca:	61a5      	str	r5, [r4, #24]
 8001fcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001fd0:	f7ff fd2c 	bl	8001a2c <memset>
 8001fd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001fd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001fdc:	4620      	mov	r0, r4
 8001fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fe0:	3468      	adds	r4, #104	; 0x68
 8001fe2:	e7d9      	b.n	8001f98 <__sfp+0x1c>
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	4638      	mov	r0, r7
 8001fe8:	f7ff ff62 	bl	8001eb0 <__sfmoreglue>
 8001fec:	4604      	mov	r4, r0
 8001fee:	6030      	str	r0, [r6, #0]
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	d1d5      	bne.n	8001fa0 <__sfp+0x24>
 8001ff4:	f7ff ff78 	bl	8001ee8 <__sfp_lock_release>
 8001ff8:	230c      	movs	r3, #12
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	e7ee      	b.n	8001fdc <__sfp+0x60>
 8001ffe:	bf00      	nop
 8002000:	08002a58 	.word	0x08002a58
 8002004:	ffff0001 	.word	0xffff0001

08002008 <_fwalk_reent>:
 8002008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800200c:	4606      	mov	r6, r0
 800200e:	4688      	mov	r8, r1
 8002010:	2700      	movs	r7, #0
 8002012:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002016:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800201a:	f1b9 0901 	subs.w	r9, r9, #1
 800201e:	d505      	bpl.n	800202c <_fwalk_reent+0x24>
 8002020:	6824      	ldr	r4, [r4, #0]
 8002022:	2c00      	cmp	r4, #0
 8002024:	d1f7      	bne.n	8002016 <_fwalk_reent+0xe>
 8002026:	4638      	mov	r0, r7
 8002028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800202c:	89ab      	ldrh	r3, [r5, #12]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d907      	bls.n	8002042 <_fwalk_reent+0x3a>
 8002032:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002036:	3301      	adds	r3, #1
 8002038:	d003      	beq.n	8002042 <_fwalk_reent+0x3a>
 800203a:	4629      	mov	r1, r5
 800203c:	4630      	mov	r0, r6
 800203e:	47c0      	blx	r8
 8002040:	4307      	orrs	r7, r0
 8002042:	3568      	adds	r5, #104	; 0x68
 8002044:	e7e9      	b.n	800201a <_fwalk_reent+0x12>

08002046 <__retarget_lock_init_recursive>:
 8002046:	4770      	bx	lr

08002048 <__retarget_lock_acquire_recursive>:
 8002048:	4770      	bx	lr

0800204a <__retarget_lock_release_recursive>:
 800204a:	4770      	bx	lr

0800204c <__swhatbuf_r>:
 800204c:	b570      	push	{r4, r5, r6, lr}
 800204e:	460e      	mov	r6, r1
 8002050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002054:	4614      	mov	r4, r2
 8002056:	2900      	cmp	r1, #0
 8002058:	461d      	mov	r5, r3
 800205a:	b096      	sub	sp, #88	; 0x58
 800205c:	da07      	bge.n	800206e <__swhatbuf_r+0x22>
 800205e:	2300      	movs	r3, #0
 8002060:	602b      	str	r3, [r5, #0]
 8002062:	89b3      	ldrh	r3, [r6, #12]
 8002064:	061a      	lsls	r2, r3, #24
 8002066:	d410      	bmi.n	800208a <__swhatbuf_r+0x3e>
 8002068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800206c:	e00e      	b.n	800208c <__swhatbuf_r+0x40>
 800206e:	466a      	mov	r2, sp
 8002070:	f000 fc5a 	bl	8002928 <_fstat_r>
 8002074:	2800      	cmp	r0, #0
 8002076:	dbf2      	blt.n	800205e <__swhatbuf_r+0x12>
 8002078:	9a01      	ldr	r2, [sp, #4]
 800207a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800207e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002082:	425a      	negs	r2, r3
 8002084:	415a      	adcs	r2, r3
 8002086:	602a      	str	r2, [r5, #0]
 8002088:	e7ee      	b.n	8002068 <__swhatbuf_r+0x1c>
 800208a:	2340      	movs	r3, #64	; 0x40
 800208c:	2000      	movs	r0, #0
 800208e:	6023      	str	r3, [r4, #0]
 8002090:	b016      	add	sp, #88	; 0x58
 8002092:	bd70      	pop	{r4, r5, r6, pc}

08002094 <__smakebuf_r>:
 8002094:	898b      	ldrh	r3, [r1, #12]
 8002096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002098:	079d      	lsls	r5, r3, #30
 800209a:	4606      	mov	r6, r0
 800209c:	460c      	mov	r4, r1
 800209e:	d507      	bpl.n	80020b0 <__smakebuf_r+0x1c>
 80020a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020a4:	6023      	str	r3, [r4, #0]
 80020a6:	6123      	str	r3, [r4, #16]
 80020a8:	2301      	movs	r3, #1
 80020aa:	6163      	str	r3, [r4, #20]
 80020ac:	b002      	add	sp, #8
 80020ae:	bd70      	pop	{r4, r5, r6, pc}
 80020b0:	466a      	mov	r2, sp
 80020b2:	ab01      	add	r3, sp, #4
 80020b4:	f7ff ffca 	bl	800204c <__swhatbuf_r>
 80020b8:	9900      	ldr	r1, [sp, #0]
 80020ba:	4605      	mov	r5, r0
 80020bc:	4630      	mov	r0, r6
 80020be:	f000 f875 	bl	80021ac <_malloc_r>
 80020c2:	b948      	cbnz	r0, 80020d8 <__smakebuf_r+0x44>
 80020c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020c8:	059a      	lsls	r2, r3, #22
 80020ca:	d4ef      	bmi.n	80020ac <__smakebuf_r+0x18>
 80020cc:	f023 0303 	bic.w	r3, r3, #3
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	81a3      	strh	r3, [r4, #12]
 80020d6:	e7e3      	b.n	80020a0 <__smakebuf_r+0xc>
 80020d8:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <__smakebuf_r+0x7c>)
 80020da:	62b3      	str	r3, [r6, #40]	; 0x28
 80020dc:	89a3      	ldrh	r3, [r4, #12]
 80020de:	6020      	str	r0, [r4, #0]
 80020e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e4:	81a3      	strh	r3, [r4, #12]
 80020e6:	9b00      	ldr	r3, [sp, #0]
 80020e8:	6120      	str	r0, [r4, #16]
 80020ea:	6163      	str	r3, [r4, #20]
 80020ec:	9b01      	ldr	r3, [sp, #4]
 80020ee:	b15b      	cbz	r3, 8002108 <__smakebuf_r+0x74>
 80020f0:	4630      	mov	r0, r6
 80020f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020f6:	f000 fc29 	bl	800294c <_isatty_r>
 80020fa:	b128      	cbz	r0, 8002108 <__smakebuf_r+0x74>
 80020fc:	89a3      	ldrh	r3, [r4, #12]
 80020fe:	f023 0303 	bic.w	r3, r3, #3
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	81a3      	strh	r3, [r4, #12]
 8002108:	89a0      	ldrh	r0, [r4, #12]
 800210a:	4305      	orrs	r5, r0
 800210c:	81a5      	strh	r5, [r4, #12]
 800210e:	e7cd      	b.n	80020ac <__smakebuf_r+0x18>
 8002110:	08001ea5 	.word	0x08001ea5

08002114 <_free_r>:
 8002114:	b538      	push	{r3, r4, r5, lr}
 8002116:	4605      	mov	r5, r0
 8002118:	2900      	cmp	r1, #0
 800211a:	d043      	beq.n	80021a4 <_free_r+0x90>
 800211c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002120:	1f0c      	subs	r4, r1, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	bfb8      	it	lt
 8002126:	18e4      	addlt	r4, r4, r3
 8002128:	f000 fc40 	bl	80029ac <__malloc_lock>
 800212c:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <_free_r+0x94>)
 800212e:	6813      	ldr	r3, [r2, #0]
 8002130:	4610      	mov	r0, r2
 8002132:	b933      	cbnz	r3, 8002142 <_free_r+0x2e>
 8002134:	6063      	str	r3, [r4, #4]
 8002136:	6014      	str	r4, [r2, #0]
 8002138:	4628      	mov	r0, r5
 800213a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800213e:	f000 bc3b 	b.w	80029b8 <__malloc_unlock>
 8002142:	42a3      	cmp	r3, r4
 8002144:	d90a      	bls.n	800215c <_free_r+0x48>
 8002146:	6821      	ldr	r1, [r4, #0]
 8002148:	1862      	adds	r2, r4, r1
 800214a:	4293      	cmp	r3, r2
 800214c:	bf01      	itttt	eq
 800214e:	681a      	ldreq	r2, [r3, #0]
 8002150:	685b      	ldreq	r3, [r3, #4]
 8002152:	1852      	addeq	r2, r2, r1
 8002154:	6022      	streq	r2, [r4, #0]
 8002156:	6063      	str	r3, [r4, #4]
 8002158:	6004      	str	r4, [r0, #0]
 800215a:	e7ed      	b.n	8002138 <_free_r+0x24>
 800215c:	461a      	mov	r2, r3
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	b10b      	cbz	r3, 8002166 <_free_r+0x52>
 8002162:	42a3      	cmp	r3, r4
 8002164:	d9fa      	bls.n	800215c <_free_r+0x48>
 8002166:	6811      	ldr	r1, [r2, #0]
 8002168:	1850      	adds	r0, r2, r1
 800216a:	42a0      	cmp	r0, r4
 800216c:	d10b      	bne.n	8002186 <_free_r+0x72>
 800216e:	6820      	ldr	r0, [r4, #0]
 8002170:	4401      	add	r1, r0
 8002172:	1850      	adds	r0, r2, r1
 8002174:	4283      	cmp	r3, r0
 8002176:	6011      	str	r1, [r2, #0]
 8002178:	d1de      	bne.n	8002138 <_free_r+0x24>
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4401      	add	r1, r0
 8002180:	6011      	str	r1, [r2, #0]
 8002182:	6053      	str	r3, [r2, #4]
 8002184:	e7d8      	b.n	8002138 <_free_r+0x24>
 8002186:	d902      	bls.n	800218e <_free_r+0x7a>
 8002188:	230c      	movs	r3, #12
 800218a:	602b      	str	r3, [r5, #0]
 800218c:	e7d4      	b.n	8002138 <_free_r+0x24>
 800218e:	6820      	ldr	r0, [r4, #0]
 8002190:	1821      	adds	r1, r4, r0
 8002192:	428b      	cmp	r3, r1
 8002194:	bf01      	itttt	eq
 8002196:	6819      	ldreq	r1, [r3, #0]
 8002198:	685b      	ldreq	r3, [r3, #4]
 800219a:	1809      	addeq	r1, r1, r0
 800219c:	6021      	streq	r1, [r4, #0]
 800219e:	6063      	str	r3, [r4, #4]
 80021a0:	6054      	str	r4, [r2, #4]
 80021a2:	e7c9      	b.n	8002138 <_free_r+0x24>
 80021a4:	bd38      	pop	{r3, r4, r5, pc}
 80021a6:	bf00      	nop
 80021a8:	20000090 	.word	0x20000090

080021ac <_malloc_r>:
 80021ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ae:	1ccd      	adds	r5, r1, #3
 80021b0:	f025 0503 	bic.w	r5, r5, #3
 80021b4:	3508      	adds	r5, #8
 80021b6:	2d0c      	cmp	r5, #12
 80021b8:	bf38      	it	cc
 80021ba:	250c      	movcc	r5, #12
 80021bc:	2d00      	cmp	r5, #0
 80021be:	4606      	mov	r6, r0
 80021c0:	db01      	blt.n	80021c6 <_malloc_r+0x1a>
 80021c2:	42a9      	cmp	r1, r5
 80021c4:	d903      	bls.n	80021ce <_malloc_r+0x22>
 80021c6:	230c      	movs	r3, #12
 80021c8:	6033      	str	r3, [r6, #0]
 80021ca:	2000      	movs	r0, #0
 80021cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021ce:	f000 fbed 	bl	80029ac <__malloc_lock>
 80021d2:	4921      	ldr	r1, [pc, #132]	; (8002258 <_malloc_r+0xac>)
 80021d4:	680a      	ldr	r2, [r1, #0]
 80021d6:	4614      	mov	r4, r2
 80021d8:	b99c      	cbnz	r4, 8002202 <_malloc_r+0x56>
 80021da:	4f20      	ldr	r7, [pc, #128]	; (800225c <_malloc_r+0xb0>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	b923      	cbnz	r3, 80021ea <_malloc_r+0x3e>
 80021e0:	4621      	mov	r1, r4
 80021e2:	4630      	mov	r0, r6
 80021e4:	f000 fb2a 	bl	800283c <_sbrk_r>
 80021e8:	6038      	str	r0, [r7, #0]
 80021ea:	4629      	mov	r1, r5
 80021ec:	4630      	mov	r0, r6
 80021ee:	f000 fb25 	bl	800283c <_sbrk_r>
 80021f2:	1c43      	adds	r3, r0, #1
 80021f4:	d123      	bne.n	800223e <_malloc_r+0x92>
 80021f6:	230c      	movs	r3, #12
 80021f8:	4630      	mov	r0, r6
 80021fa:	6033      	str	r3, [r6, #0]
 80021fc:	f000 fbdc 	bl	80029b8 <__malloc_unlock>
 8002200:	e7e3      	b.n	80021ca <_malloc_r+0x1e>
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	1b5b      	subs	r3, r3, r5
 8002206:	d417      	bmi.n	8002238 <_malloc_r+0x8c>
 8002208:	2b0b      	cmp	r3, #11
 800220a:	d903      	bls.n	8002214 <_malloc_r+0x68>
 800220c:	6023      	str	r3, [r4, #0]
 800220e:	441c      	add	r4, r3
 8002210:	6025      	str	r5, [r4, #0]
 8002212:	e004      	b.n	800221e <_malloc_r+0x72>
 8002214:	6863      	ldr	r3, [r4, #4]
 8002216:	42a2      	cmp	r2, r4
 8002218:	bf0c      	ite	eq
 800221a:	600b      	streq	r3, [r1, #0]
 800221c:	6053      	strne	r3, [r2, #4]
 800221e:	4630      	mov	r0, r6
 8002220:	f000 fbca 	bl	80029b8 <__malloc_unlock>
 8002224:	f104 000b 	add.w	r0, r4, #11
 8002228:	1d23      	adds	r3, r4, #4
 800222a:	f020 0007 	bic.w	r0, r0, #7
 800222e:	1ac2      	subs	r2, r0, r3
 8002230:	d0cc      	beq.n	80021cc <_malloc_r+0x20>
 8002232:	1a1b      	subs	r3, r3, r0
 8002234:	50a3      	str	r3, [r4, r2]
 8002236:	e7c9      	b.n	80021cc <_malloc_r+0x20>
 8002238:	4622      	mov	r2, r4
 800223a:	6864      	ldr	r4, [r4, #4]
 800223c:	e7cc      	b.n	80021d8 <_malloc_r+0x2c>
 800223e:	1cc4      	adds	r4, r0, #3
 8002240:	f024 0403 	bic.w	r4, r4, #3
 8002244:	42a0      	cmp	r0, r4
 8002246:	d0e3      	beq.n	8002210 <_malloc_r+0x64>
 8002248:	1a21      	subs	r1, r4, r0
 800224a:	4630      	mov	r0, r6
 800224c:	f000 faf6 	bl	800283c <_sbrk_r>
 8002250:	3001      	adds	r0, #1
 8002252:	d1dd      	bne.n	8002210 <_malloc_r+0x64>
 8002254:	e7cf      	b.n	80021f6 <_malloc_r+0x4a>
 8002256:	bf00      	nop
 8002258:	20000090 	.word	0x20000090
 800225c:	20000094 	.word	0x20000094

08002260 <__sfputc_r>:
 8002260:	6893      	ldr	r3, [r2, #8]
 8002262:	b410      	push	{r4}
 8002264:	3b01      	subs	r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	6093      	str	r3, [r2, #8]
 800226a:	da07      	bge.n	800227c <__sfputc_r+0x1c>
 800226c:	6994      	ldr	r4, [r2, #24]
 800226e:	42a3      	cmp	r3, r4
 8002270:	db01      	blt.n	8002276 <__sfputc_r+0x16>
 8002272:	290a      	cmp	r1, #10
 8002274:	d102      	bne.n	800227c <__sfputc_r+0x1c>
 8002276:	bc10      	pop	{r4}
 8002278:	f7ff bc6e 	b.w	8001b58 <__swbuf_r>
 800227c:	6813      	ldr	r3, [r2, #0]
 800227e:	1c58      	adds	r0, r3, #1
 8002280:	6010      	str	r0, [r2, #0]
 8002282:	7019      	strb	r1, [r3, #0]
 8002284:	4608      	mov	r0, r1
 8002286:	bc10      	pop	{r4}
 8002288:	4770      	bx	lr

0800228a <__sfputs_r>:
 800228a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228c:	4606      	mov	r6, r0
 800228e:	460f      	mov	r7, r1
 8002290:	4614      	mov	r4, r2
 8002292:	18d5      	adds	r5, r2, r3
 8002294:	42ac      	cmp	r4, r5
 8002296:	d101      	bne.n	800229c <__sfputs_r+0x12>
 8002298:	2000      	movs	r0, #0
 800229a:	e007      	b.n	80022ac <__sfputs_r+0x22>
 800229c:	463a      	mov	r2, r7
 800229e:	4630      	mov	r0, r6
 80022a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022a4:	f7ff ffdc 	bl	8002260 <__sfputc_r>
 80022a8:	1c43      	adds	r3, r0, #1
 80022aa:	d1f3      	bne.n	8002294 <__sfputs_r+0xa>
 80022ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080022b0 <_vfiprintf_r>:
 80022b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022b4:	460d      	mov	r5, r1
 80022b6:	4614      	mov	r4, r2
 80022b8:	4698      	mov	r8, r3
 80022ba:	4606      	mov	r6, r0
 80022bc:	b09d      	sub	sp, #116	; 0x74
 80022be:	b118      	cbz	r0, 80022c8 <_vfiprintf_r+0x18>
 80022c0:	6983      	ldr	r3, [r0, #24]
 80022c2:	b90b      	cbnz	r3, 80022c8 <_vfiprintf_r+0x18>
 80022c4:	f7ff fe22 	bl	8001f0c <__sinit>
 80022c8:	4b89      	ldr	r3, [pc, #548]	; (80024f0 <_vfiprintf_r+0x240>)
 80022ca:	429d      	cmp	r5, r3
 80022cc:	d11b      	bne.n	8002306 <_vfiprintf_r+0x56>
 80022ce:	6875      	ldr	r5, [r6, #4]
 80022d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022d2:	07d9      	lsls	r1, r3, #31
 80022d4:	d405      	bmi.n	80022e2 <_vfiprintf_r+0x32>
 80022d6:	89ab      	ldrh	r3, [r5, #12]
 80022d8:	059a      	lsls	r2, r3, #22
 80022da:	d402      	bmi.n	80022e2 <_vfiprintf_r+0x32>
 80022dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022de:	f7ff feb3 	bl	8002048 <__retarget_lock_acquire_recursive>
 80022e2:	89ab      	ldrh	r3, [r5, #12]
 80022e4:	071b      	lsls	r3, r3, #28
 80022e6:	d501      	bpl.n	80022ec <_vfiprintf_r+0x3c>
 80022e8:	692b      	ldr	r3, [r5, #16]
 80022ea:	b9eb      	cbnz	r3, 8002328 <_vfiprintf_r+0x78>
 80022ec:	4629      	mov	r1, r5
 80022ee:	4630      	mov	r0, r6
 80022f0:	f7ff fc84 	bl	8001bfc <__swsetup_r>
 80022f4:	b1c0      	cbz	r0, 8002328 <_vfiprintf_r+0x78>
 80022f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022f8:	07dc      	lsls	r4, r3, #31
 80022fa:	d50e      	bpl.n	800231a <_vfiprintf_r+0x6a>
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002300:	b01d      	add	sp, #116	; 0x74
 8002302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002306:	4b7b      	ldr	r3, [pc, #492]	; (80024f4 <_vfiprintf_r+0x244>)
 8002308:	429d      	cmp	r5, r3
 800230a:	d101      	bne.n	8002310 <_vfiprintf_r+0x60>
 800230c:	68b5      	ldr	r5, [r6, #8]
 800230e:	e7df      	b.n	80022d0 <_vfiprintf_r+0x20>
 8002310:	4b79      	ldr	r3, [pc, #484]	; (80024f8 <_vfiprintf_r+0x248>)
 8002312:	429d      	cmp	r5, r3
 8002314:	bf08      	it	eq
 8002316:	68f5      	ldreq	r5, [r6, #12]
 8002318:	e7da      	b.n	80022d0 <_vfiprintf_r+0x20>
 800231a:	89ab      	ldrh	r3, [r5, #12]
 800231c:	0598      	lsls	r0, r3, #22
 800231e:	d4ed      	bmi.n	80022fc <_vfiprintf_r+0x4c>
 8002320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002322:	f7ff fe92 	bl	800204a <__retarget_lock_release_recursive>
 8002326:	e7e9      	b.n	80022fc <_vfiprintf_r+0x4c>
 8002328:	2300      	movs	r3, #0
 800232a:	9309      	str	r3, [sp, #36]	; 0x24
 800232c:	2320      	movs	r3, #32
 800232e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002332:	2330      	movs	r3, #48	; 0x30
 8002334:	f04f 0901 	mov.w	r9, #1
 8002338:	f8cd 800c 	str.w	r8, [sp, #12]
 800233c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80024fc <_vfiprintf_r+0x24c>
 8002340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002344:	4623      	mov	r3, r4
 8002346:	469a      	mov	sl, r3
 8002348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800234c:	b10a      	cbz	r2, 8002352 <_vfiprintf_r+0xa2>
 800234e:	2a25      	cmp	r2, #37	; 0x25
 8002350:	d1f9      	bne.n	8002346 <_vfiprintf_r+0x96>
 8002352:	ebba 0b04 	subs.w	fp, sl, r4
 8002356:	d00b      	beq.n	8002370 <_vfiprintf_r+0xc0>
 8002358:	465b      	mov	r3, fp
 800235a:	4622      	mov	r2, r4
 800235c:	4629      	mov	r1, r5
 800235e:	4630      	mov	r0, r6
 8002360:	f7ff ff93 	bl	800228a <__sfputs_r>
 8002364:	3001      	adds	r0, #1
 8002366:	f000 80aa 	beq.w	80024be <_vfiprintf_r+0x20e>
 800236a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800236c:	445a      	add	r2, fp
 800236e:	9209      	str	r2, [sp, #36]	; 0x24
 8002370:	f89a 3000 	ldrb.w	r3, [sl]
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80a2 	beq.w	80024be <_vfiprintf_r+0x20e>
 800237a:	2300      	movs	r3, #0
 800237c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002384:	f10a 0a01 	add.w	sl, sl, #1
 8002388:	9304      	str	r3, [sp, #16]
 800238a:	9307      	str	r3, [sp, #28]
 800238c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002390:	931a      	str	r3, [sp, #104]	; 0x68
 8002392:	4654      	mov	r4, sl
 8002394:	2205      	movs	r2, #5
 8002396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800239a:	4858      	ldr	r0, [pc, #352]	; (80024fc <_vfiprintf_r+0x24c>)
 800239c:	f000 faf8 	bl	8002990 <memchr>
 80023a0:	9a04      	ldr	r2, [sp, #16]
 80023a2:	b9d8      	cbnz	r0, 80023dc <_vfiprintf_r+0x12c>
 80023a4:	06d1      	lsls	r1, r2, #27
 80023a6:	bf44      	itt	mi
 80023a8:	2320      	movmi	r3, #32
 80023aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023ae:	0713      	lsls	r3, r2, #28
 80023b0:	bf44      	itt	mi
 80023b2:	232b      	movmi	r3, #43	; 0x2b
 80023b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023b8:	f89a 3000 	ldrb.w	r3, [sl]
 80023bc:	2b2a      	cmp	r3, #42	; 0x2a
 80023be:	d015      	beq.n	80023ec <_vfiprintf_r+0x13c>
 80023c0:	4654      	mov	r4, sl
 80023c2:	2000      	movs	r0, #0
 80023c4:	f04f 0c0a 	mov.w	ip, #10
 80023c8:	9a07      	ldr	r2, [sp, #28]
 80023ca:	4621      	mov	r1, r4
 80023cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023d0:	3b30      	subs	r3, #48	; 0x30
 80023d2:	2b09      	cmp	r3, #9
 80023d4:	d94e      	bls.n	8002474 <_vfiprintf_r+0x1c4>
 80023d6:	b1b0      	cbz	r0, 8002406 <_vfiprintf_r+0x156>
 80023d8:	9207      	str	r2, [sp, #28]
 80023da:	e014      	b.n	8002406 <_vfiprintf_r+0x156>
 80023dc:	eba0 0308 	sub.w	r3, r0, r8
 80023e0:	fa09 f303 	lsl.w	r3, r9, r3
 80023e4:	4313      	orrs	r3, r2
 80023e6:	46a2      	mov	sl, r4
 80023e8:	9304      	str	r3, [sp, #16]
 80023ea:	e7d2      	b.n	8002392 <_vfiprintf_r+0xe2>
 80023ec:	9b03      	ldr	r3, [sp, #12]
 80023ee:	1d19      	adds	r1, r3, #4
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	9103      	str	r1, [sp, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bfbb      	ittet	lt
 80023f8:	425b      	neglt	r3, r3
 80023fa:	f042 0202 	orrlt.w	r2, r2, #2
 80023fe:	9307      	strge	r3, [sp, #28]
 8002400:	9307      	strlt	r3, [sp, #28]
 8002402:	bfb8      	it	lt
 8002404:	9204      	strlt	r2, [sp, #16]
 8002406:	7823      	ldrb	r3, [r4, #0]
 8002408:	2b2e      	cmp	r3, #46	; 0x2e
 800240a:	d10c      	bne.n	8002426 <_vfiprintf_r+0x176>
 800240c:	7863      	ldrb	r3, [r4, #1]
 800240e:	2b2a      	cmp	r3, #42	; 0x2a
 8002410:	d135      	bne.n	800247e <_vfiprintf_r+0x1ce>
 8002412:	9b03      	ldr	r3, [sp, #12]
 8002414:	3402      	adds	r4, #2
 8002416:	1d1a      	adds	r2, r3, #4
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	9203      	str	r2, [sp, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	bfb8      	it	lt
 8002420:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002424:	9305      	str	r3, [sp, #20]
 8002426:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800250c <_vfiprintf_r+0x25c>
 800242a:	2203      	movs	r2, #3
 800242c:	4650      	mov	r0, sl
 800242e:	7821      	ldrb	r1, [r4, #0]
 8002430:	f000 faae 	bl	8002990 <memchr>
 8002434:	b140      	cbz	r0, 8002448 <_vfiprintf_r+0x198>
 8002436:	2340      	movs	r3, #64	; 0x40
 8002438:	eba0 000a 	sub.w	r0, r0, sl
 800243c:	fa03 f000 	lsl.w	r0, r3, r0
 8002440:	9b04      	ldr	r3, [sp, #16]
 8002442:	3401      	adds	r4, #1
 8002444:	4303      	orrs	r3, r0
 8002446:	9304      	str	r3, [sp, #16]
 8002448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800244c:	2206      	movs	r2, #6
 800244e:	482c      	ldr	r0, [pc, #176]	; (8002500 <_vfiprintf_r+0x250>)
 8002450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002454:	f000 fa9c 	bl	8002990 <memchr>
 8002458:	2800      	cmp	r0, #0
 800245a:	d03f      	beq.n	80024dc <_vfiprintf_r+0x22c>
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <_vfiprintf_r+0x254>)
 800245e:	bb1b      	cbnz	r3, 80024a8 <_vfiprintf_r+0x1f8>
 8002460:	9b03      	ldr	r3, [sp, #12]
 8002462:	3307      	adds	r3, #7
 8002464:	f023 0307 	bic.w	r3, r3, #7
 8002468:	3308      	adds	r3, #8
 800246a:	9303      	str	r3, [sp, #12]
 800246c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800246e:	443b      	add	r3, r7
 8002470:	9309      	str	r3, [sp, #36]	; 0x24
 8002472:	e767      	b.n	8002344 <_vfiprintf_r+0x94>
 8002474:	460c      	mov	r4, r1
 8002476:	2001      	movs	r0, #1
 8002478:	fb0c 3202 	mla	r2, ip, r2, r3
 800247c:	e7a5      	b.n	80023ca <_vfiprintf_r+0x11a>
 800247e:	2300      	movs	r3, #0
 8002480:	f04f 0c0a 	mov.w	ip, #10
 8002484:	4619      	mov	r1, r3
 8002486:	3401      	adds	r4, #1
 8002488:	9305      	str	r3, [sp, #20]
 800248a:	4620      	mov	r0, r4
 800248c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002490:	3a30      	subs	r2, #48	; 0x30
 8002492:	2a09      	cmp	r2, #9
 8002494:	d903      	bls.n	800249e <_vfiprintf_r+0x1ee>
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0c5      	beq.n	8002426 <_vfiprintf_r+0x176>
 800249a:	9105      	str	r1, [sp, #20]
 800249c:	e7c3      	b.n	8002426 <_vfiprintf_r+0x176>
 800249e:	4604      	mov	r4, r0
 80024a0:	2301      	movs	r3, #1
 80024a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80024a6:	e7f0      	b.n	800248a <_vfiprintf_r+0x1da>
 80024a8:	ab03      	add	r3, sp, #12
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	462a      	mov	r2, r5
 80024ae:	4630      	mov	r0, r6
 80024b0:	4b15      	ldr	r3, [pc, #84]	; (8002508 <_vfiprintf_r+0x258>)
 80024b2:	a904      	add	r1, sp, #16
 80024b4:	f3af 8000 	nop.w
 80024b8:	4607      	mov	r7, r0
 80024ba:	1c78      	adds	r0, r7, #1
 80024bc:	d1d6      	bne.n	800246c <_vfiprintf_r+0x1bc>
 80024be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80024c0:	07d9      	lsls	r1, r3, #31
 80024c2:	d405      	bmi.n	80024d0 <_vfiprintf_r+0x220>
 80024c4:	89ab      	ldrh	r3, [r5, #12]
 80024c6:	059a      	lsls	r2, r3, #22
 80024c8:	d402      	bmi.n	80024d0 <_vfiprintf_r+0x220>
 80024ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80024cc:	f7ff fdbd 	bl	800204a <__retarget_lock_release_recursive>
 80024d0:	89ab      	ldrh	r3, [r5, #12]
 80024d2:	065b      	lsls	r3, r3, #25
 80024d4:	f53f af12 	bmi.w	80022fc <_vfiprintf_r+0x4c>
 80024d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024da:	e711      	b.n	8002300 <_vfiprintf_r+0x50>
 80024dc:	ab03      	add	r3, sp, #12
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	462a      	mov	r2, r5
 80024e2:	4630      	mov	r0, r6
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <_vfiprintf_r+0x258>)
 80024e6:	a904      	add	r1, sp, #16
 80024e8:	f000 f882 	bl	80025f0 <_printf_i>
 80024ec:	e7e4      	b.n	80024b8 <_vfiprintf_r+0x208>
 80024ee:	bf00      	nop
 80024f0:	08002a7c 	.word	0x08002a7c
 80024f4:	08002a9c 	.word	0x08002a9c
 80024f8:	08002a5c 	.word	0x08002a5c
 80024fc:	08002abc 	.word	0x08002abc
 8002500:	08002ac6 	.word	0x08002ac6
 8002504:	00000000 	.word	0x00000000
 8002508:	0800228b 	.word	0x0800228b
 800250c:	08002ac2 	.word	0x08002ac2

08002510 <_printf_common>:
 8002510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002514:	4616      	mov	r6, r2
 8002516:	4699      	mov	r9, r3
 8002518:	688a      	ldr	r2, [r1, #8]
 800251a:	690b      	ldr	r3, [r1, #16]
 800251c:	4607      	mov	r7, r0
 800251e:	4293      	cmp	r3, r2
 8002520:	bfb8      	it	lt
 8002522:	4613      	movlt	r3, r2
 8002524:	6033      	str	r3, [r6, #0]
 8002526:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800252a:	460c      	mov	r4, r1
 800252c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002530:	b10a      	cbz	r2, 8002536 <_printf_common+0x26>
 8002532:	3301      	adds	r3, #1
 8002534:	6033      	str	r3, [r6, #0]
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	0699      	lsls	r1, r3, #26
 800253a:	bf42      	ittt	mi
 800253c:	6833      	ldrmi	r3, [r6, #0]
 800253e:	3302      	addmi	r3, #2
 8002540:	6033      	strmi	r3, [r6, #0]
 8002542:	6825      	ldr	r5, [r4, #0]
 8002544:	f015 0506 	ands.w	r5, r5, #6
 8002548:	d106      	bne.n	8002558 <_printf_common+0x48>
 800254a:	f104 0a19 	add.w	sl, r4, #25
 800254e:	68e3      	ldr	r3, [r4, #12]
 8002550:	6832      	ldr	r2, [r6, #0]
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	42ab      	cmp	r3, r5
 8002556:	dc28      	bgt.n	80025aa <_printf_common+0x9a>
 8002558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800255c:	1e13      	subs	r3, r2, #0
 800255e:	6822      	ldr	r2, [r4, #0]
 8002560:	bf18      	it	ne
 8002562:	2301      	movne	r3, #1
 8002564:	0692      	lsls	r2, r2, #26
 8002566:	d42d      	bmi.n	80025c4 <_printf_common+0xb4>
 8002568:	4649      	mov	r1, r9
 800256a:	4638      	mov	r0, r7
 800256c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002570:	47c0      	blx	r8
 8002572:	3001      	adds	r0, #1
 8002574:	d020      	beq.n	80025b8 <_printf_common+0xa8>
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	68e5      	ldr	r5, [r4, #12]
 800257a:	f003 0306 	and.w	r3, r3, #6
 800257e:	2b04      	cmp	r3, #4
 8002580:	bf18      	it	ne
 8002582:	2500      	movne	r5, #0
 8002584:	6832      	ldr	r2, [r6, #0]
 8002586:	f04f 0600 	mov.w	r6, #0
 800258a:	68a3      	ldr	r3, [r4, #8]
 800258c:	bf08      	it	eq
 800258e:	1aad      	subeq	r5, r5, r2
 8002590:	6922      	ldr	r2, [r4, #16]
 8002592:	bf08      	it	eq
 8002594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002598:	4293      	cmp	r3, r2
 800259a:	bfc4      	itt	gt
 800259c:	1a9b      	subgt	r3, r3, r2
 800259e:	18ed      	addgt	r5, r5, r3
 80025a0:	341a      	adds	r4, #26
 80025a2:	42b5      	cmp	r5, r6
 80025a4:	d11a      	bne.n	80025dc <_printf_common+0xcc>
 80025a6:	2000      	movs	r0, #0
 80025a8:	e008      	b.n	80025bc <_printf_common+0xac>
 80025aa:	2301      	movs	r3, #1
 80025ac:	4652      	mov	r2, sl
 80025ae:	4649      	mov	r1, r9
 80025b0:	4638      	mov	r0, r7
 80025b2:	47c0      	blx	r8
 80025b4:	3001      	adds	r0, #1
 80025b6:	d103      	bne.n	80025c0 <_printf_common+0xb0>
 80025b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025c0:	3501      	adds	r5, #1
 80025c2:	e7c4      	b.n	800254e <_printf_common+0x3e>
 80025c4:	2030      	movs	r0, #48	; 0x30
 80025c6:	18e1      	adds	r1, r4, r3
 80025c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025d2:	4422      	add	r2, r4
 80025d4:	3302      	adds	r3, #2
 80025d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80025da:	e7c5      	b.n	8002568 <_printf_common+0x58>
 80025dc:	2301      	movs	r3, #1
 80025de:	4622      	mov	r2, r4
 80025e0:	4649      	mov	r1, r9
 80025e2:	4638      	mov	r0, r7
 80025e4:	47c0      	blx	r8
 80025e6:	3001      	adds	r0, #1
 80025e8:	d0e6      	beq.n	80025b8 <_printf_common+0xa8>
 80025ea:	3601      	adds	r6, #1
 80025ec:	e7d9      	b.n	80025a2 <_printf_common+0x92>
	...

080025f0 <_printf_i>:
 80025f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80025f4:	460c      	mov	r4, r1
 80025f6:	7e27      	ldrb	r7, [r4, #24]
 80025f8:	4691      	mov	r9, r2
 80025fa:	2f78      	cmp	r7, #120	; 0x78
 80025fc:	4680      	mov	r8, r0
 80025fe:	469a      	mov	sl, r3
 8002600:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002602:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002606:	d807      	bhi.n	8002618 <_printf_i+0x28>
 8002608:	2f62      	cmp	r7, #98	; 0x62
 800260a:	d80a      	bhi.n	8002622 <_printf_i+0x32>
 800260c:	2f00      	cmp	r7, #0
 800260e:	f000 80d9 	beq.w	80027c4 <_printf_i+0x1d4>
 8002612:	2f58      	cmp	r7, #88	; 0x58
 8002614:	f000 80a4 	beq.w	8002760 <_printf_i+0x170>
 8002618:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800261c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002620:	e03a      	b.n	8002698 <_printf_i+0xa8>
 8002622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002626:	2b15      	cmp	r3, #21
 8002628:	d8f6      	bhi.n	8002618 <_printf_i+0x28>
 800262a:	a001      	add	r0, pc, #4	; (adr r0, 8002630 <_printf_i+0x40>)
 800262c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002630:	08002689 	.word	0x08002689
 8002634:	0800269d 	.word	0x0800269d
 8002638:	08002619 	.word	0x08002619
 800263c:	08002619 	.word	0x08002619
 8002640:	08002619 	.word	0x08002619
 8002644:	08002619 	.word	0x08002619
 8002648:	0800269d 	.word	0x0800269d
 800264c:	08002619 	.word	0x08002619
 8002650:	08002619 	.word	0x08002619
 8002654:	08002619 	.word	0x08002619
 8002658:	08002619 	.word	0x08002619
 800265c:	080027ab 	.word	0x080027ab
 8002660:	080026cd 	.word	0x080026cd
 8002664:	0800278d 	.word	0x0800278d
 8002668:	08002619 	.word	0x08002619
 800266c:	08002619 	.word	0x08002619
 8002670:	080027cd 	.word	0x080027cd
 8002674:	08002619 	.word	0x08002619
 8002678:	080026cd 	.word	0x080026cd
 800267c:	08002619 	.word	0x08002619
 8002680:	08002619 	.word	0x08002619
 8002684:	08002795 	.word	0x08002795
 8002688:	680b      	ldr	r3, [r1, #0]
 800268a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800268e:	1d1a      	adds	r2, r3, #4
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	600a      	str	r2, [r1, #0]
 8002694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002698:	2301      	movs	r3, #1
 800269a:	e0a4      	b.n	80027e6 <_printf_i+0x1f6>
 800269c:	6825      	ldr	r5, [r4, #0]
 800269e:	6808      	ldr	r0, [r1, #0]
 80026a0:	062e      	lsls	r6, r5, #24
 80026a2:	f100 0304 	add.w	r3, r0, #4
 80026a6:	d50a      	bpl.n	80026be <_printf_i+0xce>
 80026a8:	6805      	ldr	r5, [r0, #0]
 80026aa:	600b      	str	r3, [r1, #0]
 80026ac:	2d00      	cmp	r5, #0
 80026ae:	da03      	bge.n	80026b8 <_printf_i+0xc8>
 80026b0:	232d      	movs	r3, #45	; 0x2d
 80026b2:	426d      	negs	r5, r5
 80026b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026b8:	230a      	movs	r3, #10
 80026ba:	485e      	ldr	r0, [pc, #376]	; (8002834 <_printf_i+0x244>)
 80026bc:	e019      	b.n	80026f2 <_printf_i+0x102>
 80026be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80026c2:	6805      	ldr	r5, [r0, #0]
 80026c4:	600b      	str	r3, [r1, #0]
 80026c6:	bf18      	it	ne
 80026c8:	b22d      	sxthne	r5, r5
 80026ca:	e7ef      	b.n	80026ac <_printf_i+0xbc>
 80026cc:	680b      	ldr	r3, [r1, #0]
 80026ce:	6825      	ldr	r5, [r4, #0]
 80026d0:	1d18      	adds	r0, r3, #4
 80026d2:	6008      	str	r0, [r1, #0]
 80026d4:	0628      	lsls	r0, r5, #24
 80026d6:	d501      	bpl.n	80026dc <_printf_i+0xec>
 80026d8:	681d      	ldr	r5, [r3, #0]
 80026da:	e002      	b.n	80026e2 <_printf_i+0xf2>
 80026dc:	0669      	lsls	r1, r5, #25
 80026de:	d5fb      	bpl.n	80026d8 <_printf_i+0xe8>
 80026e0:	881d      	ldrh	r5, [r3, #0]
 80026e2:	2f6f      	cmp	r7, #111	; 0x6f
 80026e4:	bf0c      	ite	eq
 80026e6:	2308      	moveq	r3, #8
 80026e8:	230a      	movne	r3, #10
 80026ea:	4852      	ldr	r0, [pc, #328]	; (8002834 <_printf_i+0x244>)
 80026ec:	2100      	movs	r1, #0
 80026ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80026f2:	6866      	ldr	r6, [r4, #4]
 80026f4:	2e00      	cmp	r6, #0
 80026f6:	bfa8      	it	ge
 80026f8:	6821      	ldrge	r1, [r4, #0]
 80026fa:	60a6      	str	r6, [r4, #8]
 80026fc:	bfa4      	itt	ge
 80026fe:	f021 0104 	bicge.w	r1, r1, #4
 8002702:	6021      	strge	r1, [r4, #0]
 8002704:	b90d      	cbnz	r5, 800270a <_printf_i+0x11a>
 8002706:	2e00      	cmp	r6, #0
 8002708:	d04d      	beq.n	80027a6 <_printf_i+0x1b6>
 800270a:	4616      	mov	r6, r2
 800270c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002710:	fb03 5711 	mls	r7, r3, r1, r5
 8002714:	5dc7      	ldrb	r7, [r0, r7]
 8002716:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800271a:	462f      	mov	r7, r5
 800271c:	42bb      	cmp	r3, r7
 800271e:	460d      	mov	r5, r1
 8002720:	d9f4      	bls.n	800270c <_printf_i+0x11c>
 8002722:	2b08      	cmp	r3, #8
 8002724:	d10b      	bne.n	800273e <_printf_i+0x14e>
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	07df      	lsls	r7, r3, #31
 800272a:	d508      	bpl.n	800273e <_printf_i+0x14e>
 800272c:	6923      	ldr	r3, [r4, #16]
 800272e:	6861      	ldr	r1, [r4, #4]
 8002730:	4299      	cmp	r1, r3
 8002732:	bfde      	ittt	le
 8002734:	2330      	movle	r3, #48	; 0x30
 8002736:	f806 3c01 	strble.w	r3, [r6, #-1]
 800273a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800273e:	1b92      	subs	r2, r2, r6
 8002740:	6122      	str	r2, [r4, #16]
 8002742:	464b      	mov	r3, r9
 8002744:	4621      	mov	r1, r4
 8002746:	4640      	mov	r0, r8
 8002748:	f8cd a000 	str.w	sl, [sp]
 800274c:	aa03      	add	r2, sp, #12
 800274e:	f7ff fedf 	bl	8002510 <_printf_common>
 8002752:	3001      	adds	r0, #1
 8002754:	d14c      	bne.n	80027f0 <_printf_i+0x200>
 8002756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800275a:	b004      	add	sp, #16
 800275c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002760:	4834      	ldr	r0, [pc, #208]	; (8002834 <_printf_i+0x244>)
 8002762:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002766:	680e      	ldr	r6, [r1, #0]
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	f856 5b04 	ldr.w	r5, [r6], #4
 800276e:	061f      	lsls	r7, r3, #24
 8002770:	600e      	str	r6, [r1, #0]
 8002772:	d514      	bpl.n	800279e <_printf_i+0x1ae>
 8002774:	07d9      	lsls	r1, r3, #31
 8002776:	bf44      	itt	mi
 8002778:	f043 0320 	orrmi.w	r3, r3, #32
 800277c:	6023      	strmi	r3, [r4, #0]
 800277e:	b91d      	cbnz	r5, 8002788 <_printf_i+0x198>
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	f023 0320 	bic.w	r3, r3, #32
 8002786:	6023      	str	r3, [r4, #0]
 8002788:	2310      	movs	r3, #16
 800278a:	e7af      	b.n	80026ec <_printf_i+0xfc>
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	f043 0320 	orr.w	r3, r3, #32
 8002792:	6023      	str	r3, [r4, #0]
 8002794:	2378      	movs	r3, #120	; 0x78
 8002796:	4828      	ldr	r0, [pc, #160]	; (8002838 <_printf_i+0x248>)
 8002798:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800279c:	e7e3      	b.n	8002766 <_printf_i+0x176>
 800279e:	065e      	lsls	r6, r3, #25
 80027a0:	bf48      	it	mi
 80027a2:	b2ad      	uxthmi	r5, r5
 80027a4:	e7e6      	b.n	8002774 <_printf_i+0x184>
 80027a6:	4616      	mov	r6, r2
 80027a8:	e7bb      	b.n	8002722 <_printf_i+0x132>
 80027aa:	680b      	ldr	r3, [r1, #0]
 80027ac:	6826      	ldr	r6, [r4, #0]
 80027ae:	1d1d      	adds	r5, r3, #4
 80027b0:	6960      	ldr	r0, [r4, #20]
 80027b2:	600d      	str	r5, [r1, #0]
 80027b4:	0635      	lsls	r5, r6, #24
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	d501      	bpl.n	80027be <_printf_i+0x1ce>
 80027ba:	6018      	str	r0, [r3, #0]
 80027bc:	e002      	b.n	80027c4 <_printf_i+0x1d4>
 80027be:	0671      	lsls	r1, r6, #25
 80027c0:	d5fb      	bpl.n	80027ba <_printf_i+0x1ca>
 80027c2:	8018      	strh	r0, [r3, #0]
 80027c4:	2300      	movs	r3, #0
 80027c6:	4616      	mov	r6, r2
 80027c8:	6123      	str	r3, [r4, #16]
 80027ca:	e7ba      	b.n	8002742 <_printf_i+0x152>
 80027cc:	680b      	ldr	r3, [r1, #0]
 80027ce:	1d1a      	adds	r2, r3, #4
 80027d0:	600a      	str	r2, [r1, #0]
 80027d2:	681e      	ldr	r6, [r3, #0]
 80027d4:	2100      	movs	r1, #0
 80027d6:	4630      	mov	r0, r6
 80027d8:	6862      	ldr	r2, [r4, #4]
 80027da:	f000 f8d9 	bl	8002990 <memchr>
 80027de:	b108      	cbz	r0, 80027e4 <_printf_i+0x1f4>
 80027e0:	1b80      	subs	r0, r0, r6
 80027e2:	6060      	str	r0, [r4, #4]
 80027e4:	6863      	ldr	r3, [r4, #4]
 80027e6:	6123      	str	r3, [r4, #16]
 80027e8:	2300      	movs	r3, #0
 80027ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027ee:	e7a8      	b.n	8002742 <_printf_i+0x152>
 80027f0:	4632      	mov	r2, r6
 80027f2:	4649      	mov	r1, r9
 80027f4:	4640      	mov	r0, r8
 80027f6:	6923      	ldr	r3, [r4, #16]
 80027f8:	47d0      	blx	sl
 80027fa:	3001      	adds	r0, #1
 80027fc:	d0ab      	beq.n	8002756 <_printf_i+0x166>
 80027fe:	6823      	ldr	r3, [r4, #0]
 8002800:	079b      	lsls	r3, r3, #30
 8002802:	d413      	bmi.n	800282c <_printf_i+0x23c>
 8002804:	68e0      	ldr	r0, [r4, #12]
 8002806:	9b03      	ldr	r3, [sp, #12]
 8002808:	4298      	cmp	r0, r3
 800280a:	bfb8      	it	lt
 800280c:	4618      	movlt	r0, r3
 800280e:	e7a4      	b.n	800275a <_printf_i+0x16a>
 8002810:	2301      	movs	r3, #1
 8002812:	4632      	mov	r2, r6
 8002814:	4649      	mov	r1, r9
 8002816:	4640      	mov	r0, r8
 8002818:	47d0      	blx	sl
 800281a:	3001      	adds	r0, #1
 800281c:	d09b      	beq.n	8002756 <_printf_i+0x166>
 800281e:	3501      	adds	r5, #1
 8002820:	68e3      	ldr	r3, [r4, #12]
 8002822:	9903      	ldr	r1, [sp, #12]
 8002824:	1a5b      	subs	r3, r3, r1
 8002826:	42ab      	cmp	r3, r5
 8002828:	dcf2      	bgt.n	8002810 <_printf_i+0x220>
 800282a:	e7eb      	b.n	8002804 <_printf_i+0x214>
 800282c:	2500      	movs	r5, #0
 800282e:	f104 0619 	add.w	r6, r4, #25
 8002832:	e7f5      	b.n	8002820 <_printf_i+0x230>
 8002834:	08002acd 	.word	0x08002acd
 8002838:	08002ade 	.word	0x08002ade

0800283c <_sbrk_r>:
 800283c:	b538      	push	{r3, r4, r5, lr}
 800283e:	2300      	movs	r3, #0
 8002840:	4d05      	ldr	r5, [pc, #20]	; (8002858 <_sbrk_r+0x1c>)
 8002842:	4604      	mov	r4, r0
 8002844:	4608      	mov	r0, r1
 8002846:	602b      	str	r3, [r5, #0]
 8002848:	f7fd fef0 	bl	800062c <_sbrk>
 800284c:	1c43      	adds	r3, r0, #1
 800284e:	d102      	bne.n	8002856 <_sbrk_r+0x1a>
 8002850:	682b      	ldr	r3, [r5, #0]
 8002852:	b103      	cbz	r3, 8002856 <_sbrk_r+0x1a>
 8002854:	6023      	str	r3, [r4, #0]
 8002856:	bd38      	pop	{r3, r4, r5, pc}
 8002858:	200000f0 	.word	0x200000f0

0800285c <__sread>:
 800285c:	b510      	push	{r4, lr}
 800285e:	460c      	mov	r4, r1
 8002860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002864:	f000 f8ae 	bl	80029c4 <_read_r>
 8002868:	2800      	cmp	r0, #0
 800286a:	bfab      	itete	ge
 800286c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800286e:	89a3      	ldrhlt	r3, [r4, #12]
 8002870:	181b      	addge	r3, r3, r0
 8002872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002876:	bfac      	ite	ge
 8002878:	6563      	strge	r3, [r4, #84]	; 0x54
 800287a:	81a3      	strhlt	r3, [r4, #12]
 800287c:	bd10      	pop	{r4, pc}

0800287e <__swrite>:
 800287e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002882:	461f      	mov	r7, r3
 8002884:	898b      	ldrh	r3, [r1, #12]
 8002886:	4605      	mov	r5, r0
 8002888:	05db      	lsls	r3, r3, #23
 800288a:	460c      	mov	r4, r1
 800288c:	4616      	mov	r6, r2
 800288e:	d505      	bpl.n	800289c <__swrite+0x1e>
 8002890:	2302      	movs	r3, #2
 8002892:	2200      	movs	r2, #0
 8002894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002898:	f000 f868 	bl	800296c <_lseek_r>
 800289c:	89a3      	ldrh	r3, [r4, #12]
 800289e:	4632      	mov	r2, r6
 80028a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028a4:	81a3      	strh	r3, [r4, #12]
 80028a6:	4628      	mov	r0, r5
 80028a8:	463b      	mov	r3, r7
 80028aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028b2:	f000 b817 	b.w	80028e4 <_write_r>

080028b6 <__sseek>:
 80028b6:	b510      	push	{r4, lr}
 80028b8:	460c      	mov	r4, r1
 80028ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028be:	f000 f855 	bl	800296c <_lseek_r>
 80028c2:	1c43      	adds	r3, r0, #1
 80028c4:	89a3      	ldrh	r3, [r4, #12]
 80028c6:	bf15      	itete	ne
 80028c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80028ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80028ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80028d2:	81a3      	strheq	r3, [r4, #12]
 80028d4:	bf18      	it	ne
 80028d6:	81a3      	strhne	r3, [r4, #12]
 80028d8:	bd10      	pop	{r4, pc}

080028da <__sclose>:
 80028da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028de:	f000 b813 	b.w	8002908 <_close_r>
	...

080028e4 <_write_r>:
 80028e4:	b538      	push	{r3, r4, r5, lr}
 80028e6:	4604      	mov	r4, r0
 80028e8:	4608      	mov	r0, r1
 80028ea:	4611      	mov	r1, r2
 80028ec:	2200      	movs	r2, #0
 80028ee:	4d05      	ldr	r5, [pc, #20]	; (8002904 <_write_r+0x20>)
 80028f0:	602a      	str	r2, [r5, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f7fd fe4d 	bl	8000592 <_write>
 80028f8:	1c43      	adds	r3, r0, #1
 80028fa:	d102      	bne.n	8002902 <_write_r+0x1e>
 80028fc:	682b      	ldr	r3, [r5, #0]
 80028fe:	b103      	cbz	r3, 8002902 <_write_r+0x1e>
 8002900:	6023      	str	r3, [r4, #0]
 8002902:	bd38      	pop	{r3, r4, r5, pc}
 8002904:	200000f0 	.word	0x200000f0

08002908 <_close_r>:
 8002908:	b538      	push	{r3, r4, r5, lr}
 800290a:	2300      	movs	r3, #0
 800290c:	4d05      	ldr	r5, [pc, #20]	; (8002924 <_close_r+0x1c>)
 800290e:	4604      	mov	r4, r0
 8002910:	4608      	mov	r0, r1
 8002912:	602b      	str	r3, [r5, #0]
 8002914:	f7fd fe59 	bl	80005ca <_close>
 8002918:	1c43      	adds	r3, r0, #1
 800291a:	d102      	bne.n	8002922 <_close_r+0x1a>
 800291c:	682b      	ldr	r3, [r5, #0]
 800291e:	b103      	cbz	r3, 8002922 <_close_r+0x1a>
 8002920:	6023      	str	r3, [r4, #0]
 8002922:	bd38      	pop	{r3, r4, r5, pc}
 8002924:	200000f0 	.word	0x200000f0

08002928 <_fstat_r>:
 8002928:	b538      	push	{r3, r4, r5, lr}
 800292a:	2300      	movs	r3, #0
 800292c:	4d06      	ldr	r5, [pc, #24]	; (8002948 <_fstat_r+0x20>)
 800292e:	4604      	mov	r4, r0
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	602b      	str	r3, [r5, #0]
 8002936:	f7fd fe53 	bl	80005e0 <_fstat>
 800293a:	1c43      	adds	r3, r0, #1
 800293c:	d102      	bne.n	8002944 <_fstat_r+0x1c>
 800293e:	682b      	ldr	r3, [r5, #0]
 8002940:	b103      	cbz	r3, 8002944 <_fstat_r+0x1c>
 8002942:	6023      	str	r3, [r4, #0]
 8002944:	bd38      	pop	{r3, r4, r5, pc}
 8002946:	bf00      	nop
 8002948:	200000f0 	.word	0x200000f0

0800294c <_isatty_r>:
 800294c:	b538      	push	{r3, r4, r5, lr}
 800294e:	2300      	movs	r3, #0
 8002950:	4d05      	ldr	r5, [pc, #20]	; (8002968 <_isatty_r+0x1c>)
 8002952:	4604      	mov	r4, r0
 8002954:	4608      	mov	r0, r1
 8002956:	602b      	str	r3, [r5, #0]
 8002958:	f7fd fe51 	bl	80005fe <_isatty>
 800295c:	1c43      	adds	r3, r0, #1
 800295e:	d102      	bne.n	8002966 <_isatty_r+0x1a>
 8002960:	682b      	ldr	r3, [r5, #0]
 8002962:	b103      	cbz	r3, 8002966 <_isatty_r+0x1a>
 8002964:	6023      	str	r3, [r4, #0]
 8002966:	bd38      	pop	{r3, r4, r5, pc}
 8002968:	200000f0 	.word	0x200000f0

0800296c <_lseek_r>:
 800296c:	b538      	push	{r3, r4, r5, lr}
 800296e:	4604      	mov	r4, r0
 8002970:	4608      	mov	r0, r1
 8002972:	4611      	mov	r1, r2
 8002974:	2200      	movs	r2, #0
 8002976:	4d05      	ldr	r5, [pc, #20]	; (800298c <_lseek_r+0x20>)
 8002978:	602a      	str	r2, [r5, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	f7fd fe49 	bl	8000612 <_lseek>
 8002980:	1c43      	adds	r3, r0, #1
 8002982:	d102      	bne.n	800298a <_lseek_r+0x1e>
 8002984:	682b      	ldr	r3, [r5, #0]
 8002986:	b103      	cbz	r3, 800298a <_lseek_r+0x1e>
 8002988:	6023      	str	r3, [r4, #0]
 800298a:	bd38      	pop	{r3, r4, r5, pc}
 800298c:	200000f0 	.word	0x200000f0

08002990 <memchr>:
 8002990:	4603      	mov	r3, r0
 8002992:	b510      	push	{r4, lr}
 8002994:	b2c9      	uxtb	r1, r1
 8002996:	4402      	add	r2, r0
 8002998:	4293      	cmp	r3, r2
 800299a:	4618      	mov	r0, r3
 800299c:	d101      	bne.n	80029a2 <memchr+0x12>
 800299e:	2000      	movs	r0, #0
 80029a0:	e003      	b.n	80029aa <memchr+0x1a>
 80029a2:	7804      	ldrb	r4, [r0, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	428c      	cmp	r4, r1
 80029a8:	d1f6      	bne.n	8002998 <memchr+0x8>
 80029aa:	bd10      	pop	{r4, pc}

080029ac <__malloc_lock>:
 80029ac:	4801      	ldr	r0, [pc, #4]	; (80029b4 <__malloc_lock+0x8>)
 80029ae:	f7ff bb4b 	b.w	8002048 <__retarget_lock_acquire_recursive>
 80029b2:	bf00      	nop
 80029b4:	200000e8 	.word	0x200000e8

080029b8 <__malloc_unlock>:
 80029b8:	4801      	ldr	r0, [pc, #4]	; (80029c0 <__malloc_unlock+0x8>)
 80029ba:	f7ff bb46 	b.w	800204a <__retarget_lock_release_recursive>
 80029be:	bf00      	nop
 80029c0:	200000e8 	.word	0x200000e8

080029c4 <_read_r>:
 80029c4:	b538      	push	{r3, r4, r5, lr}
 80029c6:	4604      	mov	r4, r0
 80029c8:	4608      	mov	r0, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	2200      	movs	r2, #0
 80029ce:	4d05      	ldr	r5, [pc, #20]	; (80029e4 <_read_r+0x20>)
 80029d0:	602a      	str	r2, [r5, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	f7fd fdc0 	bl	8000558 <_read>
 80029d8:	1c43      	adds	r3, r0, #1
 80029da:	d102      	bne.n	80029e2 <_read_r+0x1e>
 80029dc:	682b      	ldr	r3, [r5, #0]
 80029de:	b103      	cbz	r3, 80029e2 <_read_r+0x1e>
 80029e0:	6023      	str	r3, [r4, #0]
 80029e2:	bd38      	pop	{r3, r4, r5, pc}
 80029e4:	200000f0 	.word	0x200000f0

080029e8 <_init>:
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ea:	bf00      	nop
 80029ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ee:	bc08      	pop	{r3}
 80029f0:	469e      	mov	lr, r3
 80029f2:	4770      	bx	lr

080029f4 <_fini>:
 80029f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f6:	bf00      	nop
 80029f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fa:	bc08      	pop	{r3}
 80029fc:	469e      	mov	lr, r3
 80029fe:	4770      	bx	lr
