
Dimmer_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad3c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800ae50  0800ae50  0001ae50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b44c  0800b44c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b44c  0800b44c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b44c  0800b44c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b44c  0800b44c  0001b44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b450  0800b450  0001b450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf8  200001e8  0800b63c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001de0  0800b63c  00021de0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dab0  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003edd  00000000  00000000  0003dcc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  00041ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  00043228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001adb7  00000000  00000000  00044748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ac5  00000000  00000000  0005f4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ae1d  00000000  00000000  00076fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00111de1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007178  00000000  00000000  00111e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ae34 	.word	0x0800ae34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800ae34 	.word	0x0800ae34

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <USART_ReceiveData>:


char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	b29b      	uxth	r3, r3
 8001052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001056:	b29b      	uxth	r3, r3
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	460b      	mov	r3, r1
 800106c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	605a      	str	r2, [r3, #4]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
	...

08001084 <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <usart_setup+0x60>)
 800108e:	4a16      	ldr	r2, [pc, #88]	; (80010e8 <usart_setup+0x64>)
 8001090:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 8001092:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <usart_setup+0x60>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <usart_setup+0x60>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <usart_setup+0x60>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <usart_setup+0x60>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <usart_setup+0x60>)
 80010ac:	220c      	movs	r2, #12
 80010ae:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <usart_setup+0x60>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <usart_setup+0x60>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 80010bc:	4809      	ldr	r0, [pc, #36]	; (80010e4 <usart_setup+0x60>)
 80010be:	f003 fd8b 	bl	8004bd8 <HAL_HalfDuplex_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d000      	beq.n	80010ca <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 80010c8:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <usart_setup+0x60>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <usart_setup+0x60>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0220 	orr.w	r2, r2, #32
 80010d8:	60da      	str	r2, [r3, #12]
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20001cb4 	.word	0x20001cb4
 80010e8:	40013800 	.word	0x40013800

080010ec <owInit>:

void owInit(OneWire *ow) {
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 80010fc:	e015      	b.n	800112a <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];      
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]
    k=0;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 800110c:	e007      	b.n	800111e <owInit+0x32>
    r[k] = 0;
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	3301      	adds	r3, #1
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	2b07      	cmp	r3, #7
 8001122:	ddf4      	ble.n	800110e <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	2b00      	cmp	r3, #0
 800112e:	dde6      	ble.n	80010fe <owInit+0x12>
  }
  k=0;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 8001134:	e008      	b.n	8001148 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4413      	add	r3, r2
 800113c:	330c      	adds	r3, #12
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	3301      	adds	r3, #1
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	2b07      	cmp	r3, #7
 800114c:	ddf3      	ble.n	8001136 <owInit+0x4a>
  ow->lastDiscrepancy = 64; //Количество подключенных максимально датчиков
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2240      	movs	r2, #64	; 0x40
 8001152:	609a      	str	r2, [r3, #8]

}
 8001154:	bf00      	nop
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
	...

08001160 <owReadHandler>:

void owReadHandler() { //обработчик прерывания USART
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 8001166:	f000 f850 	bl	800120a <getUsartIndex>
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  /* Проверяем, что мы вызвали прерывание из-за RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <owReadHandler+0x70>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	f003 0320 	and.w	r3, r3, #32
 8001176:	2b00      	cmp	r3, #0
 8001178:	d025      	beq.n	80011c6 <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <owReadHandler+0x70>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8001182:	2b00      	cmp	r3, #0
 8001184:	d01f      	beq.n	80011c6 <owReadHandler+0x66>

    /* Получаем данные из периферии и сбрасываем флаг*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 8001186:	bf00      	nop
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <owReadHandler+0x70>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0320 	and.w	r3, r3, #32
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f9      	beq.n	8001188 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);              
 8001194:	79fc      	ldrb	r4, [r7, #7]
 8001196:	480e      	ldr	r0, [pc, #56]	; (80011d0 <owReadHandler+0x70>)
 8001198:	f7ff ff54 	bl	8001044 <USART_ReceiveData>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <owReadHandler+0x74>)
 80011a2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//сбрасываем флаг ответ получен после 
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2201      	movs	r2, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	b25a      	sxtb	r2, r3
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <owReadHandler+0x78>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	4013      	ands	r3, r2
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <owReadHandler+0x78>)
 80011c4:	701a      	strb	r2, [r3, #0]
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40013800 	.word	0x40013800
 80011d4:	20001c20 	.word	0x20001c20
 80011d8:	20001c2a 	.word	0x20001c2a

080011dc <owResetCmd>:
 *
 * @param N usart -- выбранный для реализации 1wire usart
 * @return Возвращает 1 если на шине кто-то есть и 0 в противном случае
 */

  uint16_t owResetCmd() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
	uint16_t owPresence;
	
	usart_setup(9600);
 80011e2:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80011e6:	f7ff ff4d 	bl	8001084 <usart_setup>

  owSend(0xF0); // Send RESET отправляем импуль сброса
 80011ea:	20f0      	movs	r0, #240	; 0xf0
 80011ec:	f000 f814 	bl	8001218 <owSend>
  owPresence = owEchoRead(); // Ждём PRESENCE на шине и вовзращаем, что есть
 80011f0:	f000 f850 	bl	8001294 <owEchoRead>
 80011f4:	4603      	mov	r3, r0
 80011f6:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// перенастраиваем скорость UART
 80011f8:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80011fc:	f7ff ff42 	bl	8001084 <usart_setup>
  return owPresence;
 8001200:	88fb      	ldrh	r3, [r7, #6]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <getUsartIndex>:

uint8_t getUsartIndex() {// смотрит по номеру UART c каким будет идти работа
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <owSend>:

void owSend(uint16_t data) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//устанавливаем флаг если попадем в обработчик прерывания там он сбросится
 8001222:	f7ff fff2 	bl	800120a <getUsartIndex>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	2301      	movs	r3, #1
 800122c:	4093      	lsls	r3, r2
 800122e:	b25a      	sxtb	r2, r3
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <owSend+0x50>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	b25b      	sxtb	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b25b      	sxtb	r3, r3
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <owSend+0x50>)
 8001240:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//отправляем данные
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	4619      	mov	r1, r3
 8001246:	4809      	ldr	r0, [pc, #36]	; (800126c <owSend+0x54>)
 8001248:	f7ff ff0b 	bl	8001062 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//ждем пока передача закончится
 800124c:	bf00      	nop
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <owSend+0x58>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001258:	2b40      	cmp	r3, #64	; 0x40
 800125a:	d1f8      	bne.n	800124e <owSend+0x36>
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20001c2a 	.word	0x20001c2a
 800126c:	40013800 	.word	0x40013800
 8001270:	20001cb4 	.word	0x20001cb4

08001274 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//читаем у нас пришла единица или ноль в ответ
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //если пришло 0xFF, то бит = 1, что то другое бит = 0
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	2bff      	cmp	r3, #255	; 0xff
 8001282:	bf0c      	ite	eq
 8001284:	2301      	moveq	r3, #1
 8001286:	2300      	movne	r3, #0
 8001288:	b2db      	uxtb	r3, r3
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <owEchoRead>:

uint16_t owEchoRead() {//
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//получаем номер USART
 800129a:	f7ff ffb6 	bl	800120a <getUsartIndex>
 800129e:	4603      	mov	r3, r0
 80012a0:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// ждем пока кто-то не ответит но не больше паузы
 80012a8:	bf00      	nop
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <owEchoRead+0x48>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	797b      	ldrb	r3, [r7, #5]
 80012b4:	fa42 f303 	asr.w	r3, r2, r3
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d004      	beq.n	80012ca <owEchoRead+0x36>
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	1e5a      	subs	r2, r3, #1
 80012c4:	80fa      	strh	r2, [r7, #6]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1ef      	bne.n	80012aa <owEchoRead+0x16>
  return rc_buffer[i];//в зависимости от используемого номера UART 
 80012ca:	797b      	ldrb	r3, [r7, #5]
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <owEchoRead+0x4c>)
 80012ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012d2:	b29b      	uxth	r3, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20001c2a 	.word	0x20001c2a
 80012e0:	20001c20 	.word	0x20001c20

080012e4 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//разлагаем 1 байт на 8 байт ,кодируем так скасказать в посылку для 1wire
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e014      	b.n	8001320 <byteToBits+0x3c>
    if (ow_byte & 0x01) {//если текущий бит в байте ==1 то
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <byteToBits+0x24>
      *bits = WIRE_1; //заменяем на число которое при передаче по USART для 1wire будет единцией t.e 0xFF
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	22ff      	movs	r2, #255	; 0xff
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	e002      	b.n	800130e <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// тоже самое только для 0
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //сдвигаем обработанный бит
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	085b      	lsrs	r3, r3, #1
 8001318:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	3301      	adds	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	2b07      	cmp	r3, #7
 8001324:	d9e7      	bls.n	80012f6 <byteToBits+0x12>
  }
  return bits; //возвращае массив для передачи 
 8001326:	683b      	ldr	r3, [r7, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <owSendByte>:
/**
 * Метод пересылает последовательно 8 байт по одному на каждый бит в data
 * @param usart -- выбранный для эмуляции 1wire UART
 * @param d -- данные
 */
void owSendByte(uint8_t d) {
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//преобразовываем байт в биты "массив байт для  передачи UART и эмуляции 1WIRE"
 800133c:	f107 020c 	add.w	r2, r7, #12
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ffcd 	bl	80012e4 <byteToBits>
  for (i = 0; i < 8; ++i) {
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	e00b      	b.n	8001368 <owSendByte+0x36>
    owSend(data[i]);
 8001350:	f107 020c 	add.w	r2, r7, #12
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	4413      	add	r3, r2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5b 	bl	8001218 <owSend>
  for (i = 0; i < 8; ++i) {
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	2b07      	cmp	r3, #7
 800136c:	ddf0      	ble.n	8001350 <owSendByte+0x1e>
  }
}
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <owCRC>:
  }
  return target_byte; //возвращаем полученный байт
}

/* Подсчет CRC8 массива mas длиной Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	733b      	strb	r3, [r7, #12]
  crc = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 800138c:	7b3b      	ldrb	r3, [r7, #12]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	e018      	b.n	80013ce <owCRC+0x56>
      fb = crc ^ dat;
 800139c:	7b7a      	ldrb	r2, [r7, #13]
 800139e:	7bbb      	ldrb	r3, [r7, #14]
 80013a0:	4053      	eors	r3, r2
 80013a2:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 80013a4:	7afb      	ldrb	r3, [r7, #11]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 80013ac:	7b7b      	ldrb	r3, [r7, #13]
 80013ae:	085b      	lsrs	r3, r3, #1
 80013b0:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 80013b2:	7bbb      	ldrb	r3, [r7, #14]
 80013b4:	085b      	lsrs	r3, r3, #1
 80013b6:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // полином
 80013b8:	7afb      	ldrb	r3, [r7, #11]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d104      	bne.n	80013c8 <owCRC+0x50>
 80013be:	7b7b      	ldrb	r3, [r7, #13]
 80013c0:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80013c4:	43db      	mvns	r3, r3
 80013c6:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	3301      	adds	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	2b07      	cmp	r3, #7
 80013d2:	d9e3      	bls.n	800139c <owCRC+0x24>
    }
    st_byt++;
 80013d4:	7b3b      	ldrb	r3, [r7, #12]
 80013d6:	3301      	adds	r3, #1
 80013d8:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // счетчик байтов в массиве
 80013da:	7b3a      	ldrb	r2, [r7, #12]
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d3d4      	bcc.n	800138c <owCRC+0x14>
  return crc;
 80013e2:	7b7b      	ldrb	r3, [r7, #13]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);                        
 80013f6:	2107      	movs	r1, #7
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ffbd 	bl	8001378 <owCRC>
 80013fe:	4603      	mov	r3, r0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * переделать на функции обратного вызова для реакции на ошибки
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800141a:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //есть ли кто на шине
 8001420:	f7ff fedc 	bl	80011dc <owResetCmd>
 8001424:	4603      	mov	r3, r0
 8001426:	2bf0      	cmp	r3, #240	; 0xf0
 8001428:	d101      	bne.n	800142e <hasNextRom+0x26>
    return 0;
 800142a:	2300      	movs	r3, #0
 800142c:	e097      	b.n	800155e <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 800142e:	20f0      	movs	r0, #240	; 0xf0
 8001430:	f7ff ff7f 	bl	8001332 <owSendByte>
  do {
		uint8_t answerBit =0;
 8001434:	2300      	movs	r3, #0
 8001436:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 8001438:	7ffb      	ldrb	r3, [r7, #31]
 800143a:	08db      	lsrs	r3, r3, #3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	4413      	add	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // чтение прямого бита
 800144c:	20ff      	movs	r0, #255	; 0xff
 800144e:	f7ff fee3 	bl	8001218 <owSend>
    cB = owReadSlot(owEchoRead());//ответ от датчика
 8001452:	f7ff ff1f 	bl	8001294 <owEchoRead>
 8001456:	4603      	mov	r3, r0
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff0b 	bl	8001274 <owReadSlot>
 800145e:	4603      	mov	r3, r0
 8001460:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // чтение инверсного бита
 8001462:	20ff      	movs	r0, #255	; 0xff
 8001464:	f7ff fed8 	bl	8001218 <owSend>
    cmp_cB = owReadSlot(owEchoRead());//ответ от датчика
 8001468:	f7ff ff14 	bl	8001294 <owEchoRead>
 800146c:	4603      	mov	r3, r0
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff00 	bl	8001274 <owReadSlot>
 8001474:	4603      	mov	r3, r0
 8001476:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//сравниваем два ответа
 8001478:	7afa      	ldrb	r2, [r7, #11]
 800147a:	7abb      	ldrb	r3, [r7, #10]
 800147c:	429a      	cmp	r2, r3
 800147e:	d105      	bne.n	800148c <hasNextRom+0x84>
 8001480:	7afb      	ldrb	r3, [r7, #11]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d102      	bne.n	800148c <hasNextRom+0x84>
      return -1;//ошибка никто не ответил 
 8001486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800148a:	e068      	b.n	800155e <hasNextRom+0x156>
    if (cB != cmp_cB) { //нормальная ситуация пришло либо 10 либо 01
 800148c:	7afa      	ldrb	r2, [r7, #11]
 800148e:	7abb      	ldrb	r3, [r7, #10]
 8001490:	429a      	cmp	r2, r3
 8001492:	d002      	beq.n	800149a <hasNextRom+0x92>
      searchDirection = cB;//выбираем в каком направлении будем двигатся дальше
 8001494:	7afb      	ldrb	r3, [r7, #11]
 8001496:	75bb      	strb	r3, [r7, #22]
 8001498:	e023      	b.n	80014e2 <hasNextRom+0xda>
			} else {//колизия пришло 00 т.е текущий бит у ROM-ов разный
				if (ui32BitNumber == ow->lastDiscrepancy)//если текущая позиция колизии равна прошлой
 800149a:	7ffa      	ldrb	r2, [r7, #31]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d102      	bne.n	80014aa <hasNextRom+0xa2>
        searchDirection = 1;//выбираем в каком направлении будем двигатся дальше
 80014a4:	2301      	movs	r3, #1
 80014a6:	75bb      	strb	r3, [r7, #22]
 80014a8:	e01b      	b.n	80014e2 <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//если мы зашили дальше
 80014aa:	7ffa      	ldrb	r2, [r7, #31]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dd02      	ble.n	80014ba <hasNextRom+0xb2>
          searchDirection = 0;//выбираем в каком направлении будем двигатся дальше 
 80014b4:	2300      	movs	r3, #0
 80014b6:	75bb      	strb	r3, [r7, #22]
 80014b8:	e00e      	b.n	80014d8 <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4413      	add	r3, r2
 80014c0:	330c      	adds	r3, #12
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	7ffb      	ldrb	r3, [r7, #31]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	fa42 f303 	asr.w	r3, r2, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 80014d8:	7dbb      	ldrb	r3, [r7, #22]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//запоминаем развилку
 80014de:	7ffb      	ldrb	r3, [r7, #31]
 80014e0:	61bb      	str	r3, [r7, #24]
      }
    }
    // сохраняем бит
    if (searchDirection)
 80014e2:	7dbb      	ldrb	r3, [r7, #22]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00e      	beq.n	8001506 <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//выставляем бит в текущем байте байте
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b25a      	sxtb	r2, r3
 80014ee:	7ffb      	ldrb	r3, [r7, #31]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	2101      	movs	r1, #1
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	b2da      	uxtb	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// решаем кого отключить
 8001506:	7dbb      	ldrb	r3, [r7, #22]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <hasNextRom+0x108>
 800150c:	2300      	movs	r3, #0
 800150e:	e000      	b.n	8001512 <hasNextRom+0x10a>
 8001510:	23ff      	movs	r3, #255	; 0xff
 8001512:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//вырубаем "мешающие" устройсва
 8001514:	7d7b      	ldrb	r3, [r7, #21]
 8001516:	b29b      	uxth	r3, r3
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fe7d 	bl	8001218 <owSend>
    ui32BitNumber++;//ищем следующий бит
 800151e:	7ffb      	ldrb	r3, [r7, #31]
 8001520:	3301      	adds	r3, #1
 8001522:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//пока не найден весь ROM все биты
 8001524:	7ffb      	ldrb	r3, [r7, #31]
 8001526:	2b3f      	cmp	r3, #63	; 0x3f
 8001528:	d984      	bls.n	8001434 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//запоминаем развилку
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	609a      	str	r2, [r3, #8]
  for (; i < 7; i++)
 8001530:	e00b      	b.n	800154a <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//запоминаем последний ROM
 8001532:	7dfb      	ldrb	r3, [r7, #23]
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	441a      	add	r2, r3
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	7811      	ldrb	r1, [r2, #0]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	460a      	mov	r2, r1
 8001542:	731a      	strb	r2, [r3, #12]
  for (; i < 7; i++)
 8001544:	7dfb      	ldrb	r3, [r7, #23]
 8001546:	3301      	adds	r3, #1
 8001548:	75fb      	strb	r3, [r7, #23]
 800154a:	7dfb      	ldrb	r3, [r7, #23]
 800154c:	2b06      	cmp	r3, #6
 800154e:	d9f0      	bls.n	8001532 <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	bfcc      	ite	gt
 8001558:	2301      	movgt	r3, #1
 800155a:	2300      	movle	r3, #0
 800155c:	b2db      	uxtb	r3, r3
}
 800155e:	4618      	mov	r0, r3
 8001560:	3720      	adds	r7, #32
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <owSearchCmd>:

// Возвращает количество устройств на шине или код ошибки, если значение меньше 0
int owSearchCmd(OneWire *ow) {
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff fdba 	bl	80010ec <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //передаем указатель на структуру куда положить след.ROM
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ff40 	bl	8001408 <hasNextRom>
 8001588:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	da02      	bge.n	8001596 <owSearchCmd+0x30>
      return -1;
 8001590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001594:	e009      	b.n	80015aa <owSearchCmd+0x44>
    device++;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3301      	adds	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//ищем пока кто-то есть и этих кто-то не больше дефайна
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <owSearchCmd+0x42>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	dde7      	ble.n	8001578 <owSearchCmd+0x12>
		return device;//возвращаем порядковый номер датчика (устройства) на шине
 80015a8:	68fb      	ldr	r3, [r7, #12]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {//отправляет команду пропуска ROM после этого следующая команда будет
  owResetCmd();                 //для всех устройств на шине
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {//позволяет мастеру обращаться к конкретному  ведомому устройству
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
	int i = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 80015be:	f7ff fe0d 	bl	80011dc <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);//обращаемся к конкретному устройсву
 80015c2:	2055      	movs	r0, #85	; 0x55
 80015c4:	f7ff feb5 	bl	8001332 <owSendByte>
  for (; i < 8; i++)
 80015c8:	e009      	b.n	80015de <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));//"перебираемся по структуре как по массиву" первой звездочкой получаем i тый байт из структуры
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fead 	bl	8001332 <owSendByte>
  for (; i < 8; i++)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3301      	adds	r3, #1
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b07      	cmp	r3, #7
 80015e2:	ddf2      	ble.n	80015ca <owMatchRomCmd+0x18>
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);//позволяет мастеру обращаться к конкретному  ведомому устройству
 80015f8:	6838      	ldr	r0, [r7, #0]
 80015fa:	f7ff ffda 	bl	80015b2 <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);//говорим датчику пора бы преобразовать температуру
 80015fe:	2044      	movs	r0, #68	; 0x44
 8001600:	f7ff fe97 	bl	8001332 <owSendByte>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <owReadScratchpadCmd>:
 * @param ow -- OneWire pointer
 * @param rom -- selected device on the bus
 * @param data -- buffer for data
 * @return data
 */
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//читаем память датчика
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 8001618:	2300      	movs	r3, #0
 800161a:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b10      	cmp	r3, #16
 8001622:	d001      	beq.n	8001628 <owReadScratchpadCmd+0x1c>
 8001624:	2b28      	cmp	r3, #40	; 0x28
 8001626:	d109      	bne.n	800163c <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;  //9*8 =72 == равняется 9 байт данных
 8001628:	2348      	movs	r3, #72	; 0x48
 800162a:	82bb      	strh	r3, [r7, #20]
      break;
 800162c:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 800162e:	68b8      	ldr	r0, [r7, #8]
 8001630:	f7ff ffbf 	bl	80015b2 <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);//отправляем команду на чтение памяти
 8001634:	20be      	movs	r0, #190	; 0xbe
 8001636:	f7ff fe7c 	bl	8001332 <owSendByte>
  while (b < p) {// пока мы не обработали 9 байт 
 800163a:	e048      	b.n	80016ce <owReadScratchpadCmd+0xc2>
      return data;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	e04b      	b.n	80016d8 <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8)); //позиция обрабатываемого байта
 8001640:	8abb      	ldrh	r3, [r7, #20]
 8001642:	3b08      	subs	r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	da00      	bge.n	800164a <owReadScratchpadCmd+0x3e>
 8001648:	3307      	adds	r3, #7
 800164a:	10db      	asrs	r3, r3, #3
 800164c:	b2da      	uxtb	r2, r3
 800164e:	8afb      	ldrh	r3, [r7, #22]
 8001650:	08db      	lsrs	r3, r3, #3
 8001652:	b29b      	uxth	r3, r3
 8001654:	b2db      	uxtb	r3, r3
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	74fb      	strb	r3, [r7, #19]
    uint8_t bt; 
		owSend(OW_READ);
 800165a:	20ff      	movs	r0, #255	; 0xff
 800165c:	f7ff fddc 	bl	8001218 <owSend>
    bt = owReadSlot(owEchoRead());//читаем данные 
 8001660:	f7ff fe18 	bl	8001294 <owEchoRead>
 8001664:	4603      	mov	r3, r0
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fe04 	bl	8001274 <owReadSlot>
 800166c:	4603      	mov	r3, r0
 800166e:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 8001670:	7cbb      	ldrb	r3, [r7, #18]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d113      	bne.n	800169e <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;//выставляем бит в нужной позиции
 8001676:	7cfb      	ldrb	r3, [r7, #19]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b25a      	sxtb	r2, r3
 8001680:	8afb      	ldrh	r3, [r7, #22]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	2101      	movs	r1, #1
 8001688:	fa01 f303 	lsl.w	r3, r1, r3
 800168c:	b25b      	sxtb	r3, r3
 800168e:	4313      	orrs	r3, r2
 8001690:	b259      	sxtb	r1, r3
 8001692:	7cfb      	ldrb	r3, [r7, #19]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	b2ca      	uxtb	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
 800169c:	e014      	b.n	80016c8 <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);//сбрасываем бит в нужной позиции
 800169e:	7cfb      	ldrb	r3, [r7, #19]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	4413      	add	r3, r2
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	8afb      	ldrh	r3, [r7, #22]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	2101      	movs	r1, #1
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	4013      	ands	r3, r2
 80016bc:	b259      	sxtb	r1, r3
 80016be:	7cfb      	ldrb	r3, [r7, #19]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	b2ca      	uxtb	r2, r1
 80016c6:	701a      	strb	r2, [r3, #0]
    b++;//следующий бит
 80016c8:	8afb      	ldrh	r3, [r7, #22]
 80016ca:	3301      	adds	r3, #1
 80016cc:	82fb      	strh	r3, [r7, #22]
  while (b < p) {// пока мы не обработали 9 байт 
 80016ce:	8afa      	ldrh	r2, [r7, #22]
 80016d0:	8abb      	ldrh	r3, [r7, #20]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d3b4      	bcc.n	8001640 <owReadScratchpadCmd+0x34>
  }
  return data;
 80016d6:	687b      	ldr	r3, [r7, #4]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <readTemperature>:
 * @param ow -- OneWire bus pointer
 * @param rom -- selected device
 * @param reSense -- do you want resense temp for next time?
 * @return struct with data
 */
Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	; 0x30
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	4613      	mov	r3, r2
 80016ec:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sp = (Scratchpad_DS18B20 *) &pad; 
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  switch (rom->family) {
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b10      	cmp	r3, #16
 800170c:	d022      	beq.n	8001754 <readTemperature+0x74>
 800170e:	2b28      	cmp	r3, #40	; 0x28
 8001710:	d13a      	bne.n	8001788 <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18B20
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	461a      	mov	r2, r3
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7ff ff76 	bl	800160c <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);//целая часть
 8001720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001722:	79db      	ldrb	r3, [r3, #7]
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	b25a      	sxtb	r2, r3
 8001728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172a:	7a1b      	ldrb	r3, [r3, #8]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	b2db      	uxtb	r3, r3
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b25b      	sxtb	r3, r3
 8001736:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);//дробная
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	7a1b      	ldrb	r3, [r3, #8]
 800173e:	f003 020f 	and.w	r2, r3, #15
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	111b      	asrs	r3, r3, #4
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 8001752:	e01c      	b.n	800178e <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18S20
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	461a      	mov	r2, r3
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f7ff ff55 	bl	800160c <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 8001762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001764:	7a1b      	ldrb	r3, [r3, #8]
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	b2db      	uxtb	r3, r3
 800176a:	b25b      	sxtb	r3, r3
 800176c:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 8001770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001772:	7a1b      	ldrb	r3, [r3, #8]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	0092      	lsls	r2, r2, #2
 800177e:	4413      	add	r3, r2
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 8001786:	e002      	b.n	800178e <readTemperature+0xae>
    default:
      return t;
 8001788:	8c3b      	ldrh	r3, [r7, #32]
 800178a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800178c:	e008      	b.n	80017a0 <readTemperature+0xc0>
  }
  if (reSense) {
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);//можно сразу после как забрали данные отдаем датчику команду на преобразования температуры
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7ff ff29 	bl	80015ee <owConvertTemperatureCmd>
  }
  return t;
 800179c:	8c3b      	ldrh	r3, [r7, #32]
 800179e:	84bb      	strh	r3, [r7, #36]	; 0x24
 80017a0:	2300      	movs	r3, #0
 80017a2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017a6:	f362 0307 	bfi	r3, r2, #0, #8
 80017aa:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80017ae:	f362 230f 	bfi	r3, r2, #8, #8
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3730      	adds	r7, #48	; 0x30
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 80017bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 80017c2:	f7ff fd0b 	bl	80011dc <owResetCmd>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2bf0      	cmp	r3, #240	; 0xf0
 80017ca:	d079      	beq.n	80018c0 <get_ROMid+0x104>
		devices = owSearchCmd(&ow);        // получить ROMid в�?ех у�?трой�?т на шине или вернуть код ошибки
 80017cc:	484e      	ldr	r0, [pc, #312]	; (8001908 <get_ROMid+0x14c>)
 80017ce:	f7ff feca 	bl	8001566 <owSearchCmd>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b4d      	ldr	r3, [pc, #308]	; (800190c <get_ROMid+0x150>)
 80017d8:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 80017da:	4b4c      	ldr	r3, [pc, #304]	; (800190c <get_ROMid+0x150>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d113      	bne.n	800180a <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 80017e2:	4b4b      	ldr	r3, [pc, #300]	; (8001910 <get_ROMid+0x154>)
 80017e4:	4a4b      	ldr	r2, [pc, #300]	; (8001914 <get_ROMid+0x158>)
 80017e6:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80017e8:	4b4b      	ldr	r3, [pc, #300]	; (8001918 <get_ROMid+0x15c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	e005      	b.n	80017fc <get_ROMid+0x40>
					__asm__("nop");
 80017f0:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80017f2:	4b49      	ldr	r3, [pc, #292]	; (8001918 <get_ROMid+0x15c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	4a47      	ldr	r2, [pc, #284]	; (8001918 <get_ROMid+0x15c>)
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b46      	ldr	r3, [pc, #280]	; (8001918 <get_ROMid+0x15c>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b43      	ldr	r3, [pc, #268]	; (8001910 <get_ROMid+0x154>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d3f3      	bcc.n	80017f0 <get_ROMid+0x34>
				pDelay = 1000000;
 8001808:	e7eb      	b.n	80017e2 <get_ROMid+0x26>
			}

		}
		i = 0;
 800180a:	4b43      	ldr	r3, [pc, #268]	; (8001918 <get_ROMid+0x15c>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8001810:	e04f      	b.n	80018b2 <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <get_ROMid+0x15c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4a3b      	ldr	r2, [pc, #236]	; (8001908 <get_ROMid+0x14c>)
 800181a:	4413      	add	r3, r2
 800181c:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fde5 	bl	80013ee <owCRC8>
 8001824:	4603      	mov	r3, r0
 8001826:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	79db      	ldrb	r3, [r3, #7]
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	429a      	cmp	r2, r3
 8001830:	d101      	bne.n	8001836 <get_ROMid+0x7a>
 8001832:	4b3a      	ldr	r3, [pc, #232]	; (800191c <get_ROMid+0x160>)
 8001834:	e000      	b.n	8001838 <get_ROMid+0x7c>
 8001836:	4b3a      	ldr	r3, [pc, #232]	; (8001920 <get_ROMid+0x164>)
 8001838:	4a3a      	ldr	r2, [pc, #232]	; (8001924 <get_ROMid+0x168>)
 800183a:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 800183c:	4b36      	ldr	r3, [pc, #216]	; (8001918 <get_ROMid+0x15c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b39      	ldr	r3, [pc, #228]	; (8001928 <get_ROMid+0x16c>)
 8001844:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461e      	mov	r6, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	799b      	ldrb	r3, [r3, #6]
 8001850:	469c      	mov	ip, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	795b      	ldrb	r3, [r3, #5]
 8001856:	461a      	mov	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	791b      	ldrb	r3, [r3, #4]
 800185c:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001862:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001868:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800186e:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001874:	9305      	str	r3, [sp, #20]
 8001876:	9504      	str	r5, [sp, #16]
 8001878:	9403      	str	r4, [sp, #12]
 800187a:	9002      	str	r0, [sp, #8]
 800187c:	9101      	str	r1, [sp, #4]
 800187e:	9200      	str	r2, [sp, #0]
 8001880:	4663      	mov	r3, ip
 8001882:	4632      	mov	r2, r6
 8001884:	4929      	ldr	r1, [pc, #164]	; (800192c <get_ROMid+0x170>)
 8001886:	482a      	ldr	r0, [pc, #168]	; (8001930 <get_ROMid+0x174>)
 8001888:	f007 fa0e 	bl	8008ca8 <siprintf>

			if (crc != r->crc) {
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	79db      	ldrb	r3, [r3, #7]
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	429a      	cmp	r2, r3
 8001894:	d008      	beq.n	80018a8 <get_ROMid+0xec>
				devInfo.device = i;
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <get_ROMid+0x15c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	4b22      	ldr	r3, [pc, #136]	; (8001928 <get_ROMid+0x16c>)
 800189e:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 80018a0:	4924      	ldr	r1, [pc, #144]	; (8001934 <get_ROMid+0x178>)
 80018a2:	4823      	ldr	r0, [pc, #140]	; (8001930 <get_ROMid+0x174>)
 80018a4:	f007 fa00 	bl	8008ca8 <siprintf>
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <get_ROMid+0x15c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	4a1a      	ldr	r2, [pc, #104]	; (8001918 <get_ROMid+0x15c>)
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <get_ROMid+0x150>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <get_ROMid+0x15c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d8a8      	bhi.n	8001812 <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <get_ROMid+0x154>)
 80018c2:	4a14      	ldr	r2, [pc, #80]	; (8001914 <get_ROMid+0x158>)
 80018c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <get_ROMid+0x15c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e005      	b.n	80018da <get_ROMid+0x11e>
		__asm__("nop");
 80018ce:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <get_ROMid+0x15c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3301      	adds	r3, #1
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <get_ROMid+0x15c>)
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <get_ROMid+0x15c>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <get_ROMid+0x154>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d3f3      	bcc.n	80018ce <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <get_ROMid+0x168>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	490c      	ldr	r1, [pc, #48]	; (800191c <get_ROMid+0x160>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fc2f 	bl	8000150 <strcmp>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <get_ROMid+0x140>
 80018f8:	2300      	movs	r3, #0
 80018fa:	e001      	b.n	8001900 <get_ROMid+0x144>
	else return -1;
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	20001be0 	.word	0x20001be0
 800190c:	20001c2c 	.word	0x20001c2c
 8001910:	20000000 	.word	0x20000000
 8001914:	000f4240 	.word	0x000f4240
 8001918:	20001c1c 	.word	0x20001c1c
 800191c:	0800ae50 	.word	0x0800ae50
 8001920:	0800ae58 	.word	0x0800ae58
 8001924:	20001c30 	.word	0x20001c30
 8001928:	20001bf4 	.word	0x20001bf4
 800192c:	0800ae64 	.word	0x0800ae64
 8001930:	20001bf8 	.word	0x20001bf8
 8001934:	0800ae8c 	.word	0x0800ae8c

08001938 <get_Temperature>:

void get_Temperature (void)
{
 8001938:	b598      	push	{r3, r4, r7, lr}
 800193a:	af00      	add	r7, sp, #0
	i=0;
 800193c:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <get_Temperature+0x104>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 8001942:	e071      	b.n	8001a28 <get_Temperature+0xf0>
		switch ((ow.ids[i]).family) {//че у нас за датчик
 8001944:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <get_Temperature+0x104>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a3d      	ldr	r2, [pc, #244]	; (8001a40 <get_Temperature+0x108>)
 800194a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800194e:	2b28      	cmp	r3, #40	; 0x28
 8001950:	d006      	beq.n	8001960 <get_Temperature+0x28>
 8001952:	2b28      	cmp	r3, #40	; 0x28
 8001954:	dc60      	bgt.n	8001a18 <get_Temperature+0xe0>
 8001956:	2b00      	cmp	r3, #0
 8001958:	d060      	beq.n	8001a1c <get_Temperature+0xe4>
 800195a:	2b10      	cmp	r3, #16
 800195c:	d02e      	beq.n	80019bc <get_Temperature+0x84>
			break;
		case 0x00:
			break;
		default:
			// error handler
			break;
 800195e:	e05b      	b.n	8001a18 <get_Temperature+0xe0>
			t = readTemperature(&ow, &ow.ids[i], 1);
 8001960:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <get_Temperature+0x104>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4a36      	ldr	r2, [pc, #216]	; (8001a40 <get_Temperature+0x108>)
 8001968:	4413      	add	r3, r2
 800196a:	2201      	movs	r2, #1
 800196c:	4619      	mov	r1, r3
 800196e:	4834      	ldr	r0, [pc, #208]	; (8001a40 <get_Temperature+0x108>)
 8001970:	f7ff feb6 	bl	80016e0 <readTemperature>
 8001974:	4602      	mov	r2, r0
 8001976:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <get_Temperature+0x10c>)
 8001978:	b212      	sxth	r2, r2
 800197a:	4611      	mov	r1, r2
 800197c:	7019      	strb	r1, [r3, #0]
 800197e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001982:	705a      	strb	r2, [r3, #1]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8001984:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <get_Temperature+0x10c>)
 8001986:	f993 3000 	ldrsb.w	r3, [r3]
 800198a:	461a      	mov	r2, r3
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	461a      	mov	r2, r3
 8001996:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <get_Temperature+0x10c>)
 8001998:	785b      	ldrb	r3, [r3, #1]
 800199a:	4413      	add	r3, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff f937 	bl	8000c10 <__aeabi_i2f>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <get_Temperature+0x104>)
 80019a6:	6814      	ldr	r4, [r2, #0]
 80019a8:	4927      	ldr	r1, [pc, #156]	; (8001a48 <get_Temperature+0x110>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fa38 	bl	8000e20 <__aeabi_fdiv>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <get_Temperature+0x114>)
 80019b6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 80019ba:	e030      	b.n	8001a1e <get_Temperature+0xe6>
			t = readTemperature(&ow, &ow.ids[i], 1);
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <get_Temperature+0x104>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4a1f      	ldr	r2, [pc, #124]	; (8001a40 <get_Temperature+0x108>)
 80019c4:	4413      	add	r3, r2
 80019c6:	2201      	movs	r2, #1
 80019c8:	4619      	mov	r1, r3
 80019ca:	481d      	ldr	r0, [pc, #116]	; (8001a40 <get_Temperature+0x108>)
 80019cc:	f7ff fe88 	bl	80016e0 <readTemperature>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <get_Temperature+0x10c>)
 80019d4:	b212      	sxth	r2, r2
 80019d6:	4611      	mov	r1, r2
 80019d8:	7019      	strb	r1, [r3, #0]
 80019da:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80019de:	705a      	strb	r2, [r3, #1]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <get_Temperature+0x10c>)
 80019e2:	f993 3000 	ldrsb.w	r3, [r3]
 80019e6:	461a      	mov	r2, r3
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <get_Temperature+0x10c>)
 80019f4:	785b      	ldrb	r3, [r3, #1]
 80019f6:	4413      	add	r3, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f909 	bl	8000c10 <__aeabi_i2f>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <get_Temperature+0x104>)
 8001a02:	6814      	ldr	r4, [r2, #0]
 8001a04:	4910      	ldr	r1, [pc, #64]	; (8001a48 <get_Temperature+0x110>)
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fa0a 	bl	8000e20 <__aeabi_fdiv>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <get_Temperature+0x114>)
 8001a12:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 8001a16:	e002      	b.n	8001a1e <get_Temperature+0xe6>
			break;
 8001a18:	bf00      	nop
 8001a1a:	e000      	b.n	8001a1e <get_Temperature+0xe6>
			break;
 8001a1c:	bf00      	nop
	for (; i < devices; i++) {
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <get_Temperature+0x104>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <get_Temperature+0x104>)
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <get_Temperature+0x118>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <get_Temperature+0x104>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d886      	bhi.n	8001944 <get_Temperature+0xc>
		}
	}
//	pDelay = 4000000;
//	for (i = 0; i < pDelay * 1; i++){}   /* Wait a bit. */
}
 8001a36:	bf00      	nop
 8001a38:	bf00      	nop
 8001a3a:	bd98      	pop	{r3, r4, r7, pc}
 8001a3c:	20001c1c 	.word	0x20001c1c
 8001a40:	20001be0 	.word	0x20001be0
 8001a44:	20001bdc 	.word	0x20001bdc
 8001a48:	41200000 	.word	0x41200000
 8001a4c:	20001c18 	.word	0x20001c18
 8001a50:	20001c2c 	.word	0x20001c2c

08001a54 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a60:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d013      	beq.n	8001a94 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a70:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001a74:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00b      	beq.n	8001a94 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001a7c:	e000      	b.n	8001a80 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001a7e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001a80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f9      	beq.n	8001a7e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a8a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <_write>:
void Start_Dimmer_Task(void *argument);
void Start_DS18B20_Task(void *argument);
void Start_Blink_Task(void *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 50);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	2332      	movs	r3, #50	; 0x32
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <_write+0x48>)
 8001ab6:	f003 f8e4 	bl	8004c82 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e009      	b.n	8001ad4 <_write+0x34>
		ITM_SendChar(*ptr++);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ffc3 	bl	8001a54 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dbf1      	blt.n	8001ac0 <_write+0x20>
	}
	return len;
 8001adc:	687b      	ldr	r3, [r7, #4]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20001c38 	.word	0x20001c38

08001aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af0:	f000 fdee 	bl	80026d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af4:	f000 f848 	bl	8001b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af8:	f000 f9d6 	bl	8001ea8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001afc:	f000 f8a0 	bl	8001c40 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001b00:	f000 f8dc 	bl	8001cbc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001b04:	f000 f97c 	bl	8001e00 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001b08:	f000 f9a4 	bl	8001e54 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b0c:	f003 fd44 	bl	8005598 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b10:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <main+0x6c>)
 8001b12:	2100      	movs	r1, #0
 8001b14:	4811      	ldr	r0, [pc, #68]	; (8001b5c <main+0x70>)
 8001b16:	f003 fda5 	bl	8005664 <osThreadNew>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a10      	ldr	r2, [pc, #64]	; (8001b60 <main+0x74>)
 8001b1e:	6013      	str	r3, [r2, #0]

  /* creation of my_Dimmer_Task */
  my_Dimmer_TaskHandle = osThreadNew(Start_Dimmer_Task, NULL, &my_Dimmer_Task_attributes);
 8001b20:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <main+0x78>)
 8001b22:	2100      	movs	r1, #0
 8001b24:	4810      	ldr	r0, [pc, #64]	; (8001b68 <main+0x7c>)
 8001b26:	f003 fd9d 	bl	8005664 <osThreadNew>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <main+0x80>)
 8001b2e:	6013      	str	r3, [r2, #0]

  /* creation of my_DS18B20_Task */
  my_DS18B20_TaskHandle = osThreadNew(Start_DS18B20_Task, NULL, &my_DS18B20_Task_attributes);
 8001b30:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <main+0x84>)
 8001b32:	2100      	movs	r1, #0
 8001b34:	480f      	ldr	r0, [pc, #60]	; (8001b74 <main+0x88>)
 8001b36:	f003 fd95 	bl	8005664 <osThreadNew>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <main+0x8c>)
 8001b3e:	6013      	str	r3, [r2, #0]

  /* creation of my_Blink_Task */
  my_Blink_TaskHandle = osThreadNew(Start_Blink_Task, NULL, &my_Blink_Task_attributes);
 8001b40:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <main+0x90>)
 8001b42:	2100      	movs	r1, #0
 8001b44:	480e      	ldr	r0, [pc, #56]	; (8001b80 <main+0x94>)
 8001b46:	f003 fd8d 	bl	8005664 <osThreadNew>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <main+0x98>)
 8001b4e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b50:	f003 fd54 	bl	80055fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <main+0x68>
 8001b56:	bf00      	nop
 8001b58:	0800afc4 	.word	0x0800afc4
 8001b5c:	08001fad 	.word	0x08001fad
 8001b60:	20001c34 	.word	0x20001c34
 8001b64:	0800afe8 	.word	0x0800afe8
 8001b68:	08001fc1 	.word	0x08001fc1
 8001b6c:	20001c7c 	.word	0x20001c7c
 8001b70:	0800b00c 	.word	0x0800b00c
 8001b74:	08002131 	.word	0x08002131
 8001b78:	20001c80 	.word	0x20001c80
 8001b7c:	0800b030 	.word	0x0800b030
 8001b80:	08002149 	.word	0x08002149
 8001b84:	20001d40 	.word	0x20001d40

08001b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b094      	sub	sp, #80	; 0x50
 8001b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b92:	2228      	movs	r2, #40	; 0x28
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f006 fb31 	bl	80081fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bd4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bde:	4618      	mov	r0, r3
 8001be0:	f001 fafe 	bl	80031e0 <HAL_RCC_OscConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001bea:	f000 fac7 	bl	800217c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bee:	230f      	movs	r3, #15
 8001bf0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bfe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2102      	movs	r1, #2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fd68 	bl	80036e0 <HAL_RCC_ClockConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001c16:	f000 fab1 	bl	800217c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c22:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 ff24 	bl	8003a74 <HAL_RCCEx_PeriphCLKConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001c32:	f000 faa3 	bl	800217c <Error_Handler>
  }
}
 8001c36:	bf00      	nop
 8001c38:	3750      	adds	r7, #80	; 0x50
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <MX_ADC1_Init+0x74>)
 8001c52:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <MX_ADC1_Init+0x78>)
 8001c54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MX_ADC1_Init+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <MX_ADC1_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MX_ADC1_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_ADC1_Init+0x74>)
 8001c6a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <MX_ADC1_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_ADC1_Init+0x74>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c7c:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <MX_ADC1_Init+0x74>)
 8001c7e:	f000 fd59 	bl	8002734 <HAL_ADC_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c88:	f000 fa78 	bl	800217c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c90:	2301      	movs	r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_ADC1_Init+0x74>)
 8001c9e:	f000 fe21 	bl	80028e4 <HAL_ADC_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001ca8:	f000 fa68 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20001c84 	.word	0x20001c84
 8001cb8:	40012400 	.word	0x40012400

08001cbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b096      	sub	sp, #88	; 0x58
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]
 8001cea:	615a      	str	r2, [r3, #20]
 8001cec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f006 fa82 	bl	80081fe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cfa:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <MX_TIM1_Init+0x13c>)
 8001cfc:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <MX_TIM1_Init+0x140>)
 8001cfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001d00:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <MX_TIM1_Init+0x13c>)
 8001d02:	2247      	movs	r2, #71	; 0x47
 8001d04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d06:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <MX_TIM1_Init+0x13c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9000;
 8001d0c:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <MX_TIM1_Init+0x13c>)
 8001d0e:	f242 3228 	movw	r2, #9000	; 0x2328
 8001d12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d14:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <MX_TIM1_Init+0x13c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d1a:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <MX_TIM1_Init+0x13c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d20:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <MX_TIM1_Init+0x13c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d26:	4834      	ldr	r0, [pc, #208]	; (8001df8 <MX_TIM1_Init+0x13c>)
 8001d28:	f001 ff5a 	bl	8003be0 <HAL_TIM_Base_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d32:	f000 fa23 	bl	800217c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d40:	4619      	mov	r1, r3
 8001d42:	482d      	ldr	r0, [pc, #180]	; (8001df8 <MX_TIM1_Init+0x13c>)
 8001d44:	f002 faae 	bl	80042a4 <HAL_TIM_ConfigClockSource>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d4e:	f000 fa15 	bl	800217c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d52:	4829      	ldr	r0, [pc, #164]	; (8001df8 <MX_TIM1_Init+0x13c>)
 8001d54:	f001 ffe6 	bl	8003d24 <HAL_TIM_PWM_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d5e:	f000 fa0d 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4821      	ldr	r0, [pc, #132]	; (8001df8 <MX_TIM1_Init+0x13c>)
 8001d72:	f002 fe23 	bl	80049bc <HAL_TIMEx_MasterConfigSynchronization>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d7c:	f000 f9fe 	bl	800217c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001d80:	2370      	movs	r3, #112	; 0x70
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 5000;
 8001d84:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da2:	2200      	movs	r2, #0
 8001da4:	4619      	mov	r1, r3
 8001da6:	4814      	ldr	r0, [pc, #80]	; (8001df8 <MX_TIM1_Init+0x13c>)
 8001da8:	f002 f9be 	bl	8004128 <HAL_TIM_PWM_ConfigChannel>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001db2:	f000 f9e3 	bl	800217c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4807      	ldr	r0, [pc, #28]	; (8001df8 <MX_TIM1_Init+0x13c>)
 8001dda:	f002 fe4d 	bl	8004a78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001de4:	f000 f9ca 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001de8:	4803      	ldr	r0, [pc, #12]	; (8001df8 <MX_TIM1_Init+0x13c>)
 8001dea:	f000 fa5f 	bl	80022ac <HAL_TIM_MspPostInit>

}
 8001dee:	bf00      	nop
 8001df0:	3758      	adds	r7, #88	; 0x58
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20001cf8 	.word	0x20001cf8
 8001dfc:	40012c00 	.word	0x40012c00

08001e00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <MX_USART1_UART_Init+0x50>)
 8001e08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e26:	220c      	movs	r2, #12
 8001e28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001e36:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_USART1_UART_Init+0x4c>)
 8001e38:	f002 fece 	bl	8004bd8 <HAL_HalfDuplex_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e42:	f000 f99b 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20001cb4 	.word	0x20001cb4
 8001e50:	40013800 	.word	0x40013800

08001e54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <MX_USART3_UART_Init+0x50>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e8c:	f002 fe57 	bl	8004b3e <HAL_UART_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e96:	f000 f971 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20001c38 	.word	0x20001c38
 8001ea4:	40004800 	.word	0x40004800

08001ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebc:	4b2e      	ldr	r3, [pc, #184]	; (8001f78 <MX_GPIO_Init+0xd0>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	4a2d      	ldr	r2, [pc, #180]	; (8001f78 <MX_GPIO_Init+0xd0>)
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	6193      	str	r3, [r2, #24]
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <MX_GPIO_Init+0xd0>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed4:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <MX_GPIO_Init+0xd0>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	4a27      	ldr	r2, [pc, #156]	; (8001f78 <MX_GPIO_Init+0xd0>)
 8001eda:	f043 0320 	orr.w	r3, r3, #32
 8001ede:	6193      	str	r3, [r2, #24]
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <MX_GPIO_Init+0xd0>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <MX_GPIO_Init+0xd0>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4a21      	ldr	r2, [pc, #132]	; (8001f78 <MX_GPIO_Init+0xd0>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	6193      	str	r3, [r2, #24]
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <MX_GPIO_Init+0xd0>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <MX_GPIO_Init+0xd0>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <MX_GPIO_Init+0xd0>)
 8001f0a:	f043 0308 	orr.w	r3, r3, #8
 8001f0e:	6193      	str	r3, [r2, #24]
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <MX_GPIO_Init+0xd0>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	603b      	str	r3, [r7, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f22:	4816      	ldr	r0, [pc, #88]	; (8001f7c <MX_GPIO_Init+0xd4>)
 8001f24:	f001 f92c 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3a:	f107 0310 	add.w	r3, r7, #16
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480e      	ldr	r0, [pc, #56]	; (8001f7c <MX_GPIO_Init+0xd4>)
 8001f42:	f000 ff99 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : Zero_Pin */
  GPIO_InitStruct.Pin = Zero_Pin;
 8001f46:	2310      	movs	r3, #16
 8001f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <MX_GPIO_Init+0xd8>)
 8001f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Zero_GPIO_Port, &GPIO_InitStruct);
 8001f52:	f107 0310 	add.w	r3, r7, #16
 8001f56:	4619      	mov	r1, r3
 8001f58:	480a      	ldr	r0, [pc, #40]	; (8001f84 <MX_GPIO_Init+0xdc>)
 8001f5a:	f000 ff8d 	bl	8002e78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2105      	movs	r1, #5
 8001f62:	200a      	movs	r0, #10
 8001f64:	f000 fead 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001f68:	200a      	movs	r0, #10
 8001f6a:	f000 fec6 	bl	8002cfa <HAL_NVIC_EnableIRQ>

}
 8001f6e:	bf00      	nop
 8001f70:	3720      	adds	r7, #32
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40011000 	.word	0x40011000
 8001f80:	10210000 	.word	0x10210000
 8001f84:	40010800 	.word	0x40010800

08001f88 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line4 (A4 Pin)
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	2b10      	cmp	r3, #16
 8001f96:	d103      	bne.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x18>
	{
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <HAL_GPIO_EXTI_Callback+0x20>)
 8001f9c:	f001 ff1a 	bl	8003dd4 <HAL_TIM_PWM_Start>
	}
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20001cf8 	.word	0x20001cf8

08001fac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	f003 fbff 	bl	80057b8 <osDelay>
 8001fba:	e7fb      	b.n	8001fb4 <StartDefaultTask+0x8>
 8001fbc:	0000      	movs	r0, r0
	...

08001fc0 <Start_Dimmer_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Dimmer_Task */
void Start_Dimmer_Task(void *argument)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
//	    raw = HAL_ADC_GetValue(&hadc1);
//
//	    value = (raw - in_min) * (out_max - out_min) / (in_max - in_min) + out_min; // Function map

//	    if (value >= 8865)
	  	printf("Temperature - %lf \r\n",Temp[0]);
 8001fc8:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <Start_Dimmer_Task+0x140>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fa35 	bl	800043c <__aeabi_f2d>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	484b      	ldr	r0, [pc, #300]	; (8002104 <Start_Dimmer_Task+0x144>)
 8001fd8:	f006 fdd4 	bl	8008b84 <iprintf>
	  	if ((Temp[0] >= 0.3) && (Temp[0] <= (req_temp)))
 8001fdc:	4b48      	ldr	r3, [pc, #288]	; (8002100 <Start_Dimmer_Task+0x140>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fa2b 	bl	800043c <__aeabi_f2d>
 8001fe6:	a344      	add	r3, pc, #272	; (adr r3, 80020f8 <Start_Dimmer_Task+0x138>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fd04 	bl	80009f8 <__aeabi_dcmpge>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d020      	beq.n	8002038 <Start_Dimmer_Task+0x78>
 8001ff6:	4b42      	ldr	r3, [pc, #264]	; (8002100 <Start_Dimmer_Task+0x140>)
 8001ff8:	681c      	ldr	r4, [r3, #0]
 8001ffa:	4b43      	ldr	r3, [pc, #268]	; (8002108 <Start_Dimmer_Task+0x148>)
 8001ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fe05 	bl	8000c10 <__aeabi_i2f>
 8002006:	4603      	mov	r3, r0
 8002008:	4619      	mov	r1, r3
 800200a:	4620      	mov	r0, r4
 800200c:	f7fe fffc 	bl	8001008 <__aeabi_fcmple>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d010      	beq.n	8002038 <Start_Dimmer_Task+0x78>
	    {
	    value = 0; // Подаем питание на утюг
 8002016:	4b3d      	ldr	r3, [pc, #244]	; (800210c <Start_Dimmer_Task+0x14c>)
 8002018:	2200      	movs	r2, #0
 800201a:	801a      	strh	r2, [r3, #0]
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800201c:	2200      	movs	r2, #0
 800201e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002022:	483b      	ldr	r0, [pc, #236]	; (8002110 <Start_Dimmer_Task+0x150>)
 8002024:	f001 f8ac 	bl	8003180 <HAL_GPIO_WritePin>
	    printf("Value_1 is: %d\r\n",value);
 8002028:	4b38      	ldr	r3, [pc, #224]	; (800210c <Start_Dimmer_Task+0x14c>)
 800202a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202e:	4619      	mov	r1, r3
 8002030:	4838      	ldr	r0, [pc, #224]	; (8002114 <Start_Dimmer_Task+0x154>)
 8002032:	f006 fda7 	bl	8008b84 <iprintf>
 8002036:	e054      	b.n	80020e2 <Start_Dimmer_Task+0x122>
	    }
	    //else if (value <= 15)
	  	else if (Temp[0] >= req_temp)
 8002038:	4b31      	ldr	r3, [pc, #196]	; (8002100 <Start_Dimmer_Task+0x140>)
 800203a:	681c      	ldr	r4, [r3, #0]
 800203c:	4b32      	ldr	r3, [pc, #200]	; (8002108 <Start_Dimmer_Task+0x148>)
 800203e:	f993 3000 	ldrsb.w	r3, [r3]
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fde4 	bl	8000c10 <__aeabi_i2f>
 8002048:	4603      	mov	r3, r0
 800204a:	4619      	mov	r1, r3
 800204c:	4620      	mov	r0, r4
 800204e:	f7fe ffe5 	bl	800101c <__aeabi_fcmpge>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d011      	beq.n	800207c <Start_Dimmer_Task+0xbc>
	    {
	    value = 9001;//отключаем питание
 8002058:	4b2c      	ldr	r3, [pc, #176]	; (800210c <Start_Dimmer_Task+0x14c>)
 800205a:	f242 3229 	movw	r2, #9001	; 0x2329
 800205e:	801a      	strh	r2, [r3, #0]
	    printf("Value_2 is: %d\r\n",value);
 8002060:	4b2a      	ldr	r3, [pc, #168]	; (800210c <Start_Dimmer_Task+0x14c>)
 8002062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002066:	4619      	mov	r1, r3
 8002068:	482b      	ldr	r0, [pc, #172]	; (8002118 <Start_Dimmer_Task+0x158>)
 800206a:	f006 fd8b 	bl	8008b84 <iprintf>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800206e:	2201      	movs	r2, #1
 8002070:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002074:	4826      	ldr	r0, [pc, #152]	; (8002110 <Start_Dimmer_Task+0x150>)
 8002076:	f001 f883 	bl	8003180 <HAL_GPIO_WritePin>
 800207a:	e032      	b.n	80020e2 <Start_Dimmer_Task+0x122>
	    }
	  	else if (Temp[0] <= 0.0)
 800207c:	4b20      	ldr	r3, [pc, #128]	; (8002100 <Start_Dimmer_Task+0x140>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f04f 0100 	mov.w	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe ffbf 	bl	8001008 <__aeabi_fcmple>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d014      	beq.n	80020ba <Start_Dimmer_Task+0xfa>
	    {
	    value = 9001;//отключаем питание
 8002090:	4b1e      	ldr	r3, [pc, #120]	; (800210c <Start_Dimmer_Task+0x14c>)
 8002092:	f242 3229 	movw	r2, #9001	; 0x2329
 8002096:	801a      	strh	r2, [r3, #0]
	    printf("Value_3 is: %d\r\n",value);
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <Start_Dimmer_Task+0x14c>)
 800209a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209e:	4619      	mov	r1, r3
 80020a0:	481e      	ldr	r0, [pc, #120]	; (800211c <Start_Dimmer_Task+0x15c>)
 80020a2:	f006 fd6f 	bl	8008b84 <iprintf>
	    printf("A resistor is damaged, power is OFF!");
 80020a6:	481e      	ldr	r0, [pc, #120]	; (8002120 <Start_Dimmer_Task+0x160>)
 80020a8:	f006 fd6c 	bl	8008b84 <iprintf>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80020ac:	2201      	movs	r2, #1
 80020ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020b2:	4817      	ldr	r0, [pc, #92]	; (8002110 <Start_Dimmer_Task+0x150>)
 80020b4:	f001 f864 	bl	8003180 <HAL_GPIO_WritePin>
 80020b8:	e013      	b.n	80020e2 <Start_Dimmer_Task+0x122>
	    }
	    else {
	       //value=value;
	       //printf("Value is: %d\r\n",value);
	    	printf("Value_4 is: %d\r\n",value);
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <Start_Dimmer_Task+0x14c>)
 80020bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c0:	4619      	mov	r1, r3
 80020c2:	4818      	ldr	r0, [pc, #96]	; (8002124 <Start_Dimmer_Task+0x164>)
 80020c4:	f006 fd5e 	bl	8008b84 <iprintf>
	    	printf("A sensor is damaged, power is OFF!");
 80020c8:	4817      	ldr	r0, [pc, #92]	; (8002128 <Start_Dimmer_Task+0x168>)
 80020ca:	f006 fd5b 	bl	8008b84 <iprintf>
	    	value = 9001; //отключаем питание
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <Start_Dimmer_Task+0x14c>)
 80020d0:	f242 3229 	movw	r2, #9001	; 0x2329
 80020d4:	801a      	strh	r2, [r3, #0]
	    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80020d6:	2201      	movs	r2, #1
 80020d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020dc:	480c      	ldr	r0, [pc, #48]	; (8002110 <Start_Dimmer_Task+0x150>)
 80020de:	f001 f84f 	bl	8003180 <HAL_GPIO_WritePin>
	    }

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, value);
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <Start_Dimmer_Task+0x14c>)
 80020e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <Start_Dimmer_Task+0x16c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	635a      	str	r2, [r3, #52]	; 0x34
		osDelay(150);
 80020ee:	2096      	movs	r0, #150	; 0x96
 80020f0:	f003 fb62 	bl	80057b8 <osDelay>
	  	printf("Temperature - %lf \r\n",Temp[0]);
 80020f4:	e768      	b.n	8001fc8 <Start_Dimmer_Task+0x8>
 80020f6:	bf00      	nop
 80020f8:	33333333 	.word	0x33333333
 80020fc:	3fd33333 	.word	0x3fd33333
 8002100:	20001c18 	.word	0x20001c18
 8002104:	0800aee8 	.word	0x0800aee8
 8002108:	20000004 	.word	0x20000004
 800210c:	20000204 	.word	0x20000204
 8002110:	40011000 	.word	0x40011000
 8002114:	0800af00 	.word	0x0800af00
 8002118:	0800af14 	.word	0x0800af14
 800211c:	0800af28 	.word	0x0800af28
 8002120:	0800af3c 	.word	0x0800af3c
 8002124:	0800af64 	.word	0x0800af64
 8002128:	0800af78 	.word	0x0800af78
 800212c:	20001cf8 	.word	0x20001cf8

08002130 <Start_DS18B20_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_DS18B20_Task */
void Start_DS18B20_Task(void *argument)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_DS18B20_Task */
	get_ROMid();
 8002138:	f7ff fb40 	bl	80017bc <get_ROMid>
  /* Infinite loop */
  for(;;)
  {
	get_Temperature();
 800213c:	f7ff fbfc 	bl	8001938 <get_Temperature>
    osDelay(5); // min 2,5µs
 8002140:	2005      	movs	r0, #5
 8002142:	f003 fb39 	bl	80057b8 <osDelay>
	get_Temperature();
 8002146:	e7f9      	b.n	800213c <Start_DS18B20_Task+0xc>

08002148 <Start_Blink_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Blink_Task */
void Start_Blink_Task(void *argument)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Blink_Task */
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    osDelay(150);
 8002150:	2096      	movs	r0, #150	; 0x96
 8002152:	f003 fb31 	bl	80057b8 <osDelay>
 8002156:	e7fb      	b.n	8002150 <Start_Blink_Task+0x8>

08002158 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d101      	bne.n	800216e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800216a:	f000 fac7 	bl	80026fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40000800 	.word	0x40000800

0800217c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002180:	b672      	cpsid	i
}
 8002182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002184:	e7fe      	b.n	8002184 <Error_Handler+0x8>
	...

08002188 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <HAL_MspInit+0x68>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <HAL_MspInit+0x68>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6193      	str	r3, [r2, #24]
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_MspInit+0x68>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_MspInit+0x68>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4a11      	ldr	r2, [pc, #68]	; (80021f0 <HAL_MspInit+0x68>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	61d3      	str	r3, [r2, #28]
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_MspInit+0x68>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	210f      	movs	r1, #15
 80021c2:	f06f 0001 	mvn.w	r0, #1
 80021c6:	f000 fd7c 	bl	8002cc2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <HAL_MspInit+0x6c>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_MspInit+0x6c>)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40010000 	.word	0x40010000

080021f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0310 	add.w	r3, r7, #16
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a14      	ldr	r2, [pc, #80]	; (8002264 <HAL_ADC_MspInit+0x6c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d121      	bne.n	800225c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_ADC_MspInit+0x70>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_ADC_MspInit+0x70>)
 800221e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002222:	6193      	str	r3, [r2, #24]
 8002224:	4b10      	ldr	r3, [pc, #64]	; (8002268 <HAL_ADC_MspInit+0x70>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <HAL_ADC_MspInit+0x70>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <HAL_ADC_MspInit+0x70>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6193      	str	r3, [r2, #24]
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_ADC_MspInit+0x70>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002248:	2301      	movs	r3, #1
 800224a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800224c:	2303      	movs	r3, #3
 800224e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	4619      	mov	r1, r3
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <HAL_ADC_MspInit+0x74>)
 8002258:	f000 fe0e 	bl	8002e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800225c:	bf00      	nop
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40012400 	.word	0x40012400
 8002268:	40021000 	.word	0x40021000
 800226c:	40010800 	.word	0x40010800

08002270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <HAL_TIM_Base_MspInit+0x34>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10b      	bne.n	800229a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_TIM_Base_MspInit+0x38>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <HAL_TIM_Base_MspInit+0x38>)
 8002288:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800228c:	6193      	str	r3, [r2, #24]
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_TIM_Base_MspInit+0x38>)
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	40012c00 	.word	0x40012c00
 80022a8:	40021000 	.word	0x40021000

080022ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0310 	add.w	r3, r7, #16
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <HAL_TIM_MspPostInit+0x5c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d118      	bne.n	80022fe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <HAL_TIM_MspPostInit+0x60>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4a0e      	ldr	r2, [pc, #56]	; (800230c <HAL_TIM_MspPostInit+0x60>)
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <HAL_TIM_MspPostInit+0x60>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2302      	movs	r3, #2
 80022f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f2:	f107 0310 	add.w	r3, r7, #16
 80022f6:	4619      	mov	r1, r3
 80022f8:	4805      	ldr	r0, [pc, #20]	; (8002310 <HAL_TIM_MspPostInit+0x64>)
 80022fa:	f000 fdbd 	bl	8002e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022fe:	bf00      	nop
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40012c00 	.word	0x40012c00
 800230c:	40021000 	.word	0x40021000
 8002310:	40010800 	.word	0x40010800

08002314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 0318 	add.w	r3, r7, #24
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a36      	ldr	r2, [pc, #216]	; (8002408 <HAL_UART_MspInit+0xf4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d12d      	bne.n	8002390 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002334:	4b35      	ldr	r3, [pc, #212]	; (800240c <HAL_UART_MspInit+0xf8>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	4a34      	ldr	r2, [pc, #208]	; (800240c <HAL_UART_MspInit+0xf8>)
 800233a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800233e:	6193      	str	r3, [r2, #24]
 8002340:	4b32      	ldr	r3, [pc, #200]	; (800240c <HAL_UART_MspInit+0xf8>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234c:	4b2f      	ldr	r3, [pc, #188]	; (800240c <HAL_UART_MspInit+0xf8>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	4a2e      	ldr	r2, [pc, #184]	; (800240c <HAL_UART_MspInit+0xf8>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6193      	str	r3, [r2, #24]
 8002358:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_UART_MspInit+0xf8>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800236a:	2312      	movs	r3, #18
 800236c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800236e:	2303      	movs	r3, #3
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002372:	f107 0318 	add.w	r3, r7, #24
 8002376:	4619      	mov	r1, r3
 8002378:	4825      	ldr	r0, [pc, #148]	; (8002410 <HAL_UART_MspInit+0xfc>)
 800237a:	f000 fd7d 	bl	8002e78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	2105      	movs	r1, #5
 8002382:	2025      	movs	r0, #37	; 0x25
 8002384:	f000 fc9d 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002388:	2025      	movs	r0, #37	; 0x25
 800238a:	f000 fcb6 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800238e:	e036      	b.n	80023fe <HAL_UART_MspInit+0xea>
  else if(huart->Instance==USART3)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_UART_MspInit+0x100>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d131      	bne.n	80023fe <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART3_CLK_ENABLE();
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_UART_MspInit+0xf8>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a1b      	ldr	r2, [pc, #108]	; (800240c <HAL_UART_MspInit+0xf8>)
 80023a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a4:	61d3      	str	r3, [r2, #28]
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_UART_MspInit+0xf8>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <HAL_UART_MspInit+0xf8>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	4a15      	ldr	r2, [pc, #84]	; (800240c <HAL_UART_MspInit+0xf8>)
 80023b8:	f043 0308 	orr.w	r3, r3, #8
 80023bc:	6193      	str	r3, [r2, #24]
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_UART_MspInit+0xf8>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d8:	f107 0318 	add.w	r3, r7, #24
 80023dc:	4619      	mov	r1, r3
 80023de:	480e      	ldr	r0, [pc, #56]	; (8002418 <HAL_UART_MspInit+0x104>)
 80023e0:	f000 fd4a 	bl	8002e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f2:	f107 0318 	add.w	r3, r7, #24
 80023f6:	4619      	mov	r1, r3
 80023f8:	4807      	ldr	r0, [pc, #28]	; (8002418 <HAL_UART_MspInit+0x104>)
 80023fa:	f000 fd3d 	bl	8002e78 <HAL_GPIO_Init>
}
 80023fe:	bf00      	nop
 8002400:	3728      	adds	r7, #40	; 0x28
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40013800 	.word	0x40013800
 800240c:	40021000 	.word	0x40021000
 8002410:	40010800 	.word	0x40010800
 8002414:	40004800 	.word	0x40004800
 8002418:	40010c00 	.word	0x40010c00

0800241c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08c      	sub	sp, #48	; 0x30
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800242c:	2200      	movs	r2, #0
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	201e      	movs	r0, #30
 8002432:	f000 fc46 	bl	8002cc2 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002436:	201e      	movs	r0, #30
 8002438:	f000 fc5f 	bl	8002cfa <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_InitTick+0xa0>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <HAL_InitTick+0xa0>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	61d3      	str	r3, [r2, #28]
 8002448:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_InitTick+0xa0>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002454:	f107 0210 	add.w	r2, r7, #16
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f001 faba 	bl	80039d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002464:	f001 fa90 	bl	8003988 <HAL_RCC_GetPCLK1Freq>
 8002468:	4603      	mov	r3, r0
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <HAL_InitTick+0xa4>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	0c9b      	lsrs	r3, r3, #18
 8002478:	3b01      	subs	r3, #1
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <HAL_InitTick+0xa8>)
 800247e:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <HAL_InitTick+0xac>)
 8002480:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_InitTick+0xa8>)
 8002484:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002488:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800248a:	4a0e      	ldr	r2, [pc, #56]	; (80024c4 <HAL_InitTick+0xa8>)
 800248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <HAL_InitTick+0xa8>)
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_InitTick+0xa8>)
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800249c:	4809      	ldr	r0, [pc, #36]	; (80024c4 <HAL_InitTick+0xa8>)
 800249e:	f001 fb9f 	bl	8003be0 <HAL_TIM_Base_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d104      	bne.n	80024b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80024a8:	4806      	ldr	r0, [pc, #24]	; (80024c4 <HAL_InitTick+0xa8>)
 80024aa:	f001 fbe9 	bl	8003c80 <HAL_TIM_Base_Start_IT>
 80024ae:	4603      	mov	r3, r0
 80024b0:	e000      	b.n	80024b4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3730      	adds	r7, #48	; 0x30
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	20001d44 	.word	0x20001d44
 80024c8:	40000800 	.word	0x40000800

080024cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <NMI_Handler+0x4>

080024d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d6:	e7fe      	b.n	80024d6 <HardFault_Handler+0x4>

080024d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <MemManage_Handler+0x4>

080024de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e2:	e7fe      	b.n	80024e2 <BusFault_Handler+0x4>

080024e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <UsageFault_Handler+0x4>

080024ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Zero_Pin);
 80024fa:	2010      	movs	r0, #16
 80024fc:	f000 fe58 	bl	80031b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}

08002504 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <TIM4_IRQHandler+0x10>)
 800250a:	f001 fd05 	bl	8003f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20001d44 	.word	0x20001d44

08002518 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	owReadHandler();
 800251c:	f7fe fe20 	bl	8001160 <owReadHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <USART1_IRQHandler+0x14>)
 8002522:	f002 fc41 	bl	8004da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20001cb4 	.word	0x20001cb4

08002530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
	return 1;
 8002534:	2301      	movs	r3, #1
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <_kill>:

int _kill(int pid, int sig)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002548:	f005 fd28 	bl	8007f9c <__errno>
 800254c:	4603      	mov	r3, r0
 800254e:	2216      	movs	r2, #22
 8002550:	601a      	str	r2, [r3, #0]
	return -1;
 8002552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <_exit>:

void _exit (int status)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002566:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff ffe7 	bl	800253e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002570:	e7fe      	b.n	8002570 <_exit+0x12>

08002572 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e00a      	b.n	800259a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002584:	f3af 8000 	nop.w
 8002588:	4601      	mov	r1, r0
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	60ba      	str	r2, [r7, #8]
 8002590:	b2ca      	uxtb	r2, r1
 8002592:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3301      	adds	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	dbf0      	blt.n	8002584 <_read+0x12>
	}

return len;
 80025a2:	687b      	ldr	r3, [r7, #4]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <_close>:
	}
	return len;
}

int _close(int file)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	return -1;
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025d2:	605a      	str	r2, [r3, #4]
	return 0;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <_isatty>:

int _isatty(int file)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	return 1;
 80025e8:	2301      	movs	r3, #1
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
	return 0;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002614:	4a14      	ldr	r2, [pc, #80]	; (8002668 <_sbrk+0x5c>)
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <_sbrk+0x60>)
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <_sbrk+0x64>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <_sbrk+0x64>)
 800262a:	4a12      	ldr	r2, [pc, #72]	; (8002674 <_sbrk+0x68>)
 800262c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <_sbrk+0x64>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	429a      	cmp	r2, r3
 800263a:	d207      	bcs.n	800264c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800263c:	f005 fcae 	bl	8007f9c <__errno>
 8002640:	4603      	mov	r3, r0
 8002642:	220c      	movs	r2, #12
 8002644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800264a:	e009      	b.n	8002660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <_sbrk+0x64>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <_sbrk+0x64>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	4a05      	ldr	r2, [pc, #20]	; (8002670 <_sbrk+0x64>)
 800265c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800265e:	68fb      	ldr	r3, [r7, #12]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20005000 	.word	0x20005000
 800266c:	00000400 	.word	0x00000400
 8002670:	20000208 	.word	0x20000208
 8002674:	20001de0 	.word	0x20001de0

08002678 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002684:	480c      	ldr	r0, [pc, #48]	; (80026b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002686:	490d      	ldr	r1, [pc, #52]	; (80026bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002688:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800268a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800268c:	e002      	b.n	8002694 <LoopCopyDataInit>

0800268e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002692:	3304      	adds	r3, #4

08002694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002698:	d3f9      	bcc.n	800268e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800269c:	4c0a      	ldr	r4, [pc, #40]	; (80026c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a0:	e001      	b.n	80026a6 <LoopFillZerobss>

080026a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a4:	3204      	adds	r2, #4

080026a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a8:	d3fb      	bcc.n	80026a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026aa:	f7ff ffe5 	bl	8002678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ae:	f005 fd71 	bl	8008194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026b2:	f7ff fa1b 	bl	8001aec <main>
  bx lr
 80026b6:	4770      	bx	lr
  ldr r0, =_sdata
 80026b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026bc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80026c0:	0800b454 	.word	0x0800b454
  ldr r2, =_sbss
 80026c4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80026c8:	20001de0 	.word	0x20001de0

080026cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026cc:	e7fe      	b.n	80026cc <ADC1_2_IRQHandler>
	...

080026d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_Init+0x28>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <HAL_Init+0x28>)
 80026da:	f043 0310 	orr.w	r3, r3, #16
 80026de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e0:	2003      	movs	r0, #3
 80026e2:	f000 fae3 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026e6:	200f      	movs	r0, #15
 80026e8:	f7ff fe98 	bl	800241c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ec:	f7ff fd4c 	bl	8002188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40022000 	.word	0x40022000

080026fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_IncTick+0x1c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_IncTick+0x20>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4413      	add	r3, r2
 800270c:	4a03      	ldr	r2, [pc, #12]	; (800271c <HAL_IncTick+0x20>)
 800270e:	6013      	str	r3, [r2, #0]
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	20000010 	.word	0x20000010
 800271c:	20001d8c 	.word	0x20001d8c

08002720 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return uwTick;
 8002724:	4b02      	ldr	r3, [pc, #8]	; (8002730 <HAL_GetTick+0x10>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	20001d8c 	.word	0x20001d8c

08002734 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e0be      	b.n	80028d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff fd40 	bl	80021f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f9ab 	bl	8002ad4 <ADC_ConversionStop_Disable>
 800277e:	4603      	mov	r3, r0
 8002780:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 8099 	bne.w	80028c2 <HAL_ADC_Init+0x18e>
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 8095 	bne.w	80028c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027a0:	f023 0302 	bic.w	r3, r3, #2
 80027a4:	f043 0202 	orr.w	r2, r3, #2
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7b1b      	ldrb	r3, [r3, #12]
 80027ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027cc:	d003      	beq.n	80027d6 <HAL_ADC_Init+0xa2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d102      	bne.n	80027dc <HAL_ADC_Init+0xa8>
 80027d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027da:	e000      	b.n	80027de <HAL_ADC_Init+0xaa>
 80027dc:	2300      	movs	r3, #0
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7d1b      	ldrb	r3, [r3, #20]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d119      	bne.n	8002820 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7b1b      	ldrb	r3, [r3, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d109      	bne.n	8002808 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	035a      	lsls	r2, r3, #13
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	e00b      	b.n	8002820 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	430a      	orrs	r2, r1
 8002832:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	4b28      	ldr	r3, [pc, #160]	; (80028dc <HAL_ADC_Init+0x1a8>)
 800283c:	4013      	ands	r3, r2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	430b      	orrs	r3, r1
 8002846:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002850:	d003      	beq.n	800285a <HAL_ADC_Init+0x126>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d104      	bne.n	8002864 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	3b01      	subs	r3, #1
 8002860:	051b      	lsls	r3, r3, #20
 8002862:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	430a      	orrs	r2, r1
 8002876:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_ADC_Init+0x1ac>)
 8002880:	4013      	ands	r3, r2
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	429a      	cmp	r2, r3
 8002886:	d10b      	bne.n	80028a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	f023 0303 	bic.w	r3, r3, #3
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800289e:	e018      	b.n	80028d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	f023 0312 	bic.w	r3, r3, #18
 80028a8:	f043 0210 	orr.w	r2, r3, #16
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	f043 0201 	orr.w	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028c0:	e007      	b.n	80028d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	f043 0210 	orr.w	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	ffe1f7fd 	.word	0xffe1f7fd
 80028e0:	ff1f0efe 	.word	0xff1f0efe

080028e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x20>
 8002900:	2302      	movs	r3, #2
 8002902:	e0dc      	b.n	8002abe <HAL_ADC_ConfigChannel+0x1da>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b06      	cmp	r3, #6
 8002912:	d81c      	bhi.n	800294e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	3b05      	subs	r3, #5
 8002926:	221f      	movs	r2, #31
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	4019      	ands	r1, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	3b05      	subs	r3, #5
 8002940:	fa00 f203 	lsl.w	r2, r0, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	635a      	str	r2, [r3, #52]	; 0x34
 800294c:	e03c      	b.n	80029c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d81c      	bhi.n	8002990 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	3b23      	subs	r3, #35	; 0x23
 8002968:	221f      	movs	r2, #31
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	4019      	ands	r1, r3
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	3b23      	subs	r3, #35	; 0x23
 8002982:	fa00 f203 	lsl.w	r2, r0, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
 800298e:	e01b      	b.n	80029c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	3b41      	subs	r3, #65	; 0x41
 80029a2:	221f      	movs	r2, #31
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	4019      	ands	r1, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	3b41      	subs	r3, #65	; 0x41
 80029bc:	fa00 f203 	lsl.w	r2, r0, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b09      	cmp	r3, #9
 80029ce:	d91c      	bls.n	8002a0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68d9      	ldr	r1, [r3, #12]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	3b1e      	subs	r3, #30
 80029e2:	2207      	movs	r2, #7
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	4019      	ands	r1, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6898      	ldr	r0, [r3, #8]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	3b1e      	subs	r3, #30
 80029fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	60da      	str	r2, [r3, #12]
 8002a08:	e019      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6919      	ldr	r1, [r3, #16]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	4019      	ands	r1, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6898      	ldr	r0, [r3, #8]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	fa00 f203 	lsl.w	r2, r0, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b10      	cmp	r3, #16
 8002a44:	d003      	beq.n	8002a4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a4a:	2b11      	cmp	r3, #17
 8002a4c:	d132      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d125      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d126      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b10      	cmp	r3, #16
 8002a7c:	d11a      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a7e:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_ADC_ConfigChannel+0x1e8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a13      	ldr	r2, [pc, #76]	; (8002ad0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	0c9a      	lsrs	r2, r3, #18
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a94:	e002      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f9      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x1b2>
 8002aa2:	e007      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	f043 0220 	orr.w	r2, r3, #32
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	40012400 	.word	0x40012400
 8002acc:	20000008 	.word	0x20000008
 8002ad0:	431bde83 	.word	0x431bde83

08002ad4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d12e      	bne.n	8002b4c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0201 	bic.w	r2, r2, #1
 8002afc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002afe:	f7ff fe0f 	bl	8002720 <HAL_GetTick>
 8002b02:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b04:	e01b      	b.n	8002b3e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b06:	f7ff fe0b 	bl	8002720 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d914      	bls.n	8002b3e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d10d      	bne.n	8002b3e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	f043 0210 	orr.w	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	f043 0201 	orr.w	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e007      	b.n	8002b4e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d0dc      	beq.n	8002b06 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <__NVIC_SetPriorityGrouping>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b74:	4013      	ands	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8a:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	60d3      	str	r3, [r2, #12]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_GetPriorityGrouping>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	f003 0307 	and.w	r3, r3, #7
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_EnableIRQ>:
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	db0b      	blt.n	8002be6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	4906      	ldr	r1, [pc, #24]	; (8002bf0 <__NVIC_EnableIRQ+0x34>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	2001      	movs	r0, #1
 8002bde:	fa00 f202 	lsl.w	r2, r0, r2
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100

08002bf4 <__NVIC_SetPriority>:
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	db0a      	blt.n	8002c1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	490c      	ldr	r1, [pc, #48]	; (8002c40 <__NVIC_SetPriority+0x4c>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	0112      	lsls	r2, r2, #4
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	440b      	add	r3, r1
 8002c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c1c:	e00a      	b.n	8002c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4908      	ldr	r1, [pc, #32]	; (8002c44 <__NVIC_SetPriority+0x50>)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	3b04      	subs	r3, #4
 8002c2c:	0112      	lsls	r2, r2, #4
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	440b      	add	r3, r1
 8002c32:	761a      	strb	r2, [r3, #24]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000e100 	.word	0xe000e100
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <NVIC_EncodePriority>:
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	; 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f1c3 0307 	rsb	r3, r3, #7
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	bf28      	it	cs
 8002c66:	2304      	movcs	r3, #4
 8002c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d902      	bls.n	8002c78 <NVIC_EncodePriority+0x30>
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3b03      	subs	r3, #3
 8002c76:	e000      	b.n	8002c7a <NVIC_EncodePriority+0x32>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43da      	mvns	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	43d9      	mvns	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	4313      	orrs	r3, r2
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3724      	adds	r7, #36	; 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff4f 	bl	8002b58 <__NVIC_SetPriorityGrouping>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd4:	f7ff ff64 	bl	8002ba0 <__NVIC_GetPriorityGrouping>
 8002cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f7ff ffb2 	bl	8002c48 <NVIC_EncodePriority>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff81 	bl	8002bf4 <__NVIC_SetPriority>
}
 8002cf2:	bf00      	nop
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff57 	bl	8002bbc <__NVIC_EnableIRQ>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d008      	beq.n	8002d3e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e020      	b.n	8002d80 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 020e 	bic.w	r2, r2, #14
 8002d4c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	2101      	movs	r1, #1
 8002d68:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d005      	beq.n	8002dae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2204      	movs	r2, #4
 8002da6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	e051      	b.n	8002e52 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 020e 	bic.w	r2, r2, #14
 8002dbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a22      	ldr	r2, [pc, #136]	; (8002e5c <HAL_DMA_Abort_IT+0xd0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d029      	beq.n	8002e2c <HAL_DMA_Abort_IT+0xa0>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a20      	ldr	r2, [pc, #128]	; (8002e60 <HAL_DMA_Abort_IT+0xd4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d022      	beq.n	8002e28 <HAL_DMA_Abort_IT+0x9c>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a1f      	ldr	r2, [pc, #124]	; (8002e64 <HAL_DMA_Abort_IT+0xd8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d01a      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x96>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <HAL_DMA_Abort_IT+0xdc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d012      	beq.n	8002e1c <HAL_DMA_Abort_IT+0x90>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <HAL_DMA_Abort_IT+0xe0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00a      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x8a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <HAL_DMA_Abort_IT+0xe4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d102      	bne.n	8002e10 <HAL_DMA_Abort_IT+0x84>
 8002e0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e0e:	e00e      	b.n	8002e2e <HAL_DMA_Abort_IT+0xa2>
 8002e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e14:	e00b      	b.n	8002e2e <HAL_DMA_Abort_IT+0xa2>
 8002e16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e1a:	e008      	b.n	8002e2e <HAL_DMA_Abort_IT+0xa2>
 8002e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e20:	e005      	b.n	8002e2e <HAL_DMA_Abort_IT+0xa2>
 8002e22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e26:	e002      	b.n	8002e2e <HAL_DMA_Abort_IT+0xa2>
 8002e28:	2310      	movs	r3, #16
 8002e2a:	e000      	b.n	8002e2e <HAL_DMA_Abort_IT+0xa2>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	4a11      	ldr	r2, [pc, #68]	; (8002e74 <HAL_DMA_Abort_IT+0xe8>)
 8002e30:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
    } 
  }
  return status;
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40020008 	.word	0x40020008
 8002e60:	4002001c 	.word	0x4002001c
 8002e64:	40020030 	.word	0x40020030
 8002e68:	40020044 	.word	0x40020044
 8002e6c:	40020058 	.word	0x40020058
 8002e70:	4002006c 	.word	0x4002006c
 8002e74:	40020000 	.word	0x40020000

08002e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b08b      	sub	sp, #44	; 0x2c
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e82:	2300      	movs	r3, #0
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e86:	2300      	movs	r3, #0
 8002e88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e8a:	e169      	b.n	8003160 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	f040 8158 	bne.w	800315a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4a9a      	ldr	r2, [pc, #616]	; (8003118 <HAL_GPIO_Init+0x2a0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d05e      	beq.n	8002f72 <HAL_GPIO_Init+0xfa>
 8002eb4:	4a98      	ldr	r2, [pc, #608]	; (8003118 <HAL_GPIO_Init+0x2a0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d875      	bhi.n	8002fa6 <HAL_GPIO_Init+0x12e>
 8002eba:	4a98      	ldr	r2, [pc, #608]	; (800311c <HAL_GPIO_Init+0x2a4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d058      	beq.n	8002f72 <HAL_GPIO_Init+0xfa>
 8002ec0:	4a96      	ldr	r2, [pc, #600]	; (800311c <HAL_GPIO_Init+0x2a4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d86f      	bhi.n	8002fa6 <HAL_GPIO_Init+0x12e>
 8002ec6:	4a96      	ldr	r2, [pc, #600]	; (8003120 <HAL_GPIO_Init+0x2a8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d052      	beq.n	8002f72 <HAL_GPIO_Init+0xfa>
 8002ecc:	4a94      	ldr	r2, [pc, #592]	; (8003120 <HAL_GPIO_Init+0x2a8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d869      	bhi.n	8002fa6 <HAL_GPIO_Init+0x12e>
 8002ed2:	4a94      	ldr	r2, [pc, #592]	; (8003124 <HAL_GPIO_Init+0x2ac>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d04c      	beq.n	8002f72 <HAL_GPIO_Init+0xfa>
 8002ed8:	4a92      	ldr	r2, [pc, #584]	; (8003124 <HAL_GPIO_Init+0x2ac>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d863      	bhi.n	8002fa6 <HAL_GPIO_Init+0x12e>
 8002ede:	4a92      	ldr	r2, [pc, #584]	; (8003128 <HAL_GPIO_Init+0x2b0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d046      	beq.n	8002f72 <HAL_GPIO_Init+0xfa>
 8002ee4:	4a90      	ldr	r2, [pc, #576]	; (8003128 <HAL_GPIO_Init+0x2b0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d85d      	bhi.n	8002fa6 <HAL_GPIO_Init+0x12e>
 8002eea:	2b12      	cmp	r3, #18
 8002eec:	d82a      	bhi.n	8002f44 <HAL_GPIO_Init+0xcc>
 8002eee:	2b12      	cmp	r3, #18
 8002ef0:	d859      	bhi.n	8002fa6 <HAL_GPIO_Init+0x12e>
 8002ef2:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <HAL_GPIO_Init+0x80>)
 8002ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef8:	08002f73 	.word	0x08002f73
 8002efc:	08002f4d 	.word	0x08002f4d
 8002f00:	08002f5f 	.word	0x08002f5f
 8002f04:	08002fa1 	.word	0x08002fa1
 8002f08:	08002fa7 	.word	0x08002fa7
 8002f0c:	08002fa7 	.word	0x08002fa7
 8002f10:	08002fa7 	.word	0x08002fa7
 8002f14:	08002fa7 	.word	0x08002fa7
 8002f18:	08002fa7 	.word	0x08002fa7
 8002f1c:	08002fa7 	.word	0x08002fa7
 8002f20:	08002fa7 	.word	0x08002fa7
 8002f24:	08002fa7 	.word	0x08002fa7
 8002f28:	08002fa7 	.word	0x08002fa7
 8002f2c:	08002fa7 	.word	0x08002fa7
 8002f30:	08002fa7 	.word	0x08002fa7
 8002f34:	08002fa7 	.word	0x08002fa7
 8002f38:	08002fa7 	.word	0x08002fa7
 8002f3c:	08002f55 	.word	0x08002f55
 8002f40:	08002f69 	.word	0x08002f69
 8002f44:	4a79      	ldr	r2, [pc, #484]	; (800312c <HAL_GPIO_Init+0x2b4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f4a:	e02c      	b.n	8002fa6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	623b      	str	r3, [r7, #32]
          break;
 8002f52:	e029      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	623b      	str	r3, [r7, #32]
          break;
 8002f5c:	e024      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	3308      	adds	r3, #8
 8002f64:	623b      	str	r3, [r7, #32]
          break;
 8002f66:	e01f      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	623b      	str	r3, [r7, #32]
          break;
 8002f70:	e01a      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	623b      	str	r3, [r7, #32]
          break;
 8002f7e:	e013      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d105      	bne.n	8002f94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f88:	2308      	movs	r3, #8
 8002f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	611a      	str	r2, [r3, #16]
          break;
 8002f92:	e009      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f94:	2308      	movs	r3, #8
 8002f96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	615a      	str	r2, [r3, #20]
          break;
 8002f9e:	e003      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	623b      	str	r3, [r7, #32]
          break;
 8002fa4:	e000      	b.n	8002fa8 <HAL_GPIO_Init+0x130>
          break;
 8002fa6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2bff      	cmp	r3, #255	; 0xff
 8002fac:	d801      	bhi.n	8002fb2 <HAL_GPIO_Init+0x13a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	e001      	b.n	8002fb6 <HAL_GPIO_Init+0x13e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2bff      	cmp	r3, #255	; 0xff
 8002fbc:	d802      	bhi.n	8002fc4 <HAL_GPIO_Init+0x14c>
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	e002      	b.n	8002fca <HAL_GPIO_Init+0x152>
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	3b08      	subs	r3, #8
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	210f      	movs	r1, #15
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	401a      	ands	r2, r3
 8002fdc:	6a39      	ldr	r1, [r7, #32]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80b1 	beq.w	800315a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ff8:	4b4d      	ldr	r3, [pc, #308]	; (8003130 <HAL_GPIO_Init+0x2b8>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	4a4c      	ldr	r2, [pc, #304]	; (8003130 <HAL_GPIO_Init+0x2b8>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6193      	str	r3, [r2, #24]
 8003004:	4b4a      	ldr	r3, [pc, #296]	; (8003130 <HAL_GPIO_Init+0x2b8>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003010:	4a48      	ldr	r2, [pc, #288]	; (8003134 <HAL_GPIO_Init+0x2bc>)
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	089b      	lsrs	r3, r3, #2
 8003016:	3302      	adds	r3, #2
 8003018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	220f      	movs	r2, #15
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4013      	ands	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a40      	ldr	r2, [pc, #256]	; (8003138 <HAL_GPIO_Init+0x2c0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d013      	beq.n	8003064 <HAL_GPIO_Init+0x1ec>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a3f      	ldr	r2, [pc, #252]	; (800313c <HAL_GPIO_Init+0x2c4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00d      	beq.n	8003060 <HAL_GPIO_Init+0x1e8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a3e      	ldr	r2, [pc, #248]	; (8003140 <HAL_GPIO_Init+0x2c8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d007      	beq.n	800305c <HAL_GPIO_Init+0x1e4>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a3d      	ldr	r2, [pc, #244]	; (8003144 <HAL_GPIO_Init+0x2cc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d101      	bne.n	8003058 <HAL_GPIO_Init+0x1e0>
 8003054:	2303      	movs	r3, #3
 8003056:	e006      	b.n	8003066 <HAL_GPIO_Init+0x1ee>
 8003058:	2304      	movs	r3, #4
 800305a:	e004      	b.n	8003066 <HAL_GPIO_Init+0x1ee>
 800305c:	2302      	movs	r3, #2
 800305e:	e002      	b.n	8003066 <HAL_GPIO_Init+0x1ee>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <HAL_GPIO_Init+0x1ee>
 8003064:	2300      	movs	r3, #0
 8003066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003068:	f002 0203 	and.w	r2, r2, #3
 800306c:	0092      	lsls	r2, r2, #2
 800306e:	4093      	lsls	r3, r2
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003076:	492f      	ldr	r1, [pc, #188]	; (8003134 <HAL_GPIO_Init+0x2bc>)
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	3302      	adds	r3, #2
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003090:	4b2d      	ldr	r3, [pc, #180]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	492c      	ldr	r1, [pc, #176]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	600b      	str	r3, [r1, #0]
 800309c:	e006      	b.n	80030ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800309e:	4b2a      	ldr	r3, [pc, #168]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	4928      	ldr	r1, [pc, #160]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d006      	beq.n	80030c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030b8:	4b23      	ldr	r3, [pc, #140]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	4922      	ldr	r1, [pc, #136]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
 80030c4:	e006      	b.n	80030d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	491e      	ldr	r1, [pc, #120]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d006      	beq.n	80030ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	4918      	ldr	r1, [pc, #96]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	608b      	str	r3, [r1, #8]
 80030ec:	e006      	b.n	80030fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030ee:	4b16      	ldr	r3, [pc, #88]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	4914      	ldr	r1, [pc, #80]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d021      	beq.n	800314c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	490e      	ldr	r1, [pc, #56]	; (8003148 <HAL_GPIO_Init+0x2d0>)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	4313      	orrs	r3, r2
 8003112:	60cb      	str	r3, [r1, #12]
 8003114:	e021      	b.n	800315a <HAL_GPIO_Init+0x2e2>
 8003116:	bf00      	nop
 8003118:	10320000 	.word	0x10320000
 800311c:	10310000 	.word	0x10310000
 8003120:	10220000 	.word	0x10220000
 8003124:	10210000 	.word	0x10210000
 8003128:	10120000 	.word	0x10120000
 800312c:	10110000 	.word	0x10110000
 8003130:	40021000 	.word	0x40021000
 8003134:	40010000 	.word	0x40010000
 8003138:	40010800 	.word	0x40010800
 800313c:	40010c00 	.word	0x40010c00
 8003140:	40011000 	.word	0x40011000
 8003144:	40011400 	.word	0x40011400
 8003148:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_GPIO_Init+0x304>)
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	43db      	mvns	r3, r3
 8003154:	4909      	ldr	r1, [pc, #36]	; (800317c <HAL_GPIO_Init+0x304>)
 8003156:	4013      	ands	r3, r2
 8003158:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	3301      	adds	r3, #1
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	fa22 f303 	lsr.w	r3, r2, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	f47f ae8e 	bne.w	8002e8c <HAL_GPIO_Init+0x14>
  }
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	372c      	adds	r7, #44	; 0x2c
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	40010400 	.word	0x40010400

08003180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
 800318c:	4613      	mov	r3, r2
 800318e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003190:	787b      	ldrb	r3, [r7, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800319c:	e003      	b.n	80031a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	041a      	lsls	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	611a      	str	r2, [r3, #16]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d006      	beq.n	80031d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031c6:	4a05      	ldr	r2, [pc, #20]	; (80031dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe feda 	bl	8001f88 <HAL_GPIO_EXTI_Callback>
  }
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40010400 	.word	0x40010400

080031e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e26c      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 8087 	beq.w	800330e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003200:	4b92      	ldr	r3, [pc, #584]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 030c 	and.w	r3, r3, #12
 8003208:	2b04      	cmp	r3, #4
 800320a:	d00c      	beq.n	8003226 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800320c:	4b8f      	ldr	r3, [pc, #572]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b08      	cmp	r3, #8
 8003216:	d112      	bne.n	800323e <HAL_RCC_OscConfig+0x5e>
 8003218:	4b8c      	ldr	r3, [pc, #560]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003224:	d10b      	bne.n	800323e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003226:	4b89      	ldr	r3, [pc, #548]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d06c      	beq.n	800330c <HAL_RCC_OscConfig+0x12c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d168      	bne.n	800330c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e246      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003246:	d106      	bne.n	8003256 <HAL_RCC_OscConfig+0x76>
 8003248:	4b80      	ldr	r3, [pc, #512]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a7f      	ldr	r2, [pc, #508]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 800324e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	e02e      	b.n	80032b4 <HAL_RCC_OscConfig+0xd4>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x98>
 800325e:	4b7b      	ldr	r3, [pc, #492]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a7a      	ldr	r2, [pc, #488]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b78      	ldr	r3, [pc, #480]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a77      	ldr	r2, [pc, #476]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e01d      	b.n	80032b4 <HAL_RCC_OscConfig+0xd4>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0xbc>
 8003282:	4b72      	ldr	r3, [pc, #456]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a71      	ldr	r2, [pc, #452]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b6f      	ldr	r3, [pc, #444]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6e      	ldr	r2, [pc, #440]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e00b      	b.n	80032b4 <HAL_RCC_OscConfig+0xd4>
 800329c:	4b6b      	ldr	r3, [pc, #428]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a6a      	ldr	r2, [pc, #424]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b68      	ldr	r3, [pc, #416]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a67      	ldr	r2, [pc, #412]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 80032ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7ff fa30 	bl	8002720 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c4:	f7ff fa2c 	bl	8002720 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e1fa      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	4b5d      	ldr	r3, [pc, #372]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0xe4>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7ff fa1c 	bl	8002720 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7ff fa18 	bl	8002720 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e1e6      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	4b53      	ldr	r3, [pc, #332]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x10c>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d063      	beq.n	80033e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800331a:	4b4c      	ldr	r3, [pc, #304]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003326:	4b49      	ldr	r3, [pc, #292]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b08      	cmp	r3, #8
 8003330:	d11c      	bne.n	800336c <HAL_RCC_OscConfig+0x18c>
 8003332:	4b46      	ldr	r3, [pc, #280]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d116      	bne.n	800336c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	4b43      	ldr	r3, [pc, #268]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x176>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e1ba      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003356:	4b3d      	ldr	r3, [pc, #244]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4939      	ldr	r1, [pc, #228]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	e03a      	b.n	80033e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003374:	4b36      	ldr	r3, [pc, #216]	; (8003450 <HAL_RCC_OscConfig+0x270>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337a:	f7ff f9d1 	bl	8002720 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003382:	f7ff f9cd 	bl	8002720 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e19b      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	4b2d      	ldr	r3, [pc, #180]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b2a      	ldr	r3, [pc, #168]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4927      	ldr	r1, [pc, #156]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
 80033b4:	e015      	b.n	80033e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b6:	4b26      	ldr	r3, [pc, #152]	; (8003450 <HAL_RCC_OscConfig+0x270>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7ff f9b0 	bl	8002720 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c4:	f7ff f9ac 	bl	8002720 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e17a      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	4b1d      	ldr	r3, [pc, #116]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d03a      	beq.n	8003464 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d019      	beq.n	800342a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f6:	4b17      	ldr	r3, [pc, #92]	; (8003454 <HAL_RCC_OscConfig+0x274>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fc:	f7ff f990 	bl	8002720 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003404:	f7ff f98c 	bl	8002720 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e15a      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <HAL_RCC_OscConfig+0x26c>)
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003422:	2001      	movs	r0, #1
 8003424:	f000 fb08 	bl	8003a38 <RCC_Delay>
 8003428:	e01c      	b.n	8003464 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <HAL_RCC_OscConfig+0x274>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003430:	f7ff f976 	bl	8002720 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003436:	e00f      	b.n	8003458 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003438:	f7ff f972 	bl	8002720 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d908      	bls.n	8003458 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e140      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
 800344a:	bf00      	nop
 800344c:	40021000 	.word	0x40021000
 8003450:	42420000 	.word	0x42420000
 8003454:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003458:	4b9e      	ldr	r3, [pc, #632]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e9      	bne.n	8003438 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80a6 	beq.w	80035be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003472:	2300      	movs	r3, #0
 8003474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003476:	4b97      	ldr	r3, [pc, #604]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10d      	bne.n	800349e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	4b94      	ldr	r3, [pc, #592]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	4a93      	ldr	r2, [pc, #588]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348c:	61d3      	str	r3, [r2, #28]
 800348e:	4b91      	ldr	r3, [pc, #580]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349e:	4b8e      	ldr	r3, [pc, #568]	; (80036d8 <HAL_RCC_OscConfig+0x4f8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d118      	bne.n	80034dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034aa:	4b8b      	ldr	r3, [pc, #556]	; (80036d8 <HAL_RCC_OscConfig+0x4f8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a8a      	ldr	r2, [pc, #552]	; (80036d8 <HAL_RCC_OscConfig+0x4f8>)
 80034b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b6:	f7ff f933 	bl	8002720 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034be:	f7ff f92f 	bl	8002720 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b64      	cmp	r3, #100	; 0x64
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e0fd      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d0:	4b81      	ldr	r3, [pc, #516]	; (80036d8 <HAL_RCC_OscConfig+0x4f8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x312>
 80034e4:	4b7b      	ldr	r3, [pc, #492]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	4a7a      	ldr	r2, [pc, #488]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6213      	str	r3, [r2, #32]
 80034f0:	e02d      	b.n	800354e <HAL_RCC_OscConfig+0x36e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x334>
 80034fa:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	4a75      	ldr	r2, [pc, #468]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	6213      	str	r3, [r2, #32]
 8003506:	4b73      	ldr	r3, [pc, #460]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	4a72      	ldr	r2, [pc, #456]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	6213      	str	r3, [r2, #32]
 8003512:	e01c      	b.n	800354e <HAL_RCC_OscConfig+0x36e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b05      	cmp	r3, #5
 800351a:	d10c      	bne.n	8003536 <HAL_RCC_OscConfig+0x356>
 800351c:	4b6d      	ldr	r3, [pc, #436]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	4a6c      	ldr	r2, [pc, #432]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	6213      	str	r3, [r2, #32]
 8003528:	4b6a      	ldr	r3, [pc, #424]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4a69      	ldr	r2, [pc, #420]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6213      	str	r3, [r2, #32]
 8003534:	e00b      	b.n	800354e <HAL_RCC_OscConfig+0x36e>
 8003536:	4b67      	ldr	r3, [pc, #412]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4a66      	ldr	r2, [pc, #408]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	6213      	str	r3, [r2, #32]
 8003542:	4b64      	ldr	r3, [pc, #400]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	4a63      	ldr	r2, [pc, #396]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d015      	beq.n	8003582 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003556:	f7ff f8e3 	bl	8002720 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7ff f8df 	bl	8002720 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f241 3288 	movw	r2, #5000	; 0x1388
 800356c:	4293      	cmp	r3, r2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e0ab      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003574:	4b57      	ldr	r3, [pc, #348]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ee      	beq.n	800355e <HAL_RCC_OscConfig+0x37e>
 8003580:	e014      	b.n	80035ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003582:	f7ff f8cd 	bl	8002720 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7ff f8c9 	bl	8002720 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	; 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e095      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a0:	4b4c      	ldr	r3, [pc, #304]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ee      	bne.n	800358a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d105      	bne.n	80035be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b2:	4b48      	ldr	r3, [pc, #288]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	4a47      	ldr	r2, [pc, #284]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 80035b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 8081 	beq.w	80036ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c8:	4b42      	ldr	r3, [pc, #264]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d061      	beq.n	8003698 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d146      	bne.n	800366a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035dc:	4b3f      	ldr	r3, [pc, #252]	; (80036dc <HAL_RCC_OscConfig+0x4fc>)
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e2:	f7ff f89d 	bl	8002720 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ea:	f7ff f899 	bl	8002720 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e067      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fc:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f0      	bne.n	80035ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003610:	d108      	bne.n	8003624 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003612:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	492d      	ldr	r1, [pc, #180]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 8003620:	4313      	orrs	r3, r2
 8003622:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003624:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a19      	ldr	r1, [r3, #32]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	430b      	orrs	r3, r1
 8003636:	4927      	ldr	r1, [pc, #156]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800363c:	4b27      	ldr	r3, [pc, #156]	; (80036dc <HAL_RCC_OscConfig+0x4fc>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7ff f86d 	bl	8002720 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364a:	f7ff f869 	bl	8002720 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e037      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800365c:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x46a>
 8003668:	e02f      	b.n	80036ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366a:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <HAL_RCC_OscConfig+0x4fc>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7ff f856 	bl	8002720 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003678:	f7ff f852 	bl	8002720 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e020      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x498>
 8003696:	e018      	b.n	80036ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e013      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_OscConfig+0x4f4>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d106      	bne.n	80036c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d001      	beq.n	80036ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40007000 	.word	0x40007000
 80036dc:	42420060 	.word	0x42420060

080036e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0d0      	b.n	8003896 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036f4:	4b6a      	ldr	r3, [pc, #424]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d910      	bls.n	8003724 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003702:	4b67      	ldr	r3, [pc, #412]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 0207 	bic.w	r2, r3, #7
 800370a:	4965      	ldr	r1, [pc, #404]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b63      	ldr	r3, [pc, #396]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0b8      	b.n	8003896 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d020      	beq.n	8003772 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800373c:	4b59      	ldr	r3, [pc, #356]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4a58      	ldr	r2, [pc, #352]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003746:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003754:	4b53      	ldr	r3, [pc, #332]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a52      	ldr	r2, [pc, #328]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800375e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003760:	4b50      	ldr	r3, [pc, #320]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	494d      	ldr	r1, [pc, #308]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	4313      	orrs	r3, r2
 8003770:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d040      	beq.n	8003800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	4b47      	ldr	r3, [pc, #284]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d115      	bne.n	80037be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e07f      	b.n	8003896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d107      	bne.n	80037ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379e:	4b41      	ldr	r3, [pc, #260]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e073      	b.n	8003896 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ae:	4b3d      	ldr	r3, [pc, #244]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e06b      	b.n	8003896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037be:	4b39      	ldr	r3, [pc, #228]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f023 0203 	bic.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4936      	ldr	r1, [pc, #216]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d0:	f7fe ffa6 	bl	8002720 <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d8:	f7fe ffa2 	bl	8002720 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e053      	b.n	8003896 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	4b2d      	ldr	r3, [pc, #180]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 020c 	and.w	r2, r3, #12
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d1eb      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003800:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d210      	bcs.n	8003830 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 0207 	bic.w	r2, r3, #7
 8003816:	4922      	ldr	r1, [pc, #136]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e032      	b.n	8003896 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800383c:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4916      	ldr	r1, [pc, #88]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	4313      	orrs	r3, r2
 800384c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800385a:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	490e      	ldr	r1, [pc, #56]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800386e:	f000 f821 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8003872:	4602      	mov	r2, r0
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	490a      	ldr	r1, [pc, #40]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003880:	5ccb      	ldrb	r3, [r1, r3]
 8003882:	fa22 f303 	lsr.w	r3, r2, r3
 8003886:	4a09      	ldr	r2, [pc, #36]	; (80038ac <HAL_RCC_ClockConfig+0x1cc>)
 8003888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800388a:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <HAL_RCC_ClockConfig+0x1d0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe fdc4 	bl	800241c <HAL_InitTick>

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40022000 	.word	0x40022000
 80038a4:	40021000 	.word	0x40021000
 80038a8:	0800b054 	.word	0x0800b054
 80038ac:	20000008 	.word	0x20000008
 80038b0:	2000000c 	.word	0x2000000c

080038b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b4:	b490      	push	{r4, r7}
 80038b6:	b08a      	sub	sp, #40	; 0x28
 80038b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038ba:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038bc:	1d3c      	adds	r4, r7, #4
 80038be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038c4:	f240 2301 	movw	r3, #513	; 0x201
 80038c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
 80038ce:	2300      	movs	r3, #0
 80038d0:	61bb      	str	r3, [r7, #24]
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038de:	4b22      	ldr	r3, [pc, #136]	; (8003968 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d002      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x40>
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d003      	beq.n	80038fa <HAL_RCC_GetSysClockFreq+0x46>
 80038f2:	e02d      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038f4:	4b1d      	ldr	r3, [pc, #116]	; (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f6:	623b      	str	r3, [r7, #32]
      break;
 80038f8:	e02d      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	0c9b      	lsrs	r3, r3, #18
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003906:	4413      	add	r3, r2
 8003908:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800390c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003918:	4b13      	ldr	r3, [pc, #76]	; (8003968 <HAL_RCC_GetSysClockFreq+0xb4>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	0c5b      	lsrs	r3, r3, #17
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003926:	4413      	add	r3, r2
 8003928:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800392c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	4a0e      	ldr	r2, [pc, #56]	; (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003932:	fb02 f203 	mul.w	r2, r2, r3
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
 800393e:	e004      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	4a0b      	ldr	r2, [pc, #44]	; (8003970 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003944:	fb02 f303 	mul.w	r3, r2, r3
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	623b      	str	r3, [r7, #32]
      break;
 800394e:	e002      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003952:	623b      	str	r3, [r7, #32]
      break;
 8003954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003956:	6a3b      	ldr	r3, [r7, #32]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3728      	adds	r7, #40	; 0x28
 800395c:	46bd      	mov	sp, r7
 800395e:	bc90      	pop	{r4, r7}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	0800af9c 	.word	0x0800af9c
 8003968:	40021000 	.word	0x40021000
 800396c:	007a1200 	.word	0x007a1200
 8003970:	003d0900 	.word	0x003d0900

08003974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003978:	4b02      	ldr	r3, [pc, #8]	; (8003984 <HAL_RCC_GetHCLKFreq+0x10>)
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	20000008 	.word	0x20000008

08003988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800398c:	f7ff fff2 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	0a1b      	lsrs	r3, r3, #8
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4903      	ldr	r1, [pc, #12]	; (80039ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000
 80039ac:	0800b064 	.word	0x0800b064

080039b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039b4:	f7ff ffde 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	0adb      	lsrs	r3, r3, #11
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4903      	ldr	r1, [pc, #12]	; (80039d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40021000 	.word	0x40021000
 80039d4:	0800b064 	.word	0x0800b064

080039d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	220f      	movs	r2, #15
 80039e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <HAL_RCC_GetClockConfig+0x58>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0203 	and.w	r2, r3, #3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <HAL_RCC_GetClockConfig+0x58>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_GetClockConfig+0x58>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a0c:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_RCC_GetClockConfig+0x58>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	08db      	lsrs	r3, r3, #3
 8003a12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0207 	and.w	r2, r3, #7
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40022000 	.word	0x40022000

08003a38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <RCC_Delay+0x34>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <RCC_Delay+0x38>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	0a5b      	lsrs	r3, r3, #9
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a54:	bf00      	nop
  }
  while (Delay --);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1e5a      	subs	r2, r3, #1
 8003a5a:	60fa      	str	r2, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f9      	bne.n	8003a54 <RCC_Delay+0x1c>
}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr
 8003a6c:	20000008 	.word	0x20000008
 8003a70:	10624dd3 	.word	0x10624dd3

08003a74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d07d      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a90:	2300      	movs	r3, #0
 8003a92:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a94:	4b4f      	ldr	r3, [pc, #316]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10d      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa0:	4b4c      	ldr	r3, [pc, #304]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	4a4b      	ldr	r2, [pc, #300]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	61d3      	str	r3, [r2, #28]
 8003aac:	4b49      	ldr	r3, [pc, #292]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	4b46      	ldr	r3, [pc, #280]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d118      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ac8:	4b43      	ldr	r3, [pc, #268]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a42      	ldr	r2, [pc, #264]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad4:	f7fe fe24 	bl	8002720 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	e008      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003adc:	f7fe fe20 	bl	8002720 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e06d      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aee:	4b3a      	ldr	r3, [pc, #232]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003afa:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b02:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d02e      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d027      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b18:	4b2e      	ldr	r3, [pc, #184]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b20:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b22:	4b2e      	ldr	r3, [pc, #184]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b28:	4b2c      	ldr	r3, [pc, #176]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b2e:	4a29      	ldr	r2, [pc, #164]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d014      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7fe fdef 	bl	8002720 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b44:	e00a      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b46:	f7fe fdeb 	bl	8002720 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e036      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ee      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	4917      	ldr	r1, [pc, #92]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d105      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b80:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	4a13      	ldr	r2, [pc, #76]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b98:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	490b      	ldr	r1, [pc, #44]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bb6:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	4904      	ldr	r1, [pc, #16]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	42420440 	.word	0x42420440

08003be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e041      	b.n	8003c76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fe fb32 	bl	8002270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f000 fc28 	bl	8004474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d001      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e03a      	b.n	8003d0e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a18      	ldr	r2, [pc, #96]	; (8003d18 <HAL_TIM_Base_Start_IT+0x98>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00e      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x58>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc2:	d009      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x58>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <HAL_TIM_Base_Start_IT+0x9c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d004      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x58>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <HAL_TIM_Base_Start_IT+0xa0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d111      	bne.n	8003cfc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b06      	cmp	r3, #6
 8003ce8:	d010      	beq.n	8003d0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0201 	orr.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfa:	e007      	b.n	8003d0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr
 8003d18:	40012c00 	.word	0x40012c00
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800

08003d24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e041      	b.n	8003dba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f839 	bl	8003dc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f000 fb86 	bl	8004474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <HAL_TIM_PWM_Start+0x24>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	bf14      	ite	ne
 8003df0:	2301      	movne	r3, #1
 8003df2:	2300      	moveq	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	e022      	b.n	8003e3e <HAL_TIM_PWM_Start+0x6a>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d109      	bne.n	8003e12 <HAL_TIM_PWM_Start+0x3e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	bf14      	ite	ne
 8003e0a:	2301      	movne	r3, #1
 8003e0c:	2300      	moveq	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	e015      	b.n	8003e3e <HAL_TIM_PWM_Start+0x6a>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d109      	bne.n	8003e2c <HAL_TIM_PWM_Start+0x58>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e008      	b.n	8003e3e <HAL_TIM_PWM_Start+0x6a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	bf14      	ite	ne
 8003e38:	2301      	movne	r3, #1
 8003e3a:	2300      	moveq	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e05e      	b.n	8003f04 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d104      	bne.n	8003e56 <HAL_TIM_PWM_Start+0x82>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e54:	e013      	b.n	8003e7e <HAL_TIM_PWM_Start+0xaa>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d104      	bne.n	8003e66 <HAL_TIM_PWM_Start+0x92>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e64:	e00b      	b.n	8003e7e <HAL_TIM_PWM_Start+0xaa>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d104      	bne.n	8003e76 <HAL_TIM_PWM_Start+0xa2>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e74:	e003      	b.n	8003e7e <HAL_TIM_PWM_Start+0xaa>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2201      	movs	r2, #1
 8003e84:	6839      	ldr	r1, [r7, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fd74 	bl	8004974 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1e      	ldr	r2, [pc, #120]	; (8003f0c <HAL_TIM_PWM_Start+0x138>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d107      	bne.n	8003ea6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ea4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a18      	ldr	r2, [pc, #96]	; (8003f0c <HAL_TIM_PWM_Start+0x138>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00e      	beq.n	8003ece <HAL_TIM_PWM_Start+0xfa>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb8:	d009      	beq.n	8003ece <HAL_TIM_PWM_Start+0xfa>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <HAL_TIM_PWM_Start+0x13c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_TIM_PWM_Start+0xfa>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a12      	ldr	r2, [pc, #72]	; (8003f14 <HAL_TIM_PWM_Start+0x140>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d111      	bne.n	8003ef2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b06      	cmp	r3, #6
 8003ede:	d010      	beq.n	8003f02 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef0:	e007      	b.n	8003f02 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0201 	orr.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40000400 	.word	0x40000400
 8003f14:	40000800 	.word	0x40000800

08003f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d122      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d11b      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0202 	mvn.w	r2, #2
 8003f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fa6f 	bl	800443e <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fa62 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fa71 	bl	8004450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d122      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d11b      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0204 	mvn.w	r2, #4
 8003f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fa45 	bl	800443e <HAL_TIM_IC_CaptureCallback>
 8003fb4:	e005      	b.n	8003fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fa38 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fa47 	bl	8004450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d122      	bne.n	800401c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d11b      	bne.n	800401c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0208 	mvn.w	r2, #8
 8003fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fa1b 	bl	800443e <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fa0e 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fa1d 	bl	8004450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b10      	cmp	r3, #16
 8004028:	d122      	bne.n	8004070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b10      	cmp	r3, #16
 8004036:	d11b      	bne.n	8004070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0210 	mvn.w	r2, #16
 8004040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2208      	movs	r2, #8
 8004046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f9f1 	bl	800443e <HAL_TIM_IC_CaptureCallback>
 800405c:	e005      	b.n	800406a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9e4 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f9f3 	bl	8004450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d10e      	bne.n	800409c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d107      	bne.n	800409c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0201 	mvn.w	r2, #1
 8004094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fe f85e 	bl	8002158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b80      	cmp	r3, #128	; 0x80
 80040a8:	d10e      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d107      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fd32 	bl	8004b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d10e      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d107      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f9b7 	bl	8004462 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d10e      	bne.n	8004120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b20      	cmp	r3, #32
 800410e:	d107      	bne.n	8004120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0220 	mvn.w	r2, #32
 8004118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fcfd 	bl	8004b1a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004120:	bf00      	nop
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800413e:	2302      	movs	r3, #2
 8004140:	e0ac      	b.n	800429c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b0c      	cmp	r3, #12
 800414e:	f200 809f 	bhi.w	8004290 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	0800418d 	.word	0x0800418d
 800415c:	08004291 	.word	0x08004291
 8004160:	08004291 	.word	0x08004291
 8004164:	08004291 	.word	0x08004291
 8004168:	080041cd 	.word	0x080041cd
 800416c:	08004291 	.word	0x08004291
 8004170:	08004291 	.word	0x08004291
 8004174:	08004291 	.word	0x08004291
 8004178:	0800420f 	.word	0x0800420f
 800417c:	08004291 	.word	0x08004291
 8004180:	08004291 	.word	0x08004291
 8004184:	08004291 	.word	0x08004291
 8004188:	0800424f 	.word	0x0800424f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f9d0 	bl	8004538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0208 	orr.w	r2, r2, #8
 80041a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0204 	bic.w	r2, r2, #4
 80041b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6999      	ldr	r1, [r3, #24]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	619a      	str	r2, [r3, #24]
      break;
 80041ca:	e062      	b.n	8004292 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fa16 	bl	8004604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6999      	ldr	r1, [r3, #24]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	021a      	lsls	r2, r3, #8
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	619a      	str	r2, [r3, #24]
      break;
 800420c:	e041      	b.n	8004292 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68b9      	ldr	r1, [r7, #8]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fa5f 	bl	80046d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0208 	orr.w	r2, r2, #8
 8004228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69da      	ldr	r2, [r3, #28]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0204 	bic.w	r2, r2, #4
 8004238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69d9      	ldr	r1, [r3, #28]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	61da      	str	r2, [r3, #28]
      break;
 800424c:	e021      	b.n	8004292 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 faa9 	bl	80047ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69d9      	ldr	r1, [r3, #28]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	021a      	lsls	r2, r3, #8
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	61da      	str	r2, [r3, #28]
      break;
 800428e:	e000      	b.n	8004292 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004290:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_TIM_ConfigClockSource+0x18>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e0b3      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x180>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f4:	d03e      	beq.n	8004374 <HAL_TIM_ConfigClockSource+0xd0>
 80042f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042fa:	f200 8087 	bhi.w	800440c <HAL_TIM_ConfigClockSource+0x168>
 80042fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004302:	f000 8085 	beq.w	8004410 <HAL_TIM_ConfigClockSource+0x16c>
 8004306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430a:	d87f      	bhi.n	800440c <HAL_TIM_ConfigClockSource+0x168>
 800430c:	2b70      	cmp	r3, #112	; 0x70
 800430e:	d01a      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0xa2>
 8004310:	2b70      	cmp	r3, #112	; 0x70
 8004312:	d87b      	bhi.n	800440c <HAL_TIM_ConfigClockSource+0x168>
 8004314:	2b60      	cmp	r3, #96	; 0x60
 8004316:	d050      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x116>
 8004318:	2b60      	cmp	r3, #96	; 0x60
 800431a:	d877      	bhi.n	800440c <HAL_TIM_ConfigClockSource+0x168>
 800431c:	2b50      	cmp	r3, #80	; 0x50
 800431e:	d03c      	beq.n	800439a <HAL_TIM_ConfigClockSource+0xf6>
 8004320:	2b50      	cmp	r3, #80	; 0x50
 8004322:	d873      	bhi.n	800440c <HAL_TIM_ConfigClockSource+0x168>
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	d058      	beq.n	80043da <HAL_TIM_ConfigClockSource+0x136>
 8004328:	2b40      	cmp	r3, #64	; 0x40
 800432a:	d86f      	bhi.n	800440c <HAL_TIM_ConfigClockSource+0x168>
 800432c:	2b30      	cmp	r3, #48	; 0x30
 800432e:	d064      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x156>
 8004330:	2b30      	cmp	r3, #48	; 0x30
 8004332:	d86b      	bhi.n	800440c <HAL_TIM_ConfigClockSource+0x168>
 8004334:	2b20      	cmp	r3, #32
 8004336:	d060      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x156>
 8004338:	2b20      	cmp	r3, #32
 800433a:	d867      	bhi.n	800440c <HAL_TIM_ConfigClockSource+0x168>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d05c      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x156>
 8004340:	2b10      	cmp	r3, #16
 8004342:	d05a      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004344:	e062      	b.n	800440c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6899      	ldr	r1, [r3, #8]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f000 faee 	bl	8004936 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004368:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	609a      	str	r2, [r3, #8]
      break;
 8004372:	e04e      	b.n	8004412 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	6899      	ldr	r1, [r3, #8]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f000 fad7 	bl	8004936 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004396:	609a      	str	r2, [r3, #8]
      break;
 8004398:	e03b      	b.n	8004412 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6859      	ldr	r1, [r3, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f000 fa4e 	bl	8004848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2150      	movs	r1, #80	; 0x50
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 faa5 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80043b8:	e02b      	b.n	8004412 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6859      	ldr	r1, [r3, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	461a      	mov	r2, r3
 80043c8:	f000 fa6c 	bl	80048a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2160      	movs	r1, #96	; 0x60
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fa95 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80043d8:	e01b      	b.n	8004412 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6859      	ldr	r1, [r3, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f000 fa2e 	bl	8004848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2140      	movs	r1, #64	; 0x40
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fa85 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80043f8:	e00b      	b.n	8004412 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4619      	mov	r1, r3
 8004404:	4610      	mov	r0, r2
 8004406:	f000 fa7c 	bl	8004902 <TIM_ITRx_SetConfig>
        break;
 800440a:	e002      	b.n	8004412 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800440c:	bf00      	nop
 800440e:	e000      	b.n	8004412 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004410:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr

0800443e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr

08004450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr

08004462 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a29      	ldr	r2, [pc, #164]	; (800452c <TIM_Base_SetConfig+0xb8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00b      	beq.n	80044a4 <TIM_Base_SetConfig+0x30>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004492:	d007      	beq.n	80044a4 <TIM_Base_SetConfig+0x30>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a26      	ldr	r2, [pc, #152]	; (8004530 <TIM_Base_SetConfig+0xbc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <TIM_Base_SetConfig+0x30>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a25      	ldr	r2, [pc, #148]	; (8004534 <TIM_Base_SetConfig+0xc0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d108      	bne.n	80044b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a1c      	ldr	r2, [pc, #112]	; (800452c <TIM_Base_SetConfig+0xb8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00b      	beq.n	80044d6 <TIM_Base_SetConfig+0x62>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c4:	d007      	beq.n	80044d6 <TIM_Base_SetConfig+0x62>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a19      	ldr	r2, [pc, #100]	; (8004530 <TIM_Base_SetConfig+0xbc>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_Base_SetConfig+0x62>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a18      	ldr	r2, [pc, #96]	; (8004534 <TIM_Base_SetConfig+0xc0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d108      	bne.n	80044e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a07      	ldr	r2, [pc, #28]	; (800452c <TIM_Base_SetConfig+0xb8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d103      	bne.n	800451c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	615a      	str	r2, [r3, #20]
}
 8004522:	bf00      	nop
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr
 800452c:	40012c00 	.word	0x40012c00
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800

08004538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	f023 0201 	bic.w	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0303 	bic.w	r3, r3, #3
 800456e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f023 0302 	bic.w	r3, r3, #2
 8004580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a1c      	ldr	r2, [pc, #112]	; (8004600 <TIM_OC1_SetConfig+0xc8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d10c      	bne.n	80045ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f023 0308 	bic.w	r3, r3, #8
 800459a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f023 0304 	bic.w	r3, r3, #4
 80045ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a13      	ldr	r2, [pc, #76]	; (8004600 <TIM_OC1_SetConfig+0xc8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d111      	bne.n	80045da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	621a      	str	r2, [r3, #32]
}
 80045f4:	bf00      	nop
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40012c00 	.word	0x40012c00

08004604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f023 0210 	bic.w	r2, r3, #16
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f023 0320 	bic.w	r3, r3, #32
 800464e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <TIM_OC2_SetConfig+0xd0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d10d      	bne.n	8004680 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800466a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800467e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a14      	ldr	r2, [pc, #80]	; (80046d4 <TIM_OC2_SetConfig+0xd0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d113      	bne.n	80046b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800468e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr
 80046d4:	40012c00 	.word	0x40012c00

080046d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0303 	bic.w	r3, r3, #3
 800470e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <TIM_OC3_SetConfig+0xd0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d10d      	bne.n	8004752 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800473c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a14      	ldr	r2, [pc, #80]	; (80047a8 <TIM_OC3_SetConfig+0xd0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d113      	bne.n	8004782 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	621a      	str	r2, [r3, #32]
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40012c00 	.word	0x40012c00

080047ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	031b      	lsls	r3, r3, #12
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a0f      	ldr	r2, [pc, #60]	; (8004844 <TIM_OC4_SetConfig+0x98>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d109      	bne.n	8004820 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	019b      	lsls	r3, r3, #6
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	621a      	str	r2, [r3, #32]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr
 8004844:	40012c00 	.word	0x40012c00

08004848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f023 0201 	bic.w	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f023 030a 	bic.w	r3, r3, #10
 8004884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f023 0210 	bic.w	r2, r3, #16
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	031b      	lsls	r3, r3, #12
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	621a      	str	r2, [r3, #32]
}
 80048f8:	bf00      	nop
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bc80      	pop	{r7}
 8004900:	4770      	bx	lr

08004902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	f043 0307 	orr.w	r3, r3, #7
 8004924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	609a      	str	r2, [r3, #8]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr

08004936 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004936:	b480      	push	{r7}
 8004938:	b087      	sub	sp, #28
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004950:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	021a      	lsls	r2, r3, #8
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	431a      	orrs	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4313      	orrs	r3, r2
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	609a      	str	r2, [r3, #8]
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	2201      	movs	r2, #1
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a1a      	ldr	r2, [r3, #32]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	43db      	mvns	r3, r3
 8004996:	401a      	ands	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a1a      	ldr	r2, [r3, #32]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	621a      	str	r2, [r3, #32]
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr

080049bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e046      	b.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a16      	ldr	r2, [pc, #88]	; (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a20:	d009      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a12      	ldr	r2, [pc, #72]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d10c      	bne.n	8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr
 8004a6c:	40012c00 	.word	0x40012c00
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800

08004a78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e03d      	b.n	8004b10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr

08004b1a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr

08004b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr

08004b3e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e03f      	b.n	8004bd0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d106      	bne.n	8004b6a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7fd fbd5 	bl	8002314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2224      	movs	r2, #36	; 0x24
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fc7a 	bl	800547c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695a      	ldr	r2, [r3, #20]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ba6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bb6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e047      	b.n	8004c7a <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fd fb88 	bl	8002314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2224      	movs	r2, #36	; 0x24
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fc2d 	bl	800547c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695a      	ldr	r2, [r3, #20]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004c40:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695a      	ldr	r2, [r3, #20]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0208 	orr.w	r2, r2, #8
 8004c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b08a      	sub	sp, #40	; 0x28
 8004c86:	af02      	add	r7, sp, #8
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	603b      	str	r3, [r7, #0]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d17c      	bne.n	8004d9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_UART_Transmit+0x2c>
 8004ca8:	88fb      	ldrh	r3, [r7, #6]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e075      	b.n	8004d9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_UART_Transmit+0x3e>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e06e      	b.n	8004d9e <HAL_UART_Transmit+0x11c>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2221      	movs	r2, #33	; 0x21
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cd6:	f7fd fd23 	bl	8002720 <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	88fa      	ldrh	r2, [r7, #6]
 8004ce0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	88fa      	ldrh	r2, [r7, #6]
 8004ce6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf0:	d108      	bne.n	8004d04 <HAL_UART_Transmit+0x82>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d104      	bne.n	8004d04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	61bb      	str	r3, [r7, #24]
 8004d02:	e003      	b.n	8004d0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d14:	e02a      	b.n	8004d6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2180      	movs	r1, #128	; 0x80
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 fa11 	bl	8005148 <UART_WaitOnFlagUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e036      	b.n	8004d9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10b      	bne.n	8004d4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	3302      	adds	r3, #2
 8004d4a:	61bb      	str	r3, [r7, #24]
 8004d4c:	e007      	b.n	8004d5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	781a      	ldrb	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1cf      	bne.n	8004d16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2140      	movs	r1, #64	; 0x40
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 f9e1 	bl	8005148 <UART_WaitOnFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e006      	b.n	8004d9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e000      	b.n	8004d9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d9c:	2302      	movs	r3, #2
  }
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3720      	adds	r7, #32
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	; 0x28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10d      	bne.n	8004dfa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d008      	beq.n	8004dfa <HAL_UART_IRQHandler+0x52>
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fa99 	bl	800532a <UART_Receive_IT>
      return;
 8004df8:	e17b      	b.n	80050f2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 80b1 	beq.w	8004f64 <HAL_UART_IRQHandler+0x1bc>
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d105      	bne.n	8004e18 <HAL_UART_IRQHandler+0x70>
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80a6 	beq.w	8004f64 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_UART_IRQHandler+0x90>
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	f043 0201 	orr.w	r2, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_UART_IRQHandler+0xb0>
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	f043 0202 	orr.w	r2, r3, #2
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <HAL_UART_IRQHandler+0xd0>
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	f043 0204 	orr.w	r2, r3, #4
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00f      	beq.n	8004ea2 <HAL_UART_IRQHandler+0xfa>
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d104      	bne.n	8004e96 <HAL_UART_IRQHandler+0xee>
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	f043 0208 	orr.w	r2, r3, #8
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 811e 	beq.w	80050e8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x11e>
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 fa32 	bl	800532a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d102      	bne.n	8004eee <HAL_UART_IRQHandler+0x146>
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d031      	beq.n	8004f52 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f974 	bl	80051dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d023      	beq.n	8004f4a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f10:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d013      	beq.n	8004f42 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	4a76      	ldr	r2, [pc, #472]	; (80050f8 <HAL_UART_IRQHandler+0x350>)
 8004f20:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fd ff30 	bl	8002d8c <HAL_DMA_Abort_IT>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d016      	beq.n	8004f60 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f40:	e00e      	b.n	8004f60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f8ec 	bl	8005120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f48:	e00a      	b.n	8004f60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f8e8 	bl	8005120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f50:	e006      	b.n	8004f60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f8e4 	bl	8005120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f5e:	e0c3      	b.n	80050e8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f60:	bf00      	nop
    return;
 8004f62:	e0c1      	b.n	80050e8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	f040 80a1 	bne.w	80050b0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 809b 	beq.w	80050b0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8095 	beq.w	80050b0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d04e      	beq.n	8005048 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004fb4:	8a3b      	ldrh	r3, [r7, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 8098 	beq.w	80050ec <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fc0:	8a3a      	ldrh	r2, [r7, #16]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	f080 8092 	bcs.w	80050ec <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8a3a      	ldrh	r2, [r7, #16]
 8004fcc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d02b      	beq.n	8005030 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fe6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695a      	ldr	r2, [r3, #20]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695a      	ldr	r2, [r3, #20]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005006:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0210 	bic.w	r2, r2, #16
 8005024:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	4618      	mov	r0, r3
 800502c:	f7fd fe73 	bl	8002d16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005038:	b29b      	uxth	r3, r3
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	b29b      	uxth	r3, r3
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f876 	bl	8005132 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005046:	e051      	b.n	80050ec <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005050:	b29b      	uxth	r3, r3
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d047      	beq.n	80050f0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005060:	8a7b      	ldrh	r3, [r7, #18]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d044      	beq.n	80050f0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005074:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0210 	bic.w	r2, r2, #16
 80050a2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050a4:	8a7b      	ldrh	r3, [r7, #18]
 80050a6:	4619      	mov	r1, r3
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f842 	bl	8005132 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80050ae:	e01f      	b.n	80050f0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d008      	beq.n	80050cc <HAL_UART_IRQHandler+0x324>
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f8c9 	bl	800525c <UART_Transmit_IT>
    return;
 80050ca:	e012      	b.n	80050f2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00d      	beq.n	80050f2 <HAL_UART_IRQHandler+0x34a>
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f90a 	bl	80052fa <UART_EndTransmit_IT>
    return;
 80050e6:	e004      	b.n	80050f2 <HAL_UART_IRQHandler+0x34a>
    return;
 80050e8:	bf00      	nop
 80050ea:	e002      	b.n	80050f2 <HAL_UART_IRQHandler+0x34a>
      return;
 80050ec:	bf00      	nop
 80050ee:	e000      	b.n	80050f2 <HAL_UART_IRQHandler+0x34a>
      return;
 80050f0:	bf00      	nop
  }
}
 80050f2:	3728      	adds	r7, #40	; 0x28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	08005235 	.word	0x08005235

080050fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr

0800510e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr

08005120 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr

08005132 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	460b      	mov	r3, r1
 800513c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr

08005148 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	4613      	mov	r3, r2
 8005156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005158:	e02c      	b.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005160:	d028      	beq.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d007      	beq.n	8005178 <UART_WaitOnFlagUntilTimeout+0x30>
 8005168:	f7fd fada 	bl	8002720 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	429a      	cmp	r2, r3
 8005176:	d21d      	bcs.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005186:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695a      	ldr	r2, [r3, #20]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e00f      	b.n	80051d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	4013      	ands	r3, r2
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d0c3      	beq.n	800515a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695a      	ldr	r2, [r3, #20]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0201 	bic.w	r2, r2, #1
 8005202:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	2b01      	cmp	r3, #1
 800520a:	d107      	bne.n	800521c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0210 	bic.w	r2, r2, #16
 800521a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	631a      	str	r2, [r3, #48]	; 0x30
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7ff ff66 	bl	8005120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b21      	cmp	r3, #33	; 0x21
 800526e:	d13e      	bne.n	80052ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005278:	d114      	bne.n	80052a4 <UART_Transmit_IT+0x48>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d110      	bne.n	80052a4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005296:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	1c9a      	adds	r2, r3, #2
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	621a      	str	r2, [r3, #32]
 80052a2:	e008      	b.n	80052b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	1c59      	adds	r1, r3, #1
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6211      	str	r1, [r2, #32]
 80052ae:	781a      	ldrb	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29b      	uxth	r3, r3
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	4619      	mov	r1, r3
 80052c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10f      	bne.n	80052ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	e000      	b.n	80052f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052ee:	2302      	movs	r3, #2
  }
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr

080052fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005310:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff feee 	bl	80050fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b086      	sub	sp, #24
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b22      	cmp	r3, #34	; 0x22
 800533c:	f040 8099 	bne.w	8005472 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005348:	d117      	bne.n	800537a <UART_Receive_IT+0x50>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d113      	bne.n	800537a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	b29b      	uxth	r3, r3
 8005364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005368:	b29a      	uxth	r2, r3
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	1c9a      	adds	r2, r3, #2
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	629a      	str	r2, [r3, #40]	; 0x28
 8005378:	e026      	b.n	80053c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005380:	2300      	movs	r3, #0
 8005382:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538c:	d007      	beq.n	800539e <UART_Receive_IT+0x74>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10a      	bne.n	80053ac <UART_Receive_IT+0x82>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	e008      	b.n	80053be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	4619      	mov	r1, r3
 80053d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d148      	bne.n	800546e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0220 	bic.w	r2, r2, #32
 80053ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0201 	bic.w	r2, r2, #1
 800540a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	2b01      	cmp	r3, #1
 800541a:	d123      	bne.n	8005464 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0210 	bic.w	r2, r2, #16
 8005430:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b10      	cmp	r3, #16
 800543e:	d10a      	bne.n	8005456 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800545a:	4619      	mov	r1, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff fe68 	bl	8005132 <HAL_UARTEx_RxEventCallback>
 8005462:	e002      	b.n	800546a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff fe52 	bl	800510e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	e002      	b.n	8005474 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	e000      	b.n	8005474 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005472:	2302      	movs	r3, #2
  }
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80054b6:	f023 030c 	bic.w	r3, r3, #12
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6812      	ldr	r2, [r2, #0]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	430b      	orrs	r3, r1
 80054c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2c      	ldr	r2, [pc, #176]	; (8005590 <UART_SetConfig+0x114>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d103      	bne.n	80054ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80054e4:	f7fe fa64 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	e002      	b.n	80054f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80054ec:	f7fe fa4c 	bl	8003988 <HAL_RCC_GetPCLK1Freq>
 80054f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	009a      	lsls	r2, r3, #2
 80054fc:	441a      	add	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	fbb2 f3f3 	udiv	r3, r2, r3
 8005508:	4a22      	ldr	r2, [pc, #136]	; (8005594 <UART_SetConfig+0x118>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	0119      	lsls	r1, r3, #4
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	009a      	lsls	r2, r3, #2
 800551c:	441a      	add	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	fbb2 f2f3 	udiv	r2, r2, r3
 8005528:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <UART_SetConfig+0x118>)
 800552a:	fba3 0302 	umull	r0, r3, r3, r2
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	2064      	movs	r0, #100	; 0x64
 8005532:	fb00 f303 	mul.w	r3, r0, r3
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	3332      	adds	r3, #50	; 0x32
 800553c:	4a15      	ldr	r2, [pc, #84]	; (8005594 <UART_SetConfig+0x118>)
 800553e:	fba2 2303 	umull	r2, r3, r2, r3
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005548:	4419      	add	r1, r3
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009a      	lsls	r2, r3, #2
 8005554:	441a      	add	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005560:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <UART_SetConfig+0x118>)
 8005562:	fba3 0302 	umull	r0, r3, r3, r2
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	2064      	movs	r0, #100	; 0x64
 800556a:	fb00 f303 	mul.w	r3, r0, r3
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	3332      	adds	r3, #50	; 0x32
 8005574:	4a07      	ldr	r2, [pc, #28]	; (8005594 <UART_SetConfig+0x118>)
 8005576:	fba2 2303 	umull	r2, r3, r2, r3
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	f003 020f 	and.w	r2, r3, #15
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	440a      	add	r2, r1
 8005586:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40013800 	.word	0x40013800
 8005594:	51eb851f 	.word	0x51eb851f

08005598 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800559e:	f3ef 8305 	mrs	r3, IPSR
 80055a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80055a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10f      	bne.n	80055ca <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055aa:	f3ef 8310 	mrs	r3, PRIMASK
 80055ae:	607b      	str	r3, [r7, #4]
  return(result);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <osKernelInitialize+0x32>
 80055b6:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <osKernelInitialize+0x60>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d109      	bne.n	80055d2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055be:	f3ef 8311 	mrs	r3, BASEPRI
 80055c2:	603b      	str	r3, [r7, #0]
  return(result);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80055ca:	f06f 0305 	mvn.w	r3, #5
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	e00c      	b.n	80055ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <osKernelInitialize+0x60>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d105      	bne.n	80055e6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80055da:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <osKernelInitialize+0x60>)
 80055dc:	2201      	movs	r2, #1
 80055de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	e002      	b.n	80055ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80055e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80055ec:	68fb      	ldr	r3, [r7, #12]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr
 80055f8:	2000020c 	.word	0x2000020c

080055fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005602:	f3ef 8305 	mrs	r3, IPSR
 8005606:	60bb      	str	r3, [r7, #8]
  return(result);
 8005608:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10f      	bne.n	800562e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800560e:	f3ef 8310 	mrs	r3, PRIMASK
 8005612:	607b      	str	r3, [r7, #4]
  return(result);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <osKernelStart+0x32>
 800561a:	4b11      	ldr	r3, [pc, #68]	; (8005660 <osKernelStart+0x64>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d109      	bne.n	8005636 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005622:	f3ef 8311 	mrs	r3, BASEPRI
 8005626:	603b      	str	r3, [r7, #0]
  return(result);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <osKernelStart+0x3a>
    stat = osErrorISR;
 800562e:	f06f 0305 	mvn.w	r3, #5
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	e00e      	b.n	8005654 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005636:	4b0a      	ldr	r3, [pc, #40]	; (8005660 <osKernelStart+0x64>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d107      	bne.n	800564e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800563e:	4b08      	ldr	r3, [pc, #32]	; (8005660 <osKernelStart+0x64>)
 8005640:	2202      	movs	r2, #2
 8005642:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005644:	f001 f890 	bl	8006768 <vTaskStartScheduler>
      stat = osOK;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	e002      	b.n	8005654 <osKernelStart+0x58>
    } else {
      stat = osError;
 800564e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005652:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005654:	68fb      	ldr	r3, [r7, #12]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	2000020c 	.word	0x2000020c

08005664 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005664:	b580      	push	{r7, lr}
 8005666:	b092      	sub	sp, #72	; 0x48
 8005668:	af04      	add	r7, sp, #16
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005674:	f3ef 8305 	mrs	r3, IPSR
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800567c:	2b00      	cmp	r3, #0
 800567e:	f040 8094 	bne.w	80057aa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005682:	f3ef 8310 	mrs	r3, PRIMASK
 8005686:	623b      	str	r3, [r7, #32]
  return(result);
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f040 808d 	bne.w	80057aa <osThreadNew+0x146>
 8005690:	4b48      	ldr	r3, [pc, #288]	; (80057b4 <osThreadNew+0x150>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d106      	bne.n	80056a6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005698:	f3ef 8311 	mrs	r3, BASEPRI
 800569c:	61fb      	str	r3, [r7, #28]
  return(result);
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f040 8082 	bne.w	80057aa <osThreadNew+0x146>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d07e      	beq.n	80057aa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80056ac:	2380      	movs	r3, #128	; 0x80
 80056ae:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80056b0:	2318      	movs	r3, #24
 80056b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80056b4:	2300      	movs	r3, #0
 80056b6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80056b8:	f107 031b 	add.w	r3, r7, #27
 80056bc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80056be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d045      	beq.n	8005756 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <osThreadNew+0x74>
        name = attr->name;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d008      	beq.n	80056fe <osThreadNew+0x9a>
 80056ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ee:	2b38      	cmp	r3, #56	; 0x38
 80056f0:	d805      	bhi.n	80056fe <osThreadNew+0x9a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <osThreadNew+0x9e>
        return (NULL);
 80056fe:	2300      	movs	r3, #0
 8005700:	e054      	b.n	80057ac <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	089b      	lsrs	r3, r3, #2
 8005710:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00e      	beq.n	8005738 <osThreadNew+0xd4>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	2bbb      	cmp	r3, #187	; 0xbb
 8005720:	d90a      	bls.n	8005738 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005726:	2b00      	cmp	r3, #0
 8005728:	d006      	beq.n	8005738 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <osThreadNew+0xd4>
        mem = 1;
 8005732:	2301      	movs	r3, #1
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28
 8005736:	e010      	b.n	800575a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10c      	bne.n	800575a <osThreadNew+0xf6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d108      	bne.n	800575a <osThreadNew+0xf6>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d104      	bne.n	800575a <osThreadNew+0xf6>
          mem = 0;
 8005750:	2300      	movs	r3, #0
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
 8005754:	e001      	b.n	800575a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005756:	2300      	movs	r3, #0
 8005758:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	2b01      	cmp	r3, #1
 800575e:	d110      	bne.n	8005782 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005768:	9202      	str	r2, [sp, #8]
 800576a:	9301      	str	r3, [sp, #4]
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005774:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 fe12 	bl	80063a0 <xTaskCreateStatic>
 800577c:	4603      	mov	r3, r0
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	e013      	b.n	80057aa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	2b00      	cmp	r3, #0
 8005786:	d110      	bne.n	80057aa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	b29a      	uxth	r2, r3
 800578c:	f107 0314 	add.w	r3, r7, #20
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fe5c 	bl	8006458 <xTaskCreate>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d001      	beq.n	80057aa <osThreadNew+0x146>
          hTask = NULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057aa:	697b      	ldr	r3, [r7, #20]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3738      	adds	r7, #56	; 0x38
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	2000020c 	.word	0x2000020c

080057b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057c0:	f3ef 8305 	mrs	r3, IPSR
 80057c4:	613b      	str	r3, [r7, #16]
  return(result);
 80057c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10f      	bne.n	80057ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057cc:	f3ef 8310 	mrs	r3, PRIMASK
 80057d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d109      	bne.n	80057ec <osDelay+0x34>
 80057d8:	4b0d      	ldr	r3, [pc, #52]	; (8005810 <osDelay+0x58>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d109      	bne.n	80057f4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057e0:	f3ef 8311 	mrs	r3, BASEPRI
 80057e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <osDelay+0x3c>
    stat = osErrorISR;
 80057ec:	f06f 0305 	mvn.w	r3, #5
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	e007      	b.n	8005804 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <osDelay+0x4c>
      vTaskDelay(ticks);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 ff7e 	bl	8006700 <vTaskDelay>
    }
  }

  return (stat);
 8005804:	697b      	ldr	r3, [r7, #20]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	2000020c 	.word	0x2000020c

08005814 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4a06      	ldr	r2, [pc, #24]	; (800583c <vApplicationGetIdleTaskMemory+0x28>)
 8005824:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4a05      	ldr	r2, [pc, #20]	; (8005840 <vApplicationGetIdleTaskMemory+0x2c>)
 800582a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2280      	movs	r2, #128	; 0x80
 8005830:	601a      	str	r2, [r3, #0]
}
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	bc80      	pop	{r7}
 800583a:	4770      	bx	lr
 800583c:	20000210 	.word	0x20000210
 8005840:	200002cc 	.word	0x200002cc

08005844 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4a07      	ldr	r2, [pc, #28]	; (8005870 <vApplicationGetTimerTaskMemory+0x2c>)
 8005854:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	4a06      	ldr	r2, [pc, #24]	; (8005874 <vApplicationGetTimerTaskMemory+0x30>)
 800585a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005862:	601a      	str	r2, [r3, #0]
}
 8005864:	bf00      	nop
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	200004cc 	.word	0x200004cc
 8005874:	20000588 	.word	0x20000588

08005878 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f103 0208 	add.w	r2, r3, #8
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005890:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f103 0208 	add.w	r2, r3, #8
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f103 0208 	add.w	r2, r3, #8
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr

080058b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr

080058ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058ce:	b480      	push	{r7}
 80058d0:	b085      	sub	sp, #20
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	601a      	str	r2, [r3, #0]
}
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr

08005914 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800592a:	d103      	bne.n	8005934 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	e00c      	b.n	800594e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3308      	adds	r3, #8
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	e002      	b.n	8005942 <vListInsert+0x2e>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	429a      	cmp	r2, r3
 800594c:	d2f6      	bcs.n	800593c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
}
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6892      	ldr	r2, [r2, #8]
 800599a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6852      	ldr	r2, [r2, #4]
 80059a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d103      	bne.n	80059b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	1e5a      	subs	r2, r3, #1
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr
	...

080059d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10a      	bne.n	8005a02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80059fe:	bf00      	nop
 8005a00:	e7fe      	b.n	8005a00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a02:	f001 fff3 	bl	80079ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0e:	68f9      	ldr	r1, [r7, #12]
 8005a10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a12:	fb01 f303 	mul.w	r3, r1, r3
 8005a16:	441a      	add	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a32:	3b01      	subs	r3, #1
 8005a34:	68f9      	ldr	r1, [r7, #12]
 8005a36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a38:	fb01 f303 	mul.w	r3, r1, r3
 8005a3c:	441a      	add	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	22ff      	movs	r2, #255	; 0xff
 8005a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	22ff      	movs	r2, #255	; 0xff
 8005a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d114      	bne.n	8005a82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01a      	beq.n	8005a96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3310      	adds	r3, #16
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 f91b 	bl	8006ca0 <xTaskRemoveFromEventList>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d012      	beq.n	8005a96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a70:	4b0c      	ldr	r3, [pc, #48]	; (8005aa4 <xQueueGenericReset+0xcc>)
 8005a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	e009      	b.n	8005a96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3310      	adds	r3, #16
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff fef6 	bl	8005878 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3324      	adds	r3, #36	; 0x24
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fef1 	bl	8005878 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a96:	f001 ffd9 	bl	8007a4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a9a:	2301      	movs	r3, #1
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	e000ed04 	.word	0xe000ed04

08005aa8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08e      	sub	sp, #56	; 0x38
 8005aac:	af02      	add	r7, sp, #8
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ace:	bf00      	nop
 8005ad0:	e7fe      	b.n	8005ad0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <xQueueGenericCreateStatic+0x52>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <xQueueGenericCreateStatic+0x56>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e000      	b.n	8005b00 <xQueueGenericCreateStatic+0x58>
 8005afe:	2300      	movs	r3, #0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	623b      	str	r3, [r7, #32]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d102      	bne.n	8005b26 <xQueueGenericCreateStatic+0x7e>
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <xQueueGenericCreateStatic+0x82>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <xQueueGenericCreateStatic+0x84>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	61fb      	str	r3, [r7, #28]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b46:	2350      	movs	r3, #80	; 0x50
 8005b48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b50      	cmp	r3, #80	; 0x50
 8005b4e:	d00a      	beq.n	8005b66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	61bb      	str	r3, [r7, #24]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00d      	beq.n	8005b8c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b78:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	4613      	mov	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f805 	bl	8005b96 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3730      	adds	r7, #48	; 0x30
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d103      	bne.n	8005bb2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	e002      	b.n	8005bb8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	69b8      	ldr	r0, [r7, #24]
 8005bc8:	f7ff ff06 	bl	80059d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	78fa      	ldrb	r2, [r7, #3]
 8005bd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005bd4:	bf00      	nop
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08e      	sub	sp, #56	; 0x38
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005bea:	2300      	movs	r3, #0
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <xQueueGenericSend+0x32>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d103      	bne.n	8005c1c <xQueueGenericSend+0x40>
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <xQueueGenericSend+0x44>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e000      	b.n	8005c22 <xQueueGenericSend+0x46>
 8005c20:	2300      	movs	r3, #0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10a      	bne.n	8005c3c <xQueueGenericSend+0x60>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c38:	bf00      	nop
 8005c3a:	e7fe      	b.n	8005c3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d103      	bne.n	8005c4a <xQueueGenericSend+0x6e>
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d101      	bne.n	8005c4e <xQueueGenericSend+0x72>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <xQueueGenericSend+0x74>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <xQueueGenericSend+0x8e>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	623b      	str	r3, [r7, #32]
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c6a:	f001 f9df 	bl	800702c <xTaskGetSchedulerState>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d102      	bne.n	8005c7a <xQueueGenericSend+0x9e>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <xQueueGenericSend+0xa2>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <xQueueGenericSend+0xa4>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <xQueueGenericSend+0xbe>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	61fb      	str	r3, [r7, #28]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c9a:	f001 fea7 	bl	80079ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d302      	bcc.n	8005cb0 <xQueueGenericSend+0xd4>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d129      	bne.n	8005d04 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	68b9      	ldr	r1, [r7, #8]
 8005cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cb6:	f000 fa07 	bl	80060c8 <prvCopyDataToQueue>
 8005cba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d010      	beq.n	8005ce6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	3324      	adds	r3, #36	; 0x24
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 ffe9 	bl	8006ca0 <xTaskRemoveFromEventList>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d013      	beq.n	8005cfc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005cd4:	4b3f      	ldr	r3, [pc, #252]	; (8005dd4 <xQueueGenericSend+0x1f8>)
 8005cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	e00a      	b.n	8005cfc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d007      	beq.n	8005cfc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005cec:	4b39      	ldr	r3, [pc, #228]	; (8005dd4 <xQueueGenericSend+0x1f8>)
 8005cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005cfc:	f001 fea6 	bl	8007a4c <vPortExitCritical>
				return pdPASS;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e063      	b.n	8005dcc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d0a:	f001 fe9f 	bl	8007a4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e05c      	b.n	8005dcc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d106      	bne.n	8005d26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d18:	f107 0314 	add.w	r3, r7, #20
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f001 f823 	bl	8006d68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d22:	2301      	movs	r3, #1
 8005d24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d26:	f001 fe91 	bl	8007a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d2a:	f000 fd8d 	bl	8006848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d2e:	f001 fe5d 	bl	80079ec <vPortEnterCritical>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d38:	b25b      	sxtb	r3, r3
 8005d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d3e:	d103      	bne.n	8005d48 <xQueueGenericSend+0x16c>
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d4e:	b25b      	sxtb	r3, r3
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d54:	d103      	bne.n	8005d5e <xQueueGenericSend+0x182>
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d5e:	f001 fe75 	bl	8007a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d62:	1d3a      	adds	r2, r7, #4
 8005d64:	f107 0314 	add.w	r3, r7, #20
 8005d68:	4611      	mov	r1, r2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f001 f812 	bl	8006d94 <xTaskCheckForTimeOut>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d124      	bne.n	8005dc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d78:	f000 fa9e 	bl	80062b8 <prvIsQueueFull>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d018      	beq.n	8005db4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d84:	3310      	adds	r3, #16
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4611      	mov	r1, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 ff38 	bl	8006c00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d92:	f000 fa29 	bl	80061e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d96:	f000 fd65 	bl	8006864 <xTaskResumeAll>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f47f af7c 	bne.w	8005c9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005da2:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <xQueueGenericSend+0x1f8>)
 8005da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	e772      	b.n	8005c9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005db6:	f000 fa17 	bl	80061e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dba:	f000 fd53 	bl	8006864 <xTaskResumeAll>
 8005dbe:	e76c      	b.n	8005c9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dc2:	f000 fa11 	bl	80061e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dc6:	f000 fd4d 	bl	8006864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005dca:	2300      	movs	r3, #0
		}
	}
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3738      	adds	r7, #56	; 0x38
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	e000ed04 	.word	0xe000ed04

08005dd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08e      	sub	sp, #56	; 0x38
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
 8005de4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10a      	bne.n	8005e06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e02:	bf00      	nop
 8005e04:	e7fe      	b.n	8005e04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d103      	bne.n	8005e14 <xQueueGenericSendFromISR+0x3c>
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <xQueueGenericSendFromISR+0x40>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <xQueueGenericSendFromISR+0x42>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10a      	bne.n	8005e34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	623b      	str	r3, [r7, #32]
}
 8005e30:	bf00      	nop
 8005e32:	e7fe      	b.n	8005e32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d103      	bne.n	8005e42 <xQueueGenericSendFromISR+0x6a>
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <xQueueGenericSendFromISR+0x6e>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e000      	b.n	8005e48 <xQueueGenericSendFromISR+0x70>
 8005e46:	2300      	movs	r3, #0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	61fb      	str	r3, [r7, #28]
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e62:	f001 fe85 	bl	8007b70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e66:	f3ef 8211 	mrs	r2, BASEPRI
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	61ba      	str	r2, [r7, #24]
 8005e7c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d302      	bcc.n	8005e94 <xQueueGenericSendFromISR+0xbc>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d12c      	bne.n	8005eee <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	68b9      	ldr	r1, [r7, #8]
 8005ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ea4:	f000 f910 	bl	80060c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ea8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb0:	d112      	bne.n	8005ed8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d016      	beq.n	8005ee8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	3324      	adds	r3, #36	; 0x24
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 feee 	bl	8006ca0 <xTaskRemoveFromEventList>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00e      	beq.n	8005ee8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00b      	beq.n	8005ee8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	e007      	b.n	8005ee8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ed8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005edc:	3301      	adds	r3, #1
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	b25a      	sxtb	r2, r3
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005eec:	e001      	b.n	8005ef2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005efc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3738      	adds	r7, #56	; 0x38
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08c      	sub	sp, #48	; 0x30
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f14:	2300      	movs	r3, #0
 8005f16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <xQueueReceive+0x30>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	623b      	str	r3, [r7, #32]
}
 8005f34:	bf00      	nop
 8005f36:	e7fe      	b.n	8005f36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <xQueueReceive+0x3e>
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <xQueueReceive+0x42>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e000      	b.n	8005f4c <xQueueReceive+0x44>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <xQueueReceive+0x5e>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	61fb      	str	r3, [r7, #28]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f66:	f001 f861 	bl	800702c <xTaskGetSchedulerState>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d102      	bne.n	8005f76 <xQueueReceive+0x6e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <xQueueReceive+0x72>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <xQueueReceive+0x74>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <xQueueReceive+0x8e>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	61bb      	str	r3, [r7, #24]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f96:	f001 fd29 	bl	80079ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d01f      	beq.n	8005fe6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005faa:	f000 f8f7 	bl	800619c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	1e5a      	subs	r2, r3, #1
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00f      	beq.n	8005fde <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc0:	3310      	adds	r3, #16
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fe6c 	bl	8006ca0 <xTaskRemoveFromEventList>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fce:	4b3d      	ldr	r3, [pc, #244]	; (80060c4 <xQueueReceive+0x1bc>)
 8005fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fde:	f001 fd35 	bl	8007a4c <vPortExitCritical>
				return pdPASS;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e069      	b.n	80060ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d103      	bne.n	8005ff4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fec:	f001 fd2e 	bl	8007a4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	e062      	b.n	80060ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ffa:	f107 0310 	add.w	r3, r7, #16
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 feb2 	bl	8006d68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006004:	2301      	movs	r3, #1
 8006006:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006008:	f001 fd20 	bl	8007a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800600c:	f000 fc1c 	bl	8006848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006010:	f001 fcec 	bl	80079ec <vPortEnterCritical>
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800601a:	b25b      	sxtb	r3, r3
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006020:	d103      	bne.n	800602a <xQueueReceive+0x122>
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006030:	b25b      	sxtb	r3, r3
 8006032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006036:	d103      	bne.n	8006040 <xQueueReceive+0x138>
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006040:	f001 fd04 	bl	8007a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006044:	1d3a      	adds	r2, r7, #4
 8006046:	f107 0310 	add.w	r3, r7, #16
 800604a:	4611      	mov	r1, r2
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fea1 	bl	8006d94 <xTaskCheckForTimeOut>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d123      	bne.n	80060a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800605a:	f000 f917 	bl	800628c <prvIsQueueEmpty>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d017      	beq.n	8006094 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	3324      	adds	r3, #36	; 0x24
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	4611      	mov	r1, r2
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fdc7 	bl	8006c00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006074:	f000 f8b8 	bl	80061e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006078:	f000 fbf4 	bl	8006864 <xTaskResumeAll>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d189      	bne.n	8005f96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006082:	4b10      	ldr	r3, [pc, #64]	; (80060c4 <xQueueReceive+0x1bc>)
 8006084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	e780      	b.n	8005f96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006096:	f000 f8a7 	bl	80061e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800609a:	f000 fbe3 	bl	8006864 <xTaskResumeAll>
 800609e:	e77a      	b.n	8005f96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060a2:	f000 f8a1 	bl	80061e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060a6:	f000 fbdd 	bl	8006864 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ac:	f000 f8ee 	bl	800628c <prvIsQueueEmpty>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f43f af6f 	beq.w	8005f96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3730      	adds	r7, #48	; 0x30
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	e000ed04 	.word	0xe000ed04

080060c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10d      	bne.n	8006102 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d14d      	bne.n	800618a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 ffb8 	bl	8007068 <xTaskPriorityDisinherit>
 80060f8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	605a      	str	r2, [r3, #4]
 8006100:	e043      	b.n	800618a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d119      	bne.n	800613c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6898      	ldr	r0, [r3, #8]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006110:	461a      	mov	r2, r3
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	f002 f865 	bl	80081e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	441a      	add	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	429a      	cmp	r2, r3
 8006130:	d32b      	bcc.n	800618a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	609a      	str	r2, [r3, #8]
 800613a:	e026      	b.n	800618a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	68d8      	ldr	r0, [r3, #12]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	461a      	mov	r2, r3
 8006146:	68b9      	ldr	r1, [r7, #8]
 8006148:	f002 f84b 	bl	80081e2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	425b      	negs	r3, r3
 8006156:	441a      	add	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d207      	bcs.n	8006178 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	425b      	negs	r3, r3
 8006172:	441a      	add	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d105      	bne.n	800618a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	3b01      	subs	r3, #1
 8006188:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006192:	697b      	ldr	r3, [r7, #20]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d018      	beq.n	80061e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	441a      	add	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d303      	bcc.n	80061d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68d9      	ldr	r1, [r3, #12]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	461a      	mov	r2, r3
 80061da:	6838      	ldr	r0, [r7, #0]
 80061dc:	f002 f801 	bl	80081e2 <memcpy>
	}
}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80061f0:	f001 fbfc 	bl	80079ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061fc:	e011      	b.n	8006222 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	2b00      	cmp	r3, #0
 8006204:	d012      	beq.n	800622c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	3324      	adds	r3, #36	; 0x24
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fd48 	bl	8006ca0 <xTaskRemoveFromEventList>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006216:	f000 fe1f 	bl	8006e58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	3b01      	subs	r3, #1
 800621e:	b2db      	uxtb	r3, r3
 8006220:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006226:	2b00      	cmp	r3, #0
 8006228:	dce9      	bgt.n	80061fe <prvUnlockQueue+0x16>
 800622a:	e000      	b.n	800622e <prvUnlockQueue+0x46>
					break;
 800622c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	22ff      	movs	r2, #255	; 0xff
 8006232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006236:	f001 fc09 	bl	8007a4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800623a:	f001 fbd7 	bl	80079ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006244:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006246:	e011      	b.n	800626c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d012      	beq.n	8006276 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3310      	adds	r3, #16
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fd23 	bl	8006ca0 <xTaskRemoveFromEventList>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006260:	f000 fdfa 	bl	8006e58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006264:	7bbb      	ldrb	r3, [r7, #14]
 8006266:	3b01      	subs	r3, #1
 8006268:	b2db      	uxtb	r3, r3
 800626a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800626c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006270:	2b00      	cmp	r3, #0
 8006272:	dce9      	bgt.n	8006248 <prvUnlockQueue+0x60>
 8006274:	e000      	b.n	8006278 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006276:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	22ff      	movs	r2, #255	; 0xff
 800627c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006280:	f001 fbe4 	bl	8007a4c <vPortExitCritical>
}
 8006284:	bf00      	nop
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006294:	f001 fbaa 	bl	80079ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629c:	2b00      	cmp	r3, #0
 800629e:	d102      	bne.n	80062a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062a0:	2301      	movs	r3, #1
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	e001      	b.n	80062aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062aa:	f001 fbcf 	bl	8007a4c <vPortExitCritical>

	return xReturn;
 80062ae:	68fb      	ldr	r3, [r7, #12]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062c0:	f001 fb94 	bl	80079ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d102      	bne.n	80062d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80062d0:	2301      	movs	r3, #1
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	e001      	b.n	80062da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062da:	f001 fbb7 	bl	8007a4c <vPortExitCritical>

	return xReturn;
 80062de:	68fb      	ldr	r3, [r7, #12]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	e014      	b.n	8006322 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80062f8:	4a0e      	ldr	r2, [pc, #56]	; (8006334 <vQueueAddToRegistry+0x4c>)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10b      	bne.n	800631c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006304:	490b      	ldr	r1, [pc, #44]	; (8006334 <vQueueAddToRegistry+0x4c>)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800630e:	4a09      	ldr	r2, [pc, #36]	; (8006334 <vQueueAddToRegistry+0x4c>)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	4413      	add	r3, r2
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800631a:	e006      	b.n	800632a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3301      	adds	r3, #1
 8006320:	60fb      	str	r3, [r7, #12]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b07      	cmp	r3, #7
 8006326:	d9e7      	bls.n	80062f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr
 8006334:	20001d90 	.word	0x20001d90

08006338 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006348:	f001 fb50 	bl	80079ec <vPortEnterCritical>
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006352:	b25b      	sxtb	r3, r3
 8006354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006358:	d103      	bne.n	8006362 <vQueueWaitForMessageRestricted+0x2a>
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006368:	b25b      	sxtb	r3, r3
 800636a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800636e:	d103      	bne.n	8006378 <vQueueWaitForMessageRestricted+0x40>
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006378:	f001 fb68 	bl	8007a4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	2b00      	cmp	r3, #0
 8006382:	d106      	bne.n	8006392 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	3324      	adds	r3, #36	; 0x24
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	68b9      	ldr	r1, [r7, #8]
 800638c:	4618      	mov	r0, r3
 800638e:	f000 fc5b 	bl	8006c48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006392:	6978      	ldr	r0, [r7, #20]
 8006394:	f7ff ff28 	bl	80061e8 <prvUnlockQueue>
	}
 8006398:	bf00      	nop
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08e      	sub	sp, #56	; 0x38
 80063a4:	af04      	add	r7, sp, #16
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	623b      	str	r3, [r7, #32]
}
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	61fb      	str	r3, [r7, #28]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063e6:	23bc      	movs	r3, #188	; 0xbc
 80063e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2bbc      	cmp	r3, #188	; 0xbc
 80063ee:	d00a      	beq.n	8006406 <xTaskCreateStatic+0x66>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	61bb      	str	r3, [r7, #24]
}
 8006402:	bf00      	nop
 8006404:	e7fe      	b.n	8006404 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01e      	beq.n	800644a <xTaskCreateStatic+0xaa>
 800640c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01b      	beq.n	800644a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800641a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	2202      	movs	r2, #2
 8006420:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006424:	2300      	movs	r3, #0
 8006426:	9303      	str	r3, [sp, #12]
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	9302      	str	r3, [sp, #8]
 800642c:	f107 0314 	add.w	r3, r7, #20
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f851 	bl	80064e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006442:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006444:	f000 f8ec 	bl	8006620 <prvAddNewTaskToReadyList>
 8006448:	e001      	b.n	800644e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800644e:	697b      	ldr	r3, [r7, #20]
	}
 8006450:	4618      	mov	r0, r3
 8006452:	3728      	adds	r7, #40	; 0x28
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08c      	sub	sp, #48	; 0x30
 800645c:	af04      	add	r7, sp, #16
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	603b      	str	r3, [r7, #0]
 8006464:	4613      	mov	r3, r2
 8006466:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006468:	88fb      	ldrh	r3, [r7, #6]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4618      	mov	r0, r3
 800646e:	f001 fbbd 	bl	8007bec <pvPortMalloc>
 8006472:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00e      	beq.n	8006498 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800647a:	20bc      	movs	r0, #188	; 0xbc
 800647c:	f001 fbb6 	bl	8007bec <pvPortMalloc>
 8006480:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d003      	beq.n	8006490 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	631a      	str	r2, [r3, #48]	; 0x30
 800648e:	e005      	b.n	800649c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006490:	6978      	ldr	r0, [r7, #20]
 8006492:	f001 fc6f 	bl	8007d74 <vPortFree>
 8006496:	e001      	b.n	800649c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006498:	2300      	movs	r3, #0
 800649a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d017      	beq.n	80064d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064aa:	88fa      	ldrh	r2, [r7, #6]
 80064ac:	2300      	movs	r3, #0
 80064ae:	9303      	str	r3, [sp, #12]
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	9302      	str	r3, [sp, #8]
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	9301      	str	r3, [sp, #4]
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f80f 	bl	80064e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064c6:	69f8      	ldr	r0, [r7, #28]
 80064c8:	f000 f8aa 	bl	8006620 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064cc:	2301      	movs	r3, #1
 80064ce:	61bb      	str	r3, [r7, #24]
 80064d0:	e002      	b.n	80064d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064d8:	69bb      	ldr	r3, [r7, #24]
	}
 80064da:	4618      	mov	r0, r3
 80064dc:	3720      	adds	r7, #32
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
 80064f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	461a      	mov	r2, r3
 80064fc:	21a5      	movs	r1, #165	; 0xa5
 80064fe:	f001 fe7e 	bl	80081fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800650c:	3b01      	subs	r3, #1
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	f023 0307 	bic.w	r3, r3, #7
 800651a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	617b      	str	r3, [r7, #20]
}
 8006538:	bf00      	nop
 800653a:	e7fe      	b.n	800653a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800653c:	2300      	movs	r3, #0
 800653e:	61fb      	str	r3, [r7, #28]
 8006540:	e012      	b.n	8006568 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	4413      	add	r3, r2
 8006548:	7819      	ldrb	r1, [r3, #0]
 800654a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	4413      	add	r3, r2
 8006550:	3334      	adds	r3, #52	; 0x34
 8006552:	460a      	mov	r2, r1
 8006554:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	4413      	add	r3, r2
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d006      	beq.n	8006570 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	3301      	adds	r3, #1
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	2b0f      	cmp	r3, #15
 800656c:	d9e9      	bls.n	8006542 <prvInitialiseNewTask+0x5e>
 800656e:	e000      	b.n	8006572 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006570:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	2b37      	cmp	r3, #55	; 0x37
 800657e:	d901      	bls.n	8006584 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006580:	2337      	movs	r3, #55	; 0x37
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006588:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800658e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006592:	2200      	movs	r2, #0
 8006594:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	3304      	adds	r3, #4
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff f98b 	bl	80058b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	3318      	adds	r3, #24
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff f986 	bl	80058b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	3354      	adds	r3, #84	; 0x54
 80065d4:	2260      	movs	r2, #96	; 0x60
 80065d6:	2100      	movs	r1, #0
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 fe10 	bl	80081fe <memset>
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	4a0c      	ldr	r2, [pc, #48]	; (8006614 <prvInitialiseNewTask+0x130>)
 80065e2:	659a      	str	r2, [r3, #88]	; 0x58
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	4a0c      	ldr	r2, [pc, #48]	; (8006618 <prvInitialiseNewTask+0x134>)
 80065e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	4a0b      	ldr	r2, [pc, #44]	; (800661c <prvInitialiseNewTask+0x138>)
 80065ee:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	68f9      	ldr	r1, [r7, #12]
 80065f4:	69b8      	ldr	r0, [r7, #24]
 80065f6:	f001 f90b 	bl	8007810 <pxPortInitialiseStack>
 80065fa:	4602      	mov	r2, r0
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800660a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800660c:	bf00      	nop
 800660e:	3720      	adds	r7, #32
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	0800b08c 	.word	0x0800b08c
 8006618:	0800b0ac 	.word	0x0800b0ac
 800661c:	0800b06c 	.word	0x0800b06c

08006620 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006628:	f001 f9e0 	bl	80079ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800662c:	4b2d      	ldr	r3, [pc, #180]	; (80066e4 <prvAddNewTaskToReadyList+0xc4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3301      	adds	r3, #1
 8006632:	4a2c      	ldr	r2, [pc, #176]	; (80066e4 <prvAddNewTaskToReadyList+0xc4>)
 8006634:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006636:	4b2c      	ldr	r3, [pc, #176]	; (80066e8 <prvAddNewTaskToReadyList+0xc8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800663e:	4a2a      	ldr	r2, [pc, #168]	; (80066e8 <prvAddNewTaskToReadyList+0xc8>)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006644:	4b27      	ldr	r3, [pc, #156]	; (80066e4 <prvAddNewTaskToReadyList+0xc4>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d110      	bne.n	800666e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800664c:	f000 fc28 	bl	8006ea0 <prvInitialiseTaskLists>
 8006650:	e00d      	b.n	800666e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006652:	4b26      	ldr	r3, [pc, #152]	; (80066ec <prvAddNewTaskToReadyList+0xcc>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d109      	bne.n	800666e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800665a:	4b23      	ldr	r3, [pc, #140]	; (80066e8 <prvAddNewTaskToReadyList+0xc8>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	429a      	cmp	r2, r3
 8006666:	d802      	bhi.n	800666e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006668:	4a1f      	ldr	r2, [pc, #124]	; (80066e8 <prvAddNewTaskToReadyList+0xc8>)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800666e:	4b20      	ldr	r3, [pc, #128]	; (80066f0 <prvAddNewTaskToReadyList+0xd0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3301      	adds	r3, #1
 8006674:	4a1e      	ldr	r2, [pc, #120]	; (80066f0 <prvAddNewTaskToReadyList+0xd0>)
 8006676:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006678:	4b1d      	ldr	r3, [pc, #116]	; (80066f0 <prvAddNewTaskToReadyList+0xd0>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006684:	4b1b      	ldr	r3, [pc, #108]	; (80066f4 <prvAddNewTaskToReadyList+0xd4>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d903      	bls.n	8006694 <prvAddNewTaskToReadyList+0x74>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	4a18      	ldr	r2, [pc, #96]	; (80066f4 <prvAddNewTaskToReadyList+0xd4>)
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <prvAddNewTaskToReadyList+0xd8>)
 80066a2:	441a      	add	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3304      	adds	r3, #4
 80066a8:	4619      	mov	r1, r3
 80066aa:	4610      	mov	r0, r2
 80066ac:	f7ff f90f 	bl	80058ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066b0:	f001 f9cc 	bl	8007a4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066b4:	4b0d      	ldr	r3, [pc, #52]	; (80066ec <prvAddNewTaskToReadyList+0xcc>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00e      	beq.n	80066da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066bc:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <prvAddNewTaskToReadyList+0xc8>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d207      	bcs.n	80066da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066ca:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <prvAddNewTaskToReadyList+0xdc>)
 80066cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066da:	bf00      	nop
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000e5c 	.word	0x20000e5c
 80066e8:	20000988 	.word	0x20000988
 80066ec:	20000e68 	.word	0x20000e68
 80066f0:	20000e78 	.word	0x20000e78
 80066f4:	20000e64 	.word	0x20000e64
 80066f8:	2000098c 	.word	0x2000098c
 80066fc:	e000ed04 	.word	0xe000ed04

08006700 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d017      	beq.n	8006742 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006712:	4b13      	ldr	r3, [pc, #76]	; (8006760 <vTaskDelay+0x60>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <vTaskDelay+0x30>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	60bb      	str	r3, [r7, #8]
}
 800672c:	bf00      	nop
 800672e:	e7fe      	b.n	800672e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006730:	f000 f88a 	bl	8006848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006734:	2100      	movs	r1, #0
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fd04 	bl	8007144 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800673c:	f000 f892 	bl	8006864 <xTaskResumeAll>
 8006740:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d107      	bne.n	8006758 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006748:	4b06      	ldr	r3, [pc, #24]	; (8006764 <vTaskDelay+0x64>)
 800674a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20000e84 	.word	0x20000e84
 8006764:	e000ed04 	.word	0xe000ed04

08006768 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08a      	sub	sp, #40	; 0x28
 800676c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800676e:	2300      	movs	r3, #0
 8006770:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006772:	2300      	movs	r3, #0
 8006774:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006776:	463a      	mov	r2, r7
 8006778:	1d39      	adds	r1, r7, #4
 800677a:	f107 0308 	add.w	r3, r7, #8
 800677e:	4618      	mov	r0, r3
 8006780:	f7ff f848 	bl	8005814 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	9202      	str	r2, [sp, #8]
 800678c:	9301      	str	r3, [sp, #4]
 800678e:	2300      	movs	r3, #0
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	2300      	movs	r3, #0
 8006794:	460a      	mov	r2, r1
 8006796:	4924      	ldr	r1, [pc, #144]	; (8006828 <vTaskStartScheduler+0xc0>)
 8006798:	4824      	ldr	r0, [pc, #144]	; (800682c <vTaskStartScheduler+0xc4>)
 800679a:	f7ff fe01 	bl	80063a0 <xTaskCreateStatic>
 800679e:	4603      	mov	r3, r0
 80067a0:	4a23      	ldr	r2, [pc, #140]	; (8006830 <vTaskStartScheduler+0xc8>)
 80067a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067a4:	4b22      	ldr	r3, [pc, #136]	; (8006830 <vTaskStartScheduler+0xc8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067ac:	2301      	movs	r3, #1
 80067ae:	617b      	str	r3, [r7, #20]
 80067b0:	e001      	b.n	80067b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d102      	bne.n	80067c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80067bc:	f000 fd16 	bl	80071ec <xTimerCreateTimerTask>
 80067c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d11b      	bne.n	8006800 <vTaskStartScheduler+0x98>
	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	613b      	str	r3, [r7, #16]
}
 80067da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067dc:	4b15      	ldr	r3, [pc, #84]	; (8006834 <vTaskStartScheduler+0xcc>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3354      	adds	r3, #84	; 0x54
 80067e2:	4a15      	ldr	r2, [pc, #84]	; (8006838 <vTaskStartScheduler+0xd0>)
 80067e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067e6:	4b15      	ldr	r3, [pc, #84]	; (800683c <vTaskStartScheduler+0xd4>)
 80067e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067ee:	4b14      	ldr	r3, [pc, #80]	; (8006840 <vTaskStartScheduler+0xd8>)
 80067f0:	2201      	movs	r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80067f4:	4b13      	ldr	r3, [pc, #76]	; (8006844 <vTaskStartScheduler+0xdc>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067fa:	f001 f885 	bl	8007908 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067fe:	e00e      	b.n	800681e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006806:	d10a      	bne.n	800681e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	60fb      	str	r3, [r7, #12]
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <vTaskStartScheduler+0xb4>
}
 800681e:	bf00      	nop
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	0800afac 	.word	0x0800afac
 800682c:	08006e71 	.word	0x08006e71
 8006830:	20000e80 	.word	0x20000e80
 8006834:	20000988 	.word	0x20000988
 8006838:	20000018 	.word	0x20000018
 800683c:	20000e7c 	.word	0x20000e7c
 8006840:	20000e68 	.word	0x20000e68
 8006844:	20000e60 	.word	0x20000e60

08006848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800684c:	4b04      	ldr	r3, [pc, #16]	; (8006860 <vTaskSuspendAll+0x18>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3301      	adds	r3, #1
 8006852:	4a03      	ldr	r2, [pc, #12]	; (8006860 <vTaskSuspendAll+0x18>)
 8006854:	6013      	str	r3, [r2, #0]
}
 8006856:	bf00      	nop
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	20000e84 	.word	0x20000e84

08006864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800686e:	2300      	movs	r3, #0
 8006870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006872:	4b42      	ldr	r3, [pc, #264]	; (800697c <xTaskResumeAll+0x118>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <xTaskResumeAll+0x2c>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	603b      	str	r3, [r7, #0]
}
 800688c:	bf00      	nop
 800688e:	e7fe      	b.n	800688e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006890:	f001 f8ac 	bl	80079ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006894:	4b39      	ldr	r3, [pc, #228]	; (800697c <xTaskResumeAll+0x118>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3b01      	subs	r3, #1
 800689a:	4a38      	ldr	r2, [pc, #224]	; (800697c <xTaskResumeAll+0x118>)
 800689c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800689e:	4b37      	ldr	r3, [pc, #220]	; (800697c <xTaskResumeAll+0x118>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d162      	bne.n	800696c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068a6:	4b36      	ldr	r3, [pc, #216]	; (8006980 <xTaskResumeAll+0x11c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d05e      	beq.n	800696c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068ae:	e02f      	b.n	8006910 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80068b0:	4b34      	ldr	r3, [pc, #208]	; (8006984 <xTaskResumeAll+0x120>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3318      	adds	r3, #24
 80068bc:	4618      	mov	r0, r3
 80068be:	f7ff f861 	bl	8005984 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3304      	adds	r3, #4
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7ff f85c 	bl	8005984 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d0:	4b2d      	ldr	r3, [pc, #180]	; (8006988 <xTaskResumeAll+0x124>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d903      	bls.n	80068e0 <xTaskResumeAll+0x7c>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	4a2a      	ldr	r2, [pc, #168]	; (8006988 <xTaskResumeAll+0x124>)
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e4:	4613      	mov	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4a27      	ldr	r2, [pc, #156]	; (800698c <xTaskResumeAll+0x128>)
 80068ee:	441a      	add	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3304      	adds	r3, #4
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f7fe ffe9 	bl	80058ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006900:	4b23      	ldr	r3, [pc, #140]	; (8006990 <xTaskResumeAll+0x12c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	429a      	cmp	r2, r3
 8006908:	d302      	bcc.n	8006910 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800690a:	4b22      	ldr	r3, [pc, #136]	; (8006994 <xTaskResumeAll+0x130>)
 800690c:	2201      	movs	r2, #1
 800690e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006910:	4b1c      	ldr	r3, [pc, #112]	; (8006984 <xTaskResumeAll+0x120>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1cb      	bne.n	80068b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800691e:	f000 fb61 	bl	8006fe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006922:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <xTaskResumeAll+0x134>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d010      	beq.n	8006950 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800692e:	f000 f845 	bl	80069bc <xTaskIncrementTick>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006938:	4b16      	ldr	r3, [pc, #88]	; (8006994 <xTaskResumeAll+0x130>)
 800693a:	2201      	movs	r2, #1
 800693c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3b01      	subs	r3, #1
 8006942:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1f1      	bne.n	800692e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800694a:	4b13      	ldr	r3, [pc, #76]	; (8006998 <xTaskResumeAll+0x134>)
 800694c:	2200      	movs	r2, #0
 800694e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006950:	4b10      	ldr	r3, [pc, #64]	; (8006994 <xTaskResumeAll+0x130>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d009      	beq.n	800696c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006958:	2301      	movs	r3, #1
 800695a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800695c:	4b0f      	ldr	r3, [pc, #60]	; (800699c <xTaskResumeAll+0x138>)
 800695e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800696c:	f001 f86e 	bl	8007a4c <vPortExitCritical>

	return xAlreadyYielded;
 8006970:	68bb      	ldr	r3, [r7, #8]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	20000e84 	.word	0x20000e84
 8006980:	20000e5c 	.word	0x20000e5c
 8006984:	20000e1c 	.word	0x20000e1c
 8006988:	20000e64 	.word	0x20000e64
 800698c:	2000098c 	.word	0x2000098c
 8006990:	20000988 	.word	0x20000988
 8006994:	20000e70 	.word	0x20000e70
 8006998:	20000e6c 	.word	0x20000e6c
 800699c:	e000ed04 	.word	0xe000ed04

080069a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069a6:	4b04      	ldr	r3, [pc, #16]	; (80069b8 <xTaskGetTickCount+0x18>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069ac:	687b      	ldr	r3, [r7, #4]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr
 80069b8:	20000e60 	.word	0x20000e60

080069bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069c6:	4b51      	ldr	r3, [pc, #324]	; (8006b0c <xTaskIncrementTick+0x150>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f040 808e 	bne.w	8006aec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069d0:	4b4f      	ldr	r3, [pc, #316]	; (8006b10 <xTaskIncrementTick+0x154>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3301      	adds	r3, #1
 80069d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069d8:	4a4d      	ldr	r2, [pc, #308]	; (8006b10 <xTaskIncrementTick+0x154>)
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d120      	bne.n	8006a26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80069e4:	4b4b      	ldr	r3, [pc, #300]	; (8006b14 <xTaskIncrementTick+0x158>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <xTaskIncrementTick+0x48>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	603b      	str	r3, [r7, #0]
}
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <xTaskIncrementTick+0x46>
 8006a04:	4b43      	ldr	r3, [pc, #268]	; (8006b14 <xTaskIncrementTick+0x158>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	4b43      	ldr	r3, [pc, #268]	; (8006b18 <xTaskIncrementTick+0x15c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a41      	ldr	r2, [pc, #260]	; (8006b14 <xTaskIncrementTick+0x158>)
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	4a41      	ldr	r2, [pc, #260]	; (8006b18 <xTaskIncrementTick+0x15c>)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	4b40      	ldr	r3, [pc, #256]	; (8006b1c <xTaskIncrementTick+0x160>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	4a3f      	ldr	r2, [pc, #252]	; (8006b1c <xTaskIncrementTick+0x160>)
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	f000 fadf 	bl	8006fe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a26:	4b3e      	ldr	r3, [pc, #248]	; (8006b20 <xTaskIncrementTick+0x164>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d34e      	bcc.n	8006ace <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a30:	4b38      	ldr	r3, [pc, #224]	; (8006b14 <xTaskIncrementTick+0x158>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <xTaskIncrementTick+0x82>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <xTaskIncrementTick+0x84>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d004      	beq.n	8006a4e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a44:	4b36      	ldr	r3, [pc, #216]	; (8006b20 <xTaskIncrementTick+0x164>)
 8006a46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a4a:	601a      	str	r2, [r3, #0]
					break;
 8006a4c:	e03f      	b.n	8006ace <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a4e:	4b31      	ldr	r3, [pc, #196]	; (8006b14 <xTaskIncrementTick+0x158>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d203      	bcs.n	8006a6e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a66:	4a2e      	ldr	r2, [pc, #184]	; (8006b20 <xTaskIncrementTick+0x164>)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6013      	str	r3, [r2, #0]
						break;
 8006a6c:	e02f      	b.n	8006ace <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	3304      	adds	r3, #4
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe ff86 	bl	8005984 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d004      	beq.n	8006a8a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	3318      	adds	r3, #24
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe ff7d 	bl	8005984 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8e:	4b25      	ldr	r3, [pc, #148]	; (8006b24 <xTaskIncrementTick+0x168>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d903      	bls.n	8006a9e <xTaskIncrementTick+0xe2>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9a:	4a22      	ldr	r2, [pc, #136]	; (8006b24 <xTaskIncrementTick+0x168>)
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4a1f      	ldr	r2, [pc, #124]	; (8006b28 <xTaskIncrementTick+0x16c>)
 8006aac:	441a      	add	r2, r3
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	f7fe ff0a 	bl	80058ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abe:	4b1b      	ldr	r3, [pc, #108]	; (8006b2c <xTaskIncrementTick+0x170>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d3b3      	bcc.n	8006a30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006acc:	e7b0      	b.n	8006a30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ace:	4b17      	ldr	r3, [pc, #92]	; (8006b2c <xTaskIncrementTick+0x170>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad4:	4914      	ldr	r1, [pc, #80]	; (8006b28 <xTaskIncrementTick+0x16c>)
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	440b      	add	r3, r1
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d907      	bls.n	8006af6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	e004      	b.n	8006af6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006aec:	4b10      	ldr	r3, [pc, #64]	; (8006b30 <xTaskIncrementTick+0x174>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3301      	adds	r3, #1
 8006af2:	4a0f      	ldr	r2, [pc, #60]	; (8006b30 <xTaskIncrementTick+0x174>)
 8006af4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006af6:	4b0f      	ldr	r3, [pc, #60]	; (8006b34 <xTaskIncrementTick+0x178>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006afe:	2301      	movs	r3, #1
 8006b00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006b02:	697b      	ldr	r3, [r7, #20]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	20000e84 	.word	0x20000e84
 8006b10:	20000e60 	.word	0x20000e60
 8006b14:	20000e14 	.word	0x20000e14
 8006b18:	20000e18 	.word	0x20000e18
 8006b1c:	20000e74 	.word	0x20000e74
 8006b20:	20000e7c 	.word	0x20000e7c
 8006b24:	20000e64 	.word	0x20000e64
 8006b28:	2000098c 	.word	0x2000098c
 8006b2c:	20000988 	.word	0x20000988
 8006b30:	20000e6c 	.word	0x20000e6c
 8006b34:	20000e70 	.word	0x20000e70

08006b38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b3e:	4b2a      	ldr	r3, [pc, #168]	; (8006be8 <vTaskSwitchContext+0xb0>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b46:	4b29      	ldr	r3, [pc, #164]	; (8006bec <vTaskSwitchContext+0xb4>)
 8006b48:	2201      	movs	r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b4c:	e046      	b.n	8006bdc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006b4e:	4b27      	ldr	r3, [pc, #156]	; (8006bec <vTaskSwitchContext+0xb4>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006b54:	4b26      	ldr	r3, [pc, #152]	; (8006bf0 <vTaskSwitchContext+0xb8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	e010      	b.n	8006b7e <vTaskSwitchContext+0x46>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <vTaskSwitchContext+0x40>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	607b      	str	r3, [r7, #4]
}
 8006b74:	bf00      	nop
 8006b76:	e7fe      	b.n	8006b76 <vTaskSwitchContext+0x3e>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	491d      	ldr	r1, [pc, #116]	; (8006bf4 <vTaskSwitchContext+0xbc>)
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	4613      	mov	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	440b      	add	r3, r1
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0e4      	beq.n	8006b5c <vTaskSwitchContext+0x24>
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4613      	mov	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4a15      	ldr	r2, [pc, #84]	; (8006bf4 <vTaskSwitchContext+0xbc>)
 8006b9e:	4413      	add	r3, r2
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	605a      	str	r2, [r3, #4]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d104      	bne.n	8006bc2 <vTaskSwitchContext+0x8a>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	605a      	str	r2, [r3, #4]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	4a0b      	ldr	r2, [pc, #44]	; (8006bf8 <vTaskSwitchContext+0xc0>)
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	4a08      	ldr	r2, [pc, #32]	; (8006bf0 <vTaskSwitchContext+0xb8>)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006bd2:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <vTaskSwitchContext+0xc0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3354      	adds	r3, #84	; 0x54
 8006bd8:	4a08      	ldr	r2, [pc, #32]	; (8006bfc <vTaskSwitchContext+0xc4>)
 8006bda:	6013      	str	r3, [r2, #0]
}
 8006bdc:	bf00      	nop
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	20000e84 	.word	0x20000e84
 8006bec:	20000e70 	.word	0x20000e70
 8006bf0:	20000e64 	.word	0x20000e64
 8006bf4:	2000098c 	.word	0x2000098c
 8006bf8:	20000988 	.word	0x20000988
 8006bfc:	20000018 	.word	0x20000018

08006c00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	60fb      	str	r3, [r7, #12]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c26:	4b07      	ldr	r3, [pc, #28]	; (8006c44 <vTaskPlaceOnEventList+0x44>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3318      	adds	r3, #24
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7fe fe70 	bl	8005914 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c34:	2101      	movs	r1, #1
 8006c36:	6838      	ldr	r0, [r7, #0]
 8006c38:	f000 fa84 	bl	8007144 <prvAddCurrentTaskToDelayedList>
}
 8006c3c:	bf00      	nop
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20000988 	.word	0x20000988

08006c48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10a      	bne.n	8006c70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	617b      	str	r3, [r7, #20]
}
 8006c6c:	bf00      	nop
 8006c6e:	e7fe      	b.n	8006c6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c70:	4b0a      	ldr	r3, [pc, #40]	; (8006c9c <vTaskPlaceOnEventListRestricted+0x54>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3318      	adds	r3, #24
 8006c76:	4619      	mov	r1, r3
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f7fe fe28 	bl	80058ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	68b8      	ldr	r0, [r7, #8]
 8006c8e:	f000 fa59 	bl	8007144 <prvAddCurrentTaskToDelayedList>
	}
 8006c92:	bf00      	nop
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000988 	.word	0x20000988

08006ca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	60fb      	str	r3, [r7, #12]
}
 8006cc8:	bf00      	nop
 8006cca:	e7fe      	b.n	8006cca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	3318      	adds	r3, #24
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fe fe57 	bl	8005984 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cd6:	4b1e      	ldr	r3, [pc, #120]	; (8006d50 <xTaskRemoveFromEventList+0xb0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d11d      	bne.n	8006d1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fe4e 	bl	8005984 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cec:	4b19      	ldr	r3, [pc, #100]	; (8006d54 <xTaskRemoveFromEventList+0xb4>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d903      	bls.n	8006cfc <xTaskRemoveFromEventList+0x5c>
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	4a16      	ldr	r2, [pc, #88]	; (8006d54 <xTaskRemoveFromEventList+0xb4>)
 8006cfa:	6013      	str	r3, [r2, #0]
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4a13      	ldr	r2, [pc, #76]	; (8006d58 <xTaskRemoveFromEventList+0xb8>)
 8006d0a:	441a      	add	r2, r3
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	4619      	mov	r1, r3
 8006d12:	4610      	mov	r0, r2
 8006d14:	f7fe fddb 	bl	80058ce <vListInsertEnd>
 8006d18:	e005      	b.n	8006d26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	3318      	adds	r3, #24
 8006d1e:	4619      	mov	r1, r3
 8006d20:	480e      	ldr	r0, [pc, #56]	; (8006d5c <xTaskRemoveFromEventList+0xbc>)
 8006d22:	f7fe fdd4 	bl	80058ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2a:	4b0d      	ldr	r3, [pc, #52]	; (8006d60 <xTaskRemoveFromEventList+0xc0>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d905      	bls.n	8006d40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d34:	2301      	movs	r3, #1
 8006d36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d38:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <xTaskRemoveFromEventList+0xc4>)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e001      	b.n	8006d44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d40:	2300      	movs	r3, #0
 8006d42:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006d44:	697b      	ldr	r3, [r7, #20]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000e84 	.word	0x20000e84
 8006d54:	20000e64 	.word	0x20000e64
 8006d58:	2000098c 	.word	0x2000098c
 8006d5c:	20000e1c 	.word	0x20000e1c
 8006d60:	20000988 	.word	0x20000988
 8006d64:	20000e70 	.word	0x20000e70

08006d68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d70:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <vTaskInternalSetTimeOutState+0x24>)
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d78:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <vTaskInternalSetTimeOutState+0x28>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	605a      	str	r2, [r3, #4]
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	20000e74 	.word	0x20000e74
 8006d90:	20000e60 	.word	0x20000e60

08006d94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	613b      	str	r3, [r7, #16]
}
 8006db6:	bf00      	nop
 8006db8:	e7fe      	b.n	8006db8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	60fb      	str	r3, [r7, #12]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006dd6:	f000 fe09 	bl	80079ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006dda:	4b1d      	ldr	r3, [pc, #116]	; (8006e50 <xTaskCheckForTimeOut+0xbc>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006df2:	d102      	bne.n	8006dfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	61fb      	str	r3, [r7, #28]
 8006df8:	e023      	b.n	8006e42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	4b15      	ldr	r3, [pc, #84]	; (8006e54 <xTaskCheckForTimeOut+0xc0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d007      	beq.n	8006e16 <xTaskCheckForTimeOut+0x82>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d302      	bcc.n	8006e16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e10:	2301      	movs	r3, #1
 8006e12:	61fb      	str	r3, [r7, #28]
 8006e14:	e015      	b.n	8006e42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d20b      	bcs.n	8006e38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	1ad2      	subs	r2, r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff ff9b 	bl	8006d68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61fb      	str	r3, [r7, #28]
 8006e36:	e004      	b.n	8006e42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e42:	f000 fe03 	bl	8007a4c <vPortExitCritical>

	return xReturn;
 8006e46:	69fb      	ldr	r3, [r7, #28]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3720      	adds	r7, #32
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20000e60 	.word	0x20000e60
 8006e54:	20000e74 	.word	0x20000e74

08006e58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e5c:	4b03      	ldr	r3, [pc, #12]	; (8006e6c <vTaskMissedYield+0x14>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	601a      	str	r2, [r3, #0]
}
 8006e62:	bf00      	nop
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bc80      	pop	{r7}
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20000e70 	.word	0x20000e70

08006e70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e78:	f000 f852 	bl	8006f20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e7c:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <prvIdleTask+0x28>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d9f9      	bls.n	8006e78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e84:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <prvIdleTask+0x2c>)
 8006e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e94:	e7f0      	b.n	8006e78 <prvIdleTask+0x8>
 8006e96:	bf00      	nop
 8006e98:	2000098c 	.word	0x2000098c
 8006e9c:	e000ed04 	.word	0xe000ed04

08006ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	607b      	str	r3, [r7, #4]
 8006eaa:	e00c      	b.n	8006ec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4a12      	ldr	r2, [pc, #72]	; (8006f00 <prvInitialiseTaskLists+0x60>)
 8006eb8:	4413      	add	r3, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fcdc 	bl	8005878 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	607b      	str	r3, [r7, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b37      	cmp	r3, #55	; 0x37
 8006eca:	d9ef      	bls.n	8006eac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ecc:	480d      	ldr	r0, [pc, #52]	; (8006f04 <prvInitialiseTaskLists+0x64>)
 8006ece:	f7fe fcd3 	bl	8005878 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ed2:	480d      	ldr	r0, [pc, #52]	; (8006f08 <prvInitialiseTaskLists+0x68>)
 8006ed4:	f7fe fcd0 	bl	8005878 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ed8:	480c      	ldr	r0, [pc, #48]	; (8006f0c <prvInitialiseTaskLists+0x6c>)
 8006eda:	f7fe fccd 	bl	8005878 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ede:	480c      	ldr	r0, [pc, #48]	; (8006f10 <prvInitialiseTaskLists+0x70>)
 8006ee0:	f7fe fcca 	bl	8005878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ee4:	480b      	ldr	r0, [pc, #44]	; (8006f14 <prvInitialiseTaskLists+0x74>)
 8006ee6:	f7fe fcc7 	bl	8005878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006eea:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <prvInitialiseTaskLists+0x78>)
 8006eec:	4a05      	ldr	r2, [pc, #20]	; (8006f04 <prvInitialiseTaskLists+0x64>)
 8006eee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <prvInitialiseTaskLists+0x7c>)
 8006ef2:	4a05      	ldr	r2, [pc, #20]	; (8006f08 <prvInitialiseTaskLists+0x68>)
 8006ef4:	601a      	str	r2, [r3, #0]
}
 8006ef6:	bf00      	nop
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	2000098c 	.word	0x2000098c
 8006f04:	20000dec 	.word	0x20000dec
 8006f08:	20000e00 	.word	0x20000e00
 8006f0c:	20000e1c 	.word	0x20000e1c
 8006f10:	20000e30 	.word	0x20000e30
 8006f14:	20000e48 	.word	0x20000e48
 8006f18:	20000e14 	.word	0x20000e14
 8006f1c:	20000e18 	.word	0x20000e18

08006f20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f26:	e019      	b.n	8006f5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f28:	f000 fd60 	bl	80079ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006f2c:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <prvCheckTasksWaitingTermination+0x50>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3304      	adds	r3, #4
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe fd23 	bl	8005984 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f3e:	4b0d      	ldr	r3, [pc, #52]	; (8006f74 <prvCheckTasksWaitingTermination+0x54>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	4a0b      	ldr	r2, [pc, #44]	; (8006f74 <prvCheckTasksWaitingTermination+0x54>)
 8006f46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f48:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <prvCheckTasksWaitingTermination+0x58>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	4a0a      	ldr	r2, [pc, #40]	; (8006f78 <prvCheckTasksWaitingTermination+0x58>)
 8006f50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f52:	f000 fd7b 	bl	8007a4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f810 	bl	8006f7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f5c:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <prvCheckTasksWaitingTermination+0x58>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e1      	bne.n	8006f28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20000e30 	.word	0x20000e30
 8006f74:	20000e5c 	.word	0x20000e5c
 8006f78:	20000e44 	.word	0x20000e44

08006f7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3354      	adds	r3, #84	; 0x54
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 fe21 	bl	8008bd0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d108      	bne.n	8006faa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fee9 	bl	8007d74 <vPortFree>
				vPortFree( pxTCB );
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fee6 	bl	8007d74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fa8:	e018      	b.n	8006fdc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d103      	bne.n	8006fbc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fedd 	bl	8007d74 <vPortFree>
	}
 8006fba:	e00f      	b.n	8006fdc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d00a      	beq.n	8006fdc <prvDeleteTCB+0x60>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	60fb      	str	r3, [r7, #12]
}
 8006fd8:	bf00      	nop
 8006fda:	e7fe      	b.n	8006fda <prvDeleteTCB+0x5e>
	}
 8006fdc:	bf00      	nop
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fea:	4b0e      	ldr	r3, [pc, #56]	; (8007024 <prvResetNextTaskUnblockTime+0x40>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <prvResetNextTaskUnblockTime+0x14>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e000      	b.n	8006ffa <prvResetNextTaskUnblockTime+0x16>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d004      	beq.n	8007008 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ffe:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <prvResetNextTaskUnblockTime+0x44>)
 8007000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007004:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007006:	e008      	b.n	800701a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007008:	4b06      	ldr	r3, [pc, #24]	; (8007024 <prvResetNextTaskUnblockTime+0x40>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	4a04      	ldr	r2, [pc, #16]	; (8007028 <prvResetNextTaskUnblockTime+0x44>)
 8007018:	6013      	str	r3, [r2, #0]
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr
 8007024:	20000e14 	.word	0x20000e14
 8007028:	20000e7c 	.word	0x20000e7c

0800702c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007032:	4b0b      	ldr	r3, [pc, #44]	; (8007060 <xTaskGetSchedulerState+0x34>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d102      	bne.n	8007040 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800703a:	2301      	movs	r3, #1
 800703c:	607b      	str	r3, [r7, #4]
 800703e:	e008      	b.n	8007052 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007040:	4b08      	ldr	r3, [pc, #32]	; (8007064 <xTaskGetSchedulerState+0x38>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d102      	bne.n	800704e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007048:	2302      	movs	r3, #2
 800704a:	607b      	str	r3, [r7, #4]
 800704c:	e001      	b.n	8007052 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800704e:	2300      	movs	r3, #0
 8007050:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007052:	687b      	ldr	r3, [r7, #4]
	}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	bc80      	pop	{r7}
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	20000e68 	.word	0x20000e68
 8007064:	20000e84 	.word	0x20000e84

08007068 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007074:	2300      	movs	r3, #0
 8007076:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d056      	beq.n	800712c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800707e:	4b2e      	ldr	r3, [pc, #184]	; (8007138 <xTaskPriorityDisinherit+0xd0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	429a      	cmp	r2, r3
 8007086:	d00a      	beq.n	800709e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	60fb      	str	r3, [r7, #12]
}
 800709a:	bf00      	nop
 800709c:	e7fe      	b.n	800709c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10a      	bne.n	80070bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	60bb      	str	r3, [r7, #8]
}
 80070b8:	bf00      	nop
 80070ba:	e7fe      	b.n	80070ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c0:	1e5a      	subs	r2, r3, #1
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d02c      	beq.n	800712c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d128      	bne.n	800712c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	3304      	adds	r3, #4
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fc50 	bl	8005984 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fc:	4b0f      	ldr	r3, [pc, #60]	; (800713c <xTaskPriorityDisinherit+0xd4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d903      	bls.n	800710c <xTaskPriorityDisinherit+0xa4>
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	4a0c      	ldr	r2, [pc, #48]	; (800713c <xTaskPriorityDisinherit+0xd4>)
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4a09      	ldr	r2, [pc, #36]	; (8007140 <xTaskPriorityDisinherit+0xd8>)
 800711a:	441a      	add	r2, r3
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	3304      	adds	r3, #4
 8007120:	4619      	mov	r1, r3
 8007122:	4610      	mov	r0, r2
 8007124:	f7fe fbd3 	bl	80058ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007128:	2301      	movs	r3, #1
 800712a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800712c:	697b      	ldr	r3, [r7, #20]
	}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20000988 	.word	0x20000988
 800713c:	20000e64 	.word	0x20000e64
 8007140:	2000098c 	.word	0x2000098c

08007144 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800714e:	4b21      	ldr	r3, [pc, #132]	; (80071d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007154:	4b20      	ldr	r3, [pc, #128]	; (80071d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3304      	adds	r3, #4
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fc12 	bl	8005984 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007166:	d10a      	bne.n	800717e <prvAddCurrentTaskToDelayedList+0x3a>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d007      	beq.n	800717e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800716e:	4b1a      	ldr	r3, [pc, #104]	; (80071d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3304      	adds	r3, #4
 8007174:	4619      	mov	r1, r3
 8007176:	4819      	ldr	r0, [pc, #100]	; (80071dc <prvAddCurrentTaskToDelayedList+0x98>)
 8007178:	f7fe fba9 	bl	80058ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800717c:	e026      	b.n	80071cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4413      	add	r3, r2
 8007184:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007186:	4b14      	ldr	r3, [pc, #80]	; (80071d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	429a      	cmp	r2, r3
 8007194:	d209      	bcs.n	80071aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007196:	4b12      	ldr	r3, [pc, #72]	; (80071e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	4b0f      	ldr	r3, [pc, #60]	; (80071d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3304      	adds	r3, #4
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f7fe fbb6 	bl	8005914 <vListInsert>
}
 80071a8:	e010      	b.n	80071cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071aa:	4b0e      	ldr	r3, [pc, #56]	; (80071e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f7fe fbac 	bl	8005914 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80071bc:	4b0a      	ldr	r3, [pc, #40]	; (80071e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d202      	bcs.n	80071cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80071c6:	4a08      	ldr	r2, [pc, #32]	; (80071e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	6013      	str	r3, [r2, #0]
}
 80071cc:	bf00      	nop
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20000e60 	.word	0x20000e60
 80071d8:	20000988 	.word	0x20000988
 80071dc:	20000e48 	.word	0x20000e48
 80071e0:	20000e18 	.word	0x20000e18
 80071e4:	20000e14 	.word	0x20000e14
 80071e8:	20000e7c 	.word	0x20000e7c

080071ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08a      	sub	sp, #40	; 0x28
 80071f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80071f6:	f000 facb 	bl	8007790 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80071fa:	4b1c      	ldr	r3, [pc, #112]	; (800726c <xTimerCreateTimerTask+0x80>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d021      	beq.n	8007246 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007206:	2300      	movs	r3, #0
 8007208:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800720a:	1d3a      	adds	r2, r7, #4
 800720c:	f107 0108 	add.w	r1, r7, #8
 8007210:	f107 030c 	add.w	r3, r7, #12
 8007214:	4618      	mov	r0, r3
 8007216:	f7fe fb15 	bl	8005844 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800721a:	6879      	ldr	r1, [r7, #4]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	9202      	str	r2, [sp, #8]
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	2302      	movs	r3, #2
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	2300      	movs	r3, #0
 800722a:	460a      	mov	r2, r1
 800722c:	4910      	ldr	r1, [pc, #64]	; (8007270 <xTimerCreateTimerTask+0x84>)
 800722e:	4811      	ldr	r0, [pc, #68]	; (8007274 <xTimerCreateTimerTask+0x88>)
 8007230:	f7ff f8b6 	bl	80063a0 <xTaskCreateStatic>
 8007234:	4603      	mov	r3, r0
 8007236:	4a10      	ldr	r2, [pc, #64]	; (8007278 <xTimerCreateTimerTask+0x8c>)
 8007238:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800723a:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <xTimerCreateTimerTask+0x8c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007242:	2301      	movs	r3, #1
 8007244:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10a      	bne.n	8007262 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	613b      	str	r3, [r7, #16]
}
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007262:	697b      	ldr	r3, [r7, #20]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000eb8 	.word	0x20000eb8
 8007270:	0800afb4 	.word	0x0800afb4
 8007274:	08007399 	.word	0x08007399
 8007278:	20000ebc 	.word	0x20000ebc

0800727c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08a      	sub	sp, #40	; 0x28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800728a:	2300      	movs	r3, #0
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10a      	bne.n	80072aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	623b      	str	r3, [r7, #32]
}
 80072a6:	bf00      	nop
 80072a8:	e7fe      	b.n	80072a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80072aa:	4b1a      	ldr	r3, [pc, #104]	; (8007314 <xTimerGenericCommand+0x98>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d02a      	beq.n	8007308 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b05      	cmp	r3, #5
 80072c2:	dc18      	bgt.n	80072f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80072c4:	f7ff feb2 	bl	800702c <xTaskGetSchedulerState>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d109      	bne.n	80072e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80072ce:	4b11      	ldr	r3, [pc, #68]	; (8007314 <xTimerGenericCommand+0x98>)
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	f107 0110 	add.w	r1, r7, #16
 80072d6:	2300      	movs	r3, #0
 80072d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072da:	f7fe fc7f 	bl	8005bdc <xQueueGenericSend>
 80072de:	6278      	str	r0, [r7, #36]	; 0x24
 80072e0:	e012      	b.n	8007308 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80072e2:	4b0c      	ldr	r3, [pc, #48]	; (8007314 <xTimerGenericCommand+0x98>)
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	f107 0110 	add.w	r1, r7, #16
 80072ea:	2300      	movs	r3, #0
 80072ec:	2200      	movs	r2, #0
 80072ee:	f7fe fc75 	bl	8005bdc <xQueueGenericSend>
 80072f2:	6278      	str	r0, [r7, #36]	; 0x24
 80072f4:	e008      	b.n	8007308 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80072f6:	4b07      	ldr	r3, [pc, #28]	; (8007314 <xTimerGenericCommand+0x98>)
 80072f8:	6818      	ldr	r0, [r3, #0]
 80072fa:	f107 0110 	add.w	r1, r7, #16
 80072fe:	2300      	movs	r3, #0
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	f7fe fd69 	bl	8005dd8 <xQueueGenericSendFromISR>
 8007306:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800730a:	4618      	mov	r0, r3
 800730c:	3728      	adds	r7, #40	; 0x28
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20000eb8 	.word	0x20000eb8

08007318 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b088      	sub	sp, #32
 800731c:	af02      	add	r7, sp, #8
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007322:	4b1c      	ldr	r3, [pc, #112]	; (8007394 <prvProcessExpiredTimer+0x7c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	3304      	adds	r3, #4
 8007330:	4618      	mov	r0, r3
 8007332:	f7fe fb27 	bl	8005984 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d122      	bne.n	8007384 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	699a      	ldr	r2, [r3, #24]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	18d1      	adds	r1, r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	6978      	ldr	r0, [r7, #20]
 800734c:	f000 f8c8 	bl	80074e0 <prvInsertTimerInActiveList>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d016      	beq.n	8007384 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007356:	2300      	movs	r3, #0
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	2300      	movs	r3, #0
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	2100      	movs	r1, #0
 8007360:	6978      	ldr	r0, [r7, #20]
 8007362:	f7ff ff8b 	bl	800727c <xTimerGenericCommand>
 8007366:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10a      	bne.n	8007384 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	60fb      	str	r3, [r7, #12]
}
 8007380:	bf00      	nop
 8007382:	e7fe      	b.n	8007382 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	6978      	ldr	r0, [r7, #20]
 800738a:	4798      	blx	r3
}
 800738c:	bf00      	nop
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	20000eb0 	.word	0x20000eb0

08007398 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073a0:	f107 0308 	add.w	r3, r7, #8
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 f857 	bl	8007458 <prvGetNextExpireTime>
 80073aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	4619      	mov	r1, r3
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 f803 	bl	80073bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80073b6:	f000 f8d5 	bl	8007564 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073ba:	e7f1      	b.n	80073a0 <prvTimerTask+0x8>

080073bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80073c6:	f7ff fa3f 	bl	8006848 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073ca:	f107 0308 	add.w	r3, r7, #8
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 f866 	bl	80074a0 <prvSampleTimeNow>
 80073d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d130      	bne.n	800743e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <prvProcessTimerOrBlockTask+0x3c>
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d806      	bhi.n	80073f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80073ea:	f7ff fa3b 	bl	8006864 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80073ee:	68f9      	ldr	r1, [r7, #12]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff ff91 	bl	8007318 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80073f6:	e024      	b.n	8007442 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d008      	beq.n	8007410 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073fe:	4b13      	ldr	r3, [pc, #76]	; (800744c <prvProcessTimerOrBlockTask+0x90>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	bf0c      	ite	eq
 8007408:	2301      	moveq	r3, #1
 800740a:	2300      	movne	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007410:	4b0f      	ldr	r3, [pc, #60]	; (8007450 <prvProcessTimerOrBlockTask+0x94>)
 8007412:	6818      	ldr	r0, [r3, #0]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	4619      	mov	r1, r3
 800741e:	f7fe ff8b 	bl	8006338 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007422:	f7ff fa1f 	bl	8006864 <xTaskResumeAll>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10a      	bne.n	8007442 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800742c:	4b09      	ldr	r3, [pc, #36]	; (8007454 <prvProcessTimerOrBlockTask+0x98>)
 800742e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	f3bf 8f6f 	isb	sy
}
 800743c:	e001      	b.n	8007442 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800743e:	f7ff fa11 	bl	8006864 <xTaskResumeAll>
}
 8007442:	bf00      	nop
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	20000eb4 	.word	0x20000eb4
 8007450:	20000eb8 	.word	0x20000eb8
 8007454:	e000ed04 	.word	0xe000ed04

08007458 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007460:	4b0e      	ldr	r3, [pc, #56]	; (800749c <prvGetNextExpireTime+0x44>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	bf0c      	ite	eq
 800746a:	2301      	moveq	r3, #1
 800746c:	2300      	movne	r3, #0
 800746e:	b2db      	uxtb	r3, r3
 8007470:	461a      	mov	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d105      	bne.n	800748a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800747e:	4b07      	ldr	r3, [pc, #28]	; (800749c <prvGetNextExpireTime+0x44>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	e001      	b.n	800748e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800748e:	68fb      	ldr	r3, [r7, #12]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	bc80      	pop	{r7}
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	20000eb0 	.word	0x20000eb0

080074a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80074a8:	f7ff fa7a 	bl	80069a0 <xTaskGetTickCount>
 80074ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80074ae:	4b0b      	ldr	r3, [pc, #44]	; (80074dc <prvSampleTimeNow+0x3c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d205      	bcs.n	80074c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80074b8:	f000 f908 	bl	80076cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	e002      	b.n	80074ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80074ca:	4a04      	ldr	r2, [pc, #16]	; (80074dc <prvSampleTimeNow+0x3c>)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80074d0:	68fb      	ldr	r3, [r7, #12]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20000ec0 	.word	0x20000ec0

080074e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80074ee:	2300      	movs	r3, #0
 80074f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	429a      	cmp	r2, r3
 8007504:	d812      	bhi.n	800752c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	1ad2      	subs	r2, r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	429a      	cmp	r2, r3
 8007512:	d302      	bcc.n	800751a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007514:	2301      	movs	r3, #1
 8007516:	617b      	str	r3, [r7, #20]
 8007518:	e01b      	b.n	8007552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800751a:	4b10      	ldr	r3, [pc, #64]	; (800755c <prvInsertTimerInActiveList+0x7c>)
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3304      	adds	r3, #4
 8007522:	4619      	mov	r1, r3
 8007524:	4610      	mov	r0, r2
 8007526:	f7fe f9f5 	bl	8005914 <vListInsert>
 800752a:	e012      	b.n	8007552 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	d206      	bcs.n	8007542 <prvInsertTimerInActiveList+0x62>
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d302      	bcc.n	8007542 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800753c:	2301      	movs	r3, #1
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	e007      	b.n	8007552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007542:	4b07      	ldr	r3, [pc, #28]	; (8007560 <prvInsertTimerInActiveList+0x80>)
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3304      	adds	r3, #4
 800754a:	4619      	mov	r1, r3
 800754c:	4610      	mov	r0, r2
 800754e:	f7fe f9e1 	bl	8005914 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007552:	697b      	ldr	r3, [r7, #20]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3718      	adds	r7, #24
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20000eb4 	.word	0x20000eb4
 8007560:	20000eb0 	.word	0x20000eb0

08007564 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b08e      	sub	sp, #56	; 0x38
 8007568:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800756a:	e09d      	b.n	80076a8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	da18      	bge.n	80075a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007572:	1d3b      	adds	r3, r7, #4
 8007574:	3304      	adds	r3, #4
 8007576:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10a      	bne.n	8007594 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	61fb      	str	r3, [r7, #28]
}
 8007590:	bf00      	nop
 8007592:	e7fe      	b.n	8007592 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800759a:	6850      	ldr	r0, [r2, #4]
 800759c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800759e:	6892      	ldr	r2, [r2, #8]
 80075a0:	4611      	mov	r1, r2
 80075a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	db7d      	blt.n	80076a6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d004      	beq.n	80075c0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b8:	3304      	adds	r3, #4
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe f9e2 	bl	8005984 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075c0:	463b      	mov	r3, r7
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7ff ff6c 	bl	80074a0 <prvSampleTimeNow>
 80075c8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b09      	cmp	r3, #9
 80075ce:	d86b      	bhi.n	80076a8 <prvProcessReceivedCommands+0x144>
 80075d0:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <prvProcessReceivedCommands+0x74>)
 80075d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d6:	bf00      	nop
 80075d8:	08007601 	.word	0x08007601
 80075dc:	08007601 	.word	0x08007601
 80075e0:	08007601 	.word	0x08007601
 80075e4:	080076a9 	.word	0x080076a9
 80075e8:	0800765d 	.word	0x0800765d
 80075ec:	08007695 	.word	0x08007695
 80075f0:	08007601 	.word	0x08007601
 80075f4:	08007601 	.word	0x08007601
 80075f8:	080076a9 	.word	0x080076a9
 80075fc:	0800765d 	.word	0x0800765d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	18d1      	adds	r1, r2, r3
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800760c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800760e:	f7ff ff67 	bl	80074e0 <prvInsertTimerInActiveList>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d047      	beq.n	80076a8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800761e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d13f      	bne.n	80076a8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	441a      	add	r2, r3
 8007630:	2300      	movs	r3, #0
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	2300      	movs	r3, #0
 8007636:	2100      	movs	r1, #0
 8007638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800763a:	f7ff fe1f 	bl	800727c <xTimerGenericCommand>
 800763e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d130      	bne.n	80076a8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	61bb      	str	r3, [r7, #24]
}
 8007658:	bf00      	nop
 800765a:	e7fe      	b.n	800765a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007660:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	617b      	str	r3, [r7, #20]
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007682:	699a      	ldr	r2, [r3, #24]
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	18d1      	adds	r1, r2, r3
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800768c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800768e:	f7ff ff27 	bl	80074e0 <prvInsertTimerInActiveList>
					break;
 8007692:	e009      	b.n	80076a8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007696:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800769a:	2b00      	cmp	r3, #0
 800769c:	d104      	bne.n	80076a8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800769e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076a0:	f000 fb68 	bl	8007d74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80076a4:	e000      	b.n	80076a8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80076a6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076a8:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <prvProcessReceivedCommands+0x164>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	1d39      	adds	r1, r7, #4
 80076ae:	2200      	movs	r2, #0
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fe fc29 	bl	8005f08 <xQueueReceive>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f47f af57 	bne.w	800756c <prvProcessReceivedCommands+0x8>
	}
}
 80076be:	bf00      	nop
 80076c0:	bf00      	nop
 80076c2:	3730      	adds	r7, #48	; 0x30
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20000eb8 	.word	0x20000eb8

080076cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076d2:	e045      	b.n	8007760 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076d4:	4b2c      	ldr	r3, [pc, #176]	; (8007788 <prvSwitchTimerLists+0xbc>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076de:	4b2a      	ldr	r3, [pc, #168]	; (8007788 <prvSwitchTimerLists+0xbc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3304      	adds	r3, #4
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fe f949 	bl	8005984 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d12e      	bne.n	8007760 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	4413      	add	r3, r2
 800770a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	429a      	cmp	r2, r3
 8007712:	d90e      	bls.n	8007732 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007720:	4b19      	ldr	r3, [pc, #100]	; (8007788 <prvSwitchTimerLists+0xbc>)
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3304      	adds	r3, #4
 8007728:	4619      	mov	r1, r3
 800772a:	4610      	mov	r0, r2
 800772c:	f7fe f8f2 	bl	8005914 <vListInsert>
 8007730:	e016      	b.n	8007760 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007732:	2300      	movs	r3, #0
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	2300      	movs	r3, #0
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	2100      	movs	r1, #0
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f7ff fd9d 	bl	800727c <xTimerGenericCommand>
 8007742:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <prvSwitchTimerLists+0x94>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	603b      	str	r3, [r7, #0]
}
 800775c:	bf00      	nop
 800775e:	e7fe      	b.n	800775e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007760:	4b09      	ldr	r3, [pc, #36]	; (8007788 <prvSwitchTimerLists+0xbc>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1b4      	bne.n	80076d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800776a:	4b07      	ldr	r3, [pc, #28]	; (8007788 <prvSwitchTimerLists+0xbc>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007770:	4b06      	ldr	r3, [pc, #24]	; (800778c <prvSwitchTimerLists+0xc0>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a04      	ldr	r2, [pc, #16]	; (8007788 <prvSwitchTimerLists+0xbc>)
 8007776:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007778:	4a04      	ldr	r2, [pc, #16]	; (800778c <prvSwitchTimerLists+0xc0>)
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	6013      	str	r3, [r2, #0]
}
 800777e:	bf00      	nop
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20000eb0 	.word	0x20000eb0
 800778c:	20000eb4 	.word	0x20000eb4

08007790 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007796:	f000 f929 	bl	80079ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800779a:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <prvCheckForValidListAndQueue+0x60>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d120      	bne.n	80077e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077a2:	4814      	ldr	r0, [pc, #80]	; (80077f4 <prvCheckForValidListAndQueue+0x64>)
 80077a4:	f7fe f868 	bl	8005878 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077a8:	4813      	ldr	r0, [pc, #76]	; (80077f8 <prvCheckForValidListAndQueue+0x68>)
 80077aa:	f7fe f865 	bl	8005878 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077ae:	4b13      	ldr	r3, [pc, #76]	; (80077fc <prvCheckForValidListAndQueue+0x6c>)
 80077b0:	4a10      	ldr	r2, [pc, #64]	; (80077f4 <prvCheckForValidListAndQueue+0x64>)
 80077b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077b4:	4b12      	ldr	r3, [pc, #72]	; (8007800 <prvCheckForValidListAndQueue+0x70>)
 80077b6:	4a10      	ldr	r2, [pc, #64]	; (80077f8 <prvCheckForValidListAndQueue+0x68>)
 80077b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077ba:	2300      	movs	r3, #0
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	4b11      	ldr	r3, [pc, #68]	; (8007804 <prvCheckForValidListAndQueue+0x74>)
 80077c0:	4a11      	ldr	r2, [pc, #68]	; (8007808 <prvCheckForValidListAndQueue+0x78>)
 80077c2:	2110      	movs	r1, #16
 80077c4:	200a      	movs	r0, #10
 80077c6:	f7fe f96f 	bl	8005aa8 <xQueueGenericCreateStatic>
 80077ca:	4603      	mov	r3, r0
 80077cc:	4a08      	ldr	r2, [pc, #32]	; (80077f0 <prvCheckForValidListAndQueue+0x60>)
 80077ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077d0:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <prvCheckForValidListAndQueue+0x60>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d005      	beq.n	80077e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077d8:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <prvCheckForValidListAndQueue+0x60>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	490b      	ldr	r1, [pc, #44]	; (800780c <prvCheckForValidListAndQueue+0x7c>)
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe fd82 	bl	80062e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077e4:	f000 f932 	bl	8007a4c <vPortExitCritical>
}
 80077e8:	bf00      	nop
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20000eb8 	.word	0x20000eb8
 80077f4:	20000e88 	.word	0x20000e88
 80077f8:	20000e9c 	.word	0x20000e9c
 80077fc:	20000eb0 	.word	0x20000eb0
 8007800:	20000eb4 	.word	0x20000eb4
 8007804:	20000f64 	.word	0x20000f64
 8007808:	20000ec4 	.word	0x20000ec4
 800780c:	0800afbc 	.word	0x0800afbc

08007810 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3b04      	subs	r3, #4
 8007820:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	3b04      	subs	r3, #4
 800782e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f023 0201 	bic.w	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3b04      	subs	r3, #4
 800783e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007840:	4a08      	ldr	r2, [pc, #32]	; (8007864 <pxPortInitialiseStack+0x54>)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3b14      	subs	r3, #20
 800784a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3b20      	subs	r3, #32
 8007856:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007858:	68fb      	ldr	r3, [r7, #12]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	bc80      	pop	{r7}
 8007862:	4770      	bx	lr
 8007864:	08007869 	.word	0x08007869

08007868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800786e:	2300      	movs	r3, #0
 8007870:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007872:	4b12      	ldr	r3, [pc, #72]	; (80078bc <prvTaskExitError+0x54>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800787a:	d00a      	beq.n	8007892 <prvTaskExitError+0x2a>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	60fb      	str	r3, [r7, #12]
}
 800788e:	bf00      	nop
 8007890:	e7fe      	b.n	8007890 <prvTaskExitError+0x28>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	60bb      	str	r3, [r7, #8]
}
 80078a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078a6:	bf00      	nop
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0fc      	beq.n	80078a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bc80      	pop	{r7}
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	20000014 	.word	0x20000014

080078c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078c0:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <pxCurrentTCBConst2>)
 80078c2:	6819      	ldr	r1, [r3, #0]
 80078c4:	6808      	ldr	r0, [r1, #0]
 80078c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80078ca:	f380 8809 	msr	PSP, r0
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f04f 0000 	mov.w	r0, #0
 80078d6:	f380 8811 	msr	BASEPRI, r0
 80078da:	f04e 0e0d 	orr.w	lr, lr, #13
 80078de:	4770      	bx	lr

080078e0 <pxCurrentTCBConst2>:
 80078e0:	20000988 	.word	0x20000988
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop

080078e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80078e8:	4806      	ldr	r0, [pc, #24]	; (8007904 <prvPortStartFirstTask+0x1c>)
 80078ea:	6800      	ldr	r0, [r0, #0]
 80078ec:	6800      	ldr	r0, [r0, #0]
 80078ee:	f380 8808 	msr	MSP, r0
 80078f2:	b662      	cpsie	i
 80078f4:	b661      	cpsie	f
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	df00      	svc	0
 8007900:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007902:	bf00      	nop
 8007904:	e000ed08 	.word	0xe000ed08

08007908 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800790e:	4b32      	ldr	r3, [pc, #200]	; (80079d8 <xPortStartScheduler+0xd0>)
 8007910:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	22ff      	movs	r2, #255	; 0xff
 800791e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	b2db      	uxtb	r3, r3
 8007926:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007928:	78fb      	ldrb	r3, [r7, #3]
 800792a:	b2db      	uxtb	r3, r3
 800792c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007930:	b2da      	uxtb	r2, r3
 8007932:	4b2a      	ldr	r3, [pc, #168]	; (80079dc <xPortStartScheduler+0xd4>)
 8007934:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007936:	4b2a      	ldr	r3, [pc, #168]	; (80079e0 <xPortStartScheduler+0xd8>)
 8007938:	2207      	movs	r2, #7
 800793a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800793c:	e009      	b.n	8007952 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800793e:	4b28      	ldr	r3, [pc, #160]	; (80079e0 <xPortStartScheduler+0xd8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3b01      	subs	r3, #1
 8007944:	4a26      	ldr	r2, [pc, #152]	; (80079e0 <xPortStartScheduler+0xd8>)
 8007946:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007948:	78fb      	ldrb	r3, [r7, #3]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	005b      	lsls	r3, r3, #1
 800794e:	b2db      	uxtb	r3, r3
 8007950:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007952:	78fb      	ldrb	r3, [r7, #3]
 8007954:	b2db      	uxtb	r3, r3
 8007956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800795a:	2b80      	cmp	r3, #128	; 0x80
 800795c:	d0ef      	beq.n	800793e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800795e:	4b20      	ldr	r3, [pc, #128]	; (80079e0 <xPortStartScheduler+0xd8>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f1c3 0307 	rsb	r3, r3, #7
 8007966:	2b04      	cmp	r3, #4
 8007968:	d00a      	beq.n	8007980 <xPortStartScheduler+0x78>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	60bb      	str	r3, [r7, #8]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007980:	4b17      	ldr	r3, [pc, #92]	; (80079e0 <xPortStartScheduler+0xd8>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	021b      	lsls	r3, r3, #8
 8007986:	4a16      	ldr	r2, [pc, #88]	; (80079e0 <xPortStartScheduler+0xd8>)
 8007988:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800798a:	4b15      	ldr	r3, [pc, #84]	; (80079e0 <xPortStartScheduler+0xd8>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007992:	4a13      	ldr	r2, [pc, #76]	; (80079e0 <xPortStartScheduler+0xd8>)
 8007994:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	b2da      	uxtb	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800799e:	4b11      	ldr	r3, [pc, #68]	; (80079e4 <xPortStartScheduler+0xdc>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a10      	ldr	r2, [pc, #64]	; (80079e4 <xPortStartScheduler+0xdc>)
 80079a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079aa:	4b0e      	ldr	r3, [pc, #56]	; (80079e4 <xPortStartScheduler+0xdc>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a0d      	ldr	r2, [pc, #52]	; (80079e4 <xPortStartScheduler+0xdc>)
 80079b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079b6:	f000 f8b9 	bl	8007b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079ba:	4b0b      	ldr	r3, [pc, #44]	; (80079e8 <xPortStartScheduler+0xe0>)
 80079bc:	2200      	movs	r2, #0
 80079be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079c0:	f7ff ff92 	bl	80078e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079c4:	f7ff f8b8 	bl	8006b38 <vTaskSwitchContext>
	prvTaskExitError();
 80079c8:	f7ff ff4e 	bl	8007868 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	e000e400 	.word	0xe000e400
 80079dc:	20000fb4 	.word	0x20000fb4
 80079e0:	20000fb8 	.word	0x20000fb8
 80079e4:	e000ed20 	.word	0xe000ed20
 80079e8:	20000014 	.word	0x20000014

080079ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
	__asm volatile
 80079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	607b      	str	r3, [r7, #4]
}
 8007a04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a06:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <vPortEnterCritical+0x58>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	4a0d      	ldr	r2, [pc, #52]	; (8007a44 <vPortEnterCritical+0x58>)
 8007a0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a10:	4b0c      	ldr	r3, [pc, #48]	; (8007a44 <vPortEnterCritical+0x58>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d10f      	bne.n	8007a38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a18:	4b0b      	ldr	r3, [pc, #44]	; (8007a48 <vPortEnterCritical+0x5c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	603b      	str	r3, [r7, #0]
}
 8007a34:	bf00      	nop
 8007a36:	e7fe      	b.n	8007a36 <vPortEnterCritical+0x4a>
	}
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bc80      	pop	{r7}
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	20000014 	.word	0x20000014
 8007a48:	e000ed04 	.word	0xe000ed04

08007a4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a52:	4b11      	ldr	r3, [pc, #68]	; (8007a98 <vPortExitCritical+0x4c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10a      	bne.n	8007a70 <vPortExitCritical+0x24>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	607b      	str	r3, [r7, #4]
}
 8007a6c:	bf00      	nop
 8007a6e:	e7fe      	b.n	8007a6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a70:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <vPortExitCritical+0x4c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	4a08      	ldr	r2, [pc, #32]	; (8007a98 <vPortExitCritical+0x4c>)
 8007a78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a7a:	4b07      	ldr	r3, [pc, #28]	; (8007a98 <vPortExitCritical+0x4c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d105      	bne.n	8007a8e <vPortExitCritical+0x42>
 8007a82:	2300      	movs	r3, #0
 8007a84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	f383 8811 	msr	BASEPRI, r3
}
 8007a8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bc80      	pop	{r7}
 8007a96:	4770      	bx	lr
 8007a98:	20000014 	.word	0x20000014
 8007a9c:	00000000 	.word	0x00000000

08007aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007aa0:	f3ef 8009 	mrs	r0, PSP
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	4b0d      	ldr	r3, [pc, #52]	; (8007ae0 <pxCurrentTCBConst>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007ab0:	6010      	str	r0, [r2, #0]
 8007ab2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007ab6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007aba:	f380 8811 	msr	BASEPRI, r0
 8007abe:	f7ff f83b 	bl	8006b38 <vTaskSwitchContext>
 8007ac2:	f04f 0000 	mov.w	r0, #0
 8007ac6:	f380 8811 	msr	BASEPRI, r0
 8007aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007ace:	6819      	ldr	r1, [r3, #0]
 8007ad0:	6808      	ldr	r0, [r1, #0]
 8007ad2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007ad6:	f380 8809 	msr	PSP, r0
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	4770      	bx	lr

08007ae0 <pxCurrentTCBConst>:
 8007ae0:	20000988 	.word	0x20000988
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop

08007ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	607b      	str	r3, [r7, #4]
}
 8007b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b02:	f7fe ff5b 	bl	80069bc <xTaskIncrementTick>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b0c:	4b06      	ldr	r3, [pc, #24]	; (8007b28 <SysTick_Handler+0x40>)
 8007b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	2300      	movs	r3, #0
 8007b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	f383 8811 	msr	BASEPRI, r3
}
 8007b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b20:	bf00      	nop
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	e000ed04 	.word	0xe000ed04

08007b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b30:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <vPortSetupTimerInterrupt+0x30>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b36:	4b0a      	ldr	r3, [pc, #40]	; (8007b60 <vPortSetupTimerInterrupt+0x34>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b3c:	4b09      	ldr	r3, [pc, #36]	; (8007b64 <vPortSetupTimerInterrupt+0x38>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a09      	ldr	r2, [pc, #36]	; (8007b68 <vPortSetupTimerInterrupt+0x3c>)
 8007b42:	fba2 2303 	umull	r2, r3, r2, r3
 8007b46:	099b      	lsrs	r3, r3, #6
 8007b48:	4a08      	ldr	r2, [pc, #32]	; (8007b6c <vPortSetupTimerInterrupt+0x40>)
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b4e:	4b03      	ldr	r3, [pc, #12]	; (8007b5c <vPortSetupTimerInterrupt+0x30>)
 8007b50:	2207      	movs	r2, #7
 8007b52:	601a      	str	r2, [r3, #0]
}
 8007b54:	bf00      	nop
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bc80      	pop	{r7}
 8007b5a:	4770      	bx	lr
 8007b5c:	e000e010 	.word	0xe000e010
 8007b60:	e000e018 	.word	0xe000e018
 8007b64:	20000008 	.word	0x20000008
 8007b68:	10624dd3 	.word	0x10624dd3
 8007b6c:	e000e014 	.word	0xe000e014

08007b70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b76:	f3ef 8305 	mrs	r3, IPSR
 8007b7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2b0f      	cmp	r3, #15
 8007b80:	d914      	bls.n	8007bac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b82:	4a16      	ldr	r2, [pc, #88]	; (8007bdc <vPortValidateInterruptPriority+0x6c>)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	4413      	add	r3, r2
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b8c:	4b14      	ldr	r3, [pc, #80]	; (8007be0 <vPortValidateInterruptPriority+0x70>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	7afa      	ldrb	r2, [r7, #11]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d20a      	bcs.n	8007bac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	607b      	str	r3, [r7, #4]
}
 8007ba8:	bf00      	nop
 8007baa:	e7fe      	b.n	8007baa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bac:	4b0d      	ldr	r3, [pc, #52]	; (8007be4 <vPortValidateInterruptPriority+0x74>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bb4:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <vPortValidateInterruptPriority+0x78>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d90a      	bls.n	8007bd2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	603b      	str	r3, [r7, #0]
}
 8007bce:	bf00      	nop
 8007bd0:	e7fe      	b.n	8007bd0 <vPortValidateInterruptPriority+0x60>
	}
 8007bd2:	bf00      	nop
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bc80      	pop	{r7}
 8007bda:	4770      	bx	lr
 8007bdc:	e000e3f0 	.word	0xe000e3f0
 8007be0:	20000fb4 	.word	0x20000fb4
 8007be4:	e000ed0c 	.word	0xe000ed0c
 8007be8:	20000fb8 	.word	0x20000fb8

08007bec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08a      	sub	sp, #40	; 0x28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007bf8:	f7fe fe26 	bl	8006848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007bfc:	4b58      	ldr	r3, [pc, #352]	; (8007d60 <pvPortMalloc+0x174>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c04:	f000 f910 	bl	8007e28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c08:	4b56      	ldr	r3, [pc, #344]	; (8007d64 <pvPortMalloc+0x178>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f040 808e 	bne.w	8007d32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d01d      	beq.n	8007c58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c1c:	2208      	movs	r2, #8
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4413      	add	r3, r2
 8007c22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d014      	beq.n	8007c58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f023 0307 	bic.w	r3, r3, #7
 8007c34:	3308      	adds	r3, #8
 8007c36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <pvPortMalloc+0x6c>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	617b      	str	r3, [r7, #20]
}
 8007c54:	bf00      	nop
 8007c56:	e7fe      	b.n	8007c56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d069      	beq.n	8007d32 <pvPortMalloc+0x146>
 8007c5e:	4b42      	ldr	r3, [pc, #264]	; (8007d68 <pvPortMalloc+0x17c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d864      	bhi.n	8007d32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c68:	4b40      	ldr	r3, [pc, #256]	; (8007d6c <pvPortMalloc+0x180>)
 8007c6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c6c:	4b3f      	ldr	r3, [pc, #252]	; (8007d6c <pvPortMalloc+0x180>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c72:	e004      	b.n	8007c7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d903      	bls.n	8007c90 <pvPortMalloc+0xa4>
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1f1      	bne.n	8007c74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c90:	4b33      	ldr	r3, [pc, #204]	; (8007d60 <pvPortMalloc+0x174>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d04b      	beq.n	8007d32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2208      	movs	r2, #8
 8007ca0:	4413      	add	r3, r2
 8007ca2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	1ad2      	subs	r2, r2, r3
 8007cb4:	2308      	movs	r3, #8
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d91f      	bls.n	8007cfc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <pvPortMalloc+0xf8>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	613b      	str	r3, [r7, #16]
}
 8007ce0:	bf00      	nop
 8007ce2:	e7fe      	b.n	8007ce2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	1ad2      	subs	r2, r2, r3
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cf6:	69b8      	ldr	r0, [r7, #24]
 8007cf8:	f000 f8f8 	bl	8007eec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007cfc:	4b1a      	ldr	r3, [pc, #104]	; (8007d68 <pvPortMalloc+0x17c>)
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	4a18      	ldr	r2, [pc, #96]	; (8007d68 <pvPortMalloc+0x17c>)
 8007d08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d0a:	4b17      	ldr	r3, [pc, #92]	; (8007d68 <pvPortMalloc+0x17c>)
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	4b18      	ldr	r3, [pc, #96]	; (8007d70 <pvPortMalloc+0x184>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d203      	bcs.n	8007d1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d16:	4b14      	ldr	r3, [pc, #80]	; (8007d68 <pvPortMalloc+0x17c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a15      	ldr	r2, [pc, #84]	; (8007d70 <pvPortMalloc+0x184>)
 8007d1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	4b10      	ldr	r3, [pc, #64]	; (8007d64 <pvPortMalloc+0x178>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	431a      	orrs	r2, r3
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d32:	f7fe fd97 	bl	8006864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <pvPortMalloc+0x16a>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	60fb      	str	r3, [r7, #12]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <pvPortMalloc+0x168>
	return pvReturn;
 8007d56:	69fb      	ldr	r3, [r7, #28]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3728      	adds	r7, #40	; 0x28
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	20001bc4 	.word	0x20001bc4
 8007d64:	20001bd0 	.word	0x20001bd0
 8007d68:	20001bc8 	.word	0x20001bc8
 8007d6c:	20001bbc 	.word	0x20001bbc
 8007d70:	20001bcc 	.word	0x20001bcc

08007d74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d048      	beq.n	8007e18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d86:	2308      	movs	r3, #8
 8007d88:	425b      	negs	r3, r3
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	4b21      	ldr	r3, [pc, #132]	; (8007e20 <vPortFree+0xac>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10a      	bne.n	8007db8 <vPortFree+0x44>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	60fb      	str	r3, [r7, #12]
}
 8007db4:	bf00      	nop
 8007db6:	e7fe      	b.n	8007db6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00a      	beq.n	8007dd6 <vPortFree+0x62>
	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	60bb      	str	r3, [r7, #8]
}
 8007dd2:	bf00      	nop
 8007dd4:	e7fe      	b.n	8007dd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <vPortFree+0xac>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4013      	ands	r3, r2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d019      	beq.n	8007e18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d115      	bne.n	8007e18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <vPortFree+0xac>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	43db      	mvns	r3, r3
 8007df6:	401a      	ands	r2, r3
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007dfc:	f7fe fd24 	bl	8006848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	4b07      	ldr	r3, [pc, #28]	; (8007e24 <vPortFree+0xb0>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4413      	add	r3, r2
 8007e0a:	4a06      	ldr	r2, [pc, #24]	; (8007e24 <vPortFree+0xb0>)
 8007e0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e0e:	6938      	ldr	r0, [r7, #16]
 8007e10:	f000 f86c 	bl	8007eec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007e14:	f7fe fd26 	bl	8006864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e18:	bf00      	nop
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20001bd0 	.word	0x20001bd0
 8007e24:	20001bc8 	.word	0x20001bc8

08007e28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007e32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e34:	4b27      	ldr	r3, [pc, #156]	; (8007ed4 <prvHeapInit+0xac>)
 8007e36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f003 0307 	and.w	r3, r3, #7
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00c      	beq.n	8007e5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3307      	adds	r3, #7
 8007e46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 0307 	bic.w	r3, r3, #7
 8007e4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	4a1f      	ldr	r2, [pc, #124]	; (8007ed4 <prvHeapInit+0xac>)
 8007e58:	4413      	add	r3, r2
 8007e5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e60:	4a1d      	ldr	r2, [pc, #116]	; (8007ed8 <prvHeapInit+0xb0>)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e66:	4b1c      	ldr	r3, [pc, #112]	; (8007ed8 <prvHeapInit+0xb0>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	4413      	add	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e74:	2208      	movs	r2, #8
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	1a9b      	subs	r3, r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 0307 	bic.w	r3, r3, #7
 8007e82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4a15      	ldr	r2, [pc, #84]	; (8007edc <prvHeapInit+0xb4>)
 8007e88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e8a:	4b14      	ldr	r3, [pc, #80]	; (8007edc <prvHeapInit+0xb4>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e92:	4b12      	ldr	r3, [pc, #72]	; (8007edc <prvHeapInit+0xb4>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2200      	movs	r2, #0
 8007e98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	1ad2      	subs	r2, r2, r3
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ea8:	4b0c      	ldr	r3, [pc, #48]	; (8007edc <prvHeapInit+0xb4>)
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	4a0a      	ldr	r2, [pc, #40]	; (8007ee0 <prvHeapInit+0xb8>)
 8007eb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	4a09      	ldr	r2, [pc, #36]	; (8007ee4 <prvHeapInit+0xbc>)
 8007ebe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ec0:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <prvHeapInit+0xc0>)
 8007ec2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ec6:	601a      	str	r2, [r3, #0]
}
 8007ec8:	bf00      	nop
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bc80      	pop	{r7}
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	20000fbc 	.word	0x20000fbc
 8007ed8:	20001bbc 	.word	0x20001bbc
 8007edc:	20001bc4 	.word	0x20001bc4
 8007ee0:	20001bcc 	.word	0x20001bcc
 8007ee4:	20001bc8 	.word	0x20001bc8
 8007ee8:	20001bd0 	.word	0x20001bd0

08007eec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ef4:	4b27      	ldr	r3, [pc, #156]	; (8007f94 <prvInsertBlockIntoFreeList+0xa8>)
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	e002      	b.n	8007f00 <prvInsertBlockIntoFreeList+0x14>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d8f7      	bhi.n	8007efa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	4413      	add	r3, r2
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d108      	bne.n	8007f2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	441a      	add	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	441a      	add	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d118      	bne.n	8007f74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	4b14      	ldr	r3, [pc, #80]	; (8007f98 <prvInsertBlockIntoFreeList+0xac>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d00d      	beq.n	8007f6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	441a      	add	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	e008      	b.n	8007f7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f6a:	4b0b      	ldr	r3, [pc, #44]	; (8007f98 <prvInsertBlockIntoFreeList+0xac>)
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	e003      	b.n	8007f7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d002      	beq.n	8007f8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f8a:	bf00      	nop
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bc80      	pop	{r7}
 8007f92:	4770      	bx	lr
 8007f94:	20001bbc 	.word	0x20001bbc
 8007f98:	20001bc4 	.word	0x20001bc4

08007f9c <__errno>:
 8007f9c:	4b01      	ldr	r3, [pc, #4]	; (8007fa4 <__errno+0x8>)
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	20000018 	.word	0x20000018

08007fa8 <std>:
 8007fa8:	2300      	movs	r3, #0
 8007faa:	b510      	push	{r4, lr}
 8007fac:	4604      	mov	r4, r0
 8007fae:	e9c0 3300 	strd	r3, r3, [r0]
 8007fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fb6:	6083      	str	r3, [r0, #8]
 8007fb8:	8181      	strh	r1, [r0, #12]
 8007fba:	6643      	str	r3, [r0, #100]	; 0x64
 8007fbc:	81c2      	strh	r2, [r0, #14]
 8007fbe:	6183      	str	r3, [r0, #24]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	2208      	movs	r2, #8
 8007fc4:	305c      	adds	r0, #92	; 0x5c
 8007fc6:	f000 f91a 	bl	80081fe <memset>
 8007fca:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <std+0x38>)
 8007fcc:	6224      	str	r4, [r4, #32]
 8007fce:	6263      	str	r3, [r4, #36]	; 0x24
 8007fd0:	4b04      	ldr	r3, [pc, #16]	; (8007fe4 <std+0x3c>)
 8007fd2:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fd4:	4b04      	ldr	r3, [pc, #16]	; (8007fe8 <std+0x40>)
 8007fd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fd8:	4b04      	ldr	r3, [pc, #16]	; (8007fec <std+0x44>)
 8007fda:	6323      	str	r3, [r4, #48]	; 0x30
 8007fdc:	bd10      	pop	{r4, pc}
 8007fde:	bf00      	nop
 8007fe0:	08008ce9 	.word	0x08008ce9
 8007fe4:	08008d0b 	.word	0x08008d0b
 8007fe8:	08008d43 	.word	0x08008d43
 8007fec:	08008d67 	.word	0x08008d67

08007ff0 <_cleanup_r>:
 8007ff0:	4901      	ldr	r1, [pc, #4]	; (8007ff8 <_cleanup_r+0x8>)
 8007ff2:	f000 b8af 	b.w	8008154 <_fwalk_reent>
 8007ff6:	bf00      	nop
 8007ff8:	08009bb9 	.word	0x08009bb9

08007ffc <__sfmoreglue>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	2568      	movs	r5, #104	; 0x68
 8008000:	1e4a      	subs	r2, r1, #1
 8008002:	4355      	muls	r5, r2
 8008004:	460e      	mov	r6, r1
 8008006:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800800a:	f000 f901 	bl	8008210 <_malloc_r>
 800800e:	4604      	mov	r4, r0
 8008010:	b140      	cbz	r0, 8008024 <__sfmoreglue+0x28>
 8008012:	2100      	movs	r1, #0
 8008014:	e9c0 1600 	strd	r1, r6, [r0]
 8008018:	300c      	adds	r0, #12
 800801a:	60a0      	str	r0, [r4, #8]
 800801c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008020:	f000 f8ed 	bl	80081fe <memset>
 8008024:	4620      	mov	r0, r4
 8008026:	bd70      	pop	{r4, r5, r6, pc}

08008028 <__sfp_lock_acquire>:
 8008028:	4801      	ldr	r0, [pc, #4]	; (8008030 <__sfp_lock_acquire+0x8>)
 800802a:	f000 b8d8 	b.w	80081de <__retarget_lock_acquire_recursive>
 800802e:	bf00      	nop
 8008030:	20001dd8 	.word	0x20001dd8

08008034 <__sfp_lock_release>:
 8008034:	4801      	ldr	r0, [pc, #4]	; (800803c <__sfp_lock_release+0x8>)
 8008036:	f000 b8d3 	b.w	80081e0 <__retarget_lock_release_recursive>
 800803a:	bf00      	nop
 800803c:	20001dd8 	.word	0x20001dd8

08008040 <__sinit_lock_acquire>:
 8008040:	4801      	ldr	r0, [pc, #4]	; (8008048 <__sinit_lock_acquire+0x8>)
 8008042:	f000 b8cc 	b.w	80081de <__retarget_lock_acquire_recursive>
 8008046:	bf00      	nop
 8008048:	20001dd3 	.word	0x20001dd3

0800804c <__sinit_lock_release>:
 800804c:	4801      	ldr	r0, [pc, #4]	; (8008054 <__sinit_lock_release+0x8>)
 800804e:	f000 b8c7 	b.w	80081e0 <__retarget_lock_release_recursive>
 8008052:	bf00      	nop
 8008054:	20001dd3 	.word	0x20001dd3

08008058 <__sinit>:
 8008058:	b510      	push	{r4, lr}
 800805a:	4604      	mov	r4, r0
 800805c:	f7ff fff0 	bl	8008040 <__sinit_lock_acquire>
 8008060:	69a3      	ldr	r3, [r4, #24]
 8008062:	b11b      	cbz	r3, 800806c <__sinit+0x14>
 8008064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008068:	f7ff bff0 	b.w	800804c <__sinit_lock_release>
 800806c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008070:	6523      	str	r3, [r4, #80]	; 0x50
 8008072:	4b13      	ldr	r3, [pc, #76]	; (80080c0 <__sinit+0x68>)
 8008074:	4a13      	ldr	r2, [pc, #76]	; (80080c4 <__sinit+0x6c>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	62a2      	str	r2, [r4, #40]	; 0x28
 800807a:	42a3      	cmp	r3, r4
 800807c:	bf08      	it	eq
 800807e:	2301      	moveq	r3, #1
 8008080:	4620      	mov	r0, r4
 8008082:	bf08      	it	eq
 8008084:	61a3      	streq	r3, [r4, #24]
 8008086:	f000 f81f 	bl	80080c8 <__sfp>
 800808a:	6060      	str	r0, [r4, #4]
 800808c:	4620      	mov	r0, r4
 800808e:	f000 f81b 	bl	80080c8 <__sfp>
 8008092:	60a0      	str	r0, [r4, #8]
 8008094:	4620      	mov	r0, r4
 8008096:	f000 f817 	bl	80080c8 <__sfp>
 800809a:	2200      	movs	r2, #0
 800809c:	2104      	movs	r1, #4
 800809e:	60e0      	str	r0, [r4, #12]
 80080a0:	6860      	ldr	r0, [r4, #4]
 80080a2:	f7ff ff81 	bl	8007fa8 <std>
 80080a6:	2201      	movs	r2, #1
 80080a8:	2109      	movs	r1, #9
 80080aa:	68a0      	ldr	r0, [r4, #8]
 80080ac:	f7ff ff7c 	bl	8007fa8 <std>
 80080b0:	2202      	movs	r2, #2
 80080b2:	2112      	movs	r1, #18
 80080b4:	68e0      	ldr	r0, [r4, #12]
 80080b6:	f7ff ff77 	bl	8007fa8 <std>
 80080ba:	2301      	movs	r3, #1
 80080bc:	61a3      	str	r3, [r4, #24]
 80080be:	e7d1      	b.n	8008064 <__sinit+0xc>
 80080c0:	0800b0cc 	.word	0x0800b0cc
 80080c4:	08007ff1 	.word	0x08007ff1

080080c8 <__sfp>:
 80080c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ca:	4607      	mov	r7, r0
 80080cc:	f7ff ffac 	bl	8008028 <__sfp_lock_acquire>
 80080d0:	4b1e      	ldr	r3, [pc, #120]	; (800814c <__sfp+0x84>)
 80080d2:	681e      	ldr	r6, [r3, #0]
 80080d4:	69b3      	ldr	r3, [r6, #24]
 80080d6:	b913      	cbnz	r3, 80080de <__sfp+0x16>
 80080d8:	4630      	mov	r0, r6
 80080da:	f7ff ffbd 	bl	8008058 <__sinit>
 80080de:	3648      	adds	r6, #72	; 0x48
 80080e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	d503      	bpl.n	80080f0 <__sfp+0x28>
 80080e8:	6833      	ldr	r3, [r6, #0]
 80080ea:	b30b      	cbz	r3, 8008130 <__sfp+0x68>
 80080ec:	6836      	ldr	r6, [r6, #0]
 80080ee:	e7f7      	b.n	80080e0 <__sfp+0x18>
 80080f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080f4:	b9d5      	cbnz	r5, 800812c <__sfp+0x64>
 80080f6:	4b16      	ldr	r3, [pc, #88]	; (8008150 <__sfp+0x88>)
 80080f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080fc:	60e3      	str	r3, [r4, #12]
 80080fe:	6665      	str	r5, [r4, #100]	; 0x64
 8008100:	f000 f86c 	bl	80081dc <__retarget_lock_init_recursive>
 8008104:	f7ff ff96 	bl	8008034 <__sfp_lock_release>
 8008108:	2208      	movs	r2, #8
 800810a:	4629      	mov	r1, r5
 800810c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008110:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008114:	6025      	str	r5, [r4, #0]
 8008116:	61a5      	str	r5, [r4, #24]
 8008118:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800811c:	f000 f86f 	bl	80081fe <memset>
 8008120:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008124:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008128:	4620      	mov	r0, r4
 800812a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800812c:	3468      	adds	r4, #104	; 0x68
 800812e:	e7d9      	b.n	80080e4 <__sfp+0x1c>
 8008130:	2104      	movs	r1, #4
 8008132:	4638      	mov	r0, r7
 8008134:	f7ff ff62 	bl	8007ffc <__sfmoreglue>
 8008138:	4604      	mov	r4, r0
 800813a:	6030      	str	r0, [r6, #0]
 800813c:	2800      	cmp	r0, #0
 800813e:	d1d5      	bne.n	80080ec <__sfp+0x24>
 8008140:	f7ff ff78 	bl	8008034 <__sfp_lock_release>
 8008144:	230c      	movs	r3, #12
 8008146:	603b      	str	r3, [r7, #0]
 8008148:	e7ee      	b.n	8008128 <__sfp+0x60>
 800814a:	bf00      	nop
 800814c:	0800b0cc 	.word	0x0800b0cc
 8008150:	ffff0001 	.word	0xffff0001

08008154 <_fwalk_reent>:
 8008154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008158:	4606      	mov	r6, r0
 800815a:	4688      	mov	r8, r1
 800815c:	2700      	movs	r7, #0
 800815e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008162:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008166:	f1b9 0901 	subs.w	r9, r9, #1
 800816a:	d505      	bpl.n	8008178 <_fwalk_reent+0x24>
 800816c:	6824      	ldr	r4, [r4, #0]
 800816e:	2c00      	cmp	r4, #0
 8008170:	d1f7      	bne.n	8008162 <_fwalk_reent+0xe>
 8008172:	4638      	mov	r0, r7
 8008174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008178:	89ab      	ldrh	r3, [r5, #12]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d907      	bls.n	800818e <_fwalk_reent+0x3a>
 800817e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008182:	3301      	adds	r3, #1
 8008184:	d003      	beq.n	800818e <_fwalk_reent+0x3a>
 8008186:	4629      	mov	r1, r5
 8008188:	4630      	mov	r0, r6
 800818a:	47c0      	blx	r8
 800818c:	4307      	orrs	r7, r0
 800818e:	3568      	adds	r5, #104	; 0x68
 8008190:	e7e9      	b.n	8008166 <_fwalk_reent+0x12>
	...

08008194 <__libc_init_array>:
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	2600      	movs	r6, #0
 8008198:	4d0c      	ldr	r5, [pc, #48]	; (80081cc <__libc_init_array+0x38>)
 800819a:	4c0d      	ldr	r4, [pc, #52]	; (80081d0 <__libc_init_array+0x3c>)
 800819c:	1b64      	subs	r4, r4, r5
 800819e:	10a4      	asrs	r4, r4, #2
 80081a0:	42a6      	cmp	r6, r4
 80081a2:	d109      	bne.n	80081b8 <__libc_init_array+0x24>
 80081a4:	f002 fe46 	bl	800ae34 <_init>
 80081a8:	2600      	movs	r6, #0
 80081aa:	4d0a      	ldr	r5, [pc, #40]	; (80081d4 <__libc_init_array+0x40>)
 80081ac:	4c0a      	ldr	r4, [pc, #40]	; (80081d8 <__libc_init_array+0x44>)
 80081ae:	1b64      	subs	r4, r4, r5
 80081b0:	10a4      	asrs	r4, r4, #2
 80081b2:	42a6      	cmp	r6, r4
 80081b4:	d105      	bne.n	80081c2 <__libc_init_array+0x2e>
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081bc:	4798      	blx	r3
 80081be:	3601      	adds	r6, #1
 80081c0:	e7ee      	b.n	80081a0 <__libc_init_array+0xc>
 80081c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081c6:	4798      	blx	r3
 80081c8:	3601      	adds	r6, #1
 80081ca:	e7f2      	b.n	80081b2 <__libc_init_array+0x1e>
 80081cc:	0800b44c 	.word	0x0800b44c
 80081d0:	0800b44c 	.word	0x0800b44c
 80081d4:	0800b44c 	.word	0x0800b44c
 80081d8:	0800b450 	.word	0x0800b450

080081dc <__retarget_lock_init_recursive>:
 80081dc:	4770      	bx	lr

080081de <__retarget_lock_acquire_recursive>:
 80081de:	4770      	bx	lr

080081e0 <__retarget_lock_release_recursive>:
 80081e0:	4770      	bx	lr

080081e2 <memcpy>:
 80081e2:	440a      	add	r2, r1
 80081e4:	4291      	cmp	r1, r2
 80081e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80081ea:	d100      	bne.n	80081ee <memcpy+0xc>
 80081ec:	4770      	bx	lr
 80081ee:	b510      	push	{r4, lr}
 80081f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081f4:	4291      	cmp	r1, r2
 80081f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081fa:	d1f9      	bne.n	80081f0 <memcpy+0xe>
 80081fc:	bd10      	pop	{r4, pc}

080081fe <memset>:
 80081fe:	4603      	mov	r3, r0
 8008200:	4402      	add	r2, r0
 8008202:	4293      	cmp	r3, r2
 8008204:	d100      	bne.n	8008208 <memset+0xa>
 8008206:	4770      	bx	lr
 8008208:	f803 1b01 	strb.w	r1, [r3], #1
 800820c:	e7f9      	b.n	8008202 <memset+0x4>
	...

08008210 <_malloc_r>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	1ccd      	adds	r5, r1, #3
 8008214:	f025 0503 	bic.w	r5, r5, #3
 8008218:	3508      	adds	r5, #8
 800821a:	2d0c      	cmp	r5, #12
 800821c:	bf38      	it	cc
 800821e:	250c      	movcc	r5, #12
 8008220:	2d00      	cmp	r5, #0
 8008222:	4606      	mov	r6, r0
 8008224:	db01      	blt.n	800822a <_malloc_r+0x1a>
 8008226:	42a9      	cmp	r1, r5
 8008228:	d903      	bls.n	8008232 <_malloc_r+0x22>
 800822a:	230c      	movs	r3, #12
 800822c:	6033      	str	r3, [r6, #0]
 800822e:	2000      	movs	r0, #0
 8008230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008232:	f001 fd29 	bl	8009c88 <__malloc_lock>
 8008236:	4921      	ldr	r1, [pc, #132]	; (80082bc <_malloc_r+0xac>)
 8008238:	680a      	ldr	r2, [r1, #0]
 800823a:	4614      	mov	r4, r2
 800823c:	b99c      	cbnz	r4, 8008266 <_malloc_r+0x56>
 800823e:	4f20      	ldr	r7, [pc, #128]	; (80082c0 <_malloc_r+0xb0>)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	b923      	cbnz	r3, 800824e <_malloc_r+0x3e>
 8008244:	4621      	mov	r1, r4
 8008246:	4630      	mov	r0, r6
 8008248:	f000 fd1e 	bl	8008c88 <_sbrk_r>
 800824c:	6038      	str	r0, [r7, #0]
 800824e:	4629      	mov	r1, r5
 8008250:	4630      	mov	r0, r6
 8008252:	f000 fd19 	bl	8008c88 <_sbrk_r>
 8008256:	1c43      	adds	r3, r0, #1
 8008258:	d123      	bne.n	80082a2 <_malloc_r+0x92>
 800825a:	230c      	movs	r3, #12
 800825c:	4630      	mov	r0, r6
 800825e:	6033      	str	r3, [r6, #0]
 8008260:	f001 fd18 	bl	8009c94 <__malloc_unlock>
 8008264:	e7e3      	b.n	800822e <_malloc_r+0x1e>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	1b5b      	subs	r3, r3, r5
 800826a:	d417      	bmi.n	800829c <_malloc_r+0x8c>
 800826c:	2b0b      	cmp	r3, #11
 800826e:	d903      	bls.n	8008278 <_malloc_r+0x68>
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	441c      	add	r4, r3
 8008274:	6025      	str	r5, [r4, #0]
 8008276:	e004      	b.n	8008282 <_malloc_r+0x72>
 8008278:	6863      	ldr	r3, [r4, #4]
 800827a:	42a2      	cmp	r2, r4
 800827c:	bf0c      	ite	eq
 800827e:	600b      	streq	r3, [r1, #0]
 8008280:	6053      	strne	r3, [r2, #4]
 8008282:	4630      	mov	r0, r6
 8008284:	f001 fd06 	bl	8009c94 <__malloc_unlock>
 8008288:	f104 000b 	add.w	r0, r4, #11
 800828c:	1d23      	adds	r3, r4, #4
 800828e:	f020 0007 	bic.w	r0, r0, #7
 8008292:	1ac2      	subs	r2, r0, r3
 8008294:	d0cc      	beq.n	8008230 <_malloc_r+0x20>
 8008296:	1a1b      	subs	r3, r3, r0
 8008298:	50a3      	str	r3, [r4, r2]
 800829a:	e7c9      	b.n	8008230 <_malloc_r+0x20>
 800829c:	4622      	mov	r2, r4
 800829e:	6864      	ldr	r4, [r4, #4]
 80082a0:	e7cc      	b.n	800823c <_malloc_r+0x2c>
 80082a2:	1cc4      	adds	r4, r0, #3
 80082a4:	f024 0403 	bic.w	r4, r4, #3
 80082a8:	42a0      	cmp	r0, r4
 80082aa:	d0e3      	beq.n	8008274 <_malloc_r+0x64>
 80082ac:	1a21      	subs	r1, r4, r0
 80082ae:	4630      	mov	r0, r6
 80082b0:	f000 fcea 	bl	8008c88 <_sbrk_r>
 80082b4:	3001      	adds	r0, #1
 80082b6:	d1dd      	bne.n	8008274 <_malloc_r+0x64>
 80082b8:	e7cf      	b.n	800825a <_malloc_r+0x4a>
 80082ba:	bf00      	nop
 80082bc:	20001bd4 	.word	0x20001bd4
 80082c0:	20001bd8 	.word	0x20001bd8

080082c4 <__cvt>:
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ca:	461f      	mov	r7, r3
 80082cc:	bfbb      	ittet	lt
 80082ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80082d2:	461f      	movlt	r7, r3
 80082d4:	2300      	movge	r3, #0
 80082d6:	232d      	movlt	r3, #45	; 0x2d
 80082d8:	b088      	sub	sp, #32
 80082da:	4614      	mov	r4, r2
 80082dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80082e0:	7013      	strb	r3, [r2, #0]
 80082e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80082e8:	f023 0820 	bic.w	r8, r3, #32
 80082ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082f0:	d005      	beq.n	80082fe <__cvt+0x3a>
 80082f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80082f6:	d100      	bne.n	80082fa <__cvt+0x36>
 80082f8:	3501      	adds	r5, #1
 80082fa:	2302      	movs	r3, #2
 80082fc:	e000      	b.n	8008300 <__cvt+0x3c>
 80082fe:	2303      	movs	r3, #3
 8008300:	aa07      	add	r2, sp, #28
 8008302:	9204      	str	r2, [sp, #16]
 8008304:	aa06      	add	r2, sp, #24
 8008306:	e9cd a202 	strd	sl, r2, [sp, #8]
 800830a:	e9cd 3500 	strd	r3, r5, [sp]
 800830e:	4622      	mov	r2, r4
 8008310:	463b      	mov	r3, r7
 8008312:	f000 fddd 	bl	8008ed0 <_dtoa_r>
 8008316:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800831a:	4606      	mov	r6, r0
 800831c:	d102      	bne.n	8008324 <__cvt+0x60>
 800831e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008320:	07db      	lsls	r3, r3, #31
 8008322:	d522      	bpl.n	800836a <__cvt+0xa6>
 8008324:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008328:	eb06 0905 	add.w	r9, r6, r5
 800832c:	d110      	bne.n	8008350 <__cvt+0x8c>
 800832e:	7833      	ldrb	r3, [r6, #0]
 8008330:	2b30      	cmp	r3, #48	; 0x30
 8008332:	d10a      	bne.n	800834a <__cvt+0x86>
 8008334:	2200      	movs	r2, #0
 8008336:	2300      	movs	r3, #0
 8008338:	4620      	mov	r0, r4
 800833a:	4639      	mov	r1, r7
 800833c:	f7f8 fb3e 	bl	80009bc <__aeabi_dcmpeq>
 8008340:	b918      	cbnz	r0, 800834a <__cvt+0x86>
 8008342:	f1c5 0501 	rsb	r5, r5, #1
 8008346:	f8ca 5000 	str.w	r5, [sl]
 800834a:	f8da 3000 	ldr.w	r3, [sl]
 800834e:	4499      	add	r9, r3
 8008350:	2200      	movs	r2, #0
 8008352:	2300      	movs	r3, #0
 8008354:	4620      	mov	r0, r4
 8008356:	4639      	mov	r1, r7
 8008358:	f7f8 fb30 	bl	80009bc <__aeabi_dcmpeq>
 800835c:	b108      	cbz	r0, 8008362 <__cvt+0x9e>
 800835e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008362:	2230      	movs	r2, #48	; 0x30
 8008364:	9b07      	ldr	r3, [sp, #28]
 8008366:	454b      	cmp	r3, r9
 8008368:	d307      	bcc.n	800837a <__cvt+0xb6>
 800836a:	4630      	mov	r0, r6
 800836c:	9b07      	ldr	r3, [sp, #28]
 800836e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008370:	1b9b      	subs	r3, r3, r6
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	b008      	add	sp, #32
 8008376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800837a:	1c59      	adds	r1, r3, #1
 800837c:	9107      	str	r1, [sp, #28]
 800837e:	701a      	strb	r2, [r3, #0]
 8008380:	e7f0      	b.n	8008364 <__cvt+0xa0>

08008382 <__exponent>:
 8008382:	4603      	mov	r3, r0
 8008384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008386:	2900      	cmp	r1, #0
 8008388:	f803 2b02 	strb.w	r2, [r3], #2
 800838c:	bfb6      	itet	lt
 800838e:	222d      	movlt	r2, #45	; 0x2d
 8008390:	222b      	movge	r2, #43	; 0x2b
 8008392:	4249      	neglt	r1, r1
 8008394:	2909      	cmp	r1, #9
 8008396:	7042      	strb	r2, [r0, #1]
 8008398:	dd2b      	ble.n	80083f2 <__exponent+0x70>
 800839a:	f10d 0407 	add.w	r4, sp, #7
 800839e:	46a4      	mov	ip, r4
 80083a0:	270a      	movs	r7, #10
 80083a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80083a6:	460a      	mov	r2, r1
 80083a8:	46a6      	mov	lr, r4
 80083aa:	fb07 1516 	mls	r5, r7, r6, r1
 80083ae:	2a63      	cmp	r2, #99	; 0x63
 80083b0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80083b4:	4631      	mov	r1, r6
 80083b6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80083ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80083be:	dcf0      	bgt.n	80083a2 <__exponent+0x20>
 80083c0:	3130      	adds	r1, #48	; 0x30
 80083c2:	f1ae 0502 	sub.w	r5, lr, #2
 80083c6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80083ca:	4629      	mov	r1, r5
 80083cc:	1c44      	adds	r4, r0, #1
 80083ce:	4561      	cmp	r1, ip
 80083d0:	d30a      	bcc.n	80083e8 <__exponent+0x66>
 80083d2:	f10d 0209 	add.w	r2, sp, #9
 80083d6:	eba2 020e 	sub.w	r2, r2, lr
 80083da:	4565      	cmp	r5, ip
 80083dc:	bf88      	it	hi
 80083de:	2200      	movhi	r2, #0
 80083e0:	4413      	add	r3, r2
 80083e2:	1a18      	subs	r0, r3, r0
 80083e4:	b003      	add	sp, #12
 80083e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083ec:	f804 2f01 	strb.w	r2, [r4, #1]!
 80083f0:	e7ed      	b.n	80083ce <__exponent+0x4c>
 80083f2:	2330      	movs	r3, #48	; 0x30
 80083f4:	3130      	adds	r1, #48	; 0x30
 80083f6:	7083      	strb	r3, [r0, #2]
 80083f8:	70c1      	strb	r1, [r0, #3]
 80083fa:	1d03      	adds	r3, r0, #4
 80083fc:	e7f1      	b.n	80083e2 <__exponent+0x60>
	...

08008400 <_printf_float>:
 8008400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008404:	b091      	sub	sp, #68	; 0x44
 8008406:	460c      	mov	r4, r1
 8008408:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800840c:	4616      	mov	r6, r2
 800840e:	461f      	mov	r7, r3
 8008410:	4605      	mov	r5, r0
 8008412:	f001 fc0d 	bl	8009c30 <_localeconv_r>
 8008416:	6803      	ldr	r3, [r0, #0]
 8008418:	4618      	mov	r0, r3
 800841a:	9309      	str	r3, [sp, #36]	; 0x24
 800841c:	f7f7 fea2 	bl	8000164 <strlen>
 8008420:	2300      	movs	r3, #0
 8008422:	930e      	str	r3, [sp, #56]	; 0x38
 8008424:	f8d8 3000 	ldr.w	r3, [r8]
 8008428:	900a      	str	r0, [sp, #40]	; 0x28
 800842a:	3307      	adds	r3, #7
 800842c:	f023 0307 	bic.w	r3, r3, #7
 8008430:	f103 0208 	add.w	r2, r3, #8
 8008434:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008438:	f8d4 b000 	ldr.w	fp, [r4]
 800843c:	f8c8 2000 	str.w	r2, [r8]
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008448:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800844c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008450:	930b      	str	r3, [sp, #44]	; 0x2c
 8008452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008456:	4640      	mov	r0, r8
 8008458:	4b9c      	ldr	r3, [pc, #624]	; (80086cc <_printf_float+0x2cc>)
 800845a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800845c:	f7f8 fae0 	bl	8000a20 <__aeabi_dcmpun>
 8008460:	bb70      	cbnz	r0, 80084c0 <_printf_float+0xc0>
 8008462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008466:	4640      	mov	r0, r8
 8008468:	4b98      	ldr	r3, [pc, #608]	; (80086cc <_printf_float+0x2cc>)
 800846a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800846c:	f7f8 faba 	bl	80009e4 <__aeabi_dcmple>
 8008470:	bb30      	cbnz	r0, 80084c0 <_printf_float+0xc0>
 8008472:	2200      	movs	r2, #0
 8008474:	2300      	movs	r3, #0
 8008476:	4640      	mov	r0, r8
 8008478:	4651      	mov	r1, sl
 800847a:	f7f8 faa9 	bl	80009d0 <__aeabi_dcmplt>
 800847e:	b110      	cbz	r0, 8008486 <_printf_float+0x86>
 8008480:	232d      	movs	r3, #45	; 0x2d
 8008482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008486:	4b92      	ldr	r3, [pc, #584]	; (80086d0 <_printf_float+0x2d0>)
 8008488:	4892      	ldr	r0, [pc, #584]	; (80086d4 <_printf_float+0x2d4>)
 800848a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800848e:	bf94      	ite	ls
 8008490:	4698      	movls	r8, r3
 8008492:	4680      	movhi	r8, r0
 8008494:	2303      	movs	r3, #3
 8008496:	f04f 0a00 	mov.w	sl, #0
 800849a:	6123      	str	r3, [r4, #16]
 800849c:	f02b 0304 	bic.w	r3, fp, #4
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	4633      	mov	r3, r6
 80084a4:	4621      	mov	r1, r4
 80084a6:	4628      	mov	r0, r5
 80084a8:	9700      	str	r7, [sp, #0]
 80084aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80084ac:	f000 f9d4 	bl	8008858 <_printf_common>
 80084b0:	3001      	adds	r0, #1
 80084b2:	f040 8090 	bne.w	80085d6 <_printf_float+0x1d6>
 80084b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084ba:	b011      	add	sp, #68	; 0x44
 80084bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c0:	4642      	mov	r2, r8
 80084c2:	4653      	mov	r3, sl
 80084c4:	4640      	mov	r0, r8
 80084c6:	4651      	mov	r1, sl
 80084c8:	f7f8 faaa 	bl	8000a20 <__aeabi_dcmpun>
 80084cc:	b148      	cbz	r0, 80084e2 <_printf_float+0xe2>
 80084ce:	f1ba 0f00 	cmp.w	sl, #0
 80084d2:	bfb8      	it	lt
 80084d4:	232d      	movlt	r3, #45	; 0x2d
 80084d6:	4880      	ldr	r0, [pc, #512]	; (80086d8 <_printf_float+0x2d8>)
 80084d8:	bfb8      	it	lt
 80084da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80084de:	4b7f      	ldr	r3, [pc, #508]	; (80086dc <_printf_float+0x2dc>)
 80084e0:	e7d3      	b.n	800848a <_printf_float+0x8a>
 80084e2:	6863      	ldr	r3, [r4, #4]
 80084e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	d142      	bne.n	8008572 <_printf_float+0x172>
 80084ec:	2306      	movs	r3, #6
 80084ee:	6063      	str	r3, [r4, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	9206      	str	r2, [sp, #24]
 80084f4:	aa0e      	add	r2, sp, #56	; 0x38
 80084f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80084fa:	aa0d      	add	r2, sp, #52	; 0x34
 80084fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008500:	9203      	str	r2, [sp, #12]
 8008502:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008506:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800850a:	6023      	str	r3, [r4, #0]
 800850c:	6863      	ldr	r3, [r4, #4]
 800850e:	4642      	mov	r2, r8
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	4628      	mov	r0, r5
 8008514:	4653      	mov	r3, sl
 8008516:	910b      	str	r1, [sp, #44]	; 0x2c
 8008518:	f7ff fed4 	bl	80082c4 <__cvt>
 800851c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800851e:	4680      	mov	r8, r0
 8008520:	2947      	cmp	r1, #71	; 0x47
 8008522:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008524:	d108      	bne.n	8008538 <_printf_float+0x138>
 8008526:	1cc8      	adds	r0, r1, #3
 8008528:	db02      	blt.n	8008530 <_printf_float+0x130>
 800852a:	6863      	ldr	r3, [r4, #4]
 800852c:	4299      	cmp	r1, r3
 800852e:	dd40      	ble.n	80085b2 <_printf_float+0x1b2>
 8008530:	f1a9 0902 	sub.w	r9, r9, #2
 8008534:	fa5f f989 	uxtb.w	r9, r9
 8008538:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800853c:	d81f      	bhi.n	800857e <_printf_float+0x17e>
 800853e:	464a      	mov	r2, r9
 8008540:	3901      	subs	r1, #1
 8008542:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008546:	910d      	str	r1, [sp, #52]	; 0x34
 8008548:	f7ff ff1b 	bl	8008382 <__exponent>
 800854c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800854e:	4682      	mov	sl, r0
 8008550:	1813      	adds	r3, r2, r0
 8008552:	2a01      	cmp	r2, #1
 8008554:	6123      	str	r3, [r4, #16]
 8008556:	dc02      	bgt.n	800855e <_printf_float+0x15e>
 8008558:	6822      	ldr	r2, [r4, #0]
 800855a:	07d2      	lsls	r2, r2, #31
 800855c:	d501      	bpl.n	8008562 <_printf_float+0x162>
 800855e:	3301      	adds	r3, #1
 8008560:	6123      	str	r3, [r4, #16]
 8008562:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008566:	2b00      	cmp	r3, #0
 8008568:	d09b      	beq.n	80084a2 <_printf_float+0xa2>
 800856a:	232d      	movs	r3, #45	; 0x2d
 800856c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008570:	e797      	b.n	80084a2 <_printf_float+0xa2>
 8008572:	2947      	cmp	r1, #71	; 0x47
 8008574:	d1bc      	bne.n	80084f0 <_printf_float+0xf0>
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1ba      	bne.n	80084f0 <_printf_float+0xf0>
 800857a:	2301      	movs	r3, #1
 800857c:	e7b7      	b.n	80084ee <_printf_float+0xee>
 800857e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008582:	d118      	bne.n	80085b6 <_printf_float+0x1b6>
 8008584:	2900      	cmp	r1, #0
 8008586:	6863      	ldr	r3, [r4, #4]
 8008588:	dd0b      	ble.n	80085a2 <_printf_float+0x1a2>
 800858a:	6121      	str	r1, [r4, #16]
 800858c:	b913      	cbnz	r3, 8008594 <_printf_float+0x194>
 800858e:	6822      	ldr	r2, [r4, #0]
 8008590:	07d0      	lsls	r0, r2, #31
 8008592:	d502      	bpl.n	800859a <_printf_float+0x19a>
 8008594:	3301      	adds	r3, #1
 8008596:	440b      	add	r3, r1
 8008598:	6123      	str	r3, [r4, #16]
 800859a:	f04f 0a00 	mov.w	sl, #0
 800859e:	65a1      	str	r1, [r4, #88]	; 0x58
 80085a0:	e7df      	b.n	8008562 <_printf_float+0x162>
 80085a2:	b913      	cbnz	r3, 80085aa <_printf_float+0x1aa>
 80085a4:	6822      	ldr	r2, [r4, #0]
 80085a6:	07d2      	lsls	r2, r2, #31
 80085a8:	d501      	bpl.n	80085ae <_printf_float+0x1ae>
 80085aa:	3302      	adds	r3, #2
 80085ac:	e7f4      	b.n	8008598 <_printf_float+0x198>
 80085ae:	2301      	movs	r3, #1
 80085b0:	e7f2      	b.n	8008598 <_printf_float+0x198>
 80085b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80085b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085b8:	4299      	cmp	r1, r3
 80085ba:	db05      	blt.n	80085c8 <_printf_float+0x1c8>
 80085bc:	6823      	ldr	r3, [r4, #0]
 80085be:	6121      	str	r1, [r4, #16]
 80085c0:	07d8      	lsls	r0, r3, #31
 80085c2:	d5ea      	bpl.n	800859a <_printf_float+0x19a>
 80085c4:	1c4b      	adds	r3, r1, #1
 80085c6:	e7e7      	b.n	8008598 <_printf_float+0x198>
 80085c8:	2900      	cmp	r1, #0
 80085ca:	bfcc      	ite	gt
 80085cc:	2201      	movgt	r2, #1
 80085ce:	f1c1 0202 	rsble	r2, r1, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	e7e0      	b.n	8008598 <_printf_float+0x198>
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	055a      	lsls	r2, r3, #21
 80085da:	d407      	bmi.n	80085ec <_printf_float+0x1ec>
 80085dc:	6923      	ldr	r3, [r4, #16]
 80085de:	4642      	mov	r2, r8
 80085e0:	4631      	mov	r1, r6
 80085e2:	4628      	mov	r0, r5
 80085e4:	47b8      	blx	r7
 80085e6:	3001      	adds	r0, #1
 80085e8:	d12b      	bne.n	8008642 <_printf_float+0x242>
 80085ea:	e764      	b.n	80084b6 <_printf_float+0xb6>
 80085ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80085f0:	f240 80dd 	bls.w	80087ae <_printf_float+0x3ae>
 80085f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085f8:	2200      	movs	r2, #0
 80085fa:	2300      	movs	r3, #0
 80085fc:	f7f8 f9de 	bl	80009bc <__aeabi_dcmpeq>
 8008600:	2800      	cmp	r0, #0
 8008602:	d033      	beq.n	800866c <_printf_float+0x26c>
 8008604:	2301      	movs	r3, #1
 8008606:	4631      	mov	r1, r6
 8008608:	4628      	mov	r0, r5
 800860a:	4a35      	ldr	r2, [pc, #212]	; (80086e0 <_printf_float+0x2e0>)
 800860c:	47b8      	blx	r7
 800860e:	3001      	adds	r0, #1
 8008610:	f43f af51 	beq.w	80084b6 <_printf_float+0xb6>
 8008614:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008618:	429a      	cmp	r2, r3
 800861a:	db02      	blt.n	8008622 <_printf_float+0x222>
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	07d8      	lsls	r0, r3, #31
 8008620:	d50f      	bpl.n	8008642 <_printf_float+0x242>
 8008622:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008626:	4631      	mov	r1, r6
 8008628:	4628      	mov	r0, r5
 800862a:	47b8      	blx	r7
 800862c:	3001      	adds	r0, #1
 800862e:	f43f af42 	beq.w	80084b6 <_printf_float+0xb6>
 8008632:	f04f 0800 	mov.w	r8, #0
 8008636:	f104 091a 	add.w	r9, r4, #26
 800863a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800863c:	3b01      	subs	r3, #1
 800863e:	4543      	cmp	r3, r8
 8008640:	dc09      	bgt.n	8008656 <_printf_float+0x256>
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	079b      	lsls	r3, r3, #30
 8008646:	f100 8102 	bmi.w	800884e <_printf_float+0x44e>
 800864a:	68e0      	ldr	r0, [r4, #12]
 800864c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800864e:	4298      	cmp	r0, r3
 8008650:	bfb8      	it	lt
 8008652:	4618      	movlt	r0, r3
 8008654:	e731      	b.n	80084ba <_printf_float+0xba>
 8008656:	2301      	movs	r3, #1
 8008658:	464a      	mov	r2, r9
 800865a:	4631      	mov	r1, r6
 800865c:	4628      	mov	r0, r5
 800865e:	47b8      	blx	r7
 8008660:	3001      	adds	r0, #1
 8008662:	f43f af28 	beq.w	80084b6 <_printf_float+0xb6>
 8008666:	f108 0801 	add.w	r8, r8, #1
 800866a:	e7e6      	b.n	800863a <_printf_float+0x23a>
 800866c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800866e:	2b00      	cmp	r3, #0
 8008670:	dc38      	bgt.n	80086e4 <_printf_float+0x2e4>
 8008672:	2301      	movs	r3, #1
 8008674:	4631      	mov	r1, r6
 8008676:	4628      	mov	r0, r5
 8008678:	4a19      	ldr	r2, [pc, #100]	; (80086e0 <_printf_float+0x2e0>)
 800867a:	47b8      	blx	r7
 800867c:	3001      	adds	r0, #1
 800867e:	f43f af1a 	beq.w	80084b6 <_printf_float+0xb6>
 8008682:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008686:	4313      	orrs	r3, r2
 8008688:	d102      	bne.n	8008690 <_printf_float+0x290>
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	07d9      	lsls	r1, r3, #31
 800868e:	d5d8      	bpl.n	8008642 <_printf_float+0x242>
 8008690:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008694:	4631      	mov	r1, r6
 8008696:	4628      	mov	r0, r5
 8008698:	47b8      	blx	r7
 800869a:	3001      	adds	r0, #1
 800869c:	f43f af0b 	beq.w	80084b6 <_printf_float+0xb6>
 80086a0:	f04f 0900 	mov.w	r9, #0
 80086a4:	f104 0a1a 	add.w	sl, r4, #26
 80086a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086aa:	425b      	negs	r3, r3
 80086ac:	454b      	cmp	r3, r9
 80086ae:	dc01      	bgt.n	80086b4 <_printf_float+0x2b4>
 80086b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086b2:	e794      	b.n	80085de <_printf_float+0x1de>
 80086b4:	2301      	movs	r3, #1
 80086b6:	4652      	mov	r2, sl
 80086b8:	4631      	mov	r1, r6
 80086ba:	4628      	mov	r0, r5
 80086bc:	47b8      	blx	r7
 80086be:	3001      	adds	r0, #1
 80086c0:	f43f aef9 	beq.w	80084b6 <_printf_float+0xb6>
 80086c4:	f109 0901 	add.w	r9, r9, #1
 80086c8:	e7ee      	b.n	80086a8 <_printf_float+0x2a8>
 80086ca:	bf00      	nop
 80086cc:	7fefffff 	.word	0x7fefffff
 80086d0:	0800b0d0 	.word	0x0800b0d0
 80086d4:	0800b0d4 	.word	0x0800b0d4
 80086d8:	0800b0dc 	.word	0x0800b0dc
 80086dc:	0800b0d8 	.word	0x0800b0d8
 80086e0:	0800b0e0 	.word	0x0800b0e0
 80086e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086e8:	429a      	cmp	r2, r3
 80086ea:	bfa8      	it	ge
 80086ec:	461a      	movge	r2, r3
 80086ee:	2a00      	cmp	r2, #0
 80086f0:	4691      	mov	r9, r2
 80086f2:	dc37      	bgt.n	8008764 <_printf_float+0x364>
 80086f4:	f04f 0b00 	mov.w	fp, #0
 80086f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086fc:	f104 021a 	add.w	r2, r4, #26
 8008700:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008704:	ebaa 0309 	sub.w	r3, sl, r9
 8008708:	455b      	cmp	r3, fp
 800870a:	dc33      	bgt.n	8008774 <_printf_float+0x374>
 800870c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008710:	429a      	cmp	r2, r3
 8008712:	db3b      	blt.n	800878c <_printf_float+0x38c>
 8008714:	6823      	ldr	r3, [r4, #0]
 8008716:	07da      	lsls	r2, r3, #31
 8008718:	d438      	bmi.n	800878c <_printf_float+0x38c>
 800871a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800871c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800871e:	eba2 030a 	sub.w	r3, r2, sl
 8008722:	eba2 0901 	sub.w	r9, r2, r1
 8008726:	4599      	cmp	r9, r3
 8008728:	bfa8      	it	ge
 800872a:	4699      	movge	r9, r3
 800872c:	f1b9 0f00 	cmp.w	r9, #0
 8008730:	dc34      	bgt.n	800879c <_printf_float+0x39c>
 8008732:	f04f 0800 	mov.w	r8, #0
 8008736:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800873a:	f104 0a1a 	add.w	sl, r4, #26
 800873e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008742:	1a9b      	subs	r3, r3, r2
 8008744:	eba3 0309 	sub.w	r3, r3, r9
 8008748:	4543      	cmp	r3, r8
 800874a:	f77f af7a 	ble.w	8008642 <_printf_float+0x242>
 800874e:	2301      	movs	r3, #1
 8008750:	4652      	mov	r2, sl
 8008752:	4631      	mov	r1, r6
 8008754:	4628      	mov	r0, r5
 8008756:	47b8      	blx	r7
 8008758:	3001      	adds	r0, #1
 800875a:	f43f aeac 	beq.w	80084b6 <_printf_float+0xb6>
 800875e:	f108 0801 	add.w	r8, r8, #1
 8008762:	e7ec      	b.n	800873e <_printf_float+0x33e>
 8008764:	4613      	mov	r3, r2
 8008766:	4631      	mov	r1, r6
 8008768:	4642      	mov	r2, r8
 800876a:	4628      	mov	r0, r5
 800876c:	47b8      	blx	r7
 800876e:	3001      	adds	r0, #1
 8008770:	d1c0      	bne.n	80086f4 <_printf_float+0x2f4>
 8008772:	e6a0      	b.n	80084b6 <_printf_float+0xb6>
 8008774:	2301      	movs	r3, #1
 8008776:	4631      	mov	r1, r6
 8008778:	4628      	mov	r0, r5
 800877a:	920b      	str	r2, [sp, #44]	; 0x2c
 800877c:	47b8      	blx	r7
 800877e:	3001      	adds	r0, #1
 8008780:	f43f ae99 	beq.w	80084b6 <_printf_float+0xb6>
 8008784:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008786:	f10b 0b01 	add.w	fp, fp, #1
 800878a:	e7b9      	b.n	8008700 <_printf_float+0x300>
 800878c:	4631      	mov	r1, r6
 800878e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008792:	4628      	mov	r0, r5
 8008794:	47b8      	blx	r7
 8008796:	3001      	adds	r0, #1
 8008798:	d1bf      	bne.n	800871a <_printf_float+0x31a>
 800879a:	e68c      	b.n	80084b6 <_printf_float+0xb6>
 800879c:	464b      	mov	r3, r9
 800879e:	4631      	mov	r1, r6
 80087a0:	4628      	mov	r0, r5
 80087a2:	eb08 020a 	add.w	r2, r8, sl
 80087a6:	47b8      	blx	r7
 80087a8:	3001      	adds	r0, #1
 80087aa:	d1c2      	bne.n	8008732 <_printf_float+0x332>
 80087ac:	e683      	b.n	80084b6 <_printf_float+0xb6>
 80087ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087b0:	2a01      	cmp	r2, #1
 80087b2:	dc01      	bgt.n	80087b8 <_printf_float+0x3b8>
 80087b4:	07db      	lsls	r3, r3, #31
 80087b6:	d537      	bpl.n	8008828 <_printf_float+0x428>
 80087b8:	2301      	movs	r3, #1
 80087ba:	4642      	mov	r2, r8
 80087bc:	4631      	mov	r1, r6
 80087be:	4628      	mov	r0, r5
 80087c0:	47b8      	blx	r7
 80087c2:	3001      	adds	r0, #1
 80087c4:	f43f ae77 	beq.w	80084b6 <_printf_float+0xb6>
 80087c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087cc:	4631      	mov	r1, r6
 80087ce:	4628      	mov	r0, r5
 80087d0:	47b8      	blx	r7
 80087d2:	3001      	adds	r0, #1
 80087d4:	f43f ae6f 	beq.w	80084b6 <_printf_float+0xb6>
 80087d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087dc:	2200      	movs	r2, #0
 80087de:	2300      	movs	r3, #0
 80087e0:	f7f8 f8ec 	bl	80009bc <__aeabi_dcmpeq>
 80087e4:	b9d8      	cbnz	r0, 800881e <_printf_float+0x41e>
 80087e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087e8:	f108 0201 	add.w	r2, r8, #1
 80087ec:	3b01      	subs	r3, #1
 80087ee:	4631      	mov	r1, r6
 80087f0:	4628      	mov	r0, r5
 80087f2:	47b8      	blx	r7
 80087f4:	3001      	adds	r0, #1
 80087f6:	d10e      	bne.n	8008816 <_printf_float+0x416>
 80087f8:	e65d      	b.n	80084b6 <_printf_float+0xb6>
 80087fa:	2301      	movs	r3, #1
 80087fc:	464a      	mov	r2, r9
 80087fe:	4631      	mov	r1, r6
 8008800:	4628      	mov	r0, r5
 8008802:	47b8      	blx	r7
 8008804:	3001      	adds	r0, #1
 8008806:	f43f ae56 	beq.w	80084b6 <_printf_float+0xb6>
 800880a:	f108 0801 	add.w	r8, r8, #1
 800880e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008810:	3b01      	subs	r3, #1
 8008812:	4543      	cmp	r3, r8
 8008814:	dcf1      	bgt.n	80087fa <_printf_float+0x3fa>
 8008816:	4653      	mov	r3, sl
 8008818:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800881c:	e6e0      	b.n	80085e0 <_printf_float+0x1e0>
 800881e:	f04f 0800 	mov.w	r8, #0
 8008822:	f104 091a 	add.w	r9, r4, #26
 8008826:	e7f2      	b.n	800880e <_printf_float+0x40e>
 8008828:	2301      	movs	r3, #1
 800882a:	4642      	mov	r2, r8
 800882c:	e7df      	b.n	80087ee <_printf_float+0x3ee>
 800882e:	2301      	movs	r3, #1
 8008830:	464a      	mov	r2, r9
 8008832:	4631      	mov	r1, r6
 8008834:	4628      	mov	r0, r5
 8008836:	47b8      	blx	r7
 8008838:	3001      	adds	r0, #1
 800883a:	f43f ae3c 	beq.w	80084b6 <_printf_float+0xb6>
 800883e:	f108 0801 	add.w	r8, r8, #1
 8008842:	68e3      	ldr	r3, [r4, #12]
 8008844:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008846:	1a5b      	subs	r3, r3, r1
 8008848:	4543      	cmp	r3, r8
 800884a:	dcf0      	bgt.n	800882e <_printf_float+0x42e>
 800884c:	e6fd      	b.n	800864a <_printf_float+0x24a>
 800884e:	f04f 0800 	mov.w	r8, #0
 8008852:	f104 0919 	add.w	r9, r4, #25
 8008856:	e7f4      	b.n	8008842 <_printf_float+0x442>

08008858 <_printf_common>:
 8008858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800885c:	4616      	mov	r6, r2
 800885e:	4699      	mov	r9, r3
 8008860:	688a      	ldr	r2, [r1, #8]
 8008862:	690b      	ldr	r3, [r1, #16]
 8008864:	4607      	mov	r7, r0
 8008866:	4293      	cmp	r3, r2
 8008868:	bfb8      	it	lt
 800886a:	4613      	movlt	r3, r2
 800886c:	6033      	str	r3, [r6, #0]
 800886e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008872:	460c      	mov	r4, r1
 8008874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008878:	b10a      	cbz	r2, 800887e <_printf_common+0x26>
 800887a:	3301      	adds	r3, #1
 800887c:	6033      	str	r3, [r6, #0]
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	0699      	lsls	r1, r3, #26
 8008882:	bf42      	ittt	mi
 8008884:	6833      	ldrmi	r3, [r6, #0]
 8008886:	3302      	addmi	r3, #2
 8008888:	6033      	strmi	r3, [r6, #0]
 800888a:	6825      	ldr	r5, [r4, #0]
 800888c:	f015 0506 	ands.w	r5, r5, #6
 8008890:	d106      	bne.n	80088a0 <_printf_common+0x48>
 8008892:	f104 0a19 	add.w	sl, r4, #25
 8008896:	68e3      	ldr	r3, [r4, #12]
 8008898:	6832      	ldr	r2, [r6, #0]
 800889a:	1a9b      	subs	r3, r3, r2
 800889c:	42ab      	cmp	r3, r5
 800889e:	dc28      	bgt.n	80088f2 <_printf_common+0x9a>
 80088a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088a4:	1e13      	subs	r3, r2, #0
 80088a6:	6822      	ldr	r2, [r4, #0]
 80088a8:	bf18      	it	ne
 80088aa:	2301      	movne	r3, #1
 80088ac:	0692      	lsls	r2, r2, #26
 80088ae:	d42d      	bmi.n	800890c <_printf_common+0xb4>
 80088b0:	4649      	mov	r1, r9
 80088b2:	4638      	mov	r0, r7
 80088b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088b8:	47c0      	blx	r8
 80088ba:	3001      	adds	r0, #1
 80088bc:	d020      	beq.n	8008900 <_printf_common+0xa8>
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	68e5      	ldr	r5, [r4, #12]
 80088c2:	f003 0306 	and.w	r3, r3, #6
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	bf18      	it	ne
 80088ca:	2500      	movne	r5, #0
 80088cc:	6832      	ldr	r2, [r6, #0]
 80088ce:	f04f 0600 	mov.w	r6, #0
 80088d2:	68a3      	ldr	r3, [r4, #8]
 80088d4:	bf08      	it	eq
 80088d6:	1aad      	subeq	r5, r5, r2
 80088d8:	6922      	ldr	r2, [r4, #16]
 80088da:	bf08      	it	eq
 80088dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088e0:	4293      	cmp	r3, r2
 80088e2:	bfc4      	itt	gt
 80088e4:	1a9b      	subgt	r3, r3, r2
 80088e6:	18ed      	addgt	r5, r5, r3
 80088e8:	341a      	adds	r4, #26
 80088ea:	42b5      	cmp	r5, r6
 80088ec:	d11a      	bne.n	8008924 <_printf_common+0xcc>
 80088ee:	2000      	movs	r0, #0
 80088f0:	e008      	b.n	8008904 <_printf_common+0xac>
 80088f2:	2301      	movs	r3, #1
 80088f4:	4652      	mov	r2, sl
 80088f6:	4649      	mov	r1, r9
 80088f8:	4638      	mov	r0, r7
 80088fa:	47c0      	blx	r8
 80088fc:	3001      	adds	r0, #1
 80088fe:	d103      	bne.n	8008908 <_printf_common+0xb0>
 8008900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008908:	3501      	adds	r5, #1
 800890a:	e7c4      	b.n	8008896 <_printf_common+0x3e>
 800890c:	2030      	movs	r0, #48	; 0x30
 800890e:	18e1      	adds	r1, r4, r3
 8008910:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800891a:	4422      	add	r2, r4
 800891c:	3302      	adds	r3, #2
 800891e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008922:	e7c5      	b.n	80088b0 <_printf_common+0x58>
 8008924:	2301      	movs	r3, #1
 8008926:	4622      	mov	r2, r4
 8008928:	4649      	mov	r1, r9
 800892a:	4638      	mov	r0, r7
 800892c:	47c0      	blx	r8
 800892e:	3001      	adds	r0, #1
 8008930:	d0e6      	beq.n	8008900 <_printf_common+0xa8>
 8008932:	3601      	adds	r6, #1
 8008934:	e7d9      	b.n	80088ea <_printf_common+0x92>
	...

08008938 <_printf_i>:
 8008938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800893c:	460c      	mov	r4, r1
 800893e:	7e27      	ldrb	r7, [r4, #24]
 8008940:	4691      	mov	r9, r2
 8008942:	2f78      	cmp	r7, #120	; 0x78
 8008944:	4680      	mov	r8, r0
 8008946:	469a      	mov	sl, r3
 8008948:	990c      	ldr	r1, [sp, #48]	; 0x30
 800894a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800894e:	d807      	bhi.n	8008960 <_printf_i+0x28>
 8008950:	2f62      	cmp	r7, #98	; 0x62
 8008952:	d80a      	bhi.n	800896a <_printf_i+0x32>
 8008954:	2f00      	cmp	r7, #0
 8008956:	f000 80d9 	beq.w	8008b0c <_printf_i+0x1d4>
 800895a:	2f58      	cmp	r7, #88	; 0x58
 800895c:	f000 80a4 	beq.w	8008aa8 <_printf_i+0x170>
 8008960:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008968:	e03a      	b.n	80089e0 <_printf_i+0xa8>
 800896a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800896e:	2b15      	cmp	r3, #21
 8008970:	d8f6      	bhi.n	8008960 <_printf_i+0x28>
 8008972:	a001      	add	r0, pc, #4	; (adr r0, 8008978 <_printf_i+0x40>)
 8008974:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008978:	080089d1 	.word	0x080089d1
 800897c:	080089e5 	.word	0x080089e5
 8008980:	08008961 	.word	0x08008961
 8008984:	08008961 	.word	0x08008961
 8008988:	08008961 	.word	0x08008961
 800898c:	08008961 	.word	0x08008961
 8008990:	080089e5 	.word	0x080089e5
 8008994:	08008961 	.word	0x08008961
 8008998:	08008961 	.word	0x08008961
 800899c:	08008961 	.word	0x08008961
 80089a0:	08008961 	.word	0x08008961
 80089a4:	08008af3 	.word	0x08008af3
 80089a8:	08008a15 	.word	0x08008a15
 80089ac:	08008ad5 	.word	0x08008ad5
 80089b0:	08008961 	.word	0x08008961
 80089b4:	08008961 	.word	0x08008961
 80089b8:	08008b15 	.word	0x08008b15
 80089bc:	08008961 	.word	0x08008961
 80089c0:	08008a15 	.word	0x08008a15
 80089c4:	08008961 	.word	0x08008961
 80089c8:	08008961 	.word	0x08008961
 80089cc:	08008add 	.word	0x08008add
 80089d0:	680b      	ldr	r3, [r1, #0]
 80089d2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089d6:	1d1a      	adds	r2, r3, #4
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	600a      	str	r2, [r1, #0]
 80089dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089e0:	2301      	movs	r3, #1
 80089e2:	e0a4      	b.n	8008b2e <_printf_i+0x1f6>
 80089e4:	6825      	ldr	r5, [r4, #0]
 80089e6:	6808      	ldr	r0, [r1, #0]
 80089e8:	062e      	lsls	r6, r5, #24
 80089ea:	f100 0304 	add.w	r3, r0, #4
 80089ee:	d50a      	bpl.n	8008a06 <_printf_i+0xce>
 80089f0:	6805      	ldr	r5, [r0, #0]
 80089f2:	600b      	str	r3, [r1, #0]
 80089f4:	2d00      	cmp	r5, #0
 80089f6:	da03      	bge.n	8008a00 <_printf_i+0xc8>
 80089f8:	232d      	movs	r3, #45	; 0x2d
 80089fa:	426d      	negs	r5, r5
 80089fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a00:	230a      	movs	r3, #10
 8008a02:	485e      	ldr	r0, [pc, #376]	; (8008b7c <_printf_i+0x244>)
 8008a04:	e019      	b.n	8008a3a <_printf_i+0x102>
 8008a06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008a0a:	6805      	ldr	r5, [r0, #0]
 8008a0c:	600b      	str	r3, [r1, #0]
 8008a0e:	bf18      	it	ne
 8008a10:	b22d      	sxthne	r5, r5
 8008a12:	e7ef      	b.n	80089f4 <_printf_i+0xbc>
 8008a14:	680b      	ldr	r3, [r1, #0]
 8008a16:	6825      	ldr	r5, [r4, #0]
 8008a18:	1d18      	adds	r0, r3, #4
 8008a1a:	6008      	str	r0, [r1, #0]
 8008a1c:	0628      	lsls	r0, r5, #24
 8008a1e:	d501      	bpl.n	8008a24 <_printf_i+0xec>
 8008a20:	681d      	ldr	r5, [r3, #0]
 8008a22:	e002      	b.n	8008a2a <_printf_i+0xf2>
 8008a24:	0669      	lsls	r1, r5, #25
 8008a26:	d5fb      	bpl.n	8008a20 <_printf_i+0xe8>
 8008a28:	881d      	ldrh	r5, [r3, #0]
 8008a2a:	2f6f      	cmp	r7, #111	; 0x6f
 8008a2c:	bf0c      	ite	eq
 8008a2e:	2308      	moveq	r3, #8
 8008a30:	230a      	movne	r3, #10
 8008a32:	4852      	ldr	r0, [pc, #328]	; (8008b7c <_printf_i+0x244>)
 8008a34:	2100      	movs	r1, #0
 8008a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a3a:	6866      	ldr	r6, [r4, #4]
 8008a3c:	2e00      	cmp	r6, #0
 8008a3e:	bfa8      	it	ge
 8008a40:	6821      	ldrge	r1, [r4, #0]
 8008a42:	60a6      	str	r6, [r4, #8]
 8008a44:	bfa4      	itt	ge
 8008a46:	f021 0104 	bicge.w	r1, r1, #4
 8008a4a:	6021      	strge	r1, [r4, #0]
 8008a4c:	b90d      	cbnz	r5, 8008a52 <_printf_i+0x11a>
 8008a4e:	2e00      	cmp	r6, #0
 8008a50:	d04d      	beq.n	8008aee <_printf_i+0x1b6>
 8008a52:	4616      	mov	r6, r2
 8008a54:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a58:	fb03 5711 	mls	r7, r3, r1, r5
 8008a5c:	5dc7      	ldrb	r7, [r0, r7]
 8008a5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a62:	462f      	mov	r7, r5
 8008a64:	42bb      	cmp	r3, r7
 8008a66:	460d      	mov	r5, r1
 8008a68:	d9f4      	bls.n	8008a54 <_printf_i+0x11c>
 8008a6a:	2b08      	cmp	r3, #8
 8008a6c:	d10b      	bne.n	8008a86 <_printf_i+0x14e>
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	07df      	lsls	r7, r3, #31
 8008a72:	d508      	bpl.n	8008a86 <_printf_i+0x14e>
 8008a74:	6923      	ldr	r3, [r4, #16]
 8008a76:	6861      	ldr	r1, [r4, #4]
 8008a78:	4299      	cmp	r1, r3
 8008a7a:	bfde      	ittt	le
 8008a7c:	2330      	movle	r3, #48	; 0x30
 8008a7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a82:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008a86:	1b92      	subs	r2, r2, r6
 8008a88:	6122      	str	r2, [r4, #16]
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	4640      	mov	r0, r8
 8008a90:	f8cd a000 	str.w	sl, [sp]
 8008a94:	aa03      	add	r2, sp, #12
 8008a96:	f7ff fedf 	bl	8008858 <_printf_common>
 8008a9a:	3001      	adds	r0, #1
 8008a9c:	d14c      	bne.n	8008b38 <_printf_i+0x200>
 8008a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008aa2:	b004      	add	sp, #16
 8008aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa8:	4834      	ldr	r0, [pc, #208]	; (8008b7c <_printf_i+0x244>)
 8008aaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008aae:	680e      	ldr	r6, [r1, #0]
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ab6:	061f      	lsls	r7, r3, #24
 8008ab8:	600e      	str	r6, [r1, #0]
 8008aba:	d514      	bpl.n	8008ae6 <_printf_i+0x1ae>
 8008abc:	07d9      	lsls	r1, r3, #31
 8008abe:	bf44      	itt	mi
 8008ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8008ac4:	6023      	strmi	r3, [r4, #0]
 8008ac6:	b91d      	cbnz	r5, 8008ad0 <_printf_i+0x198>
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	f023 0320 	bic.w	r3, r3, #32
 8008ace:	6023      	str	r3, [r4, #0]
 8008ad0:	2310      	movs	r3, #16
 8008ad2:	e7af      	b.n	8008a34 <_printf_i+0xfc>
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	f043 0320 	orr.w	r3, r3, #32
 8008ada:	6023      	str	r3, [r4, #0]
 8008adc:	2378      	movs	r3, #120	; 0x78
 8008ade:	4828      	ldr	r0, [pc, #160]	; (8008b80 <_printf_i+0x248>)
 8008ae0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ae4:	e7e3      	b.n	8008aae <_printf_i+0x176>
 8008ae6:	065e      	lsls	r6, r3, #25
 8008ae8:	bf48      	it	mi
 8008aea:	b2ad      	uxthmi	r5, r5
 8008aec:	e7e6      	b.n	8008abc <_printf_i+0x184>
 8008aee:	4616      	mov	r6, r2
 8008af0:	e7bb      	b.n	8008a6a <_printf_i+0x132>
 8008af2:	680b      	ldr	r3, [r1, #0]
 8008af4:	6826      	ldr	r6, [r4, #0]
 8008af6:	1d1d      	adds	r5, r3, #4
 8008af8:	6960      	ldr	r0, [r4, #20]
 8008afa:	600d      	str	r5, [r1, #0]
 8008afc:	0635      	lsls	r5, r6, #24
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	d501      	bpl.n	8008b06 <_printf_i+0x1ce>
 8008b02:	6018      	str	r0, [r3, #0]
 8008b04:	e002      	b.n	8008b0c <_printf_i+0x1d4>
 8008b06:	0671      	lsls	r1, r6, #25
 8008b08:	d5fb      	bpl.n	8008b02 <_printf_i+0x1ca>
 8008b0a:	8018      	strh	r0, [r3, #0]
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4616      	mov	r6, r2
 8008b10:	6123      	str	r3, [r4, #16]
 8008b12:	e7ba      	b.n	8008a8a <_printf_i+0x152>
 8008b14:	680b      	ldr	r3, [r1, #0]
 8008b16:	1d1a      	adds	r2, r3, #4
 8008b18:	600a      	str	r2, [r1, #0]
 8008b1a:	681e      	ldr	r6, [r3, #0]
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	4630      	mov	r0, r6
 8008b20:	6862      	ldr	r2, [r4, #4]
 8008b22:	f001 f8a3 	bl	8009c6c <memchr>
 8008b26:	b108      	cbz	r0, 8008b2c <_printf_i+0x1f4>
 8008b28:	1b80      	subs	r0, r0, r6
 8008b2a:	6060      	str	r0, [r4, #4]
 8008b2c:	6863      	ldr	r3, [r4, #4]
 8008b2e:	6123      	str	r3, [r4, #16]
 8008b30:	2300      	movs	r3, #0
 8008b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b36:	e7a8      	b.n	8008a8a <_printf_i+0x152>
 8008b38:	4632      	mov	r2, r6
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	4640      	mov	r0, r8
 8008b3e:	6923      	ldr	r3, [r4, #16]
 8008b40:	47d0      	blx	sl
 8008b42:	3001      	adds	r0, #1
 8008b44:	d0ab      	beq.n	8008a9e <_printf_i+0x166>
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	079b      	lsls	r3, r3, #30
 8008b4a:	d413      	bmi.n	8008b74 <_printf_i+0x23c>
 8008b4c:	68e0      	ldr	r0, [r4, #12]
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	4298      	cmp	r0, r3
 8008b52:	bfb8      	it	lt
 8008b54:	4618      	movlt	r0, r3
 8008b56:	e7a4      	b.n	8008aa2 <_printf_i+0x16a>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	4632      	mov	r2, r6
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	4640      	mov	r0, r8
 8008b60:	47d0      	blx	sl
 8008b62:	3001      	adds	r0, #1
 8008b64:	d09b      	beq.n	8008a9e <_printf_i+0x166>
 8008b66:	3501      	adds	r5, #1
 8008b68:	68e3      	ldr	r3, [r4, #12]
 8008b6a:	9903      	ldr	r1, [sp, #12]
 8008b6c:	1a5b      	subs	r3, r3, r1
 8008b6e:	42ab      	cmp	r3, r5
 8008b70:	dcf2      	bgt.n	8008b58 <_printf_i+0x220>
 8008b72:	e7eb      	b.n	8008b4c <_printf_i+0x214>
 8008b74:	2500      	movs	r5, #0
 8008b76:	f104 0619 	add.w	r6, r4, #25
 8008b7a:	e7f5      	b.n	8008b68 <_printf_i+0x230>
 8008b7c:	0800b0e2 	.word	0x0800b0e2
 8008b80:	0800b0f3 	.word	0x0800b0f3

08008b84 <iprintf>:
 8008b84:	b40f      	push	{r0, r1, r2, r3}
 8008b86:	4b0a      	ldr	r3, [pc, #40]	; (8008bb0 <iprintf+0x2c>)
 8008b88:	b513      	push	{r0, r1, r4, lr}
 8008b8a:	681c      	ldr	r4, [r3, #0]
 8008b8c:	b124      	cbz	r4, 8008b98 <iprintf+0x14>
 8008b8e:	69a3      	ldr	r3, [r4, #24]
 8008b90:	b913      	cbnz	r3, 8008b98 <iprintf+0x14>
 8008b92:	4620      	mov	r0, r4
 8008b94:	f7ff fa60 	bl	8008058 <__sinit>
 8008b98:	ab05      	add	r3, sp, #20
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	9a04      	ldr	r2, [sp, #16]
 8008b9e:	68a1      	ldr	r1, [r4, #8]
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	f001 fddd 	bl	800a760 <_vfiprintf_r>
 8008ba6:	b002      	add	sp, #8
 8008ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bac:	b004      	add	sp, #16
 8008bae:	4770      	bx	lr
 8008bb0:	20000018 	.word	0x20000018

08008bb4 <cleanup_glue>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	6809      	ldr	r1, [r1, #0]
 8008bba:	4605      	mov	r5, r0
 8008bbc:	b109      	cbz	r1, 8008bc2 <cleanup_glue+0xe>
 8008bbe:	f7ff fff9 	bl	8008bb4 <cleanup_glue>
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bca:	f001 bbf9 	b.w	800a3c0 <_free_r>
	...

08008bd0 <_reclaim_reent>:
 8008bd0:	4b2c      	ldr	r3, [pc, #176]	; (8008c84 <_reclaim_reent+0xb4>)
 8008bd2:	b570      	push	{r4, r5, r6, lr}
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	4283      	cmp	r3, r0
 8008bda:	d051      	beq.n	8008c80 <_reclaim_reent+0xb0>
 8008bdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008bde:	b143      	cbz	r3, 8008bf2 <_reclaim_reent+0x22>
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d14a      	bne.n	8008c7c <_reclaim_reent+0xac>
 8008be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008be8:	6819      	ldr	r1, [r3, #0]
 8008bea:	b111      	cbz	r1, 8008bf2 <_reclaim_reent+0x22>
 8008bec:	4620      	mov	r0, r4
 8008bee:	f001 fbe7 	bl	800a3c0 <_free_r>
 8008bf2:	6961      	ldr	r1, [r4, #20]
 8008bf4:	b111      	cbz	r1, 8008bfc <_reclaim_reent+0x2c>
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f001 fbe2 	bl	800a3c0 <_free_r>
 8008bfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008bfe:	b111      	cbz	r1, 8008c06 <_reclaim_reent+0x36>
 8008c00:	4620      	mov	r0, r4
 8008c02:	f001 fbdd 	bl	800a3c0 <_free_r>
 8008c06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008c08:	b111      	cbz	r1, 8008c10 <_reclaim_reent+0x40>
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f001 fbd8 	bl	800a3c0 <_free_r>
 8008c10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008c12:	b111      	cbz	r1, 8008c1a <_reclaim_reent+0x4a>
 8008c14:	4620      	mov	r0, r4
 8008c16:	f001 fbd3 	bl	800a3c0 <_free_r>
 8008c1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008c1c:	b111      	cbz	r1, 8008c24 <_reclaim_reent+0x54>
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f001 fbce 	bl	800a3c0 <_free_r>
 8008c24:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008c26:	b111      	cbz	r1, 8008c2e <_reclaim_reent+0x5e>
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f001 fbc9 	bl	800a3c0 <_free_r>
 8008c2e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008c30:	b111      	cbz	r1, 8008c38 <_reclaim_reent+0x68>
 8008c32:	4620      	mov	r0, r4
 8008c34:	f001 fbc4 	bl	800a3c0 <_free_r>
 8008c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c3a:	b111      	cbz	r1, 8008c42 <_reclaim_reent+0x72>
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f001 fbbf 	bl	800a3c0 <_free_r>
 8008c42:	69a3      	ldr	r3, [r4, #24]
 8008c44:	b1e3      	cbz	r3, 8008c80 <_reclaim_reent+0xb0>
 8008c46:	4620      	mov	r0, r4
 8008c48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c4a:	4798      	blx	r3
 8008c4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008c4e:	b1b9      	cbz	r1, 8008c80 <_reclaim_reent+0xb0>
 8008c50:	4620      	mov	r0, r4
 8008c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c56:	f7ff bfad 	b.w	8008bb4 <cleanup_glue>
 8008c5a:	5949      	ldr	r1, [r1, r5]
 8008c5c:	b941      	cbnz	r1, 8008c70 <_reclaim_reent+0xa0>
 8008c5e:	3504      	adds	r5, #4
 8008c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c62:	2d80      	cmp	r5, #128	; 0x80
 8008c64:	68d9      	ldr	r1, [r3, #12]
 8008c66:	d1f8      	bne.n	8008c5a <_reclaim_reent+0x8a>
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f001 fba9 	bl	800a3c0 <_free_r>
 8008c6e:	e7ba      	b.n	8008be6 <_reclaim_reent+0x16>
 8008c70:	680e      	ldr	r6, [r1, #0]
 8008c72:	4620      	mov	r0, r4
 8008c74:	f001 fba4 	bl	800a3c0 <_free_r>
 8008c78:	4631      	mov	r1, r6
 8008c7a:	e7ef      	b.n	8008c5c <_reclaim_reent+0x8c>
 8008c7c:	2500      	movs	r5, #0
 8008c7e:	e7ef      	b.n	8008c60 <_reclaim_reent+0x90>
 8008c80:	bd70      	pop	{r4, r5, r6, pc}
 8008c82:	bf00      	nop
 8008c84:	20000018 	.word	0x20000018

08008c88 <_sbrk_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	4d05      	ldr	r5, [pc, #20]	; (8008ca4 <_sbrk_r+0x1c>)
 8008c8e:	4604      	mov	r4, r0
 8008c90:	4608      	mov	r0, r1
 8008c92:	602b      	str	r3, [r5, #0]
 8008c94:	f7f9 fcba 	bl	800260c <_sbrk>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d102      	bne.n	8008ca2 <_sbrk_r+0x1a>
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	b103      	cbz	r3, 8008ca2 <_sbrk_r+0x1a>
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	20001ddc 	.word	0x20001ddc

08008ca8 <siprintf>:
 8008ca8:	b40e      	push	{r1, r2, r3}
 8008caa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cae:	b500      	push	{lr}
 8008cb0:	b09c      	sub	sp, #112	; 0x70
 8008cb2:	ab1d      	add	r3, sp, #116	; 0x74
 8008cb4:	9002      	str	r0, [sp, #8]
 8008cb6:	9006      	str	r0, [sp, #24]
 8008cb8:	9107      	str	r1, [sp, #28]
 8008cba:	9104      	str	r1, [sp, #16]
 8008cbc:	4808      	ldr	r0, [pc, #32]	; (8008ce0 <siprintf+0x38>)
 8008cbe:	4909      	ldr	r1, [pc, #36]	; (8008ce4 <siprintf+0x3c>)
 8008cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cc4:	9105      	str	r1, [sp, #20]
 8008cc6:	6800      	ldr	r0, [r0, #0]
 8008cc8:	a902      	add	r1, sp, #8
 8008cca:	9301      	str	r3, [sp, #4]
 8008ccc:	f001 fc20 	bl	800a510 <_svfiprintf_r>
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	9b02      	ldr	r3, [sp, #8]
 8008cd4:	701a      	strb	r2, [r3, #0]
 8008cd6:	b01c      	add	sp, #112	; 0x70
 8008cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cdc:	b003      	add	sp, #12
 8008cde:	4770      	bx	lr
 8008ce0:	20000018 	.word	0x20000018
 8008ce4:	ffff0208 	.word	0xffff0208

08008ce8 <__sread>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	460c      	mov	r4, r1
 8008cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf0:	f001 fe66 	bl	800a9c0 <_read_r>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	bfab      	itete	ge
 8008cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8008cfc:	181b      	addge	r3, r3, r0
 8008cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d02:	bfac      	ite	ge
 8008d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d06:	81a3      	strhlt	r3, [r4, #12]
 8008d08:	bd10      	pop	{r4, pc}

08008d0a <__swrite>:
 8008d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0e:	461f      	mov	r7, r3
 8008d10:	898b      	ldrh	r3, [r1, #12]
 8008d12:	4605      	mov	r5, r0
 8008d14:	05db      	lsls	r3, r3, #23
 8008d16:	460c      	mov	r4, r1
 8008d18:	4616      	mov	r6, r2
 8008d1a:	d505      	bpl.n	8008d28 <__swrite+0x1e>
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d24:	f000 ff88 	bl	8009c38 <_lseek_r>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	4632      	mov	r2, r6
 8008d2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	4628      	mov	r0, r5
 8008d34:	463b      	mov	r3, r7
 8008d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3e:	f000 b817 	b.w	8008d70 <_write_r>

08008d42 <__sseek>:
 8008d42:	b510      	push	{r4, lr}
 8008d44:	460c      	mov	r4, r1
 8008d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4a:	f000 ff75 	bl	8009c38 <_lseek_r>
 8008d4e:	1c43      	adds	r3, r0, #1
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	bf15      	itete	ne
 8008d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d5e:	81a3      	strheq	r3, [r4, #12]
 8008d60:	bf18      	it	ne
 8008d62:	81a3      	strhne	r3, [r4, #12]
 8008d64:	bd10      	pop	{r4, pc}

08008d66 <__sclose>:
 8008d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6a:	f000 b813 	b.w	8008d94 <_close_r>
	...

08008d70 <_write_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4604      	mov	r4, r0
 8008d74:	4608      	mov	r0, r1
 8008d76:	4611      	mov	r1, r2
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4d05      	ldr	r5, [pc, #20]	; (8008d90 <_write_r+0x20>)
 8008d7c:	602a      	str	r2, [r5, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f7f8 fe8e 	bl	8001aa0 <_write>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d102      	bne.n	8008d8e <_write_r+0x1e>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b103      	cbz	r3, 8008d8e <_write_r+0x1e>
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	20001ddc 	.word	0x20001ddc

08008d94 <_close_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	2300      	movs	r3, #0
 8008d98:	4d05      	ldr	r5, [pc, #20]	; (8008db0 <_close_r+0x1c>)
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	4608      	mov	r0, r1
 8008d9e:	602b      	str	r3, [r5, #0]
 8008da0:	f7f9 fc04 	bl	80025ac <_close>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_close_r+0x1a>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_close_r+0x1a>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	20001ddc 	.word	0x20001ddc

08008db4 <quorem>:
 8008db4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	6903      	ldr	r3, [r0, #16]
 8008dba:	690c      	ldr	r4, [r1, #16]
 8008dbc:	4607      	mov	r7, r0
 8008dbe:	42a3      	cmp	r3, r4
 8008dc0:	f2c0 8083 	blt.w	8008eca <quorem+0x116>
 8008dc4:	3c01      	subs	r4, #1
 8008dc6:	f100 0514 	add.w	r5, r0, #20
 8008dca:	f101 0814 	add.w	r8, r1, #20
 8008dce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dd2:	9301      	str	r3, [sp, #4]
 8008dd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008dd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	429a      	cmp	r2, r3
 8008de0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008de4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008de8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008dec:	d332      	bcc.n	8008e54 <quorem+0xa0>
 8008dee:	f04f 0e00 	mov.w	lr, #0
 8008df2:	4640      	mov	r0, r8
 8008df4:	46ac      	mov	ip, r5
 8008df6:	46f2      	mov	sl, lr
 8008df8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008dfc:	b293      	uxth	r3, r2
 8008dfe:	fb06 e303 	mla	r3, r6, r3, lr
 8008e02:	0c12      	lsrs	r2, r2, #16
 8008e04:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008e08:	fb06 e202 	mla	r2, r6, r2, lr
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	ebaa 0303 	sub.w	r3, sl, r3
 8008e12:	f8dc a000 	ldr.w	sl, [ip]
 8008e16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e1a:	fa1f fa8a 	uxth.w	sl, sl
 8008e1e:	4453      	add	r3, sl
 8008e20:	fa1f fa82 	uxth.w	sl, r2
 8008e24:	f8dc 2000 	ldr.w	r2, [ip]
 8008e28:	4581      	cmp	r9, r0
 8008e2a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008e2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e38:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e3c:	f84c 3b04 	str.w	r3, [ip], #4
 8008e40:	d2da      	bcs.n	8008df8 <quorem+0x44>
 8008e42:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e46:	b92b      	cbnz	r3, 8008e54 <quorem+0xa0>
 8008e48:	9b01      	ldr	r3, [sp, #4]
 8008e4a:	3b04      	subs	r3, #4
 8008e4c:	429d      	cmp	r5, r3
 8008e4e:	461a      	mov	r2, r3
 8008e50:	d32f      	bcc.n	8008eb2 <quorem+0xfe>
 8008e52:	613c      	str	r4, [r7, #16]
 8008e54:	4638      	mov	r0, r7
 8008e56:	f001 f99d 	bl	800a194 <__mcmp>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	db25      	blt.n	8008eaa <quorem+0xf6>
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f04f 0c00 	mov.w	ip, #0
 8008e64:	3601      	adds	r6, #1
 8008e66:	f858 1b04 	ldr.w	r1, [r8], #4
 8008e6a:	f8d0 e000 	ldr.w	lr, [r0]
 8008e6e:	b28b      	uxth	r3, r1
 8008e70:	ebac 0303 	sub.w	r3, ip, r3
 8008e74:	fa1f f28e 	uxth.w	r2, lr
 8008e78:	4413      	add	r3, r2
 8008e7a:	0c0a      	lsrs	r2, r1, #16
 8008e7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e8a:	45c1      	cmp	r9, r8
 8008e8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e90:	f840 3b04 	str.w	r3, [r0], #4
 8008e94:	d2e7      	bcs.n	8008e66 <quorem+0xb2>
 8008e96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e9e:	b922      	cbnz	r2, 8008eaa <quorem+0xf6>
 8008ea0:	3b04      	subs	r3, #4
 8008ea2:	429d      	cmp	r5, r3
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	d30a      	bcc.n	8008ebe <quorem+0x10a>
 8008ea8:	613c      	str	r4, [r7, #16]
 8008eaa:	4630      	mov	r0, r6
 8008eac:	b003      	add	sp, #12
 8008eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb2:	6812      	ldr	r2, [r2, #0]
 8008eb4:	3b04      	subs	r3, #4
 8008eb6:	2a00      	cmp	r2, #0
 8008eb8:	d1cb      	bne.n	8008e52 <quorem+0x9e>
 8008eba:	3c01      	subs	r4, #1
 8008ebc:	e7c6      	b.n	8008e4c <quorem+0x98>
 8008ebe:	6812      	ldr	r2, [r2, #0]
 8008ec0:	3b04      	subs	r3, #4
 8008ec2:	2a00      	cmp	r2, #0
 8008ec4:	d1f0      	bne.n	8008ea8 <quorem+0xf4>
 8008ec6:	3c01      	subs	r4, #1
 8008ec8:	e7eb      	b.n	8008ea2 <quorem+0xee>
 8008eca:	2000      	movs	r0, #0
 8008ecc:	e7ee      	b.n	8008eac <quorem+0xf8>
	...

08008ed0 <_dtoa_r>:
 8008ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	4616      	mov	r6, r2
 8008ed6:	461f      	mov	r7, r3
 8008ed8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008eda:	b099      	sub	sp, #100	; 0x64
 8008edc:	4605      	mov	r5, r0
 8008ede:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008ee2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008ee6:	b974      	cbnz	r4, 8008f06 <_dtoa_r+0x36>
 8008ee8:	2010      	movs	r0, #16
 8008eea:	f000 feb7 	bl	8009c5c <malloc>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	6268      	str	r0, [r5, #36]	; 0x24
 8008ef2:	b920      	cbnz	r0, 8008efe <_dtoa_r+0x2e>
 8008ef4:	21ea      	movs	r1, #234	; 0xea
 8008ef6:	4bae      	ldr	r3, [pc, #696]	; (80091b0 <_dtoa_r+0x2e0>)
 8008ef8:	48ae      	ldr	r0, [pc, #696]	; (80091b4 <_dtoa_r+0x2e4>)
 8008efa:	f001 fe33 	bl	800ab64 <__assert_func>
 8008efe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f02:	6004      	str	r4, [r0, #0]
 8008f04:	60c4      	str	r4, [r0, #12]
 8008f06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f08:	6819      	ldr	r1, [r3, #0]
 8008f0a:	b151      	cbz	r1, 8008f22 <_dtoa_r+0x52>
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4093      	lsls	r3, r2
 8008f12:	604a      	str	r2, [r1, #4]
 8008f14:	608b      	str	r3, [r1, #8]
 8008f16:	4628      	mov	r0, r5
 8008f18:	f000 ff02 	bl	8009d20 <_Bfree>
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f20:	601a      	str	r2, [r3, #0]
 8008f22:	1e3b      	subs	r3, r7, #0
 8008f24:	bfaf      	iteee	ge
 8008f26:	2300      	movge	r3, #0
 8008f28:	2201      	movlt	r2, #1
 8008f2a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f2e:	9305      	strlt	r3, [sp, #20]
 8008f30:	bfa8      	it	ge
 8008f32:	f8c8 3000 	strge.w	r3, [r8]
 8008f36:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008f3a:	4b9f      	ldr	r3, [pc, #636]	; (80091b8 <_dtoa_r+0x2e8>)
 8008f3c:	bfb8      	it	lt
 8008f3e:	f8c8 2000 	strlt.w	r2, [r8]
 8008f42:	ea33 0309 	bics.w	r3, r3, r9
 8008f46:	d119      	bne.n	8008f7c <_dtoa_r+0xac>
 8008f48:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f4e:	6013      	str	r3, [r2, #0]
 8008f50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f54:	4333      	orrs	r3, r6
 8008f56:	f000 8580 	beq.w	8009a5a <_dtoa_r+0xb8a>
 8008f5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f5c:	b953      	cbnz	r3, 8008f74 <_dtoa_r+0xa4>
 8008f5e:	4b97      	ldr	r3, [pc, #604]	; (80091bc <_dtoa_r+0x2ec>)
 8008f60:	e022      	b.n	8008fa8 <_dtoa_r+0xd8>
 8008f62:	4b97      	ldr	r3, [pc, #604]	; (80091c0 <_dtoa_r+0x2f0>)
 8008f64:	9308      	str	r3, [sp, #32]
 8008f66:	3308      	adds	r3, #8
 8008f68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f6a:	6013      	str	r3, [r2, #0]
 8008f6c:	9808      	ldr	r0, [sp, #32]
 8008f6e:	b019      	add	sp, #100	; 0x64
 8008f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f74:	4b91      	ldr	r3, [pc, #580]	; (80091bc <_dtoa_r+0x2ec>)
 8008f76:	9308      	str	r3, [sp, #32]
 8008f78:	3303      	adds	r3, #3
 8008f7a:	e7f5      	b.n	8008f68 <_dtoa_r+0x98>
 8008f7c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008f80:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008f84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f88:	2200      	movs	r2, #0
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	f7f7 fd16 	bl	80009bc <__aeabi_dcmpeq>
 8008f90:	4680      	mov	r8, r0
 8008f92:	b158      	cbz	r0, 8008fac <_dtoa_r+0xdc>
 8008f94:	2301      	movs	r3, #1
 8008f96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 8559 	beq.w	8009a54 <_dtoa_r+0xb84>
 8008fa2:	4888      	ldr	r0, [pc, #544]	; (80091c4 <_dtoa_r+0x2f4>)
 8008fa4:	6018      	str	r0, [r3, #0]
 8008fa6:	1e43      	subs	r3, r0, #1
 8008fa8:	9308      	str	r3, [sp, #32]
 8008faa:	e7df      	b.n	8008f6c <_dtoa_r+0x9c>
 8008fac:	ab16      	add	r3, sp, #88	; 0x58
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	ab17      	add	r3, sp, #92	; 0x5c
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008fba:	f001 f997 	bl	800a2ec <__d2b>
 8008fbe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008fc2:	4682      	mov	sl, r0
 8008fc4:	2c00      	cmp	r4, #0
 8008fc6:	d07e      	beq.n	80090c6 <_dtoa_r+0x1f6>
 8008fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fd6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008fda:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008fde:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	4b78      	ldr	r3, [pc, #480]	; (80091c8 <_dtoa_r+0x2f8>)
 8008fe6:	f7f7 f8c9 	bl	800017c <__aeabi_dsub>
 8008fea:	a36b      	add	r3, pc, #428	; (adr r3, 8009198 <_dtoa_r+0x2c8>)
 8008fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff0:	f7f7 fa7c 	bl	80004ec <__aeabi_dmul>
 8008ff4:	a36a      	add	r3, pc, #424	; (adr r3, 80091a0 <_dtoa_r+0x2d0>)
 8008ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffa:	f7f7 f8c1 	bl	8000180 <__adddf3>
 8008ffe:	4606      	mov	r6, r0
 8009000:	4620      	mov	r0, r4
 8009002:	460f      	mov	r7, r1
 8009004:	f7f7 fa08 	bl	8000418 <__aeabi_i2d>
 8009008:	a367      	add	r3, pc, #412	; (adr r3, 80091a8 <_dtoa_r+0x2d8>)
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	f7f7 fa6d 	bl	80004ec <__aeabi_dmul>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	4630      	mov	r0, r6
 8009018:	4639      	mov	r1, r7
 800901a:	f7f7 f8b1 	bl	8000180 <__adddf3>
 800901e:	4606      	mov	r6, r0
 8009020:	460f      	mov	r7, r1
 8009022:	f7f7 fd13 	bl	8000a4c <__aeabi_d2iz>
 8009026:	2200      	movs	r2, #0
 8009028:	4681      	mov	r9, r0
 800902a:	2300      	movs	r3, #0
 800902c:	4630      	mov	r0, r6
 800902e:	4639      	mov	r1, r7
 8009030:	f7f7 fcce 	bl	80009d0 <__aeabi_dcmplt>
 8009034:	b148      	cbz	r0, 800904a <_dtoa_r+0x17a>
 8009036:	4648      	mov	r0, r9
 8009038:	f7f7 f9ee 	bl	8000418 <__aeabi_i2d>
 800903c:	4632      	mov	r2, r6
 800903e:	463b      	mov	r3, r7
 8009040:	f7f7 fcbc 	bl	80009bc <__aeabi_dcmpeq>
 8009044:	b908      	cbnz	r0, 800904a <_dtoa_r+0x17a>
 8009046:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800904a:	f1b9 0f16 	cmp.w	r9, #22
 800904e:	d857      	bhi.n	8009100 <_dtoa_r+0x230>
 8009050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009054:	4b5d      	ldr	r3, [pc, #372]	; (80091cc <_dtoa_r+0x2fc>)
 8009056:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800905a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905e:	f7f7 fcb7 	bl	80009d0 <__aeabi_dcmplt>
 8009062:	2800      	cmp	r0, #0
 8009064:	d04e      	beq.n	8009104 <_dtoa_r+0x234>
 8009066:	2300      	movs	r3, #0
 8009068:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800906c:	930f      	str	r3, [sp, #60]	; 0x3c
 800906e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009070:	1b1c      	subs	r4, r3, r4
 8009072:	1e63      	subs	r3, r4, #1
 8009074:	9309      	str	r3, [sp, #36]	; 0x24
 8009076:	bf49      	itett	mi
 8009078:	f1c4 0301 	rsbmi	r3, r4, #1
 800907c:	2300      	movpl	r3, #0
 800907e:	9306      	strmi	r3, [sp, #24]
 8009080:	2300      	movmi	r3, #0
 8009082:	bf54      	ite	pl
 8009084:	9306      	strpl	r3, [sp, #24]
 8009086:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009088:	f1b9 0f00 	cmp.w	r9, #0
 800908c:	db3c      	blt.n	8009108 <_dtoa_r+0x238>
 800908e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009090:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009094:	444b      	add	r3, r9
 8009096:	9309      	str	r3, [sp, #36]	; 0x24
 8009098:	2300      	movs	r3, #0
 800909a:	930a      	str	r3, [sp, #40]	; 0x28
 800909c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800909e:	2b09      	cmp	r3, #9
 80090a0:	d86c      	bhi.n	800917c <_dtoa_r+0x2ac>
 80090a2:	2b05      	cmp	r3, #5
 80090a4:	bfc4      	itt	gt
 80090a6:	3b04      	subgt	r3, #4
 80090a8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80090aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090ac:	bfc8      	it	gt
 80090ae:	2400      	movgt	r4, #0
 80090b0:	f1a3 0302 	sub.w	r3, r3, #2
 80090b4:	bfd8      	it	le
 80090b6:	2401      	movle	r4, #1
 80090b8:	2b03      	cmp	r3, #3
 80090ba:	f200 808b 	bhi.w	80091d4 <_dtoa_r+0x304>
 80090be:	e8df f003 	tbb	[pc, r3]
 80090c2:	4f2d      	.short	0x4f2d
 80090c4:	5b4d      	.short	0x5b4d
 80090c6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80090ca:	441c      	add	r4, r3
 80090cc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80090d0:	2b20      	cmp	r3, #32
 80090d2:	bfc3      	ittte	gt
 80090d4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80090d8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80090dc:	fa09 f303 	lslgt.w	r3, r9, r3
 80090e0:	f1c3 0320 	rsble	r3, r3, #32
 80090e4:	bfc6      	itte	gt
 80090e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80090ea:	4318      	orrgt	r0, r3
 80090ec:	fa06 f003 	lslle.w	r0, r6, r3
 80090f0:	f7f7 f982 	bl	80003f8 <__aeabi_ui2d>
 80090f4:	2301      	movs	r3, #1
 80090f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80090fa:	3c01      	subs	r4, #1
 80090fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80090fe:	e770      	b.n	8008fe2 <_dtoa_r+0x112>
 8009100:	2301      	movs	r3, #1
 8009102:	e7b3      	b.n	800906c <_dtoa_r+0x19c>
 8009104:	900f      	str	r0, [sp, #60]	; 0x3c
 8009106:	e7b2      	b.n	800906e <_dtoa_r+0x19e>
 8009108:	9b06      	ldr	r3, [sp, #24]
 800910a:	eba3 0309 	sub.w	r3, r3, r9
 800910e:	9306      	str	r3, [sp, #24]
 8009110:	f1c9 0300 	rsb	r3, r9, #0
 8009114:	930a      	str	r3, [sp, #40]	; 0x28
 8009116:	2300      	movs	r3, #0
 8009118:	930e      	str	r3, [sp, #56]	; 0x38
 800911a:	e7bf      	b.n	800909c <_dtoa_r+0x1cc>
 800911c:	2300      	movs	r3, #0
 800911e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009120:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009122:	2b00      	cmp	r3, #0
 8009124:	dc59      	bgt.n	80091da <_dtoa_r+0x30a>
 8009126:	f04f 0b01 	mov.w	fp, #1
 800912a:	465b      	mov	r3, fp
 800912c:	f8cd b008 	str.w	fp, [sp, #8]
 8009130:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009134:	2200      	movs	r2, #0
 8009136:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009138:	6042      	str	r2, [r0, #4]
 800913a:	2204      	movs	r2, #4
 800913c:	f102 0614 	add.w	r6, r2, #20
 8009140:	429e      	cmp	r6, r3
 8009142:	6841      	ldr	r1, [r0, #4]
 8009144:	d94f      	bls.n	80091e6 <_dtoa_r+0x316>
 8009146:	4628      	mov	r0, r5
 8009148:	f000 fdaa 	bl	8009ca0 <_Balloc>
 800914c:	9008      	str	r0, [sp, #32]
 800914e:	2800      	cmp	r0, #0
 8009150:	d14d      	bne.n	80091ee <_dtoa_r+0x31e>
 8009152:	4602      	mov	r2, r0
 8009154:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009158:	4b1d      	ldr	r3, [pc, #116]	; (80091d0 <_dtoa_r+0x300>)
 800915a:	e6cd      	b.n	8008ef8 <_dtoa_r+0x28>
 800915c:	2301      	movs	r3, #1
 800915e:	e7de      	b.n	800911e <_dtoa_r+0x24e>
 8009160:	2300      	movs	r3, #0
 8009162:	930b      	str	r3, [sp, #44]	; 0x2c
 8009164:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009166:	eb09 0b03 	add.w	fp, r9, r3
 800916a:	f10b 0301 	add.w	r3, fp, #1
 800916e:	2b01      	cmp	r3, #1
 8009170:	9302      	str	r3, [sp, #8]
 8009172:	bfb8      	it	lt
 8009174:	2301      	movlt	r3, #1
 8009176:	e7dd      	b.n	8009134 <_dtoa_r+0x264>
 8009178:	2301      	movs	r3, #1
 800917a:	e7f2      	b.n	8009162 <_dtoa_r+0x292>
 800917c:	2401      	movs	r4, #1
 800917e:	2300      	movs	r3, #0
 8009180:	940b      	str	r4, [sp, #44]	; 0x2c
 8009182:	9322      	str	r3, [sp, #136]	; 0x88
 8009184:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009188:	2200      	movs	r2, #0
 800918a:	2312      	movs	r3, #18
 800918c:	f8cd b008 	str.w	fp, [sp, #8]
 8009190:	9223      	str	r2, [sp, #140]	; 0x8c
 8009192:	e7cf      	b.n	8009134 <_dtoa_r+0x264>
 8009194:	f3af 8000 	nop.w
 8009198:	636f4361 	.word	0x636f4361
 800919c:	3fd287a7 	.word	0x3fd287a7
 80091a0:	8b60c8b3 	.word	0x8b60c8b3
 80091a4:	3fc68a28 	.word	0x3fc68a28
 80091a8:	509f79fb 	.word	0x509f79fb
 80091ac:	3fd34413 	.word	0x3fd34413
 80091b0:	0800b111 	.word	0x0800b111
 80091b4:	0800b128 	.word	0x0800b128
 80091b8:	7ff00000 	.word	0x7ff00000
 80091bc:	0800b10d 	.word	0x0800b10d
 80091c0:	0800b104 	.word	0x0800b104
 80091c4:	0800b0e1 	.word	0x0800b0e1
 80091c8:	3ff80000 	.word	0x3ff80000
 80091cc:	0800b220 	.word	0x0800b220
 80091d0:	0800b187 	.word	0x0800b187
 80091d4:	2301      	movs	r3, #1
 80091d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80091d8:	e7d4      	b.n	8009184 <_dtoa_r+0x2b4>
 80091da:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80091de:	465b      	mov	r3, fp
 80091e0:	f8cd b008 	str.w	fp, [sp, #8]
 80091e4:	e7a6      	b.n	8009134 <_dtoa_r+0x264>
 80091e6:	3101      	adds	r1, #1
 80091e8:	6041      	str	r1, [r0, #4]
 80091ea:	0052      	lsls	r2, r2, #1
 80091ec:	e7a6      	b.n	800913c <_dtoa_r+0x26c>
 80091ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80091f0:	9a08      	ldr	r2, [sp, #32]
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	9b02      	ldr	r3, [sp, #8]
 80091f6:	2b0e      	cmp	r3, #14
 80091f8:	f200 80a8 	bhi.w	800934c <_dtoa_r+0x47c>
 80091fc:	2c00      	cmp	r4, #0
 80091fe:	f000 80a5 	beq.w	800934c <_dtoa_r+0x47c>
 8009202:	f1b9 0f00 	cmp.w	r9, #0
 8009206:	dd34      	ble.n	8009272 <_dtoa_r+0x3a2>
 8009208:	4a9a      	ldr	r2, [pc, #616]	; (8009474 <_dtoa_r+0x5a4>)
 800920a:	f009 030f 	and.w	r3, r9, #15
 800920e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009212:	f419 7f80 	tst.w	r9, #256	; 0x100
 8009216:	e9d3 3400 	ldrd	r3, r4, [r3]
 800921a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800921e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8009222:	d016      	beq.n	8009252 <_dtoa_r+0x382>
 8009224:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009228:	4b93      	ldr	r3, [pc, #588]	; (8009478 <_dtoa_r+0x5a8>)
 800922a:	2703      	movs	r7, #3
 800922c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009230:	f7f7 fa86 	bl	8000740 <__aeabi_ddiv>
 8009234:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009238:	f004 040f 	and.w	r4, r4, #15
 800923c:	4e8e      	ldr	r6, [pc, #568]	; (8009478 <_dtoa_r+0x5a8>)
 800923e:	b954      	cbnz	r4, 8009256 <_dtoa_r+0x386>
 8009240:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009244:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009248:	f7f7 fa7a 	bl	8000740 <__aeabi_ddiv>
 800924c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009250:	e029      	b.n	80092a6 <_dtoa_r+0x3d6>
 8009252:	2702      	movs	r7, #2
 8009254:	e7f2      	b.n	800923c <_dtoa_r+0x36c>
 8009256:	07e1      	lsls	r1, r4, #31
 8009258:	d508      	bpl.n	800926c <_dtoa_r+0x39c>
 800925a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800925e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009262:	f7f7 f943 	bl	80004ec <__aeabi_dmul>
 8009266:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800926a:	3701      	adds	r7, #1
 800926c:	1064      	asrs	r4, r4, #1
 800926e:	3608      	adds	r6, #8
 8009270:	e7e5      	b.n	800923e <_dtoa_r+0x36e>
 8009272:	f000 80a5 	beq.w	80093c0 <_dtoa_r+0x4f0>
 8009276:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800927a:	f1c9 0400 	rsb	r4, r9, #0
 800927e:	4b7d      	ldr	r3, [pc, #500]	; (8009474 <_dtoa_r+0x5a4>)
 8009280:	f004 020f 	and.w	r2, r4, #15
 8009284:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	f7f7 f92e 	bl	80004ec <__aeabi_dmul>
 8009290:	2702      	movs	r7, #2
 8009292:	2300      	movs	r3, #0
 8009294:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009298:	4e77      	ldr	r6, [pc, #476]	; (8009478 <_dtoa_r+0x5a8>)
 800929a:	1124      	asrs	r4, r4, #4
 800929c:	2c00      	cmp	r4, #0
 800929e:	f040 8084 	bne.w	80093aa <_dtoa_r+0x4da>
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1d2      	bne.n	800924c <_dtoa_r+0x37c>
 80092a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 808b 	beq.w	80093c4 <_dtoa_r+0x4f4>
 80092ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80092b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80092b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092ba:	2200      	movs	r2, #0
 80092bc:	4b6f      	ldr	r3, [pc, #444]	; (800947c <_dtoa_r+0x5ac>)
 80092be:	f7f7 fb87 	bl	80009d0 <__aeabi_dcmplt>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d07e      	beq.n	80093c4 <_dtoa_r+0x4f4>
 80092c6:	9b02      	ldr	r3, [sp, #8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d07b      	beq.n	80093c4 <_dtoa_r+0x4f4>
 80092cc:	f1bb 0f00 	cmp.w	fp, #0
 80092d0:	dd38      	ble.n	8009344 <_dtoa_r+0x474>
 80092d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092d6:	2200      	movs	r2, #0
 80092d8:	4b69      	ldr	r3, [pc, #420]	; (8009480 <_dtoa_r+0x5b0>)
 80092da:	f7f7 f907 	bl	80004ec <__aeabi_dmul>
 80092de:	465c      	mov	r4, fp
 80092e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092e4:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 80092e8:	3701      	adds	r7, #1
 80092ea:	4638      	mov	r0, r7
 80092ec:	f7f7 f894 	bl	8000418 <__aeabi_i2d>
 80092f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092f4:	f7f7 f8fa 	bl	80004ec <__aeabi_dmul>
 80092f8:	2200      	movs	r2, #0
 80092fa:	4b62      	ldr	r3, [pc, #392]	; (8009484 <_dtoa_r+0x5b4>)
 80092fc:	f7f6 ff40 	bl	8000180 <__adddf3>
 8009300:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009304:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009308:	9611      	str	r6, [sp, #68]	; 0x44
 800930a:	2c00      	cmp	r4, #0
 800930c:	d15d      	bne.n	80093ca <_dtoa_r+0x4fa>
 800930e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009312:	2200      	movs	r2, #0
 8009314:	4b5c      	ldr	r3, [pc, #368]	; (8009488 <_dtoa_r+0x5b8>)
 8009316:	f7f6 ff31 	bl	800017c <__aeabi_dsub>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009322:	4633      	mov	r3, r6
 8009324:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009326:	f7f7 fb71 	bl	8000a0c <__aeabi_dcmpgt>
 800932a:	2800      	cmp	r0, #0
 800932c:	f040 829e 	bne.w	800986c <_dtoa_r+0x99c>
 8009330:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009334:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009336:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800933a:	f7f7 fb49 	bl	80009d0 <__aeabi_dcmplt>
 800933e:	2800      	cmp	r0, #0
 8009340:	f040 8292 	bne.w	8009868 <_dtoa_r+0x998>
 8009344:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009348:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800934c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800934e:	2b00      	cmp	r3, #0
 8009350:	f2c0 8153 	blt.w	80095fa <_dtoa_r+0x72a>
 8009354:	f1b9 0f0e 	cmp.w	r9, #14
 8009358:	f300 814f 	bgt.w	80095fa <_dtoa_r+0x72a>
 800935c:	4b45      	ldr	r3, [pc, #276]	; (8009474 <_dtoa_r+0x5a4>)
 800935e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009362:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009366:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800936a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800936c:	2b00      	cmp	r3, #0
 800936e:	f280 80db 	bge.w	8009528 <_dtoa_r+0x658>
 8009372:	9b02      	ldr	r3, [sp, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	f300 80d7 	bgt.w	8009528 <_dtoa_r+0x658>
 800937a:	f040 8274 	bne.w	8009866 <_dtoa_r+0x996>
 800937e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009382:	2200      	movs	r2, #0
 8009384:	4b40      	ldr	r3, [pc, #256]	; (8009488 <_dtoa_r+0x5b8>)
 8009386:	f7f7 f8b1 	bl	80004ec <__aeabi_dmul>
 800938a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800938e:	f7f7 fb33 	bl	80009f8 <__aeabi_dcmpge>
 8009392:	9c02      	ldr	r4, [sp, #8]
 8009394:	4626      	mov	r6, r4
 8009396:	2800      	cmp	r0, #0
 8009398:	f040 824a 	bne.w	8009830 <_dtoa_r+0x960>
 800939c:	2331      	movs	r3, #49	; 0x31
 800939e:	9f08      	ldr	r7, [sp, #32]
 80093a0:	f109 0901 	add.w	r9, r9, #1
 80093a4:	f807 3b01 	strb.w	r3, [r7], #1
 80093a8:	e246      	b.n	8009838 <_dtoa_r+0x968>
 80093aa:	07e2      	lsls	r2, r4, #31
 80093ac:	d505      	bpl.n	80093ba <_dtoa_r+0x4ea>
 80093ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093b2:	f7f7 f89b 	bl	80004ec <__aeabi_dmul>
 80093b6:	2301      	movs	r3, #1
 80093b8:	3701      	adds	r7, #1
 80093ba:	1064      	asrs	r4, r4, #1
 80093bc:	3608      	adds	r6, #8
 80093be:	e76d      	b.n	800929c <_dtoa_r+0x3cc>
 80093c0:	2702      	movs	r7, #2
 80093c2:	e770      	b.n	80092a6 <_dtoa_r+0x3d6>
 80093c4:	46c8      	mov	r8, r9
 80093c6:	9c02      	ldr	r4, [sp, #8]
 80093c8:	e78f      	b.n	80092ea <_dtoa_r+0x41a>
 80093ca:	9908      	ldr	r1, [sp, #32]
 80093cc:	4b29      	ldr	r3, [pc, #164]	; (8009474 <_dtoa_r+0x5a4>)
 80093ce:	4421      	add	r1, r4
 80093d0:	9112      	str	r1, [sp, #72]	; 0x48
 80093d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80093d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80093dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093e0:	2900      	cmp	r1, #0
 80093e2:	d055      	beq.n	8009490 <_dtoa_r+0x5c0>
 80093e4:	2000      	movs	r0, #0
 80093e6:	4929      	ldr	r1, [pc, #164]	; (800948c <_dtoa_r+0x5bc>)
 80093e8:	f7f7 f9aa 	bl	8000740 <__aeabi_ddiv>
 80093ec:	463b      	mov	r3, r7
 80093ee:	4632      	mov	r2, r6
 80093f0:	f7f6 fec4 	bl	800017c <__aeabi_dsub>
 80093f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80093f8:	9f08      	ldr	r7, [sp, #32]
 80093fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093fe:	f7f7 fb25 	bl	8000a4c <__aeabi_d2iz>
 8009402:	4604      	mov	r4, r0
 8009404:	f7f7 f808 	bl	8000418 <__aeabi_i2d>
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009410:	f7f6 feb4 	bl	800017c <__aeabi_dsub>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	3430      	adds	r4, #48	; 0x30
 800941a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800941e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009422:	f807 4b01 	strb.w	r4, [r7], #1
 8009426:	f7f7 fad3 	bl	80009d0 <__aeabi_dcmplt>
 800942a:	2800      	cmp	r0, #0
 800942c:	d174      	bne.n	8009518 <_dtoa_r+0x648>
 800942e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009432:	2000      	movs	r0, #0
 8009434:	4911      	ldr	r1, [pc, #68]	; (800947c <_dtoa_r+0x5ac>)
 8009436:	f7f6 fea1 	bl	800017c <__aeabi_dsub>
 800943a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800943e:	f7f7 fac7 	bl	80009d0 <__aeabi_dcmplt>
 8009442:	2800      	cmp	r0, #0
 8009444:	f040 80b6 	bne.w	80095b4 <_dtoa_r+0x6e4>
 8009448:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800944a:	429f      	cmp	r7, r3
 800944c:	f43f af7a 	beq.w	8009344 <_dtoa_r+0x474>
 8009450:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009454:	2200      	movs	r2, #0
 8009456:	4b0a      	ldr	r3, [pc, #40]	; (8009480 <_dtoa_r+0x5b0>)
 8009458:	f7f7 f848 	bl	80004ec <__aeabi_dmul>
 800945c:	2200      	movs	r2, #0
 800945e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009466:	4b06      	ldr	r3, [pc, #24]	; (8009480 <_dtoa_r+0x5b0>)
 8009468:	f7f7 f840 	bl	80004ec <__aeabi_dmul>
 800946c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009470:	e7c3      	b.n	80093fa <_dtoa_r+0x52a>
 8009472:	bf00      	nop
 8009474:	0800b220 	.word	0x0800b220
 8009478:	0800b1f8 	.word	0x0800b1f8
 800947c:	3ff00000 	.word	0x3ff00000
 8009480:	40240000 	.word	0x40240000
 8009484:	401c0000 	.word	0x401c0000
 8009488:	40140000 	.word	0x40140000
 800948c:	3fe00000 	.word	0x3fe00000
 8009490:	4630      	mov	r0, r6
 8009492:	4639      	mov	r1, r7
 8009494:	f7f7 f82a 	bl	80004ec <__aeabi_dmul>
 8009498:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800949a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800949e:	9c08      	ldr	r4, [sp, #32]
 80094a0:	9314      	str	r3, [sp, #80]	; 0x50
 80094a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094a6:	f7f7 fad1 	bl	8000a4c <__aeabi_d2iz>
 80094aa:	9015      	str	r0, [sp, #84]	; 0x54
 80094ac:	f7f6 ffb4 	bl	8000418 <__aeabi_i2d>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094b8:	f7f6 fe60 	bl	800017c <__aeabi_dsub>
 80094bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094be:	4606      	mov	r6, r0
 80094c0:	3330      	adds	r3, #48	; 0x30
 80094c2:	f804 3b01 	strb.w	r3, [r4], #1
 80094c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094c8:	460f      	mov	r7, r1
 80094ca:	429c      	cmp	r4, r3
 80094cc:	f04f 0200 	mov.w	r2, #0
 80094d0:	d124      	bne.n	800951c <_dtoa_r+0x64c>
 80094d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80094d6:	4bb3      	ldr	r3, [pc, #716]	; (80097a4 <_dtoa_r+0x8d4>)
 80094d8:	f7f6 fe52 	bl	8000180 <__adddf3>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	4630      	mov	r0, r6
 80094e2:	4639      	mov	r1, r7
 80094e4:	f7f7 fa92 	bl	8000a0c <__aeabi_dcmpgt>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d162      	bne.n	80095b2 <_dtoa_r+0x6e2>
 80094ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094f0:	2000      	movs	r0, #0
 80094f2:	49ac      	ldr	r1, [pc, #688]	; (80097a4 <_dtoa_r+0x8d4>)
 80094f4:	f7f6 fe42 	bl	800017c <__aeabi_dsub>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	4630      	mov	r0, r6
 80094fe:	4639      	mov	r1, r7
 8009500:	f7f7 fa66 	bl	80009d0 <__aeabi_dcmplt>
 8009504:	2800      	cmp	r0, #0
 8009506:	f43f af1d 	beq.w	8009344 <_dtoa_r+0x474>
 800950a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800950c:	1e7b      	subs	r3, r7, #1
 800950e:	9314      	str	r3, [sp, #80]	; 0x50
 8009510:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009514:	2b30      	cmp	r3, #48	; 0x30
 8009516:	d0f8      	beq.n	800950a <_dtoa_r+0x63a>
 8009518:	46c1      	mov	r9, r8
 800951a:	e03a      	b.n	8009592 <_dtoa_r+0x6c2>
 800951c:	4ba2      	ldr	r3, [pc, #648]	; (80097a8 <_dtoa_r+0x8d8>)
 800951e:	f7f6 ffe5 	bl	80004ec <__aeabi_dmul>
 8009522:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009526:	e7bc      	b.n	80094a2 <_dtoa_r+0x5d2>
 8009528:	9f08      	ldr	r7, [sp, #32]
 800952a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800952e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009532:	f7f7 f905 	bl	8000740 <__aeabi_ddiv>
 8009536:	f7f7 fa89 	bl	8000a4c <__aeabi_d2iz>
 800953a:	4604      	mov	r4, r0
 800953c:	f7f6 ff6c 	bl	8000418 <__aeabi_i2d>
 8009540:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009544:	f7f6 ffd2 	bl	80004ec <__aeabi_dmul>
 8009548:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800954c:	460b      	mov	r3, r1
 800954e:	4602      	mov	r2, r0
 8009550:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009554:	f7f6 fe12 	bl	800017c <__aeabi_dsub>
 8009558:	f807 6b01 	strb.w	r6, [r7], #1
 800955c:	9e08      	ldr	r6, [sp, #32]
 800955e:	9b02      	ldr	r3, [sp, #8]
 8009560:	1bbe      	subs	r6, r7, r6
 8009562:	42b3      	cmp	r3, r6
 8009564:	d13a      	bne.n	80095dc <_dtoa_r+0x70c>
 8009566:	4602      	mov	r2, r0
 8009568:	460b      	mov	r3, r1
 800956a:	f7f6 fe09 	bl	8000180 <__adddf3>
 800956e:	4602      	mov	r2, r0
 8009570:	460b      	mov	r3, r1
 8009572:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009576:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800957a:	f7f7 fa47 	bl	8000a0c <__aeabi_dcmpgt>
 800957e:	bb58      	cbnz	r0, 80095d8 <_dtoa_r+0x708>
 8009580:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009588:	f7f7 fa18 	bl	80009bc <__aeabi_dcmpeq>
 800958c:	b108      	cbz	r0, 8009592 <_dtoa_r+0x6c2>
 800958e:	07e1      	lsls	r1, r4, #31
 8009590:	d422      	bmi.n	80095d8 <_dtoa_r+0x708>
 8009592:	4628      	mov	r0, r5
 8009594:	4651      	mov	r1, sl
 8009596:	f000 fbc3 	bl	8009d20 <_Bfree>
 800959a:	2300      	movs	r3, #0
 800959c:	703b      	strb	r3, [r7, #0]
 800959e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80095a0:	f109 0001 	add.w	r0, r9, #1
 80095a4:	6018      	str	r0, [r3, #0]
 80095a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f43f acdf 	beq.w	8008f6c <_dtoa_r+0x9c>
 80095ae:	601f      	str	r7, [r3, #0]
 80095b0:	e4dc      	b.n	8008f6c <_dtoa_r+0x9c>
 80095b2:	4627      	mov	r7, r4
 80095b4:	463b      	mov	r3, r7
 80095b6:	461f      	mov	r7, r3
 80095b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095bc:	2a39      	cmp	r2, #57	; 0x39
 80095be:	d107      	bne.n	80095d0 <_dtoa_r+0x700>
 80095c0:	9a08      	ldr	r2, [sp, #32]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d1f7      	bne.n	80095b6 <_dtoa_r+0x6e6>
 80095c6:	2230      	movs	r2, #48	; 0x30
 80095c8:	9908      	ldr	r1, [sp, #32]
 80095ca:	f108 0801 	add.w	r8, r8, #1
 80095ce:	700a      	strb	r2, [r1, #0]
 80095d0:	781a      	ldrb	r2, [r3, #0]
 80095d2:	3201      	adds	r2, #1
 80095d4:	701a      	strb	r2, [r3, #0]
 80095d6:	e79f      	b.n	8009518 <_dtoa_r+0x648>
 80095d8:	46c8      	mov	r8, r9
 80095da:	e7eb      	b.n	80095b4 <_dtoa_r+0x6e4>
 80095dc:	2200      	movs	r2, #0
 80095de:	4b72      	ldr	r3, [pc, #456]	; (80097a8 <_dtoa_r+0x8d8>)
 80095e0:	f7f6 ff84 	bl	80004ec <__aeabi_dmul>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80095ec:	2200      	movs	r2, #0
 80095ee:	2300      	movs	r3, #0
 80095f0:	f7f7 f9e4 	bl	80009bc <__aeabi_dcmpeq>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d098      	beq.n	800952a <_dtoa_r+0x65a>
 80095f8:	e7cb      	b.n	8009592 <_dtoa_r+0x6c2>
 80095fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	f000 80cd 	beq.w	800979c <_dtoa_r+0x8cc>
 8009602:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009604:	2a01      	cmp	r2, #1
 8009606:	f300 80af 	bgt.w	8009768 <_dtoa_r+0x898>
 800960a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800960c:	2a00      	cmp	r2, #0
 800960e:	f000 80a7 	beq.w	8009760 <_dtoa_r+0x890>
 8009612:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009616:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009618:	9f06      	ldr	r7, [sp, #24]
 800961a:	9a06      	ldr	r2, [sp, #24]
 800961c:	2101      	movs	r1, #1
 800961e:	441a      	add	r2, r3
 8009620:	9206      	str	r2, [sp, #24]
 8009622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009624:	4628      	mov	r0, r5
 8009626:	441a      	add	r2, r3
 8009628:	9209      	str	r2, [sp, #36]	; 0x24
 800962a:	f000 fc33 	bl	8009e94 <__i2b>
 800962e:	4606      	mov	r6, r0
 8009630:	2f00      	cmp	r7, #0
 8009632:	dd0c      	ble.n	800964e <_dtoa_r+0x77e>
 8009634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009636:	2b00      	cmp	r3, #0
 8009638:	dd09      	ble.n	800964e <_dtoa_r+0x77e>
 800963a:	42bb      	cmp	r3, r7
 800963c:	bfa8      	it	ge
 800963e:	463b      	movge	r3, r7
 8009640:	9a06      	ldr	r2, [sp, #24]
 8009642:	1aff      	subs	r7, r7, r3
 8009644:	1ad2      	subs	r2, r2, r3
 8009646:	9206      	str	r2, [sp, #24]
 8009648:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	9309      	str	r3, [sp, #36]	; 0x24
 800964e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009650:	b1f3      	cbz	r3, 8009690 <_dtoa_r+0x7c0>
 8009652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 80a9 	beq.w	80097ac <_dtoa_r+0x8dc>
 800965a:	2c00      	cmp	r4, #0
 800965c:	dd10      	ble.n	8009680 <_dtoa_r+0x7b0>
 800965e:	4631      	mov	r1, r6
 8009660:	4622      	mov	r2, r4
 8009662:	4628      	mov	r0, r5
 8009664:	f000 fcd0 	bl	800a008 <__pow5mult>
 8009668:	4652      	mov	r2, sl
 800966a:	4601      	mov	r1, r0
 800966c:	4606      	mov	r6, r0
 800966e:	4628      	mov	r0, r5
 8009670:	f000 fc26 	bl	8009ec0 <__multiply>
 8009674:	4680      	mov	r8, r0
 8009676:	4651      	mov	r1, sl
 8009678:	4628      	mov	r0, r5
 800967a:	f000 fb51 	bl	8009d20 <_Bfree>
 800967e:	46c2      	mov	sl, r8
 8009680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009682:	1b1a      	subs	r2, r3, r4
 8009684:	d004      	beq.n	8009690 <_dtoa_r+0x7c0>
 8009686:	4651      	mov	r1, sl
 8009688:	4628      	mov	r0, r5
 800968a:	f000 fcbd 	bl	800a008 <__pow5mult>
 800968e:	4682      	mov	sl, r0
 8009690:	2101      	movs	r1, #1
 8009692:	4628      	mov	r0, r5
 8009694:	f000 fbfe 	bl	8009e94 <__i2b>
 8009698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800969a:	4604      	mov	r4, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	f340 8087 	ble.w	80097b0 <_dtoa_r+0x8e0>
 80096a2:	461a      	mov	r2, r3
 80096a4:	4601      	mov	r1, r0
 80096a6:	4628      	mov	r0, r5
 80096a8:	f000 fcae 	bl	800a008 <__pow5mult>
 80096ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096ae:	4604      	mov	r4, r0
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	f340 8080 	ble.w	80097b6 <_dtoa_r+0x8e6>
 80096b6:	f04f 0800 	mov.w	r8, #0
 80096ba:	6923      	ldr	r3, [r4, #16]
 80096bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096c0:	6918      	ldr	r0, [r3, #16]
 80096c2:	f000 fb99 	bl	8009df8 <__hi0bits>
 80096c6:	f1c0 0020 	rsb	r0, r0, #32
 80096ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096cc:	4418      	add	r0, r3
 80096ce:	f010 001f 	ands.w	r0, r0, #31
 80096d2:	f000 8092 	beq.w	80097fa <_dtoa_r+0x92a>
 80096d6:	f1c0 0320 	rsb	r3, r0, #32
 80096da:	2b04      	cmp	r3, #4
 80096dc:	f340 808a 	ble.w	80097f4 <_dtoa_r+0x924>
 80096e0:	f1c0 001c 	rsb	r0, r0, #28
 80096e4:	9b06      	ldr	r3, [sp, #24]
 80096e6:	4407      	add	r7, r0
 80096e8:	4403      	add	r3, r0
 80096ea:	9306      	str	r3, [sp, #24]
 80096ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ee:	4403      	add	r3, r0
 80096f0:	9309      	str	r3, [sp, #36]	; 0x24
 80096f2:	9b06      	ldr	r3, [sp, #24]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	dd05      	ble.n	8009704 <_dtoa_r+0x834>
 80096f8:	4651      	mov	r1, sl
 80096fa:	461a      	mov	r2, r3
 80096fc:	4628      	mov	r0, r5
 80096fe:	f000 fcdd 	bl	800a0bc <__lshift>
 8009702:	4682      	mov	sl, r0
 8009704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009706:	2b00      	cmp	r3, #0
 8009708:	dd05      	ble.n	8009716 <_dtoa_r+0x846>
 800970a:	4621      	mov	r1, r4
 800970c:	461a      	mov	r2, r3
 800970e:	4628      	mov	r0, r5
 8009710:	f000 fcd4 	bl	800a0bc <__lshift>
 8009714:	4604      	mov	r4, r0
 8009716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009718:	2b00      	cmp	r3, #0
 800971a:	d070      	beq.n	80097fe <_dtoa_r+0x92e>
 800971c:	4621      	mov	r1, r4
 800971e:	4650      	mov	r0, sl
 8009720:	f000 fd38 	bl	800a194 <__mcmp>
 8009724:	2800      	cmp	r0, #0
 8009726:	da6a      	bge.n	80097fe <_dtoa_r+0x92e>
 8009728:	2300      	movs	r3, #0
 800972a:	4651      	mov	r1, sl
 800972c:	220a      	movs	r2, #10
 800972e:	4628      	mov	r0, r5
 8009730:	f000 fb18 	bl	8009d64 <__multadd>
 8009734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009736:	4682      	mov	sl, r0
 8009738:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 8193 	beq.w	8009a68 <_dtoa_r+0xb98>
 8009742:	4631      	mov	r1, r6
 8009744:	2300      	movs	r3, #0
 8009746:	220a      	movs	r2, #10
 8009748:	4628      	mov	r0, r5
 800974a:	f000 fb0b 	bl	8009d64 <__multadd>
 800974e:	f1bb 0f00 	cmp.w	fp, #0
 8009752:	4606      	mov	r6, r0
 8009754:	f300 8093 	bgt.w	800987e <_dtoa_r+0x9ae>
 8009758:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800975a:	2b02      	cmp	r3, #2
 800975c:	dc57      	bgt.n	800980e <_dtoa_r+0x93e>
 800975e:	e08e      	b.n	800987e <_dtoa_r+0x9ae>
 8009760:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009762:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009766:	e756      	b.n	8009616 <_dtoa_r+0x746>
 8009768:	9b02      	ldr	r3, [sp, #8]
 800976a:	1e5c      	subs	r4, r3, #1
 800976c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800976e:	42a3      	cmp	r3, r4
 8009770:	bfb7      	itett	lt
 8009772:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009774:	1b1c      	subge	r4, r3, r4
 8009776:	1ae2      	sublt	r2, r4, r3
 8009778:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800977a:	bfbe      	ittt	lt
 800977c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800977e:	189b      	addlt	r3, r3, r2
 8009780:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009782:	9b02      	ldr	r3, [sp, #8]
 8009784:	bfb8      	it	lt
 8009786:	2400      	movlt	r4, #0
 8009788:	2b00      	cmp	r3, #0
 800978a:	bfbb      	ittet	lt
 800978c:	9b06      	ldrlt	r3, [sp, #24]
 800978e:	9a02      	ldrlt	r2, [sp, #8]
 8009790:	9f06      	ldrge	r7, [sp, #24]
 8009792:	1a9f      	sublt	r7, r3, r2
 8009794:	bfac      	ite	ge
 8009796:	9b02      	ldrge	r3, [sp, #8]
 8009798:	2300      	movlt	r3, #0
 800979a:	e73e      	b.n	800961a <_dtoa_r+0x74a>
 800979c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800979e:	9f06      	ldr	r7, [sp, #24]
 80097a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80097a2:	e745      	b.n	8009630 <_dtoa_r+0x760>
 80097a4:	3fe00000 	.word	0x3fe00000
 80097a8:	40240000 	.word	0x40240000
 80097ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097ae:	e76a      	b.n	8009686 <_dtoa_r+0x7b6>
 80097b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	dc19      	bgt.n	80097ea <_dtoa_r+0x91a>
 80097b6:	9b04      	ldr	r3, [sp, #16]
 80097b8:	b9bb      	cbnz	r3, 80097ea <_dtoa_r+0x91a>
 80097ba:	9b05      	ldr	r3, [sp, #20]
 80097bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097c0:	b99b      	cbnz	r3, 80097ea <_dtoa_r+0x91a>
 80097c2:	9b05      	ldr	r3, [sp, #20]
 80097c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097c8:	0d1b      	lsrs	r3, r3, #20
 80097ca:	051b      	lsls	r3, r3, #20
 80097cc:	b183      	cbz	r3, 80097f0 <_dtoa_r+0x920>
 80097ce:	f04f 0801 	mov.w	r8, #1
 80097d2:	9b06      	ldr	r3, [sp, #24]
 80097d4:	3301      	adds	r3, #1
 80097d6:	9306      	str	r3, [sp, #24]
 80097d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097da:	3301      	adds	r3, #1
 80097dc:	9309      	str	r3, [sp, #36]	; 0x24
 80097de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f47f af6a 	bne.w	80096ba <_dtoa_r+0x7ea>
 80097e6:	2001      	movs	r0, #1
 80097e8:	e76f      	b.n	80096ca <_dtoa_r+0x7fa>
 80097ea:	f04f 0800 	mov.w	r8, #0
 80097ee:	e7f6      	b.n	80097de <_dtoa_r+0x90e>
 80097f0:	4698      	mov	r8, r3
 80097f2:	e7f4      	b.n	80097de <_dtoa_r+0x90e>
 80097f4:	f43f af7d 	beq.w	80096f2 <_dtoa_r+0x822>
 80097f8:	4618      	mov	r0, r3
 80097fa:	301c      	adds	r0, #28
 80097fc:	e772      	b.n	80096e4 <_dtoa_r+0x814>
 80097fe:	9b02      	ldr	r3, [sp, #8]
 8009800:	2b00      	cmp	r3, #0
 8009802:	dc36      	bgt.n	8009872 <_dtoa_r+0x9a2>
 8009804:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009806:	2b02      	cmp	r3, #2
 8009808:	dd33      	ble.n	8009872 <_dtoa_r+0x9a2>
 800980a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800980e:	f1bb 0f00 	cmp.w	fp, #0
 8009812:	d10d      	bne.n	8009830 <_dtoa_r+0x960>
 8009814:	4621      	mov	r1, r4
 8009816:	465b      	mov	r3, fp
 8009818:	2205      	movs	r2, #5
 800981a:	4628      	mov	r0, r5
 800981c:	f000 faa2 	bl	8009d64 <__multadd>
 8009820:	4601      	mov	r1, r0
 8009822:	4604      	mov	r4, r0
 8009824:	4650      	mov	r0, sl
 8009826:	f000 fcb5 	bl	800a194 <__mcmp>
 800982a:	2800      	cmp	r0, #0
 800982c:	f73f adb6 	bgt.w	800939c <_dtoa_r+0x4cc>
 8009830:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009832:	9f08      	ldr	r7, [sp, #32]
 8009834:	ea6f 0903 	mvn.w	r9, r3
 8009838:	f04f 0800 	mov.w	r8, #0
 800983c:	4621      	mov	r1, r4
 800983e:	4628      	mov	r0, r5
 8009840:	f000 fa6e 	bl	8009d20 <_Bfree>
 8009844:	2e00      	cmp	r6, #0
 8009846:	f43f aea4 	beq.w	8009592 <_dtoa_r+0x6c2>
 800984a:	f1b8 0f00 	cmp.w	r8, #0
 800984e:	d005      	beq.n	800985c <_dtoa_r+0x98c>
 8009850:	45b0      	cmp	r8, r6
 8009852:	d003      	beq.n	800985c <_dtoa_r+0x98c>
 8009854:	4641      	mov	r1, r8
 8009856:	4628      	mov	r0, r5
 8009858:	f000 fa62 	bl	8009d20 <_Bfree>
 800985c:	4631      	mov	r1, r6
 800985e:	4628      	mov	r0, r5
 8009860:	f000 fa5e 	bl	8009d20 <_Bfree>
 8009864:	e695      	b.n	8009592 <_dtoa_r+0x6c2>
 8009866:	2400      	movs	r4, #0
 8009868:	4626      	mov	r6, r4
 800986a:	e7e1      	b.n	8009830 <_dtoa_r+0x960>
 800986c:	46c1      	mov	r9, r8
 800986e:	4626      	mov	r6, r4
 8009870:	e594      	b.n	800939c <_dtoa_r+0x4cc>
 8009872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009874:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 80fc 	beq.w	8009a76 <_dtoa_r+0xba6>
 800987e:	2f00      	cmp	r7, #0
 8009880:	dd05      	ble.n	800988e <_dtoa_r+0x9be>
 8009882:	4631      	mov	r1, r6
 8009884:	463a      	mov	r2, r7
 8009886:	4628      	mov	r0, r5
 8009888:	f000 fc18 	bl	800a0bc <__lshift>
 800988c:	4606      	mov	r6, r0
 800988e:	f1b8 0f00 	cmp.w	r8, #0
 8009892:	d05c      	beq.n	800994e <_dtoa_r+0xa7e>
 8009894:	4628      	mov	r0, r5
 8009896:	6871      	ldr	r1, [r6, #4]
 8009898:	f000 fa02 	bl	8009ca0 <_Balloc>
 800989c:	4607      	mov	r7, r0
 800989e:	b928      	cbnz	r0, 80098ac <_dtoa_r+0x9dc>
 80098a0:	4602      	mov	r2, r0
 80098a2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80098a6:	4b7e      	ldr	r3, [pc, #504]	; (8009aa0 <_dtoa_r+0xbd0>)
 80098a8:	f7ff bb26 	b.w	8008ef8 <_dtoa_r+0x28>
 80098ac:	6932      	ldr	r2, [r6, #16]
 80098ae:	f106 010c 	add.w	r1, r6, #12
 80098b2:	3202      	adds	r2, #2
 80098b4:	0092      	lsls	r2, r2, #2
 80098b6:	300c      	adds	r0, #12
 80098b8:	f7fe fc93 	bl	80081e2 <memcpy>
 80098bc:	2201      	movs	r2, #1
 80098be:	4639      	mov	r1, r7
 80098c0:	4628      	mov	r0, r5
 80098c2:	f000 fbfb 	bl	800a0bc <__lshift>
 80098c6:	46b0      	mov	r8, r6
 80098c8:	4606      	mov	r6, r0
 80098ca:	9b08      	ldr	r3, [sp, #32]
 80098cc:	3301      	adds	r3, #1
 80098ce:	9302      	str	r3, [sp, #8]
 80098d0:	9b08      	ldr	r3, [sp, #32]
 80098d2:	445b      	add	r3, fp
 80098d4:	930a      	str	r3, [sp, #40]	; 0x28
 80098d6:	9b04      	ldr	r3, [sp, #16]
 80098d8:	f003 0301 	and.w	r3, r3, #1
 80098dc:	9309      	str	r3, [sp, #36]	; 0x24
 80098de:	9b02      	ldr	r3, [sp, #8]
 80098e0:	4621      	mov	r1, r4
 80098e2:	4650      	mov	r0, sl
 80098e4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80098e8:	f7ff fa64 	bl	8008db4 <quorem>
 80098ec:	4603      	mov	r3, r0
 80098ee:	4641      	mov	r1, r8
 80098f0:	3330      	adds	r3, #48	; 0x30
 80098f2:	9004      	str	r0, [sp, #16]
 80098f4:	4650      	mov	r0, sl
 80098f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80098f8:	f000 fc4c 	bl	800a194 <__mcmp>
 80098fc:	4632      	mov	r2, r6
 80098fe:	9006      	str	r0, [sp, #24]
 8009900:	4621      	mov	r1, r4
 8009902:	4628      	mov	r0, r5
 8009904:	f000 fc62 	bl	800a1cc <__mdiff>
 8009908:	68c2      	ldr	r2, [r0, #12]
 800990a:	4607      	mov	r7, r0
 800990c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800990e:	bb02      	cbnz	r2, 8009952 <_dtoa_r+0xa82>
 8009910:	4601      	mov	r1, r0
 8009912:	4650      	mov	r0, sl
 8009914:	f000 fc3e 	bl	800a194 <__mcmp>
 8009918:	4602      	mov	r2, r0
 800991a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800991c:	4639      	mov	r1, r7
 800991e:	4628      	mov	r0, r5
 8009920:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009924:	f000 f9fc 	bl	8009d20 <_Bfree>
 8009928:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800992a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800992c:	9f02      	ldr	r7, [sp, #8]
 800992e:	ea43 0102 	orr.w	r1, r3, r2
 8009932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009934:	430b      	orrs	r3, r1
 8009936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009938:	d10d      	bne.n	8009956 <_dtoa_r+0xa86>
 800993a:	2b39      	cmp	r3, #57	; 0x39
 800993c:	d027      	beq.n	800998e <_dtoa_r+0xabe>
 800993e:	9a06      	ldr	r2, [sp, #24]
 8009940:	2a00      	cmp	r2, #0
 8009942:	dd01      	ble.n	8009948 <_dtoa_r+0xa78>
 8009944:	9b04      	ldr	r3, [sp, #16]
 8009946:	3331      	adds	r3, #49	; 0x31
 8009948:	f88b 3000 	strb.w	r3, [fp]
 800994c:	e776      	b.n	800983c <_dtoa_r+0x96c>
 800994e:	4630      	mov	r0, r6
 8009950:	e7b9      	b.n	80098c6 <_dtoa_r+0x9f6>
 8009952:	2201      	movs	r2, #1
 8009954:	e7e2      	b.n	800991c <_dtoa_r+0xa4c>
 8009956:	9906      	ldr	r1, [sp, #24]
 8009958:	2900      	cmp	r1, #0
 800995a:	db04      	blt.n	8009966 <_dtoa_r+0xa96>
 800995c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800995e:	4301      	orrs	r1, r0
 8009960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009962:	4301      	orrs	r1, r0
 8009964:	d120      	bne.n	80099a8 <_dtoa_r+0xad8>
 8009966:	2a00      	cmp	r2, #0
 8009968:	ddee      	ble.n	8009948 <_dtoa_r+0xa78>
 800996a:	4651      	mov	r1, sl
 800996c:	2201      	movs	r2, #1
 800996e:	4628      	mov	r0, r5
 8009970:	9302      	str	r3, [sp, #8]
 8009972:	f000 fba3 	bl	800a0bc <__lshift>
 8009976:	4621      	mov	r1, r4
 8009978:	4682      	mov	sl, r0
 800997a:	f000 fc0b 	bl	800a194 <__mcmp>
 800997e:	2800      	cmp	r0, #0
 8009980:	9b02      	ldr	r3, [sp, #8]
 8009982:	dc02      	bgt.n	800998a <_dtoa_r+0xaba>
 8009984:	d1e0      	bne.n	8009948 <_dtoa_r+0xa78>
 8009986:	07da      	lsls	r2, r3, #31
 8009988:	d5de      	bpl.n	8009948 <_dtoa_r+0xa78>
 800998a:	2b39      	cmp	r3, #57	; 0x39
 800998c:	d1da      	bne.n	8009944 <_dtoa_r+0xa74>
 800998e:	2339      	movs	r3, #57	; 0x39
 8009990:	f88b 3000 	strb.w	r3, [fp]
 8009994:	463b      	mov	r3, r7
 8009996:	461f      	mov	r7, r3
 8009998:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800999c:	3b01      	subs	r3, #1
 800999e:	2a39      	cmp	r2, #57	; 0x39
 80099a0:	d050      	beq.n	8009a44 <_dtoa_r+0xb74>
 80099a2:	3201      	adds	r2, #1
 80099a4:	701a      	strb	r2, [r3, #0]
 80099a6:	e749      	b.n	800983c <_dtoa_r+0x96c>
 80099a8:	2a00      	cmp	r2, #0
 80099aa:	dd03      	ble.n	80099b4 <_dtoa_r+0xae4>
 80099ac:	2b39      	cmp	r3, #57	; 0x39
 80099ae:	d0ee      	beq.n	800998e <_dtoa_r+0xabe>
 80099b0:	3301      	adds	r3, #1
 80099b2:	e7c9      	b.n	8009948 <_dtoa_r+0xa78>
 80099b4:	9a02      	ldr	r2, [sp, #8]
 80099b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80099b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80099bc:	428a      	cmp	r2, r1
 80099be:	d02a      	beq.n	8009a16 <_dtoa_r+0xb46>
 80099c0:	4651      	mov	r1, sl
 80099c2:	2300      	movs	r3, #0
 80099c4:	220a      	movs	r2, #10
 80099c6:	4628      	mov	r0, r5
 80099c8:	f000 f9cc 	bl	8009d64 <__multadd>
 80099cc:	45b0      	cmp	r8, r6
 80099ce:	4682      	mov	sl, r0
 80099d0:	f04f 0300 	mov.w	r3, #0
 80099d4:	f04f 020a 	mov.w	r2, #10
 80099d8:	4641      	mov	r1, r8
 80099da:	4628      	mov	r0, r5
 80099dc:	d107      	bne.n	80099ee <_dtoa_r+0xb1e>
 80099de:	f000 f9c1 	bl	8009d64 <__multadd>
 80099e2:	4680      	mov	r8, r0
 80099e4:	4606      	mov	r6, r0
 80099e6:	9b02      	ldr	r3, [sp, #8]
 80099e8:	3301      	adds	r3, #1
 80099ea:	9302      	str	r3, [sp, #8]
 80099ec:	e777      	b.n	80098de <_dtoa_r+0xa0e>
 80099ee:	f000 f9b9 	bl	8009d64 <__multadd>
 80099f2:	4631      	mov	r1, r6
 80099f4:	4680      	mov	r8, r0
 80099f6:	2300      	movs	r3, #0
 80099f8:	220a      	movs	r2, #10
 80099fa:	4628      	mov	r0, r5
 80099fc:	f000 f9b2 	bl	8009d64 <__multadd>
 8009a00:	4606      	mov	r6, r0
 8009a02:	e7f0      	b.n	80099e6 <_dtoa_r+0xb16>
 8009a04:	f1bb 0f00 	cmp.w	fp, #0
 8009a08:	bfcc      	ite	gt
 8009a0a:	465f      	movgt	r7, fp
 8009a0c:	2701      	movle	r7, #1
 8009a0e:	f04f 0800 	mov.w	r8, #0
 8009a12:	9a08      	ldr	r2, [sp, #32]
 8009a14:	4417      	add	r7, r2
 8009a16:	4651      	mov	r1, sl
 8009a18:	2201      	movs	r2, #1
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	9302      	str	r3, [sp, #8]
 8009a1e:	f000 fb4d 	bl	800a0bc <__lshift>
 8009a22:	4621      	mov	r1, r4
 8009a24:	4682      	mov	sl, r0
 8009a26:	f000 fbb5 	bl	800a194 <__mcmp>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	dcb2      	bgt.n	8009994 <_dtoa_r+0xac4>
 8009a2e:	d102      	bne.n	8009a36 <_dtoa_r+0xb66>
 8009a30:	9b02      	ldr	r3, [sp, #8]
 8009a32:	07db      	lsls	r3, r3, #31
 8009a34:	d4ae      	bmi.n	8009994 <_dtoa_r+0xac4>
 8009a36:	463b      	mov	r3, r7
 8009a38:	461f      	mov	r7, r3
 8009a3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a3e:	2a30      	cmp	r2, #48	; 0x30
 8009a40:	d0fa      	beq.n	8009a38 <_dtoa_r+0xb68>
 8009a42:	e6fb      	b.n	800983c <_dtoa_r+0x96c>
 8009a44:	9a08      	ldr	r2, [sp, #32]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d1a5      	bne.n	8009996 <_dtoa_r+0xac6>
 8009a4a:	2331      	movs	r3, #49	; 0x31
 8009a4c:	f109 0901 	add.w	r9, r9, #1
 8009a50:	7013      	strb	r3, [r2, #0]
 8009a52:	e6f3      	b.n	800983c <_dtoa_r+0x96c>
 8009a54:	4b13      	ldr	r3, [pc, #76]	; (8009aa4 <_dtoa_r+0xbd4>)
 8009a56:	f7ff baa7 	b.w	8008fa8 <_dtoa_r+0xd8>
 8009a5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f47f aa80 	bne.w	8008f62 <_dtoa_r+0x92>
 8009a62:	4b11      	ldr	r3, [pc, #68]	; (8009aa8 <_dtoa_r+0xbd8>)
 8009a64:	f7ff baa0 	b.w	8008fa8 <_dtoa_r+0xd8>
 8009a68:	f1bb 0f00 	cmp.w	fp, #0
 8009a6c:	dc03      	bgt.n	8009a76 <_dtoa_r+0xba6>
 8009a6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	f73f aecc 	bgt.w	800980e <_dtoa_r+0x93e>
 8009a76:	9f08      	ldr	r7, [sp, #32]
 8009a78:	4621      	mov	r1, r4
 8009a7a:	4650      	mov	r0, sl
 8009a7c:	f7ff f99a 	bl	8008db4 <quorem>
 8009a80:	9a08      	ldr	r2, [sp, #32]
 8009a82:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009a86:	f807 3b01 	strb.w	r3, [r7], #1
 8009a8a:	1aba      	subs	r2, r7, r2
 8009a8c:	4593      	cmp	fp, r2
 8009a8e:	ddb9      	ble.n	8009a04 <_dtoa_r+0xb34>
 8009a90:	4651      	mov	r1, sl
 8009a92:	2300      	movs	r3, #0
 8009a94:	220a      	movs	r2, #10
 8009a96:	4628      	mov	r0, r5
 8009a98:	f000 f964 	bl	8009d64 <__multadd>
 8009a9c:	4682      	mov	sl, r0
 8009a9e:	e7eb      	b.n	8009a78 <_dtoa_r+0xba8>
 8009aa0:	0800b187 	.word	0x0800b187
 8009aa4:	0800b0e0 	.word	0x0800b0e0
 8009aa8:	0800b104 	.word	0x0800b104

08009aac <__sflush_r>:
 8009aac:	898a      	ldrh	r2, [r1, #12]
 8009aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	0710      	lsls	r0, r2, #28
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	d458      	bmi.n	8009b6c <__sflush_r+0xc0>
 8009aba:	684b      	ldr	r3, [r1, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	dc05      	bgt.n	8009acc <__sflush_r+0x20>
 8009ac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	dc02      	bgt.n	8009acc <__sflush_r+0x20>
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ace:	2e00      	cmp	r6, #0
 8009ad0:	d0f9      	beq.n	8009ac6 <__sflush_r+0x1a>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ad8:	682f      	ldr	r7, [r5, #0]
 8009ada:	602b      	str	r3, [r5, #0]
 8009adc:	d032      	beq.n	8009b44 <__sflush_r+0x98>
 8009ade:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	075a      	lsls	r2, r3, #29
 8009ae4:	d505      	bpl.n	8009af2 <__sflush_r+0x46>
 8009ae6:	6863      	ldr	r3, [r4, #4]
 8009ae8:	1ac0      	subs	r0, r0, r3
 8009aea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009aec:	b10b      	cbz	r3, 8009af2 <__sflush_r+0x46>
 8009aee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009af0:	1ac0      	subs	r0, r0, r3
 8009af2:	2300      	movs	r3, #0
 8009af4:	4602      	mov	r2, r0
 8009af6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009af8:	4628      	mov	r0, r5
 8009afa:	6a21      	ldr	r1, [r4, #32]
 8009afc:	47b0      	blx	r6
 8009afe:	1c43      	adds	r3, r0, #1
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	d106      	bne.n	8009b12 <__sflush_r+0x66>
 8009b04:	6829      	ldr	r1, [r5, #0]
 8009b06:	291d      	cmp	r1, #29
 8009b08:	d82c      	bhi.n	8009b64 <__sflush_r+0xb8>
 8009b0a:	4a2a      	ldr	r2, [pc, #168]	; (8009bb4 <__sflush_r+0x108>)
 8009b0c:	40ca      	lsrs	r2, r1
 8009b0e:	07d6      	lsls	r6, r2, #31
 8009b10:	d528      	bpl.n	8009b64 <__sflush_r+0xb8>
 8009b12:	2200      	movs	r2, #0
 8009b14:	6062      	str	r2, [r4, #4]
 8009b16:	6922      	ldr	r2, [r4, #16]
 8009b18:	04d9      	lsls	r1, r3, #19
 8009b1a:	6022      	str	r2, [r4, #0]
 8009b1c:	d504      	bpl.n	8009b28 <__sflush_r+0x7c>
 8009b1e:	1c42      	adds	r2, r0, #1
 8009b20:	d101      	bne.n	8009b26 <__sflush_r+0x7a>
 8009b22:	682b      	ldr	r3, [r5, #0]
 8009b24:	b903      	cbnz	r3, 8009b28 <__sflush_r+0x7c>
 8009b26:	6560      	str	r0, [r4, #84]	; 0x54
 8009b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b2a:	602f      	str	r7, [r5, #0]
 8009b2c:	2900      	cmp	r1, #0
 8009b2e:	d0ca      	beq.n	8009ac6 <__sflush_r+0x1a>
 8009b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b34:	4299      	cmp	r1, r3
 8009b36:	d002      	beq.n	8009b3e <__sflush_r+0x92>
 8009b38:	4628      	mov	r0, r5
 8009b3a:	f000 fc41 	bl	800a3c0 <_free_r>
 8009b3e:	2000      	movs	r0, #0
 8009b40:	6360      	str	r0, [r4, #52]	; 0x34
 8009b42:	e7c1      	b.n	8009ac8 <__sflush_r+0x1c>
 8009b44:	6a21      	ldr	r1, [r4, #32]
 8009b46:	2301      	movs	r3, #1
 8009b48:	4628      	mov	r0, r5
 8009b4a:	47b0      	blx	r6
 8009b4c:	1c41      	adds	r1, r0, #1
 8009b4e:	d1c7      	bne.n	8009ae0 <__sflush_r+0x34>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d0c4      	beq.n	8009ae0 <__sflush_r+0x34>
 8009b56:	2b1d      	cmp	r3, #29
 8009b58:	d001      	beq.n	8009b5e <__sflush_r+0xb2>
 8009b5a:	2b16      	cmp	r3, #22
 8009b5c:	d101      	bne.n	8009b62 <__sflush_r+0xb6>
 8009b5e:	602f      	str	r7, [r5, #0]
 8009b60:	e7b1      	b.n	8009ac6 <__sflush_r+0x1a>
 8009b62:	89a3      	ldrh	r3, [r4, #12]
 8009b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b68:	81a3      	strh	r3, [r4, #12]
 8009b6a:	e7ad      	b.n	8009ac8 <__sflush_r+0x1c>
 8009b6c:	690f      	ldr	r7, [r1, #16]
 8009b6e:	2f00      	cmp	r7, #0
 8009b70:	d0a9      	beq.n	8009ac6 <__sflush_r+0x1a>
 8009b72:	0793      	lsls	r3, r2, #30
 8009b74:	bf18      	it	ne
 8009b76:	2300      	movne	r3, #0
 8009b78:	680e      	ldr	r6, [r1, #0]
 8009b7a:	bf08      	it	eq
 8009b7c:	694b      	ldreq	r3, [r1, #20]
 8009b7e:	eba6 0807 	sub.w	r8, r6, r7
 8009b82:	600f      	str	r7, [r1, #0]
 8009b84:	608b      	str	r3, [r1, #8]
 8009b86:	f1b8 0f00 	cmp.w	r8, #0
 8009b8a:	dd9c      	ble.n	8009ac6 <__sflush_r+0x1a>
 8009b8c:	4643      	mov	r3, r8
 8009b8e:	463a      	mov	r2, r7
 8009b90:	4628      	mov	r0, r5
 8009b92:	6a21      	ldr	r1, [r4, #32]
 8009b94:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b96:	47b0      	blx	r6
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	dc06      	bgt.n	8009baa <__sflush_r+0xfe>
 8009b9c:	89a3      	ldrh	r3, [r4, #12]
 8009b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ba6:	81a3      	strh	r3, [r4, #12]
 8009ba8:	e78e      	b.n	8009ac8 <__sflush_r+0x1c>
 8009baa:	4407      	add	r7, r0
 8009bac:	eba8 0800 	sub.w	r8, r8, r0
 8009bb0:	e7e9      	b.n	8009b86 <__sflush_r+0xda>
 8009bb2:	bf00      	nop
 8009bb4:	20400001 	.word	0x20400001

08009bb8 <_fflush_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	690b      	ldr	r3, [r1, #16]
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	b913      	cbnz	r3, 8009bc8 <_fflush_r+0x10>
 8009bc2:	2500      	movs	r5, #0
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	bd38      	pop	{r3, r4, r5, pc}
 8009bc8:	b118      	cbz	r0, 8009bd2 <_fflush_r+0x1a>
 8009bca:	6983      	ldr	r3, [r0, #24]
 8009bcc:	b90b      	cbnz	r3, 8009bd2 <_fflush_r+0x1a>
 8009bce:	f7fe fa43 	bl	8008058 <__sinit>
 8009bd2:	4b14      	ldr	r3, [pc, #80]	; (8009c24 <_fflush_r+0x6c>)
 8009bd4:	429c      	cmp	r4, r3
 8009bd6:	d11b      	bne.n	8009c10 <_fflush_r+0x58>
 8009bd8:	686c      	ldr	r4, [r5, #4]
 8009bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0ef      	beq.n	8009bc2 <_fflush_r+0xa>
 8009be2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009be4:	07d0      	lsls	r0, r2, #31
 8009be6:	d404      	bmi.n	8009bf2 <_fflush_r+0x3a>
 8009be8:	0599      	lsls	r1, r3, #22
 8009bea:	d402      	bmi.n	8009bf2 <_fflush_r+0x3a>
 8009bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bee:	f7fe faf6 	bl	80081de <__retarget_lock_acquire_recursive>
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	f7ff ff59 	bl	8009aac <__sflush_r>
 8009bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bfc:	4605      	mov	r5, r0
 8009bfe:	07da      	lsls	r2, r3, #31
 8009c00:	d4e0      	bmi.n	8009bc4 <_fflush_r+0xc>
 8009c02:	89a3      	ldrh	r3, [r4, #12]
 8009c04:	059b      	lsls	r3, r3, #22
 8009c06:	d4dd      	bmi.n	8009bc4 <_fflush_r+0xc>
 8009c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c0a:	f7fe fae9 	bl	80081e0 <__retarget_lock_release_recursive>
 8009c0e:	e7d9      	b.n	8009bc4 <_fflush_r+0xc>
 8009c10:	4b05      	ldr	r3, [pc, #20]	; (8009c28 <_fflush_r+0x70>)
 8009c12:	429c      	cmp	r4, r3
 8009c14:	d101      	bne.n	8009c1a <_fflush_r+0x62>
 8009c16:	68ac      	ldr	r4, [r5, #8]
 8009c18:	e7df      	b.n	8009bda <_fflush_r+0x22>
 8009c1a:	4b04      	ldr	r3, [pc, #16]	; (8009c2c <_fflush_r+0x74>)
 8009c1c:	429c      	cmp	r4, r3
 8009c1e:	bf08      	it	eq
 8009c20:	68ec      	ldreq	r4, [r5, #12]
 8009c22:	e7da      	b.n	8009bda <_fflush_r+0x22>
 8009c24:	0800b08c 	.word	0x0800b08c
 8009c28:	0800b0ac 	.word	0x0800b0ac
 8009c2c:	0800b06c 	.word	0x0800b06c

08009c30 <_localeconv_r>:
 8009c30:	4800      	ldr	r0, [pc, #0]	; (8009c34 <_localeconv_r+0x4>)
 8009c32:	4770      	bx	lr
 8009c34:	2000016c 	.word	0x2000016c

08009c38 <_lseek_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	4611      	mov	r1, r2
 8009c40:	2200      	movs	r2, #0
 8009c42:	4d05      	ldr	r5, [pc, #20]	; (8009c58 <_lseek_r+0x20>)
 8009c44:	602a      	str	r2, [r5, #0]
 8009c46:	461a      	mov	r2, r3
 8009c48:	f7f8 fcd4 	bl	80025f4 <_lseek>
 8009c4c:	1c43      	adds	r3, r0, #1
 8009c4e:	d102      	bne.n	8009c56 <_lseek_r+0x1e>
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	b103      	cbz	r3, 8009c56 <_lseek_r+0x1e>
 8009c54:	6023      	str	r3, [r4, #0]
 8009c56:	bd38      	pop	{r3, r4, r5, pc}
 8009c58:	20001ddc 	.word	0x20001ddc

08009c5c <malloc>:
 8009c5c:	4b02      	ldr	r3, [pc, #8]	; (8009c68 <malloc+0xc>)
 8009c5e:	4601      	mov	r1, r0
 8009c60:	6818      	ldr	r0, [r3, #0]
 8009c62:	f7fe bad5 	b.w	8008210 <_malloc_r>
 8009c66:	bf00      	nop
 8009c68:	20000018 	.word	0x20000018

08009c6c <memchr>:
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	b510      	push	{r4, lr}
 8009c70:	b2c9      	uxtb	r1, r1
 8009c72:	4402      	add	r2, r0
 8009c74:	4293      	cmp	r3, r2
 8009c76:	4618      	mov	r0, r3
 8009c78:	d101      	bne.n	8009c7e <memchr+0x12>
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	e003      	b.n	8009c86 <memchr+0x1a>
 8009c7e:	7804      	ldrb	r4, [r0, #0]
 8009c80:	3301      	adds	r3, #1
 8009c82:	428c      	cmp	r4, r1
 8009c84:	d1f6      	bne.n	8009c74 <memchr+0x8>
 8009c86:	bd10      	pop	{r4, pc}

08009c88 <__malloc_lock>:
 8009c88:	4801      	ldr	r0, [pc, #4]	; (8009c90 <__malloc_lock+0x8>)
 8009c8a:	f7fe baa8 	b.w	80081de <__retarget_lock_acquire_recursive>
 8009c8e:	bf00      	nop
 8009c90:	20001dd4 	.word	0x20001dd4

08009c94 <__malloc_unlock>:
 8009c94:	4801      	ldr	r0, [pc, #4]	; (8009c9c <__malloc_unlock+0x8>)
 8009c96:	f7fe baa3 	b.w	80081e0 <__retarget_lock_release_recursive>
 8009c9a:	bf00      	nop
 8009c9c:	20001dd4 	.word	0x20001dd4

08009ca0 <_Balloc>:
 8009ca0:	b570      	push	{r4, r5, r6, lr}
 8009ca2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	460d      	mov	r5, r1
 8009ca8:	b976      	cbnz	r6, 8009cc8 <_Balloc+0x28>
 8009caa:	2010      	movs	r0, #16
 8009cac:	f7ff ffd6 	bl	8009c5c <malloc>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	6260      	str	r0, [r4, #36]	; 0x24
 8009cb4:	b920      	cbnz	r0, 8009cc0 <_Balloc+0x20>
 8009cb6:	2166      	movs	r1, #102	; 0x66
 8009cb8:	4b17      	ldr	r3, [pc, #92]	; (8009d18 <_Balloc+0x78>)
 8009cba:	4818      	ldr	r0, [pc, #96]	; (8009d1c <_Balloc+0x7c>)
 8009cbc:	f000 ff52 	bl	800ab64 <__assert_func>
 8009cc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cc4:	6006      	str	r6, [r0, #0]
 8009cc6:	60c6      	str	r6, [r0, #12]
 8009cc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009cca:	68f3      	ldr	r3, [r6, #12]
 8009ccc:	b183      	cbz	r3, 8009cf0 <_Balloc+0x50>
 8009cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cd6:	b9b8      	cbnz	r0, 8009d08 <_Balloc+0x68>
 8009cd8:	2101      	movs	r1, #1
 8009cda:	fa01 f605 	lsl.w	r6, r1, r5
 8009cde:	1d72      	adds	r2, r6, #5
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	0092      	lsls	r2, r2, #2
 8009ce4:	f000 fb5e 	bl	800a3a4 <_calloc_r>
 8009ce8:	b160      	cbz	r0, 8009d04 <_Balloc+0x64>
 8009cea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cee:	e00e      	b.n	8009d0e <_Balloc+0x6e>
 8009cf0:	2221      	movs	r2, #33	; 0x21
 8009cf2:	2104      	movs	r1, #4
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f000 fb55 	bl	800a3a4 <_calloc_r>
 8009cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cfc:	60f0      	str	r0, [r6, #12]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1e4      	bne.n	8009cce <_Balloc+0x2e>
 8009d04:	2000      	movs	r0, #0
 8009d06:	bd70      	pop	{r4, r5, r6, pc}
 8009d08:	6802      	ldr	r2, [r0, #0]
 8009d0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d14:	e7f7      	b.n	8009d06 <_Balloc+0x66>
 8009d16:	bf00      	nop
 8009d18:	0800b111 	.word	0x0800b111
 8009d1c:	0800b198 	.word	0x0800b198

08009d20 <_Bfree>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d24:	4605      	mov	r5, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	b976      	cbnz	r6, 8009d48 <_Bfree+0x28>
 8009d2a:	2010      	movs	r0, #16
 8009d2c:	f7ff ff96 	bl	8009c5c <malloc>
 8009d30:	4602      	mov	r2, r0
 8009d32:	6268      	str	r0, [r5, #36]	; 0x24
 8009d34:	b920      	cbnz	r0, 8009d40 <_Bfree+0x20>
 8009d36:	218a      	movs	r1, #138	; 0x8a
 8009d38:	4b08      	ldr	r3, [pc, #32]	; (8009d5c <_Bfree+0x3c>)
 8009d3a:	4809      	ldr	r0, [pc, #36]	; (8009d60 <_Bfree+0x40>)
 8009d3c:	f000 ff12 	bl	800ab64 <__assert_func>
 8009d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d44:	6006      	str	r6, [r0, #0]
 8009d46:	60c6      	str	r6, [r0, #12]
 8009d48:	b13c      	cbz	r4, 8009d5a <_Bfree+0x3a>
 8009d4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d4c:	6862      	ldr	r2, [r4, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d54:	6021      	str	r1, [r4, #0]
 8009d56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}
 8009d5c:	0800b111 	.word	0x0800b111
 8009d60:	0800b198 	.word	0x0800b198

08009d64 <__multadd>:
 8009d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d68:	4698      	mov	r8, r3
 8009d6a:	460c      	mov	r4, r1
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	690e      	ldr	r6, [r1, #16]
 8009d70:	4607      	mov	r7, r0
 8009d72:	f101 0014 	add.w	r0, r1, #20
 8009d76:	6805      	ldr	r5, [r0, #0]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	b2a9      	uxth	r1, r5
 8009d7c:	fb02 8101 	mla	r1, r2, r1, r8
 8009d80:	0c2d      	lsrs	r5, r5, #16
 8009d82:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009d86:	fb02 c505 	mla	r5, r2, r5, ip
 8009d8a:	b289      	uxth	r1, r1
 8009d8c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009d90:	429e      	cmp	r6, r3
 8009d92:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009d96:	f840 1b04 	str.w	r1, [r0], #4
 8009d9a:	dcec      	bgt.n	8009d76 <__multadd+0x12>
 8009d9c:	f1b8 0f00 	cmp.w	r8, #0
 8009da0:	d022      	beq.n	8009de8 <__multadd+0x84>
 8009da2:	68a3      	ldr	r3, [r4, #8]
 8009da4:	42b3      	cmp	r3, r6
 8009da6:	dc19      	bgt.n	8009ddc <__multadd+0x78>
 8009da8:	6861      	ldr	r1, [r4, #4]
 8009daa:	4638      	mov	r0, r7
 8009dac:	3101      	adds	r1, #1
 8009dae:	f7ff ff77 	bl	8009ca0 <_Balloc>
 8009db2:	4605      	mov	r5, r0
 8009db4:	b928      	cbnz	r0, 8009dc2 <__multadd+0x5e>
 8009db6:	4602      	mov	r2, r0
 8009db8:	21b5      	movs	r1, #181	; 0xb5
 8009dba:	4b0d      	ldr	r3, [pc, #52]	; (8009df0 <__multadd+0x8c>)
 8009dbc:	480d      	ldr	r0, [pc, #52]	; (8009df4 <__multadd+0x90>)
 8009dbe:	f000 fed1 	bl	800ab64 <__assert_func>
 8009dc2:	6922      	ldr	r2, [r4, #16]
 8009dc4:	f104 010c 	add.w	r1, r4, #12
 8009dc8:	3202      	adds	r2, #2
 8009dca:	0092      	lsls	r2, r2, #2
 8009dcc:	300c      	adds	r0, #12
 8009dce:	f7fe fa08 	bl	80081e2 <memcpy>
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	4638      	mov	r0, r7
 8009dd6:	f7ff ffa3 	bl	8009d20 <_Bfree>
 8009dda:	462c      	mov	r4, r5
 8009ddc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009de0:	3601      	adds	r6, #1
 8009de2:	f8c3 8014 	str.w	r8, [r3, #20]
 8009de6:	6126      	str	r6, [r4, #16]
 8009de8:	4620      	mov	r0, r4
 8009dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dee:	bf00      	nop
 8009df0:	0800b187 	.word	0x0800b187
 8009df4:	0800b198 	.word	0x0800b198

08009df8 <__hi0bits>:
 8009df8:	0c02      	lsrs	r2, r0, #16
 8009dfa:	0412      	lsls	r2, r2, #16
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	b9ca      	cbnz	r2, 8009e34 <__hi0bits+0x3c>
 8009e00:	0403      	lsls	r3, r0, #16
 8009e02:	2010      	movs	r0, #16
 8009e04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009e08:	bf04      	itt	eq
 8009e0a:	021b      	lsleq	r3, r3, #8
 8009e0c:	3008      	addeq	r0, #8
 8009e0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009e12:	bf04      	itt	eq
 8009e14:	011b      	lsleq	r3, r3, #4
 8009e16:	3004      	addeq	r0, #4
 8009e18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009e1c:	bf04      	itt	eq
 8009e1e:	009b      	lsleq	r3, r3, #2
 8009e20:	3002      	addeq	r0, #2
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	db05      	blt.n	8009e32 <__hi0bits+0x3a>
 8009e26:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009e2a:	f100 0001 	add.w	r0, r0, #1
 8009e2e:	bf08      	it	eq
 8009e30:	2020      	moveq	r0, #32
 8009e32:	4770      	bx	lr
 8009e34:	2000      	movs	r0, #0
 8009e36:	e7e5      	b.n	8009e04 <__hi0bits+0xc>

08009e38 <__lo0bits>:
 8009e38:	6803      	ldr	r3, [r0, #0]
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	f013 0007 	ands.w	r0, r3, #7
 8009e40:	d00b      	beq.n	8009e5a <__lo0bits+0x22>
 8009e42:	07d9      	lsls	r1, r3, #31
 8009e44:	d422      	bmi.n	8009e8c <__lo0bits+0x54>
 8009e46:	0798      	lsls	r0, r3, #30
 8009e48:	bf49      	itett	mi
 8009e4a:	085b      	lsrmi	r3, r3, #1
 8009e4c:	089b      	lsrpl	r3, r3, #2
 8009e4e:	2001      	movmi	r0, #1
 8009e50:	6013      	strmi	r3, [r2, #0]
 8009e52:	bf5c      	itt	pl
 8009e54:	2002      	movpl	r0, #2
 8009e56:	6013      	strpl	r3, [r2, #0]
 8009e58:	4770      	bx	lr
 8009e5a:	b299      	uxth	r1, r3
 8009e5c:	b909      	cbnz	r1, 8009e62 <__lo0bits+0x2a>
 8009e5e:	2010      	movs	r0, #16
 8009e60:	0c1b      	lsrs	r3, r3, #16
 8009e62:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009e66:	bf04      	itt	eq
 8009e68:	0a1b      	lsreq	r3, r3, #8
 8009e6a:	3008      	addeq	r0, #8
 8009e6c:	0719      	lsls	r1, r3, #28
 8009e6e:	bf04      	itt	eq
 8009e70:	091b      	lsreq	r3, r3, #4
 8009e72:	3004      	addeq	r0, #4
 8009e74:	0799      	lsls	r1, r3, #30
 8009e76:	bf04      	itt	eq
 8009e78:	089b      	lsreq	r3, r3, #2
 8009e7a:	3002      	addeq	r0, #2
 8009e7c:	07d9      	lsls	r1, r3, #31
 8009e7e:	d403      	bmi.n	8009e88 <__lo0bits+0x50>
 8009e80:	085b      	lsrs	r3, r3, #1
 8009e82:	f100 0001 	add.w	r0, r0, #1
 8009e86:	d003      	beq.n	8009e90 <__lo0bits+0x58>
 8009e88:	6013      	str	r3, [r2, #0]
 8009e8a:	4770      	bx	lr
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	4770      	bx	lr
 8009e90:	2020      	movs	r0, #32
 8009e92:	4770      	bx	lr

08009e94 <__i2b>:
 8009e94:	b510      	push	{r4, lr}
 8009e96:	460c      	mov	r4, r1
 8009e98:	2101      	movs	r1, #1
 8009e9a:	f7ff ff01 	bl	8009ca0 <_Balloc>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	b928      	cbnz	r0, 8009eae <__i2b+0x1a>
 8009ea2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ea6:	4b04      	ldr	r3, [pc, #16]	; (8009eb8 <__i2b+0x24>)
 8009ea8:	4804      	ldr	r0, [pc, #16]	; (8009ebc <__i2b+0x28>)
 8009eaa:	f000 fe5b 	bl	800ab64 <__assert_func>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	6144      	str	r4, [r0, #20]
 8009eb2:	6103      	str	r3, [r0, #16]
 8009eb4:	bd10      	pop	{r4, pc}
 8009eb6:	bf00      	nop
 8009eb8:	0800b187 	.word	0x0800b187
 8009ebc:	0800b198 	.word	0x0800b198

08009ec0 <__multiply>:
 8009ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec4:	4614      	mov	r4, r2
 8009ec6:	690a      	ldr	r2, [r1, #16]
 8009ec8:	6923      	ldr	r3, [r4, #16]
 8009eca:	460d      	mov	r5, r1
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	bfbe      	ittt	lt
 8009ed0:	460b      	movlt	r3, r1
 8009ed2:	4625      	movlt	r5, r4
 8009ed4:	461c      	movlt	r4, r3
 8009ed6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009eda:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009ede:	68ab      	ldr	r3, [r5, #8]
 8009ee0:	6869      	ldr	r1, [r5, #4]
 8009ee2:	eb0a 0709 	add.w	r7, sl, r9
 8009ee6:	42bb      	cmp	r3, r7
 8009ee8:	b085      	sub	sp, #20
 8009eea:	bfb8      	it	lt
 8009eec:	3101      	addlt	r1, #1
 8009eee:	f7ff fed7 	bl	8009ca0 <_Balloc>
 8009ef2:	b930      	cbnz	r0, 8009f02 <__multiply+0x42>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	f240 115d 	movw	r1, #349	; 0x15d
 8009efa:	4b41      	ldr	r3, [pc, #260]	; (800a000 <__multiply+0x140>)
 8009efc:	4841      	ldr	r0, [pc, #260]	; (800a004 <__multiply+0x144>)
 8009efe:	f000 fe31 	bl	800ab64 <__assert_func>
 8009f02:	f100 0614 	add.w	r6, r0, #20
 8009f06:	4633      	mov	r3, r6
 8009f08:	2200      	movs	r2, #0
 8009f0a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009f0e:	4543      	cmp	r3, r8
 8009f10:	d31e      	bcc.n	8009f50 <__multiply+0x90>
 8009f12:	f105 0c14 	add.w	ip, r5, #20
 8009f16:	f104 0314 	add.w	r3, r4, #20
 8009f1a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009f1e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009f22:	9202      	str	r2, [sp, #8]
 8009f24:	ebac 0205 	sub.w	r2, ip, r5
 8009f28:	3a15      	subs	r2, #21
 8009f2a:	f022 0203 	bic.w	r2, r2, #3
 8009f2e:	3204      	adds	r2, #4
 8009f30:	f105 0115 	add.w	r1, r5, #21
 8009f34:	458c      	cmp	ip, r1
 8009f36:	bf38      	it	cc
 8009f38:	2204      	movcc	r2, #4
 8009f3a:	9201      	str	r2, [sp, #4]
 8009f3c:	9a02      	ldr	r2, [sp, #8]
 8009f3e:	9303      	str	r3, [sp, #12]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d808      	bhi.n	8009f56 <__multiply+0x96>
 8009f44:	2f00      	cmp	r7, #0
 8009f46:	dc55      	bgt.n	8009ff4 <__multiply+0x134>
 8009f48:	6107      	str	r7, [r0, #16]
 8009f4a:	b005      	add	sp, #20
 8009f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f50:	f843 2b04 	str.w	r2, [r3], #4
 8009f54:	e7db      	b.n	8009f0e <__multiply+0x4e>
 8009f56:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f5a:	f1ba 0f00 	cmp.w	sl, #0
 8009f5e:	d020      	beq.n	8009fa2 <__multiply+0xe2>
 8009f60:	46b1      	mov	r9, r6
 8009f62:	2200      	movs	r2, #0
 8009f64:	f105 0e14 	add.w	lr, r5, #20
 8009f68:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009f6c:	f8d9 b000 	ldr.w	fp, [r9]
 8009f70:	b2a1      	uxth	r1, r4
 8009f72:	fa1f fb8b 	uxth.w	fp, fp
 8009f76:	fb0a b101 	mla	r1, sl, r1, fp
 8009f7a:	4411      	add	r1, r2
 8009f7c:	f8d9 2000 	ldr.w	r2, [r9]
 8009f80:	0c24      	lsrs	r4, r4, #16
 8009f82:	0c12      	lsrs	r2, r2, #16
 8009f84:	fb0a 2404 	mla	r4, sl, r4, r2
 8009f88:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009f8c:	b289      	uxth	r1, r1
 8009f8e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009f92:	45f4      	cmp	ip, lr
 8009f94:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009f98:	f849 1b04 	str.w	r1, [r9], #4
 8009f9c:	d8e4      	bhi.n	8009f68 <__multiply+0xa8>
 8009f9e:	9901      	ldr	r1, [sp, #4]
 8009fa0:	5072      	str	r2, [r6, r1]
 8009fa2:	9a03      	ldr	r2, [sp, #12]
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009faa:	f1b9 0f00 	cmp.w	r9, #0
 8009fae:	d01f      	beq.n	8009ff0 <__multiply+0x130>
 8009fb0:	46b6      	mov	lr, r6
 8009fb2:	f04f 0a00 	mov.w	sl, #0
 8009fb6:	6834      	ldr	r4, [r6, #0]
 8009fb8:	f105 0114 	add.w	r1, r5, #20
 8009fbc:	880a      	ldrh	r2, [r1, #0]
 8009fbe:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009fc2:	b2a4      	uxth	r4, r4
 8009fc4:	fb09 b202 	mla	r2, r9, r2, fp
 8009fc8:	4492      	add	sl, r2
 8009fca:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009fce:	f84e 4b04 	str.w	r4, [lr], #4
 8009fd2:	f851 4b04 	ldr.w	r4, [r1], #4
 8009fd6:	f8be 2000 	ldrh.w	r2, [lr]
 8009fda:	0c24      	lsrs	r4, r4, #16
 8009fdc:	fb09 2404 	mla	r4, r9, r4, r2
 8009fe0:	458c      	cmp	ip, r1
 8009fe2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009fe6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009fea:	d8e7      	bhi.n	8009fbc <__multiply+0xfc>
 8009fec:	9a01      	ldr	r2, [sp, #4]
 8009fee:	50b4      	str	r4, [r6, r2]
 8009ff0:	3604      	adds	r6, #4
 8009ff2:	e7a3      	b.n	8009f3c <__multiply+0x7c>
 8009ff4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1a5      	bne.n	8009f48 <__multiply+0x88>
 8009ffc:	3f01      	subs	r7, #1
 8009ffe:	e7a1      	b.n	8009f44 <__multiply+0x84>
 800a000:	0800b187 	.word	0x0800b187
 800a004:	0800b198 	.word	0x0800b198

0800a008 <__pow5mult>:
 800a008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a00c:	4615      	mov	r5, r2
 800a00e:	f012 0203 	ands.w	r2, r2, #3
 800a012:	4606      	mov	r6, r0
 800a014:	460f      	mov	r7, r1
 800a016:	d007      	beq.n	800a028 <__pow5mult+0x20>
 800a018:	4c25      	ldr	r4, [pc, #148]	; (800a0b0 <__pow5mult+0xa8>)
 800a01a:	3a01      	subs	r2, #1
 800a01c:	2300      	movs	r3, #0
 800a01e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a022:	f7ff fe9f 	bl	8009d64 <__multadd>
 800a026:	4607      	mov	r7, r0
 800a028:	10ad      	asrs	r5, r5, #2
 800a02a:	d03d      	beq.n	800a0a8 <__pow5mult+0xa0>
 800a02c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a02e:	b97c      	cbnz	r4, 800a050 <__pow5mult+0x48>
 800a030:	2010      	movs	r0, #16
 800a032:	f7ff fe13 	bl	8009c5c <malloc>
 800a036:	4602      	mov	r2, r0
 800a038:	6270      	str	r0, [r6, #36]	; 0x24
 800a03a:	b928      	cbnz	r0, 800a048 <__pow5mult+0x40>
 800a03c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a040:	4b1c      	ldr	r3, [pc, #112]	; (800a0b4 <__pow5mult+0xac>)
 800a042:	481d      	ldr	r0, [pc, #116]	; (800a0b8 <__pow5mult+0xb0>)
 800a044:	f000 fd8e 	bl	800ab64 <__assert_func>
 800a048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a04c:	6004      	str	r4, [r0, #0]
 800a04e:	60c4      	str	r4, [r0, #12]
 800a050:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a058:	b94c      	cbnz	r4, 800a06e <__pow5mult+0x66>
 800a05a:	f240 2171 	movw	r1, #625	; 0x271
 800a05e:	4630      	mov	r0, r6
 800a060:	f7ff ff18 	bl	8009e94 <__i2b>
 800a064:	2300      	movs	r3, #0
 800a066:	4604      	mov	r4, r0
 800a068:	f8c8 0008 	str.w	r0, [r8, #8]
 800a06c:	6003      	str	r3, [r0, #0]
 800a06e:	f04f 0900 	mov.w	r9, #0
 800a072:	07eb      	lsls	r3, r5, #31
 800a074:	d50a      	bpl.n	800a08c <__pow5mult+0x84>
 800a076:	4639      	mov	r1, r7
 800a078:	4622      	mov	r2, r4
 800a07a:	4630      	mov	r0, r6
 800a07c:	f7ff ff20 	bl	8009ec0 <__multiply>
 800a080:	4680      	mov	r8, r0
 800a082:	4639      	mov	r1, r7
 800a084:	4630      	mov	r0, r6
 800a086:	f7ff fe4b 	bl	8009d20 <_Bfree>
 800a08a:	4647      	mov	r7, r8
 800a08c:	106d      	asrs	r5, r5, #1
 800a08e:	d00b      	beq.n	800a0a8 <__pow5mult+0xa0>
 800a090:	6820      	ldr	r0, [r4, #0]
 800a092:	b938      	cbnz	r0, 800a0a4 <__pow5mult+0x9c>
 800a094:	4622      	mov	r2, r4
 800a096:	4621      	mov	r1, r4
 800a098:	4630      	mov	r0, r6
 800a09a:	f7ff ff11 	bl	8009ec0 <__multiply>
 800a09e:	6020      	str	r0, [r4, #0]
 800a0a0:	f8c0 9000 	str.w	r9, [r0]
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	e7e4      	b.n	800a072 <__pow5mult+0x6a>
 800a0a8:	4638      	mov	r0, r7
 800a0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ae:	bf00      	nop
 800a0b0:	0800b2e8 	.word	0x0800b2e8
 800a0b4:	0800b111 	.word	0x0800b111
 800a0b8:	0800b198 	.word	0x0800b198

0800a0bc <__lshift>:
 800a0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	4607      	mov	r7, r0
 800a0c4:	4691      	mov	r9, r2
 800a0c6:	6923      	ldr	r3, [r4, #16]
 800a0c8:	6849      	ldr	r1, [r1, #4]
 800a0ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0ce:	68a3      	ldr	r3, [r4, #8]
 800a0d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0d4:	f108 0601 	add.w	r6, r8, #1
 800a0d8:	42b3      	cmp	r3, r6
 800a0da:	db0b      	blt.n	800a0f4 <__lshift+0x38>
 800a0dc:	4638      	mov	r0, r7
 800a0de:	f7ff fddf 	bl	8009ca0 <_Balloc>
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	b948      	cbnz	r0, 800a0fa <__lshift+0x3e>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a0ec:	4b27      	ldr	r3, [pc, #156]	; (800a18c <__lshift+0xd0>)
 800a0ee:	4828      	ldr	r0, [pc, #160]	; (800a190 <__lshift+0xd4>)
 800a0f0:	f000 fd38 	bl	800ab64 <__assert_func>
 800a0f4:	3101      	adds	r1, #1
 800a0f6:	005b      	lsls	r3, r3, #1
 800a0f8:	e7ee      	b.n	800a0d8 <__lshift+0x1c>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f100 0114 	add.w	r1, r0, #20
 800a100:	f100 0210 	add.w	r2, r0, #16
 800a104:	4618      	mov	r0, r3
 800a106:	4553      	cmp	r3, sl
 800a108:	db33      	blt.n	800a172 <__lshift+0xb6>
 800a10a:	6920      	ldr	r0, [r4, #16]
 800a10c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a110:	f104 0314 	add.w	r3, r4, #20
 800a114:	f019 091f 	ands.w	r9, r9, #31
 800a118:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a11c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a120:	d02b      	beq.n	800a17a <__lshift+0xbe>
 800a122:	468a      	mov	sl, r1
 800a124:	2200      	movs	r2, #0
 800a126:	f1c9 0e20 	rsb	lr, r9, #32
 800a12a:	6818      	ldr	r0, [r3, #0]
 800a12c:	fa00 f009 	lsl.w	r0, r0, r9
 800a130:	4302      	orrs	r2, r0
 800a132:	f84a 2b04 	str.w	r2, [sl], #4
 800a136:	f853 2b04 	ldr.w	r2, [r3], #4
 800a13a:	459c      	cmp	ip, r3
 800a13c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a140:	d8f3      	bhi.n	800a12a <__lshift+0x6e>
 800a142:	ebac 0304 	sub.w	r3, ip, r4
 800a146:	3b15      	subs	r3, #21
 800a148:	f023 0303 	bic.w	r3, r3, #3
 800a14c:	3304      	adds	r3, #4
 800a14e:	f104 0015 	add.w	r0, r4, #21
 800a152:	4584      	cmp	ip, r0
 800a154:	bf38      	it	cc
 800a156:	2304      	movcc	r3, #4
 800a158:	50ca      	str	r2, [r1, r3]
 800a15a:	b10a      	cbz	r2, 800a160 <__lshift+0xa4>
 800a15c:	f108 0602 	add.w	r6, r8, #2
 800a160:	3e01      	subs	r6, #1
 800a162:	4638      	mov	r0, r7
 800a164:	4621      	mov	r1, r4
 800a166:	612e      	str	r6, [r5, #16]
 800a168:	f7ff fdda 	bl	8009d20 <_Bfree>
 800a16c:	4628      	mov	r0, r5
 800a16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a172:	f842 0f04 	str.w	r0, [r2, #4]!
 800a176:	3301      	adds	r3, #1
 800a178:	e7c5      	b.n	800a106 <__lshift+0x4a>
 800a17a:	3904      	subs	r1, #4
 800a17c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a180:	459c      	cmp	ip, r3
 800a182:	f841 2f04 	str.w	r2, [r1, #4]!
 800a186:	d8f9      	bhi.n	800a17c <__lshift+0xc0>
 800a188:	e7ea      	b.n	800a160 <__lshift+0xa4>
 800a18a:	bf00      	nop
 800a18c:	0800b187 	.word	0x0800b187
 800a190:	0800b198 	.word	0x0800b198

0800a194 <__mcmp>:
 800a194:	4603      	mov	r3, r0
 800a196:	690a      	ldr	r2, [r1, #16]
 800a198:	6900      	ldr	r0, [r0, #16]
 800a19a:	b530      	push	{r4, r5, lr}
 800a19c:	1a80      	subs	r0, r0, r2
 800a19e:	d10d      	bne.n	800a1bc <__mcmp+0x28>
 800a1a0:	3314      	adds	r3, #20
 800a1a2:	3114      	adds	r1, #20
 800a1a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a1a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a1ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a1b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a1b4:	4295      	cmp	r5, r2
 800a1b6:	d002      	beq.n	800a1be <__mcmp+0x2a>
 800a1b8:	d304      	bcc.n	800a1c4 <__mcmp+0x30>
 800a1ba:	2001      	movs	r0, #1
 800a1bc:	bd30      	pop	{r4, r5, pc}
 800a1be:	42a3      	cmp	r3, r4
 800a1c0:	d3f4      	bcc.n	800a1ac <__mcmp+0x18>
 800a1c2:	e7fb      	b.n	800a1bc <__mcmp+0x28>
 800a1c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1c8:	e7f8      	b.n	800a1bc <__mcmp+0x28>
	...

0800a1cc <__mdiff>:
 800a1cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	4606      	mov	r6, r0
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	4692      	mov	sl, r2
 800a1da:	f7ff ffdb 	bl	800a194 <__mcmp>
 800a1de:	1e05      	subs	r5, r0, #0
 800a1e0:	d111      	bne.n	800a206 <__mdiff+0x3a>
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f7ff fd5b 	bl	8009ca0 <_Balloc>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	b928      	cbnz	r0, 800a1fa <__mdiff+0x2e>
 800a1ee:	f240 2132 	movw	r1, #562	; 0x232
 800a1f2:	4b3c      	ldr	r3, [pc, #240]	; (800a2e4 <__mdiff+0x118>)
 800a1f4:	483c      	ldr	r0, [pc, #240]	; (800a2e8 <__mdiff+0x11c>)
 800a1f6:	f000 fcb5 	bl	800ab64 <__assert_func>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a200:	4610      	mov	r0, r2
 800a202:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a206:	bfa4      	itt	ge
 800a208:	4653      	movge	r3, sl
 800a20a:	46a2      	movge	sl, r4
 800a20c:	4630      	mov	r0, r6
 800a20e:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a212:	bfa6      	itte	ge
 800a214:	461c      	movge	r4, r3
 800a216:	2500      	movge	r5, #0
 800a218:	2501      	movlt	r5, #1
 800a21a:	f7ff fd41 	bl	8009ca0 <_Balloc>
 800a21e:	4602      	mov	r2, r0
 800a220:	b918      	cbnz	r0, 800a22a <__mdiff+0x5e>
 800a222:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a226:	4b2f      	ldr	r3, [pc, #188]	; (800a2e4 <__mdiff+0x118>)
 800a228:	e7e4      	b.n	800a1f4 <__mdiff+0x28>
 800a22a:	f100 0814 	add.w	r8, r0, #20
 800a22e:	f8da 7010 	ldr.w	r7, [sl, #16]
 800a232:	60c5      	str	r5, [r0, #12]
 800a234:	f04f 0c00 	mov.w	ip, #0
 800a238:	f10a 0514 	add.w	r5, sl, #20
 800a23c:	f10a 0010 	add.w	r0, sl, #16
 800a240:	46c2      	mov	sl, r8
 800a242:	6926      	ldr	r6, [r4, #16]
 800a244:	f104 0914 	add.w	r9, r4, #20
 800a248:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800a24c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a250:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800a254:	f859 3b04 	ldr.w	r3, [r9], #4
 800a258:	fa1f f18b 	uxth.w	r1, fp
 800a25c:	4461      	add	r1, ip
 800a25e:	fa1f fc83 	uxth.w	ip, r3
 800a262:	0c1b      	lsrs	r3, r3, #16
 800a264:	eba1 010c 	sub.w	r1, r1, ip
 800a268:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a26c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a270:	b289      	uxth	r1, r1
 800a272:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a276:	454e      	cmp	r6, r9
 800a278:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a27c:	f84a 3b04 	str.w	r3, [sl], #4
 800a280:	d8e6      	bhi.n	800a250 <__mdiff+0x84>
 800a282:	1b33      	subs	r3, r6, r4
 800a284:	3b15      	subs	r3, #21
 800a286:	f023 0303 	bic.w	r3, r3, #3
 800a28a:	3415      	adds	r4, #21
 800a28c:	3304      	adds	r3, #4
 800a28e:	42a6      	cmp	r6, r4
 800a290:	bf38      	it	cc
 800a292:	2304      	movcc	r3, #4
 800a294:	441d      	add	r5, r3
 800a296:	4443      	add	r3, r8
 800a298:	461e      	mov	r6, r3
 800a29a:	462c      	mov	r4, r5
 800a29c:	4574      	cmp	r4, lr
 800a29e:	d30e      	bcc.n	800a2be <__mdiff+0xf2>
 800a2a0:	f10e 0103 	add.w	r1, lr, #3
 800a2a4:	1b49      	subs	r1, r1, r5
 800a2a6:	f021 0103 	bic.w	r1, r1, #3
 800a2aa:	3d03      	subs	r5, #3
 800a2ac:	45ae      	cmp	lr, r5
 800a2ae:	bf38      	it	cc
 800a2b0:	2100      	movcc	r1, #0
 800a2b2:	4419      	add	r1, r3
 800a2b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a2b8:	b18b      	cbz	r3, 800a2de <__mdiff+0x112>
 800a2ba:	6117      	str	r7, [r2, #16]
 800a2bc:	e7a0      	b.n	800a200 <__mdiff+0x34>
 800a2be:	f854 8b04 	ldr.w	r8, [r4], #4
 800a2c2:	fa1f f188 	uxth.w	r1, r8
 800a2c6:	4461      	add	r1, ip
 800a2c8:	1408      	asrs	r0, r1, #16
 800a2ca:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800a2ce:	b289      	uxth	r1, r1
 800a2d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a2d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a2d8:	f846 1b04 	str.w	r1, [r6], #4
 800a2dc:	e7de      	b.n	800a29c <__mdiff+0xd0>
 800a2de:	3f01      	subs	r7, #1
 800a2e0:	e7e8      	b.n	800a2b4 <__mdiff+0xe8>
 800a2e2:	bf00      	nop
 800a2e4:	0800b187 	.word	0x0800b187
 800a2e8:	0800b198 	.word	0x0800b198

0800a2ec <__d2b>:
 800a2ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a2f6:	4690      	mov	r8, r2
 800a2f8:	461d      	mov	r5, r3
 800a2fa:	f7ff fcd1 	bl	8009ca0 <_Balloc>
 800a2fe:	4604      	mov	r4, r0
 800a300:	b930      	cbnz	r0, 800a310 <__d2b+0x24>
 800a302:	4602      	mov	r2, r0
 800a304:	f240 310a 	movw	r1, #778	; 0x30a
 800a308:	4b24      	ldr	r3, [pc, #144]	; (800a39c <__d2b+0xb0>)
 800a30a:	4825      	ldr	r0, [pc, #148]	; (800a3a0 <__d2b+0xb4>)
 800a30c:	f000 fc2a 	bl	800ab64 <__assert_func>
 800a310:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a314:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a318:	bb2d      	cbnz	r5, 800a366 <__d2b+0x7a>
 800a31a:	9301      	str	r3, [sp, #4]
 800a31c:	f1b8 0300 	subs.w	r3, r8, #0
 800a320:	d026      	beq.n	800a370 <__d2b+0x84>
 800a322:	4668      	mov	r0, sp
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	f7ff fd87 	bl	8009e38 <__lo0bits>
 800a32a:	9900      	ldr	r1, [sp, #0]
 800a32c:	b1f0      	cbz	r0, 800a36c <__d2b+0x80>
 800a32e:	9a01      	ldr	r2, [sp, #4]
 800a330:	f1c0 0320 	rsb	r3, r0, #32
 800a334:	fa02 f303 	lsl.w	r3, r2, r3
 800a338:	430b      	orrs	r3, r1
 800a33a:	40c2      	lsrs	r2, r0
 800a33c:	6163      	str	r3, [r4, #20]
 800a33e:	9201      	str	r2, [sp, #4]
 800a340:	9b01      	ldr	r3, [sp, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	bf14      	ite	ne
 800a346:	2102      	movne	r1, #2
 800a348:	2101      	moveq	r1, #1
 800a34a:	61a3      	str	r3, [r4, #24]
 800a34c:	6121      	str	r1, [r4, #16]
 800a34e:	b1c5      	cbz	r5, 800a382 <__d2b+0x96>
 800a350:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a354:	4405      	add	r5, r0
 800a356:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a35a:	603d      	str	r5, [r7, #0]
 800a35c:	6030      	str	r0, [r6, #0]
 800a35e:	4620      	mov	r0, r4
 800a360:	b002      	add	sp, #8
 800a362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a36a:	e7d6      	b.n	800a31a <__d2b+0x2e>
 800a36c:	6161      	str	r1, [r4, #20]
 800a36e:	e7e7      	b.n	800a340 <__d2b+0x54>
 800a370:	a801      	add	r0, sp, #4
 800a372:	f7ff fd61 	bl	8009e38 <__lo0bits>
 800a376:	2101      	movs	r1, #1
 800a378:	9b01      	ldr	r3, [sp, #4]
 800a37a:	6121      	str	r1, [r4, #16]
 800a37c:	6163      	str	r3, [r4, #20]
 800a37e:	3020      	adds	r0, #32
 800a380:	e7e5      	b.n	800a34e <__d2b+0x62>
 800a382:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a386:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a38a:	6038      	str	r0, [r7, #0]
 800a38c:	6918      	ldr	r0, [r3, #16]
 800a38e:	f7ff fd33 	bl	8009df8 <__hi0bits>
 800a392:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a396:	6031      	str	r1, [r6, #0]
 800a398:	e7e1      	b.n	800a35e <__d2b+0x72>
 800a39a:	bf00      	nop
 800a39c:	0800b187 	.word	0x0800b187
 800a3a0:	0800b198 	.word	0x0800b198

0800a3a4 <_calloc_r>:
 800a3a4:	b538      	push	{r3, r4, r5, lr}
 800a3a6:	fb02 f501 	mul.w	r5, r2, r1
 800a3aa:	4629      	mov	r1, r5
 800a3ac:	f7fd ff30 	bl	8008210 <_malloc_r>
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	b118      	cbz	r0, 800a3bc <_calloc_r+0x18>
 800a3b4:	462a      	mov	r2, r5
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	f7fd ff21 	bl	80081fe <memset>
 800a3bc:	4620      	mov	r0, r4
 800a3be:	bd38      	pop	{r3, r4, r5, pc}

0800a3c0 <_free_r>:
 800a3c0:	b538      	push	{r3, r4, r5, lr}
 800a3c2:	4605      	mov	r5, r0
 800a3c4:	2900      	cmp	r1, #0
 800a3c6:	d043      	beq.n	800a450 <_free_r+0x90>
 800a3c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3cc:	1f0c      	subs	r4, r1, #4
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	bfb8      	it	lt
 800a3d2:	18e4      	addlt	r4, r4, r3
 800a3d4:	f7ff fc58 	bl	8009c88 <__malloc_lock>
 800a3d8:	4a1e      	ldr	r2, [pc, #120]	; (800a454 <_free_r+0x94>)
 800a3da:	6813      	ldr	r3, [r2, #0]
 800a3dc:	4610      	mov	r0, r2
 800a3de:	b933      	cbnz	r3, 800a3ee <_free_r+0x2e>
 800a3e0:	6063      	str	r3, [r4, #4]
 800a3e2:	6014      	str	r4, [r2, #0]
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3ea:	f7ff bc53 	b.w	8009c94 <__malloc_unlock>
 800a3ee:	42a3      	cmp	r3, r4
 800a3f0:	d90a      	bls.n	800a408 <_free_r+0x48>
 800a3f2:	6821      	ldr	r1, [r4, #0]
 800a3f4:	1862      	adds	r2, r4, r1
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	bf01      	itttt	eq
 800a3fa:	681a      	ldreq	r2, [r3, #0]
 800a3fc:	685b      	ldreq	r3, [r3, #4]
 800a3fe:	1852      	addeq	r2, r2, r1
 800a400:	6022      	streq	r2, [r4, #0]
 800a402:	6063      	str	r3, [r4, #4]
 800a404:	6004      	str	r4, [r0, #0]
 800a406:	e7ed      	b.n	800a3e4 <_free_r+0x24>
 800a408:	461a      	mov	r2, r3
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	b10b      	cbz	r3, 800a412 <_free_r+0x52>
 800a40e:	42a3      	cmp	r3, r4
 800a410:	d9fa      	bls.n	800a408 <_free_r+0x48>
 800a412:	6811      	ldr	r1, [r2, #0]
 800a414:	1850      	adds	r0, r2, r1
 800a416:	42a0      	cmp	r0, r4
 800a418:	d10b      	bne.n	800a432 <_free_r+0x72>
 800a41a:	6820      	ldr	r0, [r4, #0]
 800a41c:	4401      	add	r1, r0
 800a41e:	1850      	adds	r0, r2, r1
 800a420:	4283      	cmp	r3, r0
 800a422:	6011      	str	r1, [r2, #0]
 800a424:	d1de      	bne.n	800a3e4 <_free_r+0x24>
 800a426:	6818      	ldr	r0, [r3, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	4401      	add	r1, r0
 800a42c:	6011      	str	r1, [r2, #0]
 800a42e:	6053      	str	r3, [r2, #4]
 800a430:	e7d8      	b.n	800a3e4 <_free_r+0x24>
 800a432:	d902      	bls.n	800a43a <_free_r+0x7a>
 800a434:	230c      	movs	r3, #12
 800a436:	602b      	str	r3, [r5, #0]
 800a438:	e7d4      	b.n	800a3e4 <_free_r+0x24>
 800a43a:	6820      	ldr	r0, [r4, #0]
 800a43c:	1821      	adds	r1, r4, r0
 800a43e:	428b      	cmp	r3, r1
 800a440:	bf01      	itttt	eq
 800a442:	6819      	ldreq	r1, [r3, #0]
 800a444:	685b      	ldreq	r3, [r3, #4]
 800a446:	1809      	addeq	r1, r1, r0
 800a448:	6021      	streq	r1, [r4, #0]
 800a44a:	6063      	str	r3, [r4, #4]
 800a44c:	6054      	str	r4, [r2, #4]
 800a44e:	e7c9      	b.n	800a3e4 <_free_r+0x24>
 800a450:	bd38      	pop	{r3, r4, r5, pc}
 800a452:	bf00      	nop
 800a454:	20001bd4 	.word	0x20001bd4

0800a458 <__ssputs_r>:
 800a458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a45c:	688e      	ldr	r6, [r1, #8]
 800a45e:	4682      	mov	sl, r0
 800a460:	429e      	cmp	r6, r3
 800a462:	460c      	mov	r4, r1
 800a464:	4690      	mov	r8, r2
 800a466:	461f      	mov	r7, r3
 800a468:	d838      	bhi.n	800a4dc <__ssputs_r+0x84>
 800a46a:	898a      	ldrh	r2, [r1, #12]
 800a46c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a470:	d032      	beq.n	800a4d8 <__ssputs_r+0x80>
 800a472:	6825      	ldr	r5, [r4, #0]
 800a474:	6909      	ldr	r1, [r1, #16]
 800a476:	3301      	adds	r3, #1
 800a478:	eba5 0901 	sub.w	r9, r5, r1
 800a47c:	6965      	ldr	r5, [r4, #20]
 800a47e:	444b      	add	r3, r9
 800a480:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a484:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a488:	106d      	asrs	r5, r5, #1
 800a48a:	429d      	cmp	r5, r3
 800a48c:	bf38      	it	cc
 800a48e:	461d      	movcc	r5, r3
 800a490:	0553      	lsls	r3, r2, #21
 800a492:	d531      	bpl.n	800a4f8 <__ssputs_r+0xa0>
 800a494:	4629      	mov	r1, r5
 800a496:	f7fd febb 	bl	8008210 <_malloc_r>
 800a49a:	4606      	mov	r6, r0
 800a49c:	b950      	cbnz	r0, 800a4b4 <__ssputs_r+0x5c>
 800a49e:	230c      	movs	r3, #12
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4a4:	f8ca 3000 	str.w	r3, [sl]
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ae:	81a3      	strh	r3, [r4, #12]
 800a4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b4:	464a      	mov	r2, r9
 800a4b6:	6921      	ldr	r1, [r4, #16]
 800a4b8:	f7fd fe93 	bl	80081e2 <memcpy>
 800a4bc:	89a3      	ldrh	r3, [r4, #12]
 800a4be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4c6:	81a3      	strh	r3, [r4, #12]
 800a4c8:	6126      	str	r6, [r4, #16]
 800a4ca:	444e      	add	r6, r9
 800a4cc:	6026      	str	r6, [r4, #0]
 800a4ce:	463e      	mov	r6, r7
 800a4d0:	6165      	str	r5, [r4, #20]
 800a4d2:	eba5 0509 	sub.w	r5, r5, r9
 800a4d6:	60a5      	str	r5, [r4, #8]
 800a4d8:	42be      	cmp	r6, r7
 800a4da:	d900      	bls.n	800a4de <__ssputs_r+0x86>
 800a4dc:	463e      	mov	r6, r7
 800a4de:	4632      	mov	r2, r6
 800a4e0:	4641      	mov	r1, r8
 800a4e2:	6820      	ldr	r0, [r4, #0]
 800a4e4:	f000 fbe4 	bl	800acb0 <memmove>
 800a4e8:	68a3      	ldr	r3, [r4, #8]
 800a4ea:	6822      	ldr	r2, [r4, #0]
 800a4ec:	1b9b      	subs	r3, r3, r6
 800a4ee:	4432      	add	r2, r6
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	60a3      	str	r3, [r4, #8]
 800a4f4:	6022      	str	r2, [r4, #0]
 800a4f6:	e7db      	b.n	800a4b0 <__ssputs_r+0x58>
 800a4f8:	462a      	mov	r2, r5
 800a4fa:	f000 fbf3 	bl	800ace4 <_realloc_r>
 800a4fe:	4606      	mov	r6, r0
 800a500:	2800      	cmp	r0, #0
 800a502:	d1e1      	bne.n	800a4c8 <__ssputs_r+0x70>
 800a504:	4650      	mov	r0, sl
 800a506:	6921      	ldr	r1, [r4, #16]
 800a508:	f7ff ff5a 	bl	800a3c0 <_free_r>
 800a50c:	e7c7      	b.n	800a49e <__ssputs_r+0x46>
	...

0800a510 <_svfiprintf_r>:
 800a510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a514:	4698      	mov	r8, r3
 800a516:	898b      	ldrh	r3, [r1, #12]
 800a518:	4607      	mov	r7, r0
 800a51a:	061b      	lsls	r3, r3, #24
 800a51c:	460d      	mov	r5, r1
 800a51e:	4614      	mov	r4, r2
 800a520:	b09d      	sub	sp, #116	; 0x74
 800a522:	d50e      	bpl.n	800a542 <_svfiprintf_r+0x32>
 800a524:	690b      	ldr	r3, [r1, #16]
 800a526:	b963      	cbnz	r3, 800a542 <_svfiprintf_r+0x32>
 800a528:	2140      	movs	r1, #64	; 0x40
 800a52a:	f7fd fe71 	bl	8008210 <_malloc_r>
 800a52e:	6028      	str	r0, [r5, #0]
 800a530:	6128      	str	r0, [r5, #16]
 800a532:	b920      	cbnz	r0, 800a53e <_svfiprintf_r+0x2e>
 800a534:	230c      	movs	r3, #12
 800a536:	603b      	str	r3, [r7, #0]
 800a538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a53c:	e0d1      	b.n	800a6e2 <_svfiprintf_r+0x1d2>
 800a53e:	2340      	movs	r3, #64	; 0x40
 800a540:	616b      	str	r3, [r5, #20]
 800a542:	2300      	movs	r3, #0
 800a544:	9309      	str	r3, [sp, #36]	; 0x24
 800a546:	2320      	movs	r3, #32
 800a548:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a54c:	2330      	movs	r3, #48	; 0x30
 800a54e:	f04f 0901 	mov.w	r9, #1
 800a552:	f8cd 800c 	str.w	r8, [sp, #12]
 800a556:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a6fc <_svfiprintf_r+0x1ec>
 800a55a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a55e:	4623      	mov	r3, r4
 800a560:	469a      	mov	sl, r3
 800a562:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a566:	b10a      	cbz	r2, 800a56c <_svfiprintf_r+0x5c>
 800a568:	2a25      	cmp	r2, #37	; 0x25
 800a56a:	d1f9      	bne.n	800a560 <_svfiprintf_r+0x50>
 800a56c:	ebba 0b04 	subs.w	fp, sl, r4
 800a570:	d00b      	beq.n	800a58a <_svfiprintf_r+0x7a>
 800a572:	465b      	mov	r3, fp
 800a574:	4622      	mov	r2, r4
 800a576:	4629      	mov	r1, r5
 800a578:	4638      	mov	r0, r7
 800a57a:	f7ff ff6d 	bl	800a458 <__ssputs_r>
 800a57e:	3001      	adds	r0, #1
 800a580:	f000 80aa 	beq.w	800a6d8 <_svfiprintf_r+0x1c8>
 800a584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a586:	445a      	add	r2, fp
 800a588:	9209      	str	r2, [sp, #36]	; 0x24
 800a58a:	f89a 3000 	ldrb.w	r3, [sl]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f000 80a2 	beq.w	800a6d8 <_svfiprintf_r+0x1c8>
 800a594:	2300      	movs	r3, #0
 800a596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a59a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a59e:	f10a 0a01 	add.w	sl, sl, #1
 800a5a2:	9304      	str	r3, [sp, #16]
 800a5a4:	9307      	str	r3, [sp, #28]
 800a5a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5aa:	931a      	str	r3, [sp, #104]	; 0x68
 800a5ac:	4654      	mov	r4, sl
 800a5ae:	2205      	movs	r2, #5
 800a5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b4:	4851      	ldr	r0, [pc, #324]	; (800a6fc <_svfiprintf_r+0x1ec>)
 800a5b6:	f7ff fb59 	bl	8009c6c <memchr>
 800a5ba:	9a04      	ldr	r2, [sp, #16]
 800a5bc:	b9d8      	cbnz	r0, 800a5f6 <_svfiprintf_r+0xe6>
 800a5be:	06d0      	lsls	r0, r2, #27
 800a5c0:	bf44      	itt	mi
 800a5c2:	2320      	movmi	r3, #32
 800a5c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5c8:	0711      	lsls	r1, r2, #28
 800a5ca:	bf44      	itt	mi
 800a5cc:	232b      	movmi	r3, #43	; 0x2b
 800a5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a5d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a5d8:	d015      	beq.n	800a606 <_svfiprintf_r+0xf6>
 800a5da:	4654      	mov	r4, sl
 800a5dc:	2000      	movs	r0, #0
 800a5de:	f04f 0c0a 	mov.w	ip, #10
 800a5e2:	9a07      	ldr	r2, [sp, #28]
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5ea:	3b30      	subs	r3, #48	; 0x30
 800a5ec:	2b09      	cmp	r3, #9
 800a5ee:	d94e      	bls.n	800a68e <_svfiprintf_r+0x17e>
 800a5f0:	b1b0      	cbz	r0, 800a620 <_svfiprintf_r+0x110>
 800a5f2:	9207      	str	r2, [sp, #28]
 800a5f4:	e014      	b.n	800a620 <_svfiprintf_r+0x110>
 800a5f6:	eba0 0308 	sub.w	r3, r0, r8
 800a5fa:	fa09 f303 	lsl.w	r3, r9, r3
 800a5fe:	4313      	orrs	r3, r2
 800a600:	46a2      	mov	sl, r4
 800a602:	9304      	str	r3, [sp, #16]
 800a604:	e7d2      	b.n	800a5ac <_svfiprintf_r+0x9c>
 800a606:	9b03      	ldr	r3, [sp, #12]
 800a608:	1d19      	adds	r1, r3, #4
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	9103      	str	r1, [sp, #12]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	bfbb      	ittet	lt
 800a612:	425b      	neglt	r3, r3
 800a614:	f042 0202 	orrlt.w	r2, r2, #2
 800a618:	9307      	strge	r3, [sp, #28]
 800a61a:	9307      	strlt	r3, [sp, #28]
 800a61c:	bfb8      	it	lt
 800a61e:	9204      	strlt	r2, [sp, #16]
 800a620:	7823      	ldrb	r3, [r4, #0]
 800a622:	2b2e      	cmp	r3, #46	; 0x2e
 800a624:	d10c      	bne.n	800a640 <_svfiprintf_r+0x130>
 800a626:	7863      	ldrb	r3, [r4, #1]
 800a628:	2b2a      	cmp	r3, #42	; 0x2a
 800a62a:	d135      	bne.n	800a698 <_svfiprintf_r+0x188>
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	3402      	adds	r4, #2
 800a630:	1d1a      	adds	r2, r3, #4
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	9203      	str	r2, [sp, #12]
 800a636:	2b00      	cmp	r3, #0
 800a638:	bfb8      	it	lt
 800a63a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a63e:	9305      	str	r3, [sp, #20]
 800a640:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a70c <_svfiprintf_r+0x1fc>
 800a644:	2203      	movs	r2, #3
 800a646:	4650      	mov	r0, sl
 800a648:	7821      	ldrb	r1, [r4, #0]
 800a64a:	f7ff fb0f 	bl	8009c6c <memchr>
 800a64e:	b140      	cbz	r0, 800a662 <_svfiprintf_r+0x152>
 800a650:	2340      	movs	r3, #64	; 0x40
 800a652:	eba0 000a 	sub.w	r0, r0, sl
 800a656:	fa03 f000 	lsl.w	r0, r3, r0
 800a65a:	9b04      	ldr	r3, [sp, #16]
 800a65c:	3401      	adds	r4, #1
 800a65e:	4303      	orrs	r3, r0
 800a660:	9304      	str	r3, [sp, #16]
 800a662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a666:	2206      	movs	r2, #6
 800a668:	4825      	ldr	r0, [pc, #148]	; (800a700 <_svfiprintf_r+0x1f0>)
 800a66a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a66e:	f7ff fafd 	bl	8009c6c <memchr>
 800a672:	2800      	cmp	r0, #0
 800a674:	d038      	beq.n	800a6e8 <_svfiprintf_r+0x1d8>
 800a676:	4b23      	ldr	r3, [pc, #140]	; (800a704 <_svfiprintf_r+0x1f4>)
 800a678:	bb1b      	cbnz	r3, 800a6c2 <_svfiprintf_r+0x1b2>
 800a67a:	9b03      	ldr	r3, [sp, #12]
 800a67c:	3307      	adds	r3, #7
 800a67e:	f023 0307 	bic.w	r3, r3, #7
 800a682:	3308      	adds	r3, #8
 800a684:	9303      	str	r3, [sp, #12]
 800a686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a688:	4433      	add	r3, r6
 800a68a:	9309      	str	r3, [sp, #36]	; 0x24
 800a68c:	e767      	b.n	800a55e <_svfiprintf_r+0x4e>
 800a68e:	460c      	mov	r4, r1
 800a690:	2001      	movs	r0, #1
 800a692:	fb0c 3202 	mla	r2, ip, r2, r3
 800a696:	e7a5      	b.n	800a5e4 <_svfiprintf_r+0xd4>
 800a698:	2300      	movs	r3, #0
 800a69a:	f04f 0c0a 	mov.w	ip, #10
 800a69e:	4619      	mov	r1, r3
 800a6a0:	3401      	adds	r4, #1
 800a6a2:	9305      	str	r3, [sp, #20]
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6aa:	3a30      	subs	r2, #48	; 0x30
 800a6ac:	2a09      	cmp	r2, #9
 800a6ae:	d903      	bls.n	800a6b8 <_svfiprintf_r+0x1a8>
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d0c5      	beq.n	800a640 <_svfiprintf_r+0x130>
 800a6b4:	9105      	str	r1, [sp, #20]
 800a6b6:	e7c3      	b.n	800a640 <_svfiprintf_r+0x130>
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6c0:	e7f0      	b.n	800a6a4 <_svfiprintf_r+0x194>
 800a6c2:	ab03      	add	r3, sp, #12
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	462a      	mov	r2, r5
 800a6c8:	4638      	mov	r0, r7
 800a6ca:	4b0f      	ldr	r3, [pc, #60]	; (800a708 <_svfiprintf_r+0x1f8>)
 800a6cc:	a904      	add	r1, sp, #16
 800a6ce:	f7fd fe97 	bl	8008400 <_printf_float>
 800a6d2:	1c42      	adds	r2, r0, #1
 800a6d4:	4606      	mov	r6, r0
 800a6d6:	d1d6      	bne.n	800a686 <_svfiprintf_r+0x176>
 800a6d8:	89ab      	ldrh	r3, [r5, #12]
 800a6da:	065b      	lsls	r3, r3, #25
 800a6dc:	f53f af2c 	bmi.w	800a538 <_svfiprintf_r+0x28>
 800a6e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6e2:	b01d      	add	sp, #116	; 0x74
 800a6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e8:	ab03      	add	r3, sp, #12
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	462a      	mov	r2, r5
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	4b05      	ldr	r3, [pc, #20]	; (800a708 <_svfiprintf_r+0x1f8>)
 800a6f2:	a904      	add	r1, sp, #16
 800a6f4:	f7fe f920 	bl	8008938 <_printf_i>
 800a6f8:	e7eb      	b.n	800a6d2 <_svfiprintf_r+0x1c2>
 800a6fa:	bf00      	nop
 800a6fc:	0800b2f4 	.word	0x0800b2f4
 800a700:	0800b2fe 	.word	0x0800b2fe
 800a704:	08008401 	.word	0x08008401
 800a708:	0800a459 	.word	0x0800a459
 800a70c:	0800b2fa 	.word	0x0800b2fa

0800a710 <__sfputc_r>:
 800a710:	6893      	ldr	r3, [r2, #8]
 800a712:	b410      	push	{r4}
 800a714:	3b01      	subs	r3, #1
 800a716:	2b00      	cmp	r3, #0
 800a718:	6093      	str	r3, [r2, #8]
 800a71a:	da07      	bge.n	800a72c <__sfputc_r+0x1c>
 800a71c:	6994      	ldr	r4, [r2, #24]
 800a71e:	42a3      	cmp	r3, r4
 800a720:	db01      	blt.n	800a726 <__sfputc_r+0x16>
 800a722:	290a      	cmp	r1, #10
 800a724:	d102      	bne.n	800a72c <__sfputc_r+0x1c>
 800a726:	bc10      	pop	{r4}
 800a728:	f000 b95c 	b.w	800a9e4 <__swbuf_r>
 800a72c:	6813      	ldr	r3, [r2, #0]
 800a72e:	1c58      	adds	r0, r3, #1
 800a730:	6010      	str	r0, [r2, #0]
 800a732:	7019      	strb	r1, [r3, #0]
 800a734:	4608      	mov	r0, r1
 800a736:	bc10      	pop	{r4}
 800a738:	4770      	bx	lr

0800a73a <__sfputs_r>:
 800a73a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73c:	4606      	mov	r6, r0
 800a73e:	460f      	mov	r7, r1
 800a740:	4614      	mov	r4, r2
 800a742:	18d5      	adds	r5, r2, r3
 800a744:	42ac      	cmp	r4, r5
 800a746:	d101      	bne.n	800a74c <__sfputs_r+0x12>
 800a748:	2000      	movs	r0, #0
 800a74a:	e007      	b.n	800a75c <__sfputs_r+0x22>
 800a74c:	463a      	mov	r2, r7
 800a74e:	4630      	mov	r0, r6
 800a750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a754:	f7ff ffdc 	bl	800a710 <__sfputc_r>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d1f3      	bne.n	800a744 <__sfputs_r+0xa>
 800a75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a760 <_vfiprintf_r>:
 800a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a764:	460d      	mov	r5, r1
 800a766:	4614      	mov	r4, r2
 800a768:	4698      	mov	r8, r3
 800a76a:	4606      	mov	r6, r0
 800a76c:	b09d      	sub	sp, #116	; 0x74
 800a76e:	b118      	cbz	r0, 800a778 <_vfiprintf_r+0x18>
 800a770:	6983      	ldr	r3, [r0, #24]
 800a772:	b90b      	cbnz	r3, 800a778 <_vfiprintf_r+0x18>
 800a774:	f7fd fc70 	bl	8008058 <__sinit>
 800a778:	4b89      	ldr	r3, [pc, #548]	; (800a9a0 <_vfiprintf_r+0x240>)
 800a77a:	429d      	cmp	r5, r3
 800a77c:	d11b      	bne.n	800a7b6 <_vfiprintf_r+0x56>
 800a77e:	6875      	ldr	r5, [r6, #4]
 800a780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a782:	07d9      	lsls	r1, r3, #31
 800a784:	d405      	bmi.n	800a792 <_vfiprintf_r+0x32>
 800a786:	89ab      	ldrh	r3, [r5, #12]
 800a788:	059a      	lsls	r2, r3, #22
 800a78a:	d402      	bmi.n	800a792 <_vfiprintf_r+0x32>
 800a78c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a78e:	f7fd fd26 	bl	80081de <__retarget_lock_acquire_recursive>
 800a792:	89ab      	ldrh	r3, [r5, #12]
 800a794:	071b      	lsls	r3, r3, #28
 800a796:	d501      	bpl.n	800a79c <_vfiprintf_r+0x3c>
 800a798:	692b      	ldr	r3, [r5, #16]
 800a79a:	b9eb      	cbnz	r3, 800a7d8 <_vfiprintf_r+0x78>
 800a79c:	4629      	mov	r1, r5
 800a79e:	4630      	mov	r0, r6
 800a7a0:	f000 f972 	bl	800aa88 <__swsetup_r>
 800a7a4:	b1c0      	cbz	r0, 800a7d8 <_vfiprintf_r+0x78>
 800a7a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7a8:	07dc      	lsls	r4, r3, #31
 800a7aa:	d50e      	bpl.n	800a7ca <_vfiprintf_r+0x6a>
 800a7ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7b0:	b01d      	add	sp, #116	; 0x74
 800a7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b6:	4b7b      	ldr	r3, [pc, #492]	; (800a9a4 <_vfiprintf_r+0x244>)
 800a7b8:	429d      	cmp	r5, r3
 800a7ba:	d101      	bne.n	800a7c0 <_vfiprintf_r+0x60>
 800a7bc:	68b5      	ldr	r5, [r6, #8]
 800a7be:	e7df      	b.n	800a780 <_vfiprintf_r+0x20>
 800a7c0:	4b79      	ldr	r3, [pc, #484]	; (800a9a8 <_vfiprintf_r+0x248>)
 800a7c2:	429d      	cmp	r5, r3
 800a7c4:	bf08      	it	eq
 800a7c6:	68f5      	ldreq	r5, [r6, #12]
 800a7c8:	e7da      	b.n	800a780 <_vfiprintf_r+0x20>
 800a7ca:	89ab      	ldrh	r3, [r5, #12]
 800a7cc:	0598      	lsls	r0, r3, #22
 800a7ce:	d4ed      	bmi.n	800a7ac <_vfiprintf_r+0x4c>
 800a7d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7d2:	f7fd fd05 	bl	80081e0 <__retarget_lock_release_recursive>
 800a7d6:	e7e9      	b.n	800a7ac <_vfiprintf_r+0x4c>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	9309      	str	r3, [sp, #36]	; 0x24
 800a7dc:	2320      	movs	r3, #32
 800a7de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7e2:	2330      	movs	r3, #48	; 0x30
 800a7e4:	f04f 0901 	mov.w	r9, #1
 800a7e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a9ac <_vfiprintf_r+0x24c>
 800a7f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7f4:	4623      	mov	r3, r4
 800a7f6:	469a      	mov	sl, r3
 800a7f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7fc:	b10a      	cbz	r2, 800a802 <_vfiprintf_r+0xa2>
 800a7fe:	2a25      	cmp	r2, #37	; 0x25
 800a800:	d1f9      	bne.n	800a7f6 <_vfiprintf_r+0x96>
 800a802:	ebba 0b04 	subs.w	fp, sl, r4
 800a806:	d00b      	beq.n	800a820 <_vfiprintf_r+0xc0>
 800a808:	465b      	mov	r3, fp
 800a80a:	4622      	mov	r2, r4
 800a80c:	4629      	mov	r1, r5
 800a80e:	4630      	mov	r0, r6
 800a810:	f7ff ff93 	bl	800a73a <__sfputs_r>
 800a814:	3001      	adds	r0, #1
 800a816:	f000 80aa 	beq.w	800a96e <_vfiprintf_r+0x20e>
 800a81a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a81c:	445a      	add	r2, fp
 800a81e:	9209      	str	r2, [sp, #36]	; 0x24
 800a820:	f89a 3000 	ldrb.w	r3, [sl]
 800a824:	2b00      	cmp	r3, #0
 800a826:	f000 80a2 	beq.w	800a96e <_vfiprintf_r+0x20e>
 800a82a:	2300      	movs	r3, #0
 800a82c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a834:	f10a 0a01 	add.w	sl, sl, #1
 800a838:	9304      	str	r3, [sp, #16]
 800a83a:	9307      	str	r3, [sp, #28]
 800a83c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a840:	931a      	str	r3, [sp, #104]	; 0x68
 800a842:	4654      	mov	r4, sl
 800a844:	2205      	movs	r2, #5
 800a846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a84a:	4858      	ldr	r0, [pc, #352]	; (800a9ac <_vfiprintf_r+0x24c>)
 800a84c:	f7ff fa0e 	bl	8009c6c <memchr>
 800a850:	9a04      	ldr	r2, [sp, #16]
 800a852:	b9d8      	cbnz	r0, 800a88c <_vfiprintf_r+0x12c>
 800a854:	06d1      	lsls	r1, r2, #27
 800a856:	bf44      	itt	mi
 800a858:	2320      	movmi	r3, #32
 800a85a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a85e:	0713      	lsls	r3, r2, #28
 800a860:	bf44      	itt	mi
 800a862:	232b      	movmi	r3, #43	; 0x2b
 800a864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a868:	f89a 3000 	ldrb.w	r3, [sl]
 800a86c:	2b2a      	cmp	r3, #42	; 0x2a
 800a86e:	d015      	beq.n	800a89c <_vfiprintf_r+0x13c>
 800a870:	4654      	mov	r4, sl
 800a872:	2000      	movs	r0, #0
 800a874:	f04f 0c0a 	mov.w	ip, #10
 800a878:	9a07      	ldr	r2, [sp, #28]
 800a87a:	4621      	mov	r1, r4
 800a87c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a880:	3b30      	subs	r3, #48	; 0x30
 800a882:	2b09      	cmp	r3, #9
 800a884:	d94e      	bls.n	800a924 <_vfiprintf_r+0x1c4>
 800a886:	b1b0      	cbz	r0, 800a8b6 <_vfiprintf_r+0x156>
 800a888:	9207      	str	r2, [sp, #28]
 800a88a:	e014      	b.n	800a8b6 <_vfiprintf_r+0x156>
 800a88c:	eba0 0308 	sub.w	r3, r0, r8
 800a890:	fa09 f303 	lsl.w	r3, r9, r3
 800a894:	4313      	orrs	r3, r2
 800a896:	46a2      	mov	sl, r4
 800a898:	9304      	str	r3, [sp, #16]
 800a89a:	e7d2      	b.n	800a842 <_vfiprintf_r+0xe2>
 800a89c:	9b03      	ldr	r3, [sp, #12]
 800a89e:	1d19      	adds	r1, r3, #4
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	9103      	str	r1, [sp, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	bfbb      	ittet	lt
 800a8a8:	425b      	neglt	r3, r3
 800a8aa:	f042 0202 	orrlt.w	r2, r2, #2
 800a8ae:	9307      	strge	r3, [sp, #28]
 800a8b0:	9307      	strlt	r3, [sp, #28]
 800a8b2:	bfb8      	it	lt
 800a8b4:	9204      	strlt	r2, [sp, #16]
 800a8b6:	7823      	ldrb	r3, [r4, #0]
 800a8b8:	2b2e      	cmp	r3, #46	; 0x2e
 800a8ba:	d10c      	bne.n	800a8d6 <_vfiprintf_r+0x176>
 800a8bc:	7863      	ldrb	r3, [r4, #1]
 800a8be:	2b2a      	cmp	r3, #42	; 0x2a
 800a8c0:	d135      	bne.n	800a92e <_vfiprintf_r+0x1ce>
 800a8c2:	9b03      	ldr	r3, [sp, #12]
 800a8c4:	3402      	adds	r4, #2
 800a8c6:	1d1a      	adds	r2, r3, #4
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	9203      	str	r2, [sp, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	bfb8      	it	lt
 800a8d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a8d4:	9305      	str	r3, [sp, #20]
 800a8d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a9bc <_vfiprintf_r+0x25c>
 800a8da:	2203      	movs	r2, #3
 800a8dc:	4650      	mov	r0, sl
 800a8de:	7821      	ldrb	r1, [r4, #0]
 800a8e0:	f7ff f9c4 	bl	8009c6c <memchr>
 800a8e4:	b140      	cbz	r0, 800a8f8 <_vfiprintf_r+0x198>
 800a8e6:	2340      	movs	r3, #64	; 0x40
 800a8e8:	eba0 000a 	sub.w	r0, r0, sl
 800a8ec:	fa03 f000 	lsl.w	r0, r3, r0
 800a8f0:	9b04      	ldr	r3, [sp, #16]
 800a8f2:	3401      	adds	r4, #1
 800a8f4:	4303      	orrs	r3, r0
 800a8f6:	9304      	str	r3, [sp, #16]
 800a8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8fc:	2206      	movs	r2, #6
 800a8fe:	482c      	ldr	r0, [pc, #176]	; (800a9b0 <_vfiprintf_r+0x250>)
 800a900:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a904:	f7ff f9b2 	bl	8009c6c <memchr>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d03f      	beq.n	800a98c <_vfiprintf_r+0x22c>
 800a90c:	4b29      	ldr	r3, [pc, #164]	; (800a9b4 <_vfiprintf_r+0x254>)
 800a90e:	bb1b      	cbnz	r3, 800a958 <_vfiprintf_r+0x1f8>
 800a910:	9b03      	ldr	r3, [sp, #12]
 800a912:	3307      	adds	r3, #7
 800a914:	f023 0307 	bic.w	r3, r3, #7
 800a918:	3308      	adds	r3, #8
 800a91a:	9303      	str	r3, [sp, #12]
 800a91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a91e:	443b      	add	r3, r7
 800a920:	9309      	str	r3, [sp, #36]	; 0x24
 800a922:	e767      	b.n	800a7f4 <_vfiprintf_r+0x94>
 800a924:	460c      	mov	r4, r1
 800a926:	2001      	movs	r0, #1
 800a928:	fb0c 3202 	mla	r2, ip, r2, r3
 800a92c:	e7a5      	b.n	800a87a <_vfiprintf_r+0x11a>
 800a92e:	2300      	movs	r3, #0
 800a930:	f04f 0c0a 	mov.w	ip, #10
 800a934:	4619      	mov	r1, r3
 800a936:	3401      	adds	r4, #1
 800a938:	9305      	str	r3, [sp, #20]
 800a93a:	4620      	mov	r0, r4
 800a93c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a940:	3a30      	subs	r2, #48	; 0x30
 800a942:	2a09      	cmp	r2, #9
 800a944:	d903      	bls.n	800a94e <_vfiprintf_r+0x1ee>
 800a946:	2b00      	cmp	r3, #0
 800a948:	d0c5      	beq.n	800a8d6 <_vfiprintf_r+0x176>
 800a94a:	9105      	str	r1, [sp, #20]
 800a94c:	e7c3      	b.n	800a8d6 <_vfiprintf_r+0x176>
 800a94e:	4604      	mov	r4, r0
 800a950:	2301      	movs	r3, #1
 800a952:	fb0c 2101 	mla	r1, ip, r1, r2
 800a956:	e7f0      	b.n	800a93a <_vfiprintf_r+0x1da>
 800a958:	ab03      	add	r3, sp, #12
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	462a      	mov	r2, r5
 800a95e:	4630      	mov	r0, r6
 800a960:	4b15      	ldr	r3, [pc, #84]	; (800a9b8 <_vfiprintf_r+0x258>)
 800a962:	a904      	add	r1, sp, #16
 800a964:	f7fd fd4c 	bl	8008400 <_printf_float>
 800a968:	4607      	mov	r7, r0
 800a96a:	1c78      	adds	r0, r7, #1
 800a96c:	d1d6      	bne.n	800a91c <_vfiprintf_r+0x1bc>
 800a96e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a970:	07d9      	lsls	r1, r3, #31
 800a972:	d405      	bmi.n	800a980 <_vfiprintf_r+0x220>
 800a974:	89ab      	ldrh	r3, [r5, #12]
 800a976:	059a      	lsls	r2, r3, #22
 800a978:	d402      	bmi.n	800a980 <_vfiprintf_r+0x220>
 800a97a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a97c:	f7fd fc30 	bl	80081e0 <__retarget_lock_release_recursive>
 800a980:	89ab      	ldrh	r3, [r5, #12]
 800a982:	065b      	lsls	r3, r3, #25
 800a984:	f53f af12 	bmi.w	800a7ac <_vfiprintf_r+0x4c>
 800a988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a98a:	e711      	b.n	800a7b0 <_vfiprintf_r+0x50>
 800a98c:	ab03      	add	r3, sp, #12
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	462a      	mov	r2, r5
 800a992:	4630      	mov	r0, r6
 800a994:	4b08      	ldr	r3, [pc, #32]	; (800a9b8 <_vfiprintf_r+0x258>)
 800a996:	a904      	add	r1, sp, #16
 800a998:	f7fd ffce 	bl	8008938 <_printf_i>
 800a99c:	e7e4      	b.n	800a968 <_vfiprintf_r+0x208>
 800a99e:	bf00      	nop
 800a9a0:	0800b08c 	.word	0x0800b08c
 800a9a4:	0800b0ac 	.word	0x0800b0ac
 800a9a8:	0800b06c 	.word	0x0800b06c
 800a9ac:	0800b2f4 	.word	0x0800b2f4
 800a9b0:	0800b2fe 	.word	0x0800b2fe
 800a9b4:	08008401 	.word	0x08008401
 800a9b8:	0800a73b 	.word	0x0800a73b
 800a9bc:	0800b2fa 	.word	0x0800b2fa

0800a9c0 <_read_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	4608      	mov	r0, r1
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	4d05      	ldr	r5, [pc, #20]	; (800a9e0 <_read_r+0x20>)
 800a9cc:	602a      	str	r2, [r5, #0]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f7f7 fdcf 	bl	8002572 <_read>
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	d102      	bne.n	800a9de <_read_r+0x1e>
 800a9d8:	682b      	ldr	r3, [r5, #0]
 800a9da:	b103      	cbz	r3, 800a9de <_read_r+0x1e>
 800a9dc:	6023      	str	r3, [r4, #0]
 800a9de:	bd38      	pop	{r3, r4, r5, pc}
 800a9e0:	20001ddc 	.word	0x20001ddc

0800a9e4 <__swbuf_r>:
 800a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e6:	460e      	mov	r6, r1
 800a9e8:	4614      	mov	r4, r2
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	b118      	cbz	r0, 800a9f6 <__swbuf_r+0x12>
 800a9ee:	6983      	ldr	r3, [r0, #24]
 800a9f0:	b90b      	cbnz	r3, 800a9f6 <__swbuf_r+0x12>
 800a9f2:	f7fd fb31 	bl	8008058 <__sinit>
 800a9f6:	4b21      	ldr	r3, [pc, #132]	; (800aa7c <__swbuf_r+0x98>)
 800a9f8:	429c      	cmp	r4, r3
 800a9fa:	d12b      	bne.n	800aa54 <__swbuf_r+0x70>
 800a9fc:	686c      	ldr	r4, [r5, #4]
 800a9fe:	69a3      	ldr	r3, [r4, #24]
 800aa00:	60a3      	str	r3, [r4, #8]
 800aa02:	89a3      	ldrh	r3, [r4, #12]
 800aa04:	071a      	lsls	r2, r3, #28
 800aa06:	d52f      	bpl.n	800aa68 <__swbuf_r+0x84>
 800aa08:	6923      	ldr	r3, [r4, #16]
 800aa0a:	b36b      	cbz	r3, 800aa68 <__swbuf_r+0x84>
 800aa0c:	6923      	ldr	r3, [r4, #16]
 800aa0e:	6820      	ldr	r0, [r4, #0]
 800aa10:	b2f6      	uxtb	r6, r6
 800aa12:	1ac0      	subs	r0, r0, r3
 800aa14:	6963      	ldr	r3, [r4, #20]
 800aa16:	4637      	mov	r7, r6
 800aa18:	4283      	cmp	r3, r0
 800aa1a:	dc04      	bgt.n	800aa26 <__swbuf_r+0x42>
 800aa1c:	4621      	mov	r1, r4
 800aa1e:	4628      	mov	r0, r5
 800aa20:	f7ff f8ca 	bl	8009bb8 <_fflush_r>
 800aa24:	bb30      	cbnz	r0, 800aa74 <__swbuf_r+0x90>
 800aa26:	68a3      	ldr	r3, [r4, #8]
 800aa28:	3001      	adds	r0, #1
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	60a3      	str	r3, [r4, #8]
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	1c5a      	adds	r2, r3, #1
 800aa32:	6022      	str	r2, [r4, #0]
 800aa34:	701e      	strb	r6, [r3, #0]
 800aa36:	6963      	ldr	r3, [r4, #20]
 800aa38:	4283      	cmp	r3, r0
 800aa3a:	d004      	beq.n	800aa46 <__swbuf_r+0x62>
 800aa3c:	89a3      	ldrh	r3, [r4, #12]
 800aa3e:	07db      	lsls	r3, r3, #31
 800aa40:	d506      	bpl.n	800aa50 <__swbuf_r+0x6c>
 800aa42:	2e0a      	cmp	r6, #10
 800aa44:	d104      	bne.n	800aa50 <__swbuf_r+0x6c>
 800aa46:	4621      	mov	r1, r4
 800aa48:	4628      	mov	r0, r5
 800aa4a:	f7ff f8b5 	bl	8009bb8 <_fflush_r>
 800aa4e:	b988      	cbnz	r0, 800aa74 <__swbuf_r+0x90>
 800aa50:	4638      	mov	r0, r7
 800aa52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa54:	4b0a      	ldr	r3, [pc, #40]	; (800aa80 <__swbuf_r+0x9c>)
 800aa56:	429c      	cmp	r4, r3
 800aa58:	d101      	bne.n	800aa5e <__swbuf_r+0x7a>
 800aa5a:	68ac      	ldr	r4, [r5, #8]
 800aa5c:	e7cf      	b.n	800a9fe <__swbuf_r+0x1a>
 800aa5e:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <__swbuf_r+0xa0>)
 800aa60:	429c      	cmp	r4, r3
 800aa62:	bf08      	it	eq
 800aa64:	68ec      	ldreq	r4, [r5, #12]
 800aa66:	e7ca      	b.n	800a9fe <__swbuf_r+0x1a>
 800aa68:	4621      	mov	r1, r4
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f000 f80c 	bl	800aa88 <__swsetup_r>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	d0cb      	beq.n	800aa0c <__swbuf_r+0x28>
 800aa74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aa78:	e7ea      	b.n	800aa50 <__swbuf_r+0x6c>
 800aa7a:	bf00      	nop
 800aa7c:	0800b08c 	.word	0x0800b08c
 800aa80:	0800b0ac 	.word	0x0800b0ac
 800aa84:	0800b06c 	.word	0x0800b06c

0800aa88 <__swsetup_r>:
 800aa88:	4b32      	ldr	r3, [pc, #200]	; (800ab54 <__swsetup_r+0xcc>)
 800aa8a:	b570      	push	{r4, r5, r6, lr}
 800aa8c:	681d      	ldr	r5, [r3, #0]
 800aa8e:	4606      	mov	r6, r0
 800aa90:	460c      	mov	r4, r1
 800aa92:	b125      	cbz	r5, 800aa9e <__swsetup_r+0x16>
 800aa94:	69ab      	ldr	r3, [r5, #24]
 800aa96:	b913      	cbnz	r3, 800aa9e <__swsetup_r+0x16>
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f7fd fadd 	bl	8008058 <__sinit>
 800aa9e:	4b2e      	ldr	r3, [pc, #184]	; (800ab58 <__swsetup_r+0xd0>)
 800aaa0:	429c      	cmp	r4, r3
 800aaa2:	d10f      	bne.n	800aac4 <__swsetup_r+0x3c>
 800aaa4:	686c      	ldr	r4, [r5, #4]
 800aaa6:	89a3      	ldrh	r3, [r4, #12]
 800aaa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaac:	0719      	lsls	r1, r3, #28
 800aaae:	d42c      	bmi.n	800ab0a <__swsetup_r+0x82>
 800aab0:	06dd      	lsls	r5, r3, #27
 800aab2:	d411      	bmi.n	800aad8 <__swsetup_r+0x50>
 800aab4:	2309      	movs	r3, #9
 800aab6:	6033      	str	r3, [r6, #0]
 800aab8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aabc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aac0:	81a3      	strh	r3, [r4, #12]
 800aac2:	e03e      	b.n	800ab42 <__swsetup_r+0xba>
 800aac4:	4b25      	ldr	r3, [pc, #148]	; (800ab5c <__swsetup_r+0xd4>)
 800aac6:	429c      	cmp	r4, r3
 800aac8:	d101      	bne.n	800aace <__swsetup_r+0x46>
 800aaca:	68ac      	ldr	r4, [r5, #8]
 800aacc:	e7eb      	b.n	800aaa6 <__swsetup_r+0x1e>
 800aace:	4b24      	ldr	r3, [pc, #144]	; (800ab60 <__swsetup_r+0xd8>)
 800aad0:	429c      	cmp	r4, r3
 800aad2:	bf08      	it	eq
 800aad4:	68ec      	ldreq	r4, [r5, #12]
 800aad6:	e7e6      	b.n	800aaa6 <__swsetup_r+0x1e>
 800aad8:	0758      	lsls	r0, r3, #29
 800aada:	d512      	bpl.n	800ab02 <__swsetup_r+0x7a>
 800aadc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aade:	b141      	cbz	r1, 800aaf2 <__swsetup_r+0x6a>
 800aae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aae4:	4299      	cmp	r1, r3
 800aae6:	d002      	beq.n	800aaee <__swsetup_r+0x66>
 800aae8:	4630      	mov	r0, r6
 800aaea:	f7ff fc69 	bl	800a3c0 <_free_r>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	6363      	str	r3, [r4, #52]	; 0x34
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aaf8:	81a3      	strh	r3, [r4, #12]
 800aafa:	2300      	movs	r3, #0
 800aafc:	6063      	str	r3, [r4, #4]
 800aafe:	6923      	ldr	r3, [r4, #16]
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	89a3      	ldrh	r3, [r4, #12]
 800ab04:	f043 0308 	orr.w	r3, r3, #8
 800ab08:	81a3      	strh	r3, [r4, #12]
 800ab0a:	6923      	ldr	r3, [r4, #16]
 800ab0c:	b94b      	cbnz	r3, 800ab22 <__swsetup_r+0x9a>
 800ab0e:	89a3      	ldrh	r3, [r4, #12]
 800ab10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab18:	d003      	beq.n	800ab22 <__swsetup_r+0x9a>
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	f000 f875 	bl	800ac0c <__smakebuf_r>
 800ab22:	89a0      	ldrh	r0, [r4, #12]
 800ab24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab28:	f010 0301 	ands.w	r3, r0, #1
 800ab2c:	d00a      	beq.n	800ab44 <__swsetup_r+0xbc>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60a3      	str	r3, [r4, #8]
 800ab32:	6963      	ldr	r3, [r4, #20]
 800ab34:	425b      	negs	r3, r3
 800ab36:	61a3      	str	r3, [r4, #24]
 800ab38:	6923      	ldr	r3, [r4, #16]
 800ab3a:	b943      	cbnz	r3, 800ab4e <__swsetup_r+0xc6>
 800ab3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab40:	d1ba      	bne.n	800aab8 <__swsetup_r+0x30>
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	0781      	lsls	r1, r0, #30
 800ab46:	bf58      	it	pl
 800ab48:	6963      	ldrpl	r3, [r4, #20]
 800ab4a:	60a3      	str	r3, [r4, #8]
 800ab4c:	e7f4      	b.n	800ab38 <__swsetup_r+0xb0>
 800ab4e:	2000      	movs	r0, #0
 800ab50:	e7f7      	b.n	800ab42 <__swsetup_r+0xba>
 800ab52:	bf00      	nop
 800ab54:	20000018 	.word	0x20000018
 800ab58:	0800b08c 	.word	0x0800b08c
 800ab5c:	0800b0ac 	.word	0x0800b0ac
 800ab60:	0800b06c 	.word	0x0800b06c

0800ab64 <__assert_func>:
 800ab64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab66:	4614      	mov	r4, r2
 800ab68:	461a      	mov	r2, r3
 800ab6a:	4b09      	ldr	r3, [pc, #36]	; (800ab90 <__assert_func+0x2c>)
 800ab6c:	4605      	mov	r5, r0
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68d8      	ldr	r0, [r3, #12]
 800ab72:	b14c      	cbz	r4, 800ab88 <__assert_func+0x24>
 800ab74:	4b07      	ldr	r3, [pc, #28]	; (800ab94 <__assert_func+0x30>)
 800ab76:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab7a:	9100      	str	r1, [sp, #0]
 800ab7c:	462b      	mov	r3, r5
 800ab7e:	4906      	ldr	r1, [pc, #24]	; (800ab98 <__assert_func+0x34>)
 800ab80:	f000 f80e 	bl	800aba0 <fiprintf>
 800ab84:	f000 f8e1 	bl	800ad4a <abort>
 800ab88:	4b04      	ldr	r3, [pc, #16]	; (800ab9c <__assert_func+0x38>)
 800ab8a:	461c      	mov	r4, r3
 800ab8c:	e7f3      	b.n	800ab76 <__assert_func+0x12>
 800ab8e:	bf00      	nop
 800ab90:	20000018 	.word	0x20000018
 800ab94:	0800b305 	.word	0x0800b305
 800ab98:	0800b312 	.word	0x0800b312
 800ab9c:	0800b340 	.word	0x0800b340

0800aba0 <fiprintf>:
 800aba0:	b40e      	push	{r1, r2, r3}
 800aba2:	b503      	push	{r0, r1, lr}
 800aba4:	4601      	mov	r1, r0
 800aba6:	ab03      	add	r3, sp, #12
 800aba8:	4805      	ldr	r0, [pc, #20]	; (800abc0 <fiprintf+0x20>)
 800abaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800abae:	6800      	ldr	r0, [r0, #0]
 800abb0:	9301      	str	r3, [sp, #4]
 800abb2:	f7ff fdd5 	bl	800a760 <_vfiprintf_r>
 800abb6:	b002      	add	sp, #8
 800abb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800abbc:	b003      	add	sp, #12
 800abbe:	4770      	bx	lr
 800abc0:	20000018 	.word	0x20000018

0800abc4 <__swhatbuf_r>:
 800abc4:	b570      	push	{r4, r5, r6, lr}
 800abc6:	460e      	mov	r6, r1
 800abc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abcc:	4614      	mov	r4, r2
 800abce:	2900      	cmp	r1, #0
 800abd0:	461d      	mov	r5, r3
 800abd2:	b096      	sub	sp, #88	; 0x58
 800abd4:	da07      	bge.n	800abe6 <__swhatbuf_r+0x22>
 800abd6:	2300      	movs	r3, #0
 800abd8:	602b      	str	r3, [r5, #0]
 800abda:	89b3      	ldrh	r3, [r6, #12]
 800abdc:	061a      	lsls	r2, r3, #24
 800abde:	d410      	bmi.n	800ac02 <__swhatbuf_r+0x3e>
 800abe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abe4:	e00e      	b.n	800ac04 <__swhatbuf_r+0x40>
 800abe6:	466a      	mov	r2, sp
 800abe8:	f000 f8b6 	bl	800ad58 <_fstat_r>
 800abec:	2800      	cmp	r0, #0
 800abee:	dbf2      	blt.n	800abd6 <__swhatbuf_r+0x12>
 800abf0:	9a01      	ldr	r2, [sp, #4]
 800abf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abfa:	425a      	negs	r2, r3
 800abfc:	415a      	adcs	r2, r3
 800abfe:	602a      	str	r2, [r5, #0]
 800ac00:	e7ee      	b.n	800abe0 <__swhatbuf_r+0x1c>
 800ac02:	2340      	movs	r3, #64	; 0x40
 800ac04:	2000      	movs	r0, #0
 800ac06:	6023      	str	r3, [r4, #0]
 800ac08:	b016      	add	sp, #88	; 0x58
 800ac0a:	bd70      	pop	{r4, r5, r6, pc}

0800ac0c <__smakebuf_r>:
 800ac0c:	898b      	ldrh	r3, [r1, #12]
 800ac0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac10:	079d      	lsls	r5, r3, #30
 800ac12:	4606      	mov	r6, r0
 800ac14:	460c      	mov	r4, r1
 800ac16:	d507      	bpl.n	800ac28 <__smakebuf_r+0x1c>
 800ac18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	6123      	str	r3, [r4, #16]
 800ac20:	2301      	movs	r3, #1
 800ac22:	6163      	str	r3, [r4, #20]
 800ac24:	b002      	add	sp, #8
 800ac26:	bd70      	pop	{r4, r5, r6, pc}
 800ac28:	466a      	mov	r2, sp
 800ac2a:	ab01      	add	r3, sp, #4
 800ac2c:	f7ff ffca 	bl	800abc4 <__swhatbuf_r>
 800ac30:	9900      	ldr	r1, [sp, #0]
 800ac32:	4605      	mov	r5, r0
 800ac34:	4630      	mov	r0, r6
 800ac36:	f7fd faeb 	bl	8008210 <_malloc_r>
 800ac3a:	b948      	cbnz	r0, 800ac50 <__smakebuf_r+0x44>
 800ac3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac40:	059a      	lsls	r2, r3, #22
 800ac42:	d4ef      	bmi.n	800ac24 <__smakebuf_r+0x18>
 800ac44:	f023 0303 	bic.w	r3, r3, #3
 800ac48:	f043 0302 	orr.w	r3, r3, #2
 800ac4c:	81a3      	strh	r3, [r4, #12]
 800ac4e:	e7e3      	b.n	800ac18 <__smakebuf_r+0xc>
 800ac50:	4b0d      	ldr	r3, [pc, #52]	; (800ac88 <__smakebuf_r+0x7c>)
 800ac52:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	6020      	str	r0, [r4, #0]
 800ac58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac5c:	81a3      	strh	r3, [r4, #12]
 800ac5e:	9b00      	ldr	r3, [sp, #0]
 800ac60:	6120      	str	r0, [r4, #16]
 800ac62:	6163      	str	r3, [r4, #20]
 800ac64:	9b01      	ldr	r3, [sp, #4]
 800ac66:	b15b      	cbz	r3, 800ac80 <__smakebuf_r+0x74>
 800ac68:	4630      	mov	r0, r6
 800ac6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac6e:	f000 f885 	bl	800ad7c <_isatty_r>
 800ac72:	b128      	cbz	r0, 800ac80 <__smakebuf_r+0x74>
 800ac74:	89a3      	ldrh	r3, [r4, #12]
 800ac76:	f023 0303 	bic.w	r3, r3, #3
 800ac7a:	f043 0301 	orr.w	r3, r3, #1
 800ac7e:	81a3      	strh	r3, [r4, #12]
 800ac80:	89a0      	ldrh	r0, [r4, #12]
 800ac82:	4305      	orrs	r5, r0
 800ac84:	81a5      	strh	r5, [r4, #12]
 800ac86:	e7cd      	b.n	800ac24 <__smakebuf_r+0x18>
 800ac88:	08007ff1 	.word	0x08007ff1

0800ac8c <__ascii_mbtowc>:
 800ac8c:	b082      	sub	sp, #8
 800ac8e:	b901      	cbnz	r1, 800ac92 <__ascii_mbtowc+0x6>
 800ac90:	a901      	add	r1, sp, #4
 800ac92:	b142      	cbz	r2, 800aca6 <__ascii_mbtowc+0x1a>
 800ac94:	b14b      	cbz	r3, 800acaa <__ascii_mbtowc+0x1e>
 800ac96:	7813      	ldrb	r3, [r2, #0]
 800ac98:	600b      	str	r3, [r1, #0]
 800ac9a:	7812      	ldrb	r2, [r2, #0]
 800ac9c:	1e10      	subs	r0, r2, #0
 800ac9e:	bf18      	it	ne
 800aca0:	2001      	movne	r0, #1
 800aca2:	b002      	add	sp, #8
 800aca4:	4770      	bx	lr
 800aca6:	4610      	mov	r0, r2
 800aca8:	e7fb      	b.n	800aca2 <__ascii_mbtowc+0x16>
 800acaa:	f06f 0001 	mvn.w	r0, #1
 800acae:	e7f8      	b.n	800aca2 <__ascii_mbtowc+0x16>

0800acb0 <memmove>:
 800acb0:	4288      	cmp	r0, r1
 800acb2:	b510      	push	{r4, lr}
 800acb4:	eb01 0402 	add.w	r4, r1, r2
 800acb8:	d902      	bls.n	800acc0 <memmove+0x10>
 800acba:	4284      	cmp	r4, r0
 800acbc:	4623      	mov	r3, r4
 800acbe:	d807      	bhi.n	800acd0 <memmove+0x20>
 800acc0:	1e43      	subs	r3, r0, #1
 800acc2:	42a1      	cmp	r1, r4
 800acc4:	d008      	beq.n	800acd8 <memmove+0x28>
 800acc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acce:	e7f8      	b.n	800acc2 <memmove+0x12>
 800acd0:	4601      	mov	r1, r0
 800acd2:	4402      	add	r2, r0
 800acd4:	428a      	cmp	r2, r1
 800acd6:	d100      	bne.n	800acda <memmove+0x2a>
 800acd8:	bd10      	pop	{r4, pc}
 800acda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ace2:	e7f7      	b.n	800acd4 <memmove+0x24>

0800ace4 <_realloc_r>:
 800ace4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace6:	4607      	mov	r7, r0
 800ace8:	4614      	mov	r4, r2
 800acea:	460e      	mov	r6, r1
 800acec:	b921      	cbnz	r1, 800acf8 <_realloc_r+0x14>
 800acee:	4611      	mov	r1, r2
 800acf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800acf4:	f7fd ba8c 	b.w	8008210 <_malloc_r>
 800acf8:	b922      	cbnz	r2, 800ad04 <_realloc_r+0x20>
 800acfa:	f7ff fb61 	bl	800a3c0 <_free_r>
 800acfe:	4625      	mov	r5, r4
 800ad00:	4628      	mov	r0, r5
 800ad02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad04:	f000 f84a 	bl	800ad9c <_malloc_usable_size_r>
 800ad08:	42a0      	cmp	r0, r4
 800ad0a:	d20f      	bcs.n	800ad2c <_realloc_r+0x48>
 800ad0c:	4621      	mov	r1, r4
 800ad0e:	4638      	mov	r0, r7
 800ad10:	f7fd fa7e 	bl	8008210 <_malloc_r>
 800ad14:	4605      	mov	r5, r0
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d0f2      	beq.n	800ad00 <_realloc_r+0x1c>
 800ad1a:	4631      	mov	r1, r6
 800ad1c:	4622      	mov	r2, r4
 800ad1e:	f7fd fa60 	bl	80081e2 <memcpy>
 800ad22:	4631      	mov	r1, r6
 800ad24:	4638      	mov	r0, r7
 800ad26:	f7ff fb4b 	bl	800a3c0 <_free_r>
 800ad2a:	e7e9      	b.n	800ad00 <_realloc_r+0x1c>
 800ad2c:	4635      	mov	r5, r6
 800ad2e:	e7e7      	b.n	800ad00 <_realloc_r+0x1c>

0800ad30 <__ascii_wctomb>:
 800ad30:	4603      	mov	r3, r0
 800ad32:	4608      	mov	r0, r1
 800ad34:	b141      	cbz	r1, 800ad48 <__ascii_wctomb+0x18>
 800ad36:	2aff      	cmp	r2, #255	; 0xff
 800ad38:	d904      	bls.n	800ad44 <__ascii_wctomb+0x14>
 800ad3a:	228a      	movs	r2, #138	; 0x8a
 800ad3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad40:	601a      	str	r2, [r3, #0]
 800ad42:	4770      	bx	lr
 800ad44:	2001      	movs	r0, #1
 800ad46:	700a      	strb	r2, [r1, #0]
 800ad48:	4770      	bx	lr

0800ad4a <abort>:
 800ad4a:	2006      	movs	r0, #6
 800ad4c:	b508      	push	{r3, lr}
 800ad4e:	f000 f855 	bl	800adfc <raise>
 800ad52:	2001      	movs	r0, #1
 800ad54:	f7f7 fc03 	bl	800255e <_exit>

0800ad58 <_fstat_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	4d06      	ldr	r5, [pc, #24]	; (800ad78 <_fstat_r+0x20>)
 800ad5e:	4604      	mov	r4, r0
 800ad60:	4608      	mov	r0, r1
 800ad62:	4611      	mov	r1, r2
 800ad64:	602b      	str	r3, [r5, #0]
 800ad66:	f7f7 fc2c 	bl	80025c2 <_fstat>
 800ad6a:	1c43      	adds	r3, r0, #1
 800ad6c:	d102      	bne.n	800ad74 <_fstat_r+0x1c>
 800ad6e:	682b      	ldr	r3, [r5, #0]
 800ad70:	b103      	cbz	r3, 800ad74 <_fstat_r+0x1c>
 800ad72:	6023      	str	r3, [r4, #0]
 800ad74:	bd38      	pop	{r3, r4, r5, pc}
 800ad76:	bf00      	nop
 800ad78:	20001ddc 	.word	0x20001ddc

0800ad7c <_isatty_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	2300      	movs	r3, #0
 800ad80:	4d05      	ldr	r5, [pc, #20]	; (800ad98 <_isatty_r+0x1c>)
 800ad82:	4604      	mov	r4, r0
 800ad84:	4608      	mov	r0, r1
 800ad86:	602b      	str	r3, [r5, #0]
 800ad88:	f7f7 fc2a 	bl	80025e0 <_isatty>
 800ad8c:	1c43      	adds	r3, r0, #1
 800ad8e:	d102      	bne.n	800ad96 <_isatty_r+0x1a>
 800ad90:	682b      	ldr	r3, [r5, #0]
 800ad92:	b103      	cbz	r3, 800ad96 <_isatty_r+0x1a>
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	bd38      	pop	{r3, r4, r5, pc}
 800ad98:	20001ddc 	.word	0x20001ddc

0800ad9c <_malloc_usable_size_r>:
 800ad9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ada0:	1f18      	subs	r0, r3, #4
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	bfbc      	itt	lt
 800ada6:	580b      	ldrlt	r3, [r1, r0]
 800ada8:	18c0      	addlt	r0, r0, r3
 800adaa:	4770      	bx	lr

0800adac <_raise_r>:
 800adac:	291f      	cmp	r1, #31
 800adae:	b538      	push	{r3, r4, r5, lr}
 800adb0:	4604      	mov	r4, r0
 800adb2:	460d      	mov	r5, r1
 800adb4:	d904      	bls.n	800adc0 <_raise_r+0x14>
 800adb6:	2316      	movs	r3, #22
 800adb8:	6003      	str	r3, [r0, #0]
 800adba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adbe:	bd38      	pop	{r3, r4, r5, pc}
 800adc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800adc2:	b112      	cbz	r2, 800adca <_raise_r+0x1e>
 800adc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adc8:	b94b      	cbnz	r3, 800adde <_raise_r+0x32>
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 f830 	bl	800ae30 <_getpid_r>
 800add0:	462a      	mov	r2, r5
 800add2:	4601      	mov	r1, r0
 800add4:	4620      	mov	r0, r4
 800add6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adda:	f000 b817 	b.w	800ae0c <_kill_r>
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d00a      	beq.n	800adf8 <_raise_r+0x4c>
 800ade2:	1c59      	adds	r1, r3, #1
 800ade4:	d103      	bne.n	800adee <_raise_r+0x42>
 800ade6:	2316      	movs	r3, #22
 800ade8:	6003      	str	r3, [r0, #0]
 800adea:	2001      	movs	r0, #1
 800adec:	e7e7      	b.n	800adbe <_raise_r+0x12>
 800adee:	2400      	movs	r4, #0
 800adf0:	4628      	mov	r0, r5
 800adf2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800adf6:	4798      	blx	r3
 800adf8:	2000      	movs	r0, #0
 800adfa:	e7e0      	b.n	800adbe <_raise_r+0x12>

0800adfc <raise>:
 800adfc:	4b02      	ldr	r3, [pc, #8]	; (800ae08 <raise+0xc>)
 800adfe:	4601      	mov	r1, r0
 800ae00:	6818      	ldr	r0, [r3, #0]
 800ae02:	f7ff bfd3 	b.w	800adac <_raise_r>
 800ae06:	bf00      	nop
 800ae08:	20000018 	.word	0x20000018

0800ae0c <_kill_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	2300      	movs	r3, #0
 800ae10:	4d06      	ldr	r5, [pc, #24]	; (800ae2c <_kill_r+0x20>)
 800ae12:	4604      	mov	r4, r0
 800ae14:	4608      	mov	r0, r1
 800ae16:	4611      	mov	r1, r2
 800ae18:	602b      	str	r3, [r5, #0]
 800ae1a:	f7f7 fb90 	bl	800253e <_kill>
 800ae1e:	1c43      	adds	r3, r0, #1
 800ae20:	d102      	bne.n	800ae28 <_kill_r+0x1c>
 800ae22:	682b      	ldr	r3, [r5, #0]
 800ae24:	b103      	cbz	r3, 800ae28 <_kill_r+0x1c>
 800ae26:	6023      	str	r3, [r4, #0]
 800ae28:	bd38      	pop	{r3, r4, r5, pc}
 800ae2a:	bf00      	nop
 800ae2c:	20001ddc 	.word	0x20001ddc

0800ae30 <_getpid_r>:
 800ae30:	f7f7 bb7e 	b.w	8002530 <_getpid>

0800ae34 <_init>:
 800ae34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae36:	bf00      	nop
 800ae38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae3a:	bc08      	pop	{r3}
 800ae3c:	469e      	mov	lr, r3
 800ae3e:	4770      	bx	lr

0800ae40 <_fini>:
 800ae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae42:	bf00      	nop
 800ae44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae46:	bc08      	pop	{r3}
 800ae48:	469e      	mov	lr, r3
 800ae4a:	4770      	bx	lr
