
FreeRTOS_Bluetooh_RGB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006990  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08006aa0  08006aa0  00016aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d80  08006d80  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08006d80  08006d80  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d80  08006d80  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d84  08006d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08006d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad8  200001f4  08006f7c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ccc  08006f7c  00021ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019033  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003269  00000000  00000000  00039250  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001430  00000000  00000000  0003c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c8  00000000  00000000  0003d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004588  00000000  00000000  0003ebb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010145  00000000  00000000  00043140  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094e1d  00000000  00000000  00053285  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e80a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d00  00000000  00000000  000e8120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a88 	.word	0x08006a88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08006a88 	.word	0x08006a88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000168:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800016c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000170:	f003 0301 	and.w	r3, r3, #1
 8000174:	2b00      	cmp	r3, #0
 8000176:	d013      	beq.n	80001a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000180:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000184:	2b00      	cmp	r3, #0
 8000186:	d00b      	beq.n	80001a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	e000      	b.n	800018c <ITM_SendChar+0x2c>
    {
      __NOP();
 800018a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800018c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	2b00      	cmp	r3, #0
 8000194:	d0f9      	beq.n	800018a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000196:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800019a:	687a      	ldr	r2, [r7, #4]
 800019c:	b2d2      	uxtb	r2, r2
 800019e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80001a0:	687b      	ldr	r3, [r7, #4]
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr

080001ac <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-----------------------------for prinf--------------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	60f8      	str	r0, [r7, #12]
 80001b4:	60b9      	str	r1, [r7, #8]
 80001b6:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001b8:	2300      	movs	r3, #0
 80001ba:	617b      	str	r3, [r7, #20]
 80001bc:	e009      	b.n	80001d2 <_write+0x26>
		ITM_SendChar(*ptr++);
 80001be:	68bb      	ldr	r3, [r7, #8]
 80001c0:	1c5a      	adds	r2, r3, #1
 80001c2:	60ba      	str	r2, [r7, #8]
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	4618      	mov	r0, r3
 80001c8:	f7ff ffca 	bl	8000160 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001cc:	697b      	ldr	r3, [r7, #20]
 80001ce:	3301      	adds	r3, #1
 80001d0:	617b      	str	r3, [r7, #20]
 80001d2:	697a      	ldr	r2, [r7, #20]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	429a      	cmp	r2, r3
 80001d8:	dbf1      	blt.n	80001be <_write+0x12>
	}
	return len;
 80001da:	687b      	ldr	r3, [r7, #4]
}
 80001dc:	4618      	mov	r0, r3
 80001de:	3718      	adds	r7, #24
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <string_parse>:
/*-----------------------------for Bluetooth--------------------------------------*/
/*---------Добавим гл. фун-ю которая передает в USAR все, что приходит!--------*/
void string_parse(char *buf_str) //
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) buf_str, strlen(buf_str), 0x1000);
 80001ec:	6878      	ldr	r0, [r7, #4]
 80001ee:	f7ff ffaf 	bl	8000150 <strlen>
 80001f2:	4603      	mov	r3, r0
 80001f4:	b29a      	uxth	r2, r3
 80001f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001fa:	6879      	ldr	r1, [r7, #4]
 80001fc:	480b      	ldr	r0, [pc, #44]	; (800022c <string_parse+0x48>)
 80001fe:	f002 fbdc 	bl	80029ba <HAL_UART_Transmit>
	printf("Get message: %s \n", buf_str);
 8000202:	6879      	ldr	r1, [r7, #4]
 8000204:	480a      	ldr	r0, [pc, #40]	; (8000230 <string_parse+0x4c>)
 8000206:	f005 fc9b 	bl	8005b40 <iprintf>
	brightness = atoi(buf_str); // перевод str в число
 800020a:	6878      	ldr	r0, [r7, #4]
 800020c:	f005 fc56 	bl	8005abc <atoi>
 8000210:	4602      	mov	r2, r0
 8000212:	4b08      	ldr	r3, [pc, #32]	; (8000234 <string_parse+0x50>)
 8000214:	601a      	str	r2, [r3, #0]
	printf("brightness = %d \n", brightness);
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <string_parse+0x50>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4619      	mov	r1, r3
 800021c:	4806      	ldr	r0, [pc, #24]	; (8000238 <string_parse+0x54>)
 800021e:	f005 fc8f 	bl	8005b40 <iprintf>
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	20001bf8 	.word	0x20001bf8
 8000230:	08006b04 	.word	0x08006b04
 8000234:	20001c38 	.word	0x20001c38
 8000238:	08006b18 	.word	0x08006b18

0800023c <UART2_RxCpltCallback>:
/*------------Теперь добавим гл-й обработчик приёма символа из USART---------------------------------------------*/
void UART2_RxCpltCallback(void) // тут подробно https://youtu.be/S4P-lAa4iFQ?t=547
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
	uint8_t b; // Можно не создавать эту переменную!
	b = str1[0]; // Принимаем один байт и записываем в переменную "b".
 8000242:	4b20      	ldr	r3, [pc, #128]	; (80002c4 <UART2_RxCpltCallback+0x88>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	71fb      	strb	r3, [r7, #7]
	//если вдруг случайно превысим длину буфера
	if (usartprop.usart_cnt > 59) {
 8000248:	4b1f      	ldr	r3, [pc, #124]	; (80002c8 <UART2_RxCpltCallback+0x8c>)
 800024a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800024e:	2b3b      	cmp	r3, #59	; 0x3b
 8000250:	d909      	bls.n	8000266 <UART2_RxCpltCallback+0x2a>
		usartprop.usart_cnt = 0; // то, обнуляем счетчик
 8000252:	4b1d      	ldr	r3, [pc, #116]	; (80002c8 <UART2_RxCpltCallback+0x8c>)
 8000254:	2200      	movs	r2, #0
 8000256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		HAL_UART_Receive_IT(&huart2, (uint8_t*) str1, 1); // И снова даем команду получать данные из UART.
 800025a:	2201      	movs	r2, #1
 800025c:	4919      	ldr	r1, [pc, #100]	; (80002c4 <UART2_RxCpltCallback+0x88>)
 800025e:	481b      	ldr	r0, [pc, #108]	; (80002cc <UART2_RxCpltCallback+0x90>)
 8000260:	f002 fc3d 	bl	8002ade <HAL_UART_Receive_IT>
		return; // Выход из функции.
 8000264:	e02a      	b.n	80002bc <UART2_RxCpltCallback+0x80>
	}
	usartprop.usart_buf[usartprop.usart_cnt] = b; // Если не превышена длинна буфера то присваевыем данный байт к буферу UART.
 8000266:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <UART2_RxCpltCallback+0x8c>)
 8000268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800026c:	4619      	mov	r1, r3
 800026e:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <UART2_RxCpltCallback+0x8c>)
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	5453      	strb	r3, [r2, r1]
	if (b == 0x0A) { // Если встретился символ перевода строки то, считаем, что строка закончилась и передаем ее на обработку.
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	2b0a      	cmp	r3, #10
 8000278:	d113      	bne.n	80002a2 <UART2_RxCpltCallback+0x66>
		usartprop.usart_buf[usartprop.usart_cnt + 1] = 0; // В конец строки передаем "ноль" тем самым обозначим конец строки.
 800027a:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <UART2_RxCpltCallback+0x8c>)
 800027c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000280:	3301      	adds	r3, #1
 8000282:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <UART2_RxCpltCallback+0x8c>)
 8000284:	2100      	movs	r1, #0
 8000286:	54d1      	strb	r1, [r2, r3]
		string_parse((char*) usartprop.usart_buf); // передаем троку в "string_parse"
 8000288:	480f      	ldr	r0, [pc, #60]	; (80002c8 <UART2_RxCpltCallback+0x8c>)
 800028a:	f7ff ffab 	bl	80001e4 <string_parse>
		usartprop.usart_cnt = 0; // Обнуляем счетчик
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <UART2_RxCpltCallback+0x8c>)
 8000290:	2200      	movs	r2, #0
 8000292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		HAL_UART_Receive_IT(&huart2, (uint8_t*) str1, 1); // И снова запускаем UART на прием.
 8000296:	2201      	movs	r2, #1
 8000298:	490a      	ldr	r1, [pc, #40]	; (80002c4 <UART2_RxCpltCallback+0x88>)
 800029a:	480c      	ldr	r0, [pc, #48]	; (80002cc <UART2_RxCpltCallback+0x90>)
 800029c:	f002 fc1f 	bl	8002ade <HAL_UART_Receive_IT>
		return;
 80002a0:	e00c      	b.n	80002bc <UART2_RxCpltCallback+0x80>
	}
	usartprop.usart_cnt++; // Если не получили символ перевода строки то, наращиваем счетчик и продолжаем получать строки.
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <UART2_RxCpltCallback+0x8c>)
 80002a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80002a8:	3301      	adds	r3, #1
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <UART2_RxCpltCallback+0x8c>)
 80002ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	HAL_UART_Receive_IT(&huart2, (uint8_t*) str1, 1); // Снова команда на примем байта.
 80002b2:	2201      	movs	r2, #1
 80002b4:	4903      	ldr	r1, [pc, #12]	; (80002c4 <UART2_RxCpltCallback+0x88>)
 80002b6:	4805      	ldr	r0, [pc, #20]	; (80002cc <UART2_RxCpltCallback+0x90>)
 80002b8:	f002 fc11 	bl	8002ade <HAL_UART_Receive_IT>
}
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000210 	.word	0x20000210
 80002c8:	20001bb8 	.word	0x20001bb8
 80002cc:	20001bf8 	.word	0x20001bf8

080002d0 <rgb_set>:
/*-----------------------------for RGB--------------------------------------*/
void rgb_set(uint8_t red, uint8_t green, uint8_t blue) {
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
 80002da:	460b      	mov	r3, r1
 80002dc:	71bb      	strb	r3, [r7, #6]
 80002de:	4613      	mov	r3, r2
 80002e0:	717b      	strb	r3, [r7, #5]
	htim3.Instance->CCR1 = 255 - red; // Если у нас RGB с общим катодом то приведи к такому виду htim2.Instance->CCR1 = red;
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80002e8:	4b09      	ldr	r3, [pc, #36]	; (8000310 <rgb_set+0x40>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = 255 - green; // Если у нас RGB с общим катодом то приведи к такому виду htim2.Instance->CCR1 = green;
 80002ee:	79bb      	ldrb	r3, [r7, #6]
 80002f0:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <rgb_set+0x40>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = 255 - blue; // Если у нас RGB с общим катодом то приведи к такому виду htim2.Instance->CCR1 = blue;
 80002fa:	797b      	ldrb	r3, [r7, #5]
 80002fc:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000300:	4b03      	ldr	r3, [pc, #12]	; (8000310 <rgb_set+0x40>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	20001b70 	.word	0x20001b70

08000314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000318:	f000 fc50 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031c:	f000 f84c 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000320:	f000 f946 	bl	80005b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000324:	f000 f91a 	bl	800055c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000328:	f000 f88c 	bl	8000444 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	/*-----------------------------for Bluetooth--------------------------------------*/
	//************* Инициируем приём данных в USART, а также запустим наш таймер ***************//
	HAL_UART_Receive_IT(&huart2, (uint8_t*) str1, 1);
 800032c:	2201      	movs	r2, #1
 800032e:	4916      	ldr	r1, [pc, #88]	; (8000388 <main+0x74>)
 8000330:	4816      	ldr	r0, [pc, #88]	; (800038c <main+0x78>)
 8000332:	f002 fbd4 	bl	8002ade <HAL_UART_Receive_IT>
	//HAL_TIM_Base_Start_IT(&htim2);
	  /*-----------------------------for RGB--------------------------------------*/
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000336:	2100      	movs	r1, #0
 8000338:	4815      	ldr	r0, [pc, #84]	; (8000390 <main+0x7c>)
 800033a:	f001 fc99 	bl	8001c70 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800033e:	2104      	movs	r1, #4
 8000340:	4813      	ldr	r0, [pc, #76]	; (8000390 <main+0x7c>)
 8000342:	f001 fc95 	bl	8001c70 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000346:	2108      	movs	r1, #8
 8000348:	4811      	ldr	r0, [pc, #68]	; (8000390 <main+0x7c>)
 800034a:	f001 fc91 	bl	8001c70 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800034e:	f002 ff1d 	bl	800318c <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000352:	4a10      	ldr	r2, [pc, #64]	; (8000394 <main+0x80>)
 8000354:	2100      	movs	r1, #0
 8000356:	4810      	ldr	r0, [pc, #64]	; (8000398 <main+0x84>)
 8000358:	f002 ff7e 	bl	8003258 <osThreadNew>
 800035c:	4602      	mov	r2, r0
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <main+0x88>)
 8000360:	601a      	str	r2, [r3, #0]

  /* creation of my_RGB_Task */
  my_RGB_TaskHandle = osThreadNew(Start_RGB_Task, NULL, &my_RGB_Task_attributes);
 8000362:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <main+0x8c>)
 8000364:	2100      	movs	r1, #0
 8000366:	480f      	ldr	r0, [pc, #60]	; (80003a4 <main+0x90>)
 8000368:	f002 ff76 	bl	8003258 <osThreadNew>
 800036c:	4602      	mov	r2, r0
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <main+0x94>)
 8000370:	601a      	str	r2, [r3, #0]

  /* creation of my_Bluetooth_Ta */
  my_Bluetooth_TaHandle = osThreadNew(Start_Bluetooth_Task, NULL, &my_Bluetooth_Ta_attributes);
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <main+0x98>)
 8000374:	2100      	movs	r1, #0
 8000376:	480e      	ldr	r0, [pc, #56]	; (80003b0 <main+0x9c>)
 8000378:	f002 ff6e 	bl	8003258 <osThreadNew>
 800037c:	4602      	mov	r2, r0
 800037e:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <main+0xa0>)
 8000380:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000382:	f002 ff35 	bl	80031f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000386:	e7fe      	b.n	8000386 <main+0x72>
 8000388:	20000210 	.word	0x20000210
 800038c:	20001bf8 	.word	0x20001bf8
 8000390:	20001b70 	.word	0x20001b70
 8000394:	08006b58 	.word	0x08006b58
 8000398:	0800069d 	.word	0x0800069d
 800039c:	20001b6c 	.word	0x20001b6c
 80003a0:	08006b7c 	.word	0x08006b7c
 80003a4:	080006ad 	.word	0x080006ad
 80003a8:	20001b68 	.word	0x20001b68
 80003ac:	08006ba0 	.word	0x08006ba0
 80003b0:	080006d1 	.word	0x080006d1
 80003b4:	20001b64 	.word	0x20001b64

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b090      	sub	sp, #64	; 0x40
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	2228      	movs	r2, #40	; 0x28
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f005 fbb1 	bl	8005b2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003da:	2301      	movs	r3, #1
 80003dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e8:	2301      	movs	r3, #1
 80003ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ec:	2302      	movs	r3, #2
 80003ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fc:	f107 0318 	add.w	r3, r7, #24
 8000400:	4618      	mov	r0, r3
 8000402:	f000 feef 	bl	80011e4 <HAL_RCC_OscConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800040c:	f000 f9ac 	bl	8000768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000410:	230f      	movs	r3, #15
 8000412:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000414:	2302      	movs	r3, #2
 8000416:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800041c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000420:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2102      	movs	r1, #2
 800042a:	4618      	mov	r0, r3
 800042c:	f001 f95a 	bl	80016e4 <HAL_RCC_ClockConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000436:	f000 f997 	bl	8000768 <Error_Handler>
  }
}
 800043a:	bf00      	nop
 800043c:	3740      	adds	r7, #64	; 0x40
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08e      	sub	sp, #56	; 0x38
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800044a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000458:	f107 0320 	add.w	r3, r7, #32
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
 800046e:	611a      	str	r2, [r3, #16]
 8000470:	615a      	str	r2, [r3, #20]
 8000472:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000474:	4b37      	ldr	r3, [pc, #220]	; (8000554 <MX_TIM3_Init+0x110>)
 8000476:	4a38      	ldr	r2, [pc, #224]	; (8000558 <MX_TIM3_Init+0x114>)
 8000478:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1107-1;
 800047a:	4b36      	ldr	r3, [pc, #216]	; (8000554 <MX_TIM3_Init+0x110>)
 800047c:	f240 4252 	movw	r2, #1106	; 0x452
 8000480:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000482:	4b34      	ldr	r3, [pc, #208]	; (8000554 <MX_TIM3_Init+0x110>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255-1;
 8000488:	4b32      	ldr	r3, [pc, #200]	; (8000554 <MX_TIM3_Init+0x110>)
 800048a:	22fe      	movs	r2, #254	; 0xfe
 800048c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800048e:	4b31      	ldr	r3, [pc, #196]	; (8000554 <MX_TIM3_Init+0x110>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000494:	4b2f      	ldr	r3, [pc, #188]	; (8000554 <MX_TIM3_Init+0x110>)
 8000496:	2200      	movs	r2, #0
 8000498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800049a:	482e      	ldr	r0, [pc, #184]	; (8000554 <MX_TIM3_Init+0x110>)
 800049c:	f001 faee 	bl	8001a7c <HAL_TIM_Base_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80004a6:	f000 f95f 	bl	8000768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004b4:	4619      	mov	r1, r3
 80004b6:	4827      	ldr	r0, [pc, #156]	; (8000554 <MX_TIM3_Init+0x110>)
 80004b8:	f001 fe42 	bl	8002140 <HAL_TIM_ConfigClockSource>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80004c2:	f000 f951 	bl	8000768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004c6:	4823      	ldr	r0, [pc, #140]	; (8000554 <MX_TIM3_Init+0x110>)
 80004c8:	f001 fb7a 	bl	8001bc0 <HAL_TIM_PWM_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80004d2:	f000 f949 	bl	8000768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d6:	2300      	movs	r3, #0
 80004d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004da:	2300      	movs	r3, #0
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004de:	f107 0320 	add.w	r3, r7, #32
 80004e2:	4619      	mov	r1, r3
 80004e4:	481b      	ldr	r0, [pc, #108]	; (8000554 <MX_TIM3_Init+0x110>)
 80004e6:	f002 f9ab 	bl	8002840 <HAL_TIMEx_MasterConfigSynchronization>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80004f0:	f000 f93a 	bl	8000768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004f4:	2360      	movs	r3, #96	; 0x60
 80004f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	4619      	mov	r1, r3
 800050a:	4812      	ldr	r0, [pc, #72]	; (8000554 <MX_TIM3_Init+0x110>)
 800050c:	f001 fd5a 	bl	8001fc4 <HAL_TIM_PWM_ConfigChannel>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000516:	f000 f927 	bl	8000768 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2204      	movs	r2, #4
 800051e:	4619      	mov	r1, r3
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <MX_TIM3_Init+0x110>)
 8000522:	f001 fd4f 	bl	8001fc4 <HAL_TIM_PWM_ConfigChannel>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800052c:	f000 f91c 	bl	8000768 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2208      	movs	r2, #8
 8000534:	4619      	mov	r1, r3
 8000536:	4807      	ldr	r0, [pc, #28]	; (8000554 <MX_TIM3_Init+0x110>)
 8000538:	f001 fd44 	bl	8001fc4 <HAL_TIM_PWM_ConfigChannel>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000542:	f000 f911 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000546:	4803      	ldr	r0, [pc, #12]	; (8000554 <MX_TIM3_Init+0x110>)
 8000548:	f000 f968 	bl	800081c <HAL_TIM_MspPostInit>

}
 800054c:	bf00      	nop
 800054e:	3738      	adds	r7, #56	; 0x38
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20001b70 	.word	0x20001b70
 8000558:	40000400 	.word	0x40000400

0800055c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_USART2_UART_Init+0x4c>)
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <MX_USART2_UART_Init+0x50>)
 8000564:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <MX_USART2_UART_Init+0x4c>)
 8000568:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800056c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_USART2_UART_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_USART2_UART_Init+0x4c>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MX_USART2_UART_Init+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_USART2_UART_Init+0x4c>)
 8000582:	220c      	movs	r2, #12
 8000584:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_USART2_UART_Init+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_USART2_UART_Init+0x4c>)
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_USART2_UART_Init+0x4c>)
 8000594:	f002 f9c4 	bl	8002920 <HAL_UART_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800059e:	f000 f8e3 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20001bf8 	.word	0x20001bf8
 80005ac:	40004400 	.word	0x40004400

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c4:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <MX_GPIO_Init+0xc4>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a2a      	ldr	r2, [pc, #168]	; (8000674 <MX_GPIO_Init+0xc4>)
 80005ca:	f043 0310 	orr.w	r3, r3, #16
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b28      	ldr	r3, [pc, #160]	; (8000674 <MX_GPIO_Init+0xc4>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0310 	and.w	r3, r3, #16
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <MX_GPIO_Init+0xc4>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a24      	ldr	r2, [pc, #144]	; (8000674 <MX_GPIO_Init+0xc4>)
 80005e2:	f043 0320 	orr.w	r3, r3, #32
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <MX_GPIO_Init+0xc4>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0320 	and.w	r3, r3, #32
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_GPIO_Init+0xc4>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a1e      	ldr	r2, [pc, #120]	; (8000674 <MX_GPIO_Init+0xc4>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_GPIO_Init+0xc4>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_GPIO_Init+0xc4>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a18      	ldr	r2, [pc, #96]	; (8000674 <MX_GPIO_Init+0xc4>)
 8000612:	f043 0308 	orr.w	r3, r3, #8
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_GPIO_Init+0xc4>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0308 	and.w	r3, r3, #8
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800062a:	4813      	ldr	r0, [pc, #76]	; (8000678 <MX_GPIO_Init+0xc8>)
 800062c:	f000 fda8 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2302      	movs	r3, #2
 8000640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	4619      	mov	r1, r3
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_GPIO_Init+0xc8>)
 800064a:	f000 fc3f 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800064e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800065c:	2301      	movs	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4619      	mov	r1, r3
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_GPIO_Init+0xc8>)
 8000668:	f000 fc30 	bl	8000ecc <HAL_GPIO_Init>

}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000
 8000678:	40011000 	.word	0x40011000

0800067c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/*-----------------------------for Bluetooth--------------------------------------*/
/***Добавим оф. обработчик приёма из USART, в котором вызовем наш "самодельный" обработчик***/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) { // Проверка, точно ли данные со 2-го UART?
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_UART_RxCpltCallback+0x1c>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d101      	bne.n	8000690 <HAL_UART_RxCpltCallback+0x14>
		UART2_RxCpltCallback(); // Вызов обработчика.
 800068c:	f7ff fdd6 	bl	800023c <UART2_RxCpltCallback>
	}
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20001bf8 	.word	0x20001bf8

0800069c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f002 fe81 	bl	80033ac <osDelay>
 80006aa:	e7fb      	b.n	80006a4 <StartDefaultTask+0x8>

080006ac <Start_RGB_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_RGB_Task */
void Start_RGB_Task(void *argument)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RGB_Task */
	/* Infinite loop */
	for (;;) {
		rgb_set(brightness, 0, 0);   // red only. Для увеличения/уменьшения яркости LED меняй значения в скобках!
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <Start_RGB_Task+0x20>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fe06 	bl	80002d0 <rgb_set>
		osDelay(100);
 80006c4:	2064      	movs	r0, #100	; 0x64
 80006c6:	f002 fe71 	bl	80033ac <osDelay>
		rgb_set(brightness, 0, 0);   // red only. Для увеличения/уменьшения яркости LED меняй значения в скобках!
 80006ca:	e7f3      	b.n	80006b4 <Start_RGB_Task+0x8>
 80006cc:	20001c38 	.word	0x20001c38

080006d0 <Start_Bluetooth_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Bluetooth_Task */
void Start_Bluetooth_Task(void *argument)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Bluetooth_Task */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Морагаем светодиодом
 80006d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006dc:	4815      	ldr	r0, [pc, #84]	; (8000734 <Start_Bluetooth_Task+0x64>)
 80006de:	f000 fd67 	bl	80011b0 <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart2, (uint8_t*) str2[i], strlen(str2[i]), 0x1000);
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <Start_Bluetooth_Task+0x68>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <Start_Bluetooth_Task+0x6c>)
 80006ea:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <Start_Bluetooth_Task+0x68>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <Start_Bluetooth_Task+0x6c>)
 80006f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd28 	bl	8000150 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	4621      	mov	r1, r4
 800070a:	480d      	ldr	r0, [pc, #52]	; (8000740 <Start_Bluetooth_Task+0x70>)
 800070c:	f002 f955 	bl	80029ba <HAL_UART_Transmit>
		i++;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <Start_Bluetooth_Task+0x68>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <Start_Bluetooth_Task+0x68>)
 800071a:	701a      	strb	r2, [r3, #0]
		if (i > 4) {
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <Start_Bluetooth_Task+0x68>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b04      	cmp	r3, #4
 8000722:	d902      	bls.n	800072a <Start_Bluetooth_Task+0x5a>
			i = 0;
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <Start_Bluetooth_Task+0x68>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
		}
		osDelay(3000);
 800072a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800072e:	f002 fe3d 	bl	80033ac <osDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Морагаем светодиодом
 8000732:	e7d1      	b.n	80006d8 <Start_Bluetooth_Task+0x8>
 8000734:	40011000 	.word	0x40011000
 8000738:	2000024c 	.word	0x2000024c
 800073c:	20000000 	.word	0x20000000
 8000740:	20001bf8 	.word	0x20001bf8

08000744 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d101      	bne.n	800075a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000756:	f000 fa47 	bl	8000be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40000800 	.word	0x40000800

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800076e:	e7fe      	b.n	800076e <Error_Handler+0x6>

08000770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <HAL_MspInit+0x68>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <HAL_MspInit+0x68>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <HAL_MspInit+0x68>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_MspInit+0x68>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a11      	ldr	r2, [pc, #68]	; (80007d8 <HAL_MspInit+0x68>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_MspInit+0x68>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	210f      	movs	r1, #15
 80007aa:	f06f 0001 	mvn.w	r0, #1
 80007ae:	f000 faec 	bl	8000d8a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <HAL_MspInit+0x6c>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <HAL_MspInit+0x6c>)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010000 	.word	0x40010000

080007e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_TIM_Base_MspInit+0x34>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d10b      	bne.n	800080a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <HAL_TIM_Base_MspInit+0x38>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <HAL_TIM_Base_MspInit+0x38>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_TIM_Base_MspInit+0x38>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40000400 	.word	0x40000400
 8000818:	40021000 	.word	0x40021000

0800081c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <HAL_TIM_MspPostInit+0x88>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d12f      	bne.n	800089c <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <HAL_TIM_MspPostInit+0x8c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <HAL_TIM_MspPostInit+0x8c>)
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <HAL_TIM_MspPostInit+0x8c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0304 	and.w	r3, r3, #4
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_TIM_MspPostInit+0x8c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <HAL_TIM_MspPostInit+0x8c>)
 800085a:	f043 0308 	orr.w	r3, r3, #8
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_TIM_MspPostInit+0x8c>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0308 	and.w	r3, r3, #8
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800086c:	23c0      	movs	r3, #192	; 0xc0
 800086e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2302      	movs	r3, #2
 8000876:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	4619      	mov	r1, r3
 800087e:	480b      	ldr	r0, [pc, #44]	; (80008ac <HAL_TIM_MspPostInit+0x90>)
 8000880:	f000 fb24 	bl	8000ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000884:	2301      	movs	r3, #1
 8000886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2302      	movs	r3, #2
 800088e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	; (80008b0 <HAL_TIM_MspPostInit+0x94>)
 8000898:	f000 fb18 	bl	8000ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3720      	adds	r7, #32
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40000400 	.word	0x40000400
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40010800 	.word	0x40010800
 80008b0:	40010c00 	.word	0x40010c00

080008b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a1f      	ldr	r2, [pc, #124]	; (800094c <HAL_UART_MspInit+0x98>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d137      	bne.n	8000944 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d4:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <HAL_UART_MspInit+0x9c>)
 80008d6:	69db      	ldr	r3, [r3, #28]
 80008d8:	4a1d      	ldr	r2, [pc, #116]	; (8000950 <HAL_UART_MspInit+0x9c>)
 80008da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008de:	61d3      	str	r3, [r2, #28]
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <HAL_UART_MspInit+0x9c>)
 80008e2:	69db      	ldr	r3, [r3, #28]
 80008e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <HAL_UART_MspInit+0x9c>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a17      	ldr	r2, [pc, #92]	; (8000950 <HAL_UART_MspInit+0x9c>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <HAL_UART_MspInit+0x9c>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000904:	2304      	movs	r3, #4
 8000906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	4619      	mov	r1, r3
 8000916:	480f      	ldr	r0, [pc, #60]	; (8000954 <HAL_UART_MspInit+0xa0>)
 8000918:	f000 fad8 	bl	8000ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800091c:	2308      	movs	r3, #8
 800091e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	4809      	ldr	r0, [pc, #36]	; (8000954 <HAL_UART_MspInit+0xa0>)
 8000930:	f000 facc 	bl	8000ecc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2105      	movs	r1, #5
 8000938:	2026      	movs	r0, #38	; 0x26
 800093a:	f000 fa26 	bl	8000d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800093e:	2026      	movs	r0, #38	; 0x26
 8000940:	f000 fa3f 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40004400 	.word	0x40004400
 8000950:	40021000 	.word	0x40021000
 8000954:	40010800 	.word	0x40010800

08000958 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	201e      	movs	r0, #30
 800096e:	f000 fa0c 	bl	8000d8a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000972:	201e      	movs	r0, #30
 8000974:	f000 fa25 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <HAL_InitTick+0xa0>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <HAL_InitTick+0xa0>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	61d3      	str	r3, [r2, #28]
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <HAL_InitTick+0xa0>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000990:	f107 0210 	add.w	r2, r7, #16
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4611      	mov	r1, r2
 800099a:	4618      	mov	r0, r3
 800099c:	f001 f820 	bl	80019e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009a0:	f000 fff6 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 80009a4:	4603      	mov	r3, r0
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ac:	4a13      	ldr	r2, [pc, #76]	; (80009fc <HAL_InitTick+0xa4>)
 80009ae:	fba2 2303 	umull	r2, r3, r2, r3
 80009b2:	0c9b      	lsrs	r3, r3, #18
 80009b4:	3b01      	subs	r3, #1
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_InitTick+0xa8>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <HAL_InitTick+0xac>)
 80009bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_InitTick+0xa8>)
 80009c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009c4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009c6:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <HAL_InitTick+0xa8>)
 80009c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ca:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HAL_InitTick+0xa8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <HAL_InitTick+0xa8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80009d8:	4809      	ldr	r0, [pc, #36]	; (8000a00 <HAL_InitTick+0xa8>)
 80009da:	f001 f84f 	bl	8001a7c <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d104      	bne.n	80009ee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80009e4:	4806      	ldr	r0, [pc, #24]	; (8000a00 <HAL_InitTick+0xa8>)
 80009e6:	f001 f899 	bl	8001b1c <HAL_TIM_Base_Start_IT>
 80009ea:	4603      	mov	r3, r0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3730      	adds	r7, #48	; 0x30
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40021000 	.word	0x40021000
 80009fc:	431bde83 	.word	0x431bde83
 8000a00:	20001c3c 	.word	0x20001c3c
 8000a04:	40000800 	.word	0x40000800

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
	...

08000a34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <TIM4_IRQHandler+0x10>)
 8000a3a:	f001 f9bb 	bl	8001db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20001c3c 	.word	0x20001c3c

08000a48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <USART2_IRQHandler+0x10>)
 8000a4e:	f002 f89b 	bl	8002b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20001bf8 	.word	0x20001bf8

08000a5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e00a      	b.n	8000a84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a6e:	f3af 8000 	nop.w
 8000a72:	4601      	mov	r1, r0
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	b2ca      	uxtb	r2, r1
 8000a7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf0      	blt.n	8000a6e <_read+0x12>
	}

return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000abc:	605a      	str	r2, [r3, #4]
	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <_isatty>:

int _isatty(int file)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
	return 0;
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
	...

08000af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b00:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <_sbrk+0x5c>)
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <_sbrk+0x60>)
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <_sbrk+0x64>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <_sbrk+0x68>)
 8000b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d207      	bcs.n	8000b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b28:	f004 ffcc 	bl	8005ac4 <__errno>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	230c      	movs	r3, #12
 8000b30:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b36:	e009      	b.n	8000b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <_sbrk+0x64>)
 8000b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20005000 	.word	0x20005000
 8000b58:	00000400 	.word	0x00000400
 8000b5c:	20000250 	.word	0x20000250
 8000b60:	20001cd0 	.word	0x20001cd0

08000b64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b70:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b72:	e003      	b.n	8000b7c <LoopCopyDataInit>

08000b74 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b76:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b78:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b7a:	3104      	adds	r1, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b7c:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b80:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b82:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b84:	d3f6      	bcc.n	8000b74 <CopyDataInit>
  ldr r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b88:	e002      	b.n	8000b90 <LoopFillZerobss>

08000b8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b8c:	f842 3b04 	str.w	r3, [r2], #4

08000b90 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b92:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b94:	d3f9      	bcc.n	8000b8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b96:	f7ff ffe5 	bl	8000b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f004 ff99 	bl	8005ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9e:	f7ff fbb9 	bl	8000314 <main>
  bx lr
 8000ba2:	4770      	bx	lr
  ldr r3, =_sidata
 8000ba4:	08006d88 	.word	0x08006d88
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bac:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8000bb0:	200001f4 	.word	0x200001f4
  ldr r3, = _ebss
 8000bb4:	20001ccc 	.word	0x20001ccc

08000bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC1_2_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x28>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x28>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f8d1 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff fec0 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff fdca 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40022000 	.word	0x40022000

08000be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x1c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_IncTick+0x20>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a03      	ldr	r2, [pc, #12]	; (8000c08 <HAL_IncTick+0x20>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	2000001c 	.word	0x2000001c
 8000c08:	20001c84 	.word	0x20001c84

08000c0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b02      	ldr	r3, [pc, #8]	; (8000c1c <HAL_GetTick+0x10>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	20001c84 	.word	0x20001c84

08000c20 <__NVIC_SetPriorityGrouping>:
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4906      	ldr	r1, [pc, #24]	; (8000cb8 <__NVIC_EnableIRQ+0x34>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <__NVIC_SetPriority>:
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	; (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff4f 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff64 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ffb2 	bl	8000d10 <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff81 	bl	8000cbc <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff57 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d005      	beq.n	8000e02 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2204      	movs	r2, #4
 8000dfa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	e051      	b.n	8000ea6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 020e 	bic.w	r2, r2, #14
 8000e10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 0201 	bic.w	r2, r2, #1
 8000e20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <HAL_DMA_Abort_IT+0xd0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d029      	beq.n	8000e80 <HAL_DMA_Abort_IT+0xa0>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a20      	ldr	r2, [pc, #128]	; (8000eb4 <HAL_DMA_Abort_IT+0xd4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d022      	beq.n	8000e7c <HAL_DMA_Abort_IT+0x9c>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_DMA_Abort_IT+0xd8>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d01a      	beq.n	8000e76 <HAL_DMA_Abort_IT+0x96>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <HAL_DMA_Abort_IT+0xdc>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d012      	beq.n	8000e70 <HAL_DMA_Abort_IT+0x90>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <HAL_DMA_Abort_IT+0xe0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d00a      	beq.n	8000e6a <HAL_DMA_Abort_IT+0x8a>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a1a      	ldr	r2, [pc, #104]	; (8000ec4 <HAL_DMA_Abort_IT+0xe4>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d102      	bne.n	8000e64 <HAL_DMA_Abort_IT+0x84>
 8000e5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e62:	e00e      	b.n	8000e82 <HAL_DMA_Abort_IT+0xa2>
 8000e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e68:	e00b      	b.n	8000e82 <HAL_DMA_Abort_IT+0xa2>
 8000e6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6e:	e008      	b.n	8000e82 <HAL_DMA_Abort_IT+0xa2>
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	e005      	b.n	8000e82 <HAL_DMA_Abort_IT+0xa2>
 8000e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e7a:	e002      	b.n	8000e82 <HAL_DMA_Abort_IT+0xa2>
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	e000      	b.n	8000e82 <HAL_DMA_Abort_IT+0xa2>
 8000e80:	2301      	movs	r3, #1
 8000e82:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <HAL_DMA_Abort_IT+0xe8>)
 8000e84:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	4798      	blx	r3
    } 
  }
  return status;
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40020008 	.word	0x40020008
 8000eb4:	4002001c 	.word	0x4002001c
 8000eb8:	40020030 	.word	0x40020030
 8000ebc:	40020044 	.word	0x40020044
 8000ec0:	40020058 	.word	0x40020058
 8000ec4:	4002006c 	.word	0x4002006c
 8000ec8:	40020000 	.word	0x40020000

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b08b      	sub	sp, #44	; 0x2c
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ede:	e127      	b.n	8001130 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 8116 	bne.w	800112a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b12      	cmp	r3, #18
 8000f04:	d034      	beq.n	8000f70 <HAL_GPIO_Init+0xa4>
 8000f06:	2b12      	cmp	r3, #18
 8000f08:	d80d      	bhi.n	8000f26 <HAL_GPIO_Init+0x5a>
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d02b      	beq.n	8000f66 <HAL_GPIO_Init+0x9a>
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d804      	bhi.n	8000f1c <HAL_GPIO_Init+0x50>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d031      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d01c      	beq.n	8000f54 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f1a:	e048      	b.n	8000fae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d043      	beq.n	8000fa8 <HAL_GPIO_Init+0xdc>
 8000f20:	2b11      	cmp	r3, #17
 8000f22:	d01b      	beq.n	8000f5c <HAL_GPIO_Init+0x90>
          break;
 8000f24:	e043      	b.n	8000fae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f26:	4a89      	ldr	r2, [pc, #548]	; (800114c <HAL_GPIO_Init+0x280>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d026      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
 8000f2c:	4a87      	ldr	r2, [pc, #540]	; (800114c <HAL_GPIO_Init+0x280>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d806      	bhi.n	8000f40 <HAL_GPIO_Init+0x74>
 8000f32:	4a87      	ldr	r2, [pc, #540]	; (8001150 <HAL_GPIO_Init+0x284>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d020      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
 8000f38:	4a86      	ldr	r2, [pc, #536]	; (8001154 <HAL_GPIO_Init+0x288>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d01d      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
          break;
 8000f3e:	e036      	b.n	8000fae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f40:	4a85      	ldr	r2, [pc, #532]	; (8001158 <HAL_GPIO_Init+0x28c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
 8000f46:	4a85      	ldr	r2, [pc, #532]	; (800115c <HAL_GPIO_Init+0x290>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d016      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
 8000f4c:	4a84      	ldr	r2, [pc, #528]	; (8001160 <HAL_GPIO_Init+0x294>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0xae>
          break;
 8000f52:	e02c      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	623b      	str	r3, [r7, #32]
          break;
 8000f5a:	e028      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	3304      	adds	r3, #4
 8000f62:	623b      	str	r3, [r7, #32]
          break;
 8000f64:	e023      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	3308      	adds	r3, #8
 8000f6c:	623b      	str	r3, [r7, #32]
          break;
 8000f6e:	e01e      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	330c      	adds	r3, #12
 8000f76:	623b      	str	r3, [r7, #32]
          break;
 8000f78:	e019      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d102      	bne.n	8000f88 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f82:	2304      	movs	r3, #4
 8000f84:	623b      	str	r3, [r7, #32]
          break;
 8000f86:	e012      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d105      	bne.n	8000f9c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f90:	2308      	movs	r3, #8
 8000f92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	611a      	str	r2, [r3, #16]
          break;
 8000f9a:	e008      	b.n	8000fae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	615a      	str	r2, [r3, #20]
          break;
 8000fa6:	e002      	b.n	8000fae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
          break;
 8000fac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	2bff      	cmp	r3, #255	; 0xff
 8000fb2:	d801      	bhi.n	8000fb8 <HAL_GPIO_Init+0xec>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	e001      	b.n	8000fbc <HAL_GPIO_Init+0xf0>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	2bff      	cmp	r3, #255	; 0xff
 8000fc2:	d802      	bhi.n	8000fca <HAL_GPIO_Init+0xfe>
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_Init+0x104>
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	3b08      	subs	r3, #8
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	6a39      	ldr	r1, [r7, #32]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	431a      	orrs	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 8096 	beq.w	800112a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ffe:	4b59      	ldr	r3, [pc, #356]	; (8001164 <HAL_GPIO_Init+0x298>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	4a58      	ldr	r2, [pc, #352]	; (8001164 <HAL_GPIO_Init+0x298>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6193      	str	r3, [r2, #24]
 800100a:	4b56      	ldr	r3, [pc, #344]	; (8001164 <HAL_GPIO_Init+0x298>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001016:	4a54      	ldr	r2, [pc, #336]	; (8001168 <HAL_GPIO_Init+0x29c>)
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	4013      	ands	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4b      	ldr	r2, [pc, #300]	; (800116c <HAL_GPIO_Init+0x2a0>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0x19e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4a      	ldr	r2, [pc, #296]	; (8001170 <HAL_GPIO_Init+0x2a4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d00d      	beq.n	8001066 <HAL_GPIO_Init+0x19a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a49      	ldr	r2, [pc, #292]	; (8001174 <HAL_GPIO_Init+0x2a8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d007      	beq.n	8001062 <HAL_GPIO_Init+0x196>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a48      	ldr	r2, [pc, #288]	; (8001178 <HAL_GPIO_Init+0x2ac>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_GPIO_Init+0x192>
 800105a:	2303      	movs	r3, #3
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x1a0>
 800105e:	2304      	movs	r3, #4
 8001060:	e004      	b.n	800106c <HAL_GPIO_Init+0x1a0>
 8001062:	2302      	movs	r3, #2
 8001064:	e002      	b.n	800106c <HAL_GPIO_Init+0x1a0>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x1a0>
 800106a:	2300      	movs	r3, #0
 800106c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106e:	f002 0203 	and.w	r2, r2, #3
 8001072:	0092      	lsls	r2, r2, #2
 8001074:	4093      	lsls	r3, r2
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800107c:	493a      	ldr	r1, [pc, #232]	; (8001168 <HAL_GPIO_Init+0x29c>)
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d006      	beq.n	80010a4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001096:	4b39      	ldr	r3, [pc, #228]	; (800117c <HAL_GPIO_Init+0x2b0>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4938      	ldr	r1, [pc, #224]	; (800117c <HAL_GPIO_Init+0x2b0>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
 80010a2:	e006      	b.n	80010b2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010a4:	4b35      	ldr	r3, [pc, #212]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	4933      	ldr	r1, [pc, #204]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010ae:	4013      	ands	r3, r2
 80010b0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d006      	beq.n	80010cc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010be:	4b2f      	ldr	r3, [pc, #188]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	492e      	ldr	r1, [pc, #184]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]
 80010ca:	e006      	b.n	80010da <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	4929      	ldr	r1, [pc, #164]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d006      	beq.n	80010f4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	4924      	ldr	r1, [pc, #144]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	608b      	str	r3, [r1, #8]
 80010f2:	e006      	b.n	8001102 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	491f      	ldr	r1, [pc, #124]	; (800117c <HAL_GPIO_Init+0x2b0>)
 80010fe:	4013      	ands	r3, r2
 8001100:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d006      	beq.n	800111c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_GPIO_Init+0x2b0>)
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	491a      	ldr	r1, [pc, #104]	; (800117c <HAL_GPIO_Init+0x2b0>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	60cb      	str	r3, [r1, #12]
 800111a:	e006      	b.n	800112a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_GPIO_Init+0x2b0>)
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	43db      	mvns	r3, r3
 8001124:	4915      	ldr	r1, [pc, #84]	; (800117c <HAL_GPIO_Init+0x2b0>)
 8001126:	4013      	ands	r3, r2
 8001128:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	3301      	adds	r3, #1
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	fa22 f303 	lsr.w	r3, r2, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	f47f aed0 	bne.w	8000ee0 <HAL_GPIO_Init+0x14>
  }
}
 8001140:	bf00      	nop
 8001142:	372c      	adds	r7, #44	; 0x2c
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	10210000 	.word	0x10210000
 8001150:	10110000 	.word	0x10110000
 8001154:	10120000 	.word	0x10120000
 8001158:	10310000 	.word	0x10310000
 800115c:	10320000 	.word	0x10320000
 8001160:	10220000 	.word	0x10220000
 8001164:	40021000 	.word	0x40021000
 8001168:	40010000 	.word	0x40010000
 800116c:	40010800 	.word	0x40010800
 8001170:	40010c00 	.word	0x40010c00
 8001174:	40011000 	.word	0x40011000
 8001178:	40011400 	.word	0x40011400
 800117c:	40010400 	.word	0x40010400

08001180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800119c:	e003      	b.n	80011a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	041a      	lsls	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	611a      	str	r2, [r3, #16]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4013      	ands	r3, r2
 80011c8:	041a      	lsls	r2, r3, #16
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43d9      	mvns	r1, r3
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	400b      	ands	r3, r1
 80011d2:	431a      	orrs	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	611a      	str	r2, [r3, #16]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e26c      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 8087 	beq.w	8001312 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001204:	4b92      	ldr	r3, [pc, #584]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 030c 	and.w	r3, r3, #12
 800120c:	2b04      	cmp	r3, #4
 800120e:	d00c      	beq.n	800122a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001210:	4b8f      	ldr	r3, [pc, #572]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b08      	cmp	r3, #8
 800121a:	d112      	bne.n	8001242 <HAL_RCC_OscConfig+0x5e>
 800121c:	4b8c      	ldr	r3, [pc, #560]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001228:	d10b      	bne.n	8001242 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122a:	4b89      	ldr	r3, [pc, #548]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d06c      	beq.n	8001310 <HAL_RCC_OscConfig+0x12c>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d168      	bne.n	8001310 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e246      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124a:	d106      	bne.n	800125a <HAL_RCC_OscConfig+0x76>
 800124c:	4b80      	ldr	r3, [pc, #512]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a7f      	ldr	r2, [pc, #508]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e02e      	b.n	80012b8 <HAL_RCC_OscConfig+0xd4>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x98>
 8001262:	4b7b      	ldr	r3, [pc, #492]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a7a      	ldr	r2, [pc, #488]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b78      	ldr	r3, [pc, #480]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a77      	ldr	r2, [pc, #476]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001274:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e01d      	b.n	80012b8 <HAL_RCC_OscConfig+0xd4>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0xbc>
 8001286:	4b72      	ldr	r3, [pc, #456]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a71      	ldr	r2, [pc, #452]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b6f      	ldr	r3, [pc, #444]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a6e      	ldr	r2, [pc, #440]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0xd4>
 80012a0:	4b6b      	ldr	r3, [pc, #428]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a6a      	ldr	r2, [pc, #424]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b68      	ldr	r3, [pc, #416]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a67      	ldr	r2, [pc, #412]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fca4 	bl	8000c0c <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fca0 	bl	8000c0c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1fa      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0xe4>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc90 	bl	8000c0c <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fc8c 	bl	8000c0c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e1e6      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	4b53      	ldr	r3, [pc, #332]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x10c>
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d063      	beq.n	80013e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800131e:	4b4c      	ldr	r3, [pc, #304]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800132a:	4b49      	ldr	r3, [pc, #292]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b08      	cmp	r3, #8
 8001334:	d11c      	bne.n	8001370 <HAL_RCC_OscConfig+0x18c>
 8001336:	4b46      	ldr	r3, [pc, #280]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d116      	bne.n	8001370 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	4b43      	ldr	r3, [pc, #268]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <HAL_RCC_OscConfig+0x176>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d001      	beq.n	800135a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e1ba      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4939      	ldr	r1, [pc, #228]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	e03a      	b.n	80013e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001378:	4b36      	ldr	r3, [pc, #216]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fc45 	bl	8000c0c <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fc41 	bl	8000c0c <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e19b      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4927      	ldr	r1, [pc, #156]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e015      	b.n	80013e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <HAL_RCC_OscConfig+0x270>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc24 	bl	8000c0c <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff fc20 	bl	8000c0c <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e17a      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d03a      	beq.n	8001468 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d019      	beq.n	800142e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_RCC_OscConfig+0x274>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001400:	f7ff fc04 	bl	8000c0c <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fc00 	bl	8000c0c <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e15a      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_RCC_OscConfig+0x26c>)
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001426:	2001      	movs	r0, #1
 8001428:	f000 fb0a 	bl	8001a40 <RCC_Delay>
 800142c:	e01c      	b.n	8001468 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_RCC_OscConfig+0x274>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001434:	f7ff fbea 	bl	8000c0c <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143a:	e00f      	b.n	800145c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff fbe6 	bl	8000c0c <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d908      	bls.n	800145c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e140      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	42420000 	.word	0x42420000
 8001458:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145c:	4b9e      	ldr	r3, [pc, #632]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1e9      	bne.n	800143c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80a6 	beq.w	80015c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147a:	4b97      	ldr	r3, [pc, #604]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10d      	bne.n	80014a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4b94      	ldr	r3, [pc, #592]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4a93      	ldr	r2, [pc, #588]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	61d3      	str	r3, [r2, #28]
 8001492:	4b91      	ldr	r3, [pc, #580]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a2:	4b8e      	ldr	r3, [pc, #568]	; (80016dc <HAL_RCC_OscConfig+0x4f8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d118      	bne.n	80014e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ae:	4b8b      	ldr	r3, [pc, #556]	; (80016dc <HAL_RCC_OscConfig+0x4f8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a8a      	ldr	r2, [pc, #552]	; (80016dc <HAL_RCC_OscConfig+0x4f8>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fba7 	bl	8000c0c <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c2:	f7ff fba3 	bl	8000c0c <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b64      	cmp	r3, #100	; 0x64
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e0fd      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	4b81      	ldr	r3, [pc, #516]	; (80016dc <HAL_RCC_OscConfig+0x4f8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d106      	bne.n	80014f6 <HAL_RCC_OscConfig+0x312>
 80014e8:	4b7b      	ldr	r3, [pc, #492]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4a7a      	ldr	r2, [pc, #488]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6213      	str	r3, [r2, #32]
 80014f4:	e02d      	b.n	8001552 <HAL_RCC_OscConfig+0x36e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x334>
 80014fe:	4b76      	ldr	r3, [pc, #472]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	4a75      	ldr	r2, [pc, #468]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	6213      	str	r3, [r2, #32]
 800150a:	4b73      	ldr	r3, [pc, #460]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4a72      	ldr	r2, [pc, #456]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001510:	f023 0304 	bic.w	r3, r3, #4
 8001514:	6213      	str	r3, [r2, #32]
 8001516:	e01c      	b.n	8001552 <HAL_RCC_OscConfig+0x36e>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d10c      	bne.n	800153a <HAL_RCC_OscConfig+0x356>
 8001520:	4b6d      	ldr	r3, [pc, #436]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4a6c      	ldr	r2, [pc, #432]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6213      	str	r3, [r2, #32]
 800152c:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a69      	ldr	r2, [pc, #420]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6213      	str	r3, [r2, #32]
 8001538:	e00b      	b.n	8001552 <HAL_RCC_OscConfig+0x36e>
 800153a:	4b67      	ldr	r3, [pc, #412]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4a66      	ldr	r2, [pc, #408]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	6213      	str	r3, [r2, #32]
 8001546:	4b64      	ldr	r3, [pc, #400]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4a63      	ldr	r2, [pc, #396]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800154c:	f023 0304 	bic.w	r3, r3, #4
 8001550:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d015      	beq.n	8001586 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff fb57 	bl	8000c0c <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	e00a      	b.n	8001578 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001562:	f7ff fb53 	bl	8000c0c <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001570:	4293      	cmp	r3, r2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e0ab      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001578:	4b57      	ldr	r3, [pc, #348]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0ee      	beq.n	8001562 <HAL_RCC_OscConfig+0x37e>
 8001584:	e014      	b.n	80015b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001586:	f7ff fb41 	bl	8000c0c <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f7ff fb3d 	bl	8000c0c <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f241 3288 	movw	r2, #5000	; 0x1388
 800159c:	4293      	cmp	r3, r2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e095      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a4:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ee      	bne.n	800158e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d105      	bne.n	80015c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b6:	4b48      	ldr	r3, [pc, #288]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	4a47      	ldr	r2, [pc, #284]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 80015bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8081 	beq.w	80016ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015cc:	4b42      	ldr	r3, [pc, #264]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d061      	beq.n	800169c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d146      	bne.n	800166e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e0:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <HAL_RCC_OscConfig+0x4fc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fb11 	bl	8000c0c <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff fb0d 	bl	8000c0c <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e067      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001600:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f0      	bne.n	80015ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001614:	d108      	bne.n	8001628 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001616:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	492d      	ldr	r1, [pc, #180]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a19      	ldr	r1, [r3, #32]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	430b      	orrs	r3, r1
 800163a:	4927      	ldr	r1, [pc, #156]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001640:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <HAL_RCC_OscConfig+0x4fc>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fae1 	bl	8000c0c <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fadd 	bl	8000c0c <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e037      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x46a>
 800166c:	e02f      	b.n	80016ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <HAL_RCC_OscConfig+0x4fc>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff faca 	bl	8000c0c <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fac6 	bl	8000c0c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e020      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x498>
 800169a:	e018      	b.n	80016ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e013      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_OscConfig+0x4f4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d106      	bne.n	80016ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d001      	beq.n	80016ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40007000 	.word	0x40007000
 80016e0:	42420060 	.word	0x42420060

080016e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0d0      	b.n	800189a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016f8:	4b6a      	ldr	r3, [pc, #424]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d910      	bls.n	8001728 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 0207 	bic.w	r2, r3, #7
 800170e:	4965      	ldr	r1, [pc, #404]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0b8      	b.n	800189a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d020      	beq.n	8001776 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001740:	4b59      	ldr	r3, [pc, #356]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4a58      	ldr	r2, [pc, #352]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800174a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001758:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4a52      	ldr	r2, [pc, #328]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001762:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001764:	4b50      	ldr	r3, [pc, #320]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	494d      	ldr	r1, [pc, #308]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	4313      	orrs	r3, r2
 8001774:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d040      	beq.n	8001804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d107      	bne.n	800179a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d115      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e07f      	b.n	800189a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d107      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a2:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e073      	b.n	800189a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b2:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e06b      	b.n	800189a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c2:	4b39      	ldr	r3, [pc, #228]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f023 0203 	bic.w	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4936      	ldr	r1, [pc, #216]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d4:	f7ff fa1a 	bl	8000c0c <HAL_GetTick>
 80017d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017dc:	f7ff fa16 	bl	8000c0c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e053      	b.n	800189a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f2:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 020c 	and.w	r2, r3, #12
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	429a      	cmp	r2, r3
 8001802:	d1eb      	bne.n	80017dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001804:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d210      	bcs.n	8001834 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 0207 	bic.w	r2, r3, #7
 800181a:	4922      	ldr	r1, [pc, #136]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e032      	b.n	800189a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4916      	ldr	r1, [pc, #88]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	4313      	orrs	r3, r2
 8001850:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	490e      	ldr	r1, [pc, #56]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001872:	f000 f821 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8001876:	4601      	mov	r1, r0
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001884:	5cd3      	ldrb	r3, [r2, r3]
 8001886:	fa21 f303 	lsr.w	r3, r1, r3
 800188a:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <HAL_RCC_ClockConfig+0x1cc>)
 800188c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff f860 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40022000 	.word	0x40022000
 80018a8:	40021000 	.word	0x40021000
 80018ac:	08006bc4 	.word	0x08006bc4
 80018b0:	20000014 	.word	0x20000014
 80018b4:	20000018 	.word	0x20000018

080018b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b8:	b490      	push	{r4, r7}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018be:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018c0:	1d3c      	adds	r4, r7, #4
 80018c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <HAL_RCC_GetSysClockFreq+0xb4>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018e2:	4b23      	ldr	r3, [pc, #140]	; (8001970 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d002      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x40>
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d003      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x46>
 80018f6:	e02d      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018f8:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018fa:	623b      	str	r3, [r7, #32]
      break;
 80018fc:	e02d      	b.n	800195a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	0c9b      	lsrs	r3, r3, #18
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800190a:	4413      	add	r3, r2
 800190c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001910:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <HAL_RCC_GetSysClockFreq+0xb8>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	0c5b      	lsrs	r3, r3, #17
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800192a:	4413      	add	r3, r2
 800192c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001930:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	4a0f      	ldr	r2, [pc, #60]	; (8001974 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001936:	fb02 f203 	mul.w	r2, r2, r3
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
 8001942:	e004      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	623b      	str	r3, [r7, #32]
      break;
 8001952:	e002      	b.n	800195a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001956:	623b      	str	r3, [r7, #32]
      break;
 8001958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195a:	6a3b      	ldr	r3, [r7, #32]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bc90      	pop	{r4, r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	08006b2c 	.word	0x08006b2c
 800196c:	08006b3c 	.word	0x08006b3c
 8001970:	40021000 	.word	0x40021000
 8001974:	007a1200 	.word	0x007a1200
 8001978:	003d0900 	.word	0x003d0900

0800197c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <HAL_RCC_GetHCLKFreq+0x10>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	20000014 	.word	0x20000014

08001990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001994:	f7ff fff2 	bl	800197c <HAL_RCC_GetHCLKFreq>
 8001998:	4601      	mov	r1, r0
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	4a03      	ldr	r2, [pc, #12]	; (80019b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	08006bd4 	.word	0x08006bd4

080019b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019bc:	f7ff ffde 	bl	800197c <HAL_RCC_GetHCLKFreq>
 80019c0:	4601      	mov	r1, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0adb      	lsrs	r3, r3, #11
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4a03      	ldr	r2, [pc, #12]	; (80019dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ce:	5cd3      	ldrb	r3, [r2, r3]
 80019d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	08006bd4 	.word	0x08006bd4

080019e0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	220f      	movs	r2, #15
 80019ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_RCC_GetClockConfig+0x58>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_RCC_GetClockConfig+0x58>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_GetClockConfig+0x58>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_RCC_GetClockConfig+0x58>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	08db      	lsrs	r3, r3, #3
 8001a1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_RCC_GetClockConfig+0x5c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0207 	and.w	r2, r3, #7
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40022000 	.word	0x40022000

08001a40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <RCC_Delay+0x34>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <RCC_Delay+0x38>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	0a5b      	lsrs	r3, r3, #9
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a5c:	bf00      	nop
  }
  while (Delay --);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1e5a      	subs	r2, r3, #1
 8001a62:	60fa      	str	r2, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f9      	bne.n	8001a5c <RCC_Delay+0x1c>
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000014 	.word	0x20000014
 8001a78:	10624dd3 	.word	0x10624dd3

08001a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e041      	b.n	8001b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d106      	bne.n	8001aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7fe fe9c 	bl	80007e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4610      	mov	r0, r2
 8001abc:	f000 fc1c 	bl	80022f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d001      	beq.n	8001b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e03a      	b.n	8001baa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <HAL_TIM_Base_Start_IT+0x98>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00e      	beq.n	8001b74 <HAL_TIM_Base_Start_IT+0x58>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b5e:	d009      	beq.n	8001b74 <HAL_TIM_Base_Start_IT+0x58>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d004      	beq.n	8001b74 <HAL_TIM_Base_Start_IT+0x58>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a13      	ldr	r2, [pc, #76]	; (8001bbc <HAL_TIM_Base_Start_IT+0xa0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d111      	bne.n	8001b98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d010      	beq.n	8001ba8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0201 	orr.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b96:	e007      	b.n	8001ba8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	40000800 	.word	0x40000800

08001bc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e041      	b.n	8001c56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f839 	bl	8001c5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4610      	mov	r0, r2
 8001c00:	f000 fb7a 	bl	80022f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <HAL_TIM_PWM_Start+0x24>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	bf14      	ite	ne
 8001c8c:	2301      	movne	r3, #1
 8001c8e:	2300      	moveq	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	e022      	b.n	8001cda <HAL_TIM_PWM_Start+0x6a>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d109      	bne.n	8001cae <HAL_TIM_PWM_Start+0x3e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	bf14      	ite	ne
 8001ca6:	2301      	movne	r3, #1
 8001ca8:	2300      	moveq	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	e015      	b.n	8001cda <HAL_TIM_PWM_Start+0x6a>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d109      	bne.n	8001cc8 <HAL_TIM_PWM_Start+0x58>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	e008      	b.n	8001cda <HAL_TIM_PWM_Start+0x6a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	bf14      	ite	ne
 8001cd4:	2301      	movne	r3, #1
 8001cd6:	2300      	moveq	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e05e      	b.n	8001da0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d104      	bne.n	8001cf2 <HAL_TIM_PWM_Start+0x82>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cf0:	e013      	b.n	8001d1a <HAL_TIM_PWM_Start+0xaa>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d104      	bne.n	8001d02 <HAL_TIM_PWM_Start+0x92>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d00:	e00b      	b.n	8001d1a <HAL_TIM_PWM_Start+0xaa>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d104      	bne.n	8001d12 <HAL_TIM_PWM_Start+0xa2>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d10:	e003      	b.n	8001d1a <HAL_TIM_PWM_Start+0xaa>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2202      	movs	r2, #2
 8001d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	6839      	ldr	r1, [r7, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fd68 	bl	80027f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <HAL_TIM_PWM_Start+0x138>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d107      	bne.n	8001d42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <HAL_TIM_PWM_Start+0x138>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00e      	beq.n	8001d6a <HAL_TIM_PWM_Start+0xfa>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d54:	d009      	beq.n	8001d6a <HAL_TIM_PWM_Start+0xfa>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a14      	ldr	r2, [pc, #80]	; (8001dac <HAL_TIM_PWM_Start+0x13c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d004      	beq.n	8001d6a <HAL_TIM_PWM_Start+0xfa>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <HAL_TIM_PWM_Start+0x140>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d111      	bne.n	8001d8e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b06      	cmp	r3, #6
 8001d7a:	d010      	beq.n	8001d9e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8c:	e007      	b.n	8001d9e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40012c00 	.word	0x40012c00
 8001dac:	40000400 	.word	0x40000400
 8001db0:	40000800 	.word	0x40000800

08001db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d122      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d11b      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0202 	mvn.w	r2, #2
 8001de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fa62 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fa55 	bl	80022ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fa64 	bl	80022d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d122      	bne.n	8001e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d11b      	bne.n	8001e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0204 	mvn.w	r2, #4
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fa38 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 fa2b 	bl	80022ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fa3a 	bl	80022d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d122      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0208 	mvn.w	r2, #8
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 fa0e 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fa01 	bl	80022ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fa10 	bl	80022d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d122      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d11b      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0210 	mvn.w	r2, #16
 8001edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f9e4 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f9d7 	bl	80022ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f9e6 	bl	80022d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d10e      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d107      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0201 	mvn.w	r2, #1
 8001f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe fc06 	bl	8000744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	2b80      	cmp	r3, #128	; 0x80
 8001f44:	d10e      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f50:	2b80      	cmp	r3, #128	; 0x80
 8001f52:	d107      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fcd5 	bl	800290e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6e:	2b40      	cmp	r3, #64	; 0x40
 8001f70:	d10e      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7c:	2b40      	cmp	r3, #64	; 0x40
 8001f7e:	d107      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f9aa 	bl	80022e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	d10e      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0320 	and.w	r3, r3, #32
 8001fa8:	2b20      	cmp	r3, #32
 8001faa:	d107      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0220 	mvn.w	r2, #32
 8001fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fca0 	bl	80028fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e0ac      	b.n	8002138 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b0c      	cmp	r3, #12
 8001fea:	f200 809f 	bhi.w	800212c <HAL_TIM_PWM_ConfigChannel+0x168>
 8001fee:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff4:	08002029 	.word	0x08002029
 8001ff8:	0800212d 	.word	0x0800212d
 8001ffc:	0800212d 	.word	0x0800212d
 8002000:	0800212d 	.word	0x0800212d
 8002004:	08002069 	.word	0x08002069
 8002008:	0800212d 	.word	0x0800212d
 800200c:	0800212d 	.word	0x0800212d
 8002010:	0800212d 	.word	0x0800212d
 8002014:	080020ab 	.word	0x080020ab
 8002018:	0800212d 	.word	0x0800212d
 800201c:	0800212d 	.word	0x0800212d
 8002020:	0800212d 	.word	0x0800212d
 8002024:	080020eb 	.word	0x080020eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f9c4 	bl	80023bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0208 	orr.w	r2, r2, #8
 8002042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0204 	bic.w	r2, r2, #4
 8002052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6999      	ldr	r1, [r3, #24]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	619a      	str	r2, [r3, #24]
      break;
 8002066:	e062      	b.n	800212e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fa0a 	bl	8002488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6999      	ldr	r1, [r3, #24]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	021a      	lsls	r2, r3, #8
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	619a      	str	r2, [r3, #24]
      break;
 80020a8:	e041      	b.n	800212e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 fa53 	bl	800255c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69da      	ldr	r2, [r3, #28]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0208 	orr.w	r2, r2, #8
 80020c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69da      	ldr	r2, [r3, #28]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0204 	bic.w	r2, r2, #4
 80020d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69d9      	ldr	r1, [r3, #28]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	61da      	str	r2, [r3, #28]
      break;
 80020e8:	e021      	b.n	800212e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 fa9d 	bl	8002630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	69d9      	ldr	r1, [r3, #28]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	021a      	lsls	r2, r3, #8
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	61da      	str	r2, [r3, #28]
      break;
 800212a:	e000      	b.n	800212e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800212c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_TIM_ConfigClockSource+0x18>
 8002154:	2302      	movs	r3, #2
 8002156:	e0a6      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x166>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002176:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800217e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b40      	cmp	r3, #64	; 0x40
 800218e:	d067      	beq.n	8002260 <HAL_TIM_ConfigClockSource+0x120>
 8002190:	2b40      	cmp	r3, #64	; 0x40
 8002192:	d80b      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x6c>
 8002194:	2b10      	cmp	r3, #16
 8002196:	d073      	beq.n	8002280 <HAL_TIM_ConfigClockSource+0x140>
 8002198:	2b10      	cmp	r3, #16
 800219a:	d802      	bhi.n	80021a2 <HAL_TIM_ConfigClockSource+0x62>
 800219c:	2b00      	cmp	r3, #0
 800219e:	d06f      	beq.n	8002280 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80021a0:	e078      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d06c      	beq.n	8002280 <HAL_TIM_ConfigClockSource+0x140>
 80021a6:	2b30      	cmp	r3, #48	; 0x30
 80021a8:	d06a      	beq.n	8002280 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80021aa:	e073      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021ac:	2b70      	cmp	r3, #112	; 0x70
 80021ae:	d00d      	beq.n	80021cc <HAL_TIM_ConfigClockSource+0x8c>
 80021b0:	2b70      	cmp	r3, #112	; 0x70
 80021b2:	d804      	bhi.n	80021be <HAL_TIM_ConfigClockSource+0x7e>
 80021b4:	2b50      	cmp	r3, #80	; 0x50
 80021b6:	d033      	beq.n	8002220 <HAL_TIM_ConfigClockSource+0xe0>
 80021b8:	2b60      	cmp	r3, #96	; 0x60
 80021ba:	d041      	beq.n	8002240 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80021bc:	e06a      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c2:	d066      	beq.n	8002292 <HAL_TIM_ConfigClockSource+0x152>
 80021c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c8:	d017      	beq.n	80021fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 80021ca:	e063      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6899      	ldr	r1, [r3, #8]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f000 faed 	bl	80027ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	609a      	str	r2, [r3, #8]
      break;
 80021f8:	e04c      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6899      	ldr	r1, [r3, #8]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f000 fad6 	bl	80027ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800221c:	609a      	str	r2, [r3, #8]
      break;
 800221e:	e039      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6859      	ldr	r1, [r3, #4]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	461a      	mov	r2, r3
 800222e:	f000 fa4d 	bl	80026cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2150      	movs	r1, #80	; 0x50
 8002238:	4618      	mov	r0, r3
 800223a:	f000 faa4 	bl	8002786 <TIM_ITRx_SetConfig>
      break;
 800223e:	e029      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	461a      	mov	r2, r3
 800224e:	f000 fa6b 	bl	8002728 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2160      	movs	r1, #96	; 0x60
 8002258:	4618      	mov	r0, r3
 800225a:	f000 fa94 	bl	8002786 <TIM_ITRx_SetConfig>
      break;
 800225e:	e019      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	461a      	mov	r2, r3
 800226e:	f000 fa2d 	bl	80026cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2140      	movs	r1, #64	; 0x40
 8002278:	4618      	mov	r0, r3
 800227a:	f000 fa84 	bl	8002786 <TIM_ITRx_SetConfig>
      break;
 800227e:	e009      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	4610      	mov	r0, r2
 800228c:	f000 fa7b 	bl	8002786 <TIM_ITRx_SetConfig>
        break;
 8002290:	e000      	b.n	8002294 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr

080022d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
	...

080022f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a29      	ldr	r2, [pc, #164]	; (80023b0 <TIM_Base_SetConfig+0xb8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d00b      	beq.n	8002328 <TIM_Base_SetConfig+0x30>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002316:	d007      	beq.n	8002328 <TIM_Base_SetConfig+0x30>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <TIM_Base_SetConfig+0xbc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d003      	beq.n	8002328 <TIM_Base_SetConfig+0x30>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a25      	ldr	r2, [pc, #148]	; (80023b8 <TIM_Base_SetConfig+0xc0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d108      	bne.n	800233a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a1c      	ldr	r2, [pc, #112]	; (80023b0 <TIM_Base_SetConfig+0xb8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00b      	beq.n	800235a <TIM_Base_SetConfig+0x62>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d007      	beq.n	800235a <TIM_Base_SetConfig+0x62>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <TIM_Base_SetConfig+0xbc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d003      	beq.n	800235a <TIM_Base_SetConfig+0x62>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <TIM_Base_SetConfig+0xc0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d108      	bne.n	800236c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a07      	ldr	r2, [pc, #28]	; (80023b0 <TIM_Base_SetConfig+0xb8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d103      	bne.n	80023a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	615a      	str	r2, [r3, #20]
}
 80023a6:	bf00      	nop
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	40012c00 	.word	0x40012c00
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40000800 	.word	0x40000800

080023bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	f023 0201 	bic.w	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f023 0302 	bic.w	r3, r3, #2
 8002404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <TIM_OC1_SetConfig+0xc8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d10c      	bne.n	8002432 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f023 0308 	bic.w	r3, r3, #8
 800241e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a13      	ldr	r2, [pc, #76]	; (8002484 <TIM_OC1_SetConfig+0xc8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d111      	bne.n	800245e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	621a      	str	r2, [r3, #32]
}
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40012c00 	.word	0x40012c00

08002488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	f023 0210 	bic.w	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f023 0320 	bic.w	r3, r3, #32
 80024d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <TIM_OC2_SetConfig+0xd0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d10d      	bne.n	8002504 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a14      	ldr	r2, [pc, #80]	; (8002558 <TIM_OC2_SetConfig+0xd0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d113      	bne.n	8002534 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800251a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	621a      	str	r2, [r3, #32]
}
 800254e:	bf00      	nop
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	40012c00 	.word	0x40012c00

0800255c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a1d      	ldr	r2, [pc, #116]	; (800262c <TIM_OC3_SetConfig+0xd0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10d      	bne.n	80025d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <TIM_OC3_SetConfig+0xd0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d113      	bne.n	8002606 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	621a      	str	r2, [r3, #32]
}
 8002620:	bf00      	nop
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40012c00 	.word	0x40012c00

08002630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800265e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800267a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	031b      	lsls	r3, r3, #12
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <TIM_OC4_SetConfig+0x98>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d109      	bne.n	80026a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	019b      	lsls	r3, r3, #6
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	621a      	str	r2, [r3, #32]
}
 80026be:	bf00      	nop
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	40012c00 	.word	0x40012c00

080026cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	f023 0201 	bic.w	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f023 030a 	bic.w	r3, r3, #10
 8002708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	621a      	str	r2, [r3, #32]
}
 800271e:	bf00      	nop
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f023 0210 	bic.w	r2, r3, #16
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002752:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	031b      	lsls	r3, r3, #12
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002764:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	621a      	str	r2, [r3, #32]
}
 800277c:	bf00      	nop
 800277e:	371c      	adds	r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f043 0307 	orr.w	r3, r3, #7
 80027a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	609a      	str	r2, [r3, #8]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b087      	sub	sp, #28
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	021a      	lsls	r2, r3, #8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	431a      	orrs	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	609a      	str	r2, [r3, #8]
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2201      	movs	r2, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a1a      	ldr	r2, [r3, #32]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	43db      	mvns	r3, r3
 800281a:	401a      	ands	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a1a      	ldr	r2, [r3, #32]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	431a      	orrs	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	621a      	str	r2, [r3, #32]
}
 8002836:	bf00      	nop
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002854:	2302      	movs	r3, #2
 8002856:	e046      	b.n	80028e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00e      	beq.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a4:	d009      	beq.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d004      	beq.n	80028ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a10      	ldr	r2, [pc, #64]	; (80028f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10c      	bne.n	80028d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	40012c00 	.word	0x40012c00
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40000800 	.word	0x40000800

080028fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr

0800290e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e03f      	b.n	80029b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fd ffb4 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	; 0x24
 8002950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fb83 	bl	8003070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b08a      	sub	sp, #40	; 0x28
 80029be:	af02      	add	r7, sp, #8
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	d17c      	bne.n	8002ad4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_UART_Transmit+0x2c>
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e075      	b.n	8002ad6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_UART_Transmit+0x3e>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e06e      	b.n	8002ad6 <HAL_UART_Transmit+0x11c>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2221      	movs	r2, #33	; 0x21
 8002a0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a0e:	f7fe f8fd 	bl	8000c0c <HAL_GetTick>
 8002a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	88fa      	ldrh	r2, [r7, #6]
 8002a1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a28:	d108      	bne.n	8002a3c <HAL_UART_Transmit+0x82>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d104      	bne.n	8002a3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	e003      	b.n	8002a44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002a4c:	e02a      	b.n	8002aa4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2200      	movs	r2, #0
 8002a56:	2180      	movs	r1, #128	; 0x80
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f9a7 	bl	8002dac <UART_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e036      	b.n	8002ad6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10b      	bne.n	8002a86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	3302      	adds	r3, #2
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	e007      	b.n	8002a96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	3301      	adds	r3, #1
 8002a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1cf      	bne.n	8002a4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2140      	movs	r1, #64	; 0x40
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f977 	bl	8002dac <UART_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e006      	b.n	8002ad6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e000      	b.n	8002ad6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ad4:	2302      	movs	r3, #2
  }
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3720      	adds	r7, #32
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d140      	bne.n	8002b7a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_UART_Receive_IT+0x26>
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e039      	b.n	8002b7c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_UART_Receive_IT+0x38>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e032      	b.n	8002b7c <HAL_UART_Receive_IT+0x9e>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	88fa      	ldrh	r2, [r7, #6]
 8002b28:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	88fa      	ldrh	r2, [r7, #6]
 8002b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2222      	movs	r2, #34	; 0x22
 8002b3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b54:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0220 	orr.w	r2, r2, #32
 8002b74:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e000      	b.n	8002b7c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002b7a:	2302      	movs	r3, #2
  }
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10d      	bne.n	8002bda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_UART_IRQHandler+0x52>
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f9cc 	bl	8002f70 <UART_Receive_IT>
      return;
 8002bd8:	e0d1      	b.n	8002d7e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80b0 	beq.w	8002d42 <HAL_UART_IRQHandler+0x1ba>
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d105      	bne.n	8002bf8 <HAL_UART_IRQHandler+0x70>
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80a5 	beq.w	8002d42 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_UART_IRQHandler+0x90>
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_UART_IRQHandler+0xb0>
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c30:	f043 0202 	orr.w	r2, r3, #2
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_UART_IRQHandler+0xd0>
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	f043 0204 	orr.w	r2, r3, #4
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00f      	beq.n	8002c82 <HAL_UART_IRQHandler+0xfa>
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <HAL_UART_IRQHandler+0xee>
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	f043 0208 	orr.w	r2, r3, #8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d078      	beq.n	8002d7c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <HAL_UART_IRQHandler+0x11c>
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f966 	bl	8002f70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <HAL_UART_IRQHandler+0x144>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d031      	beq.n	8002d30 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f8b7 	bl	8002e40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d023      	beq.n	8002d28 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <HAL_UART_IRQHandler+0x1fc>)
 8002cfe:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe f86b 	bl	8000de0 <HAL_DMA_Abort_IT>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d016      	beq.n	8002d3e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1e:	e00e      	b.n	8002d3e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f83a 	bl	8002d9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d26:	e00a      	b.n	8002d3e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f836 	bl	8002d9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d2e:	e006      	b.n	8002d3e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f832 	bl	8002d9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002d3c:	e01e      	b.n	8002d7c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d3e:	bf00      	nop
    return;
 8002d40:	e01c      	b.n	8002d7c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_UART_IRQHandler+0x1d6>
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f8a3 	bl	8002ea2 <UART_Transmit_IT>
    return;
 8002d5c:	e00f      	b.n	8002d7e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_UART_IRQHandler+0x1f6>
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f8e4 	bl	8002f40 <UART_EndTransmit_IT>
    return;
 8002d78:	bf00      	nop
 8002d7a:	e000      	b.n	8002d7e <HAL_UART_IRQHandler+0x1f6>
    return;
 8002d7c:	bf00      	nop
  }
}
 8002d7e:	3720      	adds	r7, #32
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	08002e7b 	.word	0x08002e7b

08002d88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dbc:	e02c      	b.n	8002e18 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dc4:	d028      	beq.n	8002e18 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8002dcc:	f7fd ff1e 	bl	8000c0c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d21d      	bcs.n	8002e18 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e00f      	b.n	8002e38 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4013      	ands	r3, r2
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d0c3      	beq.n	8002dbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e56:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr

08002e7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f7ff ff80 	bl	8002d9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b21      	cmp	r3, #33	; 0x21
 8002eb4:	d13e      	bne.n	8002f34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ebe:	d114      	bne.n	8002eea <UART_Transmit_IT+0x48>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d110      	bne.n	8002eea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002edc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	1c9a      	adds	r2, r3, #2
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	621a      	str	r2, [r3, #32]
 8002ee8:	e008      	b.n	8002efc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	1c59      	adds	r1, r3, #1
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6211      	str	r1, [r2, #32]
 8002ef4:	781a      	ldrb	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10f      	bne.n	8002f30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e000      	b.n	8002f36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
  }
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff ff11 	bl	8002d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b22      	cmp	r3, #34	; 0x22
 8002f82:	d170      	bne.n	8003066 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8c:	d117      	bne.n	8002fbe <UART_Receive_IT+0x4e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d113      	bne.n	8002fbe <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	1c9a      	adds	r2, r3, #2
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
 8002fbc:	e026      	b.n	800300c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd0:	d007      	beq.n	8002fe2 <UART_Receive_IT+0x72>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <UART_Receive_IT+0x80>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e008      	b.n	8003002 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29b      	uxth	r3, r3
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4619      	mov	r1, r3
 800301a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800301c:	2b00      	cmp	r3, #0
 800301e:	d120      	bne.n	8003062 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0220 	bic.w	r2, r2, #32
 800302e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800303e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7fd fb0f 	bl	800067c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e002      	b.n	8003068 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	e000      	b.n	8003068 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003066:	2302      	movs	r3, #2
  }
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030aa:	f023 030c 	bic.w	r3, r3, #12
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <UART_SetConfig+0x114>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d103      	bne.n	80030e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030d8:	f7fe fc6e 	bl	80019b8 <HAL_RCC_GetPCLK2Freq>
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	e002      	b.n	80030e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030e0:	f7fe fc56 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 80030e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	009a      	lsls	r2, r3, #2
 80030f0:	441a      	add	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	4a22      	ldr	r2, [pc, #136]	; (8003188 <UART_SetConfig+0x118>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	0119      	lsls	r1, r3, #4
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	009a      	lsls	r2, r3, #2
 8003110:	441a      	add	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	fbb2 f2f3 	udiv	r2, r2, r3
 800311c:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <UART_SetConfig+0x118>)
 800311e:	fba3 0302 	umull	r0, r3, r3, r2
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2064      	movs	r0, #100	; 0x64
 8003126:	fb00 f303 	mul.w	r3, r0, r3
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	3332      	adds	r3, #50	; 0x32
 8003130:	4a15      	ldr	r2, [pc, #84]	; (8003188 <UART_SetConfig+0x118>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800313c:	4419      	add	r1, r3
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009a      	lsls	r2, r3, #2
 8003148:	441a      	add	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	fbb2 f2f3 	udiv	r2, r2, r3
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <UART_SetConfig+0x118>)
 8003156:	fba3 0302 	umull	r0, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2064      	movs	r0, #100	; 0x64
 800315e:	fb00 f303 	mul.w	r3, r0, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	3332      	adds	r3, #50	; 0x32
 8003168:	4a07      	ldr	r2, [pc, #28]	; (8003188 <UART_SetConfig+0x118>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 020f 	and.w	r2, r3, #15
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	440a      	add	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40013800 	.word	0x40013800
 8003188:	51eb851f 	.word	0x51eb851f

0800318c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003192:	f3ef 8305 	mrs	r3, IPSR
 8003196:	60bb      	str	r3, [r7, #8]
  return(result);
 8003198:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800319e:	f3ef 8310 	mrs	r3, PRIMASK
 80031a2:	607b      	str	r3, [r7, #4]
  return(result);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <osKernelInitialize+0x32>
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <osKernelInitialize+0x60>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d109      	bne.n	80031c6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031b2:	f3ef 8311 	mrs	r3, BASEPRI
 80031b6:	603b      	str	r3, [r7, #0]
  return(result);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80031be:	f06f 0305 	mvn.w	r3, #5
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	e00c      	b.n	80031e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80031c6:	4b09      	ldr	r3, [pc, #36]	; (80031ec <osKernelInitialize+0x60>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d105      	bne.n	80031da <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <osKernelInitialize+0x60>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e002      	b.n	80031e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80031da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80031e0:	68fb      	ldr	r3, [r7, #12]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	20000254 	.word	0x20000254

080031f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031f6:	f3ef 8305 	mrs	r3, IPSR
 80031fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80031fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10f      	bne.n	8003222 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003202:	f3ef 8310 	mrs	r3, PRIMASK
 8003206:	607b      	str	r3, [r7, #4]
  return(result);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <osKernelStart+0x32>
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <osKernelStart+0x64>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d109      	bne.n	800322a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003216:	f3ef 8311 	mrs	r3, BASEPRI
 800321a:	603b      	str	r3, [r7, #0]
  return(result);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003222:	f06f 0305 	mvn.w	r3, #5
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	e00e      	b.n	8003248 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <osKernelStart+0x64>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <osKernelStart+0x64>)
 8003234:	2202      	movs	r2, #2
 8003236:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003238:	f001 f864 	bl	8004304 <vTaskStartScheduler>
      stat = osOK;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	e002      	b.n	8003248 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003246:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003248:	68fb      	ldr	r3, [r7, #12]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000254 	.word	0x20000254

08003258 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b092      	sub	sp, #72	; 0x48
 800325c:	af04      	add	r7, sp, #16
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003268:	f3ef 8305 	mrs	r3, IPSR
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003270:	2b00      	cmp	r3, #0
 8003272:	f040 8094 	bne.w	800339e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003276:	f3ef 8310 	mrs	r3, PRIMASK
 800327a:	623b      	str	r3, [r7, #32]
  return(result);
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f040 808d 	bne.w	800339e <osThreadNew+0x146>
 8003284:	4b48      	ldr	r3, [pc, #288]	; (80033a8 <osThreadNew+0x150>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d106      	bne.n	800329a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800328c:	f3ef 8311 	mrs	r3, BASEPRI
 8003290:	61fb      	str	r3, [r7, #28]
  return(result);
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2b00      	cmp	r3, #0
 8003296:	f040 8082 	bne.w	800339e <osThreadNew+0x146>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d07e      	beq.n	800339e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80032a4:	2318      	movs	r3, #24
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80032a8:	2300      	movs	r3, #0
 80032aa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80032ac:	f107 031b 	add.w	r3, r7, #27
 80032b0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80032b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032b6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d045      	beq.n	800334a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <osThreadNew+0x74>
        name = attr->name;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <osThreadNew+0x9a>
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	2b38      	cmp	r3, #56	; 0x38
 80032e4:	d805      	bhi.n	80032f2 <osThreadNew+0x9a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <osThreadNew+0x9e>
        return (NULL);
 80032f2:	2300      	movs	r3, #0
 80032f4:	e054      	b.n	80033a0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00e      	beq.n	800332c <osThreadNew+0xd4>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b5b      	cmp	r3, #91	; 0x5b
 8003314:	d90a      	bls.n	800332c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800331a:	2b00      	cmp	r3, #0
 800331c:	d006      	beq.n	800332c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <osThreadNew+0xd4>
        mem = 1;
 8003326:	2301      	movs	r3, #1
 8003328:	62bb      	str	r3, [r7, #40]	; 0x28
 800332a:	e010      	b.n	800334e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10c      	bne.n	800334e <osThreadNew+0xf6>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d108      	bne.n	800334e <osThreadNew+0xf6>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d104      	bne.n	800334e <osThreadNew+0xf6>
          mem = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
 8003348:	e001      	b.n	800334e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	2b01      	cmp	r3, #1
 8003352:	d110      	bne.n	8003376 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800335c:	9202      	str	r2, [sp, #8]
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003368:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 fe02 	bl	8003f74 <xTaskCreateStatic>
 8003370:	4603      	mov	r3, r0
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e013      	b.n	800339e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	2b00      	cmp	r3, #0
 800337a:	d110      	bne.n	800339e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	b29a      	uxth	r2, r3
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 fe49 	bl	8004026 <xTaskCreate>
 8003394:	4603      	mov	r3, r0
 8003396:	2b01      	cmp	r3, #1
 8003398:	d001      	beq.n	800339e <osThreadNew+0x146>
          hTask = NULL;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800339e:	697b      	ldr	r3, [r7, #20]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3738      	adds	r7, #56	; 0x38
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000254 	.word	0x20000254

080033ac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033b4:	f3ef 8305 	mrs	r3, IPSR
 80033b8:	613b      	str	r3, [r7, #16]
  return(result);
 80033ba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10f      	bne.n	80033e0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c0:	f3ef 8310 	mrs	r3, PRIMASK
 80033c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d109      	bne.n	80033e0 <osDelay+0x34>
 80033cc:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <osDelay+0x58>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d109      	bne.n	80033e8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033d4:	f3ef 8311 	mrs	r3, BASEPRI
 80033d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <osDelay+0x3c>
    stat = osErrorISR;
 80033e0:	f06f 0305 	mvn.w	r3, #5
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	e007      	b.n	80033f8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 ff52 	bl	800429c <vTaskDelay>
    }
  }

  return (stat);
 80033f8:	697b      	ldr	r3, [r7, #20]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000254 	.word	0x20000254

08003408 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4a06      	ldr	r2, [pc, #24]	; (8003430 <vApplicationGetIdleTaskMemory+0x28>)
 8003418:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4a05      	ldr	r2, [pc, #20]	; (8003434 <vApplicationGetIdleTaskMemory+0x2c>)
 800341e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	601a      	str	r2, [r3, #0]
}
 8003426:	bf00      	nop
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	20000258 	.word	0x20000258
 8003434:	200002b4 	.word	0x200002b4

08003438 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a07      	ldr	r2, [pc, #28]	; (8003464 <vApplicationGetTimerTaskMemory+0x2c>)
 8003448:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4a06      	ldr	r2, [pc, #24]	; (8003468 <vApplicationGetTimerTaskMemory+0x30>)
 800344e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003456:	601a      	str	r2, [r3, #0]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	200004b4 	.word	0x200004b4
 8003468:	20000510 	.word	0x20000510

0800346c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f103 0208 	add.w	r2, r3, #8
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003484:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f103 0208 	add.w	r2, r3, #8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f103 0208 	add.w	r2, r3, #8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr

080034c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	601a      	str	r2, [r3, #0]
}
 80034fe:	bf00      	nop
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800351e:	d103      	bne.n	8003528 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	e00c      	b.n	8003542 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3308      	adds	r3, #8
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	e002      	b.n	8003536 <vListInsert+0x2e>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d2f6      	bcs.n	8003530 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	601a      	str	r2, [r3, #0]
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6892      	ldr	r2, [r2, #8]
 800358e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6852      	ldr	r2, [r2, #4]
 8003598:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d103      	bne.n	80035ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	1e5a      	subs	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr
	...

080035cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	e7fe      	b.n	80035f2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80035f4:	f001 ff98 	bl	8005528 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	68f9      	ldr	r1, [r7, #12]
 8003602:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	441a      	add	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	3b01      	subs	r3, #1
 8003626:	68f9      	ldr	r1, [r7, #12]
 8003628:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	441a      	add	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	22ff      	movs	r2, #255	; 0xff
 8003638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	22ff      	movs	r2, #255	; 0xff
 8003640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d114      	bne.n	8003674 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d01a      	beq.n	8003688 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3310      	adds	r3, #16
 8003656:	4618      	mov	r0, r3
 8003658:	f001 f8d8 	bl	800480c <xTaskRemoveFromEventList>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d012      	beq.n	8003688 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <xQueueGenericReset+0xcc>)
 8003664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	e009      	b.n	8003688 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3310      	adds	r3, #16
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fef7 	bl	800346c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3324      	adds	r3, #36	; 0x24
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fef2 	bl	800346c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003688:	f001 ff7c 	bl	8005584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800368c:	2301      	movs	r3, #1
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	e000ed04 	.word	0xe000ed04

0800369c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08e      	sub	sp, #56	; 0x38
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d109      	bne.n	80036c4 <xQueueGenericCreateStatic+0x28>
 80036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c2:	e7fe      	b.n	80036c2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <xQueueGenericCreateStatic+0x42>
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
 80036dc:	e7fe      	b.n	80036dc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <xQueueGenericCreateStatic+0x4e>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <xQueueGenericCreateStatic+0x52>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <xQueueGenericCreateStatic+0x54>
 80036ee:	2300      	movs	r3, #0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d109      	bne.n	8003708 <xQueueGenericCreateStatic+0x6c>
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	623b      	str	r3, [r7, #32]
 8003706:	e7fe      	b.n	8003706 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <xQueueGenericCreateStatic+0x78>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <xQueueGenericCreateStatic+0x7c>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <xQueueGenericCreateStatic+0x7e>
 8003718:	2300      	movs	r3, #0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <xQueueGenericCreateStatic+0x96>
 800371e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	e7fe      	b.n	8003730 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003732:	2350      	movs	r3, #80	; 0x50
 8003734:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b50      	cmp	r3, #80	; 0x50
 800373a:	d009      	beq.n	8003750 <xQueueGenericCreateStatic+0xb4>
 800373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	e7fe      	b.n	800374e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00d      	beq.n	8003776 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003762:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	4613      	mov	r3, r2
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f805 	bl	8003780 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003778:	4618      	mov	r0, r3
 800377a:	3730      	adds	r7, #48	; 0x30
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d103      	bne.n	800379c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e002      	b.n	80037a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037ae:	2101      	movs	r1, #1
 80037b0:	69b8      	ldr	r0, [r7, #24]
 80037b2:	f7ff ff0b 	bl	80035cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08e      	sub	sp, #56	; 0x38
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037d6:	2300      	movs	r3, #0
 80037d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d109      	bne.n	80037f8 <xQueueGenericSend+0x30>
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037f6:	e7fe      	b.n	80037f6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <xQueueGenericSend+0x3e>
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <xQueueGenericSend+0x42>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <xQueueGenericSend+0x44>
 800380a:	2300      	movs	r3, #0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <xQueueGenericSend+0x5c>
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
 8003822:	e7fe      	b.n	8003822 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d103      	bne.n	8003832 <xQueueGenericSend+0x6a>
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <xQueueGenericSend+0x6e>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <xQueueGenericSend+0x70>
 8003836:	2300      	movs	r3, #0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d109      	bne.n	8003850 <xQueueGenericSend+0x88>
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	623b      	str	r3, [r7, #32]
 800384e:	e7fe      	b.n	800384e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003850:	f001 f996 	bl	8004b80 <xTaskGetSchedulerState>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d102      	bne.n	8003860 <xQueueGenericSend+0x98>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <xQueueGenericSend+0x9c>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <xQueueGenericSend+0x9e>
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <xQueueGenericSend+0xb6>
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	e7fe      	b.n	800387c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800387e:	f001 fe53 	bl	8005528 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	429a      	cmp	r2, r3
 800388c:	d302      	bcc.n	8003894 <xQueueGenericSend+0xcc>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d129      	bne.n	80038e8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800389a:	f000 f9ff 	bl	8003c9c <prvCopyDataToQueue>
 800389e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d010      	beq.n	80038ca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	3324      	adds	r3, #36	; 0x24
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 ffad 	bl	800480c <xTaskRemoveFromEventList>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d013      	beq.n	80038e0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038b8:	4b3f      	ldr	r3, [pc, #252]	; (80039b8 <xQueueGenericSend+0x1f0>)
 80038ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	e00a      	b.n	80038e0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038d0:	4b39      	ldr	r3, [pc, #228]	; (80039b8 <xQueueGenericSend+0x1f0>)
 80038d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038e0:	f001 fe50 	bl	8005584 <vPortExitCritical>
				return pdPASS;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e063      	b.n	80039b0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038ee:	f001 fe49 	bl	8005584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e05c      	b.n	80039b0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d106      	bne.n	800390a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038fc:	f107 0314 	add.w	r3, r7, #20
 8003900:	4618      	mov	r0, r3
 8003902:	f000 ffe5 	bl	80048d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003906:	2301      	movs	r3, #1
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800390a:	f001 fe3b 	bl	8005584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800390e:	f000 fd5d 	bl	80043cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003912:	f001 fe09 	bl	8005528 <vPortEnterCritical>
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800391c:	b25b      	sxtb	r3, r3
 800391e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003922:	d103      	bne.n	800392c <xQueueGenericSend+0x164>
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003932:	b25b      	sxtb	r3, r3
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003938:	d103      	bne.n	8003942 <xQueueGenericSend+0x17a>
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003942:	f001 fe1f 	bl	8005584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003946:	1d3a      	adds	r2, r7, #4
 8003948:	f107 0314 	add.w	r3, r7, #20
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f000 ffd4 	bl	80048fc <xTaskCheckForTimeOut>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d124      	bne.n	80039a4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800395a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800395c:	f000 fa96 	bl	8003e8c <prvIsQueueFull>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d018      	beq.n	8003998 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	3310      	adds	r3, #16
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fefe 	bl	8004770 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003976:	f000 fa21 	bl	8003dbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800397a:	f000 fd35 	bl	80043e8 <xTaskResumeAll>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	f47f af7c 	bne.w	800387e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003986:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <xQueueGenericSend+0x1f0>)
 8003988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	e772      	b.n	800387e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800399a:	f000 fa0f 	bl	8003dbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800399e:	f000 fd23 	bl	80043e8 <xTaskResumeAll>
 80039a2:	e76c      	b.n	800387e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039a6:	f000 fa09 	bl	8003dbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039aa:	f000 fd1d 	bl	80043e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039ae:	2300      	movs	r3, #0
		}
	}
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3738      	adds	r7, #56	; 0x38
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	e000ed04 	.word	0xe000ed04

080039bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08e      	sub	sp, #56	; 0x38
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <xQueueGenericSendFromISR+0x2c>
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
 80039e6:	e7fe      	b.n	80039e6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d103      	bne.n	80039f6 <xQueueGenericSendFromISR+0x3a>
 80039ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <xQueueGenericSendFromISR+0x3e>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <xQueueGenericSendFromISR+0x40>
 80039fa:	2300      	movs	r3, #0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <xQueueGenericSendFromISR+0x58>
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	623b      	str	r3, [r7, #32]
 8003a12:	e7fe      	b.n	8003a12 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d103      	bne.n	8003a22 <xQueueGenericSendFromISR+0x66>
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <xQueueGenericSendFromISR+0x6a>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <xQueueGenericSendFromISR+0x6c>
 8003a26:	2300      	movs	r3, #0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d109      	bne.n	8003a40 <xQueueGenericSendFromISR+0x84>
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	e7fe      	b.n	8003a3e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a40:	f001 fe2c 	bl	800569c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a44:	f3ef 8211 	mrs	r2, BASEPRI
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	61ba      	str	r2, [r7, #24]
 8003a5a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a5c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d302      	bcc.n	8003a72 <xQueueGenericSendFromISR+0xb6>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d12c      	bne.n	8003acc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a82:	f000 f90b 	bl	8003c9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a86:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a8e:	d112      	bne.n	8003ab6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d016      	beq.n	8003ac6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	3324      	adds	r3, #36	; 0x24
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 feb5 	bl	800480c <xTaskRemoveFromEventList>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00e      	beq.n	8003ac6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e007      	b.n	8003ac6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ab6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003aba:	3301      	adds	r3, #1
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	b25a      	sxtb	r2, r3
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003aca:	e001      	b.n	8003ad0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3738      	adds	r7, #56	; 0x38
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08c      	sub	sp, #48	; 0x30
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <xQueueReceive+0x2e>
	__asm volatile
 8003afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	623b      	str	r3, [r7, #32]
 8003b10:	e7fe      	b.n	8003b10 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d103      	bne.n	8003b20 <xQueueReceive+0x3c>
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <xQueueReceive+0x40>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <xQueueReceive+0x42>
 8003b24:	2300      	movs	r3, #0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <xQueueReceive+0x5a>
 8003b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	e7fe      	b.n	8003b3c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b3e:	f001 f81f 	bl	8004b80 <xTaskGetSchedulerState>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d102      	bne.n	8003b4e <xQueueReceive+0x6a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <xQueueReceive+0x6e>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <xQueueReceive+0x70>
 8003b52:	2300      	movs	r3, #0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d109      	bne.n	8003b6c <xQueueReceive+0x88>
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	e7fe      	b.n	8003b6a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b6c:	f001 fcdc 	bl	8005528 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01f      	beq.n	8003bbc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b80:	f000 f8f6 	bl	8003d70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	1e5a      	subs	r2, r3, #1
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00f      	beq.n	8003bb4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	3310      	adds	r3, #16
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fe37 	bl	800480c <xTaskRemoveFromEventList>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ba4:	4b3c      	ldr	r3, [pc, #240]	; (8003c98 <xQueueReceive+0x1b4>)
 8003ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bb4:	f001 fce6 	bl	8005584 <vPortExitCritical>
				return pdPASS;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e069      	b.n	8003c90 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d103      	bne.n	8003bca <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bc2:	f001 fcdf 	bl	8005584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e062      	b.n	8003c90 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d106      	bne.n	8003bde <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bd0:	f107 0310 	add.w	r3, r7, #16
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fe7b 	bl	80048d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bde:	f001 fcd1 	bl	8005584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003be2:	f000 fbf3 	bl	80043cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003be6:	f001 fc9f 	bl	8005528 <vPortEnterCritical>
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bf0:	b25b      	sxtb	r3, r3
 8003bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bf6:	d103      	bne.n	8003c00 <xQueueReceive+0x11c>
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c06:	b25b      	sxtb	r3, r3
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c0c:	d103      	bne.n	8003c16 <xQueueReceive+0x132>
 8003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c16:	f001 fcb5 	bl	8005584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c1a:	1d3a      	adds	r2, r7, #4
 8003c1c:	f107 0310 	add.w	r3, r7, #16
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fe6a 	bl	80048fc <xTaskCheckForTimeOut>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d123      	bne.n	8003c76 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c30:	f000 f916 	bl	8003e60 <prvIsQueueEmpty>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d017      	beq.n	8003c6a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	3324      	adds	r3, #36	; 0x24
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fd94 	bl	8004770 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c4a:	f000 f8b7 	bl	8003dbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c4e:	f000 fbcb 	bl	80043e8 <xTaskResumeAll>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d189      	bne.n	8003b6c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003c58:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <xQueueReceive+0x1b4>)
 8003c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	e780      	b.n	8003b6c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c6c:	f000 f8a6 	bl	8003dbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c70:	f000 fbba 	bl	80043e8 <xTaskResumeAll>
 8003c74:	e77a      	b.n	8003b6c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c78:	f000 f8a0 	bl	8003dbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c7c:	f000 fbb4 	bl	80043e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c82:	f000 f8ed 	bl	8003e60 <prvIsQueueEmpty>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f43f af6f 	beq.w	8003b6c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3730      	adds	r7, #48	; 0x30
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10d      	bne.n	8003cd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d14d      	bne.n	8003d5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 ff78 	bl	8004bbc <xTaskPriorityDisinherit>
 8003ccc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	605a      	str	r2, [r3, #4]
 8003cd4:	e043      	b.n	8003d5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d119      	bne.n	8003d10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6898      	ldr	r0, [r3, #8]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	f001 ff16 	bl	8005b18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	441a      	add	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d32b      	bcc.n	8003d5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	609a      	str	r2, [r3, #8]
 8003d0e:	e026      	b.n	8003d5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	68d8      	ldr	r0, [r3, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	f001 fefc 	bl	8005b18 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	425b      	negs	r3, r3
 8003d2a:	441a      	add	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d207      	bcs.n	8003d4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	425b      	negs	r3, r3
 8003d46:	441a      	add	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d105      	bne.n	8003d5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d66:	697b      	ldr	r3, [r7, #20]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d018      	beq.n	8003db4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	441a      	add	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d303      	bcc.n	8003da4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68d9      	ldr	r1, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	461a      	mov	r2, r3
 8003dae:	6838      	ldr	r0, [r7, #0]
 8003db0:	f001 feb2 	bl	8005b18 <memcpy>
	}
}
 8003db4:	bf00      	nop
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003dc4:	f001 fbb0 	bl	8005528 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dd0:	e011      	b.n	8003df6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d012      	beq.n	8003e00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3324      	adds	r3, #36	; 0x24
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fd14 	bl	800480c <xTaskRemoveFromEventList>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003dea:	f000 fde7 	bl	80049bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	dce9      	bgt.n	8003dd2 <prvUnlockQueue+0x16>
 8003dfe:	e000      	b.n	8003e02 <prvUnlockQueue+0x46>
					break;
 8003e00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	22ff      	movs	r2, #255	; 0xff
 8003e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e0a:	f001 fbbb 	bl	8005584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e0e:	f001 fb8b 	bl	8005528 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e1a:	e011      	b.n	8003e40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d012      	beq.n	8003e4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3310      	adds	r3, #16
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fcef 	bl	800480c <xTaskRemoveFromEventList>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e34:	f000 fdc2 	bl	80049bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e38:	7bbb      	ldrb	r3, [r7, #14]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	dce9      	bgt.n	8003e1c <prvUnlockQueue+0x60>
 8003e48:	e000      	b.n	8003e4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	22ff      	movs	r2, #255	; 0xff
 8003e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e54:	f001 fb96 	bl	8005584 <vPortExitCritical>
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e68:	f001 fb5e 	bl	8005528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e74:	2301      	movs	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	e001      	b.n	8003e7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e7e:	f001 fb81 	bl	8005584 <vPortExitCritical>

	return xReturn;
 8003e82:	68fb      	ldr	r3, [r7, #12]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e94:	f001 fb48 	bl	8005528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d102      	bne.n	8003eaa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	e001      	b.n	8003eae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003eae:	f001 fb69 	bl	8005584 <vPortExitCritical>

	return xReturn;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	e014      	b.n	8003ef6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ecc:	4a0e      	ldr	r2, [pc, #56]	; (8003f08 <vQueueAddToRegistry+0x4c>)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10b      	bne.n	8003ef0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ed8:	490b      	ldr	r1, [pc, #44]	; (8003f08 <vQueueAddToRegistry+0x4c>)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ee2:	4a09      	ldr	r2, [pc, #36]	; (8003f08 <vQueueAddToRegistry+0x4c>)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4413      	add	r3, r2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003eee:	e005      	b.n	8003efc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b07      	cmp	r3, #7
 8003efa:	d9e7      	bls.n	8003ecc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20001c88 	.word	0x20001c88

08003f0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f1c:	f001 fb04 	bl	8005528 <vPortEnterCritical>
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f26:	b25b      	sxtb	r3, r3
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f2c:	d103      	bne.n	8003f36 <vQueueWaitForMessageRestricted+0x2a>
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f3c:	b25b      	sxtb	r3, r3
 8003f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f42:	d103      	bne.n	8003f4c <vQueueWaitForMessageRestricted+0x40>
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f4c:	f001 fb1a 	bl	8005584 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	3324      	adds	r3, #36	; 0x24
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fc29 	bl	80047b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f66:	6978      	ldr	r0, [r7, #20]
 8003f68:	f7ff ff28 	bl	8003dbc <prvUnlockQueue>
	}
 8003f6c:	bf00      	nop
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08e      	sub	sp, #56	; 0x38
 8003f78:	af04      	add	r7, sp, #16
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <xTaskCreateStatic+0x28>
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	e7fe      	b.n	8003f9a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <xTaskCreateStatic+0x42>
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	e7fe      	b.n	8003fb4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fb6:	235c      	movs	r3, #92	; 0x5c
 8003fb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b5c      	cmp	r3, #92	; 0x5c
 8003fbe:	d009      	beq.n	8003fd4 <xTaskCreateStatic+0x60>
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	e7fe      	b.n	8003fd2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01e      	beq.n	8004018 <xTaskCreateStatic+0xa4>
 8003fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01b      	beq.n	8004018 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	2202      	movs	r2, #2
 8003fee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	9303      	str	r3, [sp, #12]
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	9302      	str	r3, [sp, #8]
 8003ffa:	f107 0314 	add.w	r3, r7, #20
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f850 	bl	80040b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004012:	f000 f8d3 	bl	80041bc <prvAddNewTaskToReadyList>
 8004016:	e001      	b.n	800401c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800401c:	697b      	ldr	r3, [r7, #20]
	}
 800401e:	4618      	mov	r0, r3
 8004020:	3728      	adds	r7, #40	; 0x28
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004026:	b580      	push	{r7, lr}
 8004028:	b08c      	sub	sp, #48	; 0x30
 800402a:	af04      	add	r7, sp, #16
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	4613      	mov	r3, r2
 8004034:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4618      	mov	r0, r3
 800403c:	f001 fb6a 	bl	8005714 <pvPortMalloc>
 8004040:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00e      	beq.n	8004066 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004048:	205c      	movs	r0, #92	; 0x5c
 800404a:	f001 fb63 	bl	8005714 <pvPortMalloc>
 800404e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
 800405c:	e005      	b.n	800406a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800405e:	6978      	ldr	r0, [r7, #20]
 8004060:	f001 fc1a 	bl	8005898 <vPortFree>
 8004064:	e001      	b.n	800406a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d017      	beq.n	80040a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004078:	88fa      	ldrh	r2, [r7, #6]
 800407a:	2300      	movs	r3, #0
 800407c:	9303      	str	r3, [sp, #12]
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	9302      	str	r3, [sp, #8]
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f80e 	bl	80040b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004094:	69f8      	ldr	r0, [r7, #28]
 8004096:	f000 f891 	bl	80041bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800409a:	2301      	movs	r3, #1
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	e002      	b.n	80040a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040a6:	69bb      	ldr	r3, [r7, #24]
	}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	461a      	mov	r2, r3
 80040c8:	21a5      	movs	r1, #165	; 0xa5
 80040ca:	f001 fd30 	bl	8005b2e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040d8:	3b01      	subs	r3, #1
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	f023 0307 	bic.w	r3, r3, #7
 80040e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d009      	beq.n	8004106 <prvInitialiseNewTask+0x56>
 80040f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f6:	f383 8811 	msr	BASEPRI, r3
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	e7fe      	b.n	8004104 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004106:	2300      	movs	r3, #0
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	e012      	b.n	8004132 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	4413      	add	r3, r2
 8004112:	7819      	ldrb	r1, [r3, #0]
 8004114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	3334      	adds	r3, #52	; 0x34
 800411c:	460a      	mov	r2, r1
 800411e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	4413      	add	r3, r2
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d006      	beq.n	800413a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	3301      	adds	r3, #1
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	2b0f      	cmp	r3, #15
 8004136:	d9e9      	bls.n	800410c <prvInitialiseNewTask+0x5c>
 8004138:	e000      	b.n	800413c <prvInitialiseNewTask+0x8c>
		{
			break;
 800413a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	2b37      	cmp	r3, #55	; 0x37
 8004148:	d901      	bls.n	800414e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800414a:	2337      	movs	r3, #55	; 0x37
 800414c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004152:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004158:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415c:	2200      	movs	r2, #0
 800415e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	3304      	adds	r3, #4
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff f9a0 	bl	80034aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	3318      	adds	r3, #24
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff f99b 	bl	80034aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004178:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004188:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	2200      	movs	r2, #0
 800418e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	68f9      	ldr	r1, [r7, #12]
 800419c:	69b8      	ldr	r0, [r7, #24]
 800419e:	f001 f8d7 	bl	8005350 <pxPortInitialiseStack>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041b4:	bf00      	nop
 80041b6:	3720      	adds	r7, #32
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041c4:	f001 f9b0 	bl	8005528 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041c8:	4b2d      	ldr	r3, [pc, #180]	; (8004280 <prvAddNewTaskToReadyList+0xc4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3301      	adds	r3, #1
 80041ce:	4a2c      	ldr	r2, [pc, #176]	; (8004280 <prvAddNewTaskToReadyList+0xc4>)
 80041d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041d2:	4b2c      	ldr	r3, [pc, #176]	; (8004284 <prvAddNewTaskToReadyList+0xc8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041da:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <prvAddNewTaskToReadyList+0xc8>)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041e0:	4b27      	ldr	r3, [pc, #156]	; (8004280 <prvAddNewTaskToReadyList+0xc4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d110      	bne.n	800420a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041e8:	f000 fc0c 	bl	8004a04 <prvInitialiseTaskLists>
 80041ec:	e00d      	b.n	800420a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041ee:	4b26      	ldr	r3, [pc, #152]	; (8004288 <prvAddNewTaskToReadyList+0xcc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041f6:	4b23      	ldr	r3, [pc, #140]	; (8004284 <prvAddNewTaskToReadyList+0xc8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	429a      	cmp	r2, r3
 8004202:	d802      	bhi.n	800420a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004204:	4a1f      	ldr	r2, [pc, #124]	; (8004284 <prvAddNewTaskToReadyList+0xc8>)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800420a:	4b20      	ldr	r3, [pc, #128]	; (800428c <prvAddNewTaskToReadyList+0xd0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3301      	adds	r3, #1
 8004210:	4a1e      	ldr	r2, [pc, #120]	; (800428c <prvAddNewTaskToReadyList+0xd0>)
 8004212:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004214:	4b1d      	ldr	r3, [pc, #116]	; (800428c <prvAddNewTaskToReadyList+0xd0>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004220:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <prvAddNewTaskToReadyList+0xd4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d903      	bls.n	8004230 <prvAddNewTaskToReadyList+0x74>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	4a18      	ldr	r2, [pc, #96]	; (8004290 <prvAddNewTaskToReadyList+0xd4>)
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <prvAddNewTaskToReadyList+0xd8>)
 800423e:	441a      	add	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3304      	adds	r3, #4
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f7ff f93b 	bl	80034c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800424c:	f001 f99a 	bl	8005584 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004250:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <prvAddNewTaskToReadyList+0xcc>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00e      	beq.n	8004276 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <prvAddNewTaskToReadyList+0xc8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	429a      	cmp	r2, r3
 8004264:	d207      	bcs.n	8004276 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004266:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <prvAddNewTaskToReadyList+0xdc>)
 8004268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000de4 	.word	0x20000de4
 8004284:	20000910 	.word	0x20000910
 8004288:	20000df0 	.word	0x20000df0
 800428c:	20000e00 	.word	0x20000e00
 8004290:	20000dec 	.word	0x20000dec
 8004294:	20000914 	.word	0x20000914
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042ae:	4b13      	ldr	r3, [pc, #76]	; (80042fc <vTaskDelay+0x60>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <vTaskDelay+0x2e>
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	e7fe      	b.n	80042c8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80042ca:	f000 f87f 	bl	80043cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042ce:	2100      	movs	r1, #0
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fcdf 	bl	8004c94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042d6:	f000 f887 	bl	80043e8 <xTaskResumeAll>
 80042da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d107      	bne.n	80042f2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80042e2:	4b07      	ldr	r3, [pc, #28]	; (8004300 <vTaskDelay+0x64>)
 80042e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000e0c 	.word	0x20000e0c
 8004300:	e000ed04 	.word	0xe000ed04

08004304 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08a      	sub	sp, #40	; 0x28
 8004308:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800430e:	2300      	movs	r3, #0
 8004310:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004312:	463a      	mov	r2, r7
 8004314:	1d39      	adds	r1, r7, #4
 8004316:	f107 0308 	add.w	r3, r7, #8
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff f874 	bl	8003408 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004320:	6839      	ldr	r1, [r7, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	9202      	str	r2, [sp, #8]
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	2300      	movs	r3, #0
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	2300      	movs	r3, #0
 8004330:	460a      	mov	r2, r1
 8004332:	4920      	ldr	r1, [pc, #128]	; (80043b4 <vTaskStartScheduler+0xb0>)
 8004334:	4820      	ldr	r0, [pc, #128]	; (80043b8 <vTaskStartScheduler+0xb4>)
 8004336:	f7ff fe1d 	bl	8003f74 <xTaskCreateStatic>
 800433a:	4602      	mov	r2, r0
 800433c:	4b1f      	ldr	r3, [pc, #124]	; (80043bc <vTaskStartScheduler+0xb8>)
 800433e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004340:	4b1e      	ldr	r3, [pc, #120]	; (80043bc <vTaskStartScheduler+0xb8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004348:	2301      	movs	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e001      	b.n	8004352 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d102      	bne.n	800435e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004358:	f000 fcf0 	bl	8004d3c <xTimerCreateTimerTask>
 800435c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d115      	bne.n	8004390 <vTaskStartScheduler+0x8c>
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004376:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <vTaskStartScheduler+0xbc>)
 8004378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800437c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800437e:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <vTaskStartScheduler+0xc0>)
 8004380:	2201      	movs	r2, #1
 8004382:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004384:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <vTaskStartScheduler+0xc4>)
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800438a:	f001 f85d 	bl	8005448 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800438e:	e00d      	b.n	80043ac <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004396:	d109      	bne.n	80043ac <vTaskStartScheduler+0xa8>
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	e7fe      	b.n	80043aa <vTaskStartScheduler+0xa6>
}
 80043ac:	bf00      	nop
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	08006b40 	.word	0x08006b40
 80043b8:	080049d5 	.word	0x080049d5
 80043bc:	20000e08 	.word	0x20000e08
 80043c0:	20000e04 	.word	0x20000e04
 80043c4:	20000df0 	.word	0x20000df0
 80043c8:	20000de8 	.word	0x20000de8

080043cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043d0:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <vTaskSuspendAll+0x18>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3301      	adds	r3, #1
 80043d6:	4a03      	ldr	r2, [pc, #12]	; (80043e4 <vTaskSuspendAll+0x18>)
 80043d8:	6013      	str	r3, [r2, #0]
}
 80043da:	bf00      	nop
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	20000e0c 	.word	0x20000e0c

080043e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043f6:	4b41      	ldr	r3, [pc, #260]	; (80044fc <xTaskResumeAll+0x114>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <xTaskResumeAll+0x2a>
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	e7fe      	b.n	8004410 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004412:	f001 f889 	bl	8005528 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004416:	4b39      	ldr	r3, [pc, #228]	; (80044fc <xTaskResumeAll+0x114>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3b01      	subs	r3, #1
 800441c:	4a37      	ldr	r2, [pc, #220]	; (80044fc <xTaskResumeAll+0x114>)
 800441e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004420:	4b36      	ldr	r3, [pc, #216]	; (80044fc <xTaskResumeAll+0x114>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d162      	bne.n	80044ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004428:	4b35      	ldr	r3, [pc, #212]	; (8004500 <xTaskResumeAll+0x118>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d05e      	beq.n	80044ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004430:	e02f      	b.n	8004492 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004432:	4b34      	ldr	r3, [pc, #208]	; (8004504 <xTaskResumeAll+0x11c>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3318      	adds	r3, #24
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff f89a 	bl	8003578 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3304      	adds	r3, #4
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff f895 	bl	8003578 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004452:	4b2d      	ldr	r3, [pc, #180]	; (8004508 <xTaskResumeAll+0x120>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d903      	bls.n	8004462 <xTaskResumeAll+0x7a>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	4a2a      	ldr	r2, [pc, #168]	; (8004508 <xTaskResumeAll+0x120>)
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4a27      	ldr	r2, [pc, #156]	; (800450c <xTaskResumeAll+0x124>)
 8004470:	441a      	add	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3304      	adds	r3, #4
 8004476:	4619      	mov	r1, r3
 8004478:	4610      	mov	r0, r2
 800447a:	f7ff f822 	bl	80034c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004482:	4b23      	ldr	r3, [pc, #140]	; (8004510 <xTaskResumeAll+0x128>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	429a      	cmp	r2, r3
 800448a:	d302      	bcc.n	8004492 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800448c:	4b21      	ldr	r3, [pc, #132]	; (8004514 <xTaskResumeAll+0x12c>)
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004492:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <xTaskResumeAll+0x11c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1cb      	bne.n	8004432 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044a0:	f000 fb4a 	bl	8004b38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044a4:	4b1c      	ldr	r3, [pc, #112]	; (8004518 <xTaskResumeAll+0x130>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d010      	beq.n	80044d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044b0:	f000 f844 	bl	800453c <xTaskIncrementTick>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80044ba:	4b16      	ldr	r3, [pc, #88]	; (8004514 <xTaskResumeAll+0x12c>)
 80044bc:	2201      	movs	r2, #1
 80044be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f1      	bne.n	80044b0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80044cc:	4b12      	ldr	r3, [pc, #72]	; (8004518 <xTaskResumeAll+0x130>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044d2:	4b10      	ldr	r3, [pc, #64]	; (8004514 <xTaskResumeAll+0x12c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d009      	beq.n	80044ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044da:	2301      	movs	r3, #1
 80044dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <xTaskResumeAll+0x134>)
 80044e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044ee:	f001 f849 	bl	8005584 <vPortExitCritical>

	return xAlreadyYielded;
 80044f2:	68bb      	ldr	r3, [r7, #8]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000e0c 	.word	0x20000e0c
 8004500:	20000de4 	.word	0x20000de4
 8004504:	20000da4 	.word	0x20000da4
 8004508:	20000dec 	.word	0x20000dec
 800450c:	20000914 	.word	0x20000914
 8004510:	20000910 	.word	0x20000910
 8004514:	20000df8 	.word	0x20000df8
 8004518:	20000df4 	.word	0x20000df4
 800451c:	e000ed04 	.word	0xe000ed04

08004520 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004526:	4b04      	ldr	r3, [pc, #16]	; (8004538 <xTaskGetTickCount+0x18>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800452c:	687b      	ldr	r3, [r7, #4]
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr
 8004538:	20000de8 	.word	0x20000de8

0800453c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004546:	4b51      	ldr	r3, [pc, #324]	; (800468c <xTaskIncrementTick+0x150>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f040 808d 	bne.w	800466a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004550:	4b4f      	ldr	r3, [pc, #316]	; (8004690 <xTaskIncrementTick+0x154>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3301      	adds	r3, #1
 8004556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004558:	4a4d      	ldr	r2, [pc, #308]	; (8004690 <xTaskIncrementTick+0x154>)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d11f      	bne.n	80045a4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004564:	4b4b      	ldr	r3, [pc, #300]	; (8004694 <xTaskIncrementTick+0x158>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <xTaskIncrementTick+0x46>
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	e7fe      	b.n	8004580 <xTaskIncrementTick+0x44>
 8004582:	4b44      	ldr	r3, [pc, #272]	; (8004694 <xTaskIncrementTick+0x158>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	4b43      	ldr	r3, [pc, #268]	; (8004698 <xTaskIncrementTick+0x15c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a41      	ldr	r2, [pc, #260]	; (8004694 <xTaskIncrementTick+0x158>)
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4a41      	ldr	r2, [pc, #260]	; (8004698 <xTaskIncrementTick+0x15c>)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b41      	ldr	r3, [pc, #260]	; (800469c <xTaskIncrementTick+0x160>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3301      	adds	r3, #1
 800459c:	4a3f      	ldr	r2, [pc, #252]	; (800469c <xTaskIncrementTick+0x160>)
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	f000 faca 	bl	8004b38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045a4:	4b3e      	ldr	r3, [pc, #248]	; (80046a0 <xTaskIncrementTick+0x164>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d34e      	bcc.n	800464c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ae:	4b39      	ldr	r3, [pc, #228]	; (8004694 <xTaskIncrementTick+0x158>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <xTaskIncrementTick+0x80>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <xTaskIncrementTick+0x82>
 80045bc:	2300      	movs	r3, #0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d004      	beq.n	80045cc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045c2:	4b37      	ldr	r3, [pc, #220]	; (80046a0 <xTaskIncrementTick+0x164>)
 80045c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045c8:	601a      	str	r2, [r3, #0]
					break;
 80045ca:	e03f      	b.n	800464c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045cc:	4b31      	ldr	r3, [pc, #196]	; (8004694 <xTaskIncrementTick+0x158>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d203      	bcs.n	80045ec <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045e4:	4a2e      	ldr	r2, [pc, #184]	; (80046a0 <xTaskIncrementTick+0x164>)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6013      	str	r3, [r2, #0]
						break;
 80045ea:	e02f      	b.n	800464c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe ffc1 	bl	8003578 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	3318      	adds	r3, #24
 8004602:	4618      	mov	r0, r3
 8004604:	f7fe ffb8 	bl	8003578 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460c:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <xTaskIncrementTick+0x168>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d903      	bls.n	800461c <xTaskIncrementTick+0xe0>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	4a22      	ldr	r2, [pc, #136]	; (80046a4 <xTaskIncrementTick+0x168>)
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <xTaskIncrementTick+0x16c>)
 800462a:	441a      	add	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	3304      	adds	r3, #4
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f7fe ff45 	bl	80034c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <xTaskIncrementTick+0x170>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	429a      	cmp	r2, r3
 8004644:	d3b3      	bcc.n	80045ae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004646:	2301      	movs	r3, #1
 8004648:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800464a:	e7b0      	b.n	80045ae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800464c:	4b17      	ldr	r3, [pc, #92]	; (80046ac <xTaskIncrementTick+0x170>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004652:	4915      	ldr	r1, [pc, #84]	; (80046a8 <xTaskIncrementTick+0x16c>)
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d907      	bls.n	8004674 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004664:	2301      	movs	r3, #1
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	e004      	b.n	8004674 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800466a:	4b11      	ldr	r3, [pc, #68]	; (80046b0 <xTaskIncrementTick+0x174>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3301      	adds	r3, #1
 8004670:	4a0f      	ldr	r2, [pc, #60]	; (80046b0 <xTaskIncrementTick+0x174>)
 8004672:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <xTaskIncrementTick+0x178>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800467c:	2301      	movs	r3, #1
 800467e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004680:	697b      	ldr	r3, [r7, #20]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000e0c 	.word	0x20000e0c
 8004690:	20000de8 	.word	0x20000de8
 8004694:	20000d9c 	.word	0x20000d9c
 8004698:	20000da0 	.word	0x20000da0
 800469c:	20000dfc 	.word	0x20000dfc
 80046a0:	20000e04 	.word	0x20000e04
 80046a4:	20000dec 	.word	0x20000dec
 80046a8:	20000914 	.word	0x20000914
 80046ac:	20000910 	.word	0x20000910
 80046b0:	20000df4 	.word	0x20000df4
 80046b4:	20000df8 	.word	0x20000df8

080046b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046be:	4b27      	ldr	r3, [pc, #156]	; (800475c <vTaskSwitchContext+0xa4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046c6:	4b26      	ldr	r3, [pc, #152]	; (8004760 <vTaskSwitchContext+0xa8>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046cc:	e040      	b.n	8004750 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80046ce:	4b24      	ldr	r3, [pc, #144]	; (8004760 <vTaskSwitchContext+0xa8>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80046d4:	4b23      	ldr	r3, [pc, #140]	; (8004764 <vTaskSwitchContext+0xac>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	e00f      	b.n	80046fc <vTaskSwitchContext+0x44>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d109      	bne.n	80046f6 <vTaskSwitchContext+0x3e>
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	e7fe      	b.n	80046f4 <vTaskSwitchContext+0x3c>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	491a      	ldr	r1, [pc, #104]	; (8004768 <vTaskSwitchContext+0xb0>)
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4613      	mov	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0e5      	beq.n	80046dc <vTaskSwitchContext+0x24>
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4a13      	ldr	r2, [pc, #76]	; (8004768 <vTaskSwitchContext+0xb0>)
 800471c:	4413      	add	r3, r2
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	605a      	str	r2, [r3, #4]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	3308      	adds	r3, #8
 8004732:	429a      	cmp	r2, r3
 8004734:	d104      	bne.n	8004740 <vTaskSwitchContext+0x88>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	605a      	str	r2, [r3, #4]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	4a09      	ldr	r2, [pc, #36]	; (800476c <vTaskSwitchContext+0xb4>)
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	4a06      	ldr	r2, [pc, #24]	; (8004764 <vTaskSwitchContext+0xac>)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6013      	str	r3, [r2, #0]
}
 8004750:	bf00      	nop
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	20000e0c 	.word	0x20000e0c
 8004760:	20000df8 	.word	0x20000df8
 8004764:	20000dec 	.word	0x20000dec
 8004768:	20000914 	.word	0x20000914
 800476c:	20000910 	.word	0x20000910

08004770 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <vTaskPlaceOnEventList+0x24>
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	e7fe      	b.n	8004792 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004794:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <vTaskPlaceOnEventList+0x44>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3318      	adds	r3, #24
 800479a:	4619      	mov	r1, r3
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7fe feb3 	bl	8003508 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047a2:	2101      	movs	r1, #1
 80047a4:	6838      	ldr	r0, [r7, #0]
 80047a6:	f000 fa75 	bl	8004c94 <prvAddCurrentTaskToDelayedList>
}
 80047aa:	bf00      	nop
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000910 	.word	0x20000910

080047b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <vTaskPlaceOnEventListRestricted+0x26>
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	e7fe      	b.n	80047dc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <vTaskPlaceOnEventListRestricted+0x50>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3318      	adds	r3, #24
 80047e4:	4619      	mov	r1, r3
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f7fe fe6b 	bl	80034c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80047f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	68b8      	ldr	r0, [r7, #8]
 80047fc:	f000 fa4a 	bl	8004c94 <prvAddCurrentTaskToDelayedList>
	}
 8004800:	bf00      	nop
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000910 	.word	0x20000910

0800480c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <xTaskRemoveFromEventList+0x2a>
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	e7fe      	b.n	8004834 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	3318      	adds	r3, #24
 800483a:	4618      	mov	r0, r3
 800483c:	f7fe fe9c 	bl	8003578 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004840:	4b1d      	ldr	r3, [pc, #116]	; (80048b8 <xTaskRemoveFromEventList+0xac>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d11d      	bne.n	8004884 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	3304      	adds	r3, #4
 800484c:	4618      	mov	r0, r3
 800484e:	f7fe fe93 	bl	8003578 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004856:	4b19      	ldr	r3, [pc, #100]	; (80048bc <xTaskRemoveFromEventList+0xb0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d903      	bls.n	8004866 <xTaskRemoveFromEventList+0x5a>
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	4a16      	ldr	r2, [pc, #88]	; (80048bc <xTaskRemoveFromEventList+0xb0>)
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486a:	4613      	mov	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4a13      	ldr	r2, [pc, #76]	; (80048c0 <xTaskRemoveFromEventList+0xb4>)
 8004874:	441a      	add	r2, r3
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	3304      	adds	r3, #4
 800487a:	4619      	mov	r1, r3
 800487c:	4610      	mov	r0, r2
 800487e:	f7fe fe20 	bl	80034c2 <vListInsertEnd>
 8004882:	e005      	b.n	8004890 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	3318      	adds	r3, #24
 8004888:	4619      	mov	r1, r3
 800488a:	480e      	ldr	r0, [pc, #56]	; (80048c4 <xTaskRemoveFromEventList+0xb8>)
 800488c:	f7fe fe19 	bl	80034c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <xTaskRemoveFromEventList+0xbc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	429a      	cmp	r2, r3
 800489c:	d905      	bls.n	80048aa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800489e:	2301      	movs	r3, #1
 80048a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048a2:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <xTaskRemoveFromEventList+0xc0>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	e001      	b.n	80048ae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80048ae:	697b      	ldr	r3, [r7, #20]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000e0c 	.word	0x20000e0c
 80048bc:	20000dec 	.word	0x20000dec
 80048c0:	20000914 	.word	0x20000914
 80048c4:	20000da4 	.word	0x20000da4
 80048c8:	20000910 	.word	0x20000910
 80048cc:	20000df8 	.word	0x20000df8

080048d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <vTaskInternalSetTimeOutState+0x24>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <vTaskInternalSetTimeOutState+0x28>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	605a      	str	r2, [r3, #4]
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000dfc 	.word	0x20000dfc
 80048f8:	20000de8 	.word	0x20000de8

080048fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d109      	bne.n	8004920 <xTaskCheckForTimeOut+0x24>
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	e7fe      	b.n	800491e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <xTaskCheckForTimeOut+0x3e>
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	e7fe      	b.n	8004938 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800493a:	f000 fdf5 	bl	8005528 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800493e:	4b1d      	ldr	r3, [pc, #116]	; (80049b4 <xTaskCheckForTimeOut+0xb8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004956:	d102      	bne.n	800495e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004958:	2300      	movs	r3, #0
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	e023      	b.n	80049a6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <xTaskCheckForTimeOut+0xbc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d007      	beq.n	800497a <xTaskCheckForTimeOut+0x7e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	429a      	cmp	r2, r3
 8004972:	d302      	bcc.n	800497a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004974:	2301      	movs	r3, #1
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	e015      	b.n	80049a6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	429a      	cmp	r2, r3
 8004982:	d20b      	bcs.n	800499c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	1ad2      	subs	r2, r2, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ff9d 	bl	80048d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
 800499a:	e004      	b.n	80049a6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049a2:	2301      	movs	r3, #1
 80049a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049a6:	f000 fded 	bl	8005584 <vPortExitCritical>

	return xReturn;
 80049aa:	69fb      	ldr	r3, [r7, #28]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3720      	adds	r7, #32
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20000de8 	.word	0x20000de8
 80049b8:	20000dfc 	.word	0x20000dfc

080049bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049c0:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <vTaskMissedYield+0x14>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
}
 80049c6:	bf00      	nop
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	20000df8 	.word	0x20000df8

080049d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049dc:	f000 f852 	bl	8004a84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <prvIdleTask+0x28>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d9f9      	bls.n	80049dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <prvIdleTask+0x2c>)
 80049ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049f8:	e7f0      	b.n	80049dc <prvIdleTask+0x8>
 80049fa:	bf00      	nop
 80049fc:	20000914 	.word	0x20000914
 8004a00:	e000ed04 	.word	0xe000ed04

08004a04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	e00c      	b.n	8004a2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <prvInitialiseTaskLists+0x60>)
 8004a1c:	4413      	add	r3, r2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe fd24 	bl	800346c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3301      	adds	r3, #1
 8004a28:	607b      	str	r3, [r7, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b37      	cmp	r3, #55	; 0x37
 8004a2e:	d9ef      	bls.n	8004a10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a30:	480d      	ldr	r0, [pc, #52]	; (8004a68 <prvInitialiseTaskLists+0x64>)
 8004a32:	f7fe fd1b 	bl	800346c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a36:	480d      	ldr	r0, [pc, #52]	; (8004a6c <prvInitialiseTaskLists+0x68>)
 8004a38:	f7fe fd18 	bl	800346c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a3c:	480c      	ldr	r0, [pc, #48]	; (8004a70 <prvInitialiseTaskLists+0x6c>)
 8004a3e:	f7fe fd15 	bl	800346c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a42:	480c      	ldr	r0, [pc, #48]	; (8004a74 <prvInitialiseTaskLists+0x70>)
 8004a44:	f7fe fd12 	bl	800346c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a48:	480b      	ldr	r0, [pc, #44]	; (8004a78 <prvInitialiseTaskLists+0x74>)
 8004a4a:	f7fe fd0f 	bl	800346c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <prvInitialiseTaskLists+0x78>)
 8004a50:	4a05      	ldr	r2, [pc, #20]	; (8004a68 <prvInitialiseTaskLists+0x64>)
 8004a52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a54:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <prvInitialiseTaskLists+0x7c>)
 8004a56:	4a05      	ldr	r2, [pc, #20]	; (8004a6c <prvInitialiseTaskLists+0x68>)
 8004a58:	601a      	str	r2, [r3, #0]
}
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000914 	.word	0x20000914
 8004a68:	20000d74 	.word	0x20000d74
 8004a6c:	20000d88 	.word	0x20000d88
 8004a70:	20000da4 	.word	0x20000da4
 8004a74:	20000db8 	.word	0x20000db8
 8004a78:	20000dd0 	.word	0x20000dd0
 8004a7c:	20000d9c 	.word	0x20000d9c
 8004a80:	20000da0 	.word	0x20000da0

08004a84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a8a:	e019      	b.n	8004ac0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a8c:	f000 fd4c 	bl	8005528 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004a90:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <prvCheckTasksWaitingTermination+0x4c>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fe fd6b 	bl	8003578 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <prvCheckTasksWaitingTermination+0x50>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <prvCheckTasksWaitingTermination+0x50>)
 8004aaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <prvCheckTasksWaitingTermination+0x54>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	4a09      	ldr	r2, [pc, #36]	; (8004ad8 <prvCheckTasksWaitingTermination+0x54>)
 8004ab4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ab6:	f000 fd65 	bl	8005584 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f80e 	bl	8004adc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <prvCheckTasksWaitingTermination+0x54>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e1      	bne.n	8004a8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000db8 	.word	0x20000db8
 8004ad4:	20000de4 	.word	0x20000de4
 8004ad8:	20000dcc 	.word	0x20000dcc

08004adc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d108      	bne.n	8004b00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fed0 	bl	8005898 <vPortFree>
				vPortFree( pxTCB );
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fecd 	bl	8005898 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004afe:	e017      	b.n	8004b30 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d103      	bne.n	8004b12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fec4 	bl	8005898 <vPortFree>
	}
 8004b10:	e00e      	b.n	8004b30 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d009      	beq.n	8004b30 <prvDeleteTCB+0x54>
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	e7fe      	b.n	8004b2e <prvDeleteTCB+0x52>
	}
 8004b30:	bf00      	nop
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b3e:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <prvResetNextTaskUnblockTime+0x40>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <prvResetNextTaskUnblockTime+0x14>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <prvResetNextTaskUnblockTime+0x16>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d004      	beq.n	8004b5c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <prvResetNextTaskUnblockTime+0x44>)
 8004b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b58:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b5a:	e008      	b.n	8004b6e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b5c:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <prvResetNextTaskUnblockTime+0x40>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4a04      	ldr	r2, [pc, #16]	; (8004b7c <prvResetNextTaskUnblockTime+0x44>)
 8004b6c:	6013      	str	r3, [r2, #0]
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr
 8004b78:	20000d9c 	.word	0x20000d9c
 8004b7c:	20000e04 	.word	0x20000e04

08004b80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <xTaskGetSchedulerState+0x34>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	e008      	b.n	8004ba6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b94:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <xTaskGetSchedulerState+0x38>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	607b      	str	r3, [r7, #4]
 8004ba0:	e001      	b.n	8004ba6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ba6:	687b      	ldr	r3, [r7, #4]
	}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000df0 	.word	0x20000df0
 8004bb8:	20000e0c 	.word	0x20000e0c

08004bbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d054      	beq.n	8004c7c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bd2:	4b2d      	ldr	r3, [pc, #180]	; (8004c88 <xTaskPriorityDisinherit+0xcc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d009      	beq.n	8004bf0 <xTaskPriorityDisinherit+0x34>
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e7fe      	b.n	8004bee <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <xTaskPriorityDisinherit+0x50>
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	e7fe      	b.n	8004c0a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c10:	1e5a      	subs	r2, r3, #1
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d02c      	beq.n	8004c7c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d128      	bne.n	8004c7c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fe fca2 	bl	8003578 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4c:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <xTaskPriorityDisinherit+0xd0>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d903      	bls.n	8004c5c <xTaskPriorityDisinherit+0xa0>
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	4a0c      	ldr	r2, [pc, #48]	; (8004c8c <xTaskPriorityDisinherit+0xd0>)
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <xTaskPriorityDisinherit+0xd4>)
 8004c6a:	441a      	add	r2, r3
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f7fe fc25 	bl	80034c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c7c:	697b      	ldr	r3, [r7, #20]
	}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000910 	.word	0x20000910
 8004c8c:	20000dec 	.word	0x20000dec
 8004c90:	20000914 	.word	0x20000914

08004c94 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c9e:	4b21      	ldr	r3, [pc, #132]	; (8004d24 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ca4:	4b20      	ldr	r3, [pc, #128]	; (8004d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fe fc64 	bl	8003578 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cb6:	d10a      	bne.n	8004cce <prvAddCurrentTaskToDelayedList+0x3a>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cbe:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4819      	ldr	r0, [pc, #100]	; (8004d2c <prvAddCurrentTaskToDelayedList+0x98>)
 8004cc8:	f7fe fbfb 	bl	80034c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ccc:	e026      	b.n	8004d1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cd6:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d209      	bcs.n	8004cfa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ce6:	4b12      	ldr	r3, [pc, #72]	; (8004d30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f7fe fc08 	bl	8003508 <vListInsert>
}
 8004cf8:	e010      	b.n	8004d1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cfa:	4b0e      	ldr	r3, [pc, #56]	; (8004d34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f7fe fbfe 	bl	8003508 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d202      	bcs.n	8004d1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d16:	4a08      	ldr	r2, [pc, #32]	; (8004d38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	6013      	str	r3, [r2, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000de8 	.word	0x20000de8
 8004d28:	20000910 	.word	0x20000910
 8004d2c:	20000dd0 	.word	0x20000dd0
 8004d30:	20000da0 	.word	0x20000da0
 8004d34:	20000d9c 	.word	0x20000d9c
 8004d38:	20000e04 	.word	0x20000e04

08004d3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08a      	sub	sp, #40	; 0x28
 8004d40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d46:	f000 fac3 	bl	80052d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d4a:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <xTimerCreateTimerTask+0x80>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d021      	beq.n	8004d96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d5a:	1d3a      	adds	r2, r7, #4
 8004d5c:	f107 0108 	add.w	r1, r7, #8
 8004d60:	f107 030c 	add.w	r3, r7, #12
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fe fb67 	bl	8003438 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	9202      	str	r2, [sp, #8]
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	2302      	movs	r3, #2
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	460a      	mov	r2, r1
 8004d7c:	4910      	ldr	r1, [pc, #64]	; (8004dc0 <xTimerCreateTimerTask+0x84>)
 8004d7e:	4811      	ldr	r0, [pc, #68]	; (8004dc4 <xTimerCreateTimerTask+0x88>)
 8004d80:	f7ff f8f8 	bl	8003f74 <xTaskCreateStatic>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <xTimerCreateTimerTask+0x8c>)
 8004d88:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d8a:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <xTimerCreateTimerTask+0x8c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d92:	2301      	movs	r3, #1
 8004d94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <xTimerCreateTimerTask+0x74>
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	e7fe      	b.n	8004dae <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004db0:	697b      	ldr	r3, [r7, #20]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000e40 	.word	0x20000e40
 8004dc0:	08006b48 	.word	0x08006b48
 8004dc4:	08004ee5 	.word	0x08004ee5
 8004dc8:	20000e44 	.word	0x20000e44

08004dcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	; 0x28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d109      	bne.n	8004df8 <xTimerGenericCommand+0x2c>
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	623b      	str	r3, [r7, #32]
 8004df6:	e7fe      	b.n	8004df6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004df8:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <xTimerGenericCommand+0x94>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d02a      	beq.n	8004e56 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b05      	cmp	r3, #5
 8004e10:	dc18      	bgt.n	8004e44 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e12:	f7ff feb5 	bl	8004b80 <xTaskGetSchedulerState>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d109      	bne.n	8004e30 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e1c:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <xTimerGenericCommand+0x94>)
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	f107 0110 	add.w	r1, r7, #16
 8004e24:	2300      	movs	r3, #0
 8004e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e28:	f7fe fcce 	bl	80037c8 <xQueueGenericSend>
 8004e2c:	6278      	str	r0, [r7, #36]	; 0x24
 8004e2e:	e012      	b.n	8004e56 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <xTimerGenericCommand+0x94>)
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	f107 0110 	add.w	r1, r7, #16
 8004e38:	2300      	movs	r3, #0
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f7fe fcc4 	bl	80037c8 <xQueueGenericSend>
 8004e40:	6278      	str	r0, [r7, #36]	; 0x24
 8004e42:	e008      	b.n	8004e56 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <xTimerGenericCommand+0x94>)
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	f107 0110 	add.w	r1, r7, #16
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	f7fe fdb4 	bl	80039bc <xQueueGenericSendFromISR>
 8004e54:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3728      	adds	r7, #40	; 0x28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20000e40 	.word	0x20000e40

08004e64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e6e:	4b1c      	ldr	r3, [pc, #112]	; (8004ee0 <prvProcessExpiredTimer+0x7c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fe fb7b 	bl	8003578 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d121      	bne.n	8004ece <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	18d1      	adds	r1, r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	6978      	ldr	r0, [r7, #20]
 8004e98:	f000 f8c8 	bl	800502c <prvInsertTimerInActiveList>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d015      	beq.n	8004ece <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	2100      	movs	r1, #0
 8004eac:	6978      	ldr	r0, [r7, #20]
 8004eae:	f7ff ff8d 	bl	8004dcc <xTimerGenericCommand>
 8004eb2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <prvProcessExpiredTimer+0x6a>
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	e7fe      	b.n	8004ecc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	6978      	ldr	r0, [r7, #20]
 8004ed4:	4798      	blx	r3
}
 8004ed6:	bf00      	nop
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000e38 	.word	0x20000e38

08004ee4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004eec:	f107 0308 	add.w	r3, r7, #8
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 f857 	bl	8004fa4 <prvGetNextExpireTime>
 8004ef6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4619      	mov	r1, r3
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f803 	bl	8004f08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f02:	f000 f8d5 	bl	80050b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f06:	e7f1      	b.n	8004eec <prvTimerTask+0x8>

08004f08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f12:	f7ff fa5b 	bl	80043cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f16:	f107 0308 	add.w	r3, r7, #8
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 f866 	bl	8004fec <prvSampleTimeNow>
 8004f20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d130      	bne.n	8004f8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10a      	bne.n	8004f44 <prvProcessTimerOrBlockTask+0x3c>
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d806      	bhi.n	8004f44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f36:	f7ff fa57 	bl	80043e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f3a:	68f9      	ldr	r1, [r7, #12]
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ff91 	bl	8004e64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f42:	e024      	b.n	8004f8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f4a:	4b13      	ldr	r3, [pc, #76]	; (8004f98 <prvProcessTimerOrBlockTask+0x90>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bf0c      	ite	eq
 8004f54:	2301      	moveq	r3, #1
 8004f56:	2300      	movne	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f5c:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <prvProcessTimerOrBlockTask+0x94>)
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	f7fe ffcf 	bl	8003f0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f6e:	f7ff fa3b 	bl	80043e8 <xTaskResumeAll>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f78:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <prvProcessTimerOrBlockTask+0x98>)
 8004f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	f3bf 8f6f 	isb	sy
}
 8004f88:	e001      	b.n	8004f8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f8a:	f7ff fa2d 	bl	80043e8 <xTaskResumeAll>
}
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000e3c 	.word	0x20000e3c
 8004f9c:	20000e40 	.word	0x20000e40
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fac:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <prvGetNextExpireTime+0x44>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2301      	moveq	r3, #1
 8004fb8:	2300      	movne	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d105      	bne.n	8004fd6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fca:	4b07      	ldr	r3, [pc, #28]	; (8004fe8 <prvGetNextExpireTime+0x44>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	e001      	b.n	8004fda <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fda:	68fb      	ldr	r3, [r7, #12]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	20000e38 	.word	0x20000e38

08004fec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ff4:	f7ff fa94 	bl	8004520 <xTaskGetTickCount>
 8004ff8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <prvSampleTimeNow+0x3c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	429a      	cmp	r2, r3
 8005002:	d205      	bcs.n	8005010 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005004:	f000 f904 	bl	8005210 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e002      	b.n	8005016 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005016:	4a04      	ldr	r2, [pc, #16]	; (8005028 <prvSampleTimeNow+0x3c>)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800501c:	68fb      	ldr	r3, [r7, #12]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000e48 	.word	0x20000e48

0800502c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	429a      	cmp	r2, r3
 8005050:	d812      	bhi.n	8005078 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	1ad2      	subs	r2, r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	429a      	cmp	r2, r3
 800505e:	d302      	bcc.n	8005066 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005060:	2301      	movs	r3, #1
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	e01b      	b.n	800509e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005066:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <prvInsertTimerInActiveList+0x7c>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3304      	adds	r3, #4
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f7fe fa49 	bl	8003508 <vListInsert>
 8005076:	e012      	b.n	800509e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d206      	bcs.n	800508e <prvInsertTimerInActiveList+0x62>
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d302      	bcc.n	800508e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005088:	2301      	movs	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	e007      	b.n	800509e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800508e:	4b07      	ldr	r3, [pc, #28]	; (80050ac <prvInsertTimerInActiveList+0x80>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3304      	adds	r3, #4
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f7fe fa35 	bl	8003508 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800509e:	697b      	ldr	r3, [r7, #20]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	20000e3c 	.word	0x20000e3c
 80050ac:	20000e38 	.word	0x20000e38

080050b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08e      	sub	sp, #56	; 0x38
 80050b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050b6:	e099      	b.n	80051ec <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	da17      	bge.n	80050ee <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050be:	1d3b      	adds	r3, r7, #4
 80050c0:	3304      	adds	r3, #4
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <prvProcessReceivedCommands+0x2e>
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	61fb      	str	r3, [r7, #28]
 80050dc:	e7fe      	b.n	80050dc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e4:	6850      	ldr	r0, [r2, #4]
 80050e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e8:	6892      	ldr	r2, [r2, #8]
 80050ea:	4611      	mov	r1, r2
 80050ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	db7a      	blt.n	80051ea <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d004      	beq.n	800510a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	3304      	adds	r3, #4
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe fa37 	bl	8003578 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800510a:	463b      	mov	r3, r7
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff ff6d 	bl	8004fec <prvSampleTimeNow>
 8005112:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b09      	cmp	r3, #9
 8005118:	d868      	bhi.n	80051ec <prvProcessReceivedCommands+0x13c>
 800511a:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <prvProcessReceivedCommands+0x70>)
 800511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005120:	08005149 	.word	0x08005149
 8005124:	08005149 	.word	0x08005149
 8005128:	08005149 	.word	0x08005149
 800512c:	080051ed 	.word	0x080051ed
 8005130:	080051a3 	.word	0x080051a3
 8005134:	080051d9 	.word	0x080051d9
 8005138:	08005149 	.word	0x08005149
 800513c:	08005149 	.word	0x08005149
 8005140:	080051ed 	.word	0x080051ed
 8005144:	080051a3 	.word	0x080051a3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	18d1      	adds	r1, r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005156:	f7ff ff69 	bl	800502c <prvInsertTimerInActiveList>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d045      	beq.n	80051ec <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005166:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d13d      	bne.n	80051ec <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	441a      	add	r2, r3
 8005178:	2300      	movs	r3, #0
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	2300      	movs	r3, #0
 800517e:	2100      	movs	r1, #0
 8005180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005182:	f7ff fe23 	bl	8004dcc <xTimerGenericCommand>
 8005186:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d12e      	bne.n	80051ec <prvProcessReceivedCommands+0x13c>
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	e7fe      	b.n	80051a0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d109      	bne.n	80051c4 <prvProcessReceivedCommands+0x114>
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	e7fe      	b.n	80051c2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	699a      	ldr	r2, [r3, #24]
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	18d1      	adds	r1, r2, r3
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051d2:	f7ff ff2b 	bl	800502c <prvInsertTimerInActiveList>
					break;
 80051d6:	e009      	b.n	80051ec <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d104      	bne.n	80051ec <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80051e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051e4:	f000 fb58 	bl	8005898 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80051e8:	e000      	b.n	80051ec <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80051ea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051ec:	4b07      	ldr	r3, [pc, #28]	; (800520c <prvProcessReceivedCommands+0x15c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	1d39      	adds	r1, r7, #4
 80051f2:	2200      	movs	r2, #0
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fe fc75 	bl	8003ae4 <xQueueReceive>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f47f af5b 	bne.w	80050b8 <prvProcessReceivedCommands+0x8>
	}
}
 8005202:	bf00      	nop
 8005204:	3730      	adds	r7, #48	; 0x30
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20000e40 	.word	0x20000e40

08005210 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005216:	e044      	b.n	80052a2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005218:	4b2b      	ldr	r3, [pc, #172]	; (80052c8 <prvSwitchTimerLists+0xb8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005222:	4b29      	ldr	r3, [pc, #164]	; (80052c8 <prvSwitchTimerLists+0xb8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3304      	adds	r3, #4
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe f9a1 	bl	8003578 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d12d      	bne.n	80052a2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4413      	add	r3, r2
 800524e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	429a      	cmp	r2, r3
 8005256:	d90e      	bls.n	8005276 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005264:	4b18      	ldr	r3, [pc, #96]	; (80052c8 <prvSwitchTimerLists+0xb8>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3304      	adds	r3, #4
 800526c:	4619      	mov	r1, r3
 800526e:	4610      	mov	r0, r2
 8005270:	f7fe f94a 	bl	8003508 <vListInsert>
 8005274:	e015      	b.n	80052a2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005276:	2300      	movs	r3, #0
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	2300      	movs	r3, #0
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	2100      	movs	r1, #0
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f7ff fda3 	bl	8004dcc <xTimerGenericCommand>
 8005286:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <prvSwitchTimerLists+0x92>
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	e7fe      	b.n	80052a0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052a2:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <prvSwitchTimerLists+0xb8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1b5      	bne.n	8005218 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052ac:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <prvSwitchTimerLists+0xb8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052b2:	4b06      	ldr	r3, [pc, #24]	; (80052cc <prvSwitchTimerLists+0xbc>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a04      	ldr	r2, [pc, #16]	; (80052c8 <prvSwitchTimerLists+0xb8>)
 80052b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80052ba:	4a04      	ldr	r2, [pc, #16]	; (80052cc <prvSwitchTimerLists+0xbc>)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	6013      	str	r3, [r2, #0]
}
 80052c0:	bf00      	nop
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000e38 	.word	0x20000e38
 80052cc:	20000e3c 	.word	0x20000e3c

080052d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80052d6:	f000 f927 	bl	8005528 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80052da:	4b15      	ldr	r3, [pc, #84]	; (8005330 <prvCheckForValidListAndQueue+0x60>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d120      	bne.n	8005324 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80052e2:	4814      	ldr	r0, [pc, #80]	; (8005334 <prvCheckForValidListAndQueue+0x64>)
 80052e4:	f7fe f8c2 	bl	800346c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80052e8:	4813      	ldr	r0, [pc, #76]	; (8005338 <prvCheckForValidListAndQueue+0x68>)
 80052ea:	f7fe f8bf 	bl	800346c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80052ee:	4b13      	ldr	r3, [pc, #76]	; (800533c <prvCheckForValidListAndQueue+0x6c>)
 80052f0:	4a10      	ldr	r2, [pc, #64]	; (8005334 <prvCheckForValidListAndQueue+0x64>)
 80052f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80052f4:	4b12      	ldr	r3, [pc, #72]	; (8005340 <prvCheckForValidListAndQueue+0x70>)
 80052f6:	4a10      	ldr	r2, [pc, #64]	; (8005338 <prvCheckForValidListAndQueue+0x68>)
 80052f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80052fa:	2300      	movs	r3, #0
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	4b11      	ldr	r3, [pc, #68]	; (8005344 <prvCheckForValidListAndQueue+0x74>)
 8005300:	4a11      	ldr	r2, [pc, #68]	; (8005348 <prvCheckForValidListAndQueue+0x78>)
 8005302:	2110      	movs	r1, #16
 8005304:	200a      	movs	r0, #10
 8005306:	f7fe f9c9 	bl	800369c <xQueueGenericCreateStatic>
 800530a:	4602      	mov	r2, r0
 800530c:	4b08      	ldr	r3, [pc, #32]	; (8005330 <prvCheckForValidListAndQueue+0x60>)
 800530e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005310:	4b07      	ldr	r3, [pc, #28]	; (8005330 <prvCheckForValidListAndQueue+0x60>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005318:	4b05      	ldr	r3, [pc, #20]	; (8005330 <prvCheckForValidListAndQueue+0x60>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	490b      	ldr	r1, [pc, #44]	; (800534c <prvCheckForValidListAndQueue+0x7c>)
 800531e:	4618      	mov	r0, r3
 8005320:	f7fe fdcc 	bl	8003ebc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005324:	f000 f92e 	bl	8005584 <vPortExitCritical>
}
 8005328:	bf00      	nop
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20000e40 	.word	0x20000e40
 8005334:	20000e10 	.word	0x20000e10
 8005338:	20000e24 	.word	0x20000e24
 800533c:	20000e38 	.word	0x20000e38
 8005340:	20000e3c 	.word	0x20000e3c
 8005344:	20000eec 	.word	0x20000eec
 8005348:	20000e4c 	.word	0x20000e4c
 800534c:	08006b50 	.word	0x08006b50

08005350 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3b04      	subs	r3, #4
 8005360:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3b04      	subs	r3, #4
 800536e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f023 0201 	bic.w	r2, r3, #1
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3b04      	subs	r3, #4
 800537e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005380:	4a08      	ldr	r2, [pc, #32]	; (80053a4 <pxPortInitialiseStack+0x54>)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3b14      	subs	r3, #20
 800538a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3b20      	subs	r3, #32
 8005396:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005398:	68fb      	ldr	r3, [r7, #12]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr
 80053a4:	080053a9 	.word	0x080053a9

080053a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053b2:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <prvTaskExitError+0x4c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ba:	d009      	beq.n	80053d0 <prvTaskExitError+0x28>
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	e7fe      	b.n	80053ce <prvTaskExitError+0x26>
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053e2:	bf00      	nop
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0fc      	beq.n	80053e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr
 80053f4:	20000020 	.word	0x20000020
	...

08005400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <pxCurrentTCBConst2>)
 8005402:	6819      	ldr	r1, [r3, #0]
 8005404:	6808      	ldr	r0, [r1, #0]
 8005406:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800540a:	f380 8809 	msr	PSP, r0
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f380 8811 	msr	BASEPRI, r0
 800541a:	f04e 0e0d 	orr.w	lr, lr, #13
 800541e:	4770      	bx	lr

08005420 <pxCurrentTCBConst2>:
 8005420:	20000910 	.word	0x20000910
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop

08005428 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005428:	4806      	ldr	r0, [pc, #24]	; (8005444 <prvPortStartFirstTask+0x1c>)
 800542a:	6800      	ldr	r0, [r0, #0]
 800542c:	6800      	ldr	r0, [r0, #0]
 800542e:	f380 8808 	msr	MSP, r0
 8005432:	b662      	cpsie	i
 8005434:	b661      	cpsie	f
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	df00      	svc	0
 8005440:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005442:	bf00      	nop
 8005444:	e000ed08 	.word	0xe000ed08

08005448 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800544e:	4b31      	ldr	r3, [pc, #196]	; (8005514 <xPortStartScheduler+0xcc>)
 8005450:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	22ff      	movs	r2, #255	; 0xff
 800545e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005470:	b2da      	uxtb	r2, r3
 8005472:	4b29      	ldr	r3, [pc, #164]	; (8005518 <xPortStartScheduler+0xd0>)
 8005474:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005476:	4b29      	ldr	r3, [pc, #164]	; (800551c <xPortStartScheduler+0xd4>)
 8005478:	2207      	movs	r2, #7
 800547a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800547c:	e009      	b.n	8005492 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800547e:	4b27      	ldr	r3, [pc, #156]	; (800551c <xPortStartScheduler+0xd4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3b01      	subs	r3, #1
 8005484:	4a25      	ldr	r2, [pc, #148]	; (800551c <xPortStartScheduler+0xd4>)
 8005486:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	b2db      	uxtb	r3, r3
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	b2db      	uxtb	r3, r3
 8005490:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	b2db      	uxtb	r3, r3
 8005496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549a:	2b80      	cmp	r3, #128	; 0x80
 800549c:	d0ef      	beq.n	800547e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800549e:	4b1f      	ldr	r3, [pc, #124]	; (800551c <xPortStartScheduler+0xd4>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f1c3 0307 	rsb	r3, r3, #7
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d009      	beq.n	80054be <xPortStartScheduler+0x76>
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	60bb      	str	r3, [r7, #8]
 80054bc:	e7fe      	b.n	80054bc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054be:	4b17      	ldr	r3, [pc, #92]	; (800551c <xPortStartScheduler+0xd4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	4a15      	ldr	r2, [pc, #84]	; (800551c <xPortStartScheduler+0xd4>)
 80054c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054c8:	4b14      	ldr	r3, [pc, #80]	; (800551c <xPortStartScheduler+0xd4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054d0:	4a12      	ldr	r2, [pc, #72]	; (800551c <xPortStartScheduler+0xd4>)
 80054d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054dc:	4b10      	ldr	r3, [pc, #64]	; (8005520 <xPortStartScheduler+0xd8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a0f      	ldr	r2, [pc, #60]	; (8005520 <xPortStartScheduler+0xd8>)
 80054e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054e8:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <xPortStartScheduler+0xd8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a0c      	ldr	r2, [pc, #48]	; (8005520 <xPortStartScheduler+0xd8>)
 80054ee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054f4:	f000 f8b0 	bl	8005658 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <xPortStartScheduler+0xdc>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054fe:	f7ff ff93 	bl	8005428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005502:	f7ff f8d9 	bl	80046b8 <vTaskSwitchContext>
	prvTaskExitError();
 8005506:	f7ff ff4f 	bl	80053a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	e000e400 	.word	0xe000e400
 8005518:	20000f3c 	.word	0x20000f3c
 800551c:	20000f40 	.word	0x20000f40
 8005520:	e000ed20 	.word	0xe000ed20
 8005524:	20000020 	.word	0x20000020

08005528 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005540:	4b0e      	ldr	r3, [pc, #56]	; (800557c <vPortEnterCritical+0x54>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3301      	adds	r3, #1
 8005546:	4a0d      	ldr	r2, [pc, #52]	; (800557c <vPortEnterCritical+0x54>)
 8005548:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800554a:	4b0c      	ldr	r3, [pc, #48]	; (800557c <vPortEnterCritical+0x54>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d10e      	bne.n	8005570 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005552:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <vPortEnterCritical+0x58>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d009      	beq.n	8005570 <vPortEnterCritical+0x48>
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	e7fe      	b.n	800556e <vPortEnterCritical+0x46>
	}
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	bc80      	pop	{r7}
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000020 	.word	0x20000020
 8005580:	e000ed04 	.word	0xe000ed04

08005584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800558a:	4b10      	ldr	r3, [pc, #64]	; (80055cc <vPortExitCritical+0x48>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d109      	bne.n	80055a6 <vPortExitCritical+0x22>
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	607b      	str	r3, [r7, #4]
 80055a4:	e7fe      	b.n	80055a4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80055a6:	4b09      	ldr	r3, [pc, #36]	; (80055cc <vPortExitCritical+0x48>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	4a07      	ldr	r2, [pc, #28]	; (80055cc <vPortExitCritical+0x48>)
 80055ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055b0:	4b06      	ldr	r3, [pc, #24]	; (80055cc <vPortExitCritical+0x48>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d104      	bne.n	80055c2 <vPortExitCritical+0x3e>
 80055b8:	2300      	movs	r3, #0
 80055ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr
 80055cc:	20000020 	.word	0x20000020

080055d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055d0:	f3ef 8009 	mrs	r0, PSP
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <pxCurrentTCBConst>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055e0:	6010      	str	r0, [r2, #0]
 80055e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80055e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055ea:	f380 8811 	msr	BASEPRI, r0
 80055ee:	f7ff f863 	bl	80046b8 <vTaskSwitchContext>
 80055f2:	f04f 0000 	mov.w	r0, #0
 80055f6:	f380 8811 	msr	BASEPRI, r0
 80055fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80055fe:	6819      	ldr	r1, [r3, #0]
 8005600:	6808      	ldr	r0, [r1, #0]
 8005602:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005606:	f380 8809 	msr	PSP, r0
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	4770      	bx	lr

08005610 <pxCurrentTCBConst>:
 8005610:	20000910 	.word	0x20000910
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop

08005618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005630:	f7fe ff84 	bl	800453c <xTaskIncrementTick>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800563a:	4b06      	ldr	r3, [pc, #24]	; (8005654 <SysTick_Handler+0x3c>)
 800563c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	2300      	movs	r3, #0
 8005644:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800564c:	bf00      	nop
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800565c:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <vPortSetupTimerInterrupt+0x30>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005662:	4b0a      	ldr	r3, [pc, #40]	; (800568c <vPortSetupTimerInterrupt+0x34>)
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005668:	4b09      	ldr	r3, [pc, #36]	; (8005690 <vPortSetupTimerInterrupt+0x38>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a09      	ldr	r2, [pc, #36]	; (8005694 <vPortSetupTimerInterrupt+0x3c>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	099b      	lsrs	r3, r3, #6
 8005674:	4a08      	ldr	r2, [pc, #32]	; (8005698 <vPortSetupTimerInterrupt+0x40>)
 8005676:	3b01      	subs	r3, #1
 8005678:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800567a:	4b03      	ldr	r3, [pc, #12]	; (8005688 <vPortSetupTimerInterrupt+0x30>)
 800567c:	2207      	movs	r2, #7
 800567e:	601a      	str	r2, [r3, #0]
}
 8005680:	bf00      	nop
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr
 8005688:	e000e010 	.word	0xe000e010
 800568c:	e000e018 	.word	0xe000e018
 8005690:	20000014 	.word	0x20000014
 8005694:	10624dd3 	.word	0x10624dd3
 8005698:	e000e014 	.word	0xe000e014

0800569c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056a2:	f3ef 8305 	mrs	r3, IPSR
 80056a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b0f      	cmp	r3, #15
 80056ac:	d913      	bls.n	80056d6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056ae:	4a15      	ldr	r2, [pc, #84]	; (8005704 <vPortValidateInterruptPriority+0x68>)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056b8:	4b13      	ldr	r3, [pc, #76]	; (8005708 <vPortValidateInterruptPriority+0x6c>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	7afa      	ldrb	r2, [r7, #11]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d209      	bcs.n	80056d6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	607b      	str	r3, [r7, #4]
 80056d4:	e7fe      	b.n	80056d4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056d6:	4b0d      	ldr	r3, [pc, #52]	; (800570c <vPortValidateInterruptPriority+0x70>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056de:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <vPortValidateInterruptPriority+0x74>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d909      	bls.n	80056fa <vPortValidateInterruptPriority+0x5e>
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	603b      	str	r3, [r7, #0]
 80056f8:	e7fe      	b.n	80056f8 <vPortValidateInterruptPriority+0x5c>
	}
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	e000e3f0 	.word	0xe000e3f0
 8005708:	20000f3c 	.word	0x20000f3c
 800570c:	e000ed0c 	.word	0xe000ed0c
 8005710:	20000f40 	.word	0x20000f40

08005714 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08a      	sub	sp, #40	; 0x28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800571c:	2300      	movs	r3, #0
 800571e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005720:	f7fe fe54 	bl	80043cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005724:	4b57      	ldr	r3, [pc, #348]	; (8005884 <pvPortMalloc+0x170>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800572c:	f000 f90c 	bl	8005948 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005730:	4b55      	ldr	r3, [pc, #340]	; (8005888 <pvPortMalloc+0x174>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4013      	ands	r3, r2
 8005738:	2b00      	cmp	r3, #0
 800573a:	f040 808c 	bne.w	8005856 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01c      	beq.n	800577e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005744:	2208      	movs	r2, #8
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4413      	add	r3, r2
 800574a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	2b00      	cmp	r3, #0
 8005754:	d013      	beq.n	800577e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f023 0307 	bic.w	r3, r3, #7
 800575c:	3308      	adds	r3, #8
 800575e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	2b00      	cmp	r3, #0
 8005768:	d009      	beq.n	800577e <pvPortMalloc+0x6a>
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	e7fe      	b.n	800577c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d068      	beq.n	8005856 <pvPortMalloc+0x142>
 8005784:	4b41      	ldr	r3, [pc, #260]	; (800588c <pvPortMalloc+0x178>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	429a      	cmp	r2, r3
 800578c:	d863      	bhi.n	8005856 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800578e:	4b40      	ldr	r3, [pc, #256]	; (8005890 <pvPortMalloc+0x17c>)
 8005790:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005792:	4b3f      	ldr	r3, [pc, #252]	; (8005890 <pvPortMalloc+0x17c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005798:	e004      	b.n	80057a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d903      	bls.n	80057b6 <pvPortMalloc+0xa2>
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f1      	bne.n	800579a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057b6:	4b33      	ldr	r3, [pc, #204]	; (8005884 <pvPortMalloc+0x170>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057bc:	429a      	cmp	r2, r3
 80057be:	d04a      	beq.n	8005856 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2208      	movs	r2, #8
 80057c6:	4413      	add	r3, r2
 80057c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	1ad2      	subs	r2, r2, r3
 80057da:	2308      	movs	r3, #8
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	429a      	cmp	r2, r3
 80057e0:	d91e      	bls.n	8005820 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4413      	add	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d009      	beq.n	8005808 <pvPortMalloc+0xf4>
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	e7fe      	b.n	8005806 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	1ad2      	subs	r2, r2, r3
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800581a:	69b8      	ldr	r0, [r7, #24]
 800581c:	f000 f8f6 	bl	8005a0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005820:	4b1a      	ldr	r3, [pc, #104]	; (800588c <pvPortMalloc+0x178>)
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	4a18      	ldr	r2, [pc, #96]	; (800588c <pvPortMalloc+0x178>)
 800582c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800582e:	4b17      	ldr	r3, [pc, #92]	; (800588c <pvPortMalloc+0x178>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b18      	ldr	r3, [pc, #96]	; (8005894 <pvPortMalloc+0x180>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d203      	bcs.n	8005842 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800583a:	4b14      	ldr	r3, [pc, #80]	; (800588c <pvPortMalloc+0x178>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a15      	ldr	r2, [pc, #84]	; (8005894 <pvPortMalloc+0x180>)
 8005840:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	4b10      	ldr	r3, [pc, #64]	; (8005888 <pvPortMalloc+0x174>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	431a      	orrs	r2, r3
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005856:	f7fe fdc7 	bl	80043e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	2b00      	cmp	r3, #0
 8005862:	d009      	beq.n	8005878 <pvPortMalloc+0x164>
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	e7fe      	b.n	8005876 <pvPortMalloc+0x162>
	return pvReturn;
 8005878:	69fb      	ldr	r3, [r7, #28]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3728      	adds	r7, #40	; 0x28
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20001b4c 	.word	0x20001b4c
 8005888:	20001b58 	.word	0x20001b58
 800588c:	20001b50 	.word	0x20001b50
 8005890:	20001b44 	.word	0x20001b44
 8005894:	20001b54 	.word	0x20001b54

08005898 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d046      	beq.n	8005938 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058aa:	2308      	movs	r3, #8
 80058ac:	425b      	negs	r3, r3
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4413      	add	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	4b20      	ldr	r3, [pc, #128]	; (8005940 <vPortFree+0xa8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4013      	ands	r3, r2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d109      	bne.n	80058da <vPortFree+0x42>
 80058c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	e7fe      	b.n	80058d8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d009      	beq.n	80058f6 <vPortFree+0x5e>
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	60bb      	str	r3, [r7, #8]
 80058f4:	e7fe      	b.n	80058f4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <vPortFree+0xa8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4013      	ands	r3, r2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d019      	beq.n	8005938 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d115      	bne.n	8005938 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <vPortFree+0xa8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	43db      	mvns	r3, r3
 8005916:	401a      	ands	r2, r3
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800591c:	f7fe fd56 	bl	80043cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	4b07      	ldr	r3, [pc, #28]	; (8005944 <vPortFree+0xac>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4413      	add	r3, r2
 800592a:	4a06      	ldr	r2, [pc, #24]	; (8005944 <vPortFree+0xac>)
 800592c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800592e:	6938      	ldr	r0, [r7, #16]
 8005930:	f000 f86c 	bl	8005a0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005934:	f7fe fd58 	bl	80043e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005938:	bf00      	nop
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	20001b58 	.word	0x20001b58
 8005944:	20001b50 	.word	0x20001b50

08005948 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800594e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005952:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005954:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <prvHeapInit+0xac>)
 8005956:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00c      	beq.n	800597c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3307      	adds	r3, #7
 8005966:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0307 	bic.w	r3, r3, #7
 800596e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	4a1f      	ldr	r2, [pc, #124]	; (80059f4 <prvHeapInit+0xac>)
 8005978:	4413      	add	r3, r2
 800597a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005980:	4a1d      	ldr	r2, [pc, #116]	; (80059f8 <prvHeapInit+0xb0>)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005986:	4b1c      	ldr	r3, [pc, #112]	; (80059f8 <prvHeapInit+0xb0>)
 8005988:	2200      	movs	r2, #0
 800598a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	4413      	add	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005994:	2208      	movs	r2, #8
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1a9b      	subs	r3, r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0307 	bic.w	r3, r3, #7
 80059a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4a15      	ldr	r2, [pc, #84]	; (80059fc <prvHeapInit+0xb4>)
 80059a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059aa:	4b14      	ldr	r3, [pc, #80]	; (80059fc <prvHeapInit+0xb4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2200      	movs	r2, #0
 80059b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059b2:	4b12      	ldr	r3, [pc, #72]	; (80059fc <prvHeapInit+0xb4>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	1ad2      	subs	r2, r2, r3
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059c8:	4b0c      	ldr	r3, [pc, #48]	; (80059fc <prvHeapInit+0xb4>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	4a0a      	ldr	r2, [pc, #40]	; (8005a00 <prvHeapInit+0xb8>)
 80059d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <prvHeapInit+0xbc>)
 80059de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059e0:	4b09      	ldr	r3, [pc, #36]	; (8005a08 <prvHeapInit+0xc0>)
 80059e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059e6:	601a      	str	r2, [r3, #0]
}
 80059e8:	bf00      	nop
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	20000f44 	.word	0x20000f44
 80059f8:	20001b44 	.word	0x20001b44
 80059fc:	20001b4c 	.word	0x20001b4c
 8005a00:	20001b54 	.word	0x20001b54
 8005a04:	20001b50 	.word	0x20001b50
 8005a08:	20001b58 	.word	0x20001b58

08005a0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a14:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <prvInsertBlockIntoFreeList+0xa8>)
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	e002      	b.n	8005a20 <prvInsertBlockIntoFreeList+0x14>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d8f7      	bhi.n	8005a1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	4413      	add	r3, r2
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d108      	bne.n	8005a4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	441a      	add	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	441a      	add	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d118      	bne.n	8005a94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <prvInsertBlockIntoFreeList+0xac>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d00d      	beq.n	8005a8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	441a      	add	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e008      	b.n	8005a9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a8a:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <prvInsertBlockIntoFreeList+0xac>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	e003      	b.n	8005a9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d002      	beq.n	8005aaa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr
 8005ab4:	20001b44 	.word	0x20001b44
 8005ab8:	20001b4c 	.word	0x20001b4c

08005abc <atoi>:
 8005abc:	220a      	movs	r2, #10
 8005abe:	2100      	movs	r1, #0
 8005ac0:	f000 b8d2 	b.w	8005c68 <strtol>

08005ac4 <__errno>:
 8005ac4:	4b01      	ldr	r3, [pc, #4]	; (8005acc <__errno+0x8>)
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000024 	.word	0x20000024

08005ad0 <__libc_init_array>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	2500      	movs	r5, #0
 8005ad4:	4e0c      	ldr	r6, [pc, #48]	; (8005b08 <__libc_init_array+0x38>)
 8005ad6:	4c0d      	ldr	r4, [pc, #52]	; (8005b0c <__libc_init_array+0x3c>)
 8005ad8:	1ba4      	subs	r4, r4, r6
 8005ada:	10a4      	asrs	r4, r4, #2
 8005adc:	42a5      	cmp	r5, r4
 8005ade:	d109      	bne.n	8005af4 <__libc_init_array+0x24>
 8005ae0:	f000 ffd2 	bl	8006a88 <_init>
 8005ae4:	2500      	movs	r5, #0
 8005ae6:	4e0a      	ldr	r6, [pc, #40]	; (8005b10 <__libc_init_array+0x40>)
 8005ae8:	4c0a      	ldr	r4, [pc, #40]	; (8005b14 <__libc_init_array+0x44>)
 8005aea:	1ba4      	subs	r4, r4, r6
 8005aec:	10a4      	asrs	r4, r4, #2
 8005aee:	42a5      	cmp	r5, r4
 8005af0:	d105      	bne.n	8005afe <__libc_init_array+0x2e>
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005af8:	4798      	blx	r3
 8005afa:	3501      	adds	r5, #1
 8005afc:	e7ee      	b.n	8005adc <__libc_init_array+0xc>
 8005afe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b02:	4798      	blx	r3
 8005b04:	3501      	adds	r5, #1
 8005b06:	e7f2      	b.n	8005aee <__libc_init_array+0x1e>
 8005b08:	08006d80 	.word	0x08006d80
 8005b0c:	08006d80 	.word	0x08006d80
 8005b10:	08006d80 	.word	0x08006d80
 8005b14:	08006d84 	.word	0x08006d84

08005b18 <memcpy>:
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	1e43      	subs	r3, r0, #1
 8005b1c:	440a      	add	r2, r1
 8005b1e:	4291      	cmp	r1, r2
 8005b20:	d100      	bne.n	8005b24 <memcpy+0xc>
 8005b22:	bd10      	pop	{r4, pc}
 8005b24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b2c:	e7f7      	b.n	8005b1e <memcpy+0x6>

08005b2e <memset>:
 8005b2e:	4603      	mov	r3, r0
 8005b30:	4402      	add	r2, r0
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d100      	bne.n	8005b38 <memset+0xa>
 8005b36:	4770      	bx	lr
 8005b38:	f803 1b01 	strb.w	r1, [r3], #1
 8005b3c:	e7f9      	b.n	8005b32 <memset+0x4>
	...

08005b40 <iprintf>:
 8005b40:	b40f      	push	{r0, r1, r2, r3}
 8005b42:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <iprintf+0x2c>)
 8005b44:	b513      	push	{r0, r1, r4, lr}
 8005b46:	681c      	ldr	r4, [r3, #0]
 8005b48:	b124      	cbz	r4, 8005b54 <iprintf+0x14>
 8005b4a:	69a3      	ldr	r3, [r4, #24]
 8005b4c:	b913      	cbnz	r3, 8005b54 <iprintf+0x14>
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f000 f8e0 	bl	8005d14 <__sinit>
 8005b54:	ab05      	add	r3, sp, #20
 8005b56:	9a04      	ldr	r2, [sp, #16]
 8005b58:	68a1      	ldr	r1, [r4, #8]
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	9301      	str	r3, [sp, #4]
 8005b5e:	f000 f9fb 	bl	8005f58 <_vfiprintf_r>
 8005b62:	b002      	add	sp, #8
 8005b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b68:	b004      	add	sp, #16
 8005b6a:	4770      	bx	lr
 8005b6c:	20000024 	.word	0x20000024

08005b70 <_strtol_l.isra.0>:
 8005b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	4680      	mov	r8, r0
 8005b76:	4689      	mov	r9, r1
 8005b78:	4692      	mov	sl, r2
 8005b7a:	461e      	mov	r6, r3
 8005b7c:	460f      	mov	r7, r1
 8005b7e:	463d      	mov	r5, r7
 8005b80:	9808      	ldr	r0, [sp, #32]
 8005b82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b86:	f000 f94f 	bl	8005e28 <__locale_ctype_ptr_l>
 8005b8a:	4420      	add	r0, r4
 8005b8c:	7843      	ldrb	r3, [r0, #1]
 8005b8e:	f013 0308 	ands.w	r3, r3, #8
 8005b92:	d132      	bne.n	8005bfa <_strtol_l.isra.0+0x8a>
 8005b94:	2c2d      	cmp	r4, #45	; 0x2d
 8005b96:	d132      	bne.n	8005bfe <_strtol_l.isra.0+0x8e>
 8005b98:	2201      	movs	r2, #1
 8005b9a:	787c      	ldrb	r4, [r7, #1]
 8005b9c:	1cbd      	adds	r5, r7, #2
 8005b9e:	2e00      	cmp	r6, #0
 8005ba0:	d05d      	beq.n	8005c5e <_strtol_l.isra.0+0xee>
 8005ba2:	2e10      	cmp	r6, #16
 8005ba4:	d109      	bne.n	8005bba <_strtol_l.isra.0+0x4a>
 8005ba6:	2c30      	cmp	r4, #48	; 0x30
 8005ba8:	d107      	bne.n	8005bba <_strtol_l.isra.0+0x4a>
 8005baa:	782b      	ldrb	r3, [r5, #0]
 8005bac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005bb0:	2b58      	cmp	r3, #88	; 0x58
 8005bb2:	d14f      	bne.n	8005c54 <_strtol_l.isra.0+0xe4>
 8005bb4:	2610      	movs	r6, #16
 8005bb6:	786c      	ldrb	r4, [r5, #1]
 8005bb8:	3502      	adds	r5, #2
 8005bba:	2a00      	cmp	r2, #0
 8005bbc:	bf14      	ite	ne
 8005bbe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005bc2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005bc6:	2700      	movs	r7, #0
 8005bc8:	fbb1 fcf6 	udiv	ip, r1, r6
 8005bcc:	4638      	mov	r0, r7
 8005bce:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005bd2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005bd6:	2b09      	cmp	r3, #9
 8005bd8:	d817      	bhi.n	8005c0a <_strtol_l.isra.0+0x9a>
 8005bda:	461c      	mov	r4, r3
 8005bdc:	42a6      	cmp	r6, r4
 8005bde:	dd23      	ble.n	8005c28 <_strtol_l.isra.0+0xb8>
 8005be0:	1c7b      	adds	r3, r7, #1
 8005be2:	d007      	beq.n	8005bf4 <_strtol_l.isra.0+0x84>
 8005be4:	4584      	cmp	ip, r0
 8005be6:	d31c      	bcc.n	8005c22 <_strtol_l.isra.0+0xb2>
 8005be8:	d101      	bne.n	8005bee <_strtol_l.isra.0+0x7e>
 8005bea:	45a6      	cmp	lr, r4
 8005bec:	db19      	blt.n	8005c22 <_strtol_l.isra.0+0xb2>
 8005bee:	2701      	movs	r7, #1
 8005bf0:	fb00 4006 	mla	r0, r0, r6, r4
 8005bf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bf8:	e7eb      	b.n	8005bd2 <_strtol_l.isra.0+0x62>
 8005bfa:	462f      	mov	r7, r5
 8005bfc:	e7bf      	b.n	8005b7e <_strtol_l.isra.0+0xe>
 8005bfe:	2c2b      	cmp	r4, #43	; 0x2b
 8005c00:	bf04      	itt	eq
 8005c02:	1cbd      	addeq	r5, r7, #2
 8005c04:	787c      	ldrbeq	r4, [r7, #1]
 8005c06:	461a      	mov	r2, r3
 8005c08:	e7c9      	b.n	8005b9e <_strtol_l.isra.0+0x2e>
 8005c0a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005c0e:	2b19      	cmp	r3, #25
 8005c10:	d801      	bhi.n	8005c16 <_strtol_l.isra.0+0xa6>
 8005c12:	3c37      	subs	r4, #55	; 0x37
 8005c14:	e7e2      	b.n	8005bdc <_strtol_l.isra.0+0x6c>
 8005c16:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005c1a:	2b19      	cmp	r3, #25
 8005c1c:	d804      	bhi.n	8005c28 <_strtol_l.isra.0+0xb8>
 8005c1e:	3c57      	subs	r4, #87	; 0x57
 8005c20:	e7dc      	b.n	8005bdc <_strtol_l.isra.0+0x6c>
 8005c22:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005c26:	e7e5      	b.n	8005bf4 <_strtol_l.isra.0+0x84>
 8005c28:	1c7b      	adds	r3, r7, #1
 8005c2a:	d108      	bne.n	8005c3e <_strtol_l.isra.0+0xce>
 8005c2c:	2322      	movs	r3, #34	; 0x22
 8005c2e:	4608      	mov	r0, r1
 8005c30:	f8c8 3000 	str.w	r3, [r8]
 8005c34:	f1ba 0f00 	cmp.w	sl, #0
 8005c38:	d107      	bne.n	8005c4a <_strtol_l.isra.0+0xda>
 8005c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3e:	b102      	cbz	r2, 8005c42 <_strtol_l.isra.0+0xd2>
 8005c40:	4240      	negs	r0, r0
 8005c42:	f1ba 0f00 	cmp.w	sl, #0
 8005c46:	d0f8      	beq.n	8005c3a <_strtol_l.isra.0+0xca>
 8005c48:	b10f      	cbz	r7, 8005c4e <_strtol_l.isra.0+0xde>
 8005c4a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005c4e:	f8ca 9000 	str.w	r9, [sl]
 8005c52:	e7f2      	b.n	8005c3a <_strtol_l.isra.0+0xca>
 8005c54:	2430      	movs	r4, #48	; 0x30
 8005c56:	2e00      	cmp	r6, #0
 8005c58:	d1af      	bne.n	8005bba <_strtol_l.isra.0+0x4a>
 8005c5a:	2608      	movs	r6, #8
 8005c5c:	e7ad      	b.n	8005bba <_strtol_l.isra.0+0x4a>
 8005c5e:	2c30      	cmp	r4, #48	; 0x30
 8005c60:	d0a3      	beq.n	8005baa <_strtol_l.isra.0+0x3a>
 8005c62:	260a      	movs	r6, #10
 8005c64:	e7a9      	b.n	8005bba <_strtol_l.isra.0+0x4a>
	...

08005c68 <strtol>:
 8005c68:	4b08      	ldr	r3, [pc, #32]	; (8005c8c <strtol+0x24>)
 8005c6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c6c:	681c      	ldr	r4, [r3, #0]
 8005c6e:	4d08      	ldr	r5, [pc, #32]	; (8005c90 <strtol+0x28>)
 8005c70:	6a23      	ldr	r3, [r4, #32]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	bf08      	it	eq
 8005c76:	462b      	moveq	r3, r5
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	460a      	mov	r2, r1
 8005c7e:	4601      	mov	r1, r0
 8005c80:	4620      	mov	r0, r4
 8005c82:	f7ff ff75 	bl	8005b70 <_strtol_l.isra.0>
 8005c86:	b003      	add	sp, #12
 8005c88:	bd30      	pop	{r4, r5, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000024 	.word	0x20000024
 8005c90:	20000088 	.word	0x20000088

08005c94 <std>:
 8005c94:	2300      	movs	r3, #0
 8005c96:	b510      	push	{r4, lr}
 8005c98:	4604      	mov	r4, r0
 8005c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c9e:	6083      	str	r3, [r0, #8]
 8005ca0:	8181      	strh	r1, [r0, #12]
 8005ca2:	6643      	str	r3, [r0, #100]	; 0x64
 8005ca4:	81c2      	strh	r2, [r0, #14]
 8005ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005caa:	6183      	str	r3, [r0, #24]
 8005cac:	4619      	mov	r1, r3
 8005cae:	2208      	movs	r2, #8
 8005cb0:	305c      	adds	r0, #92	; 0x5c
 8005cb2:	f7ff ff3c 	bl	8005b2e <memset>
 8005cb6:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <std+0x38>)
 8005cb8:	6224      	str	r4, [r4, #32]
 8005cba:	6263      	str	r3, [r4, #36]	; 0x24
 8005cbc:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <std+0x3c>)
 8005cbe:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cc0:	4b04      	ldr	r3, [pc, #16]	; (8005cd4 <std+0x40>)
 8005cc2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cc4:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <std+0x44>)
 8005cc6:	6323      	str	r3, [r4, #48]	; 0x30
 8005cc8:	bd10      	pop	{r4, pc}
 8005cca:	bf00      	nop
 8005ccc:	080064b5 	.word	0x080064b5
 8005cd0:	080064d7 	.word	0x080064d7
 8005cd4:	0800650f 	.word	0x0800650f
 8005cd8:	08006533 	.word	0x08006533

08005cdc <_cleanup_r>:
 8005cdc:	4901      	ldr	r1, [pc, #4]	; (8005ce4 <_cleanup_r+0x8>)
 8005cde:	f000 b885 	b.w	8005dec <_fwalk_reent>
 8005ce2:	bf00      	nop
 8005ce4:	08006829 	.word	0x08006829

08005ce8 <__sfmoreglue>:
 8005ce8:	b570      	push	{r4, r5, r6, lr}
 8005cea:	2568      	movs	r5, #104	; 0x68
 8005cec:	1e4a      	subs	r2, r1, #1
 8005cee:	4355      	muls	r5, r2
 8005cf0:	460e      	mov	r6, r1
 8005cf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005cf6:	f000 f8ad 	bl	8005e54 <_malloc_r>
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	b140      	cbz	r0, 8005d10 <__sfmoreglue+0x28>
 8005cfe:	2100      	movs	r1, #0
 8005d00:	e9c0 1600 	strd	r1, r6, [r0]
 8005d04:	300c      	adds	r0, #12
 8005d06:	60a0      	str	r0, [r4, #8]
 8005d08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d0c:	f7ff ff0f 	bl	8005b2e <memset>
 8005d10:	4620      	mov	r0, r4
 8005d12:	bd70      	pop	{r4, r5, r6, pc}

08005d14 <__sinit>:
 8005d14:	6983      	ldr	r3, [r0, #24]
 8005d16:	b510      	push	{r4, lr}
 8005d18:	4604      	mov	r4, r0
 8005d1a:	bb33      	cbnz	r3, 8005d6a <__sinit+0x56>
 8005d1c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005d20:	6503      	str	r3, [r0, #80]	; 0x50
 8005d22:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <__sinit+0x58>)
 8005d24:	4a12      	ldr	r2, [pc, #72]	; (8005d70 <__sinit+0x5c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6282      	str	r2, [r0, #40]	; 0x28
 8005d2a:	4298      	cmp	r0, r3
 8005d2c:	bf04      	itt	eq
 8005d2e:	2301      	moveq	r3, #1
 8005d30:	6183      	streq	r3, [r0, #24]
 8005d32:	f000 f81f 	bl	8005d74 <__sfp>
 8005d36:	6060      	str	r0, [r4, #4]
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f000 f81b 	bl	8005d74 <__sfp>
 8005d3e:	60a0      	str	r0, [r4, #8]
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 f817 	bl	8005d74 <__sfp>
 8005d46:	2200      	movs	r2, #0
 8005d48:	60e0      	str	r0, [r4, #12]
 8005d4a:	2104      	movs	r1, #4
 8005d4c:	6860      	ldr	r0, [r4, #4]
 8005d4e:	f7ff ffa1 	bl	8005c94 <std>
 8005d52:	2201      	movs	r2, #1
 8005d54:	2109      	movs	r1, #9
 8005d56:	68a0      	ldr	r0, [r4, #8]
 8005d58:	f7ff ff9c 	bl	8005c94 <std>
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	2112      	movs	r1, #18
 8005d60:	68e0      	ldr	r0, [r4, #12]
 8005d62:	f7ff ff97 	bl	8005c94 <std>
 8005d66:	2301      	movs	r3, #1
 8005d68:	61a3      	str	r3, [r4, #24]
 8005d6a:	bd10      	pop	{r4, pc}
 8005d6c:	08006bdc 	.word	0x08006bdc
 8005d70:	08005cdd 	.word	0x08005cdd

08005d74 <__sfp>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	4b1b      	ldr	r3, [pc, #108]	; (8005de4 <__sfp+0x70>)
 8005d78:	4607      	mov	r7, r0
 8005d7a:	681e      	ldr	r6, [r3, #0]
 8005d7c:	69b3      	ldr	r3, [r6, #24]
 8005d7e:	b913      	cbnz	r3, 8005d86 <__sfp+0x12>
 8005d80:	4630      	mov	r0, r6
 8005d82:	f7ff ffc7 	bl	8005d14 <__sinit>
 8005d86:	3648      	adds	r6, #72	; 0x48
 8005d88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	d503      	bpl.n	8005d98 <__sfp+0x24>
 8005d90:	6833      	ldr	r3, [r6, #0]
 8005d92:	b133      	cbz	r3, 8005da2 <__sfp+0x2e>
 8005d94:	6836      	ldr	r6, [r6, #0]
 8005d96:	e7f7      	b.n	8005d88 <__sfp+0x14>
 8005d98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d9c:	b16d      	cbz	r5, 8005dba <__sfp+0x46>
 8005d9e:	3468      	adds	r4, #104	; 0x68
 8005da0:	e7f4      	b.n	8005d8c <__sfp+0x18>
 8005da2:	2104      	movs	r1, #4
 8005da4:	4638      	mov	r0, r7
 8005da6:	f7ff ff9f 	bl	8005ce8 <__sfmoreglue>
 8005daa:	6030      	str	r0, [r6, #0]
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d1f1      	bne.n	8005d94 <__sfp+0x20>
 8005db0:	230c      	movs	r3, #12
 8005db2:	4604      	mov	r4, r0
 8005db4:	603b      	str	r3, [r7, #0]
 8005db6:	4620      	mov	r0, r4
 8005db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dba:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <__sfp+0x74>)
 8005dbc:	6665      	str	r5, [r4, #100]	; 0x64
 8005dbe:	e9c4 5500 	strd	r5, r5, [r4]
 8005dc2:	60a5      	str	r5, [r4, #8]
 8005dc4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005dc8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005dcc:	2208      	movs	r2, #8
 8005dce:	4629      	mov	r1, r5
 8005dd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005dd4:	f7ff feab 	bl	8005b2e <memset>
 8005dd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ddc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005de0:	e7e9      	b.n	8005db6 <__sfp+0x42>
 8005de2:	bf00      	nop
 8005de4:	08006bdc 	.word	0x08006bdc
 8005de8:	ffff0001 	.word	0xffff0001

08005dec <_fwalk_reent>:
 8005dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df0:	4680      	mov	r8, r0
 8005df2:	4689      	mov	r9, r1
 8005df4:	2600      	movs	r6, #0
 8005df6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005dfa:	b914      	cbnz	r4, 8005e02 <_fwalk_reent+0x16>
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e02:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005e06:	3f01      	subs	r7, #1
 8005e08:	d501      	bpl.n	8005e0e <_fwalk_reent+0x22>
 8005e0a:	6824      	ldr	r4, [r4, #0]
 8005e0c:	e7f5      	b.n	8005dfa <_fwalk_reent+0xe>
 8005e0e:	89ab      	ldrh	r3, [r5, #12]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d907      	bls.n	8005e24 <_fwalk_reent+0x38>
 8005e14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	d003      	beq.n	8005e24 <_fwalk_reent+0x38>
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4640      	mov	r0, r8
 8005e20:	47c8      	blx	r9
 8005e22:	4306      	orrs	r6, r0
 8005e24:	3568      	adds	r5, #104	; 0x68
 8005e26:	e7ee      	b.n	8005e06 <_fwalk_reent+0x1a>

08005e28 <__locale_ctype_ptr_l>:
 8005e28:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005e2c:	4770      	bx	lr

08005e2e <__ascii_mbtowc>:
 8005e2e:	b082      	sub	sp, #8
 8005e30:	b901      	cbnz	r1, 8005e34 <__ascii_mbtowc+0x6>
 8005e32:	a901      	add	r1, sp, #4
 8005e34:	b142      	cbz	r2, 8005e48 <__ascii_mbtowc+0x1a>
 8005e36:	b14b      	cbz	r3, 8005e4c <__ascii_mbtowc+0x1e>
 8005e38:	7813      	ldrb	r3, [r2, #0]
 8005e3a:	600b      	str	r3, [r1, #0]
 8005e3c:	7812      	ldrb	r2, [r2, #0]
 8005e3e:	1c10      	adds	r0, r2, #0
 8005e40:	bf18      	it	ne
 8005e42:	2001      	movne	r0, #1
 8005e44:	b002      	add	sp, #8
 8005e46:	4770      	bx	lr
 8005e48:	4610      	mov	r0, r2
 8005e4a:	e7fb      	b.n	8005e44 <__ascii_mbtowc+0x16>
 8005e4c:	f06f 0001 	mvn.w	r0, #1
 8005e50:	e7f8      	b.n	8005e44 <__ascii_mbtowc+0x16>
	...

08005e54 <_malloc_r>:
 8005e54:	b570      	push	{r4, r5, r6, lr}
 8005e56:	1ccd      	adds	r5, r1, #3
 8005e58:	f025 0503 	bic.w	r5, r5, #3
 8005e5c:	3508      	adds	r5, #8
 8005e5e:	2d0c      	cmp	r5, #12
 8005e60:	bf38      	it	cc
 8005e62:	250c      	movcc	r5, #12
 8005e64:	2d00      	cmp	r5, #0
 8005e66:	4606      	mov	r6, r0
 8005e68:	db01      	blt.n	8005e6e <_malloc_r+0x1a>
 8005e6a:	42a9      	cmp	r1, r5
 8005e6c:	d903      	bls.n	8005e76 <_malloc_r+0x22>
 8005e6e:	230c      	movs	r3, #12
 8005e70:	6033      	str	r3, [r6, #0]
 8005e72:	2000      	movs	r0, #0
 8005e74:	bd70      	pop	{r4, r5, r6, pc}
 8005e76:	f000 fd85 	bl	8006984 <__malloc_lock>
 8005e7a:	4a21      	ldr	r2, [pc, #132]	; (8005f00 <_malloc_r+0xac>)
 8005e7c:	6814      	ldr	r4, [r2, #0]
 8005e7e:	4621      	mov	r1, r4
 8005e80:	b991      	cbnz	r1, 8005ea8 <_malloc_r+0x54>
 8005e82:	4c20      	ldr	r4, [pc, #128]	; (8005f04 <_malloc_r+0xb0>)
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	b91b      	cbnz	r3, 8005e90 <_malloc_r+0x3c>
 8005e88:	4630      	mov	r0, r6
 8005e8a:	f000 fb03 	bl	8006494 <_sbrk_r>
 8005e8e:	6020      	str	r0, [r4, #0]
 8005e90:	4629      	mov	r1, r5
 8005e92:	4630      	mov	r0, r6
 8005e94:	f000 fafe 	bl	8006494 <_sbrk_r>
 8005e98:	1c43      	adds	r3, r0, #1
 8005e9a:	d124      	bne.n	8005ee6 <_malloc_r+0x92>
 8005e9c:	230c      	movs	r3, #12
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	6033      	str	r3, [r6, #0]
 8005ea2:	f000 fd70 	bl	8006986 <__malloc_unlock>
 8005ea6:	e7e4      	b.n	8005e72 <_malloc_r+0x1e>
 8005ea8:	680b      	ldr	r3, [r1, #0]
 8005eaa:	1b5b      	subs	r3, r3, r5
 8005eac:	d418      	bmi.n	8005ee0 <_malloc_r+0x8c>
 8005eae:	2b0b      	cmp	r3, #11
 8005eb0:	d90f      	bls.n	8005ed2 <_malloc_r+0x7e>
 8005eb2:	600b      	str	r3, [r1, #0]
 8005eb4:	18cc      	adds	r4, r1, r3
 8005eb6:	50cd      	str	r5, [r1, r3]
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f000 fd64 	bl	8006986 <__malloc_unlock>
 8005ebe:	f104 000b 	add.w	r0, r4, #11
 8005ec2:	1d23      	adds	r3, r4, #4
 8005ec4:	f020 0007 	bic.w	r0, r0, #7
 8005ec8:	1ac3      	subs	r3, r0, r3
 8005eca:	d0d3      	beq.n	8005e74 <_malloc_r+0x20>
 8005ecc:	425a      	negs	r2, r3
 8005ece:	50e2      	str	r2, [r4, r3]
 8005ed0:	e7d0      	b.n	8005e74 <_malloc_r+0x20>
 8005ed2:	684b      	ldr	r3, [r1, #4]
 8005ed4:	428c      	cmp	r4, r1
 8005ed6:	bf16      	itet	ne
 8005ed8:	6063      	strne	r3, [r4, #4]
 8005eda:	6013      	streq	r3, [r2, #0]
 8005edc:	460c      	movne	r4, r1
 8005ede:	e7eb      	b.n	8005eb8 <_malloc_r+0x64>
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	6849      	ldr	r1, [r1, #4]
 8005ee4:	e7cc      	b.n	8005e80 <_malloc_r+0x2c>
 8005ee6:	1cc4      	adds	r4, r0, #3
 8005ee8:	f024 0403 	bic.w	r4, r4, #3
 8005eec:	42a0      	cmp	r0, r4
 8005eee:	d005      	beq.n	8005efc <_malloc_r+0xa8>
 8005ef0:	1a21      	subs	r1, r4, r0
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f000 face 	bl	8006494 <_sbrk_r>
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d0cf      	beq.n	8005e9c <_malloc_r+0x48>
 8005efc:	6025      	str	r5, [r4, #0]
 8005efe:	e7db      	b.n	8005eb8 <_malloc_r+0x64>
 8005f00:	20001b5c 	.word	0x20001b5c
 8005f04:	20001b60 	.word	0x20001b60

08005f08 <__sfputc_r>:
 8005f08:	6893      	ldr	r3, [r2, #8]
 8005f0a:	b410      	push	{r4}
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	6093      	str	r3, [r2, #8]
 8005f12:	da07      	bge.n	8005f24 <__sfputc_r+0x1c>
 8005f14:	6994      	ldr	r4, [r2, #24]
 8005f16:	42a3      	cmp	r3, r4
 8005f18:	db01      	blt.n	8005f1e <__sfputc_r+0x16>
 8005f1a:	290a      	cmp	r1, #10
 8005f1c:	d102      	bne.n	8005f24 <__sfputc_r+0x1c>
 8005f1e:	bc10      	pop	{r4}
 8005f20:	f000 bb0c 	b.w	800653c <__swbuf_r>
 8005f24:	6813      	ldr	r3, [r2, #0]
 8005f26:	1c58      	adds	r0, r3, #1
 8005f28:	6010      	str	r0, [r2, #0]
 8005f2a:	7019      	strb	r1, [r3, #0]
 8005f2c:	4608      	mov	r0, r1
 8005f2e:	bc10      	pop	{r4}
 8005f30:	4770      	bx	lr

08005f32 <__sfputs_r>:
 8005f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f34:	4606      	mov	r6, r0
 8005f36:	460f      	mov	r7, r1
 8005f38:	4614      	mov	r4, r2
 8005f3a:	18d5      	adds	r5, r2, r3
 8005f3c:	42ac      	cmp	r4, r5
 8005f3e:	d101      	bne.n	8005f44 <__sfputs_r+0x12>
 8005f40:	2000      	movs	r0, #0
 8005f42:	e007      	b.n	8005f54 <__sfputs_r+0x22>
 8005f44:	463a      	mov	r2, r7
 8005f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	f7ff ffdc 	bl	8005f08 <__sfputc_r>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d1f3      	bne.n	8005f3c <__sfputs_r+0xa>
 8005f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f58 <_vfiprintf_r>:
 8005f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	b09d      	sub	sp, #116	; 0x74
 8005f60:	4617      	mov	r7, r2
 8005f62:	461d      	mov	r5, r3
 8005f64:	4606      	mov	r6, r0
 8005f66:	b118      	cbz	r0, 8005f70 <_vfiprintf_r+0x18>
 8005f68:	6983      	ldr	r3, [r0, #24]
 8005f6a:	b90b      	cbnz	r3, 8005f70 <_vfiprintf_r+0x18>
 8005f6c:	f7ff fed2 	bl	8005d14 <__sinit>
 8005f70:	4b7c      	ldr	r3, [pc, #496]	; (8006164 <_vfiprintf_r+0x20c>)
 8005f72:	429c      	cmp	r4, r3
 8005f74:	d158      	bne.n	8006028 <_vfiprintf_r+0xd0>
 8005f76:	6874      	ldr	r4, [r6, #4]
 8005f78:	89a3      	ldrh	r3, [r4, #12]
 8005f7a:	0718      	lsls	r0, r3, #28
 8005f7c:	d55e      	bpl.n	800603c <_vfiprintf_r+0xe4>
 8005f7e:	6923      	ldr	r3, [r4, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d05b      	beq.n	800603c <_vfiprintf_r+0xe4>
 8005f84:	2300      	movs	r3, #0
 8005f86:	9309      	str	r3, [sp, #36]	; 0x24
 8005f88:	2320      	movs	r3, #32
 8005f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f8e:	2330      	movs	r3, #48	; 0x30
 8005f90:	f04f 0b01 	mov.w	fp, #1
 8005f94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f98:	9503      	str	r5, [sp, #12]
 8005f9a:	46b8      	mov	r8, r7
 8005f9c:	4645      	mov	r5, r8
 8005f9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005fa2:	b10b      	cbz	r3, 8005fa8 <_vfiprintf_r+0x50>
 8005fa4:	2b25      	cmp	r3, #37	; 0x25
 8005fa6:	d154      	bne.n	8006052 <_vfiprintf_r+0xfa>
 8005fa8:	ebb8 0a07 	subs.w	sl, r8, r7
 8005fac:	d00b      	beq.n	8005fc6 <_vfiprintf_r+0x6e>
 8005fae:	4653      	mov	r3, sl
 8005fb0:	463a      	mov	r2, r7
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f7ff ffbc 	bl	8005f32 <__sfputs_r>
 8005fba:	3001      	adds	r0, #1
 8005fbc:	f000 80c2 	beq.w	8006144 <_vfiprintf_r+0x1ec>
 8005fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc2:	4453      	add	r3, sl
 8005fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fc6:	f898 3000 	ldrb.w	r3, [r8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 80ba 	beq.w	8006144 <_vfiprintf_r+0x1ec>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fda:	9304      	str	r3, [sp, #16]
 8005fdc:	9307      	str	r3, [sp, #28]
 8005fde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fe2:	931a      	str	r3, [sp, #104]	; 0x68
 8005fe4:	46a8      	mov	r8, r5
 8005fe6:	2205      	movs	r2, #5
 8005fe8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005fec:	485e      	ldr	r0, [pc, #376]	; (8006168 <_vfiprintf_r+0x210>)
 8005fee:	f000 fcbb 	bl	8006968 <memchr>
 8005ff2:	9b04      	ldr	r3, [sp, #16]
 8005ff4:	bb78      	cbnz	r0, 8006056 <_vfiprintf_r+0xfe>
 8005ff6:	06d9      	lsls	r1, r3, #27
 8005ff8:	bf44      	itt	mi
 8005ffa:	2220      	movmi	r2, #32
 8005ffc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006000:	071a      	lsls	r2, r3, #28
 8006002:	bf44      	itt	mi
 8006004:	222b      	movmi	r2, #43	; 0x2b
 8006006:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800600a:	782a      	ldrb	r2, [r5, #0]
 800600c:	2a2a      	cmp	r2, #42	; 0x2a
 800600e:	d02a      	beq.n	8006066 <_vfiprintf_r+0x10e>
 8006010:	46a8      	mov	r8, r5
 8006012:	2000      	movs	r0, #0
 8006014:	250a      	movs	r5, #10
 8006016:	9a07      	ldr	r2, [sp, #28]
 8006018:	4641      	mov	r1, r8
 800601a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800601e:	3b30      	subs	r3, #48	; 0x30
 8006020:	2b09      	cmp	r3, #9
 8006022:	d969      	bls.n	80060f8 <_vfiprintf_r+0x1a0>
 8006024:	b360      	cbz	r0, 8006080 <_vfiprintf_r+0x128>
 8006026:	e024      	b.n	8006072 <_vfiprintf_r+0x11a>
 8006028:	4b50      	ldr	r3, [pc, #320]	; (800616c <_vfiprintf_r+0x214>)
 800602a:	429c      	cmp	r4, r3
 800602c:	d101      	bne.n	8006032 <_vfiprintf_r+0xda>
 800602e:	68b4      	ldr	r4, [r6, #8]
 8006030:	e7a2      	b.n	8005f78 <_vfiprintf_r+0x20>
 8006032:	4b4f      	ldr	r3, [pc, #316]	; (8006170 <_vfiprintf_r+0x218>)
 8006034:	429c      	cmp	r4, r3
 8006036:	bf08      	it	eq
 8006038:	68f4      	ldreq	r4, [r6, #12]
 800603a:	e79d      	b.n	8005f78 <_vfiprintf_r+0x20>
 800603c:	4621      	mov	r1, r4
 800603e:	4630      	mov	r0, r6
 8006040:	f000 faee 	bl	8006620 <__swsetup_r>
 8006044:	2800      	cmp	r0, #0
 8006046:	d09d      	beq.n	8005f84 <_vfiprintf_r+0x2c>
 8006048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800604c:	b01d      	add	sp, #116	; 0x74
 800604e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006052:	46a8      	mov	r8, r5
 8006054:	e7a2      	b.n	8005f9c <_vfiprintf_r+0x44>
 8006056:	4a44      	ldr	r2, [pc, #272]	; (8006168 <_vfiprintf_r+0x210>)
 8006058:	4645      	mov	r5, r8
 800605a:	1a80      	subs	r0, r0, r2
 800605c:	fa0b f000 	lsl.w	r0, fp, r0
 8006060:	4318      	orrs	r0, r3
 8006062:	9004      	str	r0, [sp, #16]
 8006064:	e7be      	b.n	8005fe4 <_vfiprintf_r+0x8c>
 8006066:	9a03      	ldr	r2, [sp, #12]
 8006068:	1d11      	adds	r1, r2, #4
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	9103      	str	r1, [sp, #12]
 800606e:	2a00      	cmp	r2, #0
 8006070:	db01      	blt.n	8006076 <_vfiprintf_r+0x11e>
 8006072:	9207      	str	r2, [sp, #28]
 8006074:	e004      	b.n	8006080 <_vfiprintf_r+0x128>
 8006076:	4252      	negs	r2, r2
 8006078:	f043 0302 	orr.w	r3, r3, #2
 800607c:	9207      	str	r2, [sp, #28]
 800607e:	9304      	str	r3, [sp, #16]
 8006080:	f898 3000 	ldrb.w	r3, [r8]
 8006084:	2b2e      	cmp	r3, #46	; 0x2e
 8006086:	d10e      	bne.n	80060a6 <_vfiprintf_r+0x14e>
 8006088:	f898 3001 	ldrb.w	r3, [r8, #1]
 800608c:	2b2a      	cmp	r3, #42	; 0x2a
 800608e:	d138      	bne.n	8006102 <_vfiprintf_r+0x1aa>
 8006090:	9b03      	ldr	r3, [sp, #12]
 8006092:	f108 0802 	add.w	r8, r8, #2
 8006096:	1d1a      	adds	r2, r3, #4
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	9203      	str	r2, [sp, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	bfb8      	it	lt
 80060a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80060a4:	9305      	str	r3, [sp, #20]
 80060a6:	4d33      	ldr	r5, [pc, #204]	; (8006174 <_vfiprintf_r+0x21c>)
 80060a8:	2203      	movs	r2, #3
 80060aa:	f898 1000 	ldrb.w	r1, [r8]
 80060ae:	4628      	mov	r0, r5
 80060b0:	f000 fc5a 	bl	8006968 <memchr>
 80060b4:	b140      	cbz	r0, 80060c8 <_vfiprintf_r+0x170>
 80060b6:	2340      	movs	r3, #64	; 0x40
 80060b8:	1b40      	subs	r0, r0, r5
 80060ba:	fa03 f000 	lsl.w	r0, r3, r0
 80060be:	9b04      	ldr	r3, [sp, #16]
 80060c0:	f108 0801 	add.w	r8, r8, #1
 80060c4:	4303      	orrs	r3, r0
 80060c6:	9304      	str	r3, [sp, #16]
 80060c8:	f898 1000 	ldrb.w	r1, [r8]
 80060cc:	2206      	movs	r2, #6
 80060ce:	482a      	ldr	r0, [pc, #168]	; (8006178 <_vfiprintf_r+0x220>)
 80060d0:	f108 0701 	add.w	r7, r8, #1
 80060d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060d8:	f000 fc46 	bl	8006968 <memchr>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d037      	beq.n	8006150 <_vfiprintf_r+0x1f8>
 80060e0:	4b26      	ldr	r3, [pc, #152]	; (800617c <_vfiprintf_r+0x224>)
 80060e2:	bb1b      	cbnz	r3, 800612c <_vfiprintf_r+0x1d4>
 80060e4:	9b03      	ldr	r3, [sp, #12]
 80060e6:	3307      	adds	r3, #7
 80060e8:	f023 0307 	bic.w	r3, r3, #7
 80060ec:	3308      	adds	r3, #8
 80060ee:	9303      	str	r3, [sp, #12]
 80060f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f2:	444b      	add	r3, r9
 80060f4:	9309      	str	r3, [sp, #36]	; 0x24
 80060f6:	e750      	b.n	8005f9a <_vfiprintf_r+0x42>
 80060f8:	fb05 3202 	mla	r2, r5, r2, r3
 80060fc:	2001      	movs	r0, #1
 80060fe:	4688      	mov	r8, r1
 8006100:	e78a      	b.n	8006018 <_vfiprintf_r+0xc0>
 8006102:	2300      	movs	r3, #0
 8006104:	250a      	movs	r5, #10
 8006106:	4619      	mov	r1, r3
 8006108:	f108 0801 	add.w	r8, r8, #1
 800610c:	9305      	str	r3, [sp, #20]
 800610e:	4640      	mov	r0, r8
 8006110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006114:	3a30      	subs	r2, #48	; 0x30
 8006116:	2a09      	cmp	r2, #9
 8006118:	d903      	bls.n	8006122 <_vfiprintf_r+0x1ca>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0c3      	beq.n	80060a6 <_vfiprintf_r+0x14e>
 800611e:	9105      	str	r1, [sp, #20]
 8006120:	e7c1      	b.n	80060a6 <_vfiprintf_r+0x14e>
 8006122:	fb05 2101 	mla	r1, r5, r1, r2
 8006126:	2301      	movs	r3, #1
 8006128:	4680      	mov	r8, r0
 800612a:	e7f0      	b.n	800610e <_vfiprintf_r+0x1b6>
 800612c:	ab03      	add	r3, sp, #12
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	4622      	mov	r2, r4
 8006132:	4b13      	ldr	r3, [pc, #76]	; (8006180 <_vfiprintf_r+0x228>)
 8006134:	a904      	add	r1, sp, #16
 8006136:	4630      	mov	r0, r6
 8006138:	f3af 8000 	nop.w
 800613c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006140:	4681      	mov	r9, r0
 8006142:	d1d5      	bne.n	80060f0 <_vfiprintf_r+0x198>
 8006144:	89a3      	ldrh	r3, [r4, #12]
 8006146:	065b      	lsls	r3, r3, #25
 8006148:	f53f af7e 	bmi.w	8006048 <_vfiprintf_r+0xf0>
 800614c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800614e:	e77d      	b.n	800604c <_vfiprintf_r+0xf4>
 8006150:	ab03      	add	r3, sp, #12
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	4622      	mov	r2, r4
 8006156:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <_vfiprintf_r+0x228>)
 8006158:	a904      	add	r1, sp, #16
 800615a:	4630      	mov	r0, r6
 800615c:	f000 f888 	bl	8006270 <_printf_i>
 8006160:	e7ec      	b.n	800613c <_vfiprintf_r+0x1e4>
 8006162:	bf00      	nop
 8006164:	08006c00 	.word	0x08006c00
 8006168:	08006c4a 	.word	0x08006c4a
 800616c:	08006c20 	.word	0x08006c20
 8006170:	08006be0 	.word	0x08006be0
 8006174:	08006c50 	.word	0x08006c50
 8006178:	08006c54 	.word	0x08006c54
 800617c:	00000000 	.word	0x00000000
 8006180:	08005f33 	.word	0x08005f33

08006184 <_printf_common>:
 8006184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006188:	4691      	mov	r9, r2
 800618a:	461f      	mov	r7, r3
 800618c:	688a      	ldr	r2, [r1, #8]
 800618e:	690b      	ldr	r3, [r1, #16]
 8006190:	4606      	mov	r6, r0
 8006192:	4293      	cmp	r3, r2
 8006194:	bfb8      	it	lt
 8006196:	4613      	movlt	r3, r2
 8006198:	f8c9 3000 	str.w	r3, [r9]
 800619c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061a0:	460c      	mov	r4, r1
 80061a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061a6:	b112      	cbz	r2, 80061ae <_printf_common+0x2a>
 80061a8:	3301      	adds	r3, #1
 80061aa:	f8c9 3000 	str.w	r3, [r9]
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	0699      	lsls	r1, r3, #26
 80061b2:	bf42      	ittt	mi
 80061b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80061b8:	3302      	addmi	r3, #2
 80061ba:	f8c9 3000 	strmi.w	r3, [r9]
 80061be:	6825      	ldr	r5, [r4, #0]
 80061c0:	f015 0506 	ands.w	r5, r5, #6
 80061c4:	d107      	bne.n	80061d6 <_printf_common+0x52>
 80061c6:	f104 0a19 	add.w	sl, r4, #25
 80061ca:	68e3      	ldr	r3, [r4, #12]
 80061cc:	f8d9 2000 	ldr.w	r2, [r9]
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	42ab      	cmp	r3, r5
 80061d4:	dc29      	bgt.n	800622a <_printf_common+0xa6>
 80061d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80061da:	6822      	ldr	r2, [r4, #0]
 80061dc:	3300      	adds	r3, #0
 80061de:	bf18      	it	ne
 80061e0:	2301      	movne	r3, #1
 80061e2:	0692      	lsls	r2, r2, #26
 80061e4:	d42e      	bmi.n	8006244 <_printf_common+0xc0>
 80061e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061ea:	4639      	mov	r1, r7
 80061ec:	4630      	mov	r0, r6
 80061ee:	47c0      	blx	r8
 80061f0:	3001      	adds	r0, #1
 80061f2:	d021      	beq.n	8006238 <_printf_common+0xb4>
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	68e5      	ldr	r5, [r4, #12]
 80061f8:	f003 0306 	and.w	r3, r3, #6
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	bf18      	it	ne
 8006200:	2500      	movne	r5, #0
 8006202:	f8d9 2000 	ldr.w	r2, [r9]
 8006206:	f04f 0900 	mov.w	r9, #0
 800620a:	bf08      	it	eq
 800620c:	1aad      	subeq	r5, r5, r2
 800620e:	68a3      	ldr	r3, [r4, #8]
 8006210:	6922      	ldr	r2, [r4, #16]
 8006212:	bf08      	it	eq
 8006214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006218:	4293      	cmp	r3, r2
 800621a:	bfc4      	itt	gt
 800621c:	1a9b      	subgt	r3, r3, r2
 800621e:	18ed      	addgt	r5, r5, r3
 8006220:	341a      	adds	r4, #26
 8006222:	454d      	cmp	r5, r9
 8006224:	d11a      	bne.n	800625c <_printf_common+0xd8>
 8006226:	2000      	movs	r0, #0
 8006228:	e008      	b.n	800623c <_printf_common+0xb8>
 800622a:	2301      	movs	r3, #1
 800622c:	4652      	mov	r2, sl
 800622e:	4639      	mov	r1, r7
 8006230:	4630      	mov	r0, r6
 8006232:	47c0      	blx	r8
 8006234:	3001      	adds	r0, #1
 8006236:	d103      	bne.n	8006240 <_printf_common+0xbc>
 8006238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800623c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006240:	3501      	adds	r5, #1
 8006242:	e7c2      	b.n	80061ca <_printf_common+0x46>
 8006244:	2030      	movs	r0, #48	; 0x30
 8006246:	18e1      	adds	r1, r4, r3
 8006248:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006252:	4422      	add	r2, r4
 8006254:	3302      	adds	r3, #2
 8006256:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800625a:	e7c4      	b.n	80061e6 <_printf_common+0x62>
 800625c:	2301      	movs	r3, #1
 800625e:	4622      	mov	r2, r4
 8006260:	4639      	mov	r1, r7
 8006262:	4630      	mov	r0, r6
 8006264:	47c0      	blx	r8
 8006266:	3001      	adds	r0, #1
 8006268:	d0e6      	beq.n	8006238 <_printf_common+0xb4>
 800626a:	f109 0901 	add.w	r9, r9, #1
 800626e:	e7d8      	b.n	8006222 <_printf_common+0x9e>

08006270 <_printf_i>:
 8006270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006274:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006278:	460c      	mov	r4, r1
 800627a:	7e09      	ldrb	r1, [r1, #24]
 800627c:	b085      	sub	sp, #20
 800627e:	296e      	cmp	r1, #110	; 0x6e
 8006280:	4617      	mov	r7, r2
 8006282:	4606      	mov	r6, r0
 8006284:	4698      	mov	r8, r3
 8006286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006288:	f000 80b3 	beq.w	80063f2 <_printf_i+0x182>
 800628c:	d822      	bhi.n	80062d4 <_printf_i+0x64>
 800628e:	2963      	cmp	r1, #99	; 0x63
 8006290:	d036      	beq.n	8006300 <_printf_i+0x90>
 8006292:	d80a      	bhi.n	80062aa <_printf_i+0x3a>
 8006294:	2900      	cmp	r1, #0
 8006296:	f000 80b9 	beq.w	800640c <_printf_i+0x19c>
 800629a:	2958      	cmp	r1, #88	; 0x58
 800629c:	f000 8083 	beq.w	80063a6 <_printf_i+0x136>
 80062a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80062a8:	e032      	b.n	8006310 <_printf_i+0xa0>
 80062aa:	2964      	cmp	r1, #100	; 0x64
 80062ac:	d001      	beq.n	80062b2 <_printf_i+0x42>
 80062ae:	2969      	cmp	r1, #105	; 0x69
 80062b0:	d1f6      	bne.n	80062a0 <_printf_i+0x30>
 80062b2:	6820      	ldr	r0, [r4, #0]
 80062b4:	6813      	ldr	r3, [r2, #0]
 80062b6:	0605      	lsls	r5, r0, #24
 80062b8:	f103 0104 	add.w	r1, r3, #4
 80062bc:	d52a      	bpl.n	8006314 <_printf_i+0xa4>
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6011      	str	r1, [r2, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	da03      	bge.n	80062ce <_printf_i+0x5e>
 80062c6:	222d      	movs	r2, #45	; 0x2d
 80062c8:	425b      	negs	r3, r3
 80062ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80062ce:	486f      	ldr	r0, [pc, #444]	; (800648c <_printf_i+0x21c>)
 80062d0:	220a      	movs	r2, #10
 80062d2:	e039      	b.n	8006348 <_printf_i+0xd8>
 80062d4:	2973      	cmp	r1, #115	; 0x73
 80062d6:	f000 809d 	beq.w	8006414 <_printf_i+0x1a4>
 80062da:	d808      	bhi.n	80062ee <_printf_i+0x7e>
 80062dc:	296f      	cmp	r1, #111	; 0x6f
 80062de:	d020      	beq.n	8006322 <_printf_i+0xb2>
 80062e0:	2970      	cmp	r1, #112	; 0x70
 80062e2:	d1dd      	bne.n	80062a0 <_printf_i+0x30>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	f043 0320 	orr.w	r3, r3, #32
 80062ea:	6023      	str	r3, [r4, #0]
 80062ec:	e003      	b.n	80062f6 <_printf_i+0x86>
 80062ee:	2975      	cmp	r1, #117	; 0x75
 80062f0:	d017      	beq.n	8006322 <_printf_i+0xb2>
 80062f2:	2978      	cmp	r1, #120	; 0x78
 80062f4:	d1d4      	bne.n	80062a0 <_printf_i+0x30>
 80062f6:	2378      	movs	r3, #120	; 0x78
 80062f8:	4865      	ldr	r0, [pc, #404]	; (8006490 <_printf_i+0x220>)
 80062fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062fe:	e055      	b.n	80063ac <_printf_i+0x13c>
 8006300:	6813      	ldr	r3, [r2, #0]
 8006302:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006306:	1d19      	adds	r1, r3, #4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6011      	str	r1, [r2, #0]
 800630c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006310:	2301      	movs	r3, #1
 8006312:	e08c      	b.n	800642e <_printf_i+0x1be>
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f010 0f40 	tst.w	r0, #64	; 0x40
 800631a:	6011      	str	r1, [r2, #0]
 800631c:	bf18      	it	ne
 800631e:	b21b      	sxthne	r3, r3
 8006320:	e7cf      	b.n	80062c2 <_printf_i+0x52>
 8006322:	6813      	ldr	r3, [r2, #0]
 8006324:	6825      	ldr	r5, [r4, #0]
 8006326:	1d18      	adds	r0, r3, #4
 8006328:	6010      	str	r0, [r2, #0]
 800632a:	0628      	lsls	r0, r5, #24
 800632c:	d501      	bpl.n	8006332 <_printf_i+0xc2>
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	e002      	b.n	8006338 <_printf_i+0xc8>
 8006332:	0668      	lsls	r0, r5, #25
 8006334:	d5fb      	bpl.n	800632e <_printf_i+0xbe>
 8006336:	881b      	ldrh	r3, [r3, #0]
 8006338:	296f      	cmp	r1, #111	; 0x6f
 800633a:	bf14      	ite	ne
 800633c:	220a      	movne	r2, #10
 800633e:	2208      	moveq	r2, #8
 8006340:	4852      	ldr	r0, [pc, #328]	; (800648c <_printf_i+0x21c>)
 8006342:	2100      	movs	r1, #0
 8006344:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006348:	6865      	ldr	r5, [r4, #4]
 800634a:	2d00      	cmp	r5, #0
 800634c:	60a5      	str	r5, [r4, #8]
 800634e:	f2c0 8095 	blt.w	800647c <_printf_i+0x20c>
 8006352:	6821      	ldr	r1, [r4, #0]
 8006354:	f021 0104 	bic.w	r1, r1, #4
 8006358:	6021      	str	r1, [r4, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d13d      	bne.n	80063da <_printf_i+0x16a>
 800635e:	2d00      	cmp	r5, #0
 8006360:	f040 808e 	bne.w	8006480 <_printf_i+0x210>
 8006364:	4665      	mov	r5, ip
 8006366:	2a08      	cmp	r2, #8
 8006368:	d10b      	bne.n	8006382 <_printf_i+0x112>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	07db      	lsls	r3, r3, #31
 800636e:	d508      	bpl.n	8006382 <_printf_i+0x112>
 8006370:	6923      	ldr	r3, [r4, #16]
 8006372:	6862      	ldr	r2, [r4, #4]
 8006374:	429a      	cmp	r2, r3
 8006376:	bfde      	ittt	le
 8006378:	2330      	movle	r3, #48	; 0x30
 800637a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800637e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006382:	ebac 0305 	sub.w	r3, ip, r5
 8006386:	6123      	str	r3, [r4, #16]
 8006388:	f8cd 8000 	str.w	r8, [sp]
 800638c:	463b      	mov	r3, r7
 800638e:	aa03      	add	r2, sp, #12
 8006390:	4621      	mov	r1, r4
 8006392:	4630      	mov	r0, r6
 8006394:	f7ff fef6 	bl	8006184 <_printf_common>
 8006398:	3001      	adds	r0, #1
 800639a:	d14d      	bne.n	8006438 <_printf_i+0x1c8>
 800639c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063a0:	b005      	add	sp, #20
 80063a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063a6:	4839      	ldr	r0, [pc, #228]	; (800648c <_printf_i+0x21c>)
 80063a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80063ac:	6813      	ldr	r3, [r2, #0]
 80063ae:	6821      	ldr	r1, [r4, #0]
 80063b0:	1d1d      	adds	r5, r3, #4
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6015      	str	r5, [r2, #0]
 80063b6:	060a      	lsls	r2, r1, #24
 80063b8:	d50b      	bpl.n	80063d2 <_printf_i+0x162>
 80063ba:	07ca      	lsls	r2, r1, #31
 80063bc:	bf44      	itt	mi
 80063be:	f041 0120 	orrmi.w	r1, r1, #32
 80063c2:	6021      	strmi	r1, [r4, #0]
 80063c4:	b91b      	cbnz	r3, 80063ce <_printf_i+0x15e>
 80063c6:	6822      	ldr	r2, [r4, #0]
 80063c8:	f022 0220 	bic.w	r2, r2, #32
 80063cc:	6022      	str	r2, [r4, #0]
 80063ce:	2210      	movs	r2, #16
 80063d0:	e7b7      	b.n	8006342 <_printf_i+0xd2>
 80063d2:	064d      	lsls	r5, r1, #25
 80063d4:	bf48      	it	mi
 80063d6:	b29b      	uxthmi	r3, r3
 80063d8:	e7ef      	b.n	80063ba <_printf_i+0x14a>
 80063da:	4665      	mov	r5, ip
 80063dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80063e0:	fb02 3311 	mls	r3, r2, r1, r3
 80063e4:	5cc3      	ldrb	r3, [r0, r3]
 80063e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80063ea:	460b      	mov	r3, r1
 80063ec:	2900      	cmp	r1, #0
 80063ee:	d1f5      	bne.n	80063dc <_printf_i+0x16c>
 80063f0:	e7b9      	b.n	8006366 <_printf_i+0xf6>
 80063f2:	6813      	ldr	r3, [r2, #0]
 80063f4:	6825      	ldr	r5, [r4, #0]
 80063f6:	1d18      	adds	r0, r3, #4
 80063f8:	6961      	ldr	r1, [r4, #20]
 80063fa:	6010      	str	r0, [r2, #0]
 80063fc:	0628      	lsls	r0, r5, #24
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	d501      	bpl.n	8006406 <_printf_i+0x196>
 8006402:	6019      	str	r1, [r3, #0]
 8006404:	e002      	b.n	800640c <_printf_i+0x19c>
 8006406:	066a      	lsls	r2, r5, #25
 8006408:	d5fb      	bpl.n	8006402 <_printf_i+0x192>
 800640a:	8019      	strh	r1, [r3, #0]
 800640c:	2300      	movs	r3, #0
 800640e:	4665      	mov	r5, ip
 8006410:	6123      	str	r3, [r4, #16]
 8006412:	e7b9      	b.n	8006388 <_printf_i+0x118>
 8006414:	6813      	ldr	r3, [r2, #0]
 8006416:	1d19      	adds	r1, r3, #4
 8006418:	6011      	str	r1, [r2, #0]
 800641a:	681d      	ldr	r5, [r3, #0]
 800641c:	6862      	ldr	r2, [r4, #4]
 800641e:	2100      	movs	r1, #0
 8006420:	4628      	mov	r0, r5
 8006422:	f000 faa1 	bl	8006968 <memchr>
 8006426:	b108      	cbz	r0, 800642c <_printf_i+0x1bc>
 8006428:	1b40      	subs	r0, r0, r5
 800642a:	6060      	str	r0, [r4, #4]
 800642c:	6863      	ldr	r3, [r4, #4]
 800642e:	6123      	str	r3, [r4, #16]
 8006430:	2300      	movs	r3, #0
 8006432:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006436:	e7a7      	b.n	8006388 <_printf_i+0x118>
 8006438:	6923      	ldr	r3, [r4, #16]
 800643a:	462a      	mov	r2, r5
 800643c:	4639      	mov	r1, r7
 800643e:	4630      	mov	r0, r6
 8006440:	47c0      	blx	r8
 8006442:	3001      	adds	r0, #1
 8006444:	d0aa      	beq.n	800639c <_printf_i+0x12c>
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	079b      	lsls	r3, r3, #30
 800644a:	d413      	bmi.n	8006474 <_printf_i+0x204>
 800644c:	68e0      	ldr	r0, [r4, #12]
 800644e:	9b03      	ldr	r3, [sp, #12]
 8006450:	4298      	cmp	r0, r3
 8006452:	bfb8      	it	lt
 8006454:	4618      	movlt	r0, r3
 8006456:	e7a3      	b.n	80063a0 <_printf_i+0x130>
 8006458:	2301      	movs	r3, #1
 800645a:	464a      	mov	r2, r9
 800645c:	4639      	mov	r1, r7
 800645e:	4630      	mov	r0, r6
 8006460:	47c0      	blx	r8
 8006462:	3001      	adds	r0, #1
 8006464:	d09a      	beq.n	800639c <_printf_i+0x12c>
 8006466:	3501      	adds	r5, #1
 8006468:	68e3      	ldr	r3, [r4, #12]
 800646a:	9a03      	ldr	r2, [sp, #12]
 800646c:	1a9b      	subs	r3, r3, r2
 800646e:	42ab      	cmp	r3, r5
 8006470:	dcf2      	bgt.n	8006458 <_printf_i+0x1e8>
 8006472:	e7eb      	b.n	800644c <_printf_i+0x1dc>
 8006474:	2500      	movs	r5, #0
 8006476:	f104 0919 	add.w	r9, r4, #25
 800647a:	e7f5      	b.n	8006468 <_printf_i+0x1f8>
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1ac      	bne.n	80063da <_printf_i+0x16a>
 8006480:	7803      	ldrb	r3, [r0, #0]
 8006482:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006486:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800648a:	e76c      	b.n	8006366 <_printf_i+0xf6>
 800648c:	08006c5b 	.word	0x08006c5b
 8006490:	08006c6c 	.word	0x08006c6c

08006494 <_sbrk_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	2300      	movs	r3, #0
 8006498:	4c05      	ldr	r4, [pc, #20]	; (80064b0 <_sbrk_r+0x1c>)
 800649a:	4605      	mov	r5, r0
 800649c:	4608      	mov	r0, r1
 800649e:	6023      	str	r3, [r4, #0]
 80064a0:	f7fa fb2a 	bl	8000af8 <_sbrk>
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	d102      	bne.n	80064ae <_sbrk_r+0x1a>
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	b103      	cbz	r3, 80064ae <_sbrk_r+0x1a>
 80064ac:	602b      	str	r3, [r5, #0]
 80064ae:	bd38      	pop	{r3, r4, r5, pc}
 80064b0:	20001cc8 	.word	0x20001cc8

080064b4 <__sread>:
 80064b4:	b510      	push	{r4, lr}
 80064b6:	460c      	mov	r4, r1
 80064b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064bc:	f000 fab0 	bl	8006a20 <_read_r>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	bfab      	itete	ge
 80064c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064c6:	89a3      	ldrhlt	r3, [r4, #12]
 80064c8:	181b      	addge	r3, r3, r0
 80064ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064ce:	bfac      	ite	ge
 80064d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80064d2:	81a3      	strhlt	r3, [r4, #12]
 80064d4:	bd10      	pop	{r4, pc}

080064d6 <__swrite>:
 80064d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064da:	461f      	mov	r7, r3
 80064dc:	898b      	ldrh	r3, [r1, #12]
 80064de:	4605      	mov	r5, r0
 80064e0:	05db      	lsls	r3, r3, #23
 80064e2:	460c      	mov	r4, r1
 80064e4:	4616      	mov	r6, r2
 80064e6:	d505      	bpl.n	80064f4 <__swrite+0x1e>
 80064e8:	2302      	movs	r3, #2
 80064ea:	2200      	movs	r2, #0
 80064ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f0:	f000 f9c4 	bl	800687c <_lseek_r>
 80064f4:	89a3      	ldrh	r3, [r4, #12]
 80064f6:	4632      	mov	r2, r6
 80064f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064fc:	81a3      	strh	r3, [r4, #12]
 80064fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006502:	463b      	mov	r3, r7
 8006504:	4628      	mov	r0, r5
 8006506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800650a:	f000 b877 	b.w	80065fc <_write_r>

0800650e <__sseek>:
 800650e:	b510      	push	{r4, lr}
 8006510:	460c      	mov	r4, r1
 8006512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006516:	f000 f9b1 	bl	800687c <_lseek_r>
 800651a:	1c43      	adds	r3, r0, #1
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	bf15      	itete	ne
 8006520:	6560      	strne	r0, [r4, #84]	; 0x54
 8006522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800652a:	81a3      	strheq	r3, [r4, #12]
 800652c:	bf18      	it	ne
 800652e:	81a3      	strhne	r3, [r4, #12]
 8006530:	bd10      	pop	{r4, pc}

08006532 <__sclose>:
 8006532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006536:	f000 b8e1 	b.w	80066fc <_close_r>
	...

0800653c <__swbuf_r>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	460e      	mov	r6, r1
 8006540:	4614      	mov	r4, r2
 8006542:	4605      	mov	r5, r0
 8006544:	b118      	cbz	r0, 800654e <__swbuf_r+0x12>
 8006546:	6983      	ldr	r3, [r0, #24]
 8006548:	b90b      	cbnz	r3, 800654e <__swbuf_r+0x12>
 800654a:	f7ff fbe3 	bl	8005d14 <__sinit>
 800654e:	4b21      	ldr	r3, [pc, #132]	; (80065d4 <__swbuf_r+0x98>)
 8006550:	429c      	cmp	r4, r3
 8006552:	d12a      	bne.n	80065aa <__swbuf_r+0x6e>
 8006554:	686c      	ldr	r4, [r5, #4]
 8006556:	69a3      	ldr	r3, [r4, #24]
 8006558:	60a3      	str	r3, [r4, #8]
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	071a      	lsls	r2, r3, #28
 800655e:	d52e      	bpl.n	80065be <__swbuf_r+0x82>
 8006560:	6923      	ldr	r3, [r4, #16]
 8006562:	b363      	cbz	r3, 80065be <__swbuf_r+0x82>
 8006564:	6923      	ldr	r3, [r4, #16]
 8006566:	6820      	ldr	r0, [r4, #0]
 8006568:	b2f6      	uxtb	r6, r6
 800656a:	1ac0      	subs	r0, r0, r3
 800656c:	6963      	ldr	r3, [r4, #20]
 800656e:	4637      	mov	r7, r6
 8006570:	4283      	cmp	r3, r0
 8006572:	dc04      	bgt.n	800657e <__swbuf_r+0x42>
 8006574:	4621      	mov	r1, r4
 8006576:	4628      	mov	r0, r5
 8006578:	f000 f956 	bl	8006828 <_fflush_r>
 800657c:	bb28      	cbnz	r0, 80065ca <__swbuf_r+0x8e>
 800657e:	68a3      	ldr	r3, [r4, #8]
 8006580:	3001      	adds	r0, #1
 8006582:	3b01      	subs	r3, #1
 8006584:	60a3      	str	r3, [r4, #8]
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	6022      	str	r2, [r4, #0]
 800658c:	701e      	strb	r6, [r3, #0]
 800658e:	6963      	ldr	r3, [r4, #20]
 8006590:	4283      	cmp	r3, r0
 8006592:	d004      	beq.n	800659e <__swbuf_r+0x62>
 8006594:	89a3      	ldrh	r3, [r4, #12]
 8006596:	07db      	lsls	r3, r3, #31
 8006598:	d519      	bpl.n	80065ce <__swbuf_r+0x92>
 800659a:	2e0a      	cmp	r6, #10
 800659c:	d117      	bne.n	80065ce <__swbuf_r+0x92>
 800659e:	4621      	mov	r1, r4
 80065a0:	4628      	mov	r0, r5
 80065a2:	f000 f941 	bl	8006828 <_fflush_r>
 80065a6:	b190      	cbz	r0, 80065ce <__swbuf_r+0x92>
 80065a8:	e00f      	b.n	80065ca <__swbuf_r+0x8e>
 80065aa:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <__swbuf_r+0x9c>)
 80065ac:	429c      	cmp	r4, r3
 80065ae:	d101      	bne.n	80065b4 <__swbuf_r+0x78>
 80065b0:	68ac      	ldr	r4, [r5, #8]
 80065b2:	e7d0      	b.n	8006556 <__swbuf_r+0x1a>
 80065b4:	4b09      	ldr	r3, [pc, #36]	; (80065dc <__swbuf_r+0xa0>)
 80065b6:	429c      	cmp	r4, r3
 80065b8:	bf08      	it	eq
 80065ba:	68ec      	ldreq	r4, [r5, #12]
 80065bc:	e7cb      	b.n	8006556 <__swbuf_r+0x1a>
 80065be:	4621      	mov	r1, r4
 80065c0:	4628      	mov	r0, r5
 80065c2:	f000 f82d 	bl	8006620 <__swsetup_r>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d0cc      	beq.n	8006564 <__swbuf_r+0x28>
 80065ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80065ce:	4638      	mov	r0, r7
 80065d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065d2:	bf00      	nop
 80065d4:	08006c00 	.word	0x08006c00
 80065d8:	08006c20 	.word	0x08006c20
 80065dc:	08006be0 	.word	0x08006be0

080065e0 <__ascii_wctomb>:
 80065e0:	b149      	cbz	r1, 80065f6 <__ascii_wctomb+0x16>
 80065e2:	2aff      	cmp	r2, #255	; 0xff
 80065e4:	bf8b      	itete	hi
 80065e6:	238a      	movhi	r3, #138	; 0x8a
 80065e8:	700a      	strbls	r2, [r1, #0]
 80065ea:	6003      	strhi	r3, [r0, #0]
 80065ec:	2001      	movls	r0, #1
 80065ee:	bf88      	it	hi
 80065f0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80065f4:	4770      	bx	lr
 80065f6:	4608      	mov	r0, r1
 80065f8:	4770      	bx	lr
	...

080065fc <_write_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	4605      	mov	r5, r0
 8006600:	4608      	mov	r0, r1
 8006602:	4611      	mov	r1, r2
 8006604:	2200      	movs	r2, #0
 8006606:	4c05      	ldr	r4, [pc, #20]	; (800661c <_write_r+0x20>)
 8006608:	6022      	str	r2, [r4, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	f7f9 fdce 	bl	80001ac <_write>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d102      	bne.n	800661a <_write_r+0x1e>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	b103      	cbz	r3, 800661a <_write_r+0x1e>
 8006618:	602b      	str	r3, [r5, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	20001cc8 	.word	0x20001cc8

08006620 <__swsetup_r>:
 8006620:	4b32      	ldr	r3, [pc, #200]	; (80066ec <__swsetup_r+0xcc>)
 8006622:	b570      	push	{r4, r5, r6, lr}
 8006624:	681d      	ldr	r5, [r3, #0]
 8006626:	4606      	mov	r6, r0
 8006628:	460c      	mov	r4, r1
 800662a:	b125      	cbz	r5, 8006636 <__swsetup_r+0x16>
 800662c:	69ab      	ldr	r3, [r5, #24]
 800662e:	b913      	cbnz	r3, 8006636 <__swsetup_r+0x16>
 8006630:	4628      	mov	r0, r5
 8006632:	f7ff fb6f 	bl	8005d14 <__sinit>
 8006636:	4b2e      	ldr	r3, [pc, #184]	; (80066f0 <__swsetup_r+0xd0>)
 8006638:	429c      	cmp	r4, r3
 800663a:	d10f      	bne.n	800665c <__swsetup_r+0x3c>
 800663c:	686c      	ldr	r4, [r5, #4]
 800663e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006642:	b29a      	uxth	r2, r3
 8006644:	0715      	lsls	r5, r2, #28
 8006646:	d42c      	bmi.n	80066a2 <__swsetup_r+0x82>
 8006648:	06d0      	lsls	r0, r2, #27
 800664a:	d411      	bmi.n	8006670 <__swsetup_r+0x50>
 800664c:	2209      	movs	r2, #9
 800664e:	6032      	str	r2, [r6, #0]
 8006650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006654:	81a3      	strh	r3, [r4, #12]
 8006656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800665a:	e03e      	b.n	80066da <__swsetup_r+0xba>
 800665c:	4b25      	ldr	r3, [pc, #148]	; (80066f4 <__swsetup_r+0xd4>)
 800665e:	429c      	cmp	r4, r3
 8006660:	d101      	bne.n	8006666 <__swsetup_r+0x46>
 8006662:	68ac      	ldr	r4, [r5, #8]
 8006664:	e7eb      	b.n	800663e <__swsetup_r+0x1e>
 8006666:	4b24      	ldr	r3, [pc, #144]	; (80066f8 <__swsetup_r+0xd8>)
 8006668:	429c      	cmp	r4, r3
 800666a:	bf08      	it	eq
 800666c:	68ec      	ldreq	r4, [r5, #12]
 800666e:	e7e6      	b.n	800663e <__swsetup_r+0x1e>
 8006670:	0751      	lsls	r1, r2, #29
 8006672:	d512      	bpl.n	800669a <__swsetup_r+0x7a>
 8006674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006676:	b141      	cbz	r1, 800668a <__swsetup_r+0x6a>
 8006678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800667c:	4299      	cmp	r1, r3
 800667e:	d002      	beq.n	8006686 <__swsetup_r+0x66>
 8006680:	4630      	mov	r0, r6
 8006682:	f000 f981 	bl	8006988 <_free_r>
 8006686:	2300      	movs	r3, #0
 8006688:	6363      	str	r3, [r4, #52]	; 0x34
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006690:	81a3      	strh	r3, [r4, #12]
 8006692:	2300      	movs	r3, #0
 8006694:	6063      	str	r3, [r4, #4]
 8006696:	6923      	ldr	r3, [r4, #16]
 8006698:	6023      	str	r3, [r4, #0]
 800669a:	89a3      	ldrh	r3, [r4, #12]
 800669c:	f043 0308 	orr.w	r3, r3, #8
 80066a0:	81a3      	strh	r3, [r4, #12]
 80066a2:	6923      	ldr	r3, [r4, #16]
 80066a4:	b94b      	cbnz	r3, 80066ba <__swsetup_r+0x9a>
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066b0:	d003      	beq.n	80066ba <__swsetup_r+0x9a>
 80066b2:	4621      	mov	r1, r4
 80066b4:	4630      	mov	r0, r6
 80066b6:	f000 f917 	bl	80068e8 <__smakebuf_r>
 80066ba:	89a2      	ldrh	r2, [r4, #12]
 80066bc:	f012 0301 	ands.w	r3, r2, #1
 80066c0:	d00c      	beq.n	80066dc <__swsetup_r+0xbc>
 80066c2:	2300      	movs	r3, #0
 80066c4:	60a3      	str	r3, [r4, #8]
 80066c6:	6963      	ldr	r3, [r4, #20]
 80066c8:	425b      	negs	r3, r3
 80066ca:	61a3      	str	r3, [r4, #24]
 80066cc:	6923      	ldr	r3, [r4, #16]
 80066ce:	b953      	cbnz	r3, 80066e6 <__swsetup_r+0xc6>
 80066d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80066d8:	d1ba      	bne.n	8006650 <__swsetup_r+0x30>
 80066da:	bd70      	pop	{r4, r5, r6, pc}
 80066dc:	0792      	lsls	r2, r2, #30
 80066de:	bf58      	it	pl
 80066e0:	6963      	ldrpl	r3, [r4, #20]
 80066e2:	60a3      	str	r3, [r4, #8]
 80066e4:	e7f2      	b.n	80066cc <__swsetup_r+0xac>
 80066e6:	2000      	movs	r0, #0
 80066e8:	e7f7      	b.n	80066da <__swsetup_r+0xba>
 80066ea:	bf00      	nop
 80066ec:	20000024 	.word	0x20000024
 80066f0:	08006c00 	.word	0x08006c00
 80066f4:	08006c20 	.word	0x08006c20
 80066f8:	08006be0 	.word	0x08006be0

080066fc <_close_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	2300      	movs	r3, #0
 8006700:	4c05      	ldr	r4, [pc, #20]	; (8006718 <_close_r+0x1c>)
 8006702:	4605      	mov	r5, r0
 8006704:	4608      	mov	r0, r1
 8006706:	6023      	str	r3, [r4, #0]
 8006708:	f7fa f9c5 	bl	8000a96 <_close>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_close_r+0x1a>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	b103      	cbz	r3, 8006716 <_close_r+0x1a>
 8006714:	602b      	str	r3, [r5, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	20001cc8 	.word	0x20001cc8

0800671c <__sflush_r>:
 800671c:	898a      	ldrh	r2, [r1, #12]
 800671e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006722:	4605      	mov	r5, r0
 8006724:	0710      	lsls	r0, r2, #28
 8006726:	460c      	mov	r4, r1
 8006728:	d458      	bmi.n	80067dc <__sflush_r+0xc0>
 800672a:	684b      	ldr	r3, [r1, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	dc05      	bgt.n	800673c <__sflush_r+0x20>
 8006730:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006732:	2b00      	cmp	r3, #0
 8006734:	dc02      	bgt.n	800673c <__sflush_r+0x20>
 8006736:	2000      	movs	r0, #0
 8006738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800673c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800673e:	2e00      	cmp	r6, #0
 8006740:	d0f9      	beq.n	8006736 <__sflush_r+0x1a>
 8006742:	2300      	movs	r3, #0
 8006744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006748:	682f      	ldr	r7, [r5, #0]
 800674a:	6a21      	ldr	r1, [r4, #32]
 800674c:	602b      	str	r3, [r5, #0]
 800674e:	d032      	beq.n	80067b6 <__sflush_r+0x9a>
 8006750:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	075a      	lsls	r2, r3, #29
 8006756:	d505      	bpl.n	8006764 <__sflush_r+0x48>
 8006758:	6863      	ldr	r3, [r4, #4]
 800675a:	1ac0      	subs	r0, r0, r3
 800675c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800675e:	b10b      	cbz	r3, 8006764 <__sflush_r+0x48>
 8006760:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006762:	1ac0      	subs	r0, r0, r3
 8006764:	2300      	movs	r3, #0
 8006766:	4602      	mov	r2, r0
 8006768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800676a:	6a21      	ldr	r1, [r4, #32]
 800676c:	4628      	mov	r0, r5
 800676e:	47b0      	blx	r6
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	d106      	bne.n	8006784 <__sflush_r+0x68>
 8006776:	6829      	ldr	r1, [r5, #0]
 8006778:	291d      	cmp	r1, #29
 800677a:	d848      	bhi.n	800680e <__sflush_r+0xf2>
 800677c:	4a29      	ldr	r2, [pc, #164]	; (8006824 <__sflush_r+0x108>)
 800677e:	40ca      	lsrs	r2, r1
 8006780:	07d6      	lsls	r6, r2, #31
 8006782:	d544      	bpl.n	800680e <__sflush_r+0xf2>
 8006784:	2200      	movs	r2, #0
 8006786:	6062      	str	r2, [r4, #4]
 8006788:	6922      	ldr	r2, [r4, #16]
 800678a:	04d9      	lsls	r1, r3, #19
 800678c:	6022      	str	r2, [r4, #0]
 800678e:	d504      	bpl.n	800679a <__sflush_r+0x7e>
 8006790:	1c42      	adds	r2, r0, #1
 8006792:	d101      	bne.n	8006798 <__sflush_r+0x7c>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	b903      	cbnz	r3, 800679a <__sflush_r+0x7e>
 8006798:	6560      	str	r0, [r4, #84]	; 0x54
 800679a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800679c:	602f      	str	r7, [r5, #0]
 800679e:	2900      	cmp	r1, #0
 80067a0:	d0c9      	beq.n	8006736 <__sflush_r+0x1a>
 80067a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067a6:	4299      	cmp	r1, r3
 80067a8:	d002      	beq.n	80067b0 <__sflush_r+0x94>
 80067aa:	4628      	mov	r0, r5
 80067ac:	f000 f8ec 	bl	8006988 <_free_r>
 80067b0:	2000      	movs	r0, #0
 80067b2:	6360      	str	r0, [r4, #52]	; 0x34
 80067b4:	e7c0      	b.n	8006738 <__sflush_r+0x1c>
 80067b6:	2301      	movs	r3, #1
 80067b8:	4628      	mov	r0, r5
 80067ba:	47b0      	blx	r6
 80067bc:	1c41      	adds	r1, r0, #1
 80067be:	d1c8      	bne.n	8006752 <__sflush_r+0x36>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0c5      	beq.n	8006752 <__sflush_r+0x36>
 80067c6:	2b1d      	cmp	r3, #29
 80067c8:	d001      	beq.n	80067ce <__sflush_r+0xb2>
 80067ca:	2b16      	cmp	r3, #22
 80067cc:	d101      	bne.n	80067d2 <__sflush_r+0xb6>
 80067ce:	602f      	str	r7, [r5, #0]
 80067d0:	e7b1      	b.n	8006736 <__sflush_r+0x1a>
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067d8:	81a3      	strh	r3, [r4, #12]
 80067da:	e7ad      	b.n	8006738 <__sflush_r+0x1c>
 80067dc:	690f      	ldr	r7, [r1, #16]
 80067de:	2f00      	cmp	r7, #0
 80067e0:	d0a9      	beq.n	8006736 <__sflush_r+0x1a>
 80067e2:	0793      	lsls	r3, r2, #30
 80067e4:	bf18      	it	ne
 80067e6:	2300      	movne	r3, #0
 80067e8:	680e      	ldr	r6, [r1, #0]
 80067ea:	bf08      	it	eq
 80067ec:	694b      	ldreq	r3, [r1, #20]
 80067ee:	eba6 0807 	sub.w	r8, r6, r7
 80067f2:	600f      	str	r7, [r1, #0]
 80067f4:	608b      	str	r3, [r1, #8]
 80067f6:	f1b8 0f00 	cmp.w	r8, #0
 80067fa:	dd9c      	ble.n	8006736 <__sflush_r+0x1a>
 80067fc:	4643      	mov	r3, r8
 80067fe:	463a      	mov	r2, r7
 8006800:	6a21      	ldr	r1, [r4, #32]
 8006802:	4628      	mov	r0, r5
 8006804:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006806:	47b0      	blx	r6
 8006808:	2800      	cmp	r0, #0
 800680a:	dc06      	bgt.n	800681a <__sflush_r+0xfe>
 800680c:	89a3      	ldrh	r3, [r4, #12]
 800680e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006812:	81a3      	strh	r3, [r4, #12]
 8006814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006818:	e78e      	b.n	8006738 <__sflush_r+0x1c>
 800681a:	4407      	add	r7, r0
 800681c:	eba8 0800 	sub.w	r8, r8, r0
 8006820:	e7e9      	b.n	80067f6 <__sflush_r+0xda>
 8006822:	bf00      	nop
 8006824:	20400001 	.word	0x20400001

08006828 <_fflush_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	690b      	ldr	r3, [r1, #16]
 800682c:	4605      	mov	r5, r0
 800682e:	460c      	mov	r4, r1
 8006830:	b1db      	cbz	r3, 800686a <_fflush_r+0x42>
 8006832:	b118      	cbz	r0, 800683c <_fflush_r+0x14>
 8006834:	6983      	ldr	r3, [r0, #24]
 8006836:	b90b      	cbnz	r3, 800683c <_fflush_r+0x14>
 8006838:	f7ff fa6c 	bl	8005d14 <__sinit>
 800683c:	4b0c      	ldr	r3, [pc, #48]	; (8006870 <_fflush_r+0x48>)
 800683e:	429c      	cmp	r4, r3
 8006840:	d109      	bne.n	8006856 <_fflush_r+0x2e>
 8006842:	686c      	ldr	r4, [r5, #4]
 8006844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006848:	b17b      	cbz	r3, 800686a <_fflush_r+0x42>
 800684a:	4621      	mov	r1, r4
 800684c:	4628      	mov	r0, r5
 800684e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006852:	f7ff bf63 	b.w	800671c <__sflush_r>
 8006856:	4b07      	ldr	r3, [pc, #28]	; (8006874 <_fflush_r+0x4c>)
 8006858:	429c      	cmp	r4, r3
 800685a:	d101      	bne.n	8006860 <_fflush_r+0x38>
 800685c:	68ac      	ldr	r4, [r5, #8]
 800685e:	e7f1      	b.n	8006844 <_fflush_r+0x1c>
 8006860:	4b05      	ldr	r3, [pc, #20]	; (8006878 <_fflush_r+0x50>)
 8006862:	429c      	cmp	r4, r3
 8006864:	bf08      	it	eq
 8006866:	68ec      	ldreq	r4, [r5, #12]
 8006868:	e7ec      	b.n	8006844 <_fflush_r+0x1c>
 800686a:	2000      	movs	r0, #0
 800686c:	bd38      	pop	{r3, r4, r5, pc}
 800686e:	bf00      	nop
 8006870:	08006c00 	.word	0x08006c00
 8006874:	08006c20 	.word	0x08006c20
 8006878:	08006be0 	.word	0x08006be0

0800687c <_lseek_r>:
 800687c:	b538      	push	{r3, r4, r5, lr}
 800687e:	4605      	mov	r5, r0
 8006880:	4608      	mov	r0, r1
 8006882:	4611      	mov	r1, r2
 8006884:	2200      	movs	r2, #0
 8006886:	4c05      	ldr	r4, [pc, #20]	; (800689c <_lseek_r+0x20>)
 8006888:	6022      	str	r2, [r4, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	f7fa f927 	bl	8000ade <_lseek>
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d102      	bne.n	800689a <_lseek_r+0x1e>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	b103      	cbz	r3, 800689a <_lseek_r+0x1e>
 8006898:	602b      	str	r3, [r5, #0]
 800689a:	bd38      	pop	{r3, r4, r5, pc}
 800689c:	20001cc8 	.word	0x20001cc8

080068a0 <__swhatbuf_r>:
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	460e      	mov	r6, r1
 80068a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a8:	b096      	sub	sp, #88	; 0x58
 80068aa:	2900      	cmp	r1, #0
 80068ac:	4614      	mov	r4, r2
 80068ae:	461d      	mov	r5, r3
 80068b0:	da07      	bge.n	80068c2 <__swhatbuf_r+0x22>
 80068b2:	2300      	movs	r3, #0
 80068b4:	602b      	str	r3, [r5, #0]
 80068b6:	89b3      	ldrh	r3, [r6, #12]
 80068b8:	061a      	lsls	r2, r3, #24
 80068ba:	d410      	bmi.n	80068de <__swhatbuf_r+0x3e>
 80068bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068c0:	e00e      	b.n	80068e0 <__swhatbuf_r+0x40>
 80068c2:	466a      	mov	r2, sp
 80068c4:	f000 f8be 	bl	8006a44 <_fstat_r>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	dbf2      	blt.n	80068b2 <__swhatbuf_r+0x12>
 80068cc:	9a01      	ldr	r2, [sp, #4]
 80068ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068d6:	425a      	negs	r2, r3
 80068d8:	415a      	adcs	r2, r3
 80068da:	602a      	str	r2, [r5, #0]
 80068dc:	e7ee      	b.n	80068bc <__swhatbuf_r+0x1c>
 80068de:	2340      	movs	r3, #64	; 0x40
 80068e0:	2000      	movs	r0, #0
 80068e2:	6023      	str	r3, [r4, #0]
 80068e4:	b016      	add	sp, #88	; 0x58
 80068e6:	bd70      	pop	{r4, r5, r6, pc}

080068e8 <__smakebuf_r>:
 80068e8:	898b      	ldrh	r3, [r1, #12]
 80068ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068ec:	079d      	lsls	r5, r3, #30
 80068ee:	4606      	mov	r6, r0
 80068f0:	460c      	mov	r4, r1
 80068f2:	d507      	bpl.n	8006904 <__smakebuf_r+0x1c>
 80068f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	6123      	str	r3, [r4, #16]
 80068fc:	2301      	movs	r3, #1
 80068fe:	6163      	str	r3, [r4, #20]
 8006900:	b002      	add	sp, #8
 8006902:	bd70      	pop	{r4, r5, r6, pc}
 8006904:	ab01      	add	r3, sp, #4
 8006906:	466a      	mov	r2, sp
 8006908:	f7ff ffca 	bl	80068a0 <__swhatbuf_r>
 800690c:	9900      	ldr	r1, [sp, #0]
 800690e:	4605      	mov	r5, r0
 8006910:	4630      	mov	r0, r6
 8006912:	f7ff fa9f 	bl	8005e54 <_malloc_r>
 8006916:	b948      	cbnz	r0, 800692c <__smakebuf_r+0x44>
 8006918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800691c:	059a      	lsls	r2, r3, #22
 800691e:	d4ef      	bmi.n	8006900 <__smakebuf_r+0x18>
 8006920:	f023 0303 	bic.w	r3, r3, #3
 8006924:	f043 0302 	orr.w	r3, r3, #2
 8006928:	81a3      	strh	r3, [r4, #12]
 800692a:	e7e3      	b.n	80068f4 <__smakebuf_r+0xc>
 800692c:	4b0d      	ldr	r3, [pc, #52]	; (8006964 <__smakebuf_r+0x7c>)
 800692e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006930:	89a3      	ldrh	r3, [r4, #12]
 8006932:	6020      	str	r0, [r4, #0]
 8006934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006938:	81a3      	strh	r3, [r4, #12]
 800693a:	9b00      	ldr	r3, [sp, #0]
 800693c:	6120      	str	r0, [r4, #16]
 800693e:	6163      	str	r3, [r4, #20]
 8006940:	9b01      	ldr	r3, [sp, #4]
 8006942:	b15b      	cbz	r3, 800695c <__smakebuf_r+0x74>
 8006944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006948:	4630      	mov	r0, r6
 800694a:	f000 f88d 	bl	8006a68 <_isatty_r>
 800694e:	b128      	cbz	r0, 800695c <__smakebuf_r+0x74>
 8006950:	89a3      	ldrh	r3, [r4, #12]
 8006952:	f023 0303 	bic.w	r3, r3, #3
 8006956:	f043 0301 	orr.w	r3, r3, #1
 800695a:	81a3      	strh	r3, [r4, #12]
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	431d      	orrs	r5, r3
 8006960:	81a5      	strh	r5, [r4, #12]
 8006962:	e7cd      	b.n	8006900 <__smakebuf_r+0x18>
 8006964:	08005cdd 	.word	0x08005cdd

08006968 <memchr>:
 8006968:	b510      	push	{r4, lr}
 800696a:	b2c9      	uxtb	r1, r1
 800696c:	4402      	add	r2, r0
 800696e:	4290      	cmp	r0, r2
 8006970:	4603      	mov	r3, r0
 8006972:	d101      	bne.n	8006978 <memchr+0x10>
 8006974:	2300      	movs	r3, #0
 8006976:	e003      	b.n	8006980 <memchr+0x18>
 8006978:	781c      	ldrb	r4, [r3, #0]
 800697a:	3001      	adds	r0, #1
 800697c:	428c      	cmp	r4, r1
 800697e:	d1f6      	bne.n	800696e <memchr+0x6>
 8006980:	4618      	mov	r0, r3
 8006982:	bd10      	pop	{r4, pc}

08006984 <__malloc_lock>:
 8006984:	4770      	bx	lr

08006986 <__malloc_unlock>:
 8006986:	4770      	bx	lr

08006988 <_free_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4605      	mov	r5, r0
 800698c:	2900      	cmp	r1, #0
 800698e:	d043      	beq.n	8006a18 <_free_r+0x90>
 8006990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006994:	1f0c      	subs	r4, r1, #4
 8006996:	2b00      	cmp	r3, #0
 8006998:	bfb8      	it	lt
 800699a:	18e4      	addlt	r4, r4, r3
 800699c:	f7ff fff2 	bl	8006984 <__malloc_lock>
 80069a0:	4a1e      	ldr	r2, [pc, #120]	; (8006a1c <_free_r+0x94>)
 80069a2:	6813      	ldr	r3, [r2, #0]
 80069a4:	4610      	mov	r0, r2
 80069a6:	b933      	cbnz	r3, 80069b6 <_free_r+0x2e>
 80069a8:	6063      	str	r3, [r4, #4]
 80069aa:	6014      	str	r4, [r2, #0]
 80069ac:	4628      	mov	r0, r5
 80069ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069b2:	f7ff bfe8 	b.w	8006986 <__malloc_unlock>
 80069b6:	42a3      	cmp	r3, r4
 80069b8:	d90b      	bls.n	80069d2 <_free_r+0x4a>
 80069ba:	6821      	ldr	r1, [r4, #0]
 80069bc:	1862      	adds	r2, r4, r1
 80069be:	4293      	cmp	r3, r2
 80069c0:	bf01      	itttt	eq
 80069c2:	681a      	ldreq	r2, [r3, #0]
 80069c4:	685b      	ldreq	r3, [r3, #4]
 80069c6:	1852      	addeq	r2, r2, r1
 80069c8:	6022      	streq	r2, [r4, #0]
 80069ca:	6063      	str	r3, [r4, #4]
 80069cc:	6004      	str	r4, [r0, #0]
 80069ce:	e7ed      	b.n	80069ac <_free_r+0x24>
 80069d0:	4613      	mov	r3, r2
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	b10a      	cbz	r2, 80069da <_free_r+0x52>
 80069d6:	42a2      	cmp	r2, r4
 80069d8:	d9fa      	bls.n	80069d0 <_free_r+0x48>
 80069da:	6819      	ldr	r1, [r3, #0]
 80069dc:	1858      	adds	r0, r3, r1
 80069de:	42a0      	cmp	r0, r4
 80069e0:	d10b      	bne.n	80069fa <_free_r+0x72>
 80069e2:	6820      	ldr	r0, [r4, #0]
 80069e4:	4401      	add	r1, r0
 80069e6:	1858      	adds	r0, r3, r1
 80069e8:	4282      	cmp	r2, r0
 80069ea:	6019      	str	r1, [r3, #0]
 80069ec:	d1de      	bne.n	80069ac <_free_r+0x24>
 80069ee:	6810      	ldr	r0, [r2, #0]
 80069f0:	6852      	ldr	r2, [r2, #4]
 80069f2:	4401      	add	r1, r0
 80069f4:	6019      	str	r1, [r3, #0]
 80069f6:	605a      	str	r2, [r3, #4]
 80069f8:	e7d8      	b.n	80069ac <_free_r+0x24>
 80069fa:	d902      	bls.n	8006a02 <_free_r+0x7a>
 80069fc:	230c      	movs	r3, #12
 80069fe:	602b      	str	r3, [r5, #0]
 8006a00:	e7d4      	b.n	80069ac <_free_r+0x24>
 8006a02:	6820      	ldr	r0, [r4, #0]
 8006a04:	1821      	adds	r1, r4, r0
 8006a06:	428a      	cmp	r2, r1
 8006a08:	bf01      	itttt	eq
 8006a0a:	6811      	ldreq	r1, [r2, #0]
 8006a0c:	6852      	ldreq	r2, [r2, #4]
 8006a0e:	1809      	addeq	r1, r1, r0
 8006a10:	6021      	streq	r1, [r4, #0]
 8006a12:	6062      	str	r2, [r4, #4]
 8006a14:	605c      	str	r4, [r3, #4]
 8006a16:	e7c9      	b.n	80069ac <_free_r+0x24>
 8006a18:	bd38      	pop	{r3, r4, r5, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20001b5c 	.word	0x20001b5c

08006a20 <_read_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4605      	mov	r5, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	4611      	mov	r1, r2
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4c05      	ldr	r4, [pc, #20]	; (8006a40 <_read_r+0x20>)
 8006a2c:	6022      	str	r2, [r4, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f7fa f814 	bl	8000a5c <_read>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d102      	bne.n	8006a3e <_read_r+0x1e>
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	b103      	cbz	r3, 8006a3e <_read_r+0x1e>
 8006a3c:	602b      	str	r3, [r5, #0]
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	20001cc8 	.word	0x20001cc8

08006a44 <_fstat_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	2300      	movs	r3, #0
 8006a48:	4c06      	ldr	r4, [pc, #24]	; (8006a64 <_fstat_r+0x20>)
 8006a4a:	4605      	mov	r5, r0
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	4611      	mov	r1, r2
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	f7fa f82b 	bl	8000aac <_fstat>
 8006a56:	1c43      	adds	r3, r0, #1
 8006a58:	d102      	bne.n	8006a60 <_fstat_r+0x1c>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	b103      	cbz	r3, 8006a60 <_fstat_r+0x1c>
 8006a5e:	602b      	str	r3, [r5, #0]
 8006a60:	bd38      	pop	{r3, r4, r5, pc}
 8006a62:	bf00      	nop
 8006a64:	20001cc8 	.word	0x20001cc8

08006a68 <_isatty_r>:
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	4c05      	ldr	r4, [pc, #20]	; (8006a84 <_isatty_r+0x1c>)
 8006a6e:	4605      	mov	r5, r0
 8006a70:	4608      	mov	r0, r1
 8006a72:	6023      	str	r3, [r4, #0]
 8006a74:	f7fa f829 	bl	8000aca <_isatty>
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	d102      	bne.n	8006a82 <_isatty_r+0x1a>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	b103      	cbz	r3, 8006a82 <_isatty_r+0x1a>
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	20001cc8 	.word	0x20001cc8

08006a88 <_init>:
 8006a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8a:	bf00      	nop
 8006a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a8e:	bc08      	pop	{r3}
 8006a90:	469e      	mov	lr, r3
 8006a92:	4770      	bx	lr

08006a94 <_fini>:
 8006a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a96:	bf00      	nop
 8006a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9a:	bc08      	pop	{r3}
 8006a9c:	469e      	mov	lr, r3
 8006a9e:	4770      	bx	lr
