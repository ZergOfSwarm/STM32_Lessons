
USB_MSC_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800ff08  0800ff08  0001ff08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010214  08010214  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08010214  08010214  00020214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801021c  0801021c  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801021c  0801021c  0002021c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010220  08010220  00020220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08010224  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          00006924  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200069b8  200069b8  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028e81  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005cb4  00000000  00000000  00058f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c58  00000000  00000000  0005ec00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a10  00000000  00000000  00060858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029f19  00000000  00000000  00062268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000278a5  00000000  00000000  0008c181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbda7  00000000  00000000  000b3a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018f7cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007edc  00000000  00000000  0018f820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fef0 	.word	0x0800fef0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800fef0 	.word	0x0800fef0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <vApplicationGetIdleTaskMemory+0x30>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	200000b0 	.word	0x200000b0
 80005b4:	20000164 	.word	0x20000164

080005b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d013      	beq.n	80005f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00b      	beq.n	80005f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005e0:	e000      	b.n	80005e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f9      	beq.n	80005e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <_write>:
static void MX_USART1_UART_Init(void);
void StartDefaultTask(void const *argument);
void Start_USB_Task(void const *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	b29a      	uxth	r2, r3
 8000618:	2332      	movs	r3, #50	; 0x32
 800061a:	68b9      	ldr	r1, [r7, #8]
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <_write+0x48>)
 800061e:	f003 fb5a 	bl	8003cd6 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	e009      	b.n	800063c <_write+0x34>
		ITM_SendChar(*ptr++);
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	60ba      	str	r2, [r7, #8]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ffc1 	bl	80005b8 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	3301      	adds	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	dbf1      	blt.n	8000628 <_write+0x20>
	}
	return len;
 8000644:	687b      	ldr	r3, [r7, #4]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3718      	adds	r7, #24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000378 	.word	0x20000378

08000654 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000654:	b5b0      	push	{r4, r5, r7, lr}
 8000656:	b08e      	sub	sp, #56	; 0x38
 8000658:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800065a:	f000 fc57 	bl	8000f0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800065e:	f000 f83b 	bl	80006d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000662:	f000 f8cd 	bl	8000800 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000666:	f000 f8a1 	bl	80007ac <MX_USART1_UART_Init>
	MX_FATFS_Init();
 800066a:	f004 fe8f 	bl	800538c <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	printf("Hello world! \r\n");
 800066e:	4815      	ldr	r0, [pc, #84]	; (80006c4 <main+0x70>)
 8000670:	f00e fc60 	bl	800ef34 <puts>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <main+0x74>)
 8000676:	f107 041c 	add.w	r4, r7, #28
 800067a:	461d      	mov	r5, r3
 800067c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000680:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f00b f832 	bl	800b6f8 <osThreadCreate>
 8000694:	4603      	mov	r3, r0
 8000696:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <main+0x78>)
 8000698:	6013      	str	r3, [r2, #0]

	/* definition and creation of my_USB_Task */
	osThreadDef(my_USB_Task, Start_USB_Task, osPriorityIdle, 0, 1024);
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <main+0x7c>)
 800069c:	463c      	mov	r4, r7
 800069e:	461d      	mov	r5, r3
 80006a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	my_USB_TaskHandle = osThreadCreate(osThread(my_USB_Task), NULL);
 80006ac:	463b      	mov	r3, r7
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00b f821 	bl	800b6f8 <osThreadCreate>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <main+0x80>)
 80006ba:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80006bc:	f00b f815 	bl	800b6ea <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80006c0:	e7fe      	b.n	80006c0 <main+0x6c>
 80006c2:	bf00      	nop
 80006c4:	0800ff20 	.word	0x0800ff20
 80006c8:	0800ff30 	.word	0x0800ff30
 80006cc:	200003bc 	.word	0x200003bc
 80006d0:	0800ff4c 	.word	0x0800ff4c
 80006d4:	200003c0 	.word	0x200003c0

080006d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f00e fab6 	bl	800ec58 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <SystemClock_Config+0xcc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a27      	ldr	r2, [pc, #156]	; (80007a4 <SystemClock_Config+0xcc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemClock_Config+0xd0>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800074c:	23a8      	movs	r3, #168	; 0xa8
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000754:	2307      	movs	r3, #7
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f002 faf5 	bl	8002d4c <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x94>
		Error_Handler();
 8000768:	f000 f9ec 	bl	8000b44 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000778:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2105      	movs	r1, #5
 800078a:	4618      	mov	r0, r3
 800078c:	f002 fd56 	bl	800323c <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xc2>
		Error_Handler();
 8000796:	f000 f9d5 	bl	8000b44 <Error_Handler>
	}
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <MX_USART1_UART_Init+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007e4:	f003 fa2a 	bl	8003c3c <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80007ee:	f000 f9a9 	bl	8000b44 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000378 	.word	0x20000378
 80007fc:	40011000 	.word	0x40011000

08000800 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <MX_GPIO_Init+0xb0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a24      	ldr	r2, [pc, #144]	; (80008b0 <MX_GPIO_Init+0xb0>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <MX_GPIO_Init+0xb0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_GPIO_Init+0xb0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <MX_GPIO_Init+0xb0>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_GPIO_Init+0xb0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_GPIO_Init+0xb0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <MX_GPIO_Init+0xb0>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_GPIO_Init+0xb0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Vbus_GPIO_Port, Vbus_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2101      	movs	r1, #1
 800086e:	4811      	ldr	r0, [pc, #68]	; (80008b4 <MX_GPIO_Init+0xb4>)
 8000870:	f000 fe48 	bl	8001504 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Vbus_Pin */
	GPIO_InitStruct.Pin = Vbus_Pin;
 8000874:	2301      	movs	r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Vbus_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4619      	mov	r1, r3
 800088a:	480a      	ldr	r0, [pc, #40]	; (80008b4 <MX_GPIO_Init+0xb4>)
 800088c:	f000 fc86 	bl	800119c <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_Pin */
	GPIO_InitStruct.Pin = BTN_Pin;
 8000890:	2301      	movs	r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000898:	2301      	movs	r3, #1
 800089a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_GPIO_Init+0xb8>)
 80008a4:	f000 fc7a 	bl	800119c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020800 	.word	0x40020800
 80008b8:	40020000 	.word	0x40020000

080008bc <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 80008c4:	f00d fd62 	bl	800e38c <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osDelay(100);
 80008c8:	2064      	movs	r0, #100	; 0x64
 80008ca:	f00a ff61 	bl	800b790 <osDelay>
 80008ce:	e7fb      	b.n	80008c8 <StartDefaultTask+0xc>

080008d0 <Start_USB_Task>:
 * @brief Function implementing the my_USB_Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_USB_Task */
void Start_USB_Task(void const *argument) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_USB_Task */
	/* Infinite loop */
	for (;;) {
		switch (Appli_state) {
 80008d8:	4b76      	ldr	r3, [pc, #472]	; (8000ab4 <Start_USB_Task+0x1e4>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b03      	cmp	r3, #3
 80008de:	f200 80e2 	bhi.w	8000aa6 <Start_USB_Task+0x1d6>
 80008e2:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <Start_USB_Task+0x18>)
 80008e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e8:	080008f9 	.word	0x080008f9
 80008ec:	08000927 	.word	0x08000927
 80008f0:	08000963 	.word	0x08000963
 80008f4:	08000a79 	.word	0x08000a79
		case APPLICATION_IDLE:
			if (f_idle == 0) {
 80008f8:	4b6f      	ldr	r3, [pc, #444]	; (8000ab8 <Start_USB_Task+0x1e8>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d10e      	bne.n	800091e <Start_USB_Task+0x4e>
				printf("APPLICATION_IDLE! \r\n");
 8000900:	486e      	ldr	r0, [pc, #440]	; (8000abc <Start_USB_Task+0x1ec>)
 8000902:	f00e fb17 	bl	800ef34 <puts>
				f_idle = 1;
 8000906:	4b6c      	ldr	r3, [pc, #432]	; (8000ab8 <Start_USB_Task+0x1e8>)
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
				f_start = 0;
 800090c:	4b6c      	ldr	r3, [pc, #432]	; (8000ac0 <Start_USB_Task+0x1f0>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
				f_ready = 0;
 8000912:	4b6c      	ldr	r3, [pc, #432]	; (8000ac4 <Start_USB_Task+0x1f4>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
				f_disconnect = 0;
 8000918:	4b6b      	ldr	r3, [pc, #428]	; (8000ac8 <Start_USB_Task+0x1f8>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
			}
			osDelay(100);
 800091e:	2064      	movs	r0, #100	; 0x64
 8000920:	f00a ff36 	bl	800b790 <osDelay>
			break;
 8000924:	e0c4      	b.n	8000ab0 <Start_USB_Task+0x1e0>
		case APPLICATION_START:
			if (f_mount(&USBHFatFS, (const TCHAR*) USBHPath, 0) == FR_OK) {
 8000926:	2200      	movs	r2, #0
 8000928:	4968      	ldr	r1, [pc, #416]	; (8000acc <Start_USB_Task+0x1fc>)
 800092a:	4869      	ldr	r0, [pc, #420]	; (8000ad0 <Start_USB_Task+0x200>)
 800092c:	f009 ffe8 	bl	800a900 <f_mount>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	f040 80b9 	bne.w	8000aaa <Start_USB_Task+0x1da>
				if (f_start == 0) {
 8000938:	4b61      	ldr	r3, [pc, #388]	; (8000ac0 <Start_USB_Task+0x1f0>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	f040 80b4 	bne.w	8000aaa <Start_USB_Task+0x1da>
					printf("APPLICATION_START! \r\n");
 8000942:	4864      	ldr	r0, [pc, #400]	; (8000ad4 <Start_USB_Task+0x204>)
 8000944:	f00e faf6 	bl	800ef34 <puts>
					f_idle = 0;
 8000948:	4b5b      	ldr	r3, [pc, #364]	; (8000ab8 <Start_USB_Task+0x1e8>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
					f_start = 1;
 800094e:	4b5c      	ldr	r3, [pc, #368]	; (8000ac0 <Start_USB_Task+0x1f0>)
 8000950:	2201      	movs	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
					f_ready = 0;
 8000954:	4b5b      	ldr	r3, [pc, #364]	; (8000ac4 <Start_USB_Task+0x1f4>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
					f_disconnect = 0;
 800095a:	4b5b      	ldr	r3, [pc, #364]	; (8000ac8 <Start_USB_Task+0x1f8>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8000960:	e0a3      	b.n	8000aaa <Start_USB_Task+0x1da>
		case APPLICATION_READY:
			if (f_mkdir((const TCHAR*) "ZERG") == FR_OK) {
 8000962:	485d      	ldr	r0, [pc, #372]	; (8000ad8 <Start_USB_Task+0x208>)
 8000964:	f00a fccf 	bl	800b306 <f_mkdir>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d118      	bne.n	80009a0 <Start_USB_Task+0xd0>
				if (f_chdir("ADC") == FR_OK) {
 800096e:	485b      	ldr	r0, [pc, #364]	; (8000adc <Start_USB_Task+0x20c>)
 8000970:	f00a fc78 	bl	800b264 <f_chdir>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d112      	bne.n	80009a0 <Start_USB_Task+0xd0>
					if (f_ready == 0) {
 800097a:	4b52      	ldr	r3, [pc, #328]	; (8000ac4 <Start_USB_Task+0x1f4>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d10e      	bne.n	80009a0 <Start_USB_Task+0xd0>
						printf("Falder 'ZERG' is CREATED! \r\n");
 8000982:	4857      	ldr	r0, [pc, #348]	; (8000ae0 <Start_USB_Task+0x210>)
 8000984:	f00e fad6 	bl	800ef34 <puts>
						f_idle = 0;
 8000988:	4b4b      	ldr	r3, [pc, #300]	; (8000ab8 <Start_USB_Task+0x1e8>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
						f_start = 0;
 800098e:	4b4c      	ldr	r3, [pc, #304]	; (8000ac0 <Start_USB_Task+0x1f0>)
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]
						f_ready = 1;
 8000994:	4b4b      	ldr	r3, [pc, #300]	; (8000ac4 <Start_USB_Task+0x1f4>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
						f_disconnect = 0;
 800099a:	4b4b      	ldr	r3, [pc, #300]	; (8000ac8 <Start_USB_Task+0x1f8>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			btn_cur = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);/*Считываем состояние кнопки*/
 80009a0:	2101      	movs	r1, #1
 80009a2:	4850      	ldr	r0, [pc, #320]	; (8000ae4 <Start_USB_Task+0x214>)
 80009a4:	f000 fd96 	bl	80014d4 <HAL_GPIO_ReadPin>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b4e      	ldr	r3, [pc, #312]	; (8000ae8 <Start_USB_Task+0x218>)
 80009ae:	601a      	str	r2, [r3, #0]
			if ((btn_prev == 0) && (btn_cur != 0))/* т.е. кнопка нажата */
 80009b0:	4b4e      	ldr	r3, [pc, #312]	; (8000aec <Start_USB_Task+0x21c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d147      	bne.n	8000a48 <Start_USB_Task+0x178>
 80009b8:	4b4b      	ldr	r3, [pc, #300]	; (8000ae8 <Start_USB_Task+0x218>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d043      	beq.n	8000a48 <Start_USB_Task+0x178>
			{
				if (HAL_GetTick() - Tbtn >= 300) {
 80009c0:	f000 fada 	bl	8000f78 <HAL_GetTick>
 80009c4:	4602      	mov	r2, r0
 80009c6:	4b4a      	ldr	r3, [pc, #296]	; (8000af0 <Start_USB_Task+0x220>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009d0:	d33a      	bcc.n	8000a48 <Start_USB_Task+0x178>
					i++;
 80009d2:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <Start_USB_Task+0x224>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a46      	ldr	r2, [pc, #280]	; (8000af4 <Start_USB_Task+0x224>)
 80009da:	6013      	str	r3, [r2, #0]

					if (f_open(&USBHFile, (const TCHAR*) "ZERG/SWARM.TXT",
 80009dc:	2232      	movs	r2, #50	; 0x32
 80009de:	4946      	ldr	r1, [pc, #280]	; (8000af8 <Start_USB_Task+0x228>)
 80009e0:	4846      	ldr	r0, [pc, #280]	; (8000afc <Start_USB_Task+0x22c>)
 80009e2:	f009 fff1 	bl	800a9c8 <f_open>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d125      	bne.n	8000a38 <Start_USB_Task+0x168>
							FA_WRITE | FA_OPEN_APPEND) == FR_OK) {
						//sprintf(hold, "%s", "SWARM VALUES NOT PRESENT! \r\n");
						sprintf(hold, "SWARM i = %d\r\n", i);
 80009ec:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <Start_USB_Task+0x224>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4943      	ldr	r1, [pc, #268]	; (8000b00 <Start_USB_Task+0x230>)
 80009f4:	4843      	ldr	r0, [pc, #268]	; (8000b04 <Start_USB_Task+0x234>)
 80009f6:	f00e fb1f 	bl	800f038 <siprintf>
						RES = f_write(&USBHFile, (const void*) hold,strlen(hold), &Byteswritten);
 80009fa:	4842      	ldr	r0, [pc, #264]	; (8000b04 <Start_USB_Task+0x234>)
 80009fc:	f7ff fbe8 	bl	80001d0 <strlen>
 8000a00:	4602      	mov	r2, r0
 8000a02:	4b41      	ldr	r3, [pc, #260]	; (8000b08 <Start_USB_Task+0x238>)
 8000a04:	493f      	ldr	r1, [pc, #252]	; (8000b04 <Start_USB_Task+0x234>)
 8000a06:	483d      	ldr	r0, [pc, #244]	; (8000afc <Start_USB_Task+0x22c>)
 8000a08:	f00a f9b1 	bl	800ad6e <f_write>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <Start_USB_Task+0x23c>)
 8000a12:	701a      	strb	r2, [r3, #0]
						if (RES != FR_OK || Byteswritten == 0) {
 8000a14:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <Start_USB_Task+0x23c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d103      	bne.n	8000a24 <Start_USB_Task+0x154>
 8000a1c:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <Start_USB_Task+0x238>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d103      	bne.n	8000a2c <Start_USB_Task+0x15c>
							printf("RES is NOT OK! \r\n");
 8000a24:	483a      	ldr	r0, [pc, #232]	; (8000b10 <Start_USB_Task+0x240>)
 8000a26:	f00e fa85 	bl	800ef34 <puts>
 8000a2a:	e005      	b.n	8000a38 <Start_USB_Task+0x168>
//						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // Flash status
//						HAL_Delay(250);
//						HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // Flash status
//						HAL_Delay(250);
//					}
							printf("An entry has been added, i = %d \r\n", i);
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <Start_USB_Task+0x224>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	4838      	ldr	r0, [pc, #224]	; (8000b14 <Start_USB_Task+0x244>)
 8000a34:	f00e f9f8 	bl	800ee28 <iprintf>
						}
					}
					f_close(&USBHFile);
 8000a38:	4830      	ldr	r0, [pc, #192]	; (8000afc <Start_USB_Task+0x22c>)
 8000a3a:	f00a fbe4 	bl	800b206 <f_close>

					Tbtn = HAL_GetTick();
 8000a3e:	f000 fa9b 	bl	8000f78 <HAL_GetTick>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4a2a      	ldr	r2, [pc, #168]	; (8000af0 <Start_USB_Task+0x220>)
 8000a46:	6013      	str	r3, [r2, #0]
				}
			}
			btn_prev = btn_cur;/*Запоминаем текущее состояние кнопки */
 8000a48:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <Start_USB_Task+0x218>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a27      	ldr	r2, [pc, #156]	; (8000aec <Start_USB_Task+0x21c>)
 8000a4e:	6013      	str	r3, [r2, #0]
			if (f_ready == 0) {
 8000a50:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <Start_USB_Task+0x1f4>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d12a      	bne.n	8000aae <Start_USB_Task+0x1de>
				printf("APPLICATION_READY! \r\n");
 8000a58:	482f      	ldr	r0, [pc, #188]	; (8000b18 <Start_USB_Task+0x248>)
 8000a5a:	f00e fa6b 	bl	800ef34 <puts>
				f_idle = 0;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <Start_USB_Task+0x1e8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
				f_start = 0;
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <Start_USB_Task+0x1f0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
				f_ready = 1;
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <Start_USB_Task+0x1f4>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
				f_disconnect = 0;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <Start_USB_Task+0x1f8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000a76:	e01a      	b.n	8000aae <Start_USB_Task+0x1de>
		case APPLICATION_DISCONNECT:
			if (f_disconnect == 0) {
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <Start_USB_Task+0x1f8>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d10e      	bne.n	8000a9e <Start_USB_Task+0x1ce>
				printf("APPLICATION_DISCONNECT! \r\n");
 8000a80:	4826      	ldr	r0, [pc, #152]	; (8000b1c <Start_USB_Task+0x24c>)
 8000a82:	f00e fa57 	bl	800ef34 <puts>
				f_idle = 0;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <Start_USB_Task+0x1e8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
				f_start = 0;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <Start_USB_Task+0x1f0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
				f_ready = 0;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <Start_USB_Task+0x1f4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
				f_disconnect = 1;
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <Start_USB_Task+0x1f8>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
			}
			osDelay(100);
 8000a9e:	2064      	movs	r0, #100	; 0x64
 8000aa0:	f00a fe76 	bl	800b790 <osDelay>
			break;
 8000aa4:	e004      	b.n	8000ab0 <Start_USB_Task+0x1e0>
		default:
			/* do nothing */
			break;
 8000aa6:	bf00      	nop
 8000aa8:	e716      	b.n	80008d8 <Start_USB_Task+0x8>
			break;
 8000aaa:	bf00      	nop
 8000aac:	e714      	b.n	80008d8 <Start_USB_Task+0x8>
			break;
 8000aae:	bf00      	nop
		switch (Appli_state) {
 8000ab0:	e712      	b.n	80008d8 <Start_USB_Task+0x8>
 8000ab2:	bf00      	nop
 8000ab4:	200066a0 	.word	0x200066a0
 8000ab8:	20000374 	.word	0x20000374
 8000abc:	0800ff68 	.word	0x0800ff68
 8000ac0:	20000375 	.word	0x20000375
 8000ac4:	20000376 	.word	0x20000376
 8000ac8:	20000377 	.word	0x20000377
 8000acc:	20000484 	.word	0x20000484
 8000ad0:	20000488 	.word	0x20000488
 8000ad4:	0800ff7c 	.word	0x0800ff7c
 8000ad8:	0800ff94 	.word	0x0800ff94
 8000adc:	0800ff9c 	.word	0x0800ff9c
 8000ae0:	0800ffa0 	.word	0x0800ffa0
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	20000368 	.word	0x20000368
 8000aec:	20000364 	.word	0x20000364
 8000af0:	20000370 	.word	0x20000370
 8000af4:	2000036c 	.word	0x2000036c
 8000af8:	0800ffbc 	.word	0x0800ffbc
 8000afc:	200014c4 	.word	0x200014c4
 8000b00:	0800ffcc 	.word	0x0800ffcc
 8000b04:	200003cc 	.word	0x200003cc
 8000b08:	200003c8 	.word	0x200003c8
 8000b0c:	200003c4 	.word	0x200003c4
 8000b10:	0800ffdc 	.word	0x0800ffdc
 8000b14:	0800fff0 	.word	0x0800fff0
 8000b18:	08010014 	.word	0x08010014
 8000b1c:	0801002c 	.word	0x0801002c

08000b20 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d101      	bne.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b32:	f000 fa0d 	bl	8000f50 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40002000 	.word	0x40002000

08000b44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x8>
	...

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a11      	ldr	r2, [pc, #68]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <HAL_MspInit+0x54>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	210f      	movs	r1, #15
 8000b92:	f06f 0001 	mvn.w	r0, #1
 8000b96:	f000 fad7 	bl	8001148 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a19      	ldr	r2, [pc, #100]	; (8000c2c <HAL_UART_MspInit+0x84>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d12c      	bne.n	8000c24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_UART_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c14:	2307      	movs	r3, #7
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_UART_MspInit+0x8c>)
 8000c20:	f000 fabc 	bl	800119c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40011000 	.word	0x40011000
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000

08000c38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08e      	sub	sp, #56	; 0x38
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4b33      	ldr	r3, [pc, #204]	; (8000d1c <HAL_InitTick+0xe4>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	4a32      	ldr	r2, [pc, #200]	; (8000d1c <HAL_InitTick+0xe4>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c56:	6413      	str	r3, [r2, #64]	; 0x40
 8000c58:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <HAL_InitTick+0xe4>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c64:	f107 0210 	add.w	r2, r7, #16
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f002 fd04 	bl	800367c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c74:	6a3b      	ldr	r3, [r7, #32]
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d103      	bne.n	8000c86 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c7e:	f002 fcd5 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 8000c82:	6378      	str	r0, [r7, #52]	; 0x34
 8000c84:	e004      	b.n	8000c90 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c86:	f002 fcd1 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c92:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <HAL_InitTick+0xe8>)
 8000c94:	fba2 2303 	umull	r2, r3, r2, r3
 8000c98:	0c9b      	lsrs	r3, r3, #18
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <HAL_InitTick+0xec>)
 8000ca0:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <HAL_InitTick+0xf0>)
 8000ca2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <HAL_InitTick+0xec>)
 8000ca6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000caa:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000cac:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <HAL_InitTick+0xec>)
 8000cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <HAL_InitTick+0xec>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <HAL_InitTick+0xec>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <HAL_InitTick+0xec>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000cc4:	4817      	ldr	r0, [pc, #92]	; (8000d24 <HAL_InitTick+0xec>)
 8000cc6:	f002 fd0b 	bl	80036e0 <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d11b      	bne.n	8000d10 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000cd8:	4812      	ldr	r0, [pc, #72]	; (8000d24 <HAL_InitTick+0xec>)
 8000cda:	f002 fd5b 	bl	8003794 <HAL_TIM_Base_Start_IT>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d111      	bne.n	8000d10 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000cec:	202d      	movs	r0, #45	; 0x2d
 8000cee:	f000 fa47 	bl	8001180 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d808      	bhi.n	8000d0a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	202d      	movs	r0, #45	; 0x2d
 8000cfe:	f000 fa23 	bl	8001148 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_InitTick+0xf4>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	e002      	b.n	8000d10 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3738      	adds	r7, #56	; 0x38
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	431bde83 	.word	0x431bde83
 8000d24:	20000430 	.word	0x20000430
 8000d28:	40002000 	.word	0x40002000
 8000d2c:	20000004 	.word	0x20000004

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000d62:	f002 fd87 	bl	8003874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000430 	.word	0x20000430

08000d70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <OTG_FS_IRQHandler+0x10>)
 8000d76:	f000 fe49 	bl	8001a0c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200066a4 	.word	0x200066a4

08000d84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e00a      	b.n	8000dac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d96:	f3af 8000 	nop.w
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	60ba      	str	r2, [r7, #8]
 8000da2:	b2ca      	uxtb	r2, r1
 8000da4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf0      	blt.n	8000d96 <_read+0x12>
  }

  return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de6:	605a      	str	r2, [r3, #4]
  return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_isatty>:

int _isatty(int file)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f00d fdbc 	bl	800e9d4 <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20020000 	.word	0x20020000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	20000478 	.word	0x20000478
 8000e90:	200069b8 	.word	0x200069b8

08000e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <SystemInit+0x20>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <SystemInit+0x20>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ebe:	490e      	ldr	r1, [pc, #56]	; (8000ef8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed4:	4c0b      	ldr	r4, [pc, #44]	; (8000f04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ee2:	f7ff ffd7 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f00d fe71 	bl	800ebcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fbb3 	bl	8000654 <main>
  bx  lr    
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000efc:	08010224 	.word	0x08010224
  ldr r2, =_sbss
 8000f00:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000f04:	200069b8 	.word	0x200069b8

08000f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_Init+0x40>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_Init+0x40>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x40>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f8fc 	bl	8001132 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f7ff fe7c 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fe06 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	2000047c 	.word	0x2000047c

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000047c 	.word	0x2000047c

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008

08000fd8 <__NVIC_SetPriorityGrouping>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff4c 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800115a:	f7ff ff61 	bl	8001020 <__NVIC_GetPriorityGrouping>
 800115e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	6978      	ldr	r0, [r7, #20]
 8001166:	f7ff ffb1 	bl	80010cc <NVIC_EncodePriority>
 800116a:	4602      	mov	r2, r0
 800116c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff80 	bl	8001078 <__NVIC_SetPriority>
}
 8001178:	bf00      	nop
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff54 	bl	800103c <__NVIC_EnableIRQ>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	e16b      	b.n	8001490 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	f040 815a 	bne.w	800148a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d005      	beq.n	80011ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d130      	bne.n	8001250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 0201 	and.w	r2, r3, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b03      	cmp	r3, #3
 800125a:	d017      	beq.n	800128c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d123      	bne.n	80012e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	08da      	lsrs	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3208      	adds	r2, #8
 80012a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	69b9      	ldr	r1, [r7, #24]
 80012dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0203 	and.w	r2, r3, #3
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80b4 	beq.w	800148a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b60      	ldr	r3, [pc, #384]	; (80014a8 <HAL_GPIO_Init+0x30c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a5f      	ldr	r2, [pc, #380]	; (80014a8 <HAL_GPIO_Init+0x30c>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b5d      	ldr	r3, [pc, #372]	; (80014a8 <HAL_GPIO_Init+0x30c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133e:	4a5b      	ldr	r2, [pc, #364]	; (80014ac <HAL_GPIO_Init+0x310>)
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a52      	ldr	r2, [pc, #328]	; (80014b0 <HAL_GPIO_Init+0x314>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d02b      	beq.n	80013c2 <HAL_GPIO_Init+0x226>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a51      	ldr	r2, [pc, #324]	; (80014b4 <HAL_GPIO_Init+0x318>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d025      	beq.n	80013be <HAL_GPIO_Init+0x222>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a50      	ldr	r2, [pc, #320]	; (80014b8 <HAL_GPIO_Init+0x31c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d01f      	beq.n	80013ba <HAL_GPIO_Init+0x21e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4f      	ldr	r2, [pc, #316]	; (80014bc <HAL_GPIO_Init+0x320>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <HAL_GPIO_Init+0x21a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4e      	ldr	r2, [pc, #312]	; (80014c0 <HAL_GPIO_Init+0x324>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x216>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4d      	ldr	r2, [pc, #308]	; (80014c4 <HAL_GPIO_Init+0x328>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x212>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4c      	ldr	r2, [pc, #304]	; (80014c8 <HAL_GPIO_Init+0x32c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x20e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4b      	ldr	r2, [pc, #300]	; (80014cc <HAL_GPIO_Init+0x330>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x20a>
 80013a2:	2307      	movs	r3, #7
 80013a4:	e00e      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013a6:	2308      	movs	r3, #8
 80013a8:	e00c      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013aa:	2306      	movs	r3, #6
 80013ac:	e00a      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013ae:	2305      	movs	r3, #5
 80013b0:	e008      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013b2:	2304      	movs	r3, #4
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013b6:	2303      	movs	r3, #3
 80013b8:	e004      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013c2:	2300      	movs	r3, #0
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	f002 0203 	and.w	r2, r2, #3
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	4093      	lsls	r3, r2
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d4:	4935      	ldr	r1, [pc, #212]	; (80014ac <HAL_GPIO_Init+0x310>)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <HAL_GPIO_Init+0x334>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001406:	4a32      	ldr	r2, [pc, #200]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <HAL_GPIO_Init+0x334>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001430:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145a:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <HAL_GPIO_Init+0x334>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3301      	adds	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	f67f ae90 	bls.w	80011b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40013800 	.word	0x40013800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40021400 	.word	0x40021400
 80014c8:	40021800 	.word	0x40021800
 80014cc:	40021c00 	.word	0x40021c00
 80014d0:	40013c00 	.word	0x40013c00

080014d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e001      	b.n	80014f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
 8001510:	4613      	mov	r3, r2
 8001512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	787b      	ldrb	r3, [r7, #1]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001520:	e003      	b.n	800152a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	041a      	lsls	r2, r3, #16
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	619a      	str	r2, [r3, #24]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001536:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001538:	b08f      	sub	sp, #60	; 0x3c
 800153a:	af0a      	add	r7, sp, #40	; 0x28
 800153c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e054      	b.n	80015f2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d106      	bne.n	8001568 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f00c ff66 	bl	800e434 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2203      	movs	r2, #3
 800156c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f002 ff8c 	bl	80044a4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	687e      	ldr	r6, [r7, #4]
 8001594:	466d      	mov	r5, sp
 8001596:	f106 0410 	add.w	r4, r6, #16
 800159a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80015aa:	1d33      	adds	r3, r6, #4
 80015ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ae:	6838      	ldr	r0, [r7, #0]
 80015b0:	f002 ff06 	bl	80043c0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2101      	movs	r1, #1
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 ff83 	bl	80044c6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	687e      	ldr	r6, [r7, #4]
 80015c8:	466d      	mov	r5, sp
 80015ca:	f106 0410 	add.w	r4, r6, #16
 80015ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015da:	e885 0003 	stmia.w	r5, {r0, r1}
 80015de:	1d33      	adds	r3, r6, #4
 80015e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e2:	6838      	ldr	r0, [r7, #0]
 80015e4:	f003 f90c 	bl	8004800 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015fa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015fa:	b590      	push	{r4, r7, lr}
 80015fc:	b089      	sub	sp, #36	; 0x24
 80015fe:	af04      	add	r7, sp, #16
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	4608      	mov	r0, r1
 8001604:	4611      	mov	r1, r2
 8001606:	461a      	mov	r2, r3
 8001608:	4603      	mov	r3, r0
 800160a:	70fb      	strb	r3, [r7, #3]
 800160c:	460b      	mov	r3, r1
 800160e:	70bb      	strb	r3, [r7, #2]
 8001610:	4613      	mov	r3, r2
 8001612:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_HCD_HC_Init+0x28>
 800161e:	2302      	movs	r3, #2
 8001620:	e076      	b.n	8001710 <HAL_HCD_HC_Init+0x116>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	212c      	movs	r1, #44	; 0x2c
 8001630:	fb01 f303 	mul.w	r3, r1, r3
 8001634:	4413      	add	r3, r2
 8001636:	333d      	adds	r3, #61	; 0x3d
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	212c      	movs	r1, #44	; 0x2c
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	3338      	adds	r3, #56	; 0x38
 800164a:	787a      	ldrb	r2, [r7, #1]
 800164c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	212c      	movs	r1, #44	; 0x2c
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	4413      	add	r3, r2
 800165a:	3340      	adds	r3, #64	; 0x40
 800165c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800165e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	212c      	movs	r1, #44	; 0x2c
 8001666:	fb01 f303 	mul.w	r3, r1, r3
 800166a:	4413      	add	r3, r2
 800166c:	3339      	adds	r3, #57	; 0x39
 800166e:	78fa      	ldrb	r2, [r7, #3]
 8001670:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	212c      	movs	r1, #44	; 0x2c
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	333f      	adds	r3, #63	; 0x3f
 8001680:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001684:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	78ba      	ldrb	r2, [r7, #2]
 800168a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800168e:	b2d0      	uxtb	r0, r2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	212c      	movs	r1, #44	; 0x2c
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	4413      	add	r3, r2
 800169a:	333a      	adds	r3, #58	; 0x3a
 800169c:	4602      	mov	r2, r0
 800169e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	da09      	bge.n	80016bc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	212c      	movs	r1, #44	; 0x2c
 80016ae:	fb01 f303 	mul.w	r3, r1, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	333b      	adds	r3, #59	; 0x3b
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	e008      	b.n	80016ce <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	212c      	movs	r1, #44	; 0x2c
 80016c2:	fb01 f303 	mul.w	r3, r1, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	333b      	adds	r3, #59	; 0x3b
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	212c      	movs	r1, #44	; 0x2c
 80016d4:	fb01 f303 	mul.w	r3, r1, r3
 80016d8:	4413      	add	r3, r2
 80016da:	333c      	adds	r3, #60	; 0x3c
 80016dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016e0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	787c      	ldrb	r4, [r7, #1]
 80016e8:	78ba      	ldrb	r2, [r7, #2]
 80016ea:	78f9      	ldrb	r1, [r7, #3]
 80016ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	4623      	mov	r3, r4
 80016fe:	f003 fa05 	bl	8004b0c <USB_HC_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bd90      	pop	{r4, r7, pc}

08001718 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_HCD_HC_Halt+0x1e>
 8001732:	2302      	movs	r3, #2
 8001734:	e00f      	b.n	8001756 <HAL_HCD_HC_Halt+0x3e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f003 fc55 	bl	8004ff6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	4608      	mov	r0, r1
 800176a:	4611      	mov	r1, r2
 800176c:	461a      	mov	r2, r3
 800176e:	4603      	mov	r3, r0
 8001770:	70fb      	strb	r3, [r7, #3]
 8001772:	460b      	mov	r3, r1
 8001774:	70bb      	strb	r3, [r7, #2]
 8001776:	4613      	mov	r3, r2
 8001778:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	212c      	movs	r1, #44	; 0x2c
 8001780:	fb01 f303 	mul.w	r3, r1, r3
 8001784:	4413      	add	r3, r2
 8001786:	333b      	adds	r3, #59	; 0x3b
 8001788:	78ba      	ldrb	r2, [r7, #2]
 800178a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	212c      	movs	r1, #44	; 0x2c
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	333f      	adds	r3, #63	; 0x3f
 800179a:	787a      	ldrb	r2, [r7, #1]
 800179c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800179e:	7c3b      	ldrb	r3, [r7, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d112      	bne.n	80017ca <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	3342      	adds	r3, #66	; 0x42
 80017b2:	2203      	movs	r2, #3
 80017b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	212c      	movs	r1, #44	; 0x2c
 80017bc:	fb01 f303 	mul.w	r3, r1, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	333d      	adds	r3, #61	; 0x3d
 80017c4:	7f3a      	ldrb	r2, [r7, #28]
 80017c6:	701a      	strb	r2, [r3, #0]
 80017c8:	e008      	b.n	80017dc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	212c      	movs	r1, #44	; 0x2c
 80017d0:	fb01 f303 	mul.w	r3, r1, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	3342      	adds	r3, #66	; 0x42
 80017d8:	2202      	movs	r2, #2
 80017da:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017dc:	787b      	ldrb	r3, [r7, #1]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	f200 80c6 	bhi.w	8001970 <HAL_HCD_HC_SubmitRequest+0x210>
 80017e4:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	080017fd 	.word	0x080017fd
 80017f0:	0800195d 	.word	0x0800195d
 80017f4:	08001861 	.word	0x08001861
 80017f8:	080018df 	.word	0x080018df
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017fc:	7c3b      	ldrb	r3, [r7, #16]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	f040 80b8 	bne.w	8001974 <HAL_HCD_HC_SubmitRequest+0x214>
 8001804:	78bb      	ldrb	r3, [r7, #2]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 80b4 	bne.w	8001974 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800180c:	8b3b      	ldrh	r3, [r7, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d108      	bne.n	8001824 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	212c      	movs	r1, #44	; 0x2c
 8001818:	fb01 f303 	mul.w	r3, r1, r3
 800181c:	4413      	add	r3, r2
 800181e:	3355      	adds	r3, #85	; 0x55
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	212c      	movs	r1, #44	; 0x2c
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	3355      	adds	r3, #85	; 0x55
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	212c      	movs	r1, #44	; 0x2c
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	4413      	add	r3, r2
 8001844:	3342      	adds	r3, #66	; 0x42
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800184a:	e093      	b.n	8001974 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	212c      	movs	r1, #44	; 0x2c
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	4413      	add	r3, r2
 8001858:	3342      	adds	r3, #66	; 0x42
 800185a:	2202      	movs	r2, #2
 800185c:	701a      	strb	r2, [r3, #0]
      break;
 800185e:	e089      	b.n	8001974 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001860:	78bb      	ldrb	r3, [r7, #2]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d11d      	bne.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	212c      	movs	r1, #44	; 0x2c
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	4413      	add	r3, r2
 8001872:	3355      	adds	r3, #85	; 0x55
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	212c      	movs	r1, #44	; 0x2c
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	3342      	adds	r3, #66	; 0x42
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800188c:	e073      	b.n	8001976 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	212c      	movs	r1, #44	; 0x2c
 8001894:	fb01 f303 	mul.w	r3, r1, r3
 8001898:	4413      	add	r3, r2
 800189a:	3342      	adds	r3, #66	; 0x42
 800189c:	2202      	movs	r2, #2
 800189e:	701a      	strb	r2, [r3, #0]
      break;
 80018a0:	e069      	b.n	8001976 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	212c      	movs	r1, #44	; 0x2c
 80018a8:	fb01 f303 	mul.w	r3, r1, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	3354      	adds	r3, #84	; 0x54
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	3342      	adds	r3, #66	; 0x42
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
      break;
 80018c8:	e055      	b.n	8001976 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	212c      	movs	r1, #44	; 0x2c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	3342      	adds	r3, #66	; 0x42
 80018d8:	2202      	movs	r2, #2
 80018da:	701a      	strb	r2, [r3, #0]
      break;
 80018dc:	e04b      	b.n	8001976 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018de:	78bb      	ldrb	r3, [r7, #2]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d11d      	bne.n	8001920 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	212c      	movs	r1, #44	; 0x2c
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	3355      	adds	r3, #85	; 0x55
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	212c      	movs	r1, #44	; 0x2c
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	4413      	add	r3, r2
 8001904:	3342      	adds	r3, #66	; 0x42
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800190a:	e034      	b.n	8001976 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	212c      	movs	r1, #44	; 0x2c
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	4413      	add	r3, r2
 8001918:	3342      	adds	r3, #66	; 0x42
 800191a:	2202      	movs	r2, #2
 800191c:	701a      	strb	r2, [r3, #0]
      break;
 800191e:	e02a      	b.n	8001976 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	212c      	movs	r1, #44	; 0x2c
 8001926:	fb01 f303 	mul.w	r3, r1, r3
 800192a:	4413      	add	r3, r2
 800192c:	3354      	adds	r3, #84	; 0x54
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d109      	bne.n	8001948 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	212c      	movs	r1, #44	; 0x2c
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	3342      	adds	r3, #66	; 0x42
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
      break;
 8001946:	e016      	b.n	8001976 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	212c      	movs	r1, #44	; 0x2c
 800194e:	fb01 f303 	mul.w	r3, r1, r3
 8001952:	4413      	add	r3, r2
 8001954:	3342      	adds	r3, #66	; 0x42
 8001956:	2202      	movs	r2, #2
 8001958:	701a      	strb	r2, [r3, #0]
      break;
 800195a:	e00c      	b.n	8001976 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	212c      	movs	r1, #44	; 0x2c
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	3342      	adds	r3, #66	; 0x42
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
      break;
 800196e:	e002      	b.n	8001976 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001970:	bf00      	nop
 8001972:	e000      	b.n	8001976 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001974:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	212c      	movs	r1, #44	; 0x2c
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	3344      	adds	r3, #68	; 0x44
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	8b3a      	ldrh	r2, [r7, #24]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	202c      	movs	r0, #44	; 0x2c
 8001990:	fb00 f303 	mul.w	r3, r0, r3
 8001994:	440b      	add	r3, r1
 8001996:	334c      	adds	r3, #76	; 0x4c
 8001998:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	212c      	movs	r1, #44	; 0x2c
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	3360      	adds	r3, #96	; 0x60
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	212c      	movs	r1, #44	; 0x2c
 80019b2:	fb01 f303 	mul.w	r3, r1, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	3350      	adds	r3, #80	; 0x50
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	212c      	movs	r1, #44	; 0x2c
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	3339      	adds	r3, #57	; 0x39
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	212c      	movs	r1, #44	; 0x2c
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	3361      	adds	r3, #97	; 0x61
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	222c      	movs	r2, #44	; 0x2c
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	3338      	adds	r3, #56	; 0x38
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	18d1      	adds	r1, r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	f003 f9a8 	bl	8004d50 <USB_HC_StartXfer>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop

08001a0c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f002 fea9 	bl	800477a <USB_GetMode>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	f040 80f6 	bne.w	8001c1c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fe8d 	bl	8004754 <USB_ReadInterrupts>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80ec 	beq.w	8001c1a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 fe84 	bl	8004754 <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a56:	d104      	bne.n	8001a62 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 fe74 	bl	8004754 <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a76:	d104      	bne.n	8001a82 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 fe64 	bl	8004754 <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a96:	d104      	bne.n	8001aa2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001aa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 fe54 	bl	8004754 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d103      	bne.n	8001abe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2202      	movs	r2, #2
 8001abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 fe46 	bl	8004754 <USB_ReadInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ad2:	d11c      	bne.n	8001b0e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001adc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10f      	bne.n	8001b0e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001aee:	2110      	movs	r1, #16
 8001af0:	6938      	ldr	r0, [r7, #16]
 8001af2:	f002 fd35 	bl	8004560 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001af6:	6938      	ldr	r0, [r7, #16]
 8001af8:	f002 fd66 	bl	80045c8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2101      	movs	r1, #1
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 ff3c 	bl	8004980 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f00c fd03 	bl	800e514 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f002 fe1e 	bl	8004754 <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b22:	d102      	bne.n	8001b2a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f001 f89e 	bl	8002c66 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f002 fe10 	bl	8004754 <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d106      	bne.n	8001b4c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f00c fccc 	bl	800e4dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2208      	movs	r2, #8
 8001b4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fdff 	bl	8004754 <USB_ReadInterrupts>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b10      	cmp	r3, #16
 8001b5e:	d101      	bne.n	8001b64 <HAL_HCD_IRQHandler+0x158>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_HCD_IRQHandler+0x15a>
 8001b64:	2300      	movs	r3, #0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d012      	beq.n	8001b90 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0210 	bic.w	r2, r2, #16
 8001b78:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 ffa1 	bl	8002ac2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	699a      	ldr	r2, [r3, #24]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0210 	orr.w	r2, r2, #16
 8001b8e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 fddd 	bl	8004754 <USB_ReadInterrupts>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ba4:	d13a      	bne.n	8001c1c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 fa12 	bl	8004fd4 <USB_HC_ReadInterrupt>
 8001bb0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e025      	b.n	8001c04 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d018      	beq.n	8001bfe <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	015a      	lsls	r2, r3, #5
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001be2:	d106      	bne.n	8001bf2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4619      	mov	r1, r3
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f8ab 	bl	8001d46 <HCD_HC_IN_IRQHandler>
 8001bf0:	e005      	b.n	8001bfe <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 fbf9 	bl	80023f0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3301      	adds	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d3d4      	bcc.n	8001bb8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c16:	615a      	str	r2, [r3, #20]
 8001c18:	e000      	b.n	8001c1c <HAL_HCD_IRQHandler+0x210>
      return;
 8001c1a:	bf00      	nop
    }
  }
}
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <HAL_HCD_Start+0x16>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e013      	b.n	8001c60 <HAL_HCD_Start+0x3e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2101      	movs	r1, #1
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 fefe 	bl	8004a48 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f002 fc16 	bl	8004482 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_HCD_Stop+0x16>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e00d      	b.n	8001c9a <HAL_HCD_Stop+0x32>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 faec 	bl	8005268 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 fea0 	bl	80049f4 <USB_ResetPort>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	212c      	movs	r1, #44	; 0x2c
 8001cd0:	fb01 f303 	mul.w	r3, r1, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3360      	adds	r3, #96	; 0x60
 8001cd8:	781b      	ldrb	r3, [r3, #0]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	212c      	movs	r1, #44	; 0x2c
 8001cf8:	fb01 f303 	mul.w	r3, r1, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3350      	adds	r3, #80	; 0x50
 8001d00:	681b      	ldr	r3, [r3, #0]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 fee4 	bl	8004ae8 <USB_GetCurrentFrame>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 febf 	bl	8004aba <USB_GetHostSpeed>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d5c:	78fb      	ldrb	r3, [r7, #3]
 8001d5e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d11a      	bne.n	8001dac <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d82:	461a      	mov	r2, r3
 8001d84:	2304      	movs	r3, #4
 8001d86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	212c      	movs	r1, #44	; 0x2c
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	3361      	adds	r3, #97	; 0x61
 8001d96:	2206      	movs	r2, #6
 8001d98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f003 f926 	bl	8004ff6 <USB_HC_Halt>
 8001daa:	e0af      	b.n	8001f0c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	015a      	lsls	r2, r3, #5
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dc2:	d11b      	bne.n	8001dfc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	015a      	lsls	r2, r3, #5
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	3361      	adds	r3, #97	; 0x61
 8001de6:	2207      	movs	r2, #7
 8001de8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 f8fe 	bl	8004ff6 <USB_HC_Halt>
 8001dfa:	e087      	b.n	8001f0c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d109      	bne.n	8001e26 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2320      	movs	r3, #32
 8001e22:	6093      	str	r3, [r2, #8]
 8001e24:	e072      	b.n	8001f0c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d11a      	bne.n	8001e72 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2308      	movs	r3, #8
 8001e4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	212c      	movs	r1, #44	; 0x2c
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	3361      	adds	r3, #97	; 0x61
 8001e5c:	2205      	movs	r2, #5
 8001e5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 f8c3 	bl	8004ff6 <USB_HC_Halt>
 8001e70:	e04c      	b.n	8001f0c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e88:	d11b      	bne.n	8001ec2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e96:	461a      	mov	r2, r3
 8001e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	212c      	movs	r1, #44	; 0x2c
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3361      	adds	r3, #97	; 0x61
 8001eac:	2208      	movs	r2, #8
 8001eae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 f89b 	bl	8004ff6 <USB_HC_Halt>
 8001ec0:	e024      	b.n	8001f0c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed4:	2b80      	cmp	r3, #128	; 0x80
 8001ed6:	d119      	bne.n	8001f0c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	212c      	movs	r1, #44	; 0x2c
 8001ef0:	fb01 f303 	mul.w	r3, r1, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3361      	adds	r3, #97	; 0x61
 8001ef8:	2206      	movs	r2, #6
 8001efa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f003 f875 	bl	8004ff6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	015a      	lsls	r2, r3, #5
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f22:	d112      	bne.n	8001f4a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f003 f861 	bl	8004ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f40:	461a      	mov	r2, r3
 8001f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f46:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f48:	e24e      	b.n	80023e8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	f040 80df 	bne.w	8002120 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d019      	beq.n	8001f9e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	212c      	movs	r1, #44	; 0x2c
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	3348      	adds	r3, #72	; 0x48
 8001f78:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	0159      	lsls	r1, r3, #5
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	440b      	add	r3, r1
 8001f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f8c:	1ad2      	subs	r2, r2, r3
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	202c      	movs	r0, #44	; 0x2c
 8001f94:	fb00 f303 	mul.w	r3, r0, r3
 8001f98:	440b      	add	r3, r1
 8001f9a:	3350      	adds	r3, #80	; 0x50
 8001f9c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	212c      	movs	r1, #44	; 0x2c
 8001fa4:	fb01 f303 	mul.w	r3, r1, r3
 8001fa8:	4413      	add	r3, r2
 8001faa:	3361      	adds	r3, #97	; 0x61
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	212c      	movs	r1, #44	; 0x2c
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	335c      	adds	r3, #92	; 0x5c
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	212c      	movs	r1, #44	; 0x2c
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	333f      	adds	r3, #63	; 0x3f
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d009      	beq.n	8001ffc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	212c      	movs	r1, #44	; 0x2c
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	333f      	adds	r3, #63	; 0x3f
 8001ff6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d111      	bne.n	8002020 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f002 fff5 	bl	8004ff6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4413      	add	r3, r2
 8002014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002018:	461a      	mov	r2, r3
 800201a:	2310      	movs	r3, #16
 800201c:	6093      	str	r3, [r2, #8]
 800201e:	e03a      	b.n	8002096 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	212c      	movs	r1, #44	; 0x2c
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	333f      	adds	r3, #63	; 0x3f
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d009      	beq.n	8002048 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	212c      	movs	r1, #44	; 0x2c
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	333f      	adds	r3, #63	; 0x3f
 8002042:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002044:	2b01      	cmp	r3, #1
 8002046:	d126      	bne.n	8002096 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	0151      	lsls	r1, r2, #5
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	440a      	add	r2, r1
 800205e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002066:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	212c      	movs	r1, #44	; 0x2c
 800206e:	fb01 f303 	mul.w	r3, r1, r3
 8002072:	4413      	add	r3, r2
 8002074:	3360      	adds	r3, #96	; 0x60
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	b2d9      	uxtb	r1, r3
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	202c      	movs	r0, #44	; 0x2c
 8002084:	fb00 f303 	mul.w	r3, r0, r3
 8002088:	4413      	add	r3, r2
 800208a:	3360      	adds	r3, #96	; 0x60
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f00c fa4d 	bl	800e530 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d12b      	bne.n	80020f6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	3348      	adds	r3, #72	; 0x48
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	202c      	movs	r0, #44	; 0x2c
 80020b4:	fb00 f202 	mul.w	r2, r0, r2
 80020b8:	440a      	add	r2, r1
 80020ba:	3240      	adds	r2, #64	; 0x40
 80020bc:	8812      	ldrh	r2, [r2, #0]
 80020be:	fbb3 f3f2 	udiv	r3, r3, r2
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 818e 	beq.w	80023e8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	212c      	movs	r1, #44	; 0x2c
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	3354      	adds	r3, #84	; 0x54
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	f083 0301 	eor.w	r3, r3, #1
 80020e0:	b2d8      	uxtb	r0, r3
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	212c      	movs	r1, #44	; 0x2c
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	3354      	adds	r3, #84	; 0x54
 80020f0:	4602      	mov	r2, r0
 80020f2:	701a      	strb	r2, [r3, #0]
}
 80020f4:	e178      	b.n	80023e8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	212c      	movs	r1, #44	; 0x2c
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	4413      	add	r3, r2
 8002102:	3354      	adds	r3, #84	; 0x54
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f083 0301 	eor.w	r3, r3, #1
 800210a:	b2d8      	uxtb	r0, r3
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3354      	adds	r3, #84	; 0x54
 800211a:	4602      	mov	r2, r0
 800211c:	701a      	strb	r2, [r3, #0]
}
 800211e:	e163      	b.n	80023e8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	f040 80f6 	bne.w	8002324 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	3361      	adds	r3, #97	; 0x61
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d109      	bne.n	8002160 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3360      	adds	r3, #96	; 0x60
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	e0c9      	b.n	80022f4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	3361      	adds	r3, #97	; 0x61
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b05      	cmp	r3, #5
 8002172:	d109      	bne.n	8002188 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	212c      	movs	r1, #44	; 0x2c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	3360      	adds	r3, #96	; 0x60
 8002182:	2205      	movs	r2, #5
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e0b5      	b.n	80022f4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3361      	adds	r3, #97	; 0x61
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b06      	cmp	r3, #6
 800219a:	d009      	beq.n	80021b0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	3361      	adds	r3, #97	; 0x61
 80021aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d150      	bne.n	8002252 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	212c      	movs	r1, #44	; 0x2c
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	335c      	adds	r3, #92	; 0x5c
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	202c      	movs	r0, #44	; 0x2c
 80021c8:	fb00 f303 	mul.w	r3, r0, r3
 80021cc:	440b      	add	r3, r1
 80021ce:	335c      	adds	r3, #92	; 0x5c
 80021d0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	212c      	movs	r1, #44	; 0x2c
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	335c      	adds	r3, #92	; 0x5c
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d912      	bls.n	800220c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	212c      	movs	r1, #44	; 0x2c
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	335c      	adds	r3, #92	; 0x5c
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3360      	adds	r3, #96	; 0x60
 8002206:	2204      	movs	r2, #4
 8002208:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800220a:	e073      	b.n	80022f4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	3360      	adds	r3, #96	; 0x60
 800221a:	2202      	movs	r2, #2
 800221c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4413      	add	r3, r2
 8002226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002234:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800223c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224a:	461a      	mov	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002250:	e050      	b.n	80022f4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	3361      	adds	r3, #97	; 0x61
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d122      	bne.n	80022ac <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	3360      	adds	r3, #96	; 0x60
 8002274:	2202      	movs	r2, #2
 8002276:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800228e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002296:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	461a      	mov	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e023      	b.n	80022f4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	212c      	movs	r1, #44	; 0x2c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	3361      	adds	r3, #97	; 0x61
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b07      	cmp	r3, #7
 80022be:	d119      	bne.n	80022f4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	212c      	movs	r1, #44	; 0x2c
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	335c      	adds	r3, #92	; 0x5c
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	202c      	movs	r0, #44	; 0x2c
 80022d8:	fb00 f303 	mul.w	r3, r0, r3
 80022dc:	440b      	add	r3, r1
 80022de:	335c      	adds	r3, #92	; 0x5c
 80022e0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	212c      	movs	r1, #44	; 0x2c
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	3360      	adds	r3, #96	; 0x60
 80022f0:	2204      	movs	r2, #4
 80022f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002300:	461a      	mov	r2, r3
 8002302:	2302      	movs	r3, #2
 8002304:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	b2d9      	uxtb	r1, r3
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	202c      	movs	r0, #44	; 0x2c
 8002310:	fb00 f303 	mul.w	r3, r0, r3
 8002314:	4413      	add	r3, r2
 8002316:	3360      	adds	r3, #96	; 0x60
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f00c f907 	bl	800e530 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002322:	e061      	b.n	80023e8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	015a      	lsls	r2, r3, #5
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4413      	add	r3, r2
 800232c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b10      	cmp	r3, #16
 8002338:	d156      	bne.n	80023e8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	212c      	movs	r1, #44	; 0x2c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	333f      	adds	r3, #63	; 0x3f
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d111      	bne.n	8002372 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	212c      	movs	r1, #44	; 0x2c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	335c      	adds	r3, #92	; 0x5c
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f002 fe43 	bl	8004ff6 <USB_HC_Halt>
 8002370:	e031      	b.n	80023d6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	333f      	adds	r3, #63	; 0x3f
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	333f      	adds	r3, #63	; 0x3f
 8002394:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002396:	2b02      	cmp	r3, #2
 8002398:	d11d      	bne.n	80023d6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	335c      	adds	r3, #92	; 0x5c
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d110      	bne.n	80023d6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	3361      	adds	r3, #97	; 0x61
 80023c2:	2203      	movs	r2, #3
 80023c4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f002 fe10 	bl	8004ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e2:	461a      	mov	r2, r3
 80023e4:	2310      	movs	r3, #16
 80023e6:	6093      	str	r3, [r2, #8]
}
 80023e8:	bf00      	nop
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4413      	add	r3, r2
 8002412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b04      	cmp	r3, #4
 800241e:	d11a      	bne.n	8002456 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242c:	461a      	mov	r2, r3
 800242e:	2304      	movs	r3, #4
 8002430:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	3361      	adds	r3, #97	; 0x61
 8002440:	2206      	movs	r2, #6
 8002442:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f002 fdd1 	bl	8004ff6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002454:	e331      	b.n	8002aba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b20      	cmp	r3, #32
 800246a:	d12e      	bne.n	80024ca <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002478:	461a      	mov	r2, r3
 800247a:	2320      	movs	r3, #32
 800247c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	333d      	adds	r3, #61	; 0x3d
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	f040 8313 	bne.w	8002aba <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	212c      	movs	r1, #44	; 0x2c
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	333d      	adds	r3, #61	; 0x3d
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	3360      	adds	r3, #96	; 0x60
 80024b4:	2202      	movs	r2, #2
 80024b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f002 fd97 	bl	8004ff6 <USB_HC_Halt>
}
 80024c8:	e2f7      	b.n	8002aba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e0:	d112      	bne.n	8002508 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ee:	461a      	mov	r2, r3
 80024f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f002 fd78 	bl	8004ff6 <USB_HC_Halt>
}
 8002506:	e2d8      	b.n	8002aba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d140      	bne.n	80025a0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	335c      	adds	r3, #92	; 0x5c
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	4413      	add	r3, r2
 8002538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b40      	cmp	r3, #64	; 0x40
 8002544:	d111      	bne.n	800256a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	333d      	adds	r3, #61	; 0x3d
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	461a      	mov	r2, r3
 8002566:	2340      	movs	r3, #64	; 0x40
 8002568:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	461a      	mov	r2, r3
 8002578:	2301      	movs	r3, #1
 800257a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	3361      	adds	r3, #97	; 0x61
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f002 fd2c 	bl	8004ff6 <USB_HC_Halt>
}
 800259e:	e28c      	b.n	8002aba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b2:	2b40      	cmp	r3, #64	; 0x40
 80025b4:	d12c      	bne.n	8002610 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	212c      	movs	r1, #44	; 0x2c
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	3361      	adds	r3, #97	; 0x61
 80025c4:	2204      	movs	r2, #4
 80025c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	333d      	adds	r3, #61	; 0x3d
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	335c      	adds	r3, #92	; 0x5c
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f002 fcfd 	bl	8004ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	4413      	add	r3, r2
 8002604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002608:	461a      	mov	r2, r3
 800260a:	2340      	movs	r3, #64	; 0x40
 800260c:	6093      	str	r3, [r2, #8]
}
 800260e:	e254      	b.n	8002aba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b08      	cmp	r3, #8
 8002624:	d11a      	bne.n	800265c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4413      	add	r3, r2
 800262e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002632:	461a      	mov	r2, r3
 8002634:	2308      	movs	r3, #8
 8002636:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	212c      	movs	r1, #44	; 0x2c
 800263e:	fb01 f303 	mul.w	r3, r1, r3
 8002642:	4413      	add	r3, r2
 8002644:	3361      	adds	r3, #97	; 0x61
 8002646:	2205      	movs	r2, #5
 8002648:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f002 fcce 	bl	8004ff6 <USB_HC_Halt>
}
 800265a:	e22e      	b.n	8002aba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b10      	cmp	r3, #16
 8002670:	d140      	bne.n	80026f4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	335c      	adds	r3, #92	; 0x5c
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	212c      	movs	r1, #44	; 0x2c
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	3361      	adds	r3, #97	; 0x61
 8002692:	2203      	movs	r2, #3
 8002694:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	212c      	movs	r1, #44	; 0x2c
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	333d      	adds	r3, #61	; 0x3d
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d112      	bne.n	80026d0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	212c      	movs	r1, #44	; 0x2c
 80026b0:	fb01 f303 	mul.w	r3, r1, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	333c      	adds	r3, #60	; 0x3c
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d108      	bne.n	80026d0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	333d      	adds	r3, #61	; 0x3d
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f002 fc8b 	bl	8004ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ec:	461a      	mov	r2, r3
 80026ee:	2310      	movs	r3, #16
 80026f0:	6093      	str	r3, [r2, #8]
}
 80026f2:	e1e2      	b.n	8002aba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002706:	2b80      	cmp	r3, #128	; 0x80
 8002708:	d164      	bne.n	80027d4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d111      	bne.n	8002736 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3361      	adds	r3, #97	; 0x61
 8002720:	2206      	movs	r2, #6
 8002722:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f002 fc61 	bl	8004ff6 <USB_HC_Halt>
 8002734:	e044      	b.n	80027c0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	335c      	adds	r3, #92	; 0x5c
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	202c      	movs	r0, #44	; 0x2c
 800274e:	fb00 f303 	mul.w	r3, r0, r3
 8002752:	440b      	add	r3, r1
 8002754:	335c      	adds	r3, #92	; 0x5c
 8002756:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	335c      	adds	r3, #92	; 0x5c
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d920      	bls.n	80027ae <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	4413      	add	r3, r2
 8002778:	335c      	adds	r3, #92	; 0x5c
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	3360      	adds	r3, #96	; 0x60
 800278c:	2204      	movs	r2, #4
 800278e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	b2d9      	uxtb	r1, r3
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	202c      	movs	r0, #44	; 0x2c
 800279a:	fb00 f303 	mul.w	r3, r0, r3
 800279e:	4413      	add	r3, r2
 80027a0:	3360      	adds	r3, #96	; 0x60
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f00b fec2 	bl	800e530 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027ac:	e008      	b.n	80027c0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	3360      	adds	r3, #96	; 0x60
 80027bc:	2202      	movs	r2, #2
 80027be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027cc:	461a      	mov	r2, r3
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	6093      	str	r3, [r2, #8]
}
 80027d2:	e172      	b.n	8002aba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ea:	d11b      	bne.n	8002824 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	212c      	movs	r1, #44	; 0x2c
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	3361      	adds	r3, #97	; 0x61
 80027fa:	2208      	movs	r2, #8
 80027fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	4611      	mov	r1, r2
 8002808:	4618      	mov	r0, r3
 800280a:	f002 fbf4 	bl	8004ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	461a      	mov	r2, r3
 800281c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002820:	6093      	str	r3, [r2, #8]
}
 8002822:	e14a      	b.n	8002aba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	f040 813f 	bne.w	8002aba <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	3361      	adds	r3, #97	; 0x61
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d17d      	bne.n	800294c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	3360      	adds	r3, #96	; 0x60
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	333f      	adds	r3, #63	; 0x3f
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d00a      	beq.n	800288c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	333f      	adds	r3, #63	; 0x3f
 8002884:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002886:	2b03      	cmp	r3, #3
 8002888:	f040 8100 	bne.w	8002a8c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d113      	bne.n	80028bc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3355      	adds	r3, #85	; 0x55
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	f083 0301 	eor.w	r3, r3, #1
 80028a8:	b2d8      	uxtb	r0, r3
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3355      	adds	r3, #85	; 0x55
 80028b8:	4602      	mov	r2, r0
 80028ba:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	f040 80e3 	bne.w	8002a8c <HCD_HC_OUT_IRQHandler+0x69c>
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	334c      	adds	r3, #76	; 0x4c
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80d8 	beq.w	8002a8c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	334c      	adds	r3, #76	; 0x4c
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	202c      	movs	r0, #44	; 0x2c
 80028f2:	fb00 f202 	mul.w	r2, r0, r2
 80028f6:	440a      	add	r2, r1
 80028f8:	3240      	adds	r2, #64	; 0x40
 80028fa:	8812      	ldrh	r2, [r2, #0]
 80028fc:	4413      	add	r3, r2
 80028fe:	3b01      	subs	r3, #1
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	202c      	movs	r0, #44	; 0x2c
 8002906:	fb00 f202 	mul.w	r2, r0, r2
 800290a:	440a      	add	r2, r1
 800290c:	3240      	adds	r2, #64	; 0x40
 800290e:	8812      	ldrh	r2, [r2, #0]
 8002910:	fbb3 f3f2 	udiv	r3, r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80b5 	beq.w	8002a8c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	212c      	movs	r1, #44	; 0x2c
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	3355      	adds	r3, #85	; 0x55
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	f083 0301 	eor.w	r3, r3, #1
 8002936:	b2d8      	uxtb	r0, r3
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3355      	adds	r3, #85	; 0x55
 8002946:	4602      	mov	r2, r0
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	e09f      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3361      	adds	r3, #97	; 0x61
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d109      	bne.n	8002974 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	212c      	movs	r1, #44	; 0x2c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	3360      	adds	r3, #96	; 0x60
 800296e:	2202      	movs	r2, #2
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e08b      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3361      	adds	r3, #97	; 0x61
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b04      	cmp	r3, #4
 8002986:	d109      	bne.n	800299c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3360      	adds	r3, #96	; 0x60
 8002996:	2202      	movs	r2, #2
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e077      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3361      	adds	r3, #97	; 0x61
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d109      	bne.n	80029c4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3360      	adds	r3, #96	; 0x60
 80029be:	2205      	movs	r2, #5
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e063      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3361      	adds	r3, #97	; 0x61
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b06      	cmp	r3, #6
 80029d6:	d009      	beq.n	80029ec <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	3361      	adds	r3, #97	; 0x61
 80029e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d14f      	bne.n	8002a8c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	335c      	adds	r3, #92	; 0x5c
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	202c      	movs	r0, #44	; 0x2c
 8002a04:	fb00 f303 	mul.w	r3, r0, r3
 8002a08:	440b      	add	r3, r1
 8002a0a:	335c      	adds	r3, #92	; 0x5c
 8002a0c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	335c      	adds	r3, #92	; 0x5c
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d912      	bls.n	8002a48 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	335c      	adds	r3, #92	; 0x5c
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3360      	adds	r3, #96	; 0x60
 8002a42:	2204      	movs	r2, #4
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e021      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3360      	adds	r3, #96	; 0x60
 8002a56:	2202      	movs	r2, #2
 8002a58:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a70:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a78:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a86:	461a      	mov	r2, r3
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	b2d9      	uxtb	r1, r3
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	202c      	movs	r0, #44	; 0x2c
 8002aa8:	fb00 f303 	mul.w	r3, r0, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	3360      	adds	r3, #96	; 0x60
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f00b fd3b 	bl	800e530 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002aba:	bf00      	nop
 8002abc:	3720      	adds	r7, #32
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b08a      	sub	sp, #40	; 0x28
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	0c5b      	lsrs	r3, r3, #17
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002af6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d004      	beq.n	8002b08 <HCD_RXQLVL_IRQHandler+0x46>
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	f000 80a9 	beq.w	8002c58 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b06:	e0aa      	b.n	8002c5e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80a6 	beq.w	8002c5c <HCD_RXQLVL_IRQHandler+0x19a>
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3344      	adds	r3, #68	; 0x44
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 809b 	beq.w	8002c5c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3350      	adds	r3, #80	; 0x50
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	441a      	add	r2, r3
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	202c      	movs	r0, #44	; 0x2c
 8002b40:	fb00 f303 	mul.w	r3, r0, r3
 8002b44:	440b      	add	r3, r1
 8002b46:	334c      	adds	r3, #76	; 0x4c
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d87a      	bhi.n	8002c44 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3344      	adds	r3, #68	; 0x44
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	b292      	uxth	r2, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	f001 fd9c 	bl	80046a4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	212c      	movs	r1, #44	; 0x2c
 8002b72:	fb01 f303 	mul.w	r3, r1, r3
 8002b76:	4413      	add	r3, r2
 8002b78:	3344      	adds	r3, #68	; 0x44
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	441a      	add	r2, r3
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	202c      	movs	r0, #44	; 0x2c
 8002b86:	fb00 f303 	mul.w	r3, r0, r3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3344      	adds	r3, #68	; 0x44
 8002b8e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3350      	adds	r3, #80	; 0x50
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	441a      	add	r2, r3
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	202c      	movs	r0, #44	; 0x2c
 8002baa:	fb00 f303 	mul.w	r3, r0, r3
 8002bae:	440b      	add	r3, r1
 8002bb0:	3350      	adds	r3, #80	; 0x50
 8002bb2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	0cdb      	lsrs	r3, r3, #19
 8002bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bc8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	212c      	movs	r1, #44	; 0x2c
 8002bd0:	fb01 f303 	mul.w	r3, r1, r3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3340      	adds	r3, #64	; 0x40
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d13c      	bne.n	8002c5c <HCD_RXQLVL_IRQHandler+0x19a>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d039      	beq.n	8002c5c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bfe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c06:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	461a      	mov	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3354      	adds	r3, #84	; 0x54
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	f083 0301 	eor.w	r3, r3, #1
 8002c2e:	b2d8      	uxtb	r0, r3
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	212c      	movs	r1, #44	; 0x2c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3354      	adds	r3, #84	; 0x54
 8002c3e:	4602      	mov	r2, r0
 8002c40:	701a      	strb	r2, [r3, #0]
      break;
 8002c42:	e00b      	b.n	8002c5c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	212c      	movs	r1, #44	; 0x2c
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3360      	adds	r3, #96	; 0x60
 8002c52:	2204      	movs	r2, #4
 8002c54:	701a      	strb	r2, [r3, #0]
      break;
 8002c56:	e001      	b.n	8002c5c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c58:	bf00      	nop
 8002c5a:	e000      	b.n	8002c5e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002c5c:	bf00      	nop
  }
}
 8002c5e:	bf00      	nop
 8002c60:	3728      	adds	r7, #40	; 0x28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c92:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d10b      	bne.n	8002cb6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d102      	bne.n	8002cae <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f00b fc25 	bl	800e4f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d132      	bne.n	8002d26 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f043 0308 	orr.w	r3, r3, #8
 8002cc6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d126      	bne.n	8002d20 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d113      	bne.n	8002d02 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ce0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ce4:	d106      	bne.n	8002cf4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2102      	movs	r1, #2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f001 fe47 	bl	8004980 <USB_InitFSLSPClkSel>
 8002cf2:	e011      	b.n	8002d18 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 fe40 	bl	8004980 <USB_InitFSLSPClkSel>
 8002d00:	e00a      	b.n	8002d18 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d106      	bne.n	8002d18 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d10:	461a      	mov	r2, r3
 8002d12:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d16:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f00b fc1b 	bl	800e554 <HAL_HCD_PortEnabled_Callback>
 8002d1e:	e002      	b.n	8002d26 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f00b fc25 	bl	800e570 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d103      	bne.n	8002d38 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f043 0320 	orr.w	r3, r3, #32
 8002d36:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e267      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d075      	beq.n	8002e56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d6a:	4b88      	ldr	r3, [pc, #544]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d00c      	beq.n	8002d90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d76:	4b85      	ldr	r3, [pc, #532]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d112      	bne.n	8002da8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d82:	4b82      	ldr	r3, [pc, #520]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d8e:	d10b      	bne.n	8002da8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d90:	4b7e      	ldr	r3, [pc, #504]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d05b      	beq.n	8002e54 <HAL_RCC_OscConfig+0x108>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d157      	bne.n	8002e54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e242      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db0:	d106      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x74>
 8002db2:	4b76      	ldr	r3, [pc, #472]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a75      	ldr	r2, [pc, #468]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e01d      	b.n	8002dfc <HAL_RCC_OscConfig+0xb0>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x98>
 8002dca:	4b70      	ldr	r3, [pc, #448]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a6f      	ldr	r2, [pc, #444]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b6d      	ldr	r3, [pc, #436]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a6c      	ldr	r2, [pc, #432]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0xb0>
 8002de4:	4b69      	ldr	r3, [pc, #420]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a68      	ldr	r2, [pc, #416]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b66      	ldr	r3, [pc, #408]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a65      	ldr	r2, [pc, #404]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d013      	beq.n	8002e2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fe f8b8 	bl	8000f78 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe f8b4 	bl	8000f78 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e207      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	4b5b      	ldr	r3, [pc, #364]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0xc0>
 8002e2a:	e014      	b.n	8002e56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fe f8a4 	bl	8000f78 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe f8a0 	bl	8000f78 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e1f3      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e46:	4b51      	ldr	r3, [pc, #324]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0xe8>
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d063      	beq.n	8002f2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e62:	4b4a      	ldr	r3, [pc, #296]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00b      	beq.n	8002e86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e6e:	4b47      	ldr	r3, [pc, #284]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d11c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7a:	4b44      	ldr	r3, [pc, #272]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d116      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e86:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d005      	beq.n	8002e9e <HAL_RCC_OscConfig+0x152>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d001      	beq.n	8002e9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e1c7      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9e:	4b3b      	ldr	r3, [pc, #236]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4937      	ldr	r1, [pc, #220]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb2:	e03a      	b.n	8002f2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d020      	beq.n	8002efe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ebc:	4b34      	ldr	r3, [pc, #208]	; (8002f90 <HAL_RCC_OscConfig+0x244>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec2:	f7fe f859 	bl	8000f78 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eca:	f7fe f855 	bl	8000f78 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e1a8      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002edc:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee8:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4925      	ldr	r1, [pc, #148]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	600b      	str	r3, [r1, #0]
 8002efc:	e015      	b.n	8002f2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002efe:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_RCC_OscConfig+0x244>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe f838 	bl	8000f78 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f0c:	f7fe f834 	bl	8000f78 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e187      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d036      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d016      	beq.n	8002f6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_RCC_OscConfig+0x248>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7fe f818 	bl	8000f78 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f4c:	f7fe f814 	bl	8000f78 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e167      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCC_OscConfig+0x240>)
 8002f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x200>
 8002f6a:	e01b      	b.n	8002fa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCC_OscConfig+0x248>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f72:	f7fe f801 	bl	8000f78 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f78:	e00e      	b.n	8002f98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f7a:	f7fd fffd 	bl	8000f78 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d907      	bls.n	8002f98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e150      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	42470000 	.word	0x42470000
 8002f94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f98:	4b88      	ldr	r3, [pc, #544]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1ea      	bne.n	8002f7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8097 	beq.w	80030e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb6:	4b81      	ldr	r3, [pc, #516]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10f      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	4b7d      	ldr	r3, [pc, #500]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	4a7c      	ldr	r2, [pc, #496]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd2:	4b7a      	ldr	r3, [pc, #488]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe2:	4b77      	ldr	r3, [pc, #476]	; (80031c0 <HAL_RCC_OscConfig+0x474>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d118      	bne.n	8003020 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fee:	4b74      	ldr	r3, [pc, #464]	; (80031c0 <HAL_RCC_OscConfig+0x474>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a73      	ldr	r2, [pc, #460]	; (80031c0 <HAL_RCC_OscConfig+0x474>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ffa:	f7fd ffbd 	bl	8000f78 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003002:	f7fd ffb9 	bl	8000f78 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e10c      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003014:	4b6a      	ldr	r3, [pc, #424]	; (80031c0 <HAL_RCC_OscConfig+0x474>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d106      	bne.n	8003036 <HAL_RCC_OscConfig+0x2ea>
 8003028:	4b64      	ldr	r3, [pc, #400]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	4a63      	ldr	r2, [pc, #396]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 800302e:	f043 0301 	orr.w	r3, r3, #1
 8003032:	6713      	str	r3, [r2, #112]	; 0x70
 8003034:	e01c      	b.n	8003070 <HAL_RCC_OscConfig+0x324>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b05      	cmp	r3, #5
 800303c:	d10c      	bne.n	8003058 <HAL_RCC_OscConfig+0x30c>
 800303e:	4b5f      	ldr	r3, [pc, #380]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	4a5e      	ldr	r2, [pc, #376]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	6713      	str	r3, [r2, #112]	; 0x70
 800304a:	4b5c      	ldr	r3, [pc, #368]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304e:	4a5b      	ldr	r2, [pc, #364]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6713      	str	r3, [r2, #112]	; 0x70
 8003056:	e00b      	b.n	8003070 <HAL_RCC_OscConfig+0x324>
 8003058:	4b58      	ldr	r3, [pc, #352]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305c:	4a57      	ldr	r2, [pc, #348]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	6713      	str	r3, [r2, #112]	; 0x70
 8003064:	4b55      	ldr	r3, [pc, #340]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	4a54      	ldr	r2, [pc, #336]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 800306a:	f023 0304 	bic.w	r3, r3, #4
 800306e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d015      	beq.n	80030a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003078:	f7fd ff7e 	bl	8000f78 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307e:	e00a      	b.n	8003096 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7fd ff7a 	bl	8000f78 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0cb      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003096:	4b49      	ldr	r3, [pc, #292]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ee      	beq.n	8003080 <HAL_RCC_OscConfig+0x334>
 80030a2:	e014      	b.n	80030ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a4:	f7fd ff68 	bl	8000f78 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f7fd ff64 	bl	8000f78 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e0b5      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c2:	4b3e      	ldr	r3, [pc, #248]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ee      	bne.n	80030ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d4:	4b39      	ldr	r3, [pc, #228]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	4a38      	ldr	r2, [pc, #224]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 80030da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80a1 	beq.w	800322c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ea:	4b34      	ldr	r3, [pc, #208]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d05c      	beq.n	80031b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d141      	bne.n	8003182 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fe:	4b31      	ldr	r3, [pc, #196]	; (80031c4 <HAL_RCC_OscConfig+0x478>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7fd ff38 	bl	8000f78 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800310c:	f7fd ff34 	bl	8000f78 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e087      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311e:	4b27      	ldr	r3, [pc, #156]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69da      	ldr	r2, [r3, #28]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	019b      	lsls	r3, r3, #6
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	085b      	lsrs	r3, r3, #1
 8003142:	3b01      	subs	r3, #1
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	061b      	lsls	r3, r3, #24
 800314e:	491b      	ldr	r1, [pc, #108]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 8003150:	4313      	orrs	r3, r2
 8003152:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003154:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <HAL_RCC_OscConfig+0x478>)
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315a:	f7fd ff0d 	bl	8000f78 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003162:	f7fd ff09 	bl	8000f78 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e05c      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003174:	4b11      	ldr	r3, [pc, #68]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x416>
 8003180:	e054      	b.n	800322c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <HAL_RCC_OscConfig+0x478>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fd fef6 	bl	8000f78 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003190:	f7fd fef2 	bl	8000f78 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e045      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_RCC_OscConfig+0x470>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x444>
 80031ae:	e03d      	b.n	800322c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d107      	bne.n	80031c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e038      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
 80031bc:	40023800 	.word	0x40023800
 80031c0:	40007000 	.word	0x40007000
 80031c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031c8:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <HAL_RCC_OscConfig+0x4ec>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d028      	beq.n	8003228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d121      	bne.n	8003228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d11a      	bne.n	8003228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031f8:	4013      	ands	r3, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003200:	4293      	cmp	r3, r2
 8003202:	d111      	bne.n	8003228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	3b01      	subs	r3, #1
 8003212:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d107      	bne.n	8003228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800

0800323c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0cc      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003250:	4b68      	ldr	r3, [pc, #416]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d90c      	bls.n	8003278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b65      	ldr	r3, [pc, #404]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	4b63      	ldr	r3, [pc, #396]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0b8      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d020      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003290:	4b59      	ldr	r3, [pc, #356]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4a58      	ldr	r2, [pc, #352]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800329a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032a8:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a52      	ldr	r2, [pc, #328]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b4:	4b50      	ldr	r3, [pc, #320]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	494d      	ldr	r1, [pc, #308]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d044      	beq.n	800335c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032da:	4b47      	ldr	r3, [pc, #284]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d119      	bne.n	800331a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e07f      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d003      	beq.n	80032fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fa:	4b3f      	ldr	r3, [pc, #252]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e06f      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330a:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e067      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331a:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f023 0203 	bic.w	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4934      	ldr	r1, [pc, #208]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800332c:	f7fd fe24 	bl	8000f78 <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	e00a      	b.n	800334a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003334:	f7fd fe20 	bl	8000f78 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e04f      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	4b2b      	ldr	r3, [pc, #172]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 020c 	and.w	r2, r3, #12
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	429a      	cmp	r2, r3
 800335a:	d1eb      	bne.n	8003334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800335c:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d20c      	bcs.n	8003384 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	4b22      	ldr	r3, [pc, #136]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003372:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d001      	beq.n	8003384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e032      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003390:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4916      	ldr	r1, [pc, #88]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ae:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	490e      	ldr	r1, [pc, #56]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033c2:	f000 f821 	bl	8003408 <HAL_RCC_GetSysClockFreq>
 80033c6:	4602      	mov	r2, r0
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	490a      	ldr	r1, [pc, #40]	; (80033fc <HAL_RCC_ClockConfig+0x1c0>)
 80033d4:	5ccb      	ldrb	r3, [r1, r3]
 80033d6:	fa22 f303 	lsr.w	r3, r2, r3
 80033da:	4a09      	ldr	r2, [pc, #36]	; (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd fc28 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40023c00 	.word	0x40023c00
 80033f8:	40023800 	.word	0x40023800
 80033fc:	080100d0 	.word	0x080100d0
 8003400:	20000000 	.word	0x20000000
 8003404:	20000004 	.word	0x20000004

08003408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800340c:	b094      	sub	sp, #80	; 0x50
 800340e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	647b      	str	r3, [r7, #68]	; 0x44
 8003414:	2300      	movs	r3, #0
 8003416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003418:	2300      	movs	r3, #0
 800341a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003420:	4b79      	ldr	r3, [pc, #484]	; (8003608 <HAL_RCC_GetSysClockFreq+0x200>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 030c 	and.w	r3, r3, #12
 8003428:	2b08      	cmp	r3, #8
 800342a:	d00d      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x40>
 800342c:	2b08      	cmp	r3, #8
 800342e:	f200 80e1 	bhi.w	80035f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x34>
 8003436:	2b04      	cmp	r3, #4
 8003438:	d003      	beq.n	8003442 <HAL_RCC_GetSysClockFreq+0x3a>
 800343a:	e0db      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800343c:	4b73      	ldr	r3, [pc, #460]	; (800360c <HAL_RCC_GetSysClockFreq+0x204>)
 800343e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003440:	e0db      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003442:	4b73      	ldr	r3, [pc, #460]	; (8003610 <HAL_RCC_GetSysClockFreq+0x208>)
 8003444:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003446:	e0d8      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003448:	4b6f      	ldr	r3, [pc, #444]	; (8003608 <HAL_RCC_GetSysClockFreq+0x200>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003450:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003452:	4b6d      	ldr	r3, [pc, #436]	; (8003608 <HAL_RCC_GetSysClockFreq+0x200>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d063      	beq.n	8003526 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345e:	4b6a      	ldr	r3, [pc, #424]	; (8003608 <HAL_RCC_GetSysClockFreq+0x200>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	099b      	lsrs	r3, r3, #6
 8003464:	2200      	movs	r2, #0
 8003466:	63bb      	str	r3, [r7, #56]	; 0x38
 8003468:	63fa      	str	r2, [r7, #60]	; 0x3c
 800346a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003470:	633b      	str	r3, [r7, #48]	; 0x30
 8003472:	2300      	movs	r3, #0
 8003474:	637b      	str	r3, [r7, #52]	; 0x34
 8003476:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800347a:	4622      	mov	r2, r4
 800347c:	462b      	mov	r3, r5
 800347e:	f04f 0000 	mov.w	r0, #0
 8003482:	f04f 0100 	mov.w	r1, #0
 8003486:	0159      	lsls	r1, r3, #5
 8003488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800348c:	0150      	lsls	r0, r2, #5
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4621      	mov	r1, r4
 8003494:	1a51      	subs	r1, r2, r1
 8003496:	6139      	str	r1, [r7, #16]
 8003498:	4629      	mov	r1, r5
 800349a:	eb63 0301 	sbc.w	r3, r3, r1
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034ac:	4659      	mov	r1, fp
 80034ae:	018b      	lsls	r3, r1, #6
 80034b0:	4651      	mov	r1, sl
 80034b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034b6:	4651      	mov	r1, sl
 80034b8:	018a      	lsls	r2, r1, #6
 80034ba:	4651      	mov	r1, sl
 80034bc:	ebb2 0801 	subs.w	r8, r2, r1
 80034c0:	4659      	mov	r1, fp
 80034c2:	eb63 0901 	sbc.w	r9, r3, r1
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034da:	4690      	mov	r8, r2
 80034dc:	4699      	mov	r9, r3
 80034de:	4623      	mov	r3, r4
 80034e0:	eb18 0303 	adds.w	r3, r8, r3
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	462b      	mov	r3, r5
 80034e8:	eb49 0303 	adc.w	r3, r9, r3
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034fa:	4629      	mov	r1, r5
 80034fc:	024b      	lsls	r3, r1, #9
 80034fe:	4621      	mov	r1, r4
 8003500:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003504:	4621      	mov	r1, r4
 8003506:	024a      	lsls	r2, r1, #9
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800350e:	2200      	movs	r2, #0
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
 8003512:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003514:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003518:	f7fc feb2 	bl	8000280 <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4613      	mov	r3, r2
 8003522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003524:	e058      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003526:	4b38      	ldr	r3, [pc, #224]	; (8003608 <HAL_RCC_GetSysClockFreq+0x200>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	099b      	lsrs	r3, r3, #6
 800352c:	2200      	movs	r2, #0
 800352e:	4618      	mov	r0, r3
 8003530:	4611      	mov	r1, r2
 8003532:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003536:	623b      	str	r3, [r7, #32]
 8003538:	2300      	movs	r3, #0
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
 800353c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003540:	4642      	mov	r2, r8
 8003542:	464b      	mov	r3, r9
 8003544:	f04f 0000 	mov.w	r0, #0
 8003548:	f04f 0100 	mov.w	r1, #0
 800354c:	0159      	lsls	r1, r3, #5
 800354e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003552:	0150      	lsls	r0, r2, #5
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4641      	mov	r1, r8
 800355a:	ebb2 0a01 	subs.w	sl, r2, r1
 800355e:	4649      	mov	r1, r9
 8003560:	eb63 0b01 	sbc.w	fp, r3, r1
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003570:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003574:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003578:	ebb2 040a 	subs.w	r4, r2, sl
 800357c:	eb63 050b 	sbc.w	r5, r3, fp
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	00eb      	lsls	r3, r5, #3
 800358a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800358e:	00e2      	lsls	r2, r4, #3
 8003590:	4614      	mov	r4, r2
 8003592:	461d      	mov	r5, r3
 8003594:	4643      	mov	r3, r8
 8003596:	18e3      	adds	r3, r4, r3
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	464b      	mov	r3, r9
 800359c:	eb45 0303 	adc.w	r3, r5, r3
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ae:	4629      	mov	r1, r5
 80035b0:	028b      	lsls	r3, r1, #10
 80035b2:	4621      	mov	r1, r4
 80035b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035b8:	4621      	mov	r1, r4
 80035ba:	028a      	lsls	r2, r1, #10
 80035bc:	4610      	mov	r0, r2
 80035be:	4619      	mov	r1, r3
 80035c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035c2:	2200      	movs	r2, #0
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	61fa      	str	r2, [r7, #28]
 80035c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035cc:	f7fc fe58 	bl	8000280 <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4613      	mov	r3, r2
 80035d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <HAL_RCC_GetSysClockFreq+0x200>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	3301      	adds	r3, #1
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035f2:	e002      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_RCC_GetSysClockFreq+0x204>)
 80035f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3750      	adds	r7, #80	; 0x50
 8003600:	46bd      	mov	sp, r7
 8003602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800
 800360c:	00f42400 	.word	0x00f42400
 8003610:	007a1200 	.word	0x007a1200

08003614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <HAL_RCC_GetHCLKFreq+0x14>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	20000000 	.word	0x20000000

0800362c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003630:	f7ff fff0 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0a9b      	lsrs	r3, r3, #10
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4903      	ldr	r1, [pc, #12]	; (8003650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	080100e0 	.word	0x080100e0

08003654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003658:	f7ff ffdc 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	0b5b      	lsrs	r3, r3, #13
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4903      	ldr	r1, [pc, #12]	; (8003678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40023800 	.word	0x40023800
 8003678:	080100e0 	.word	0x080100e0

0800367c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	220f      	movs	r2, #15
 800368a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800368c:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <HAL_RCC_GetClockConfig+0x5c>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0203 	and.w	r2, r3, #3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003698:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <HAL_RCC_GetClockConfig+0x5c>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <HAL_RCC_GetClockConfig+0x5c>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_RCC_GetClockConfig+0x5c>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	08db      	lsrs	r3, r3, #3
 80036b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036be:	4b07      	ldr	r3, [pc, #28]	; (80036dc <HAL_RCC_GetClockConfig+0x60>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0207 	and.w	r2, r3, #7
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	601a      	str	r2, [r3, #0]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40023c00 	.word	0x40023c00

080036e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e041      	b.n	8003776 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f839 	bl	800377e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3304      	adds	r3, #4
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f000 f9d8 	bl	8003ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d001      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e04e      	b.n	800384a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a23      	ldr	r2, [pc, #140]	; (8003858 <HAL_TIM_Base_Start_IT+0xc4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d022      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x80>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d6:	d01d      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x80>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1f      	ldr	r2, [pc, #124]	; (800385c <HAL_TIM_Base_Start_IT+0xc8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d018      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x80>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1e      	ldr	r2, [pc, #120]	; (8003860 <HAL_TIM_Base_Start_IT+0xcc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d013      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x80>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <HAL_TIM_Base_Start_IT+0xd0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00e      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x80>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <HAL_TIM_Base_Start_IT+0xd4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d009      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x80>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a19      	ldr	r2, [pc, #100]	; (800386c <HAL_TIM_Base_Start_IT+0xd8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x80>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a18      	ldr	r2, [pc, #96]	; (8003870 <HAL_TIM_Base_Start_IT+0xdc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d111      	bne.n	8003838 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b06      	cmp	r3, #6
 8003824:	d010      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0201 	orr.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003836:	e007      	b.n	8003848 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40010000 	.word	0x40010000
 800385c:	40000400 	.word	0x40000400
 8003860:	40000800 	.word	0x40000800
 8003864:	40000c00 	.word	0x40000c00
 8003868:	40010400 	.word	0x40010400
 800386c:	40014000 	.word	0x40014000
 8003870:	40001800 	.word	0x40001800

08003874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b02      	cmp	r3, #2
 8003888:	d122      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b02      	cmp	r3, #2
 8003896:	d11b      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0202 	mvn.w	r2, #2
 80038a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f8ee 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 80038bc:	e005      	b.n	80038ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8e0 	bl	8003a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f8f1 	bl	8003aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d122      	bne.n	8003924 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d11b      	bne.n	8003924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0204 	mvn.w	r2, #4
 80038f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f8c4 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f8b6 	bl	8003a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f8c7 	bl	8003aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b08      	cmp	r3, #8
 8003930:	d122      	bne.n	8003978 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b08      	cmp	r3, #8
 800393e:	d11b      	bne.n	8003978 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0208 	mvn.w	r2, #8
 8003948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2204      	movs	r2, #4
 800394e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f89a 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 8003964:	e005      	b.n	8003972 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f88c 	bl	8003a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f89d 	bl	8003aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b10      	cmp	r3, #16
 8003984:	d122      	bne.n	80039cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b10      	cmp	r3, #16
 8003992:	d11b      	bne.n	80039cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0210 	mvn.w	r2, #16
 800399c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2208      	movs	r2, #8
 80039a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f870 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 80039b8:	e005      	b.n	80039c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f862 	bl	8003a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f873 	bl	8003aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d10e      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d107      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0201 	mvn.w	r2, #1
 80039f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fd f894 	bl	8000b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a02:	2b80      	cmp	r3, #128	; 0x80
 8003a04:	d10e      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a10:	2b80      	cmp	r3, #128	; 0x80
 8003a12:	d107      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f902 	bl	8003c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d10e      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d107      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f838 	bl	8003ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d10e      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d107      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0220 	mvn.w	r2, #32
 8003a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f8cc 	bl	8003c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a40      	ldr	r2, [pc, #256]	; (8003be8 <TIM_Base_SetConfig+0x114>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d013      	beq.n	8003b14 <TIM_Base_SetConfig+0x40>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af2:	d00f      	beq.n	8003b14 <TIM_Base_SetConfig+0x40>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a3d      	ldr	r2, [pc, #244]	; (8003bec <TIM_Base_SetConfig+0x118>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00b      	beq.n	8003b14 <TIM_Base_SetConfig+0x40>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a3c      	ldr	r2, [pc, #240]	; (8003bf0 <TIM_Base_SetConfig+0x11c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d007      	beq.n	8003b14 <TIM_Base_SetConfig+0x40>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a3b      	ldr	r2, [pc, #236]	; (8003bf4 <TIM_Base_SetConfig+0x120>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <TIM_Base_SetConfig+0x40>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a3a      	ldr	r2, [pc, #232]	; (8003bf8 <TIM_Base_SetConfig+0x124>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d108      	bne.n	8003b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a2f      	ldr	r2, [pc, #188]	; (8003be8 <TIM_Base_SetConfig+0x114>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d02b      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b34:	d027      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a2c      	ldr	r2, [pc, #176]	; (8003bec <TIM_Base_SetConfig+0x118>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d023      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2b      	ldr	r2, [pc, #172]	; (8003bf0 <TIM_Base_SetConfig+0x11c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01f      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2a      	ldr	r2, [pc, #168]	; (8003bf4 <TIM_Base_SetConfig+0x120>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01b      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a29      	ldr	r2, [pc, #164]	; (8003bf8 <TIM_Base_SetConfig+0x124>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d017      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a28      	ldr	r2, [pc, #160]	; (8003bfc <TIM_Base_SetConfig+0x128>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <TIM_Base_SetConfig+0x12c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00f      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a26      	ldr	r2, [pc, #152]	; (8003c04 <TIM_Base_SetConfig+0x130>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00b      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a25      	ldr	r2, [pc, #148]	; (8003c08 <TIM_Base_SetConfig+0x134>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d007      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a24      	ldr	r2, [pc, #144]	; (8003c0c <TIM_Base_SetConfig+0x138>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a23      	ldr	r2, [pc, #140]	; (8003c10 <TIM_Base_SetConfig+0x13c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d108      	bne.n	8003b98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a0a      	ldr	r2, [pc, #40]	; (8003be8 <TIM_Base_SetConfig+0x114>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_Base_SetConfig+0xf8>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a0c      	ldr	r2, [pc, #48]	; (8003bf8 <TIM_Base_SetConfig+0x124>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d103      	bne.n	8003bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	615a      	str	r2, [r3, #20]
}
 8003bda:	bf00      	nop
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40010000 	.word	0x40010000
 8003bec:	40000400 	.word	0x40000400
 8003bf0:	40000800 	.word	0x40000800
 8003bf4:	40000c00 	.word	0x40000c00
 8003bf8:	40010400 	.word	0x40010400
 8003bfc:	40014000 	.word	0x40014000
 8003c00:	40014400 	.word	0x40014400
 8003c04:	40014800 	.word	0x40014800
 8003c08:	40001800 	.word	0x40001800
 8003c0c:	40001c00 	.word	0x40001c00
 8003c10:	40002000 	.word	0x40002000

08003c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e03f      	b.n	8003cce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fc ffa0 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2224      	movs	r2, #36	; 0x24
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f929 	bl	8003ed8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b08a      	sub	sp, #40	; 0x28
 8003cda:	af02      	add	r7, sp, #8
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d17c      	bne.n	8003df0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <HAL_UART_Transmit+0x2c>
 8003cfc:	88fb      	ldrh	r3, [r7, #6]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e075      	b.n	8003df2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_UART_Transmit+0x3e>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e06e      	b.n	8003df2 <HAL_UART_Transmit+0x11c>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2221      	movs	r2, #33	; 0x21
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d2a:	f7fd f925 	bl	8000f78 <HAL_GetTick>
 8003d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	88fa      	ldrh	r2, [r7, #6]
 8003d34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	88fa      	ldrh	r2, [r7, #6]
 8003d3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d44:	d108      	bne.n	8003d58 <HAL_UART_Transmit+0x82>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d104      	bne.n	8003d58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	e003      	b.n	8003d60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d68:	e02a      	b.n	8003dc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2200      	movs	r2, #0
 8003d72:	2180      	movs	r1, #128	; 0x80
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f840 	bl	8003dfa <UART_WaitOnFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e036      	b.n	8003df2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10b      	bne.n	8003da2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	3302      	adds	r3, #2
 8003d9e:	61bb      	str	r3, [r7, #24]
 8003da0:	e007      	b.n	8003db2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	781a      	ldrb	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	3301      	adds	r3, #1
 8003db0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1cf      	bne.n	8003d6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2140      	movs	r1, #64	; 0x40
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f810 	bl	8003dfa <UART_WaitOnFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e006      	b.n	8003df2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	e000      	b.n	8003df2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003df0:	2302      	movs	r3, #2
  }
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3720      	adds	r7, #32
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b090      	sub	sp, #64	; 0x40
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	4613      	mov	r3, r2
 8003e08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e0a:	e050      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e12:	d04c      	beq.n	8003eae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e1a:	f7fd f8ad 	bl	8000f78 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d241      	bcs.n	8003eae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e4a:	637a      	str	r2, [r7, #52]	; 0x34
 8003e4c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e5      	bne.n	8003e2a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3314      	adds	r3, #20
 8003e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f023 0301 	bic.w	r3, r3, #1
 8003e74:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3314      	adds	r3, #20
 8003e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e7e:	623a      	str	r2, [r7, #32]
 8003e80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	69f9      	ldr	r1, [r7, #28]
 8003e84:	6a3a      	ldr	r2, [r7, #32]
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e5      	bne.n	8003e5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e00f      	b.n	8003ece <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	bf0c      	ite	eq
 8003ebe:	2301      	moveq	r3, #1
 8003ec0:	2300      	movne	r3, #0
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d09f      	beq.n	8003e0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3740      	adds	r7, #64	; 0x40
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003edc:	b0c0      	sub	sp, #256	; 0x100
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	68d9      	ldr	r1, [r3, #12]
 8003ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	ea40 0301 	orr.w	r3, r0, r1
 8003f00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f30:	f021 010c 	bic.w	r1, r1, #12
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f3e:	430b      	orrs	r3, r1
 8003f40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f52:	6999      	ldr	r1, [r3, #24]
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	ea40 0301 	orr.w	r3, r0, r1
 8003f5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	4b8f      	ldr	r3, [pc, #572]	; (80041a4 <UART_SetConfig+0x2cc>)
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d005      	beq.n	8003f78 <UART_SetConfig+0xa0>
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4b8d      	ldr	r3, [pc, #564]	; (80041a8 <UART_SetConfig+0x2d0>)
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d104      	bne.n	8003f82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f78:	f7ff fb6c 	bl	8003654 <HAL_RCC_GetPCLK2Freq>
 8003f7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f80:	e003      	b.n	8003f8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f82:	f7ff fb53 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 8003f86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f94:	f040 810c 	bne.w	80041b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fa2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fa6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003faa:	4622      	mov	r2, r4
 8003fac:	462b      	mov	r3, r5
 8003fae:	1891      	adds	r1, r2, r2
 8003fb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fb2:	415b      	adcs	r3, r3
 8003fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fba:	4621      	mov	r1, r4
 8003fbc:	eb12 0801 	adds.w	r8, r2, r1
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	eb43 0901 	adc.w	r9, r3, r1
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fda:	4690      	mov	r8, r2
 8003fdc:	4699      	mov	r9, r3
 8003fde:	4623      	mov	r3, r4
 8003fe0:	eb18 0303 	adds.w	r3, r8, r3
 8003fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fe8:	462b      	mov	r3, r5
 8003fea:	eb49 0303 	adc.w	r3, r9, r3
 8003fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ffe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004002:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004006:	460b      	mov	r3, r1
 8004008:	18db      	adds	r3, r3, r3
 800400a:	653b      	str	r3, [r7, #80]	; 0x50
 800400c:	4613      	mov	r3, r2
 800400e:	eb42 0303 	adc.w	r3, r2, r3
 8004012:	657b      	str	r3, [r7, #84]	; 0x54
 8004014:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004018:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800401c:	f7fc f930 	bl	8000280 <__aeabi_uldivmod>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4b61      	ldr	r3, [pc, #388]	; (80041ac <UART_SetConfig+0x2d4>)
 8004026:	fba3 2302 	umull	r2, r3, r3, r2
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	011c      	lsls	r4, r3, #4
 800402e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004032:	2200      	movs	r2, #0
 8004034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004038:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800403c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004040:	4642      	mov	r2, r8
 8004042:	464b      	mov	r3, r9
 8004044:	1891      	adds	r1, r2, r2
 8004046:	64b9      	str	r1, [r7, #72]	; 0x48
 8004048:	415b      	adcs	r3, r3
 800404a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800404c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004050:	4641      	mov	r1, r8
 8004052:	eb12 0a01 	adds.w	sl, r2, r1
 8004056:	4649      	mov	r1, r9
 8004058:	eb43 0b01 	adc.w	fp, r3, r1
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004068:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800406c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004070:	4692      	mov	sl, r2
 8004072:	469b      	mov	fp, r3
 8004074:	4643      	mov	r3, r8
 8004076:	eb1a 0303 	adds.w	r3, sl, r3
 800407a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800407e:	464b      	mov	r3, r9
 8004080:	eb4b 0303 	adc.w	r3, fp, r3
 8004084:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004094:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004098:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800409c:	460b      	mov	r3, r1
 800409e:	18db      	adds	r3, r3, r3
 80040a0:	643b      	str	r3, [r7, #64]	; 0x40
 80040a2:	4613      	mov	r3, r2
 80040a4:	eb42 0303 	adc.w	r3, r2, r3
 80040a8:	647b      	str	r3, [r7, #68]	; 0x44
 80040aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040b2:	f7fc f8e5 	bl	8000280 <__aeabi_uldivmod>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4611      	mov	r1, r2
 80040bc:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <UART_SetConfig+0x2d4>)
 80040be:	fba3 2301 	umull	r2, r3, r3, r1
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	2264      	movs	r2, #100	; 0x64
 80040c6:	fb02 f303 	mul.w	r3, r2, r3
 80040ca:	1acb      	subs	r3, r1, r3
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040d2:	4b36      	ldr	r3, [pc, #216]	; (80041ac <UART_SetConfig+0x2d4>)
 80040d4:	fba3 2302 	umull	r2, r3, r3, r2
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040e0:	441c      	add	r4, r3
 80040e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040f4:	4642      	mov	r2, r8
 80040f6:	464b      	mov	r3, r9
 80040f8:	1891      	adds	r1, r2, r2
 80040fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80040fc:	415b      	adcs	r3, r3
 80040fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004100:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004104:	4641      	mov	r1, r8
 8004106:	1851      	adds	r1, r2, r1
 8004108:	6339      	str	r1, [r7, #48]	; 0x30
 800410a:	4649      	mov	r1, r9
 800410c:	414b      	adcs	r3, r1
 800410e:	637b      	str	r3, [r7, #52]	; 0x34
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800411c:	4659      	mov	r1, fp
 800411e:	00cb      	lsls	r3, r1, #3
 8004120:	4651      	mov	r1, sl
 8004122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004126:	4651      	mov	r1, sl
 8004128:	00ca      	lsls	r2, r1, #3
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	4603      	mov	r3, r0
 8004130:	4642      	mov	r2, r8
 8004132:	189b      	adds	r3, r3, r2
 8004134:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004138:	464b      	mov	r3, r9
 800413a:	460a      	mov	r2, r1
 800413c:	eb42 0303 	adc.w	r3, r2, r3
 8004140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004150:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004154:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004158:	460b      	mov	r3, r1
 800415a:	18db      	adds	r3, r3, r3
 800415c:	62bb      	str	r3, [r7, #40]	; 0x28
 800415e:	4613      	mov	r3, r2
 8004160:	eb42 0303 	adc.w	r3, r2, r3
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004166:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800416a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800416e:	f7fc f887 	bl	8000280 <__aeabi_uldivmod>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <UART_SetConfig+0x2d4>)
 8004178:	fba3 1302 	umull	r1, r3, r3, r2
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	2164      	movs	r1, #100	; 0x64
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	3332      	adds	r3, #50	; 0x32
 800418a:	4a08      	ldr	r2, [pc, #32]	; (80041ac <UART_SetConfig+0x2d4>)
 800418c:	fba2 2303 	umull	r2, r3, r2, r3
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	f003 0207 	and.w	r2, r3, #7
 8004196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4422      	add	r2, r4
 800419e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041a0:	e105      	b.n	80043ae <UART_SetConfig+0x4d6>
 80041a2:	bf00      	nop
 80041a4:	40011000 	.word	0x40011000
 80041a8:	40011400 	.word	0x40011400
 80041ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b4:	2200      	movs	r2, #0
 80041b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041c2:	4642      	mov	r2, r8
 80041c4:	464b      	mov	r3, r9
 80041c6:	1891      	adds	r1, r2, r2
 80041c8:	6239      	str	r1, [r7, #32]
 80041ca:	415b      	adcs	r3, r3
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
 80041ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041d2:	4641      	mov	r1, r8
 80041d4:	1854      	adds	r4, r2, r1
 80041d6:	4649      	mov	r1, r9
 80041d8:	eb43 0501 	adc.w	r5, r3, r1
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	00eb      	lsls	r3, r5, #3
 80041e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ea:	00e2      	lsls	r2, r4, #3
 80041ec:	4614      	mov	r4, r2
 80041ee:	461d      	mov	r5, r3
 80041f0:	4643      	mov	r3, r8
 80041f2:	18e3      	adds	r3, r4, r3
 80041f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041f8:	464b      	mov	r3, r9
 80041fa:	eb45 0303 	adc.w	r3, r5, r3
 80041fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800420e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800421e:	4629      	mov	r1, r5
 8004220:	008b      	lsls	r3, r1, #2
 8004222:	4621      	mov	r1, r4
 8004224:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004228:	4621      	mov	r1, r4
 800422a:	008a      	lsls	r2, r1, #2
 800422c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004230:	f7fc f826 	bl	8000280 <__aeabi_uldivmod>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4b60      	ldr	r3, [pc, #384]	; (80043bc <UART_SetConfig+0x4e4>)
 800423a:	fba3 2302 	umull	r2, r3, r3, r2
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	011c      	lsls	r4, r3, #4
 8004242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004246:	2200      	movs	r2, #0
 8004248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800424c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004250:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004254:	4642      	mov	r2, r8
 8004256:	464b      	mov	r3, r9
 8004258:	1891      	adds	r1, r2, r2
 800425a:	61b9      	str	r1, [r7, #24]
 800425c:	415b      	adcs	r3, r3
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004264:	4641      	mov	r1, r8
 8004266:	1851      	adds	r1, r2, r1
 8004268:	6139      	str	r1, [r7, #16]
 800426a:	4649      	mov	r1, r9
 800426c:	414b      	adcs	r3, r1
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800427c:	4659      	mov	r1, fp
 800427e:	00cb      	lsls	r3, r1, #3
 8004280:	4651      	mov	r1, sl
 8004282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004286:	4651      	mov	r1, sl
 8004288:	00ca      	lsls	r2, r1, #3
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	4603      	mov	r3, r0
 8004290:	4642      	mov	r2, r8
 8004292:	189b      	adds	r3, r3, r2
 8004294:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004298:	464b      	mov	r3, r9
 800429a:	460a      	mov	r2, r1
 800429c:	eb42 0303 	adc.w	r3, r2, r3
 80042a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80042ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042bc:	4649      	mov	r1, r9
 80042be:	008b      	lsls	r3, r1, #2
 80042c0:	4641      	mov	r1, r8
 80042c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042c6:	4641      	mov	r1, r8
 80042c8:	008a      	lsls	r2, r1, #2
 80042ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042ce:	f7fb ffd7 	bl	8000280 <__aeabi_uldivmod>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4b39      	ldr	r3, [pc, #228]	; (80043bc <UART_SetConfig+0x4e4>)
 80042d8:	fba3 1302 	umull	r1, r3, r3, r2
 80042dc:	095b      	lsrs	r3, r3, #5
 80042de:	2164      	movs	r1, #100	; 0x64
 80042e0:	fb01 f303 	mul.w	r3, r1, r3
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	3332      	adds	r3, #50	; 0x32
 80042ea:	4a34      	ldr	r2, [pc, #208]	; (80043bc <UART_SetConfig+0x4e4>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f6:	441c      	add	r4, r3
 80042f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042fc:	2200      	movs	r2, #0
 80042fe:	673b      	str	r3, [r7, #112]	; 0x70
 8004300:	677a      	str	r2, [r7, #116]	; 0x74
 8004302:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004306:	4642      	mov	r2, r8
 8004308:	464b      	mov	r3, r9
 800430a:	1891      	adds	r1, r2, r2
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	415b      	adcs	r3, r3
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004316:	4641      	mov	r1, r8
 8004318:	1851      	adds	r1, r2, r1
 800431a:	6039      	str	r1, [r7, #0]
 800431c:	4649      	mov	r1, r9
 800431e:	414b      	adcs	r3, r1
 8004320:	607b      	str	r3, [r7, #4]
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800432e:	4659      	mov	r1, fp
 8004330:	00cb      	lsls	r3, r1, #3
 8004332:	4651      	mov	r1, sl
 8004334:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004338:	4651      	mov	r1, sl
 800433a:	00ca      	lsls	r2, r1, #3
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	4603      	mov	r3, r0
 8004342:	4642      	mov	r2, r8
 8004344:	189b      	adds	r3, r3, r2
 8004346:	66bb      	str	r3, [r7, #104]	; 0x68
 8004348:	464b      	mov	r3, r9
 800434a:	460a      	mov	r2, r1
 800434c:	eb42 0303 	adc.w	r3, r2, r3
 8004350:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	663b      	str	r3, [r7, #96]	; 0x60
 800435c:	667a      	str	r2, [r7, #100]	; 0x64
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800436a:	4649      	mov	r1, r9
 800436c:	008b      	lsls	r3, r1, #2
 800436e:	4641      	mov	r1, r8
 8004370:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004374:	4641      	mov	r1, r8
 8004376:	008a      	lsls	r2, r1, #2
 8004378:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800437c:	f7fb ff80 	bl	8000280 <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <UART_SetConfig+0x4e4>)
 8004386:	fba3 1302 	umull	r1, r3, r3, r2
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	2164      	movs	r1, #100	; 0x64
 800438e:	fb01 f303 	mul.w	r3, r1, r3
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	3332      	adds	r3, #50	; 0x32
 8004398:	4a08      	ldr	r2, [pc, #32]	; (80043bc <UART_SetConfig+0x4e4>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	f003 020f 	and.w	r2, r3, #15
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4422      	add	r2, r4
 80043ac:	609a      	str	r2, [r3, #8]
}
 80043ae:	bf00      	nop
 80043b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043b4:	46bd      	mov	sp, r7
 80043b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ba:	bf00      	nop
 80043bc:	51eb851f 	.word	0x51eb851f

080043c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043c0:	b084      	sub	sp, #16
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	f107 001c 	add.w	r0, r7, #28
 80043ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d122      	bne.n	800441e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80043ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004402:	2b01      	cmp	r3, #1
 8004404:	d105      	bne.n	8004412 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f9c0 	bl	8004798 <USB_CoreReset>
 8004418:	4603      	mov	r3, r0
 800441a:	73fb      	strb	r3, [r7, #15]
 800441c:	e01a      	b.n	8004454 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9b4 	bl	8004798 <USB_CoreReset>
 8004430:	4603      	mov	r3, r0
 8004432:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
 8004446:	e005      	b.n	8004454 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	2b01      	cmp	r3, #1
 8004458:	d10b      	bne.n	8004472 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f043 0206 	orr.w	r2, r3, #6
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f043 0220 	orr.w	r2, r3, #32
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800447e:	b004      	add	sp, #16
 8004480:	4770      	bx	lr

08004482 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f043 0201 	orr.w	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f023 0201 	bic.w	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d115      	bne.n	8004514 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044f4:	2001      	movs	r0, #1
 80044f6:	f7fc fd4b 	bl	8000f90 <HAL_Delay>
      ms++;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3301      	adds	r3, #1
 80044fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f93a 	bl	800477a <USB_GetMode>
 8004506:	4603      	mov	r3, r0
 8004508:	2b01      	cmp	r3, #1
 800450a:	d01e      	beq.n	800454a <USB_SetCurrentMode+0x84>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b31      	cmp	r3, #49	; 0x31
 8004510:	d9f0      	bls.n	80044f4 <USB_SetCurrentMode+0x2e>
 8004512:	e01a      	b.n	800454a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d115      	bne.n	8004546 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004526:	2001      	movs	r0, #1
 8004528:	f7fc fd32 	bl	8000f90 <HAL_Delay>
      ms++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3301      	adds	r3, #1
 8004530:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f921 	bl	800477a <USB_GetMode>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d005      	beq.n	800454a <USB_SetCurrentMode+0x84>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b31      	cmp	r3, #49	; 0x31
 8004542:	d9f0      	bls.n	8004526 <USB_SetCurrentMode+0x60>
 8004544:	e001      	b.n	800454a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e005      	b.n	8004556 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b32      	cmp	r3, #50	; 0x32
 800454e:	d101      	bne.n	8004554 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e000      	b.n	8004556 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3301      	adds	r3, #1
 8004572:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <USB_FlushTxFifo+0x64>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e01b      	b.n	80045b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	daf2      	bge.n	800456e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	019b      	lsls	r3, r3, #6
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3301      	adds	r3, #1
 800459c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a08      	ldr	r2, [pc, #32]	; (80045c4 <USB_FlushTxFifo+0x64>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e006      	b.n	80045b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d0f0      	beq.n	8004598 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	00030d40 	.word	0x00030d40

080045c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3301      	adds	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a11      	ldr	r2, [pc, #68]	; (8004624 <USB_FlushRxFifo+0x5c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d901      	bls.n	80045e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e018      	b.n	8004618 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	daf2      	bge.n	80045d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2210      	movs	r2, #16
 80045f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4a08      	ldr	r2, [pc, #32]	; (8004624 <USB_FlushRxFifo+0x5c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e006      	b.n	8004618 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	2b10      	cmp	r3, #16
 8004614:	d0f0      	beq.n	80045f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	00030d40 	.word	0x00030d40

08004628 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004628:	b480      	push	{r7}
 800462a:	b089      	sub	sp, #36	; 0x24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	4611      	mov	r1, r2
 8004634:	461a      	mov	r2, r3
 8004636:	460b      	mov	r3, r1
 8004638:	71fb      	strb	r3, [r7, #7]
 800463a:	4613      	mov	r3, r2
 800463c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004646:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	d123      	bne.n	8004696 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800464e:	88bb      	ldrh	r3, [r7, #4]
 8004650:	3303      	adds	r3, #3
 8004652:	089b      	lsrs	r3, r3, #2
 8004654:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004656:	2300      	movs	r3, #0
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	e018      	b.n	800468e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	031a      	lsls	r2, r3, #12
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	4413      	add	r3, r2
 8004664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004668:	461a      	mov	r2, r3
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	3301      	adds	r3, #1
 8004674:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	3301      	adds	r3, #1
 800467a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	3301      	adds	r3, #1
 8004680:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3301      	adds	r3, #1
 8004686:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	3301      	adds	r3, #1
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	429a      	cmp	r2, r3
 8004694:	d3e2      	bcc.n	800465c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3724      	adds	r7, #36	; 0x24
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b08b      	sub	sp, #44	; 0x2c
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	4613      	mov	r3, r2
 80046b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	089b      	lsrs	r3, r3, #2
 80046be:	b29b      	uxth	r3, r3
 80046c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80046ca:	2300      	movs	r3, #0
 80046cc:	623b      	str	r3, [r7, #32]
 80046ce:	e014      	b.n	80046fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	601a      	str	r2, [r3, #0]
    pDest++;
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	3301      	adds	r3, #1
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	3301      	adds	r3, #1
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	3301      	adds	r3, #1
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	3301      	adds	r3, #1
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	3301      	adds	r3, #1
 80046f8:	623b      	str	r3, [r7, #32]
 80046fa:	6a3a      	ldr	r2, [r7, #32]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d3e6      	bcc.n	80046d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004702:	8bfb      	ldrh	r3, [r7, #30]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01e      	beq.n	8004746 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004712:	461a      	mov	r2, r3
 8004714:	f107 0310 	add.w	r3, r7, #16
 8004718:	6812      	ldr	r2, [r2, #0]
 800471a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	fa22 f303 	lsr.w	r3, r2, r3
 8004728:	b2da      	uxtb	r2, r3
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	701a      	strb	r2, [r3, #0]
      i++;
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	3301      	adds	r3, #1
 8004732:	623b      	str	r3, [r7, #32]
      pDest++;
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	3301      	adds	r3, #1
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800473a:	8bfb      	ldrh	r3, [r7, #30]
 800473c:	3b01      	subs	r3, #1
 800473e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004740:	8bfb      	ldrh	r3, [r7, #30]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1ea      	bne.n	800471c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004748:	4618      	mov	r0, r3
 800474a:	372c      	adds	r7, #44	; 0x2c
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4013      	ands	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800476c:	68fb      	ldr	r3, [r7, #12]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f003 0301 	and.w	r3, r3, #1
}
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3301      	adds	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4a13      	ldr	r2, [pc, #76]	; (80047fc <USB_CoreReset+0x64>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d901      	bls.n	80047b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e01b      	b.n	80047ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	daf2      	bge.n	80047a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f043 0201 	orr.w	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3301      	adds	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4a09      	ldr	r2, [pc, #36]	; (80047fc <USB_CoreReset+0x64>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d901      	bls.n	80047e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e006      	b.n	80047ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d0f0      	beq.n	80047ce <USB_CoreReset+0x36>

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	00030d40 	.word	0x00030d40

08004800 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004800:	b084      	sub	sp, #16
 8004802:	b580      	push	{r7, lr}
 8004804:	b086      	sub	sp, #24
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800480e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004820:	461a      	mov	r2, r3
 8004822:	2300      	movs	r3, #0
 8004824:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d018      	beq.n	8004888 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d10a      	bne.n	8004872 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800486a:	f043 0304 	orr.w	r3, r3, #4
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	e014      	b.n	800489c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004880:	f023 0304 	bic.w	r3, r3, #4
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	e009      	b.n	800489c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004896:	f023 0304 	bic.w	r3, r3, #4
 800489a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800489c:	2110      	movs	r1, #16
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff fe5e 	bl	8004560 <USB_FlushTxFifo>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff fe8a 	bl	80045c8 <USB_FlushRxFifo>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80048be:	2300      	movs	r3, #0
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	e015      	b.n	80048f0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d0:	461a      	mov	r2, r3
 80048d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048d6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e4:	461a      	mov	r2, r3
 80048e6:	2300      	movs	r3, #0
 80048e8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	3301      	adds	r3, #1
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d3e5      	bcc.n	80048c4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004904:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004918:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a13      	ldr	r2, [pc, #76]	; (800496c <USB_HostInit+0x16c>)
 800491e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a13      	ldr	r2, [pc, #76]	; (8004970 <USB_HostInit+0x170>)
 8004924:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004928:	e009      	b.n	800493e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2280      	movs	r2, #128	; 0x80
 800492e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a10      	ldr	r2, [pc, #64]	; (8004974 <USB_HostInit+0x174>)
 8004934:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a0f      	ldr	r2, [pc, #60]	; (8004978 <USB_HostInit+0x178>)
 800493a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	2b00      	cmp	r3, #0
 8004942:	d105      	bne.n	8004950 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f043 0210 	orr.w	r2, r3, #16
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699a      	ldr	r2, [r3, #24]
 8004954:	4b09      	ldr	r3, [pc, #36]	; (800497c <USB_HostInit+0x17c>)
 8004956:	4313      	orrs	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800495c:	7dfb      	ldrb	r3, [r7, #23]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004968:	b004      	add	sp, #16
 800496a:	4770      	bx	lr
 800496c:	01000200 	.word	0x01000200
 8004970:	00e00300 	.word	0x00e00300
 8004974:	00600080 	.word	0x00600080
 8004978:	004000e0 	.word	0x004000e0
 800497c:	a3200008 	.word	0xa3200008

08004980 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800499e:	f023 0303 	bic.w	r3, r3, #3
 80049a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	68f9      	ldr	r1, [r7, #12]
 80049b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049b8:	4313      	orrs	r3, r2
 80049ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d107      	bne.n	80049d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049c8:	461a      	mov	r2, r3
 80049ca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80049ce:	6053      	str	r3, [r2, #4]
 80049d0:	e009      	b.n	80049e6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d106      	bne.n	80049e6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049de:	461a      	mov	r2, r3
 80049e0:	f241 7370 	movw	r3, #6000	; 0x1770
 80049e4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a14:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a22:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004a24:	2064      	movs	r0, #100	; 0x64
 8004a26:	f7fc fab3 	bl	8000f90 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a36:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004a38:	200a      	movs	r0, #10
 8004a3a:	f7fc faa9 	bl	8000f90 <HAL_Delay>

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a6c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d109      	bne.n	8004a8c <USB_DriveVbus+0x44>
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d106      	bne.n	8004a8c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a8a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a96:	d109      	bne.n	8004aac <USB_DriveVbus+0x64>
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aaa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	0c5b      	lsrs	r3, r3, #17
 8004ad8:	f003 0303 	and.w	r3, r3, #3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	b29b      	uxth	r3, r3
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
	...

08004b0c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	4608      	mov	r0, r1
 8004b16:	4611      	mov	r1, r2
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	70fb      	strb	r3, [r7, #3]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	70bb      	strb	r3, [r7, #2]
 8004b22:	4613      	mov	r3, r2
 8004b24:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b40:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004b42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d87e      	bhi.n	8004c48 <USB_HC_Init+0x13c>
 8004b4a:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <USB_HC_Init+0x44>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004c0b 	.word	0x08004c0b
 8004b58:	08004b61 	.word	0x08004b61
 8004b5c:	08004bcd 	.word	0x08004bcd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004b72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004b74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	da10      	bge.n	8004b9e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	78fa      	ldrb	r2, [r7, #3]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004b9c:	e057      	b.n	8004c4e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d051      	beq.n	8004c4e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	0151      	lsls	r1, r2, #5
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	440a      	add	r2, r1
 8004bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bc4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004bc8:	60d3      	str	r3, [r2, #12]
      break;
 8004bca:	e040      	b.n	8004c4e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f240 639d 	movw	r3, #1693	; 0x69d
 8004bde:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004be0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	da34      	bge.n	8004c52 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	78fa      	ldrb	r2, [r7, #3]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c06:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004c08:	e023      	b.n	8004c52 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c16:	461a      	mov	r2, r3
 8004c18:	f240 2325 	movw	r3, #549	; 0x225
 8004c1c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004c1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	da17      	bge.n	8004c56 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	78fa      	ldrb	r2, [r7, #3]
 8004c36:	0151      	lsls	r1, r2, #5
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	440a      	add	r2, r1
 8004c3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c40:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004c44:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004c46:	e006      	b.n	8004c56 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	77fb      	strb	r3, [r7, #31]
      break;
 8004c4c:	e004      	b.n	8004c58 <USB_HC_Init+0x14c>
      break;
 8004c4e:	bf00      	nop
 8004c50:	e002      	b.n	8004c58 <USB_HC_Init+0x14c>
      break;
 8004c52:	bf00      	nop
 8004c54:	e000      	b.n	8004c58 <USB_HC_Init+0x14c>
      break;
 8004c56:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	0151      	lsls	r1, r2, #5
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c72:	f043 0302 	orr.w	r3, r3, #2
 8004c76:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c7e:	699a      	ldr	r2, [r3, #24]
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	2101      	movs	r1, #1
 8004c88:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8c:	6939      	ldr	r1, [r7, #16]
 8004c8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c92:	4313      	orrs	r3, r2
 8004c94:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004ca2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	da03      	bge.n	8004cb2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cae:	61bb      	str	r3, [r7, #24]
 8004cb0:	e001      	b.n	8004cb6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff feff 	bl	8004aba <USB_GetHostSpeed>
 8004cbc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d106      	bne.n	8004cd4 <USB_HC_Init+0x1c8>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d003      	beq.n	8004cd4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004ccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	e001      	b.n	8004cd8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004cd8:	787b      	ldrb	r3, [r7, #1]
 8004cda:	059b      	lsls	r3, r3, #22
 8004cdc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ce0:	78bb      	ldrb	r3, [r7, #2]
 8004ce2:	02db      	lsls	r3, r3, #11
 8004ce4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ce8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004cea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004cee:	049b      	lsls	r3, r3, #18
 8004cf0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004cf4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004cf6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004cfc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	0159      	lsls	r1, r3, #5
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	440b      	add	r3, r1
 8004d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d14:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004d16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d003      	beq.n	8004d26 <USB_HC_Init+0x21a>
 8004d1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d10f      	bne.n	8004d46 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	78fa      	ldrb	r2, [r7, #3]
 8004d36:	0151      	lsls	r1, r2, #5
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	440a      	add	r2, r1
 8004d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d44:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004d46:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08c      	sub	sp, #48	; 0x30
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	785b      	ldrb	r3, [r3, #1]
 8004d66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d6c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d02d      	beq.n	8004dd6 <USB_HC_StartXfer+0x86>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	791b      	ldrb	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d129      	bne.n	8004dd6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d117      	bne.n	8004db8 <USB_HC_StartXfer+0x68>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	79db      	ldrb	r3, [r3, #7]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <USB_HC_StartXfer+0x48>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	79db      	ldrb	r3, [r3, #7]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d10f      	bne.n	8004db8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	6a3a      	ldr	r2, [r7, #32]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10b      	bne.n	8004dd6 <USB_HC_StartXfer+0x86>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	795b      	ldrb	r3, [r3, #5]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d107      	bne.n	8004dd6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fa0f 	bl	80051f0 <USB_DoPing>
      return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e0f8      	b.n	8004fc8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d018      	beq.n	8004e10 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	8912      	ldrh	r2, [r2, #8]
 8004de6:	4413      	add	r3, r2
 8004de8:	3b01      	subs	r3, #1
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	8912      	ldrh	r2, [r2, #8]
 8004dee:	fbb3 f3f2 	udiv	r3, r3, r2
 8004df2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004df4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004df6:	8b7b      	ldrh	r3, [r7, #26]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d90b      	bls.n	8004e14 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004dfc:	8b7b      	ldrh	r3, [r7, #26]
 8004dfe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004e00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	8912      	ldrh	r2, [r2, #8]
 8004e06:	fb03 f202 	mul.w	r2, r3, r2
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	611a      	str	r2, [r3, #16]
 8004e0e:	e001      	b.n	8004e14 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004e10:	2301      	movs	r3, #1
 8004e12:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	78db      	ldrb	r3, [r3, #3]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004e1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	8912      	ldrh	r2, [r2, #8]
 8004e22:	fb03 f202 	mul.w	r2, r3, r2
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	611a      	str	r2, [r3, #16]
 8004e2a:	e003      	b.n	8004e34 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	695a      	ldr	r2, [r3, #20]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004e3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e3e:	04d9      	lsls	r1, r3, #19
 8004e40:	4b63      	ldr	r3, [pc, #396]	; (8004fd0 <USB_HC_StartXfer+0x280>)
 8004e42:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e44:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	7a9b      	ldrb	r3, [r3, #10]
 8004e4a:	075b      	lsls	r3, r3, #29
 8004e4c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e50:	69f9      	ldr	r1, [r7, #28]
 8004e52:	0148      	lsls	r0, r1, #5
 8004e54:	6a39      	ldr	r1, [r7, #32]
 8004e56:	4401      	add	r1, r0
 8004e58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004e5c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e5e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	68d9      	ldr	r1, [r3, #12]
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e76:	460a      	mov	r2, r1
 8004e78:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	bf0c      	ite	eq
 8004e8a:	2301      	moveq	r3, #1
 8004e8c:	2300      	movne	r3, #0
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	0151      	lsls	r1, r2, #5
 8004ea4:	6a3a      	ldr	r2, [r7, #32]
 8004ea6:	440a      	add	r2, r1
 8004ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004eb0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	7e7b      	ldrb	r3, [r7, #25]
 8004ec2:	075b      	lsls	r3, r3, #29
 8004ec4:	69f9      	ldr	r1, [r7, #28]
 8004ec6:	0148      	lsls	r0, r1, #5
 8004ec8:	6a39      	ldr	r1, [r7, #32]
 8004eca:	4401      	add	r1, r0
 8004ecc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eea:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	78db      	ldrb	r3, [r3, #3]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d004      	beq.n	8004efe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	e003      	b.n	8004f06 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f04:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f0c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	e04e      	b.n	8004fc8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	78db      	ldrb	r3, [r3, #3]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d149      	bne.n	8004fc6 <USB_HC_StartXfer+0x276>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d045      	beq.n	8004fc6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	79db      	ldrb	r3, [r3, #7]
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d830      	bhi.n	8004fa4 <USB_HC_StartXfer+0x254>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <USB_HC_StartXfer+0x1f8>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004f59 	.word	0x08004f59
 8004f4c:	08004f7d 	.word	0x08004f7d
 8004f50:	08004f59 	.word	0x08004f59
 8004f54:	08004f7d 	.word	0x08004f7d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	3303      	adds	r3, #3
 8004f5e:	089b      	lsrs	r3, r3, #2
 8004f60:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004f62:	8afa      	ldrh	r2, [r7, #22]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d91c      	bls.n	8004fa8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f043 0220 	orr.w	r2, r3, #32
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	619a      	str	r2, [r3, #24]
        }
        break;
 8004f7a:	e015      	b.n	8004fa8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	3303      	adds	r3, #3
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004f86:	8afa      	ldrh	r2, [r7, #22]
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d90a      	bls.n	8004fac <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	619a      	str	r2, [r3, #24]
        }
        break;
 8004fa2:	e003      	b.n	8004fac <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004fa4:	bf00      	nop
 8004fa6:	e002      	b.n	8004fae <USB_HC_StartXfer+0x25e>
        break;
 8004fa8:	bf00      	nop
 8004faa:	e000      	b.n	8004fae <USB_HC_StartXfer+0x25e>
        break;
 8004fac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	68d9      	ldr	r1, [r3, #12]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	785a      	ldrb	r2, [r3, #1]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	9000      	str	r0, [sp, #0]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7ff fb31 	bl	8004628 <USB_WritePacket>
  }

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3728      	adds	r7, #40	; 0x28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	1ff80000 	.word	0x1ff80000

08004fd4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	b29b      	uxth	r3, r3
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b089      	sub	sp, #36	; 0x24
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	460b      	mov	r3, r1
 8005000:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005006:	78fb      	ldrb	r3, [r7, #3]
 8005008:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	0c9b      	lsrs	r3, r3, #18
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	4413      	add	r3, r2
 800502c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	0fdb      	lsrs	r3, r3, #31
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b20      	cmp	r3, #32
 8005044:	d104      	bne.n	8005050 <USB_HC_Halt+0x5a>
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	e0c8      	b.n	80051e2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <USB_HC_Halt+0x66>
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d163      	bne.n	8005124 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	4413      	add	r3, r2
 8005064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	440a      	add	r2, r1
 8005072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005076:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800507a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b00      	cmp	r3, #0
 8005086:	f040 80ab 	bne.w	80051e0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d133      	bne.n	80050fe <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	4413      	add	r3, r2
 800509e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	0151      	lsls	r1, r2, #5
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	440a      	add	r2, r1
 80050ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050b4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	0151      	lsls	r1, r2, #5
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	440a      	add	r2, r1
 80050cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050d4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	3301      	adds	r3, #1
 80050da:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050e2:	d81d      	bhi.n	8005120 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050fa:	d0ec      	beq.n	80050d6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80050fc:	e070      	b.n	80051e0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	0151      	lsls	r1, r2, #5
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	440a      	add	r2, r1
 8005114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800511c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800511e:	e05f      	b.n	80051e0 <USB_HC_Halt+0x1ea>
            break;
 8005120:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005122:	e05d      	b.n	80051e0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	0151      	lsls	r1, r2, #5
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	440a      	add	r2, r1
 800513a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800513e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005142:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d133      	bne.n	80051bc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	440a      	add	r2, r1
 800516a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800516e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005172:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	0151      	lsls	r1, r2, #5
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	440a      	add	r2, r1
 800518a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800518e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005192:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3301      	adds	r3, #1
 8005198:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051a0:	d81d      	bhi.n	80051de <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b8:	d0ec      	beq.n	8005194 <USB_HC_Halt+0x19e>
 80051ba:	e011      	b.n	80051e0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	e000      	b.n	80051e0 <USB_HC_Halt+0x1ea>
          break;
 80051de:	bf00      	nop
    }
  }

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3724      	adds	r7, #36	; 0x24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005204:	2301      	movs	r3, #1
 8005206:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	04da      	lsls	r2, r3, #19
 800520c:	4b15      	ldr	r3, [pc, #84]	; (8005264 <USB_DoPing+0x74>)
 800520e:	4013      	ands	r3, r2
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	440a      	add	r2, r1
 8005218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800521c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005220:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	4413      	add	r3, r2
 800522a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005238:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005240:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	4413      	add	r3, r2
 800524a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524e:	461a      	mov	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	1ff80000 	.word	0x1ff80000

08005268 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff f911 	bl	80044a4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005282:	2110      	movs	r1, #16
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff f96b 	bl	8004560 <USB_FlushTxFifo>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff f997 	bl	80045c8 <USB_FlushRxFifo>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80052a4:	2300      	movs	r3, #0
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	e01f      	b.n	80052ea <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052de:	461a      	mov	r2, r3
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	3301      	adds	r3, #1
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b0f      	cmp	r3, #15
 80052ee:	d9dc      	bls.n	80052aa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80052f0:	2300      	movs	r3, #0
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	e034      	b.n	8005360 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800530c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005314:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800531c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	4413      	add	r3, r2
 8005326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532a:	461a      	mov	r2, r3
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3301      	adds	r3, #1
 8005334:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800533c:	d80c      	bhi.n	8005358 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	4413      	add	r3, r2
 8005346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005354:	d0ec      	beq.n	8005330 <USB_StopHost+0xc8>
 8005356:	e000      	b.n	800535a <USB_StopHost+0xf2>
        break;
 8005358:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	3301      	adds	r3, #1
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	2b0f      	cmp	r3, #15
 8005364:	d9c7      	bls.n	80052f6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800536c:	461a      	mov	r2, r3
 800536e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005372:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800537a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff f880 	bl	8004482 <USB_EnableGlobalInt>

  return ret;
 8005382:	7ffb      	ldrb	r3, [r7, #31]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3720      	adds	r7, #32
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005390:	4904      	ldr	r1, [pc, #16]	; (80053a4 <MX_FATFS_Init+0x18>)
 8005392:	4805      	ldr	r0, [pc, #20]	; (80053a8 <MX_FATFS_Init+0x1c>)
 8005394:	f006 f924 	bl	800b5e0 <FATFS_LinkDriver>
 8005398:	4603      	mov	r3, r0
 800539a:	461a      	mov	r2, r3
 800539c:	4b03      	ldr	r3, [pc, #12]	; (80053ac <MX_FATFS_Init+0x20>)
 800539e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80053a0:	bf00      	nop
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20000484 	.word	0x20000484
 80053a8:	080100e8 	.word	0x080100e8
 80053ac:	20000480 	.word	0x20000480

080053b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80053b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	4619      	mov	r1, r3
 80053ea:	4808      	ldr	r0, [pc, #32]	; (800540c <USBH_status+0x34>)
 80053ec:	f000 fe73 	bl	80060d6 <USBH_MSC_UnitIsReady>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <USBH_status+0x24>
  {
    res = RES_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
 80053fa:	e001      	b.n	8005400 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005400:	7bfb      	ldrb	r3, [r7, #15]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	200062bc 	.word	0x200062bc

08005410 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b094      	sub	sp, #80	; 0x50
 8005414:	af02      	add	r7, sp, #8
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	4603      	mov	r3, r0
 800541e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005426:	7bf9      	ldrb	r1, [r7, #15]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	4813      	ldr	r0, [pc, #76]	; (8005480 <USBH_read+0x70>)
 8005432:	f000 fe9a 	bl	800616a <USBH_MSC_Read>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d103      	bne.n	8005444 <USBH_read+0x34>
  {
    res = RES_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005442:	e017      	b.n	8005474 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005444:	f107 0210 	add.w	r2, r7, #16
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	4619      	mov	r1, r3
 800544c:	480c      	ldr	r0, [pc, #48]	; (8005480 <USBH_read+0x70>)
 800544e:	f000 fe68 	bl	8006122 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005452:	7f7b      	ldrb	r3, [r7, #29]
 8005454:	2b3a      	cmp	r3, #58	; 0x3a
 8005456:	d005      	beq.n	8005464 <USBH_read+0x54>
 8005458:	2b3a      	cmp	r3, #58	; 0x3a
 800545a:	dc07      	bgt.n	800546c <USBH_read+0x5c>
 800545c:	2b04      	cmp	r3, #4
 800545e:	d001      	beq.n	8005464 <USBH_read+0x54>
 8005460:	2b28      	cmp	r3, #40	; 0x28
 8005462:	d103      	bne.n	800546c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005464:	2303      	movs	r3, #3
 8005466:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800546a:	e003      	b.n	8005474 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005472:	bf00      	nop
    }
  }

  return res;
 8005474:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005478:	4618      	mov	r0, r3
 800547a:	3748      	adds	r7, #72	; 0x48
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	200062bc 	.word	0x200062bc

08005484 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b094      	sub	sp, #80	; 0x50
 8005488:	af02      	add	r7, sp, #8
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	4603      	mov	r3, r0
 8005492:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800549a:	7bf9      	ldrb	r1, [r7, #15]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	4817      	ldr	r0, [pc, #92]	; (8005504 <USBH_write+0x80>)
 80054a6:	f000 fec9 	bl	800623c <USBH_MSC_Write>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d103      	bne.n	80054b8 <USBH_write+0x34>
  {
    res = RES_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80054b6:	e01f      	b.n	80054f8 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80054b8:	f107 0210 	add.w	r2, r7, #16
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	4619      	mov	r1, r3
 80054c0:	4810      	ldr	r0, [pc, #64]	; (8005504 <USBH_write+0x80>)
 80054c2:	f000 fe2e 	bl	8006122 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80054c6:	7f7b      	ldrb	r3, [r7, #29]
 80054c8:	2b3a      	cmp	r3, #58	; 0x3a
 80054ca:	d00d      	beq.n	80054e8 <USBH_write+0x64>
 80054cc:	2b3a      	cmp	r3, #58	; 0x3a
 80054ce:	dc0f      	bgt.n	80054f0 <USBH_write+0x6c>
 80054d0:	2b28      	cmp	r3, #40	; 0x28
 80054d2:	d009      	beq.n	80054e8 <USBH_write+0x64>
 80054d4:	2b28      	cmp	r3, #40	; 0x28
 80054d6:	dc0b      	bgt.n	80054f0 <USBH_write+0x6c>
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d005      	beq.n	80054e8 <USBH_write+0x64>
 80054dc:	2b27      	cmp	r3, #39	; 0x27
 80054de:	d107      	bne.n	80054f0 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80054e0:	2302      	movs	r3, #2
 80054e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80054e6:	e007      	b.n	80054f8 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80054e8:	2303      	movs	r3, #3
 80054ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80054ee:	e003      	b.n	80054f8 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80054f6:	bf00      	nop
    }
  }

  return res;
 80054f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3748      	adds	r7, #72	; 0x48
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	200062bc 	.word	0x200062bc

08005508 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b090      	sub	sp, #64	; 0x40
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	603a      	str	r2, [r7, #0]
 8005512:	71fb      	strb	r3, [r7, #7]
 8005514:	460b      	mov	r3, r1
 8005516:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800551e:	79bb      	ldrb	r3, [r7, #6]
 8005520:	2b03      	cmp	r3, #3
 8005522:	d852      	bhi.n	80055ca <USBH_ioctl+0xc2>
 8005524:	a201      	add	r2, pc, #4	; (adr r2, 800552c <USBH_ioctl+0x24>)
 8005526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552a:	bf00      	nop
 800552c:	0800553d 	.word	0x0800553d
 8005530:	08005545 	.word	0x08005545
 8005534:	0800556f 	.word	0x0800556f
 8005538:	0800559b 	.word	0x0800559b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005542:	e045      	b.n	80055d0 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005544:	f107 0208 	add.w	r2, r7, #8
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	4619      	mov	r1, r3
 800554c:	4823      	ldr	r0, [pc, #140]	; (80055dc <USBH_ioctl+0xd4>)
 800554e:	f000 fde8 	bl	8006122 <USBH_MSC_GetLUNInfo>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005564:	e034      	b.n	80055d0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800556c:	e030      	b.n	80055d0 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800556e:	f107 0208 	add.w	r2, r7, #8
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	4619      	mov	r1, r3
 8005576:	4819      	ldr	r0, [pc, #100]	; (80055dc <USBH_ioctl+0xd4>)
 8005578:	f000 fdd3 	bl	8006122 <USBH_MSC_GetLUNInfo>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d107      	bne.n	8005592 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005582:	8a3b      	ldrh	r3, [r7, #16]
 8005584:	461a      	mov	r2, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005590:	e01e      	b.n	80055d0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005598:	e01a      	b.n	80055d0 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800559a:	f107 0208 	add.w	r2, r7, #8
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	4619      	mov	r1, r3
 80055a2:	480e      	ldr	r0, [pc, #56]	; (80055dc <USBH_ioctl+0xd4>)
 80055a4:	f000 fdbd 	bl	8006122 <USBH_MSC_GetLUNInfo>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80055ae:	8a3b      	ldrh	r3, [r7, #16]
 80055b0:	0a5b      	lsrs	r3, r3, #9
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	461a      	mov	r2, r3
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80055c0:	e006      	b.n	80055d0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80055c8:	e002      	b.n	80055d0 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80055ca:	2304      	movs	r3, #4
 80055cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80055d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3740      	adds	r7, #64	; 0x40
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	200062bc 	.word	0x200062bc

080055e0 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b089      	sub	sp, #36	; 0x24
 80055e4:	af04      	add	r7, sp, #16
 80055e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055ee:	7919      	ldrb	r1, [r3, #4]
 80055f0:	2350      	movs	r3, #80	; 0x50
 80055f2:	2206      	movs	r2, #6
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f001 fd5f 	bl	80070b8 <USBH_FindInterface>
 80055fa:	4603      	mov	r3, r0
 80055fc:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	2bff      	cmp	r3, #255	; 0xff
 8005602:	d002      	beq.n	800560a <USBH_MSC_InterfaceInit+0x2a>
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d901      	bls.n	800560e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800560a:	2302      	movs	r3, #2
 800560c:	e106      	b.n	800581c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f001 fd34 	bl	8007080 <USBH_SelectInterface>
 8005618:	4603      	mov	r3, r0
 800561a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800561c:	7bbb      	ldrb	r3, [r7, #14]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005622:	2302      	movs	r3, #2
 8005624:	e0fa      	b.n	800581c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800562c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005630:	f009 faf4 	bl	800ec1c <malloc>
 8005634:	4603      	mov	r3, r0
 8005636:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005648:	2302      	movs	r3, #2
 800564a:	e0e7      	b.n	800581c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800564c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005650:	2100      	movs	r1, #0
 8005652:	68b8      	ldr	r0, [r7, #8]
 8005654:	f009 fb00 	bl	800ec58 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	211a      	movs	r1, #26
 800565e:	fb01 f303 	mul.w	r3, r1, r3
 8005662:	4413      	add	r3, r2
 8005664:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	b25b      	sxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	da16      	bge.n	800569e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	211a      	movs	r1, #26
 8005676:	fb01 f303 	mul.w	r3, r1, r3
 800567a:	4413      	add	r3, r2
 800567c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005680:	781a      	ldrb	r2, [r3, #0]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	211a      	movs	r1, #26
 800568c:	fb01 f303 	mul.w	r3, r1, r3
 8005690:	4413      	add	r3, r2
 8005692:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005696:	881a      	ldrh	r2, [r3, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	815a      	strh	r2, [r3, #10]
 800569c:	e015      	b.n	80056ca <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	211a      	movs	r1, #26
 80056a4:	fb01 f303 	mul.w	r3, r1, r3
 80056a8:	4413      	add	r3, r2
 80056aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056ae:	781a      	ldrb	r2, [r3, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	211a      	movs	r1, #26
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	4413      	add	r3, r2
 80056c0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80056c4:	881a      	ldrh	r2, [r3, #0]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	211a      	movs	r1, #26
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	4413      	add	r3, r2
 80056d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	b25b      	sxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	da16      	bge.n	8005710 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	211a      	movs	r1, #26
 80056e8:	fb01 f303 	mul.w	r3, r1, r3
 80056ec:	4413      	add	r3, r2
 80056ee:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056f2:	781a      	ldrb	r2, [r3, #0]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	211a      	movs	r1, #26
 80056fe:	fb01 f303 	mul.w	r3, r1, r3
 8005702:	4413      	add	r3, r2
 8005704:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005708:	881a      	ldrh	r2, [r3, #0]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	815a      	strh	r2, [r3, #10]
 800570e:	e015      	b.n	800573c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	211a      	movs	r1, #26
 8005716:	fb01 f303 	mul.w	r3, r1, r3
 800571a:	4413      	add	r3, r2
 800571c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005720:	781a      	ldrb	r2, [r3, #0]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	211a      	movs	r1, #26
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	4413      	add	r3, r2
 8005732:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005736:	881a      	ldrh	r2, [r3, #0]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2200      	movs	r2, #0
 8005740:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2200      	movs	r2, #0
 8005746:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2200      	movs	r2, #0
 800574c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	799b      	ldrb	r3, [r3, #6]
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f003 f9d4 	bl	8008b02 <USBH_AllocPipe>
 800575a:	4603      	mov	r3, r0
 800575c:	461a      	mov	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	79db      	ldrb	r3, [r3, #7]
 8005766:	4619      	mov	r1, r3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f003 f9ca 	bl	8008b02 <USBH_AllocPipe>
 800576e:	4603      	mov	r3, r0
 8005770:	461a      	mov	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fe04 	bl	8006384 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	799b      	ldrb	r3, [r3, #6]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01e      	beq.n	80057c2 <USBH_MSC_InterfaceInit+0x1e2>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	891b      	ldrh	r3, [r3, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01a      	beq.n	80057c2 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	7959      	ldrb	r1, [r3, #5]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	7998      	ldrb	r0, [r3, #6]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	8912      	ldrh	r2, [r2, #8]
 80057a4:	9202      	str	r2, [sp, #8]
 80057a6:	2202      	movs	r2, #2
 80057a8:	9201      	str	r2, [sp, #4]
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	4623      	mov	r3, r4
 80057ae:	4602      	mov	r2, r0
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f003 f977 	bl	8008aa4 <USBH_OpenPipe>
 80057b6:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	79db      	ldrb	r3, [r3, #7]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d02c      	beq.n	800581a <USBH_MSC_InterfaceInit+0x23a>
 80057c0:	e001      	b.n	80057c6 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e02a      	b.n	800581c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	895b      	ldrh	r3, [r3, #10]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d025      	beq.n	800581a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	7919      	ldrb	r1, [r3, #4]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	79d8      	ldrb	r0, [r3, #7]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	8952      	ldrh	r2, [r2, #10]
 80057e6:	9202      	str	r2, [sp, #8]
 80057e8:	2202      	movs	r2, #2
 80057ea:	9201      	str	r2, [sp, #4]
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	4623      	mov	r3, r4
 80057f0:	4602      	mov	r2, r0
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f003 f956 	bl	8008aa4 <USBH_OpenPipe>
 80057f8:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	791b      	ldrb	r3, [r3, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f009 f832 	bl	800e86c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	795b      	ldrb	r3, [r3, #5]
 800580c:	2200      	movs	r2, #0
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f009 f82b 	bl	800e86c <USBH_LL_SetToggle>

  return USBH_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	e000      	b.n	800581c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800581a:	2303      	movs	r3, #3
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	bd90      	pop	{r4, r7, pc}

08005824 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	795b      	ldrb	r3, [r3, #5]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00e      	beq.n	800585c <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	795b      	ldrb	r3, [r3, #5]
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f003 f94c 	bl	8008ae2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	795b      	ldrb	r3, [r3, #5]
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f003 f977 	bl	8008b44 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	791b      	ldrb	r3, [r3, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00e      	beq.n	8005882 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	791b      	ldrb	r3, [r3, #4]
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f003 f939 	bl	8008ae2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	791b      	ldrb	r3, [r3, #4]
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f003 f964 	bl	8008b44 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00b      	beq.n	80058a6 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	4618      	mov	r0, r3
 8005898:	f009 f9c8 	bl	800ec2c <free>
    phost->pActiveClass->pData = 0U;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058a2:	2200      	movs	r2, #0
 80058a4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80058c2:	2301      	movs	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	7b9b      	ldrb	r3, [r3, #14]
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d041      	beq.n	8005952 <USBH_MSC_ClassRequest+0xa2>
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	dc4b      	bgt.n	800596a <USBH_MSC_ClassRequest+0xba>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <USBH_MSC_ClassRequest+0x2a>
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d147      	bne.n	800596a <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	4619      	mov	r1, r3
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fd32 	bl	8006348 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80058e4:	4603      	mov	r3, r0
 80058e6:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d104      	bne.n	80058f8 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d137      	bne.n	800596e <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d804      	bhi.n	8005910 <USBH_MSC_ClassRequest+0x60>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	3301      	adds	r3, #1
 800590c:	b2da      	uxtb	r2, r3
 800590e:	e000      	b.n	8005912 <USBH_MSC_ClassRequest+0x62>
 8005910:	2202      	movs	r2, #2
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005916:	2300      	movs	r3, #0
 8005918:	73bb      	strb	r3, [r7, #14]
 800591a:	e014      	b.n	8005946 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800591c:	7bbb      	ldrb	r3, [r7, #14]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	2134      	movs	r1, #52	; 0x34
 8005922:	fb01 f303 	mul.w	r3, r1, r3
 8005926:	4413      	add	r3, r2
 8005928:	3392      	adds	r3, #146	; 0x92
 800592a:	2202      	movs	r2, #2
 800592c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800592e:	7bbb      	ldrb	r3, [r7, #14]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	2134      	movs	r1, #52	; 0x34
 8005934:	fb01 f303 	mul.w	r3, r1, r3
 8005938:	4413      	add	r3, r2
 800593a:	33c1      	adds	r3, #193	; 0xc1
 800593c:	2200      	movs	r2, #0
 800593e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005940:	7bbb      	ldrb	r3, [r7, #14]
 8005942:	3301      	adds	r3, #1
 8005944:	73bb      	strb	r3, [r7, #14]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	7bba      	ldrb	r2, [r7, #14]
 800594c:	429a      	cmp	r2, r3
 800594e:	d3e5      	bcc.n	800591c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8005950:	e00d      	b.n	800596e <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005952:	2100      	movs	r1, #0
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f002 fa96 	bl	8007e86 <USBH_ClrFeature>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d108      	bne.n	8005972 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	7bda      	ldrb	r2, [r3, #15]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	739a      	strb	r2, [r3, #14]
      }
      break;
 8005968:	e003      	b.n	8005972 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800596a:	bf00      	nop
 800596c:	e002      	b.n	8005974 <USBH_MSC_ClassRequest+0xc4>
      break;
 800596e:	bf00      	nop
 8005970:	e000      	b.n	8005974 <USBH_MSC_ClassRequest+0xc4>
      break;
 8005972:	bf00      	nop
  }

  return status;
 8005974:	7bfb      	ldrb	r3, [r7, #15]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8005992:	2301      	movs	r3, #1
 8005994:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8005996:	2301      	movs	r3, #1
 8005998:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800599a:	2301      	movs	r3, #1
 800599c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	7b1b      	ldrb	r3, [r3, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <USBH_MSC_Process+0x2e>
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	f000 828d 	beq.w	8005ec6 <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80059ac:	e28e      	b.n	8005ecc <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	429a      	cmp	r2, r3
 80059bc:	f080 8267 	bcs.w	8005e8e <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059c6:	4619      	mov	r1, r3
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	2334      	movs	r3, #52	; 0x34
 80059cc:	fb01 f303 	mul.w	r3, r1, r3
 80059d0:	4413      	add	r3, r2
 80059d2:	3391      	adds	r3, #145	; 0x91
 80059d4:	2201      	movs	r2, #1
 80059d6:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80059de:	4619      	mov	r1, r3
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	2334      	movs	r3, #52	; 0x34
 80059e4:	fb01 f303 	mul.w	r3, r1, r3
 80059e8:	4413      	add	r3, r2
 80059ea:	3390      	adds	r3, #144	; 0x90
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	f200 8235 	bhi.w	8005e5e <USBH_MSC_Process+0x4de>
 80059f4:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <USBH_MSC_Process+0x7c>)
 80059f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fa:	bf00      	nop
 80059fc:	08005a21 	.word	0x08005a21
 8005a00:	08005e5f 	.word	0x08005e5f
 8005a04:	08005ae9 	.word	0x08005ae9
 8005a08:	08005c6d 	.word	0x08005c6d
 8005a0c:	08005a47 	.word	0x08005a47
 8005a10:	08005d39 	.word	0x08005d39
 8005a14:	08005e5f 	.word	0x08005e5f
 8005a18:	08005e5f 	.word	0x08005e5f
 8005a1c:	08005e4d 	.word	0x08005e4d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a26:	4619      	mov	r1, r3
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	2334      	movs	r3, #52	; 0x34
 8005a2c:	fb01 f303 	mul.w	r3, r1, r3
 8005a30:	4413      	add	r3, r2
 8005a32:	3390      	adds	r3, #144	; 0x90
 8005a34:	2204      	movs	r2, #4
 8005a36:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8005a44:	e214      	b.n	8005e70 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a4c:	b2d9      	uxtb	r1, r3
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a54:	461a      	mov	r2, r3
 8005a56:	2334      	movs	r3, #52	; 0x34
 8005a58:	fb02 f303 	mul.w	r3, r2, r3
 8005a5c:	3398      	adds	r3, #152	; 0x98
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4413      	add	r3, r2
 8005a62:	3307      	adds	r3, #7
 8005a64:	461a      	mov	r2, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f001 f836 	bl	8006ad8 <USBH_MSC_SCSI_Inquiry>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10b      	bne.n	8005a8e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	2334      	movs	r3, #52	; 0x34
 8005a82:	fb01 f303 	mul.w	r3, r1, r3
 8005a86:	4413      	add	r3, r2
 8005a88:	3390      	adds	r3, #144	; 0x90
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d10c      	bne.n	8005aae <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	2334      	movs	r3, #52	; 0x34
 8005aa0:	fb01 f303 	mul.w	r3, r1, r3
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3390      	adds	r3, #144	; 0x90
 8005aa8:	2205      	movs	r2, #5
 8005aaa:	701a      	strb	r2, [r3, #0]
            break;
 8005aac:	e1d9      	b.n	8005e62 <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	f040 81d6 	bne.w	8005e62 <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005abc:	4619      	mov	r1, r3
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	2334      	movs	r3, #52	; 0x34
 8005ac2:	fb01 f303 	mul.w	r3, r1, r3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3390      	adds	r3, #144	; 0x90
 8005aca:	2201      	movs	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	2334      	movs	r3, #52	; 0x34
 8005ada:	fb01 f303 	mul.w	r3, r1, r3
 8005ade:	4413      	add	r3, r2
 8005ae0:	3391      	adds	r3, #145	; 0x91
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	701a      	strb	r2, [r3, #0]
            break;
 8005ae6:	e1bc      	b.n	8005e62 <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 ff32 	bl	800695c <USBH_MSC_SCSI_TestUnitReady>
 8005af8:	4603      	mov	r3, r0
 8005afa:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8005afc:	7bbb      	ldrb	r3, [r7, #14]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d149      	bne.n	8005b96 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b08:	4619      	mov	r1, r3
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	2334      	movs	r3, #52	; 0x34
 8005b0e:	fb01 f303 	mul.w	r3, r1, r3
 8005b12:	4413      	add	r3, r2
 8005b14:	3392      	adds	r3, #146	; 0x92
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00c      	beq.n	8005b36 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b22:	4619      	mov	r1, r3
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	2334      	movs	r3, #52	; 0x34
 8005b28:	fb01 f303 	mul.w	r3, r1, r3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	33c1      	adds	r3, #193	; 0xc1
 8005b30:	2201      	movs	r2, #1
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	e00b      	b.n	8005b4e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	2334      	movs	r3, #52	; 0x34
 8005b42:	fb01 f303 	mul.w	r3, r1, r3
 8005b46:	4413      	add	r3, r2
 8005b48:	33c1      	adds	r3, #193	; 0xc1
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b54:	4619      	mov	r1, r3
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	2334      	movs	r3, #52	; 0x34
 8005b5a:	fb01 f303 	mul.w	r3, r1, r3
 8005b5e:	4413      	add	r3, r2
 8005b60:	3390      	adds	r3, #144	; 0x90
 8005b62:	2203      	movs	r2, #3
 8005b64:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	2334      	movs	r3, #52	; 0x34
 8005b72:	fb01 f303 	mul.w	r3, r1, r3
 8005b76:	4413      	add	r3, r2
 8005b78:	3391      	adds	r3, #145	; 0x91
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b84:	4619      	mov	r1, r3
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	2334      	movs	r3, #52	; 0x34
 8005b8a:	fb01 f303 	mul.w	r3, r1, r3
 8005b8e:	4413      	add	r3, r2
 8005b90:	3392      	adds	r3, #146	; 0x92
 8005b92:	2200      	movs	r2, #0
 8005b94:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d14a      	bne.n	8005c32 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	2334      	movs	r3, #52	; 0x34
 8005ba8:	fb01 f303 	mul.w	r3, r1, r3
 8005bac:	4413      	add	r3, r2
 8005bae:	3392      	adds	r3, #146	; 0x92
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d00c      	beq.n	8005bd0 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	2334      	movs	r3, #52	; 0x34
 8005bc2:	fb01 f303 	mul.w	r3, r1, r3
 8005bc6:	4413      	add	r3, r2
 8005bc8:	33c1      	adds	r3, #193	; 0xc1
 8005bca:	2201      	movs	r2, #1
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	e00b      	b.n	8005be8 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	2334      	movs	r3, #52	; 0x34
 8005bdc:	fb01 f303 	mul.w	r3, r1, r3
 8005be0:	4413      	add	r3, r2
 8005be2:	33c1      	adds	r3, #193	; 0xc1
 8005be4:	2200      	movs	r2, #0
 8005be6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bee:	4619      	mov	r1, r3
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	2334      	movs	r3, #52	; 0x34
 8005bf4:	fb01 f303 	mul.w	r3, r1, r3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	3390      	adds	r3, #144	; 0x90
 8005bfc:	2205      	movs	r2, #5
 8005bfe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c06:	4619      	mov	r1, r3
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	2334      	movs	r3, #52	; 0x34
 8005c0c:	fb01 f303 	mul.w	r3, r1, r3
 8005c10:	4413      	add	r3, r2
 8005c12:	3391      	adds	r3, #145	; 0x91
 8005c14:	2201      	movs	r2, #1
 8005c16:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c1e:	4619      	mov	r1, r3
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	2334      	movs	r3, #52	; 0x34
 8005c24:	fb01 f303 	mul.w	r3, r1, r3
 8005c28:	4413      	add	r3, r2
 8005c2a:	3392      	adds	r3, #146	; 0x92
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	701a      	strb	r2, [r3, #0]
            break;
 8005c30:	e119      	b.n	8005e66 <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8005c32:	7bbb      	ldrb	r3, [r7, #14]
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	f040 8116 	bne.w	8005e66 <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c40:	4619      	mov	r1, r3
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	2334      	movs	r3, #52	; 0x34
 8005c46:	fb01 f303 	mul.w	r3, r1, r3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	3390      	adds	r3, #144	; 0x90
 8005c4e:	2201      	movs	r2, #1
 8005c50:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c58:	4619      	mov	r1, r3
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	2334      	movs	r3, #52	; 0x34
 8005c5e:	fb01 f303 	mul.w	r3, r1, r3
 8005c62:	4413      	add	r3, r2
 8005c64:	3391      	adds	r3, #145	; 0x91
 8005c66:	2202      	movs	r2, #2
 8005c68:	701a      	strb	r2, [r3, #0]
            break;
 8005c6a:	e0fc      	b.n	8005e66 <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c72:	b2d9      	uxtb	r1, r3
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	2334      	movs	r3, #52	; 0x34
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	3390      	adds	r3, #144	; 0x90
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4413      	add	r3, r2
 8005c88:	3304      	adds	r3, #4
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fea8 	bl	80069e2 <USBH_MSC_SCSI_ReadCapacity>
 8005c92:	4603      	mov	r3, r0
 8005c94:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d120      	bne.n	8005cde <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	2334      	movs	r3, #52	; 0x34
 8005ca8:	fb01 f303 	mul.w	r3, r1, r3
 8005cac:	4413      	add	r3, r2
 8005cae:	3390      	adds	r3, #144	; 0x90
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cba:	4619      	mov	r1, r3
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	2334      	movs	r3, #52	; 0x34
 8005cc0:	fb01 f303 	mul.w	r3, r1, r3
 8005cc4:	4413      	add	r3, r2
 8005cc6:	3391      	adds	r3, #145	; 0x91
 8005cc8:	2200      	movs	r2, #0
 8005cca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005cdc:	e0c5      	b.n	8005e6a <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d10c      	bne.n	8005cfe <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cea:	4619      	mov	r1, r3
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	2334      	movs	r3, #52	; 0x34
 8005cf0:	fb01 f303 	mul.w	r3, r1, r3
 8005cf4:	4413      	add	r3, r2
 8005cf6:	3390      	adds	r3, #144	; 0x90
 8005cf8:	2205      	movs	r2, #5
 8005cfa:	701a      	strb	r2, [r3, #0]
            break;
 8005cfc:	e0b5      	b.n	8005e6a <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	f040 80b2 	bne.w	8005e6a <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	2334      	movs	r3, #52	; 0x34
 8005d12:	fb01 f303 	mul.w	r3, r1, r3
 8005d16:	4413      	add	r3, r2
 8005d18:	3390      	adds	r3, #144	; 0x90
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d24:	4619      	mov	r1, r3
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	2334      	movs	r3, #52	; 0x34
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	3391      	adds	r3, #145	; 0x91
 8005d32:	2202      	movs	r2, #2
 8005d34:	701a      	strb	r2, [r3, #0]
            break;
 8005d36:	e098      	b.n	8005e6a <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d3e:	b2d9      	uxtb	r1, r3
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d46:	461a      	mov	r2, r3
 8005d48:	2334      	movs	r3, #52	; 0x34
 8005d4a:	fb02 f303 	mul.w	r3, r2, r3
 8005d4e:	3398      	adds	r3, #152	; 0x98
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4413      	add	r3, r2
 8005d54:	3304      	adds	r3, #4
 8005d56:	461a      	mov	r2, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 ff62 	bl	8006c22 <USBH_MSC_SCSI_RequestSense>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d145      	bne.n	8005df4 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d6e:	4619      	mov	r1, r3
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	2334      	movs	r3, #52	; 0x34
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	4413      	add	r3, r2
 8005d7a:	339c      	adds	r3, #156	; 0x9c
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b06      	cmp	r3, #6
 8005d80:	d00c      	beq.n	8005d9c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d88:	4619      	mov	r1, r3
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	2334      	movs	r3, #52	; 0x34
 8005d8e:	fb01 f303 	mul.w	r3, r1, r3
 8005d92:	4413      	add	r3, r2
 8005d94:	339c      	adds	r3, #156	; 0x9c
 8005d96:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d117      	bne.n	8005dcc <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	f242 720f 	movw	r2, #9999	; 0x270f
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d80c      	bhi.n	8005dcc <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005db8:	4619      	mov	r1, r3
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	2334      	movs	r3, #52	; 0x34
 8005dbe:	fb01 f303 	mul.w	r3, r1, r3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3390      	adds	r3, #144	; 0x90
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	701a      	strb	r2, [r3, #0]
                  break;
 8005dca:	e051      	b.n	8005e70 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	2334      	movs	r3, #52	; 0x34
 8005dd8:	fb01 f303 	mul.w	r3, r1, r3
 8005ddc:	4413      	add	r3, r2
 8005dde:	3390      	adds	r3, #144	; 0x90
 8005de0:	2201      	movs	r2, #1
 8005de2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005dea:	3301      	adds	r3, #1
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d10c      	bne.n	8005e14 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e00:	4619      	mov	r1, r3
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	2334      	movs	r3, #52	; 0x34
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3390      	adds	r3, #144	; 0x90
 8005e0e:	2208      	movs	r2, #8
 8005e10:	701a      	strb	r2, [r3, #0]
            break;
 8005e12:	e02c      	b.n	8005e6e <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d129      	bne.n	8005e6e <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e20:	4619      	mov	r1, r3
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	2334      	movs	r3, #52	; 0x34
 8005e26:	fb01 f303 	mul.w	r3, r1, r3
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3390      	adds	r3, #144	; 0x90
 8005e2e:	2201      	movs	r2, #1
 8005e30:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e38:	4619      	mov	r1, r3
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	2334      	movs	r3, #52	; 0x34
 8005e3e:	fb01 f303 	mul.w	r3, r1, r3
 8005e42:	4413      	add	r3, r2
 8005e44:	3391      	adds	r3, #145	; 0x91
 8005e46:	2202      	movs	r2, #2
 8005e48:	701a      	strb	r2, [r3, #0]
            break;
 8005e4a:	e010      	b.n	8005e6e <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e52:	3301      	adds	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005e5c:	e008      	b.n	8005e70 <USBH_MSC_Process+0x4f0>
            break;
 8005e5e:	bf00      	nop
 8005e60:	e006      	b.n	8005e70 <USBH_MSC_Process+0x4f0>
            break;
 8005e62:	bf00      	nop
 8005e64:	e004      	b.n	8005e70 <USBH_MSC_Process+0x4f0>
            break;
 8005e66:	bf00      	nop
 8005e68:	e002      	b.n	8005e70 <USBH_MSC_Process+0x4f0>
            break;
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <USBH_MSC_Process+0x4f0>
            break;
 8005e6e:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2204      	movs	r2, #4
 8005e74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005e84:	2200      	movs	r2, #0
 8005e86:	4619      	mov	r1, r3
 8005e88:	f005 fd88 	bl	800b99c <osMessagePut>
      break;
 8005e8c:	e01e      	b.n	8005ecc <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	f005 fd72 	bl	800b99c <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ebe:	2102      	movs	r1, #2
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	4798      	blx	r3
      break;
 8005ec4:	e002      	b.n	8005ecc <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8005eca:	bf00      	nop
  }
  return error;
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop

08005ed8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b088      	sub	sp, #32
 8005ef2:	af02      	add	r7, sp, #8
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8005f04:	2301      	movs	r3, #1
 8005f06:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8005f0c:	78fb      	ldrb	r3, [r7, #3]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	2134      	movs	r1, #52	; 0x34
 8005f12:	fb01 f303 	mul.w	r3, r1, r3
 8005f16:	4413      	add	r3, r2
 8005f18:	3390      	adds	r3, #144	; 0x90
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b07      	cmp	r3, #7
 8005f1e:	d04b      	beq.n	8005fb8 <USBH_MSC_RdWrProcess+0xca>
 8005f20:	2b07      	cmp	r3, #7
 8005f22:	f300 80d2 	bgt.w	80060ca <USBH_MSC_RdWrProcess+0x1dc>
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	f000 8089 	beq.w	800603e <USBH_MSC_RdWrProcess+0x150>
 8005f2c:	2b06      	cmp	r3, #6
 8005f2e:	f040 80cc 	bne.w	80060ca <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8005f32:	78f9      	ldrb	r1, [r7, #3]
 8005f34:	2300      	movs	r3, #0
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 ff54 	bl	8006dea <USBH_MSC_SCSI_Read>
 8005f42:	4603      	mov	r3, r0
 8005f44:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10b      	bne.n	8005f64 <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	2134      	movs	r1, #52	; 0x34
 8005f52:	fb01 f303 	mul.w	r3, r1, r3
 8005f56:	4413      	add	r3, r2
 8005f58:	3390      	adds	r3, #144	; 0x90
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	75fb      	strb	r3, [r7, #23]
 8005f62:	e01a      	b.n	8005f9a <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d109      	bne.n	8005f7e <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	2134      	movs	r1, #52	; 0x34
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	4413      	add	r3, r2
 8005f76:	3390      	adds	r3, #144	; 0x90
 8005f78:	2205      	movs	r2, #5
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	e00d      	b.n	8005f9a <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d10a      	bne.n	8005f9a <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	2134      	movs	r1, #52	; 0x34
 8005f8a:	fb01 f303 	mul.w	r3, r1, r3
 8005f8e:	4413      	add	r3, r2
 8005f90:	3390      	adds	r3, #144	; 0x90
 8005f92:	2208      	movs	r2, #8
 8005f94:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8005f96:	2302      	movs	r3, #2
 8005f98:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8005fae:	2200      	movs	r2, #0
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	f005 fcf3 	bl	800b99c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005fb6:	e089      	b.n	80060cc <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8005fb8:	78f9      	ldrb	r1, [r7, #3]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fea6 	bl	8006d14 <USBH_MSC_SCSI_Write>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10b      	bne.n	8005fea <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	2134      	movs	r1, #52	; 0x34
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	4413      	add	r3, r2
 8005fde:	3390      	adds	r3, #144	; 0x90
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	75fb      	strb	r3, [r7, #23]
 8005fe8:	e01a      	b.n	8006020 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d109      	bne.n	8006004 <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	2134      	movs	r1, #52	; 0x34
 8005ff6:	fb01 f303 	mul.w	r3, r1, r3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3390      	adds	r3, #144	; 0x90
 8005ffe:	2205      	movs	r2, #5
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	e00d      	b.n	8006020 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	2b04      	cmp	r3, #4
 8006008:	d10a      	bne.n	8006020 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800600a:	78fb      	ldrb	r3, [r7, #3]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	2134      	movs	r1, #52	; 0x34
 8006010:	fb01 f303 	mul.w	r3, r1, r3
 8006014:	4413      	add	r3, r2
 8006016:	3390      	adds	r3, #144	; 0x90
 8006018:	2208      	movs	r2, #8
 800601a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800601c:	2302      	movs	r3, #2
 800601e:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2204      	movs	r2, #4
 8006024:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006034:	2200      	movs	r2, #0
 8006036:	4619      	mov	r1, r3
 8006038:	f005 fcb0 	bl	800b99c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800603c:	e046      	b.n	80060cc <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800603e:	78fb      	ldrb	r3, [r7, #3]
 8006040:	2234      	movs	r2, #52	; 0x34
 8006042:	fb02 f303 	mul.w	r3, r2, r3
 8006046:	3398      	adds	r3, #152	; 0x98
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4413      	add	r3, r2
 800604c:	1d1a      	adds	r2, r3, #4
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fde5 	bl	8006c22 <USBH_MSC_SCSI_RequestSense>
 8006058:	4603      	mov	r3, r0
 800605a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d113      	bne.n	800608a <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	2134      	movs	r1, #52	; 0x34
 8006068:	fb01 f303 	mul.w	r3, r1, r3
 800606c:	4413      	add	r3, r2
 800606e:	3390      	adds	r3, #144	; 0x90
 8006070:	2201      	movs	r2, #1
 8006072:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	2134      	movs	r1, #52	; 0x34
 800607a:	fb01 f303 	mul.w	r3, r1, r3
 800607e:	4413      	add	r3, r2
 8006080:	3391      	adds	r3, #145	; 0x91
 8006082:	2202      	movs	r2, #2
 8006084:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8006086:	2302      	movs	r3, #2
 8006088:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d00d      	beq.n	80060ac <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	2b04      	cmp	r3, #4
 8006094:	d10a      	bne.n	80060ac <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	2134      	movs	r1, #52	; 0x34
 800609c:	fb01 f303 	mul.w	r3, r1, r3
 80060a0:	4413      	add	r3, r2
 80060a2:	3390      	adds	r3, #144	; 0x90
 80060a4:	2208      	movs	r2, #8
 80060a6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80060a8:	2302      	movs	r3, #2
 80060aa:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2204      	movs	r2, #4
 80060b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80060c0:	2200      	movs	r2, #0
 80060c2:	4619      	mov	r1, r3
 80060c4:	f005 fc6a 	bl	800b99c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060c8:	e000      	b.n	80060cc <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 80060ca:	bf00      	nop

  }
  return error;
 80060cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b085      	sub	sp, #20
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	460b      	mov	r3, r1
 80060e0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b0b      	cmp	r3, #11
 80060f4:	d10c      	bne.n	8006110 <USBH_MSC_UnitIsReady+0x3a>
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	2134      	movs	r1, #52	; 0x34
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	4413      	add	r3, r2
 8006102:	3391      	adds	r3, #145	; 0x91
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d102      	bne.n	8006110 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800610a:	2301      	movs	r3, #1
 800610c:	73fb      	strb	r3, [r7, #15]
 800610e:	e001      	b.n	8006114 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b086      	sub	sp, #24
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	460b      	mov	r3, r1
 800612c:	607a      	str	r2, [r7, #4]
 800612e:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b0b      	cmp	r3, #11
 8006142:	d10d      	bne.n	8006160 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006144:	7afb      	ldrb	r3, [r7, #11]
 8006146:	2234      	movs	r2, #52	; 0x34
 8006148:	fb02 f303 	mul.w	r3, r2, r3
 800614c:	3390      	adds	r3, #144	; 0x90
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4413      	add	r3, r2
 8006152:	2234      	movs	r2, #52	; 0x34
 8006154:	4619      	mov	r1, r3
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f008 fd70 	bl	800ec3c <memcpy>
    return USBH_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	e000      	b.n	8006162 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8006160:	2302      	movs	r3, #2
  }
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b088      	sub	sp, #32
 800616e:	af02      	add	r7, sp, #8
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
 8006176:	460b      	mov	r3, r1
 8006178:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00e      	beq.n	80061ae <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006196:	2b0b      	cmp	r3, #11
 8006198:	d109      	bne.n	80061ae <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800619a:	7afb      	ldrb	r3, [r7, #11]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	2134      	movs	r1, #52	; 0x34
 80061a0:	fb01 f303 	mul.w	r3, r1, r3
 80061a4:	4413      	add	r3, r2
 80061a6:	3390      	adds	r3, #144	; 0x90
 80061a8:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d001      	beq.n	80061b2 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80061ae:	2302      	movs	r3, #2
 80061b0:	e040      	b.n	8006234 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2206      	movs	r2, #6
 80061b6:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80061b8:	7afb      	ldrb	r3, [r7, #11]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	2134      	movs	r1, #52	; 0x34
 80061be:	fb01 f303 	mul.w	r3, r1, r3
 80061c2:	4413      	add	r3, r2
 80061c4:	3390      	adds	r3, #144	; 0x90
 80061c6:	2206      	movs	r2, #6
 80061c8:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80061ca:	7afb      	ldrb	r3, [r7, #11]
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80061d4:	7af9      	ldrb	r1, [r7, #11]
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fe03 	bl	8006dea <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80061ea:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80061ec:	e016      	b.n	800621c <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	1ad2      	subs	r2, r2, r3
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	f242 7110 	movw	r1, #10000	; 0x2710
 80061fe:	fb01 f303 	mul.w	r3, r1, r3
 8006202:	429a      	cmp	r2, r3
 8006204:	d805      	bhi.n	8006212 <USBH_MSC_Read+0xa8>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d104      	bne.n	800621c <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2201      	movs	r2, #1
 8006216:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006218:	2302      	movs	r3, #2
 800621a:	e00b      	b.n	8006234 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800621c:	7afb      	ldrb	r3, [r7, #11]
 800621e:	4619      	mov	r1, r3
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff fe64 	bl	8005eee <USBH_MSC_RdWrProcess>
 8006226:	4603      	mov	r3, r0
 8006228:	2b01      	cmp	r3, #1
 800622a:	d0e0      	beq.n	80061ee <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2201      	movs	r2, #1
 8006230:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af02      	add	r7, sp, #8
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	607a      	str	r2, [r7, #4]
 8006246:	603b      	str	r3, [r7, #0]
 8006248:	460b      	mov	r3, r1
 800624a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00e      	beq.n	8006280 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006268:	2b0b      	cmp	r3, #11
 800626a:	d109      	bne.n	8006280 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800626c:	7afb      	ldrb	r3, [r7, #11]
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	2134      	movs	r1, #52	; 0x34
 8006272:	fb01 f303 	mul.w	r3, r1, r3
 8006276:	4413      	add	r3, r2
 8006278:	3390      	adds	r3, #144	; 0x90
 800627a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800627c:	2b01      	cmp	r3, #1
 800627e:	d001      	beq.n	8006284 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8006280:	2302      	movs	r3, #2
 8006282:	e040      	b.n	8006306 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	2207      	movs	r2, #7
 8006288:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800628a:	7afb      	ldrb	r3, [r7, #11]
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	2134      	movs	r1, #52	; 0x34
 8006290:	fb01 f303 	mul.w	r3, r1, r3
 8006294:	4413      	add	r3, r2
 8006296:	3390      	adds	r3, #144	; 0x90
 8006298:	2207      	movs	r2, #7
 800629a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800629c:	7afb      	ldrb	r3, [r7, #11]
 800629e:	b29a      	uxth	r2, r3
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80062a6:	7af9      	ldrb	r1, [r7, #11]
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 fd2f 	bl	8006d14 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80062bc:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80062be:	e016      	b.n	80062ee <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad2      	subs	r2, r2, r3
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	f242 7110 	movw	r1, #10000	; 0x2710
 80062d0:	fb01 f303 	mul.w	r3, r1, r3
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d805      	bhi.n	80062e4 <USBH_MSC_Write+0xa8>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2201      	movs	r2, #1
 80062e8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80062ea:	2302      	movs	r3, #2
 80062ec:	e00b      	b.n	8006306 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80062ee:	7afb      	ldrb	r3, [r7, #11]
 80062f0:	4619      	mov	r1, r3
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f7ff fdfb 	bl	8005eee <USBH_MSC_RdWrProcess>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d0e0      	beq.n	80062c0 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2201      	movs	r2, #1
 8006302:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2221      	movs	r2, #33	; 0x21
 800631a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	22ff      	movs	r2, #255	; 0xff
 8006320:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8006334:	2200      	movs	r2, #0
 8006336:	2100      	movs	r1, #0
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f002 f871 	bl	8008420 <USBH_CtlReq>
 800633e:	4603      	mov	r3, r0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	22a1      	movs	r2, #161	; 0xa1
 8006356:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	22fe      	movs	r2, #254	; 0xfe
 800635c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8006370:	2201      	movs	r2, #1
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f002 f853 	bl	8008420 <USBH_CtlReq>
 800637a:	4603      	mov	r3, r0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4a09      	ldr	r2, [pc, #36]	; (80063c0 <USBH_MSC_BOT_Init+0x3c>)
 800639a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4a09      	ldr	r2, [pc, #36]	; (80063c4 <USBH_MSC_BOT_Init+0x40>)
 80063a0:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	43425355 	.word	0x43425355
 80063c4:	20304050 	.word	0x20304050

080063c8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80063d4:	2301      	movs	r3, #1
 80063d6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80063d8:	2301      	movs	r3, #1
 80063da:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80063dc:	2301      	movs	r3, #1
 80063de:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063e0:	2300      	movs	r3, #0
 80063e2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063f8:	3b01      	subs	r3, #1
 80063fa:	2b0a      	cmp	r3, #10
 80063fc:	f200 822a 	bhi.w	8006854 <USBH_MSC_BOT_Process+0x48c>
 8006400:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <USBH_MSC_BOT_Process+0x40>)
 8006402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006406:	bf00      	nop
 8006408:	08006435 	.word	0x08006435
 800640c:	0800645d 	.word	0x0800645d
 8006410:	0800651b 	.word	0x0800651b
 8006414:	08006539 	.word	0x08006539
 8006418:	080065f5 	.word	0x080065f5
 800641c:	08006617 	.word	0x08006617
 8006420:	08006703 	.word	0x08006703
 8006424:	0800671f 	.word	0x0800671f
 8006428:	080067a9 	.word	0x080067a9
 800642c:	080067d9 	.word	0x080067d9
 8006430:	0800683b 	.word	0x0800683b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	78fa      	ldrb	r2, [r7, #3]
 8006438:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	795b      	ldrb	r3, [r3, #5]
 800644e:	2201      	movs	r2, #1
 8006450:	9200      	str	r2, [sp, #0]
 8006452:	221f      	movs	r2, #31
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f002 fae2 	bl	8008a1e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800645a:	e20a      	b.n	8006872 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	795b      	ldrb	r3, [r3, #5]
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f008 f9d8 	bl	800e818 <USBH_LL_GetURBState>
 8006468:	4603      	mov	r3, r0
 800646a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800646c:	7d3b      	ldrb	r3, [r7, #20]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d126      	bne.n	80064c0 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00f      	beq.n	800649a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006480:	b25b      	sxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	da04      	bge.n	8006490 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	2203      	movs	r2, #3
 800648a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800648e:	e008      	b.n	80064a2 <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	2205      	movs	r2, #5
 8006494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006498:	e003      	b.n	80064a2 <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	2207      	movs	r2, #7
 800649e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2202      	movs	r2, #2
 80064a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80064b6:	2200      	movs	r2, #0
 80064b8:	4619      	mov	r1, r3
 80064ba:	f005 fa6f 	bl	800b99c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80064be:	e1cb      	b.n	8006858 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 80064c0:	7d3b      	ldrb	r3, [r7, #20]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d112      	bne.n	80064ec <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2202      	movs	r2, #2
 80064d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80064e2:	2200      	movs	r2, #0
 80064e4:	4619      	mov	r1, r3
 80064e6:	f005 fa59 	bl	800b99c <osMessagePut>
      break;
 80064ea:	e1b5      	b.n	8006858 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 80064ec:	7d3b      	ldrb	r3, [r7, #20]
 80064ee:	2b05      	cmp	r3, #5
 80064f0:	f040 81b2 	bne.w	8006858 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	220a      	movs	r2, #10
 80064f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006510:	2200      	movs	r2, #0
 8006512:	4619      	mov	r1, r3
 8006514:	f005 fa42 	bl	800b99c <osMessagePut>
      break;
 8006518:	e19e      	b.n	8006858 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	895a      	ldrh	r2, [r3, #10]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	791b      	ldrb	r3, [r3, #4]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f002 fa9d 	bl	8008a68 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2204      	movs	r2, #4
 8006532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006536:	e19c      	b.n	8006872 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	791b      	ldrb	r3, [r3, #4]
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f008 f96a 	bl	800e818 <USBH_LL_GetURBState>
 8006544:	4603      	mov	r3, r0
 8006546:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006548:	7d3b      	ldrb	r3, [r7, #20]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d13b      	bne.n	80065c6 <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	8952      	ldrh	r2, [r2, #10]
 8006556:	4293      	cmp	r3, r2
 8006558:	d910      	bls.n	800657c <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	8952      	ldrh	r2, [r2, #10]
 8006564:	441a      	add	r2, r3
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	8952      	ldrh	r2, [r2, #10]
 8006574:	1a9a      	subs	r2, r3, r2
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	65da      	str	r2, [r3, #92]	; 0x5c
 800657a:	e002      	b.n	8006582 <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	2200      	movs	r2, #0
 8006580:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	895a      	ldrh	r2, [r3, #10]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	791b      	ldrb	r3, [r3, #4]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f002 fa65 	bl	8008a68 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800659e:	e15d      	b.n	800685c <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2207      	movs	r2, #7
 80065a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80065bc:	2200      	movs	r2, #0
 80065be:	4619      	mov	r1, r3
 80065c0:	f005 f9ec 	bl	800b99c <osMessagePut>
      break;
 80065c4:	e14a      	b.n	800685c <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 80065c6:	7d3b      	ldrb	r3, [r7, #20]
 80065c8:	2b05      	cmp	r3, #5
 80065ca:	f040 8147 	bne.w	800685c <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	2209      	movs	r2, #9
 80065d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80065ea:	2200      	movs	r2, #0
 80065ec:	4619      	mov	r1, r3
 80065ee:	f005 f9d5 	bl	800b99c <osMessagePut>
      break;
 80065f2:	e133      	b.n	800685c <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	891a      	ldrh	r2, [r3, #8]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	795b      	ldrb	r3, [r3, #5]
 8006602:	2001      	movs	r0, #1
 8006604:	9000      	str	r0, [sp, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f002 fa09 	bl	8008a1e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2206      	movs	r2, #6
 8006610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006614:	e12d      	b.n	8006872 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	795b      	ldrb	r3, [r3, #5]
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f008 f8fb 	bl	800e818 <USBH_LL_GetURBState>
 8006622:	4603      	mov	r3, r0
 8006624:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006626:	7d3b      	ldrb	r3, [r7, #20]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d13d      	bne.n	80066a8 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	8912      	ldrh	r2, [r2, #8]
 8006634:	4293      	cmp	r3, r2
 8006636:	d910      	bls.n	800665a <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	8912      	ldrh	r2, [r2, #8]
 8006642:	441a      	add	r2, r3
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	8912      	ldrh	r2, [r2, #8]
 8006652:	1a9a      	subs	r2, r3, r2
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	65da      	str	r2, [r3, #92]	; 0x5c
 8006658:	e002      	b.n	8006660 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2200      	movs	r2, #0
 800665e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00c      	beq.n	8006682 <USBH_MSC_BOT_Process+0x2ba>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	891a      	ldrh	r2, [r3, #8]
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	795b      	ldrb	r3, [r3, #5]
 8006676:	2001      	movs	r0, #1
 8006678:	9000      	str	r0, [sp, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f002 f9cf 	bl	8008a1e <USBH_BulkSendData>
 8006680:	e003      	b.n	800668a <USBH_MSC_BOT_Process+0x2c2>
                                  MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2207      	movs	r2, #7
 8006686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2202      	movs	r2, #2
 800668e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800669e:	2200      	movs	r2, #0
 80066a0:	4619      	mov	r1, r3
 80066a2:	f005 f97b 	bl	800b99c <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 80066a6:	e0db      	b.n	8006860 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 80066a8:	7d3b      	ldrb	r3, [r7, #20]
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d112      	bne.n	80066d4 <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	2205      	movs	r2, #5
 80066b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2202      	movs	r2, #2
 80066ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80066ca:	2200      	movs	r2, #0
 80066cc:	4619      	mov	r1, r3
 80066ce:	f005 f965 	bl	800b99c <osMessagePut>
      break;
 80066d2:	e0c5      	b.n	8006860 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 80066d4:	7d3b      	ldrb	r3, [r7, #20]
 80066d6:	2b05      	cmp	r3, #5
 80066d8:	f040 80c2 	bne.w	8006860 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	220a      	movs	r2, #10
 80066e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80066f8:	2200      	movs	r2, #0
 80066fa:	4619      	mov	r1, r3
 80066fc:	f005 f94e 	bl	800b99c <osMessagePut>
      break;
 8006700:	e0ae      	b.n	8006860 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	791b      	ldrb	r3, [r3, #4]
 800670c:	220d      	movs	r2, #13
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f002 f9aa 	bl	8008a68 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2208      	movs	r2, #8
 8006718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800671c:	e0a9      	b.n	8006872 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	791b      	ldrb	r3, [r3, #4]
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f008 f877 	bl	800e818 <USBH_LL_GetURBState>
 800672a:	4603      	mov	r3, r0
 800672c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800672e:	7d3b      	ldrb	r3, [r7, #20]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d123      	bne.n	800677c <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f8c5 	bl	80068d4 <USBH_MSC_DecodeCSW>
 800674a:	4603      	mov	r3, r0
 800674c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800674e:	7d7b      	ldrb	r3, [r7, #21]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d102      	bne.n	800675a <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	75fb      	strb	r3, [r7, #23]
 8006758:	e001      	b.n	800675e <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 800675a:	2302      	movs	r3, #2
 800675c:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2202      	movs	r2, #2
 8006762:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006772:	2200      	movs	r2, #0
 8006774:	4619      	mov	r1, r3
 8006776:	f005 f911 	bl	800b99c <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800677a:	e073      	b.n	8006864 <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 800677c:	7d3b      	ldrb	r3, [r7, #20]
 800677e:	2b05      	cmp	r3, #5
 8006780:	d170      	bne.n	8006864 <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2209      	movs	r2, #9
 8006786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2202      	movs	r2, #2
 800678e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800679e:	2200      	movs	r2, #0
 80067a0:	4619      	mov	r1, r3
 80067a2:	f005 f8fb 	bl	800b99c <osMessagePut>
      break;
 80067a6:	e05d      	b.n	8006864 <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	2200      	movs	r2, #0
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f864 	bl	800687c <USBH_MSC_BOT_Abort>
 80067b4:	4603      	mov	r3, r0
 80067b6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80067b8:	7dbb      	ldrb	r3, [r7, #22]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d104      	bne.n	80067c8 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2207      	movs	r2, #7
 80067c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80067c6:	e04f      	b.n	8006868 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 80067c8:	7dbb      	ldrb	r3, [r7, #22]
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d14c      	bne.n	8006868 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	220b      	movs	r2, #11
 80067d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80067d6:	e047      	b.n	8006868 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	2201      	movs	r2, #1
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f84c 	bl	800687c <USBH_MSC_BOT_Abort>
 80067e4:	4603      	mov	r3, r0
 80067e6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80067e8:	7dbb      	ldrb	r3, [r7, #22]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d11d      	bne.n	800682a <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	795b      	ldrb	r3, [r3, #5]
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f008 f869 	bl	800e8cc <USBH_LL_GetToggle>
 80067fa:	4603      	mov	r3, r0
 80067fc:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	7959      	ldrb	r1, [r3, #5]
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	f1c3 0301 	rsb	r3, r3, #1
 8006808:	b2db      	uxtb	r3, r3
 800680a:	461a      	mov	r2, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f008 f82d 	bl	800e86c <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	791b      	ldrb	r3, [r3, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f008 f826 	bl	800e86c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	2209      	movs	r2, #9
 8006824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006828:	e020      	b.n	800686c <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 800682a:	7dbb      	ldrb	r3, [r7, #22]
 800682c:	2b04      	cmp	r3, #4
 800682e:	d11d      	bne.n	800686c <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	220b      	movs	r2, #11
 8006834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006838:	e018      	b.n	800686c <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff fd67 	bl	800630e <USBH_MSC_BOT_REQ_Reset>
 8006840:	4603      	mov	r3, r0
 8006842:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006844:	7dfb      	ldrb	r3, [r7, #23]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d112      	bne.n	8006870 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8006852:	e00d      	b.n	8006870 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 8006854:	bf00      	nop
 8006856:	e00c      	b.n	8006872 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8006858:	bf00      	nop
 800685a:	e00a      	b.n	8006872 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800685c:	bf00      	nop
 800685e:	e008      	b.n	8006872 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8006860:	bf00      	nop
 8006862:	e006      	b.n	8006872 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8006864:	bf00      	nop
 8006866:	e004      	b.n	8006872 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8006868:	bf00      	nop
 800686a:	e002      	b.n	8006872 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800686c:	bf00      	nop
 800686e:	e000      	b.n	8006872 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8006870:	bf00      	nop
  }
  return status;
 8006872:	7dfb      	ldrb	r3, [r7, #23]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
 8006888:	4613      	mov	r3, r2
 800688a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800688c:	2302      	movs	r3, #2
 800688e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800689a:	78bb      	ldrb	r3, [r7, #2]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d002      	beq.n	80068a6 <USBH_MSC_BOT_Abort+0x2a>
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d009      	beq.n	80068b8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80068a4:	e011      	b.n	80068ca <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	79db      	ldrb	r3, [r3, #7]
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 faea 	bl	8007e86 <USBH_ClrFeature>
 80068b2:	4603      	mov	r3, r0
 80068b4:	73fb      	strb	r3, [r7, #15]
      break;
 80068b6:	e008      	b.n	80068ca <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	799b      	ldrb	r3, [r3, #6]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 fae1 	bl	8007e86 <USBH_ClrFeature>
 80068c4:	4603      	mov	r3, r0
 80068c6:	73fb      	strb	r3, [r7, #15]
      break;
 80068c8:	bf00      	nop
  }
  return status;
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80068e6:	2301      	movs	r3, #1
 80068e8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	791b      	ldrb	r3, [r3, #4]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f007 feff 	bl	800e6f4 <USBH_LL_GetLastXferSize>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b0d      	cmp	r3, #13
 80068fa:	d002      	beq.n	8006902 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80068fc:	2302      	movs	r3, #2
 80068fe:	73fb      	strb	r3, [r7, #15]
 8006900:	e024      	b.n	800694c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006906:	4a14      	ldr	r2, [pc, #80]	; (8006958 <USBH_MSC_DecodeCSW+0x84>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d11d      	bne.n	8006948 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006914:	429a      	cmp	r2, r3
 8006916:	d119      	bne.n	800694c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800691e:	2b00      	cmp	r3, #0
 8006920:	d102      	bne.n	8006928 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]
 8006926:	e011      	b.n	800694c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800692e:	2b01      	cmp	r3, #1
 8006930:	d102      	bne.n	8006938 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8006932:	2301      	movs	r3, #1
 8006934:	73fb      	strb	r3, [r7, #15]
 8006936:	e009      	b.n	800694c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800693e:	2b02      	cmp	r3, #2
 8006940:	d104      	bne.n	800694c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8006942:	2302      	movs	r3, #2
 8006944:	73fb      	strb	r3, [r7, #15]
 8006946:	e001      	b.n	800694c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006948:	2302      	movs	r3, #2
 800694a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800694c:	7bfb      	ldrb	r3, [r7, #15]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	53425355 	.word	0x53425355

0800695c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006968:	2302      	movs	r3, #2
 800696a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800697c:	2b01      	cmp	r3, #1
 800697e:	d002      	beq.n	8006986 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006980:	2b02      	cmp	r3, #2
 8006982:	d021      	beq.n	80069c8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006984:	e028      	b.n	80069d8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2200      	movs	r2, #0
 800698a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	220a      	movs	r2, #10
 8006998:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	3363      	adds	r3, #99	; 0x63
 80069a0:	2210      	movs	r2, #16
 80069a2:	2100      	movs	r1, #0
 80069a4:	4618      	mov	r0, r3
 80069a6:	f008 f957 	bl	800ec58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2202      	movs	r2, #2
 80069be:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 80069c2:	2301      	movs	r3, #1
 80069c4:	73fb      	strb	r3, [r7, #15]
      break;
 80069c6:	e007      	b.n	80069d8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80069c8:	78fb      	ldrb	r3, [r7, #3]
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff fcfb 	bl	80063c8 <USBH_MSC_BOT_Process>
 80069d2:	4603      	mov	r3, r0
 80069d4:	73fb      	strb	r3, [r7, #15]
      break;
 80069d6:	bf00      	nop
  }

  return error;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b086      	sub	sp, #24
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	460b      	mov	r3, r1
 80069ec:	607a      	str	r2, [r7, #4]
 80069ee:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80069f0:	2301      	movs	r3, #1
 80069f2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d002      	beq.n	8006a0e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d027      	beq.n	8006a5c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8006a0c:	e05f      	b.n	8006ace <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	2208      	movs	r2, #8
 8006a12:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	2280      	movs	r2, #128	; 0x80
 8006a18:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	220a      	movs	r2, #10
 8006a20:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	3363      	adds	r3, #99	; 0x63
 8006a28:	2210      	movs	r2, #16
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f008 f913 	bl	800ec58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	2225      	movs	r2, #37	; 0x25
 8006a36:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2202      	movs	r2, #2
 8006a46:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f103 0210 	add.w	r2, r3, #16
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006a56:	2301      	movs	r3, #1
 8006a58:	75fb      	strb	r3, [r7, #23]
      break;
 8006a5a:	e038      	b.n	8006ace <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006a5c:	7afb      	ldrb	r3, [r7, #11]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f7ff fcb1 	bl	80063c8 <USBH_MSC_BOT_Process>
 8006a66:	4603      	mov	r3, r0
 8006a68:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006a6a:	7dfb      	ldrb	r3, [r7, #23]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d12d      	bne.n	8006acc <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a76:	3303      	adds	r3, #3
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a82:	3302      	adds	r3, #2
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a90:	3301      	adds	r3, #1
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006a96:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	061b      	lsls	r3, r3, #24
 8006aa2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aae:	3307      	adds	r3, #7
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aba:	3306      	adds	r3, #6
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	021b      	lsls	r3, r3, #8
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	809a      	strh	r2, [r3, #4]
      break;
 8006acc:	bf00      	nop
  }

  return error;
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d002      	beq.n	8006b04 <USBH_MSC_SCSI_Inquiry+0x2c>
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d03d      	beq.n	8006b7e <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8006b02:	e089      	b.n	8006c18 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	2224      	movs	r2, #36	; 0x24
 8006b08:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2280      	movs	r2, #128	; 0x80
 8006b0e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	220a      	movs	r2, #10
 8006b16:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	3363      	adds	r3, #99	; 0x63
 8006b1e:	220a      	movs	r2, #10
 8006b20:	2100      	movs	r1, #0
 8006b22:	4618      	mov	r0, r3
 8006b24:	f008 f898 	bl	800ec58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2212      	movs	r2, #18
 8006b2c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006b30:	7afb      	ldrb	r3, [r7, #11]
 8006b32:	015b      	lsls	r3, r3, #5
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	2224      	movs	r2, #36	; 0x24
 8006b50:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f103 0210 	add.w	r2, r3, #16
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b7c:	e04c      	b.n	8006c18 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006b7e:	7afb      	ldrb	r3, [r7, #11]
 8006b80:	4619      	mov	r1, r3
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f7ff fc20 	bl	80063c8 <USBH_MSC_BOT_Process>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d141      	bne.n	8006c16 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8006b92:	2222      	movs	r2, #34	; 0x22
 8006b94:	2100      	movs	r1, #0
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f008 f85e 	bl	800ec58 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	f003 031f 	and.w	r3, r3, #31
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	b25b      	sxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	da03      	bge.n	8006bd6 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	709a      	strb	r2, [r3, #2]
 8006bd4:	e002      	b.n	8006bdc <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	1cd8      	adds	r0, r3, #3
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006be6:	3308      	adds	r3, #8
 8006be8:	2208      	movs	r2, #8
 8006bea:	4619      	mov	r1, r3
 8006bec:	f008 f826 	bl	800ec3c <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f103 000c 	add.w	r0, r3, #12
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bfc:	3310      	adds	r3, #16
 8006bfe:	2210      	movs	r2, #16
 8006c00:	4619      	mov	r1, r3
 8006c02:	f008 f81b 	bl	800ec3c <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	331d      	adds	r3, #29
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8006c10:	3220      	adds	r2, #32
 8006c12:	6812      	ldr	r2, [r2, #0]
 8006c14:	601a      	str	r2, [r3, #0]
      break;
 8006c16:	bf00      	nop
  }

  return error;
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b086      	sub	sp, #24
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	607a      	str	r2, [r7, #4]
 8006c2e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006c30:	2302      	movs	r3, #2
 8006c32:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d002      	beq.n	8006c4e <USBH_MSC_SCSI_RequestSense+0x2c>
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d03d      	beq.n	8006cc8 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8006c4c:	e05d      	b.n	8006d0a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	220e      	movs	r2, #14
 8006c52:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2280      	movs	r2, #128	; 0x80
 8006c58:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	220a      	movs	r2, #10
 8006c60:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	3363      	adds	r3, #99	; 0x63
 8006c68:	2210      	movs	r2, #16
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f007 fff3 	bl	800ec58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	2203      	movs	r2, #3
 8006c76:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006c7a:	7afb      	ldrb	r3, [r7, #11]
 8006c7c:	015b      	lsls	r3, r3, #5
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	220e      	movs	r2, #14
 8006c9a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f103 0210 	add.w	r2, r3, #16
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc6:	e020      	b.n	8006d0a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006cc8:	7afb      	ldrb	r3, [r7, #11]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f7ff fb7b 	bl	80063c8 <USBH_MSC_BOT_Process>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d115      	bne.n	8006d08 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce2:	3302      	adds	r3, #2
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cf6:	7b1a      	ldrb	r2, [r3, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d02:	7b5a      	ldrb	r2, [r3, #13]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	709a      	strb	r2, [r3, #2]
      break;
 8006d08:	bf00      	nop
  }

  return error;
 8006d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3718      	adds	r7, #24
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	607a      	str	r2, [r7, #4]
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	460b      	mov	r3, r1
 8006d22:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006d24:	2302      	movs	r3, #2
 8006d26:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d002      	beq.n	8006d42 <USBH_MSC_SCSI_Write+0x2e>
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d047      	beq.n	8006dd0 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006d40:	e04e      	b.n	8006de0 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006d48:	461a      	mov	r2, r3
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	fb03 f202 	mul.w	r2, r3, r2
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	220a      	movs	r2, #10
 8006d60:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	3363      	adds	r3, #99	; 0x63
 8006d68:	2210      	movs	r2, #16
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f007 ff73 	bl	800ec58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	222a      	movs	r2, #42	; 0x2a
 8006d76:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006d7a:	79fa      	ldrb	r2, [r7, #7]
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006d82:	79ba      	ldrb	r2, [r7, #6]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006d8a:	797a      	ldrb	r2, [r7, #5]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006d92:	1d3b      	adds	r3, r7, #4
 8006d94:	781a      	ldrb	r2, [r3, #0]
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006d9c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006da6:	f107 0320 	add.w	r3, r7, #32
 8006daa:	781a      	ldrb	r2, [r3, #0]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dce:	e007      	b.n	8006de0 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006dd0:	7afb      	ldrb	r3, [r7, #11]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7ff faf7 	bl	80063c8 <USBH_MSC_BOT_Process>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dde:	bf00      	nop
  }

  return error;
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b086      	sub	sp, #24
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	607a      	str	r2, [r7, #4]
 8006df4:	603b      	str	r3, [r7, #0]
 8006df6:	460b      	mov	r3, r1
 8006df8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d002      	beq.n	8006e18 <USBH_MSC_SCSI_Read+0x2e>
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d047      	beq.n	8006ea6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006e16:	e04e      	b.n	8006eb6 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	fb03 f202 	mul.w	r2, r3, r2
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	2280      	movs	r2, #128	; 0x80
 8006e2e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	220a      	movs	r2, #10
 8006e36:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	3363      	adds	r3, #99	; 0x63
 8006e3e:	2210      	movs	r2, #16
 8006e40:	2100      	movs	r1, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f007 ff08 	bl	800ec58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	2228      	movs	r2, #40	; 0x28
 8006e4c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006e50:	79fa      	ldrb	r2, [r7, #7]
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006e58:	79ba      	ldrb	r2, [r7, #6]
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006e60:	797a      	ldrb	r2, [r7, #5]
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006e68:	1d3b      	adds	r3, r7, #4
 8006e6a:	781a      	ldrb	r2, [r3, #0]
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006e72:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006e7c:	f107 0320 	add.w	r3, r7, #32
 8006e80:	781a      	ldrb	r2, [r3, #0]
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea4:	e007      	b.n	8006eb6 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006ea6:	7afb      	ldrb	r3, [r7, #11]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f7ff fa8c 	bl	80063c8 <USBH_MSC_BOT_Process>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb4:	bf00      	nop
  }

  return error;
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006ec0:	b5b0      	push	{r4, r5, r7, lr}
 8006ec2:	b090      	sub	sp, #64	; 0x40
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e04d      	b.n	8006f74 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	79fa      	ldrb	r2, [r7, #7]
 8006edc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 f847 	bl	8006f84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8006f24:	4b15      	ldr	r3, [pc, #84]	; (8006f7c <USBH_Init+0xbc>)
 8006f26:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006f2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8006f30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f34:	2100      	movs	r1, #0
 8006f36:	4618      	mov	r0, r3
 8006f38:	f004 fd07 	bl	800b94a <osMessageCreate>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8006f44:	4b0e      	ldr	r3, [pc, #56]	; (8006f80 <USBH_Init+0xc0>)
 8006f46:	f107 0414 	add.w	r4, r7, #20
 8006f4a:	461d      	mov	r5, r3
 8006f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006f54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8006f58:	f107 0314 	add.w	r3, r7, #20
 8006f5c:	68f9      	ldr	r1, [r7, #12]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f004 fbca 	bl	800b6f8 <osThreadCreate>
 8006f64:	4602      	mov	r2, r0
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f007 fb0d 	bl	800e58c <USBH_LL_Init>

  return USBH_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3740      	adds	r7, #64	; 0x40
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8006f7c:	08010058 	.word	0x08010058
 8006f80:	08010068 	.word	0x08010068

08006f84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	e009      	b.n	8006faa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	33e0      	adds	r3, #224	; 0xe0
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b0f      	cmp	r3, #15
 8006fae:	d9f2      	bls.n	8006f96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e009      	b.n	8006fca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fd0:	d3f1      	bcc.n	8006fb6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2240      	movs	r2, #64	; 0x40
 8006ff6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d016      	beq.n	800706e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10e      	bne.n	8007068 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007050:	1c59      	adds	r1, r3, #1
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	33de      	adds	r3, #222	; 0xde
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	73fb      	strb	r3, [r7, #15]
 8007066:	e004      	b.n	8007072 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007068:	2302      	movs	r3, #2
 800706a:	73fb      	strb	r3, [r7, #15]
 800706c:	e001      	b.n	8007072 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800706e:	2302      	movs	r3, #2
 8007070:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007072:	7bfb      	ldrb	r3, [r7, #15]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007096:	78fa      	ldrb	r2, [r7, #3]
 8007098:	429a      	cmp	r2, r3
 800709a:	d204      	bcs.n	80070a6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	78fa      	ldrb	r2, [r7, #3]
 80070a0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80070a4:	e001      	b.n	80070aa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80070a6:	2302      	movs	r3, #2
 80070a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	4608      	mov	r0, r1
 80070c2:	4611      	mov	r1, r2
 80070c4:	461a      	mov	r2, r3
 80070c6:	4603      	mov	r3, r0
 80070c8:	70fb      	strb	r3, [r7, #3]
 80070ca:	460b      	mov	r3, r1
 80070cc:	70bb      	strb	r3, [r7, #2]
 80070ce:	4613      	mov	r3, r2
 80070d0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80070e0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070e2:	e025      	b.n	8007130 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
 80070e6:	221a      	movs	r2, #26
 80070e8:	fb02 f303 	mul.w	r3, r2, r3
 80070ec:	3308      	adds	r3, #8
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	4413      	add	r3, r2
 80070f2:	3302      	adds	r3, #2
 80070f4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	795b      	ldrb	r3, [r3, #5]
 80070fa:	78fa      	ldrb	r2, [r7, #3]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d002      	beq.n	8007106 <USBH_FindInterface+0x4e>
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	2bff      	cmp	r3, #255	; 0xff
 8007104:	d111      	bne.n	800712a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800710a:	78ba      	ldrb	r2, [r7, #2]
 800710c:	429a      	cmp	r2, r3
 800710e:	d002      	beq.n	8007116 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007110:	78bb      	ldrb	r3, [r7, #2]
 8007112:	2bff      	cmp	r3, #255	; 0xff
 8007114:	d109      	bne.n	800712a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800711a:	787a      	ldrb	r2, [r7, #1]
 800711c:	429a      	cmp	r2, r3
 800711e:	d002      	beq.n	8007126 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007120:	787b      	ldrb	r3, [r7, #1]
 8007122:	2bff      	cmp	r3, #255	; 0xff
 8007124:	d101      	bne.n	800712a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	e006      	b.n	8007138 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800712a:	7dfb      	ldrb	r3, [r7, #23]
 800712c:	3301      	adds	r3, #1
 800712e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007130:	7dfb      	ldrb	r3, [r7, #23]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d9d6      	bls.n	80070e4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007136:	23ff      	movs	r3, #255	; 0xff
}
 8007138:	4618      	mov	r0, r3
 800713a:	371c      	adds	r7, #28
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f007 fa59 	bl	800e604 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007152:	2101      	movs	r1, #1
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f007 fb72 	bl	800e83e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b088      	sub	sp, #32
 8007168:	af04      	add	r7, sp, #16
 800716a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800716c:	2302      	movs	r3, #2
 800716e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b01      	cmp	r3, #1
 800717e:	d102      	bne.n	8007186 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2203      	movs	r2, #3
 8007184:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b0b      	cmp	r3, #11
 800718e:	f200 8247 	bhi.w	8007620 <USBH_Process+0x4bc>
 8007192:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <USBH_Process+0x34>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071c9 	.word	0x080071c9
 800719c:	08007217 	.word	0x08007217
 80071a0:	0800729b 	.word	0x0800729b
 80071a4:	0800759f 	.word	0x0800759f
 80071a8:	08007621 	.word	0x08007621
 80071ac:	0800735b 	.word	0x0800735b
 80071b0:	08007529 	.word	0x08007529
 80071b4:	080073ad 	.word	0x080073ad
 80071b8:	080073e9 	.word	0x080073e9
 80071bc:	08007423 	.word	0x08007423
 80071c0:	08007481 	.word	0x08007481
 80071c4:	08007587 	.word	0x08007587
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 8227 	beq.w	8007624 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80071dc:	20c8      	movs	r0, #200	; 0xc8
 80071de:	f007 fba5 	bl	800e92c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f007 fa6b 	bl	800e6be <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800720c:	2200      	movs	r2, #0
 800720e:	4619      	mov	r1, r3
 8007210:	f004 fbc4 	bl	800b99c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007214:	e206      	b.n	8007624 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800721c:	2b01      	cmp	r3, #1
 800721e:	d107      	bne.n	8007230 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	e025      	b.n	800727c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800723a:	d914      	bls.n	8007266 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007242:	3301      	adds	r3, #1
 8007244:	b2da      	uxtb	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007252:	2b03      	cmp	r3, #3
 8007254:	d903      	bls.n	800725e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	220d      	movs	r2, #13
 800725a:	701a      	strb	r2, [r3, #0]
 800725c:	e00e      	b.n	800727c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	e00a      	b.n	800727c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800726c:	f103 020a 	add.w	r2, r3, #10
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007276:	200a      	movs	r0, #10
 8007278:	f007 fb58 	bl	800e92c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007290:	2200      	movs	r2, #0
 8007292:	4619      	mov	r1, r3
 8007294:	f004 fb82 	bl	800b99c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007298:	e1cb      	b.n	8007632 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072aa:	2104      	movs	r1, #4
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80072b0:	2064      	movs	r0, #100	; 0x64
 80072b2:	f007 fb3b 	bl	800e92c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f007 f9da 	bl	800e670 <USBH_LL_GetSpeed>
 80072bc:	4603      	mov	r3, r0
 80072be:	461a      	mov	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2205      	movs	r2, #5
 80072ca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80072cc:	2100      	movs	r1, #0
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 fc17 	bl	8008b02 <USBH_AllocPipe>
 80072d4:	4603      	mov	r3, r0
 80072d6:	461a      	mov	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80072dc:	2180      	movs	r1, #128	; 0x80
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 fc0f 	bl	8008b02 <USBH_AllocPipe>
 80072e4:	4603      	mov	r3, r0
 80072e6:	461a      	mov	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	7919      	ldrb	r1, [r3, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007300:	b292      	uxth	r2, r2
 8007302:	9202      	str	r2, [sp, #8]
 8007304:	2200      	movs	r2, #0
 8007306:	9201      	str	r2, [sp, #4]
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	4603      	mov	r3, r0
 800730c:	2280      	movs	r2, #128	; 0x80
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 fbc8 	bl	8008aa4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	7959      	ldrb	r1, [r3, #5]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007328:	b292      	uxth	r2, r2
 800732a:	9202      	str	r2, [sp, #8]
 800732c:	2200      	movs	r2, #0
 800732e:	9201      	str	r2, [sp, #4]
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	4603      	mov	r3, r0
 8007334:	2200      	movs	r2, #0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 fbb4 	bl	8008aa4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007350:	2200      	movs	r2, #0
 8007352:	4619      	mov	r1, r3
 8007354:	f004 fb22 	bl	800b99c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007358:	e16b      	b.n	8007632 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f96e 	bl	800763c <USBH_HandleEnum>
 8007360:	4603      	mov	r3, r0
 8007362:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	f040 815d 	bne.w	8007628 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800737c:	2b01      	cmp	r3, #1
 800737e:	d103      	bne.n	8007388 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2208      	movs	r2, #8
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	e002      	b.n	800738e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2207      	movs	r2, #7
 800738c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2205      	movs	r2, #5
 8007392:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80073a2:	2200      	movs	r2, #0
 80073a4:	4619      	mov	r1, r3
 80073a6:	f004 faf9 	bl	800b99c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073aa:	e13d      	b.n	8007628 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 813a 	beq.w	800762c <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073be:	2101      	movs	r1, #1
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2208      	movs	r2, #8
 80073c8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2205      	movs	r2, #5
 80073ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80073de:	2200      	movs	r2, #0
 80073e0:	4619      	mov	r1, r3
 80073e2:	f004 fadb 	bl	800b99c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80073e6:	e121      	b.n	800762c <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fd00 	bl	8007df8 <USBH_SetCfg>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d102      	bne.n	8007404 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2209      	movs	r2, #9
 8007402:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007418:	2200      	movs	r2, #0
 800741a:	4619      	mov	r1, r3
 800741c:	f004 fabe 	bl	800b99c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007420:	e107      	b.n	8007632 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d015      	beq.n	800745c <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007430:	2101      	movs	r1, #1
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fd03 	bl	8007e3e <USBH_SetFeature>
 8007438:	4603      	mov	r3, r0
 800743a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b00      	cmp	r3, #0
 8007442:	d103      	bne.n	800744c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	220a      	movs	r2, #10
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	e00a      	b.n	8007462 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b03      	cmp	r3, #3
 8007452:	d106      	bne.n	8007462 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	220a      	movs	r2, #10
 8007458:	701a      	strb	r2, [r3, #0]
 800745a:	e002      	b.n	8007462 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	220a      	movs	r2, #10
 8007460:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007476:	2200      	movs	r2, #0
 8007478:	4619      	mov	r1, r3
 800747a:	f004 fa8f 	bl	800b99c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800747e:	e0d8      	b.n	8007632 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007486:	2b00      	cmp	r3, #0
 8007488:	d03f      	beq.n	800750a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]
 8007496:	e016      	b.n	80074c6 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007498:	7bfa      	ldrb	r2, [r7, #15]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	32de      	adds	r2, #222	; 0xde
 800749e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a2:	791a      	ldrb	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d108      	bne.n	80074c0 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 80074ae:	7bfa      	ldrb	r2, [r7, #15]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	32de      	adds	r2, #222	; 0xde
 80074b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80074be:	e005      	b.n	80074cc <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
 80074c2:	3301      	adds	r3, #1
 80074c4:	73fb      	strb	r3, [r7, #15]
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0e5      	beq.n	8007498 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d016      	beq.n	8007504 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	4798      	blx	r3
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d109      	bne.n	80074fc <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2206      	movs	r2, #6
 80074ec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074f4:	2103      	movs	r1, #3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
 80074fa:	e006      	b.n	800750a <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	220d      	movs	r2, #13
 8007500:	701a      	strb	r2, [r3, #0]
 8007502:	e002      	b.n	800750a <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	220d      	movs	r2, #13
 8007508:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2205      	movs	r2, #5
 800750e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800751e:	2200      	movs	r2, #0
 8007520:	4619      	mov	r1, r3
 8007522:	f004 fa3b 	bl	800b99c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007526:	e084      	b.n	8007632 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d017      	beq.n	8007562 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	4798      	blx	r3
 800753e:	4603      	mov	r3, r0
 8007540:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d103      	bne.n	8007552 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	220b      	movs	r2, #11
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	e00a      	b.n	8007568 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8007552:	7bbb      	ldrb	r3, [r7, #14]
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b02      	cmp	r3, #2
 8007558:	d106      	bne.n	8007568 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	220d      	movs	r2, #13
 800755e:	701a      	strb	r2, [r3, #0]
 8007560:	e002      	b.n	8007568 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	220d      	movs	r2, #13
 8007566:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2205      	movs	r2, #5
 800756c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800757c:	2200      	movs	r2, #0
 800757e:	4619      	mov	r1, r3
 8007580:	f004 fa0c 	bl	800b99c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007584:	e055      	b.n	8007632 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800758c:	2b00      	cmp	r3, #0
 800758e:	d04f      	beq.n	8007630 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
      }
      break;
 800759c:	e048      	b.n	8007630 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7ff fcec 	bl	8006f84 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d009      	beq.n	80075ca <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075da:	2105      	movs	r1, #5
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d107      	bne.n	80075fc <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7ff fda5 	bl	8007144 <USBH_Start>
 80075fa:	e002      	b.n	8007602 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f007 f801 	bl	800e604 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007616:	2200      	movs	r2, #0
 8007618:	4619      	mov	r1, r3
 800761a:	f004 f9bf 	bl	800b99c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800761e:	e008      	b.n	8007632 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8007620:	bf00      	nop
 8007622:	e006      	b.n	8007632 <USBH_Process+0x4ce>
      break;
 8007624:	bf00      	nop
 8007626:	e004      	b.n	8007632 <USBH_Process+0x4ce>
      break;
 8007628:	bf00      	nop
 800762a:	e002      	b.n	8007632 <USBH_Process+0x4ce>
    break;
 800762c:	bf00      	nop
 800762e:	e000      	b.n	8007632 <USBH_Process+0x4ce>
      break;
 8007630:	bf00      	nop
  }
  return USBH_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af04      	add	r7, sp, #16
 8007642:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007644:	2301      	movs	r3, #1
 8007646:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007648:	2301      	movs	r3, #1
 800764a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	785b      	ldrb	r3, [r3, #1]
 8007650:	2b07      	cmp	r3, #7
 8007652:	f200 8208 	bhi.w	8007a66 <USBH_HandleEnum+0x42a>
 8007656:	a201      	add	r2, pc, #4	; (adr r2, 800765c <USBH_HandleEnum+0x20>)
 8007658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765c:	0800767d 	.word	0x0800767d
 8007660:	0800773b 	.word	0x0800773b
 8007664:	080077a5 	.word	0x080077a5
 8007668:	08007833 	.word	0x08007833
 800766c:	0800789d 	.word	0x0800789d
 8007670:	0800790d 	.word	0x0800790d
 8007674:	080079a9 	.word	0x080079a9
 8007678:	08007a27 	.word	0x08007a27
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800767c:	2108      	movs	r1, #8
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 faea 	bl	8007c58 <USBH_Get_DevDesc>
 8007684:	4603      	mov	r3, r0
 8007686:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d130      	bne.n	80076f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	7919      	ldrb	r1, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80076b2:	b292      	uxth	r2, r2
 80076b4:	9202      	str	r2, [sp, #8]
 80076b6:	2200      	movs	r2, #0
 80076b8:	9201      	str	r2, [sp, #4]
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	4603      	mov	r3, r0
 80076be:	2280      	movs	r2, #128	; 0x80
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 f9ef 	bl	8008aa4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	7959      	ldrb	r1, [r3, #5]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076da:	b292      	uxth	r2, r2
 80076dc:	9202      	str	r2, [sp, #8]
 80076de:	2200      	movs	r2, #0
 80076e0:	9201      	str	r2, [sp, #4]
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	4603      	mov	r3, r0
 80076e6:	2200      	movs	r2, #0
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 f9db 	bl	8008aa4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80076ee:	e1bc      	b.n	8007a6a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	f040 81b9 	bne.w	8007a6a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076fe:	3301      	adds	r3, #1
 8007700:	b2da      	uxtb	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800770e:	2b03      	cmp	r3, #3
 8007710:	d903      	bls.n	800771a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	220d      	movs	r2, #13
 8007716:	701a      	strb	r2, [r3, #0]
      break;
 8007718:	e1a7      	b.n	8007a6a <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	795b      	ldrb	r3, [r3, #5]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 fa0f 	bl	8008b44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	791b      	ldrb	r3, [r3, #4]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 fa09 	bl	8008b44 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	701a      	strb	r2, [r3, #0]
      break;
 8007738:	e197      	b.n	8007a6a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800773a:	2112      	movs	r1, #18
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fa8b 	bl	8007c58 <USBH_Get_DevDesc>
 8007742:	4603      	mov	r3, r0
 8007744:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d103      	bne.n	8007754 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007752:	e18c      	b.n	8007a6e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b03      	cmp	r3, #3
 8007758:	f040 8189 	bne.w	8007a6e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007762:	3301      	adds	r3, #1
 8007764:	b2da      	uxtb	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007772:	2b03      	cmp	r3, #3
 8007774:	d903      	bls.n	800777e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	220d      	movs	r2, #13
 800777a:	701a      	strb	r2, [r3, #0]
      break;
 800777c:	e177      	b.n	8007a6e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	795b      	ldrb	r3, [r3, #5]
 8007782:	4619      	mov	r1, r3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 f9dd 	bl	8008b44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	791b      	ldrb	r3, [r3, #4]
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 f9d7 	bl	8008b44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	701a      	strb	r2, [r3, #0]
      break;
 80077a2:	e164      	b.n	8007a6e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80077a4:	2101      	movs	r1, #1
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fb02 	bl	8007db0 <USBH_SetAddress>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d132      	bne.n	800781c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80077b6:	2002      	movs	r0, #2
 80077b8:	f007 f8b8 	bl	800e92c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2203      	movs	r2, #3
 80077c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	7919      	ldrb	r1, [r3, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80077de:	b292      	uxth	r2, r2
 80077e0:	9202      	str	r2, [sp, #8]
 80077e2:	2200      	movs	r2, #0
 80077e4:	9201      	str	r2, [sp, #4]
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	4603      	mov	r3, r0
 80077ea:	2280      	movs	r2, #128	; 0x80
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f001 f959 	bl	8008aa4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	7959      	ldrb	r1, [r3, #5]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007806:	b292      	uxth	r2, r2
 8007808:	9202      	str	r2, [sp, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	9201      	str	r2, [sp, #4]
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	4603      	mov	r3, r0
 8007812:	2200      	movs	r2, #0
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 f945 	bl	8008aa4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800781a:	e12a      	b.n	8007a72 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	2b03      	cmp	r3, #3
 8007820:	f040 8127 	bne.w	8007a72 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	220d      	movs	r2, #13
 8007828:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	705a      	strb	r2, [r3, #1]
      break;
 8007830:	e11f      	b.n	8007a72 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007832:	2109      	movs	r1, #9
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fa37 	bl	8007ca8 <USBH_Get_CfgDesc>
 800783a:	4603      	mov	r3, r0
 800783c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d103      	bne.n	800784c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2204      	movs	r2, #4
 8007848:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800784a:	e114      	b.n	8007a76 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	2b03      	cmp	r3, #3
 8007850:	f040 8111 	bne.w	8007a76 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800785a:	3301      	adds	r3, #1
 800785c:	b2da      	uxtb	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800786a:	2b03      	cmp	r3, #3
 800786c:	d903      	bls.n	8007876 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	220d      	movs	r2, #13
 8007872:	701a      	strb	r2, [r3, #0]
      break;
 8007874:	e0ff      	b.n	8007a76 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	795b      	ldrb	r3, [r3, #5]
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 f961 	bl	8008b44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	791b      	ldrb	r3, [r3, #4]
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f001 f95b 	bl	8008b44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	701a      	strb	r2, [r3, #0]
      break;
 800789a:	e0ec      	b.n	8007a76 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f9ff 	bl	8007ca8 <USBH_Get_CfgDesc>
 80078aa:	4603      	mov	r3, r0
 80078ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d103      	bne.n	80078bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2205      	movs	r2, #5
 80078b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078ba:	e0de      	b.n	8007a7a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	2b03      	cmp	r3, #3
 80078c0:	f040 80db 	bne.w	8007a7a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078ca:	3301      	adds	r3, #1
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d903      	bls.n	80078e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	220d      	movs	r2, #13
 80078e2:	701a      	strb	r2, [r3, #0]
      break;
 80078e4:	e0c9      	b.n	8007a7a <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	795b      	ldrb	r3, [r3, #5]
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 f929 	bl	8008b44 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	791b      	ldrb	r3, [r3, #4]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 f923 	bl	8008b44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]
      break;
 800790a:	e0b6      	b.n	8007a7a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007912:	2b00      	cmp	r3, #0
 8007914:	d036      	beq.n	8007984 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007922:	23ff      	movs	r3, #255	; 0xff
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f9e3 	bl	8007cf0 <USBH_Get_StringDesc>
 800792a:	4603      	mov	r3, r0
 800792c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d111      	bne.n	8007958 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2206      	movs	r2, #6
 8007938:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2205      	movs	r2, #5
 800793e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800794e:	2200      	movs	r2, #0
 8007950:	4619      	mov	r1, r3
 8007952:	f004 f823 	bl	800b99c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007956:	e092      	b.n	8007a7e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	2b03      	cmp	r3, #3
 800795c:	f040 808f 	bne.w	8007a7e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2206      	movs	r2, #6
 8007964:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2205      	movs	r2, #5
 800796a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800797a:	2200      	movs	r2, #0
 800797c:	4619      	mov	r1, r3
 800797e:	f004 f80d 	bl	800b99c <osMessagePut>
      break;
 8007982:	e07c      	b.n	8007a7e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2206      	movs	r2, #6
 8007988:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2205      	movs	r2, #5
 800798e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800799e:	2200      	movs	r2, #0
 80079a0:	4619      	mov	r1, r3
 80079a2:	f003 fffb 	bl	800b99c <osMessagePut>
      break;
 80079a6:	e06a      	b.n	8007a7e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d027      	beq.n	8007a02 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079be:	23ff      	movs	r3, #255	; 0xff
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f995 	bl	8007cf0 <USBH_Get_StringDesc>
 80079c6:	4603      	mov	r3, r0
 80079c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2207      	movs	r2, #7
 80079d4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079d6:	e054      	b.n	8007a82 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d151      	bne.n	8007a82 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2207      	movs	r2, #7
 80079e2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2205      	movs	r2, #5
 80079e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80079f8:	2200      	movs	r2, #0
 80079fa:	4619      	mov	r1, r3
 80079fc:	f003 ffce 	bl	800b99c <osMessagePut>
      break;
 8007a00:	e03f      	b.n	8007a82 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2207      	movs	r2, #7
 8007a06:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2205      	movs	r2, #5
 8007a0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	4619      	mov	r1, r3
 8007a20:	f003 ffbc 	bl	800b99c <osMessagePut>
      break;
 8007a24:	e02d      	b.n	8007a82 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d017      	beq.n	8007a60 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a3c:	23ff      	movs	r3, #255	; 0xff
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f956 	bl	8007cf0 <USBH_Get_StringDesc>
 8007a44:	4603      	mov	r3, r0
 8007a46:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d102      	bne.n	8007a54 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007a52:	e018      	b.n	8007a86 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d115      	bne.n	8007a86 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a5e:	e012      	b.n	8007a86 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73fb      	strb	r3, [r7, #15]
      break;
 8007a64:	e00f      	b.n	8007a86 <USBH_HandleEnum+0x44a>

    default:
      break;
 8007a66:	bf00      	nop
 8007a68:	e00e      	b.n	8007a88 <USBH_HandleEnum+0x44c>
      break;
 8007a6a:	bf00      	nop
 8007a6c:	e00c      	b.n	8007a88 <USBH_HandleEnum+0x44c>
      break;
 8007a6e:	bf00      	nop
 8007a70:	e00a      	b.n	8007a88 <USBH_HandleEnum+0x44c>
      break;
 8007a72:	bf00      	nop
 8007a74:	e008      	b.n	8007a88 <USBH_HandleEnum+0x44c>
      break;
 8007a76:	bf00      	nop
 8007a78:	e006      	b.n	8007a88 <USBH_HandleEnum+0x44c>
      break;
 8007a7a:	bf00      	nop
 8007a7c:	e004      	b.n	8007a88 <USBH_HandleEnum+0x44c>
      break;
 8007a7e:	bf00      	nop
 8007a80:	e002      	b.n	8007a88 <USBH_HandleEnum+0x44c>
      break;
 8007a82:	bf00      	nop
 8007a84:	e000      	b.n	8007a88 <USBH_HandleEnum+0x44c>
      break;
 8007a86:	bf00      	nop
  }
  return Status;
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop

08007a94 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f804 	bl	8007ad6 <USBH_HandleSof>
}
 8007ace:	bf00      	nop
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b0b      	cmp	r3, #11
 8007ae6:	d10a      	bne.n	8007afe <USBH_HandleSof+0x28>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d005      	beq.n	8007afe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	4798      	blx	r3
  }
}
 8007afe:	bf00      	nop
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	f003 ff35 	bl	800b99c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007b32:	bf00      	nop
}
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007b4a:	bf00      	nop
}
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b082      	sub	sp, #8
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	f003 ff05 	bl	800b99c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f006 fd3c 	bl	800e63a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	791b      	ldrb	r3, [r3, #4]
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 ffbb 	bl	8008b44 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	795b      	ldrb	r3, [r3, #5]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 ffb5 	bl	8008b44 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007bee:	2200      	movs	r2, #0
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	f003 fed3 	bl	800b99c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8007c0e:	f107 030c 	add.w	r3, r7, #12
 8007c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c16:	4618      	mov	r0, r3
 8007c18:	f003 ff00 	bl	800ba1c <osMessageGet>
    if (event.status == osEventMessage)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b10      	cmp	r3, #16
 8007c20:	d1f2      	bne.n	8007c08 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7ff fa9e 	bl	8007164 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007c28:	e7ee      	b.n	8007c08 <USBH_Process_OS+0x8>

08007c2a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c46:	2200      	movs	r2, #0
 8007c48:	4619      	mov	r1, r3
 8007c4a:	f003 fea7 	bl	800b99c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	4613      	mov	r3, r2
 8007c72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c76:	2100      	movs	r1, #0
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f864 	bl	8007d46 <USBH_GetDescriptor>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10a      	bne.n	8007c9e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c94:	78fa      	ldrb	r2, [r7, #3]
 8007c96:	b292      	uxth	r2, r2
 8007c98:	4619      	mov	r1, r3
 8007c9a:	f000 f918 	bl	8007ece <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af02      	add	r7, sp, #8
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	331c      	adds	r3, #28
 8007cb8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007cba:	887b      	ldrh	r3, [r7, #2]
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f83d 	bl	8007d46 <USBH_GetDescriptor>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d107      	bne.n	8007ce6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007cd6:	887b      	ldrh	r3, [r7, #2]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	68b9      	ldr	r1, [r7, #8]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f987 	bl	8007ff0 <USBH_ParseCfgDesc>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b088      	sub	sp, #32
 8007cf4:	af02      	add	r7, sp, #8
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	607a      	str	r2, [r7, #4]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	72fb      	strb	r3, [r7, #11]
 8007d00:	4613      	mov	r3, r2
 8007d02:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007d04:	7afb      	ldrb	r3, [r7, #11]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d0c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007d14:	893b      	ldrh	r3, [r7, #8]
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 f812 	bl	8007d46 <USBH_GetDescriptor>
 8007d22:	4603      	mov	r3, r0
 8007d24:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007d26:	7dfb      	ldrb	r3, [r7, #23]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d107      	bne.n	8007d3c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d32:	893a      	ldrh	r2, [r7, #8]
 8007d34:	6879      	ldr	r1, [r7, #4]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fb24 	bl	8008384 <USBH_ParseStringDesc>
  }

  return status;
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	607b      	str	r3, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	72fb      	strb	r3, [r7, #11]
 8007d54:	4613      	mov	r3, r2
 8007d56:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	789b      	ldrb	r3, [r3, #2]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d11c      	bne.n	8007d9a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007d60:	7afb      	ldrb	r3, [r7, #11]
 8007d62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2206      	movs	r2, #6
 8007d70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	893a      	ldrh	r2, [r7, #8]
 8007d76:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007d78:	893b      	ldrh	r3, [r7, #8]
 8007d7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d82:	d104      	bne.n	8007d8e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f240 4209 	movw	r2, #1033	; 0x409
 8007d8a:	829a      	strh	r2, [r3, #20]
 8007d8c:	e002      	b.n	8007d94 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8b3a      	ldrh	r2, [r7, #24]
 8007d98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007d9a:	8b3b      	ldrh	r3, [r7, #24]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 fb3d 	bl	8008420 <USBH_CtlReq>
 8007da6:	4603      	mov	r3, r0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	789b      	ldrb	r3, [r3, #2]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d10f      	bne.n	8007de4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2205      	movs	r2, #5
 8007dce:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007dd0:	78fb      	ldrb	r3, [r7, #3]
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007de4:	2200      	movs	r2, #0
 8007de6:	2100      	movs	r1, #0
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fb19 	bl	8008420 <USBH_CtlReq>
 8007dee:	4603      	mov	r3, r0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	789b      	ldrb	r3, [r3, #2]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d10e      	bne.n	8007e2a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2209      	movs	r2, #9
 8007e16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	887a      	ldrh	r2, [r7, #2]
 8007e1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 faf6 	bl	8008420 <USBH_CtlReq>
 8007e34:	4603      	mov	r3, r0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b082      	sub	sp, #8
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	460b      	mov	r3, r1
 8007e48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	789b      	ldrb	r3, [r3, #2]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d10f      	bne.n	8007e72 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2203      	movs	r2, #3
 8007e5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e72:	2200      	movs	r2, #0
 8007e74:	2100      	movs	r1, #0
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fad2 	bl	8008420 <USBH_CtlReq>
 8007e7c:	4603      	mov	r3, r0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	789b      	ldrb	r3, [r3, #2]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d10f      	bne.n	8007eba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 faae 	bl	8008420 <USBH_CtlReq>
 8007ec4:	4603      	mov	r3, r0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b085      	sub	sp, #20
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	60f8      	str	r0, [r7, #12]
 8007ed6:	60b9      	str	r1, [r7, #8]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	781a      	ldrb	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	785a      	ldrb	r2, [r3, #1]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	3302      	adds	r3, #2
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	3303      	adds	r3, #3
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	021b      	lsls	r3, r3, #8
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	4313      	orrs	r3, r2
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	791a      	ldrb	r2, [r3, #4]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	795a      	ldrb	r2, [r3, #5]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	799a      	ldrb	r2, [r3, #6]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	79da      	ldrb	r2, [r3, #7]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	79db      	ldrb	r3, [r3, #7]
 8007f2c:	2b20      	cmp	r3, #32
 8007f2e:	dc11      	bgt.n	8007f54 <USBH_ParseDevDesc+0x86>
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	db16      	blt.n	8007f62 <USBH_ParseDevDesc+0x94>
 8007f34:	3b08      	subs	r3, #8
 8007f36:	2201      	movs	r2, #1
 8007f38:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	bf14      	ite	ne
 8007f48:	2301      	movne	r3, #1
 8007f4a:	2300      	moveq	r3, #0
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d102      	bne.n	8007f58 <USBH_ParseDevDesc+0x8a>
 8007f52:	e006      	b.n	8007f62 <USBH_ParseDevDesc+0x94>
 8007f54:	2b40      	cmp	r3, #64	; 0x40
 8007f56:	d104      	bne.n	8007f62 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	79da      	ldrb	r2, [r3, #7]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	71da      	strb	r2, [r3, #7]
      break;
 8007f60:	e003      	b.n	8007f6a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2240      	movs	r2, #64	; 0x40
 8007f66:	71da      	strb	r2, [r3, #7]
      break;
 8007f68:	bf00      	nop
  }

  if (length > 8U)
 8007f6a:	88fb      	ldrh	r3, [r7, #6]
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	d939      	bls.n	8007fe4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	3308      	adds	r3, #8
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	3309      	adds	r3, #9
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	021b      	lsls	r3, r3, #8
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	4313      	orrs	r3, r2
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	330a      	adds	r3, #10
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	330b      	adds	r3, #11
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	021b      	lsls	r3, r3, #8
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	330c      	adds	r3, #12
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	330d      	adds	r3, #13
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	021b      	lsls	r3, r3, #8
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	7b9a      	ldrb	r2, [r3, #14]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	7bda      	ldrb	r2, [r3, #15]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	7c1a      	ldrb	r2, [r3, #16]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	7c5a      	ldrb	r2, [r3, #17]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	745a      	strb	r2, [r3, #17]
  }
}
 8007fe4:	bf00      	nop
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08c      	sub	sp, #48	; 0x30
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008004:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	781a      	ldrb	r2, [r3, #0]
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	785a      	ldrb	r2, [r3, #1]
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	3302      	adds	r3, #2
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	b29a      	uxth	r2, r3
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	3303      	adds	r3, #3
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	b29b      	uxth	r3, r3
 8008040:	021b      	lsls	r3, r3, #8
 8008042:	b29b      	uxth	r3, r3
 8008044:	4313      	orrs	r3, r2
 8008046:	b29b      	uxth	r3, r3
 8008048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800804c:	bf28      	it	cs
 800804e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008052:	b29a      	uxth	r2, r3
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	791a      	ldrb	r2, [r3, #4]
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	795a      	ldrb	r2, [r3, #5]
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	799a      	ldrb	r2, [r3, #6]
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	79da      	ldrb	r2, [r3, #7]
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	7a1a      	ldrb	r2, [r3, #8]
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b09      	cmp	r3, #9
 8008086:	d002      	beq.n	800808e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	2209      	movs	r2, #9
 800808c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800808e:	88fb      	ldrh	r3, [r7, #6]
 8008090:	2b09      	cmp	r3, #9
 8008092:	f240 809d 	bls.w	80081d0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008096:	2309      	movs	r3, #9
 8008098:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800809a:	2300      	movs	r3, #0
 800809c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800809e:	e081      	b.n	80081a4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080a0:	f107 0316 	add.w	r3, r7, #22
 80080a4:	4619      	mov	r1, r3
 80080a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080a8:	f000 f99f 	bl	80083ea <USBH_GetNextDesc>
 80080ac:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b0:	785b      	ldrb	r3, [r3, #1]
 80080b2:	2b04      	cmp	r3, #4
 80080b4:	d176      	bne.n	80081a4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	2b09      	cmp	r3, #9
 80080bc:	d002      	beq.n	80080c4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80080be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c0:	2209      	movs	r2, #9
 80080c2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80080c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080c8:	221a      	movs	r2, #26
 80080ca:	fb02 f303 	mul.w	r3, r2, r3
 80080ce:	3308      	adds	r3, #8
 80080d0:	6a3a      	ldr	r2, [r7, #32]
 80080d2:	4413      	add	r3, r2
 80080d4:	3302      	adds	r3, #2
 80080d6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80080d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080da:	69f8      	ldr	r0, [r7, #28]
 80080dc:	f000 f87e 	bl	80081dc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080ea:	e043      	b.n	8008174 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080ec:	f107 0316 	add.w	r3, r7, #22
 80080f0:	4619      	mov	r1, r3
 80080f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080f4:	f000 f979 	bl	80083ea <USBH_GetNextDesc>
 80080f8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	785b      	ldrb	r3, [r3, #1]
 80080fe:	2b05      	cmp	r3, #5
 8008100:	d138      	bne.n	8008174 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	795b      	ldrb	r3, [r3, #5]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d10f      	bne.n	800812a <USBH_ParseCfgDesc+0x13a>
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	799b      	ldrb	r3, [r3, #6]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d10b      	bne.n	800812a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	79db      	ldrb	r3, [r3, #7]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10f      	bne.n	800813a <USBH_ParseCfgDesc+0x14a>
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	2b09      	cmp	r3, #9
 8008120:	d00b      	beq.n	800813a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008124:	2209      	movs	r2, #9
 8008126:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008128:	e007      	b.n	800813a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	2b07      	cmp	r3, #7
 8008130:	d004      	beq.n	800813c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	2207      	movs	r2, #7
 8008136:	701a      	strb	r2, [r3, #0]
 8008138:	e000      	b.n	800813c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800813a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800813c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008140:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008144:	3201      	adds	r2, #1
 8008146:	00d2      	lsls	r2, r2, #3
 8008148:	211a      	movs	r1, #26
 800814a:	fb01 f303 	mul.w	r3, r1, r3
 800814e:	4413      	add	r3, r2
 8008150:	3308      	adds	r3, #8
 8008152:	6a3a      	ldr	r2, [r7, #32]
 8008154:	4413      	add	r3, r2
 8008156:	3304      	adds	r3, #4
 8008158:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800815a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800815c:	69b9      	ldr	r1, [r7, #24]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 f86b 	bl	800823a <USBH_ParseEPDesc>
 8008164:	4603      	mov	r3, r0
 8008166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800816a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800816e:	3301      	adds	r3, #1
 8008170:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	791b      	ldrb	r3, [r3, #4]
 8008178:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800817c:	429a      	cmp	r2, r3
 800817e:	d204      	bcs.n	800818a <USBH_ParseCfgDesc+0x19a>
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	885a      	ldrh	r2, [r3, #2]
 8008184:	8afb      	ldrh	r3, [r7, #22]
 8008186:	429a      	cmp	r2, r3
 8008188:	d8b0      	bhi.n	80080ec <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	791b      	ldrb	r3, [r3, #4]
 800818e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008192:	429a      	cmp	r2, r3
 8008194:	d201      	bcs.n	800819a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008196:	2303      	movs	r3, #3
 8008198:	e01c      	b.n	80081d4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800819a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800819e:	3301      	adds	r3, #1
 80081a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80081a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d805      	bhi.n	80081b8 <USBH_ParseCfgDesc+0x1c8>
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	885a      	ldrh	r2, [r3, #2]
 80081b0:	8afb      	ldrh	r3, [r7, #22]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	f63f af74 	bhi.w	80080a0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	791b      	ldrb	r3, [r3, #4]
 80081bc:	2b02      	cmp	r3, #2
 80081be:	bf28      	it	cs
 80081c0:	2302      	movcs	r3, #2
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d201      	bcs.n	80081d0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e001      	b.n	80081d4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80081d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3730      	adds	r7, #48	; 0x30
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	781a      	ldrb	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	785a      	ldrb	r2, [r3, #1]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	789a      	ldrb	r2, [r3, #2]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	78da      	ldrb	r2, [r3, #3]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	791a      	ldrb	r2, [r3, #4]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	795a      	ldrb	r2, [r3, #5]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	799a      	ldrb	r2, [r3, #6]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	79da      	ldrb	r2, [r3, #7]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	7a1a      	ldrb	r2, [r3, #8]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	721a      	strb	r2, [r3, #8]
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800823a:	b480      	push	{r7}
 800823c:	b087      	sub	sp, #28
 800823e:	af00      	add	r7, sp, #0
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	60b9      	str	r1, [r7, #8]
 8008244:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	781a      	ldrb	r2, [r3, #0]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	785a      	ldrb	r2, [r3, #1]
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	789a      	ldrb	r2, [r3, #2]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	78da      	ldrb	r2, [r3, #3]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	3304      	adds	r3, #4
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	b29a      	uxth	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	3305      	adds	r3, #5
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	b29b      	uxth	r3, r3
 800827a:	021b      	lsls	r3, r3, #8
 800827c:	b29b      	uxth	r3, r3
 800827e:	4313      	orrs	r3, r2
 8008280:	b29a      	uxth	r2, r3
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	799a      	ldrb	r2, [r3, #6]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	889b      	ldrh	r3, [r3, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d102      	bne.n	800829c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008296:	2303      	movs	r3, #3
 8008298:	75fb      	strb	r3, [r7, #23]
 800829a:	e033      	b.n	8008304 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	889b      	ldrh	r3, [r3, #4]
 80082a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80082a4:	f023 0307 	bic.w	r3, r3, #7
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	889b      	ldrh	r3, [r3, #4]
 80082b2:	b21a      	sxth	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3304      	adds	r3, #4
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	b299      	uxth	r1, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	3305      	adds	r3, #5
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	021b      	lsls	r3, r3, #8
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	430b      	orrs	r3, r1
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d110      	bne.n	80082f6 <USBH_ParseEPDesc+0xbc>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	3304      	adds	r3, #4
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	b299      	uxth	r1, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3305      	adds	r3, #5
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	021b      	lsls	r3, r3, #8
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	430b      	orrs	r3, r1
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	b21b      	sxth	r3, r3
 80082ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082f2:	b21b      	sxth	r3, r3
 80082f4:	e001      	b.n	80082fa <USBH_ParseEPDesc+0xc0>
 80082f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082fa:	4313      	orrs	r3, r2
 80082fc:	b21b      	sxth	r3, r3
 80082fe:	b29a      	uxth	r2, r3
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800830a:	2b00      	cmp	r3, #0
 800830c:	d116      	bne.n	800833c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	78db      	ldrb	r3, [r3, #3]
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	2b01      	cmp	r3, #1
 8008318:	d005      	beq.n	8008326 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	78db      	ldrb	r3, [r3, #3]
 800831e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008322:	2b03      	cmp	r3, #3
 8008324:	d127      	bne.n	8008376 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	799b      	ldrb	r3, [r3, #6]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <USBH_ParseEPDesc+0xfc>
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	799b      	ldrb	r3, [r3, #6]
 8008332:	2b10      	cmp	r3, #16
 8008334:	d91f      	bls.n	8008376 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008336:	2303      	movs	r3, #3
 8008338:	75fb      	strb	r3, [r7, #23]
 800833a:	e01c      	b.n	8008376 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	78db      	ldrb	r3, [r3, #3]
 8008340:	f003 0303 	and.w	r3, r3, #3
 8008344:	2b01      	cmp	r3, #1
 8008346:	d10a      	bne.n	800835e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	799b      	ldrb	r3, [r3, #6]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d003      	beq.n	8008358 <USBH_ParseEPDesc+0x11e>
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	799b      	ldrb	r3, [r3, #6]
 8008354:	2b10      	cmp	r3, #16
 8008356:	d90e      	bls.n	8008376 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008358:	2303      	movs	r3, #3
 800835a:	75fb      	strb	r3, [r7, #23]
 800835c:	e00b      	b.n	8008376 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	78db      	ldrb	r3, [r3, #3]
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	2b03      	cmp	r3, #3
 8008368:	d105      	bne.n	8008376 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	799b      	ldrb	r3, [r3, #6]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008372:	2303      	movs	r3, #3
 8008374:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008376:	7dfb      	ldrb	r3, [r7, #23]
}
 8008378:	4618      	mov	r0, r3
 800837a:	371c      	adds	r7, #28
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008384:	b480      	push	{r7}
 8008386:	b087      	sub	sp, #28
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	4613      	mov	r3, r2
 8008390:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	3301      	adds	r3, #1
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2b03      	cmp	r3, #3
 800839a:	d120      	bne.n	80083de <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	1e9a      	subs	r2, r3, #2
 80083a2:	88fb      	ldrh	r3, [r7, #6]
 80083a4:	4293      	cmp	r3, r2
 80083a6:	bf28      	it	cs
 80083a8:	4613      	movcs	r3, r2
 80083aa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3302      	adds	r3, #2
 80083b0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80083b2:	2300      	movs	r3, #0
 80083b4:	82fb      	strh	r3, [r7, #22]
 80083b6:	e00b      	b.n	80083d0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80083b8:	8afb      	ldrh	r3, [r7, #22]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	4413      	add	r3, r2
 80083be:	781a      	ldrb	r2, [r3, #0]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	3301      	adds	r3, #1
 80083c8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80083ca:	8afb      	ldrh	r3, [r7, #22]
 80083cc:	3302      	adds	r3, #2
 80083ce:	82fb      	strh	r3, [r7, #22]
 80083d0:	8afa      	ldrh	r2, [r7, #22]
 80083d2:	8abb      	ldrh	r3, [r7, #20]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d3ef      	bcc.n	80083b8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2200      	movs	r2, #0
 80083dc:	701a      	strb	r2, [r3, #0]
  }
}
 80083de:	bf00      	nop
 80083e0:	371c      	adds	r7, #28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b085      	sub	sp, #20
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	881a      	ldrh	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	4413      	add	r3, r2
 8008400:	b29a      	uxth	r2, r3
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4413      	add	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008412:	68fb      	ldr	r3, [r7, #12]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	4613      	mov	r3, r2
 800842c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800842e:	2301      	movs	r3, #1
 8008430:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	789b      	ldrb	r3, [r3, #2]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d002      	beq.n	8008440 <USBH_CtlReq+0x20>
 800843a:	2b02      	cmp	r3, #2
 800843c:	d01d      	beq.n	800847a <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800843e:	e043      	b.n	80084c8 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	88fa      	ldrh	r2, [r7, #6]
 800844a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2201      	movs	r2, #1
 8008450:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2202      	movs	r2, #2
 8008456:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008458:	2301      	movs	r3, #1
 800845a:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2203      	movs	r2, #3
 8008460:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008470:	2200      	movs	r2, #0
 8008472:	4619      	mov	r1, r3
 8008474:	f003 fa92 	bl	800b99c <osMessagePut>
      break;
 8008478:	e026      	b.n	80084c8 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f000 f82a 	bl	80084d4 <USBH_HandleControl>
 8008480:	4603      	mov	r3, r0
 8008482:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008484:	7dfb      	ldrb	r3, [r7, #23]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <USBH_CtlReq+0x70>
 800848a:	7dfb      	ldrb	r3, [r7, #23]
 800848c:	2b03      	cmp	r3, #3
 800848e:	d106      	bne.n	800849e <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2201      	movs	r2, #1
 8008494:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	761a      	strb	r2, [r3, #24]
 800849c:	e005      	b.n	80084aa <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800849e:	7dfb      	ldrb	r3, [r7, #23]
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d102      	bne.n	80084aa <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2201      	movs	r2, #1
 80084a8:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2203      	movs	r2, #3
 80084ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084be:	2200      	movs	r2, #0
 80084c0:	4619      	mov	r1, r3
 80084c2:	f003 fa6b 	bl	800b99c <osMessagePut>
      break;
 80084c6:	bf00      	nop
  }
  return status;
 80084c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
	...

080084d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af02      	add	r7, sp, #8
 80084da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80084dc:	2301      	movs	r3, #1
 80084de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	7e1b      	ldrb	r3, [r3, #24]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	2b0a      	cmp	r3, #10
 80084ec:	f200 8229 	bhi.w	8008942 <USBH_HandleControl+0x46e>
 80084f0:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <USBH_HandleControl+0x24>)
 80084f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f6:	bf00      	nop
 80084f8:	08008525 	.word	0x08008525
 80084fc:	0800853f 	.word	0x0800853f
 8008500:	080085e1 	.word	0x080085e1
 8008504:	08008607 	.word	0x08008607
 8008508:	08008693 	.word	0x08008693
 800850c:	080086bd 	.word	0x080086bd
 8008510:	0800877f 	.word	0x0800877f
 8008514:	080087a1 	.word	0x080087a1
 8008518:	08008833 	.word	0x08008833
 800851c:	08008859 	.word	0x08008859
 8008520:	080088eb 	.word	0x080088eb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f103 0110 	add.w	r1, r3, #16
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	795b      	ldrb	r3, [r3, #5]
 800852e:	461a      	mov	r2, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fa17 	bl	8008964 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2202      	movs	r2, #2
 800853a:	761a      	strb	r2, [r3, #24]
      break;
 800853c:	e20c      	b.n	8008958 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	795b      	ldrb	r3, [r3, #5]
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f006 f967 	bl	800e818 <USBH_LL_GetURBState>
 800854a:	4603      	mov	r3, r0
 800854c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800854e:	7bbb      	ldrb	r3, [r7, #14]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d12c      	bne.n	80085ae <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	7c1b      	ldrb	r3, [r3, #16]
 8008558:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800855c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	8adb      	ldrh	r3, [r3, #22]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00a      	beq.n	800857c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008566:	7b7b      	ldrb	r3, [r7, #13]
 8008568:	2b80      	cmp	r3, #128	; 0x80
 800856a:	d103      	bne.n	8008574 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2203      	movs	r2, #3
 8008570:	761a      	strb	r2, [r3, #24]
 8008572:	e00d      	b.n	8008590 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2205      	movs	r2, #5
 8008578:	761a      	strb	r2, [r3, #24]
 800857a:	e009      	b.n	8008590 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800857c:	7b7b      	ldrb	r3, [r7, #13]
 800857e:	2b80      	cmp	r3, #128	; 0x80
 8008580:	d103      	bne.n	800858a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2209      	movs	r2, #9
 8008586:	761a      	strb	r2, [r3, #24]
 8008588:	e002      	b.n	8008590 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2207      	movs	r2, #7
 800858e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2203      	movs	r2, #3
 8008594:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085a4:	2200      	movs	r2, #0
 80085a6:	4619      	mov	r1, r3
 80085a8:	f003 f9f8 	bl	800b99c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085ac:	e1cb      	b.n	8008946 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	d003      	beq.n	80085bc <USBH_HandleControl+0xe8>
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	f040 81c5 	bne.w	8008946 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	220b      	movs	r2, #11
 80085c0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2203      	movs	r2, #3
 80085c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085d6:	2200      	movs	r2, #0
 80085d8:	4619      	mov	r1, r3
 80085da:	f003 f9df 	bl	800b99c <osMessagePut>
      break;
 80085de:	e1b2      	b.n	8008946 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6899      	ldr	r1, [r3, #8]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	899a      	ldrh	r2, [r3, #12]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	791b      	ldrb	r3, [r3, #4]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f9f2 	bl	80089e2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2204      	movs	r2, #4
 8008602:	761a      	strb	r2, [r3, #24]
      break;
 8008604:	e1a8      	b.n	8008958 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	791b      	ldrb	r3, [r3, #4]
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f006 f903 	bl	800e818 <USBH_LL_GetURBState>
 8008612:	4603      	mov	r3, r0
 8008614:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d110      	bne.n	800863e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2209      	movs	r2, #9
 8008620:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2203      	movs	r2, #3
 8008626:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008636:	2200      	movs	r2, #0
 8008638:	4619      	mov	r1, r3
 800863a:	f003 f9af 	bl	800b99c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	2b05      	cmp	r3, #5
 8008642:	d110      	bne.n	8008666 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008644:	2303      	movs	r3, #3
 8008646:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2203      	movs	r2, #3
 800864c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800865c:	2200      	movs	r2, #0
 800865e:	4619      	mov	r1, r3
 8008660:	f003 f99c 	bl	800b99c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008664:	e171      	b.n	800894a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8008666:	7bbb      	ldrb	r3, [r7, #14]
 8008668:	2b04      	cmp	r3, #4
 800866a:	f040 816e 	bne.w	800894a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	220b      	movs	r2, #11
 8008672:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2203      	movs	r2, #3
 8008678:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008688:	2200      	movs	r2, #0
 800868a:	4619      	mov	r1, r3
 800868c:	f003 f986 	bl	800b99c <osMessagePut>
      break;
 8008690:	e15b      	b.n	800894a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6899      	ldr	r1, [r3, #8]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	899a      	ldrh	r2, [r3, #12]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	795b      	ldrb	r3, [r3, #5]
 800869e:	2001      	movs	r0, #1
 80086a0:	9000      	str	r0, [sp, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f978 	bl	8008998 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2206      	movs	r2, #6
 80086b8:	761a      	strb	r2, [r3, #24]
      break;
 80086ba:	e14d      	b.n	8008958 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	795b      	ldrb	r3, [r3, #5]
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f006 f8a8 	bl	800e818 <USBH_LL_GetURBState>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d111      	bne.n	80086f6 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2207      	movs	r2, #7
 80086d6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2203      	movs	r2, #3
 80086dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086ec:	2200      	movs	r2, #0
 80086ee:	4619      	mov	r1, r3
 80086f0:	f003 f954 	bl	800b99c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086f4:	e12b      	b.n	800894e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b05      	cmp	r3, #5
 80086fa:	d113      	bne.n	8008724 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	220c      	movs	r2, #12
 8008700:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008702:	2303      	movs	r3, #3
 8008704:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2203      	movs	r2, #3
 800870a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800871a:	2200      	movs	r2, #0
 800871c:	4619      	mov	r1, r3
 800871e:	f003 f93d 	bl	800b99c <osMessagePut>
      break;
 8008722:	e114      	b.n	800894e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008724:	7bbb      	ldrb	r3, [r7, #14]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d111      	bne.n	800874e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2205      	movs	r2, #5
 800872e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2203      	movs	r2, #3
 8008734:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008744:	2200      	movs	r2, #0
 8008746:	4619      	mov	r1, r3
 8008748:	f003 f928 	bl	800b99c <osMessagePut>
      break;
 800874c:	e0ff      	b.n	800894e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	2b04      	cmp	r3, #4
 8008752:	f040 80fc 	bne.w	800894e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	220b      	movs	r2, #11
 800875a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800875c:	2302      	movs	r3, #2
 800875e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2203      	movs	r2, #3
 8008764:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008774:	2200      	movs	r2, #0
 8008776:	4619      	mov	r1, r3
 8008778:	f003 f910 	bl	800b99c <osMessagePut>
      break;
 800877c:	e0e7      	b.n	800894e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	791b      	ldrb	r3, [r3, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	2100      	movs	r1, #0
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f92b 	bl	80089e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008792:	b29a      	uxth	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2208      	movs	r2, #8
 800879c:	761a      	strb	r2, [r3, #24]

      break;
 800879e:	e0db      	b.n	8008958 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	791b      	ldrb	r3, [r3, #4]
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f006 f836 	bl	800e818 <USBH_LL_GetURBState>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80087b0:	7bbb      	ldrb	r3, [r7, #14]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d113      	bne.n	80087de <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	220d      	movs	r2, #13
 80087ba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2203      	movs	r2, #3
 80087c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80087d4:	2200      	movs	r2, #0
 80087d6:	4619      	mov	r1, r3
 80087d8:	f003 f8e0 	bl	800b99c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087dc:	e0b9      	b.n	8008952 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	d111      	bne.n	8008808 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	220b      	movs	r2, #11
 80087e8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2203      	movs	r2, #3
 80087ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80087fe:	2200      	movs	r2, #0
 8008800:	4619      	mov	r1, r3
 8008802:	f003 f8cb 	bl	800b99c <osMessagePut>
      break;
 8008806:	e0a4      	b.n	8008952 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008808:	7bbb      	ldrb	r3, [r7, #14]
 800880a:	2b05      	cmp	r3, #5
 800880c:	f040 80a1 	bne.w	8008952 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8008810:	2303      	movs	r3, #3
 8008812:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2203      	movs	r2, #3
 8008818:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008828:	2200      	movs	r2, #0
 800882a:	4619      	mov	r1, r3
 800882c:	f003 f8b6 	bl	800b99c <osMessagePut>
      break;
 8008830:	e08f      	b.n	8008952 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	795b      	ldrb	r3, [r3, #5]
 8008836:	2201      	movs	r2, #1
 8008838:	9200      	str	r2, [sp, #0]
 800883a:	2200      	movs	r2, #0
 800883c:	2100      	movs	r1, #0
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f8aa 	bl	8008998 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800884a:	b29a      	uxth	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	220a      	movs	r2, #10
 8008854:	761a      	strb	r2, [r3, #24]
      break;
 8008856:	e07f      	b.n	8008958 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	795b      	ldrb	r3, [r3, #5]
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f005 ffda 	bl	800e818 <USBH_LL_GetURBState>
 8008864:	4603      	mov	r3, r0
 8008866:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d113      	bne.n	8008896 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	220d      	movs	r2, #13
 8008876:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2203      	movs	r2, #3
 800887c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800888c:	2200      	movs	r2, #0
 800888e:	4619      	mov	r1, r3
 8008890:	f003 f884 	bl	800b99c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008894:	e05f      	b.n	8008956 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008896:	7bbb      	ldrb	r3, [r7, #14]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d111      	bne.n	80088c0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2209      	movs	r2, #9
 80088a0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2203      	movs	r2, #3
 80088a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80088b6:	2200      	movs	r2, #0
 80088b8:	4619      	mov	r1, r3
 80088ba:	f003 f86f 	bl	800b99c <osMessagePut>
      break;
 80088be:	e04a      	b.n	8008956 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	d147      	bne.n	8008956 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	220b      	movs	r2, #11
 80088ca:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2203      	movs	r2, #3
 80088d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80088e0:	2200      	movs	r2, #0
 80088e2:	4619      	mov	r1, r3
 80088e4:	f003 f85a 	bl	800b99c <osMessagePut>
      break;
 80088e8:	e035      	b.n	8008956 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	7e5b      	ldrb	r3, [r3, #25]
 80088ee:	3301      	adds	r3, #1
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	765a      	strb	r2, [r3, #25]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	7e5b      	ldrb	r3, [r3, #25]
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d806      	bhi.n	800890c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800890a:	e025      	b.n	8008958 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008912:	2106      	movs	r1, #6
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	795b      	ldrb	r3, [r3, #5]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f90d 	bl	8008b44 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	791b      	ldrb	r3, [r3, #4]
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f907 	bl	8008b44 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800893c:	2302      	movs	r3, #2
 800893e:	73fb      	strb	r3, [r7, #15]
      break;
 8008940:	e00a      	b.n	8008958 <USBH_HandleControl+0x484>

    default:
      break;
 8008942:	bf00      	nop
 8008944:	e008      	b.n	8008958 <USBH_HandleControl+0x484>
      break;
 8008946:	bf00      	nop
 8008948:	e006      	b.n	8008958 <USBH_HandleControl+0x484>
      break;
 800894a:	bf00      	nop
 800894c:	e004      	b.n	8008958 <USBH_HandleControl+0x484>
      break;
 800894e:	bf00      	nop
 8008950:	e002      	b.n	8008958 <USBH_HandleControl+0x484>
      break;
 8008952:	bf00      	nop
 8008954:	e000      	b.n	8008958 <USBH_HandleControl+0x484>
      break;
 8008956:	bf00      	nop
  }

  return status;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop

08008964 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b088      	sub	sp, #32
 8008968:	af04      	add	r7, sp, #16
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	4613      	mov	r3, r2
 8008970:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008972:	79f9      	ldrb	r1, [r7, #7]
 8008974:	2300      	movs	r3, #0
 8008976:	9303      	str	r3, [sp, #12]
 8008978:	2308      	movs	r3, #8
 800897a:	9302      	str	r3, [sp, #8]
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	9301      	str	r3, [sp, #4]
 8008980:	2300      	movs	r3, #0
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	2300      	movs	r3, #0
 8008986:	2200      	movs	r2, #0
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f005 ff14 	bl	800e7b6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b088      	sub	sp, #32
 800899c:	af04      	add	r7, sp, #16
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	4611      	mov	r1, r2
 80089a4:	461a      	mov	r2, r3
 80089a6:	460b      	mov	r3, r1
 80089a8:	80fb      	strh	r3, [r7, #6]
 80089aa:	4613      	mov	r3, r2
 80089ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089bc:	7979      	ldrb	r1, [r7, #5]
 80089be:	7e3b      	ldrb	r3, [r7, #24]
 80089c0:	9303      	str	r3, [sp, #12]
 80089c2:	88fb      	ldrh	r3, [r7, #6]
 80089c4:	9302      	str	r3, [sp, #8]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	9301      	str	r3, [sp, #4]
 80089ca:	2301      	movs	r3, #1
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	2300      	movs	r3, #0
 80089d0:	2200      	movs	r2, #0
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f005 feef 	bl	800e7b6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b088      	sub	sp, #32
 80089e6:	af04      	add	r7, sp, #16
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	4611      	mov	r1, r2
 80089ee:	461a      	mov	r2, r3
 80089f0:	460b      	mov	r3, r1
 80089f2:	80fb      	strh	r3, [r7, #6]
 80089f4:	4613      	mov	r3, r2
 80089f6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089f8:	7979      	ldrb	r1, [r7, #5]
 80089fa:	2300      	movs	r3, #0
 80089fc:	9303      	str	r3, [sp, #12]
 80089fe:	88fb      	ldrh	r3, [r7, #6]
 8008a00:	9302      	str	r3, [sp, #8]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	2301      	movs	r3, #1
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f005 fed1 	bl	800e7b6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a14:	2300      	movs	r3, #0

}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b088      	sub	sp, #32
 8008a22:	af04      	add	r7, sp, #16
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	4611      	mov	r1, r2
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	80fb      	strh	r3, [r7, #6]
 8008a30:	4613      	mov	r3, r2
 8008a32:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a42:	7979      	ldrb	r1, [r7, #5]
 8008a44:	7e3b      	ldrb	r3, [r7, #24]
 8008a46:	9303      	str	r3, [sp, #12]
 8008a48:	88fb      	ldrh	r3, [r7, #6]
 8008a4a:	9302      	str	r3, [sp, #8]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	9301      	str	r3, [sp, #4]
 8008a50:	2301      	movs	r3, #1
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	2302      	movs	r3, #2
 8008a56:	2200      	movs	r2, #0
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f005 feac 	bl	800e7b6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af04      	add	r7, sp, #16
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	4611      	mov	r1, r2
 8008a74:	461a      	mov	r2, r3
 8008a76:	460b      	mov	r3, r1
 8008a78:	80fb      	strh	r3, [r7, #6]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a7e:	7979      	ldrb	r1, [r7, #5]
 8008a80:	2300      	movs	r3, #0
 8008a82:	9303      	str	r3, [sp, #12]
 8008a84:	88fb      	ldrh	r3, [r7, #6]
 8008a86:	9302      	str	r3, [sp, #8]
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	9301      	str	r3, [sp, #4]
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	2302      	movs	r3, #2
 8008a92:	2201      	movs	r2, #1
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f005 fe8e 	bl	800e7b6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af04      	add	r7, sp, #16
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	4608      	mov	r0, r1
 8008aae:	4611      	mov	r1, r2
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	70fb      	strb	r3, [r7, #3]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	70bb      	strb	r3, [r7, #2]
 8008aba:	4613      	mov	r3, r2
 8008abc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008abe:	7878      	ldrb	r0, [r7, #1]
 8008ac0:	78ba      	ldrb	r2, [r7, #2]
 8008ac2:	78f9      	ldrb	r1, [r7, #3]
 8008ac4:	8b3b      	ldrh	r3, [r7, #24]
 8008ac6:	9302      	str	r3, [sp, #8]
 8008ac8:	7d3b      	ldrb	r3, [r7, #20]
 8008aca:	9301      	str	r3, [sp, #4]
 8008acc:	7c3b      	ldrb	r3, [r7, #16]
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f005 fe21 	bl	800e71a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b082      	sub	sp, #8
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	460b      	mov	r3, r1
 8008aec:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008aee:	78fb      	ldrb	r3, [r7, #3]
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f005 fe40 	bl	800e778 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f836 	bl	8008b80 <USBH_GetFreePipe>
 8008b14:	4603      	mov	r3, r0
 8008b16:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008b18:	89fb      	ldrh	r3, [r7, #14]
 8008b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d00a      	beq.n	8008b38 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008b22:	78fa      	ldrb	r2, [r7, #3]
 8008b24:	89fb      	ldrh	r3, [r7, #14]
 8008b26:	f003 030f 	and.w	r3, r3, #15
 8008b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	33e0      	adds	r3, #224	; 0xe0
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	440b      	add	r3, r1
 8008b36:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008b38:	89fb      	ldrh	r3, [r7, #14]
 8008b3a:	b2db      	uxtb	r3, r3
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	2b0f      	cmp	r3, #15
 8008b54:	d80d      	bhi.n	8008b72 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008b56:	78fb      	ldrb	r3, [r7, #3]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	33e0      	adds	r3, #224	; 0xe0
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4413      	add	r3, r2
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	78fb      	ldrb	r3, [r7, #3]
 8008b64:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008b68:	6879      	ldr	r1, [r7, #4]
 8008b6a:	33e0      	adds	r3, #224	; 0xe0
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	440b      	add	r3, r1
 8008b70:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73fb      	strb	r3, [r7, #15]
 8008b90:	e00f      	b.n	8008bb2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	33e0      	adds	r3, #224	; 0xe0
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d102      	bne.n	8008bac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	e007      	b.n	8008bbc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	73fb      	strb	r3, [r7, #15]
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	2b0f      	cmp	r3, #15
 8008bb6:	d9ec      	bls.n	8008b92 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3714      	adds	r7, #20
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008bd2:	79fb      	ldrb	r3, [r7, #7]
 8008bd4:	4a08      	ldr	r2, [pc, #32]	; (8008bf8 <disk_status+0x30>)
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	79fa      	ldrb	r2, [r7, #7]
 8008be0:	4905      	ldr	r1, [pc, #20]	; (8008bf8 <disk_status+0x30>)
 8008be2:	440a      	add	r2, r1
 8008be4:	7a12      	ldrb	r2, [r2, #8]
 8008be6:	4610      	mov	r0, r2
 8008be8:	4798      	blx	r3
 8008bea:	4603      	mov	r3, r0
 8008bec:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	2000251c 	.word	0x2000251c

08008bfc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	4a0d      	ldr	r2, [pc, #52]	; (8008c44 <disk_initialize+0x48>)
 8008c0e:	5cd3      	ldrb	r3, [r2, r3]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d111      	bne.n	8008c38 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008c14:	79fb      	ldrb	r3, [r7, #7]
 8008c16:	4a0b      	ldr	r2, [pc, #44]	; (8008c44 <disk_initialize+0x48>)
 8008c18:	2101      	movs	r1, #1
 8008c1a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008c1c:	79fb      	ldrb	r3, [r7, #7]
 8008c1e:	4a09      	ldr	r2, [pc, #36]	; (8008c44 <disk_initialize+0x48>)
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	79fa      	ldrb	r2, [r7, #7]
 8008c2a:	4906      	ldr	r1, [pc, #24]	; (8008c44 <disk_initialize+0x48>)
 8008c2c:	440a      	add	r2, r1
 8008c2e:	7a12      	ldrb	r2, [r2, #8]
 8008c30:	4610      	mov	r0, r2
 8008c32:	4798      	blx	r3
 8008c34:	4603      	mov	r3, r0
 8008c36:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	2000251c 	.word	0x2000251c

08008c48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008c48:	b590      	push	{r4, r7, lr}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
 8008c52:	603b      	str	r3, [r7, #0]
 8008c54:	4603      	mov	r3, r0
 8008c56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
 8008c5a:	4a0a      	ldr	r2, [pc, #40]	; (8008c84 <disk_read+0x3c>)
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	689c      	ldr	r4, [r3, #8]
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	4a07      	ldr	r2, [pc, #28]	; (8008c84 <disk_read+0x3c>)
 8008c68:	4413      	add	r3, r2
 8008c6a:	7a18      	ldrb	r0, [r3, #8]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	68b9      	ldr	r1, [r7, #8]
 8008c72:	47a0      	blx	r4
 8008c74:	4603      	mov	r3, r0
 8008c76:	75fb      	strb	r3, [r7, #23]
  return res;
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd90      	pop	{r4, r7, pc}
 8008c82:	bf00      	nop
 8008c84:	2000251c 	.word	0x2000251c

08008c88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008c88:	b590      	push	{r4, r7, lr}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60b9      	str	r1, [r7, #8]
 8008c90:	607a      	str	r2, [r7, #4]
 8008c92:	603b      	str	r3, [r7, #0]
 8008c94:	4603      	mov	r3, r0
 8008c96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
 8008c9a:	4a0a      	ldr	r2, [pc, #40]	; (8008cc4 <disk_write+0x3c>)
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	68dc      	ldr	r4, [r3, #12]
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
 8008ca6:	4a07      	ldr	r2, [pc, #28]	; (8008cc4 <disk_write+0x3c>)
 8008ca8:	4413      	add	r3, r2
 8008caa:	7a18      	ldrb	r0, [r3, #8]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	68b9      	ldr	r1, [r7, #8]
 8008cb2:	47a0      	blx	r4
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	371c      	adds	r7, #28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd90      	pop	{r4, r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	2000251c 	.word	0x2000251c

08008cc8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	603a      	str	r2, [r7, #0]
 8008cd2:	71fb      	strb	r3, [r7, #7]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008cd8:	79fb      	ldrb	r3, [r7, #7]
 8008cda:	4a09      	ldr	r2, [pc, #36]	; (8008d00 <disk_ioctl+0x38>)
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	79fa      	ldrb	r2, [r7, #7]
 8008ce6:	4906      	ldr	r1, [pc, #24]	; (8008d00 <disk_ioctl+0x38>)
 8008ce8:	440a      	add	r2, r1
 8008cea:	7a10      	ldrb	r0, [r2, #8]
 8008cec:	79b9      	ldrb	r1, [r7, #6]
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	4798      	blx	r3
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	73fb      	strb	r3, [r7, #15]
  return res;
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	2000251c 	.word	0x2000251c

08008d04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008d14:	89fb      	ldrh	r3, [r7, #14]
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	b21a      	sxth	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	b21b      	sxth	r3, r3
 8008d20:	4313      	orrs	r3, r2
 8008d22:	b21b      	sxth	r3, r3
 8008d24:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008d26:	89fb      	ldrh	r3, [r7, #14]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3303      	adds	r3, #3
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	021b      	lsls	r3, r3, #8
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	3202      	adds	r2, #2
 8008d4c:	7812      	ldrb	r2, [r2, #0]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	021b      	lsls	r3, r3, #8
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	3201      	adds	r2, #1
 8008d5a:	7812      	ldrb	r2, [r2, #0]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	021b      	lsls	r3, r3, #8
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	7812      	ldrb	r2, [r2, #0]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]
	return rv;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b083      	sub	sp, #12
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	460b      	mov	r3, r1
 8008d84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	887a      	ldrh	r2, [r7, #2]
 8008d8e:	b2d2      	uxtb	r2, r2
 8008d90:	701a      	strb	r2, [r3, #0]
 8008d92:	887b      	ldrh	r3, [r7, #2]
 8008d94:	0a1b      	lsrs	r3, r3, #8
 8008d96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	1c5a      	adds	r2, r3, #1
 8008d9c:	607a      	str	r2, [r7, #4]
 8008d9e:	887a      	ldrh	r2, [r7, #2]
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	701a      	strb	r2, [r3, #0]
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	1c5a      	adds	r2, r3, #1
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	b2d2      	uxtb	r2, r2
 8008dc4:	701a      	strb	r2, [r3, #0]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	0a1b      	lsrs	r3, r3, #8
 8008dca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	1c5a      	adds	r2, r3, #1
 8008dd0:	607a      	str	r2, [r7, #4]
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	b2d2      	uxtb	r2, r2
 8008dd6:	701a      	strb	r2, [r3, #0]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	0a1b      	lsrs	r3, r3, #8
 8008ddc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	607a      	str	r2, [r7, #4]
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	b2d2      	uxtb	r2, r2
 8008de8:	701a      	strb	r2, [r3, #0]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	0a1b      	lsrs	r3, r3, #8
 8008dee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	607a      	str	r2, [r7, #4]
 8008df6:	683a      	ldr	r2, [r7, #0]
 8008df8:	b2d2      	uxtb	r2, r2
 8008dfa:	701a      	strb	r2, [r3, #0]
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00d      	beq.n	8008e3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	1c53      	adds	r3, r2, #1
 8008e26:	613b      	str	r3, [r7, #16]
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	1c59      	adds	r1, r3, #1
 8008e2c:	6179      	str	r1, [r7, #20]
 8008e2e:	7812      	ldrb	r2, [r2, #0]
 8008e30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	607b      	str	r3, [r7, #4]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1f1      	bne.n	8008e22 <mem_cpy+0x1a>
	}
}
 8008e3e:	bf00      	nop
 8008e40:	371c      	adds	r7, #28
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008e4a:	b480      	push	{r7}
 8008e4c:	b087      	sub	sp, #28
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	1c5a      	adds	r2, r3, #1
 8008e5e:	617a      	str	r2, [r7, #20]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	b2d2      	uxtb	r2, r2
 8008e64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	607b      	str	r3, [r7, #4]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1f3      	bne.n	8008e5a <mem_set+0x10>
}
 8008e72:	bf00      	nop
 8008e74:	bf00      	nop
 8008e76:	371c      	adds	r7, #28
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008e80:	b480      	push	{r7}
 8008e82:	b089      	sub	sp, #36	; 0x24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	61fb      	str	r3, [r7, #28]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	1c5a      	adds	r2, r3, #1
 8008e9c:	61fa      	str	r2, [r7, #28]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	1c5a      	adds	r2, r3, #1
 8008ea6:	61ba      	str	r2, [r7, #24]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	1acb      	subs	r3, r1, r3
 8008eac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	607b      	str	r3, [r7, #4]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d002      	beq.n	8008ec0 <mem_cmp+0x40>
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d0eb      	beq.n	8008e98 <mem_cmp+0x18>

	return r;
 8008ec0:	697b      	ldr	r3, [r7, #20]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3724      	adds	r7, #36	; 0x24
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008ed8:	e002      	b.n	8008ee0 <chk_chr+0x12>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	3301      	adds	r3, #1
 8008ede:	607b      	str	r3, [r7, #4]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d005      	beq.n	8008ef4 <chk_chr+0x26>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	461a      	mov	r2, r3
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d1f2      	bne.n	8008eda <chk_chr+0xc>
	return *str;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d009      	beq.n	8008f26 <lock_fs+0x22>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f002 fb9d 	bl	800b656 <ff_req_grant>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <lock_fs+0x22>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e000      	b.n	8008f28 <lock_fs+0x24>
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00d      	beq.n	8008f5e <unlock_fs+0x2e>
 8008f42:	78fb      	ldrb	r3, [r7, #3]
 8008f44:	2b0c      	cmp	r3, #12
 8008f46:	d00a      	beq.n	8008f5e <unlock_fs+0x2e>
 8008f48:	78fb      	ldrb	r3, [r7, #3]
 8008f4a:	2b0b      	cmp	r3, #11
 8008f4c:	d007      	beq.n	8008f5e <unlock_fs+0x2e>
 8008f4e:	78fb      	ldrb	r3, [r7, #3]
 8008f50:	2b0f      	cmp	r3, #15
 8008f52:	d004      	beq.n	8008f5e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f002 fb91 	bl	800b680 <ff_rel_grant>
	}
}
 8008f5e:	bf00      	nop
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008f72:	2300      	movs	r3, #0
 8008f74:	60bb      	str	r3, [r7, #8]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	e029      	b.n	8008fd0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008f7c:	4a27      	ldr	r2, [pc, #156]	; (800901c <chk_lock+0xb4>)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	011b      	lsls	r3, r3, #4
 8008f82:	4413      	add	r3, r2
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d01d      	beq.n	8008fc6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f8a:	4a24      	ldr	r2, [pc, #144]	; (800901c <chk_lock+0xb4>)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	011b      	lsls	r3, r3, #4
 8008f90:	4413      	add	r3, r2
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d116      	bne.n	8008fca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008f9c:	4a1f      	ldr	r2, [pc, #124]	; (800901c <chk_lock+0xb4>)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	011b      	lsls	r3, r3, #4
 8008fa2:	4413      	add	r3, r2
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d10c      	bne.n	8008fca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fb0:	4a1a      	ldr	r2, [pc, #104]	; (800901c <chk_lock+0xb4>)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	011b      	lsls	r3, r3, #4
 8008fb6:	4413      	add	r3, r2
 8008fb8:	3308      	adds	r3, #8
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d102      	bne.n	8008fca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fc4:	e007      	b.n	8008fd6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	60fb      	str	r3, [r7, #12]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d9d2      	bls.n	8008f7c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d109      	bne.n	8008ff0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <chk_lock+0x80>
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d101      	bne.n	8008fec <chk_lock+0x84>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e010      	b.n	800900e <chk_lock+0xa6>
 8008fec:	2312      	movs	r3, #18
 8008fee:	e00e      	b.n	800900e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d108      	bne.n	8009008 <chk_lock+0xa0>
 8008ff6:	4a09      	ldr	r2, [pc, #36]	; (800901c <chk_lock+0xb4>)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	011b      	lsls	r3, r3, #4
 8008ffc:	4413      	add	r3, r2
 8008ffe:	330c      	adds	r3, #12
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009006:	d101      	bne.n	800900c <chk_lock+0xa4>
 8009008:	2310      	movs	r3, #16
 800900a:	e000      	b.n	800900e <chk_lock+0xa6>
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	200024fc 	.word	0x200024fc

08009020 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009026:	2300      	movs	r3, #0
 8009028:	607b      	str	r3, [r7, #4]
 800902a:	e002      	b.n	8009032 <enq_lock+0x12>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3301      	adds	r3, #1
 8009030:	607b      	str	r3, [r7, #4]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d806      	bhi.n	8009046 <enq_lock+0x26>
 8009038:	4a09      	ldr	r2, [pc, #36]	; (8009060 <enq_lock+0x40>)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	011b      	lsls	r3, r3, #4
 800903e:	4413      	add	r3, r2
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1f2      	bne.n	800902c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b02      	cmp	r3, #2
 800904a:	bf14      	ite	ne
 800904c:	2301      	movne	r3, #1
 800904e:	2300      	moveq	r3, #0
 8009050:	b2db      	uxtb	r3, r3
}
 8009052:	4618      	mov	r0, r3
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	200024fc 	.word	0x200024fc

08009064 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800906e:	2300      	movs	r3, #0
 8009070:	60fb      	str	r3, [r7, #12]
 8009072:	e01f      	b.n	80090b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009074:	4a41      	ldr	r2, [pc, #260]	; (800917c <inc_lock+0x118>)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	011b      	lsls	r3, r3, #4
 800907a:	4413      	add	r3, r2
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d113      	bne.n	80090ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009086:	4a3d      	ldr	r2, [pc, #244]	; (800917c <inc_lock+0x118>)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	4413      	add	r3, r2
 800908e:	3304      	adds	r3, #4
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009096:	429a      	cmp	r2, r3
 8009098:	d109      	bne.n	80090ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800909a:	4a38      	ldr	r2, [pc, #224]	; (800917c <inc_lock+0x118>)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	011b      	lsls	r3, r3, #4
 80090a0:	4413      	add	r3, r2
 80090a2:	3308      	adds	r3, #8
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d006      	beq.n	80090bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3301      	adds	r3, #1
 80090b2:	60fb      	str	r3, [r7, #12]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d9dc      	bls.n	8009074 <inc_lock+0x10>
 80090ba:	e000      	b.n	80090be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80090bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d132      	bne.n	800912a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090c4:	2300      	movs	r3, #0
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	e002      	b.n	80090d0 <inc_lock+0x6c>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3301      	adds	r3, #1
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d806      	bhi.n	80090e4 <inc_lock+0x80>
 80090d6:	4a29      	ldr	r2, [pc, #164]	; (800917c <inc_lock+0x118>)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	011b      	lsls	r3, r3, #4
 80090dc:	4413      	add	r3, r2
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1f2      	bne.n	80090ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d101      	bne.n	80090ee <inc_lock+0x8a>
 80090ea:	2300      	movs	r3, #0
 80090ec:	e040      	b.n	8009170 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	4922      	ldr	r1, [pc, #136]	; (800917c <inc_lock+0x118>)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	011b      	lsls	r3, r3, #4
 80090f8:	440b      	add	r3, r1
 80090fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	689a      	ldr	r2, [r3, #8]
 8009100:	491e      	ldr	r1, [pc, #120]	; (800917c <inc_lock+0x118>)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	011b      	lsls	r3, r3, #4
 8009106:	440b      	add	r3, r1
 8009108:	3304      	adds	r3, #4
 800910a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	695a      	ldr	r2, [r3, #20]
 8009110:	491a      	ldr	r1, [pc, #104]	; (800917c <inc_lock+0x118>)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	011b      	lsls	r3, r3, #4
 8009116:	440b      	add	r3, r1
 8009118:	3308      	adds	r3, #8
 800911a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800911c:	4a17      	ldr	r2, [pc, #92]	; (800917c <inc_lock+0x118>)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	011b      	lsls	r3, r3, #4
 8009122:	4413      	add	r3, r2
 8009124:	330c      	adds	r3, #12
 8009126:	2200      	movs	r2, #0
 8009128:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d009      	beq.n	8009144 <inc_lock+0xe0>
 8009130:	4a12      	ldr	r2, [pc, #72]	; (800917c <inc_lock+0x118>)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	011b      	lsls	r3, r3, #4
 8009136:	4413      	add	r3, r2
 8009138:	330c      	adds	r3, #12
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <inc_lock+0xe0>
 8009140:	2300      	movs	r3, #0
 8009142:	e015      	b.n	8009170 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d108      	bne.n	800915c <inc_lock+0xf8>
 800914a:	4a0c      	ldr	r2, [pc, #48]	; (800917c <inc_lock+0x118>)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	011b      	lsls	r3, r3, #4
 8009150:	4413      	add	r3, r2
 8009152:	330c      	adds	r3, #12
 8009154:	881b      	ldrh	r3, [r3, #0]
 8009156:	3301      	adds	r3, #1
 8009158:	b29a      	uxth	r2, r3
 800915a:	e001      	b.n	8009160 <inc_lock+0xfc>
 800915c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009160:	4906      	ldr	r1, [pc, #24]	; (800917c <inc_lock+0x118>)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	011b      	lsls	r3, r3, #4
 8009166:	440b      	add	r3, r1
 8009168:	330c      	adds	r3, #12
 800916a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3301      	adds	r3, #1
}
 8009170:	4618      	mov	r0, r3
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	200024fc 	.word	0x200024fc

08009180 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	3b01      	subs	r3, #1
 800918c:	607b      	str	r3, [r7, #4]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d825      	bhi.n	80091e0 <dec_lock+0x60>
		n = Files[i].ctr;
 8009194:	4a17      	ldr	r2, [pc, #92]	; (80091f4 <dec_lock+0x74>)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	011b      	lsls	r3, r3, #4
 800919a:	4413      	add	r3, r2
 800919c:	330c      	adds	r3, #12
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80091a2:	89fb      	ldrh	r3, [r7, #14]
 80091a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091a8:	d101      	bne.n	80091ae <dec_lock+0x2e>
 80091aa:	2300      	movs	r3, #0
 80091ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80091ae:	89fb      	ldrh	r3, [r7, #14]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <dec_lock+0x3a>
 80091b4:	89fb      	ldrh	r3, [r7, #14]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80091ba:	4a0e      	ldr	r2, [pc, #56]	; (80091f4 <dec_lock+0x74>)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	011b      	lsls	r3, r3, #4
 80091c0:	4413      	add	r3, r2
 80091c2:	330c      	adds	r3, #12
 80091c4:	89fa      	ldrh	r2, [r7, #14]
 80091c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80091c8:	89fb      	ldrh	r3, [r7, #14]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d105      	bne.n	80091da <dec_lock+0x5a>
 80091ce:	4a09      	ldr	r2, [pc, #36]	; (80091f4 <dec_lock+0x74>)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	011b      	lsls	r3, r3, #4
 80091d4:	4413      	add	r3, r2
 80091d6:	2200      	movs	r2, #0
 80091d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	737b      	strb	r3, [r7, #13]
 80091de:	e001      	b.n	80091e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80091e0:	2302      	movs	r3, #2
 80091e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80091e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	200024fc 	.word	0x200024fc

080091f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	e010      	b.n	8009228 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009206:	4a0d      	ldr	r2, [pc, #52]	; (800923c <clear_lock+0x44>)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	4413      	add	r3, r2
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	429a      	cmp	r2, r3
 8009214:	d105      	bne.n	8009222 <clear_lock+0x2a>
 8009216:	4a09      	ldr	r2, [pc, #36]	; (800923c <clear_lock+0x44>)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	011b      	lsls	r3, r3, #4
 800921c:	4413      	add	r3, r2
 800921e:	2200      	movs	r2, #0
 8009220:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3301      	adds	r3, #1
 8009226:	60fb      	str	r3, [r7, #12]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d9eb      	bls.n	8009206 <clear_lock+0xe>
	}
}
 800922e:	bf00      	nop
 8009230:	bf00      	nop
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	200024fc 	.word	0x200024fc

08009240 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	78db      	ldrb	r3, [r3, #3]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d034      	beq.n	80092be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009258:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	7858      	ldrb	r0, [r3, #1]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009264:	2301      	movs	r3, #1
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	f7ff fd0e 	bl	8008c88 <disk_write>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009272:	2301      	movs	r3, #1
 8009274:	73fb      	strb	r3, [r7, #15]
 8009276:	e022      	b.n	80092be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	1ad2      	subs	r2, r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928a:	429a      	cmp	r2, r3
 800928c:	d217      	bcs.n	80092be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	789b      	ldrb	r3, [r3, #2]
 8009292:	613b      	str	r3, [r7, #16]
 8009294:	e010      	b.n	80092b8 <sync_window+0x78>
					wsect += fs->fsize;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	4413      	add	r3, r2
 800929e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	7858      	ldrb	r0, [r3, #1]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80092aa:	2301      	movs	r3, #1
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	f7ff fceb 	bl	8008c88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	613b      	str	r3, [r7, #16]
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d8eb      	bhi.n	8009296 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80092be:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d01b      	beq.n	8009318 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7ff ffad 	bl	8009240 <sync_window>
 80092e6:	4603      	mov	r3, r0
 80092e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d113      	bne.n	8009318 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	7858      	ldrb	r0, [r3, #1]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80092fa:	2301      	movs	r3, #1
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	f7ff fca3 	bl	8008c48 <disk_read>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d004      	beq.n	8009312 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800930c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800930e:	2301      	movs	r3, #1
 8009310:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8009318:	7bfb      	ldrb	r3, [r7, #15]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff ff87 	bl	8009240 <sync_window>
 8009332:	4603      	mov	r3, r0
 8009334:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009336:	7bfb      	ldrb	r3, [r7, #15]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d159      	bne.n	80093f0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	2b03      	cmp	r3, #3
 8009342:	d149      	bne.n	80093d8 <sync_fs+0xb4>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	791b      	ldrb	r3, [r3, #4]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d145      	bne.n	80093d8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	899b      	ldrh	r3, [r3, #12]
 8009356:	461a      	mov	r2, r3
 8009358:	2100      	movs	r1, #0
 800935a:	f7ff fd76 	bl	8008e4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	333c      	adds	r3, #60	; 0x3c
 8009362:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009366:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff fd05 	bl	8008d7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	333c      	adds	r3, #60	; 0x3c
 8009374:	4921      	ldr	r1, [pc, #132]	; (80093fc <sync_fs+0xd8>)
 8009376:	4618      	mov	r0, r3
 8009378:	f7ff fd1a 	bl	8008db0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	333c      	adds	r3, #60	; 0x3c
 8009380:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009384:	491e      	ldr	r1, [pc, #120]	; (8009400 <sync_fs+0xdc>)
 8009386:	4618      	mov	r0, r3
 8009388:	f7ff fd12 	bl	8008db0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	333c      	adds	r3, #60	; 0x3c
 8009390:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	4619      	mov	r1, r3
 800939a:	4610      	mov	r0, r2
 800939c:	f7ff fd08 	bl	8008db0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	333c      	adds	r3, #60	; 0x3c
 80093a4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	4619      	mov	r1, r3
 80093ae:	4610      	mov	r0, r2
 80093b0:	f7ff fcfe 	bl	8008db0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	7858      	ldrb	r0, [r3, #1]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093cc:	2301      	movs	r3, #1
 80093ce:	f7ff fc5b 	bl	8008c88 <disk_write>
			fs->fsi_flag = 0;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	785b      	ldrb	r3, [r3, #1]
 80093dc:	2200      	movs	r2, #0
 80093de:	2100      	movs	r1, #0
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff fc71 	bl	8008cc8 <disk_ioctl>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <sync_fs+0xcc>
 80093ec:	2301      	movs	r3, #1
 80093ee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	41615252 	.word	0x41615252
 8009400:	61417272 	.word	0x61417272

08009404 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	3b02      	subs	r3, #2
 8009412:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a1b      	ldr	r3, [r3, #32]
 8009418:	3b02      	subs	r3, #2
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	429a      	cmp	r2, r3
 800941e:	d301      	bcc.n	8009424 <clust2sect+0x20>
 8009420:	2300      	movs	r3, #0
 8009422:	e008      	b.n	8009436 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	895b      	ldrh	r3, [r3, #10]
 8009428:	461a      	mov	r2, r3
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	fb03 f202 	mul.w	r2, r3, r2
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009434:	4413      	add	r3, r2
}
 8009436:	4618      	mov	r0, r3
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b086      	sub	sp, #24
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
 800944a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d904      	bls.n	8009462 <get_fat+0x20>
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	6a1b      	ldr	r3, [r3, #32]
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d302      	bcc.n	8009468 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009462:	2301      	movs	r3, #1
 8009464:	617b      	str	r3, [r7, #20]
 8009466:	e0bb      	b.n	80095e0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800946c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	2b03      	cmp	r3, #3
 8009474:	f000 8083 	beq.w	800957e <get_fat+0x13c>
 8009478:	2b03      	cmp	r3, #3
 800947a:	f300 80a7 	bgt.w	80095cc <get_fat+0x18a>
 800947e:	2b01      	cmp	r3, #1
 8009480:	d002      	beq.n	8009488 <get_fat+0x46>
 8009482:	2b02      	cmp	r3, #2
 8009484:	d056      	beq.n	8009534 <get_fat+0xf2>
 8009486:	e0a1      	b.n	80095cc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	60fb      	str	r3, [r7, #12]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	085b      	lsrs	r3, r3, #1
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	4413      	add	r3, r2
 8009494:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	899b      	ldrh	r3, [r3, #12]
 800949e:	4619      	mov	r1, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80094a6:	4413      	add	r3, r2
 80094a8:	4619      	mov	r1, r3
 80094aa:	6938      	ldr	r0, [r7, #16]
 80094ac:	f7ff ff0c 	bl	80092c8 <move_window>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f040 808d 	bne.w	80095d2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	1c5a      	adds	r2, r3, #1
 80094bc:	60fa      	str	r2, [r7, #12]
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	8992      	ldrh	r2, [r2, #12]
 80094c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80094c6:	fb01 f202 	mul.w	r2, r1, r2
 80094ca:	1a9b      	subs	r3, r3, r2
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	4413      	add	r3, r2
 80094d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	899b      	ldrh	r3, [r3, #12]
 80094de:	4619      	mov	r1, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80094e6:	4413      	add	r3, r2
 80094e8:	4619      	mov	r1, r3
 80094ea:	6938      	ldr	r0, [r7, #16]
 80094ec:	f7ff feec 	bl	80092c8 <move_window>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d16f      	bne.n	80095d6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	899b      	ldrh	r3, [r3, #12]
 80094fa:	461a      	mov	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8009502:	fb01 f202 	mul.w	r2, r1, r2
 8009506:	1a9b      	subs	r3, r3, r2
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	4413      	add	r3, r2
 800950c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009510:	021b      	lsls	r3, r3, #8
 8009512:	461a      	mov	r2, r3
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	4313      	orrs	r3, r2
 8009518:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <get_fat+0xe8>
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	091b      	lsrs	r3, r3, #4
 8009528:	e002      	b.n	8009530 <get_fat+0xee>
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009530:	617b      	str	r3, [r7, #20]
			break;
 8009532:	e055      	b.n	80095e0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	899b      	ldrh	r3, [r3, #12]
 800953c:	085b      	lsrs	r3, r3, #1
 800953e:	b29b      	uxth	r3, r3
 8009540:	4619      	mov	r1, r3
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	fbb3 f3f1 	udiv	r3, r3, r1
 8009548:	4413      	add	r3, r2
 800954a:	4619      	mov	r1, r3
 800954c:	6938      	ldr	r0, [r7, #16]
 800954e:	f7ff febb 	bl	80092c8 <move_window>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d140      	bne.n	80095da <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	005b      	lsls	r3, r3, #1
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	8992      	ldrh	r2, [r2, #12]
 8009566:	fbb3 f0f2 	udiv	r0, r3, r2
 800956a:	fb00 f202 	mul.w	r2, r0, r2
 800956e:	1a9b      	subs	r3, r3, r2
 8009570:	440b      	add	r3, r1
 8009572:	4618      	mov	r0, r3
 8009574:	f7ff fbc6 	bl	8008d04 <ld_word>
 8009578:	4603      	mov	r3, r0
 800957a:	617b      	str	r3, [r7, #20]
			break;
 800957c:	e030      	b.n	80095e0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	899b      	ldrh	r3, [r3, #12]
 8009586:	089b      	lsrs	r3, r3, #2
 8009588:	b29b      	uxth	r3, r3
 800958a:	4619      	mov	r1, r3
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009592:	4413      	add	r3, r2
 8009594:	4619      	mov	r1, r3
 8009596:	6938      	ldr	r0, [r7, #16]
 8009598:	f7ff fe96 	bl	80092c8 <move_window>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d11d      	bne.n	80095de <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	8992      	ldrh	r2, [r2, #12]
 80095b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80095b4:	fb00 f202 	mul.w	r2, r0, r2
 80095b8:	1a9b      	subs	r3, r3, r2
 80095ba:	440b      	add	r3, r1
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff fbb9 	bl	8008d34 <ld_dword>
 80095c2:	4603      	mov	r3, r0
 80095c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80095c8:	617b      	str	r3, [r7, #20]
			break;
 80095ca:	e009      	b.n	80095e0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80095cc:	2301      	movs	r3, #1
 80095ce:	617b      	str	r3, [r7, #20]
 80095d0:	e006      	b.n	80095e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80095d2:	bf00      	nop
 80095d4:	e004      	b.n	80095e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80095d6:	bf00      	nop
 80095d8:	e002      	b.n	80095e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80095da:	bf00      	nop
 80095dc:	e000      	b.n	80095e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095de:	bf00      	nop
		}
	}

	return val;
 80095e0:	697b      	ldr	r3, [r7, #20]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80095ea:	b590      	push	{r4, r7, lr}
 80095ec:	b089      	sub	sp, #36	; 0x24
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	60b9      	str	r1, [r7, #8]
 80095f4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80095f6:	2302      	movs	r3, #2
 80095f8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	f240 8102 	bls.w	8009806 <put_fat+0x21c>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	429a      	cmp	r2, r3
 800960a:	f080 80fc 	bcs.w	8009806 <put_fat+0x21c>
		switch (fs->fs_type) {
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	2b03      	cmp	r3, #3
 8009614:	f000 80b6 	beq.w	8009784 <put_fat+0x19a>
 8009618:	2b03      	cmp	r3, #3
 800961a:	f300 80fd 	bgt.w	8009818 <put_fat+0x22e>
 800961e:	2b01      	cmp	r3, #1
 8009620:	d003      	beq.n	800962a <put_fat+0x40>
 8009622:	2b02      	cmp	r3, #2
 8009624:	f000 8083 	beq.w	800972e <put_fat+0x144>
 8009628:	e0f6      	b.n	8009818 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	61bb      	str	r3, [r7, #24]
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	085b      	lsrs	r3, r3, #1
 8009632:	69ba      	ldr	r2, [r7, #24]
 8009634:	4413      	add	r3, r2
 8009636:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	899b      	ldrh	r3, [r3, #12]
 8009640:	4619      	mov	r1, r3
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	fbb3 f3f1 	udiv	r3, r3, r1
 8009648:	4413      	add	r3, r2
 800964a:	4619      	mov	r1, r3
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f7ff fe3b 	bl	80092c8 <move_window>
 8009652:	4603      	mov	r3, r0
 8009654:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009656:	7ffb      	ldrb	r3, [r7, #31]
 8009658:	2b00      	cmp	r3, #0
 800965a:	f040 80d6 	bne.w	800980a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	1c5a      	adds	r2, r3, #1
 8009668:	61ba      	str	r2, [r7, #24]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	8992      	ldrh	r2, [r2, #12]
 800966e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009672:	fb00 f202 	mul.w	r2, r0, r2
 8009676:	1a9b      	subs	r3, r3, r2
 8009678:	440b      	add	r3, r1
 800967a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00d      	beq.n	80096a2 <put_fat+0xb8>
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	b25b      	sxtb	r3, r3
 800968c:	f003 030f 	and.w	r3, r3, #15
 8009690:	b25a      	sxtb	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	b2db      	uxtb	r3, r3
 8009696:	011b      	lsls	r3, r3, #4
 8009698:	b25b      	sxtb	r3, r3
 800969a:	4313      	orrs	r3, r2
 800969c:	b25b      	sxtb	r3, r3
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	e001      	b.n	80096a6 <put_fat+0xbc>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2201      	movs	r2, #1
 80096ae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	899b      	ldrh	r3, [r3, #12]
 80096b8:	4619      	mov	r1, r3
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80096c0:	4413      	add	r3, r2
 80096c2:	4619      	mov	r1, r3
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f7ff fdff 	bl	80092c8 <move_window>
 80096ca:	4603      	mov	r3, r0
 80096cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096ce:	7ffb      	ldrb	r3, [r7, #31]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f040 809c 	bne.w	800980e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	899b      	ldrh	r3, [r3, #12]
 80096e0:	461a      	mov	r2, r3
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80096e8:	fb00 f202 	mul.w	r2, r0, r2
 80096ec:	1a9b      	subs	r3, r3, r2
 80096ee:	440b      	add	r3, r1
 80096f0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f003 0301 	and.w	r3, r3, #1
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d003      	beq.n	8009704 <put_fat+0x11a>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	091b      	lsrs	r3, r3, #4
 8009700:	b2db      	uxtb	r3, r3
 8009702:	e00e      	b.n	8009722 <put_fat+0x138>
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	b25b      	sxtb	r3, r3
 800970a:	f023 030f 	bic.w	r3, r3, #15
 800970e:	b25a      	sxtb	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	0a1b      	lsrs	r3, r3, #8
 8009714:	b25b      	sxtb	r3, r3
 8009716:	f003 030f 	and.w	r3, r3, #15
 800971a:	b25b      	sxtb	r3, r3
 800971c:	4313      	orrs	r3, r2
 800971e:	b25b      	sxtb	r3, r3
 8009720:	b2db      	uxtb	r3, r3
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2201      	movs	r2, #1
 800972a:	70da      	strb	r2, [r3, #3]
			break;
 800972c:	e074      	b.n	8009818 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	899b      	ldrh	r3, [r3, #12]
 8009736:	085b      	lsrs	r3, r3, #1
 8009738:	b29b      	uxth	r3, r3
 800973a:	4619      	mov	r1, r3
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009742:	4413      	add	r3, r2
 8009744:	4619      	mov	r1, r3
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f7ff fdbe 	bl	80092c8 <move_window>
 800974c:	4603      	mov	r3, r0
 800974e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009750:	7ffb      	ldrb	r3, [r7, #31]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d15d      	bne.n	8009812 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	005b      	lsls	r3, r3, #1
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	8992      	ldrh	r2, [r2, #12]
 8009764:	fbb3 f0f2 	udiv	r0, r3, r2
 8009768:	fb00 f202 	mul.w	r2, r0, r2
 800976c:	1a9b      	subs	r3, r3, r2
 800976e:	440b      	add	r3, r1
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	b292      	uxth	r2, r2
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f7ff faff 	bl	8008d7a <st_word>
			fs->wflag = 1;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2201      	movs	r2, #1
 8009780:	70da      	strb	r2, [r3, #3]
			break;
 8009782:	e049      	b.n	8009818 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	899b      	ldrh	r3, [r3, #12]
 800978c:	089b      	lsrs	r3, r3, #2
 800978e:	b29b      	uxth	r3, r3
 8009790:	4619      	mov	r1, r3
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	fbb3 f3f1 	udiv	r3, r3, r1
 8009798:	4413      	add	r3, r2
 800979a:	4619      	mov	r1, r3
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f7ff fd93 	bl	80092c8 <move_window>
 80097a2:	4603      	mov	r3, r0
 80097a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80097a6:	7ffb      	ldrb	r3, [r7, #31]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d134      	bne.n	8009816 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	8992      	ldrh	r2, [r2, #12]
 80097c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80097c4:	fb00 f202 	mul.w	r2, r0, r2
 80097c8:	1a9b      	subs	r3, r3, r2
 80097ca:	440b      	add	r3, r1
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7ff fab1 	bl	8008d34 <ld_dword>
 80097d2:	4603      	mov	r3, r0
 80097d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80097d8:	4323      	orrs	r3, r4
 80097da:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	8992      	ldrh	r2, [r2, #12]
 80097ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80097ee:	fb00 f202 	mul.w	r2, r0, r2
 80097f2:	1a9b      	subs	r3, r3, r2
 80097f4:	440b      	add	r3, r1
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7ff fad9 	bl	8008db0 <st_dword>
			fs->wflag = 1;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2201      	movs	r2, #1
 8009802:	70da      	strb	r2, [r3, #3]
			break;
 8009804:	e008      	b.n	8009818 <put_fat+0x22e>
		}
	}
 8009806:	bf00      	nop
 8009808:	e006      	b.n	8009818 <put_fat+0x22e>
			if (res != FR_OK) break;
 800980a:	bf00      	nop
 800980c:	e004      	b.n	8009818 <put_fat+0x22e>
			if (res != FR_OK) break;
 800980e:	bf00      	nop
 8009810:	e002      	b.n	8009818 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009812:	bf00      	nop
 8009814:	e000      	b.n	8009818 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009816:	bf00      	nop
	return res;
 8009818:	7ffb      	ldrb	r3, [r7, #31]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3724      	adds	r7, #36	; 0x24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd90      	pop	{r4, r7, pc}

08009822 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b088      	sub	sp, #32
 8009826:	af00      	add	r7, sp, #0
 8009828:	60f8      	str	r0, [r7, #12]
 800982a:	60b9      	str	r1, [r7, #8]
 800982c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d904      	bls.n	8009848 <remove_chain+0x26>
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	429a      	cmp	r2, r3
 8009846:	d301      	bcc.n	800984c <remove_chain+0x2a>
 8009848:	2302      	movs	r3, #2
 800984a:	e04b      	b.n	80098e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00c      	beq.n	800986c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009856:	6879      	ldr	r1, [r7, #4]
 8009858:	69b8      	ldr	r0, [r7, #24]
 800985a:	f7ff fec6 	bl	80095ea <put_fat>
 800985e:	4603      	mov	r3, r0
 8009860:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009862:	7ffb      	ldrb	r3, [r7, #31]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <remove_chain+0x4a>
 8009868:	7ffb      	ldrb	r3, [r7, #31]
 800986a:	e03b      	b.n	80098e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800986c:	68b9      	ldr	r1, [r7, #8]
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7ff fde7 	bl	8009442 <get_fat>
 8009874:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d031      	beq.n	80098e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d101      	bne.n	8009886 <remove_chain+0x64>
 8009882:	2302      	movs	r3, #2
 8009884:	e02e      	b.n	80098e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800988c:	d101      	bne.n	8009892 <remove_chain+0x70>
 800988e:	2301      	movs	r3, #1
 8009890:	e028      	b.n	80098e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009892:	2200      	movs	r2, #0
 8009894:	68b9      	ldr	r1, [r7, #8]
 8009896:	69b8      	ldr	r0, [r7, #24]
 8009898:	f7ff fea7 	bl	80095ea <put_fat>
 800989c:	4603      	mov	r3, r0
 800989e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80098a0:	7ffb      	ldrb	r3, [r7, #31]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <remove_chain+0x88>
 80098a6:	7ffb      	ldrb	r3, [r7, #31]
 80098a8:	e01c      	b.n	80098e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	699a      	ldr	r2, [r3, #24]
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	3b02      	subs	r3, #2
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d20b      	bcs.n	80098d0 <remove_chain+0xae>
			fs->free_clst++;
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	1c5a      	adds	r2, r3, #1
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	791b      	ldrb	r3, [r3, #4]
 80098c6:	f043 0301 	orr.w	r3, r3, #1
 80098ca:	b2da      	uxtb	r2, r3
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	6a1b      	ldr	r3, [r3, #32]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d3c6      	bcc.n	800986c <remove_chain+0x4a>
 80098de:	e000      	b.n	80098e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80098e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3720      	adds	r7, #32
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10d      	bne.n	800991e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d004      	beq.n	8009918 <create_chain+0x2c>
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	69ba      	ldr	r2, [r7, #24]
 8009914:	429a      	cmp	r2, r3
 8009916:	d31b      	bcc.n	8009950 <create_chain+0x64>
 8009918:	2301      	movs	r3, #1
 800991a:	61bb      	str	r3, [r7, #24]
 800991c:	e018      	b.n	8009950 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7ff fd8e 	bl	8009442 <get_fat>
 8009926:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d801      	bhi.n	8009932 <create_chain+0x46>
 800992e:	2301      	movs	r3, #1
 8009930:	e070      	b.n	8009a14 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009938:	d101      	bne.n	800993e <create_chain+0x52>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	e06a      	b.n	8009a14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	429a      	cmp	r2, r3
 8009946:	d201      	bcs.n	800994c <create_chain+0x60>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	e063      	b.n	8009a14 <create_chain+0x128>
		scl = clst;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	3301      	adds	r3, #1
 8009958:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	69fa      	ldr	r2, [r7, #28]
 8009960:	429a      	cmp	r2, r3
 8009962:	d307      	bcc.n	8009974 <create_chain+0x88>
				ncl = 2;
 8009964:	2302      	movs	r3, #2
 8009966:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009968:	69fa      	ldr	r2, [r7, #28]
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	429a      	cmp	r2, r3
 800996e:	d901      	bls.n	8009974 <create_chain+0x88>
 8009970:	2300      	movs	r3, #0
 8009972:	e04f      	b.n	8009a14 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009974:	69f9      	ldr	r1, [r7, #28]
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f7ff fd63 	bl	8009442 <get_fat>
 800997c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00e      	beq.n	80099a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d003      	beq.n	8009992 <create_chain+0xa6>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009990:	d101      	bne.n	8009996 <create_chain+0xaa>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	e03e      	b.n	8009a14 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009996:	69fa      	ldr	r2, [r7, #28]
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	429a      	cmp	r2, r3
 800999c:	d1da      	bne.n	8009954 <create_chain+0x68>
 800999e:	2300      	movs	r3, #0
 80099a0:	e038      	b.n	8009a14 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80099a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80099a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099a8:	69f9      	ldr	r1, [r7, #28]
 80099aa:	6938      	ldr	r0, [r7, #16]
 80099ac:	f7ff fe1d 	bl	80095ea <put_fat>
 80099b0:	4603      	mov	r3, r0
 80099b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80099b4:	7dfb      	ldrb	r3, [r7, #23]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d109      	bne.n	80099ce <create_chain+0xe2>
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d006      	beq.n	80099ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80099c0:	69fa      	ldr	r2, [r7, #28]
 80099c2:	6839      	ldr	r1, [r7, #0]
 80099c4:	6938      	ldr	r0, [r7, #16]
 80099c6:	f7ff fe10 	bl	80095ea <put_fat>
 80099ca:	4603      	mov	r3, r0
 80099cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80099ce:	7dfb      	ldrb	r3, [r7, #23]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d116      	bne.n	8009a02 <create_chain+0x116>
		fs->last_clst = ncl;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	69fa      	ldr	r2, [r7, #28]
 80099d8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	699a      	ldr	r2, [r3, #24]
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	3b02      	subs	r3, #2
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d804      	bhi.n	80099f2 <create_chain+0x106>
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	1e5a      	subs	r2, r3, #1
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	791b      	ldrb	r3, [r3, #4]
 80099f6:	f043 0301 	orr.w	r3, r3, #1
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	711a      	strb	r2, [r3, #4]
 8009a00:	e007      	b.n	8009a12 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d102      	bne.n	8009a0e <create_chain+0x122>
 8009a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a0c:	e000      	b.n	8009a10 <create_chain+0x124>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009a12:	69fb      	ldr	r3, [r7, #28]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3720      	adds	r7, #32
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a30:	3304      	adds	r3, #4
 8009a32:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	899b      	ldrh	r3, [r3, #12]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	8952      	ldrh	r2, [r2, #10]
 8009a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a48:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	1d1a      	adds	r2, r3, #4
 8009a4e:	613a      	str	r2, [r7, #16]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <clmt_clust+0x42>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e010      	b.n	8009a80 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d307      	bcc.n	8009a76 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	617b      	str	r3, [r7, #20]
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	3304      	adds	r3, #4
 8009a72:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a74:	e7e9      	b.n	8009a4a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009a76:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	4413      	add	r3, r2
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	371c      	adds	r7, #28
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b086      	sub	sp, #24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009aa2:	d204      	bcs.n	8009aae <dir_sdi+0x22>
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	f003 031f 	and.w	r3, r3, #31
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009aae:	2302      	movs	r3, #2
 8009ab0:	e071      	b.n	8009b96 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	683a      	ldr	r2, [r7, #0]
 8009ab6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d106      	bne.n	8009ad2 <dir_sdi+0x46>
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d902      	bls.n	8009ad2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10c      	bne.n	8009af2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	095b      	lsrs	r3, r3, #5
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	8912      	ldrh	r2, [r2, #8]
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d301      	bcc.n	8009ae8 <dir_sdi+0x5c>
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	e056      	b.n	8009b96 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	61da      	str	r2, [r3, #28]
 8009af0:	e02d      	b.n	8009b4e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	895b      	ldrh	r3, [r3, #10]
 8009af6:	461a      	mov	r2, r3
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	899b      	ldrh	r3, [r3, #12]
 8009afc:	fb02 f303 	mul.w	r3, r2, r3
 8009b00:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009b02:	e019      	b.n	8009b38 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6979      	ldr	r1, [r7, #20]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7ff fc9a 	bl	8009442 <get_fat>
 8009b0e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b16:	d101      	bne.n	8009b1c <dir_sdi+0x90>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e03c      	b.n	8009b96 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d904      	bls.n	8009b2c <dir_sdi+0xa0>
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	697a      	ldr	r2, [r7, #20]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d301      	bcc.n	8009b30 <dir_sdi+0xa4>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e032      	b.n	8009b96 <dir_sdi+0x10a>
			ofs -= csz;
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009b38:	683a      	ldr	r2, [r7, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d2e1      	bcs.n	8009b04 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009b40:	6979      	ldr	r1, [r7, #20]
 8009b42:	6938      	ldr	r0, [r7, #16]
 8009b44:	f7ff fc5e 	bl	8009404 <clust2sect>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	69db      	ldr	r3, [r3, #28]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <dir_sdi+0xd4>
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	e01a      	b.n	8009b96 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	69da      	ldr	r2, [r3, #28]
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	899b      	ldrh	r3, [r3, #12]
 8009b68:	4619      	mov	r1, r3
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b70:	441a      	add	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	899b      	ldrh	r3, [r3, #12]
 8009b80:	461a      	mov	r2, r3
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b88:	fb00 f202 	mul.w	r2, r0, r2
 8009b8c:	1a9b      	subs	r3, r3, r2
 8009b8e:	18ca      	adds	r2, r1, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3718      	adds	r7, #24
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b086      	sub	sp, #24
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	3320      	adds	r3, #32
 8009bb4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	69db      	ldr	r3, [r3, #28]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <dir_next+0x28>
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bc4:	d301      	bcc.n	8009bca <dir_next+0x2c>
 8009bc6:	2304      	movs	r3, #4
 8009bc8:	e0bb      	b.n	8009d42 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	899b      	ldrh	r3, [r3, #12]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bd6:	fb01 f202 	mul.w	r2, r1, r2
 8009bda:	1a9b      	subs	r3, r3, r2
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f040 809d 	bne.w	8009d1c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	69db      	ldr	r3, [r3, #28]
 8009be6:	1c5a      	adds	r2, r3, #1
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10b      	bne.n	8009c0c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	095b      	lsrs	r3, r3, #5
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	8912      	ldrh	r2, [r2, #8]
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	f0c0 808d 	bcc.w	8009d1c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	61da      	str	r2, [r3, #28]
 8009c08:	2304      	movs	r3, #4
 8009c0a:	e09a      	b.n	8009d42 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	899b      	ldrh	r3, [r3, #12]
 8009c10:	461a      	mov	r2, r3
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	8952      	ldrh	r2, [r2, #10]
 8009c1c:	3a01      	subs	r2, #1
 8009c1e:	4013      	ands	r3, r2
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d17b      	bne.n	8009d1c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	f7ff fc08 	bl	8009442 <get_fat>
 8009c32:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d801      	bhi.n	8009c3e <dir_next+0xa0>
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	e081      	b.n	8009d42 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c44:	d101      	bne.n	8009c4a <dir_next+0xac>
 8009c46:	2301      	movs	r3, #1
 8009c48:	e07b      	b.n	8009d42 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d359      	bcc.n	8009d08 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d104      	bne.n	8009c64 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	61da      	str	r2, [r3, #28]
 8009c60:	2304      	movs	r3, #4
 8009c62:	e06e      	b.n	8009d42 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	f7ff fe3d 	bl	80098ec <create_chain>
 8009c72:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <dir_next+0xe0>
 8009c7a:	2307      	movs	r3, #7
 8009c7c:	e061      	b.n	8009d42 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d101      	bne.n	8009c88 <dir_next+0xea>
 8009c84:	2302      	movs	r3, #2
 8009c86:	e05c      	b.n	8009d42 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c8e:	d101      	bne.n	8009c94 <dir_next+0xf6>
 8009c90:	2301      	movs	r3, #1
 8009c92:	e056      	b.n	8009d42 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7ff fad3 	bl	8009240 <sync_window>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <dir_next+0x106>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e04e      	b.n	8009d42 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	899b      	ldrh	r3, [r3, #12]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	f7ff f8ca 	bl	8008e4a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	613b      	str	r3, [r7, #16]
 8009cba:	6979      	ldr	r1, [r7, #20]
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f7ff fba1 	bl	8009404 <clust2sect>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8009cc8:	e012      	b.n	8009cf0 <dir_next+0x152>
						fs->wflag = 1;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f7ff fab5 	bl	8009240 <sync_window>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <dir_next+0x142>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e030      	b.n	8009d42 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	613b      	str	r3, [r7, #16]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	639a      	str	r2, [r3, #56]	; 0x38
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	895b      	ldrh	r3, [r3, #10]
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d3e6      	bcc.n	8009cca <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	1ad2      	subs	r2, r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009d0e:	6979      	ldr	r1, [r7, #20]
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f7ff fb77 	bl	8009404 <clust2sect>
 8009d16:	4602      	mov	r2, r0
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	899b      	ldrh	r3, [r3, #12]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d34:	fb00 f202 	mul.w	r2, r0, r2
 8009d38:	1a9b      	subs	r3, r3, r2
 8009d3a:	18ca      	adds	r2, r1, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3718      	adds	r7, #24
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b086      	sub	sp, #24
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7ff fe95 	bl	8009a8c <dir_sdi>
 8009d62:	4603      	mov	r3, r0
 8009d64:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d12b      	bne.n	8009dc4 <dir_alloc+0x7a>
		n = 0;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	4619      	mov	r1, r3
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f7ff faa6 	bl	80092c8 <move_window>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009d80:	7dfb      	ldrb	r3, [r7, #23]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d11d      	bne.n	8009dc2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a1b      	ldr	r3, [r3, #32]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	2be5      	cmp	r3, #229	; 0xe5
 8009d8e:	d004      	beq.n	8009d9a <dir_alloc+0x50>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a1b      	ldr	r3, [r3, #32]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d107      	bne.n	8009daa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	613b      	str	r3, [r7, #16]
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d102      	bne.n	8009dae <dir_alloc+0x64>
 8009da8:	e00c      	b.n	8009dc4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009daa:	2300      	movs	r3, #0
 8009dac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009dae:	2101      	movs	r1, #1
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7ff fef4 	bl	8009b9e <dir_next>
 8009db6:	4603      	mov	r3, r0
 8009db8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009dba:	7dfb      	ldrb	r3, [r7, #23]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d0d7      	beq.n	8009d70 <dir_alloc+0x26>
 8009dc0:	e000      	b.n	8009dc4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009dc2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
 8009dc6:	2b04      	cmp	r3, #4
 8009dc8:	d101      	bne.n	8009dce <dir_alloc+0x84>
 8009dca:	2307      	movs	r3, #7
 8009dcc:	75fb      	strb	r3, [r7, #23]
	return res;
 8009dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3718      	adds	r7, #24
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	331a      	adds	r3, #26
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fe ff8c 	bl	8008d04 <ld_word>
 8009dec:	4603      	mov	r3, r0
 8009dee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2b03      	cmp	r3, #3
 8009df6:	d109      	bne.n	8009e0c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	3314      	adds	r3, #20
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fe ff81 	bl	8008d04 <ld_word>
 8009e02:	4603      	mov	r3, r0
 8009e04:	041b      	lsls	r3, r3, #16
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	60f8      	str	r0, [r7, #12]
 8009e1e:	60b9      	str	r1, [r7, #8]
 8009e20:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	331a      	adds	r3, #26
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	b292      	uxth	r2, r2
 8009e2a:	4611      	mov	r1, r2
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fe ffa4 	bl	8008d7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b03      	cmp	r3, #3
 8009e38:	d109      	bne.n	8009e4e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	f103 0214 	add.w	r2, r3, #20
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	0c1b      	lsrs	r3, r3, #16
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	4619      	mov	r1, r3
 8009e48:	4610      	mov	r0, r2
 8009e4a:	f7fe ff96 	bl	8008d7a <st_word>
	}
}
 8009e4e:	bf00      	nop
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b086      	sub	sp, #24
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009e64:	2100      	movs	r1, #0
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f7ff fe10 	bl	8009a8c <dir_sdi>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009e70:	7dfb      	ldrb	r3, [r7, #23]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <dir_find+0x24>
 8009e76:	7dfb      	ldrb	r3, [r7, #23]
 8009e78:	e03e      	b.n	8009ef8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	69db      	ldr	r3, [r3, #28]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6938      	ldr	r0, [r7, #16]
 8009e82:	f7ff fa21 	bl	80092c8 <move_window>
 8009e86:	4603      	mov	r3, r0
 8009e88:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009e8a:	7dfb      	ldrb	r3, [r7, #23]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d12f      	bne.n	8009ef0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a1b      	ldr	r3, [r3, #32]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d102      	bne.n	8009ea4 <dir_find+0x4e>
 8009e9e:	2304      	movs	r3, #4
 8009ea0:	75fb      	strb	r3, [r7, #23]
 8009ea2:	e028      	b.n	8009ef6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a1b      	ldr	r3, [r3, #32]
 8009ea8:	330b      	adds	r3, #11
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	330b      	adds	r3, #11
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	f003 0308 	and.w	r3, r3, #8
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10a      	bne.n	8009edc <dir_find+0x86>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a18      	ldr	r0, [r3, #32]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	3324      	adds	r3, #36	; 0x24
 8009ece:	220b      	movs	r2, #11
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	f7fe ffd5 	bl	8008e80 <mem_cmp>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00b      	beq.n	8009ef4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009edc:	2100      	movs	r1, #0
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7ff fe5d 	bl	8009b9e <dir_next>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d0c5      	beq.n	8009e7a <dir_find+0x24>
 8009eee:	e002      	b.n	8009ef6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009ef0:	bf00      	nop
 8009ef2:	e000      	b.n	8009ef6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009ef4:	bf00      	nop

	return res;
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009f0e:	2101      	movs	r1, #1
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7ff ff1a 	bl	8009d4a <dir_alloc>
 8009f16:	4603      	mov	r3, r0
 8009f18:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d11c      	bne.n	8009f5a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	69db      	ldr	r3, [r3, #28]
 8009f24:	4619      	mov	r1, r3
 8009f26:	68b8      	ldr	r0, [r7, #8]
 8009f28:	f7ff f9ce 	bl	80092c8 <move_window>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d111      	bne.n	8009f5a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	2220      	movs	r2, #32
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fe ff83 	bl	8008e4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a18      	ldr	r0, [r3, #32]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	3324      	adds	r3, #36	; 0x24
 8009f4c:	220b      	movs	r2, #11
 8009f4e:	4619      	mov	r1, r3
 8009f50:	f7fe ff5a 	bl	8008e08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2201      	movs	r2, #1
 8009f58:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	60fb      	str	r3, [r7, #12]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	3324      	adds	r3, #36	; 0x24
 8009f78:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009f7a:	220b      	movs	r2, #11
 8009f7c:	2120      	movs	r1, #32
 8009f7e:	68b8      	ldr	r0, [r7, #8]
 8009f80:	f7fe ff63 	bl	8008e4a <mem_set>
	si = i = 0; ni = 8;
 8009f84:	2300      	movs	r3, #0
 8009f86:	613b      	str	r3, [r7, #16]
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	61fb      	str	r3, [r7, #28]
 8009f8c:	2308      	movs	r3, #8
 8009f8e:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	4413      	add	r3, r2
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	2b2e      	cmp	r3, #46	; 0x2e
 8009f9a:	d12f      	bne.n	8009ffc <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	1c5a      	adds	r2, r3, #1
 8009fa0:	61fa      	str	r2, [r7, #28]
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 8009faa:	7efb      	ldrb	r3, [r7, #27]
 8009fac:	2b2e      	cmp	r3, #46	; 0x2e
 8009fae:	d10a      	bne.n	8009fc6 <create_name+0x62>
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d807      	bhi.n	8009fc6 <create_name+0x62>
			sfn[i++] = c;
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	1c5a      	adds	r2, r3, #1
 8009fba:	613a      	str	r2, [r7, #16]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	7efa      	ldrb	r2, [r7, #27]
 8009fc2:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8009fc4:	e7ea      	b.n	8009f9c <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8009fc6:	7efb      	ldrb	r3, [r7, #27]
 8009fc8:	2b2f      	cmp	r3, #47	; 0x2f
 8009fca:	d007      	beq.n	8009fdc <create_name+0x78>
 8009fcc:	7efb      	ldrb	r3, [r7, #27]
 8009fce:	2b5c      	cmp	r3, #92	; 0x5c
 8009fd0:	d004      	beq.n	8009fdc <create_name+0x78>
 8009fd2:	7efb      	ldrb	r3, [r7, #27]
 8009fd4:	2b20      	cmp	r3, #32
 8009fd6:	d901      	bls.n	8009fdc <create_name+0x78>
 8009fd8:	2306      	movs	r3, #6
 8009fda:	e084      	b.n	800a0e6 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	441a      	add	r2, r3
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8009fe6:	7efb      	ldrb	r3, [r7, #27]
 8009fe8:	2b20      	cmp	r3, #32
 8009fea:	d801      	bhi.n	8009ff0 <create_name+0x8c>
 8009fec:	2224      	movs	r2, #36	; 0x24
 8009fee:	e000      	b.n	8009ff2 <create_name+0x8e>
 8009ff0:	2220      	movs	r2, #32
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	330b      	adds	r3, #11
 8009ff6:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	e074      	b.n	800a0e6 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	1c5a      	adds	r2, r3, #1
 800a000:	61fa      	str	r2, [r7, #28]
 800a002:	68fa      	ldr	r2, [r7, #12]
 800a004:	4413      	add	r3, r2
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a00a:	7efb      	ldrb	r3, [r7, #27]
 800a00c:	2b20      	cmp	r3, #32
 800a00e:	d94e      	bls.n	800a0ae <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a010:	7efb      	ldrb	r3, [r7, #27]
 800a012:	2b2f      	cmp	r3, #47	; 0x2f
 800a014:	d006      	beq.n	800a024 <create_name+0xc0>
 800a016:	7efb      	ldrb	r3, [r7, #27]
 800a018:	2b5c      	cmp	r3, #92	; 0x5c
 800a01a:	d110      	bne.n	800a03e <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a01c:	e002      	b.n	800a024 <create_name+0xc0>
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	3301      	adds	r3, #1
 800a022:	61fb      	str	r3, [r7, #28]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	4413      	add	r3, r2
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	2b2f      	cmp	r3, #47	; 0x2f
 800a02e:	d0f6      	beq.n	800a01e <create_name+0xba>
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	4413      	add	r3, r2
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2b5c      	cmp	r3, #92	; 0x5c
 800a03a:	d0f0      	beq.n	800a01e <create_name+0xba>
			break;
 800a03c:	e038      	b.n	800a0b0 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a03e:	7efb      	ldrb	r3, [r7, #27]
 800a040:	2b2e      	cmp	r3, #46	; 0x2e
 800a042:	d003      	beq.n	800a04c <create_name+0xe8>
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d30c      	bcc.n	800a066 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	2b0b      	cmp	r3, #11
 800a050:	d002      	beq.n	800a058 <create_name+0xf4>
 800a052:	7efb      	ldrb	r3, [r7, #27]
 800a054:	2b2e      	cmp	r3, #46	; 0x2e
 800a056:	d001      	beq.n	800a05c <create_name+0xf8>
 800a058:	2306      	movs	r3, #6
 800a05a:	e044      	b.n	800a0e6 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800a05c:	2308      	movs	r3, #8
 800a05e:	613b      	str	r3, [r7, #16]
 800a060:	230b      	movs	r3, #11
 800a062:	617b      	str	r3, [r7, #20]
			continue;
 800a064:	e022      	b.n	800a0ac <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a066:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	da04      	bge.n	800a078 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a06e:	7efb      	ldrb	r3, [r7, #27]
 800a070:	3b80      	subs	r3, #128	; 0x80
 800a072:	4a1f      	ldr	r2, [pc, #124]	; (800a0f0 <create_name+0x18c>)
 800a074:	5cd3      	ldrb	r3, [r2, r3]
 800a076:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a078:	7efb      	ldrb	r3, [r7, #27]
 800a07a:	4619      	mov	r1, r3
 800a07c:	481d      	ldr	r0, [pc, #116]	; (800a0f4 <create_name+0x190>)
 800a07e:	f7fe ff26 	bl	8008ece <chk_chr>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <create_name+0x128>
 800a088:	2306      	movs	r3, #6
 800a08a:	e02c      	b.n	800a0e6 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a08c:	7efb      	ldrb	r3, [r7, #27]
 800a08e:	2b60      	cmp	r3, #96	; 0x60
 800a090:	d905      	bls.n	800a09e <create_name+0x13a>
 800a092:	7efb      	ldrb	r3, [r7, #27]
 800a094:	2b7a      	cmp	r3, #122	; 0x7a
 800a096:	d802      	bhi.n	800a09e <create_name+0x13a>
 800a098:	7efb      	ldrb	r3, [r7, #27]
 800a09a:	3b20      	subs	r3, #32
 800a09c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	613a      	str	r2, [r7, #16]
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	7efa      	ldrb	r2, [r7, #27]
 800a0aa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a0ac:	e7a6      	b.n	8009ffc <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a0ae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	441a      	add	r2, r3
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <create_name+0x160>
 800a0c0:	2306      	movs	r3, #6
 800a0c2:	e010      	b.n	800a0e6 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	2be5      	cmp	r3, #229	; 0xe5
 800a0ca:	d102      	bne.n	800a0d2 <create_name+0x16e>
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	2205      	movs	r2, #5
 800a0d0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a0d2:	7efb      	ldrb	r3, [r7, #27]
 800a0d4:	2b20      	cmp	r3, #32
 800a0d6:	d801      	bhi.n	800a0dc <create_name+0x178>
 800a0d8:	2204      	movs	r2, #4
 800a0da:	e000      	b.n	800a0de <create_name+0x17a>
 800a0dc:	2200      	movs	r2, #0
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	330b      	adds	r3, #11
 800a0e2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a0e4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3720      	adds	r7, #32
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	080100fc 	.word	0x080100fc
 800a0f4:	08010084 	.word	0x08010084

0800a0f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	2b2f      	cmp	r3, #47	; 0x2f
 800a112:	d00b      	beq.n	800a12c <follow_path+0x34>
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b5c      	cmp	r3, #92	; 0x5c
 800a11a:	d007      	beq.n	800a12c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	69da      	ldr	r2, [r3, #28]
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	609a      	str	r2, [r3, #8]
 800a124:	e00d      	b.n	800a142 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	3301      	adds	r3, #1
 800a12a:	603b      	str	r3, [r7, #0]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	2b2f      	cmp	r3, #47	; 0x2f
 800a132:	d0f8      	beq.n	800a126 <follow_path+0x2e>
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	2b5c      	cmp	r3, #92	; 0x5c
 800a13a:	d0f4      	beq.n	800a126 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	2200      	movs	r2, #0
 800a140:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	2b1f      	cmp	r3, #31
 800a148:	d80a      	bhi.n	800a160 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2280      	movs	r2, #128	; 0x80
 800a14e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a152:	2100      	movs	r1, #0
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7ff fc99 	bl	8009a8c <dir_sdi>
 800a15a:	4603      	mov	r3, r0
 800a15c:	75fb      	strb	r3, [r7, #23]
 800a15e:	e05b      	b.n	800a218 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a160:	463b      	mov	r3, r7
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7ff fefd 	bl	8009f64 <create_name>
 800a16a:	4603      	mov	r3, r0
 800a16c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d14c      	bne.n	800a20e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff fe6e 	bl	8009e56 <dir_find>
 800a17a:	4603      	mov	r3, r0
 800a17c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a184:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a186:	7dfb      	ldrb	r3, [r7, #23]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d01b      	beq.n	800a1c4 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a18c:	7dfb      	ldrb	r3, [r7, #23]
 800a18e:	2b04      	cmp	r3, #4
 800a190:	d13f      	bne.n	800a212 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800a192:	7afb      	ldrb	r3, [r7, #11]
 800a194:	f003 0320 	and.w	r3, r3, #32
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00b      	beq.n	800a1b4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800a19c:	7afb      	ldrb	r3, [r7, #11]
 800a19e:	f003 0304 	and.w	r3, r3, #4
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d031      	beq.n	800a20a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2280      	movs	r2, #128	; 0x80
 800a1aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800a1b2:	e02e      	b.n	800a212 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a1b4:	7afb      	ldrb	r3, [r7, #11]
 800a1b6:	f003 0304 	and.w	r3, r3, #4
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d129      	bne.n	800a212 <follow_path+0x11a>
 800a1be:	2305      	movs	r3, #5
 800a1c0:	75fb      	strb	r3, [r7, #23]
				break;
 800a1c2:	e026      	b.n	800a212 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a1c4:	7afb      	ldrb	r3, [r7, #11]
 800a1c6:	f003 0304 	and.w	r3, r3, #4
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d123      	bne.n	800a216 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	799b      	ldrb	r3, [r3, #6]
 800a1d2:	f003 0310 	and.w	r3, r3, #16
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d102      	bne.n	800a1e0 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800a1da:	2305      	movs	r3, #5
 800a1dc:	75fb      	strb	r3, [r7, #23]
 800a1de:	e01b      	b.n	800a218 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	8992      	ldrh	r2, [r2, #12]
 800a1ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1f2:	fb00 f202 	mul.w	r2, r0, r2
 800a1f6:	1a9b      	subs	r3, r3, r2
 800a1f8:	440b      	add	r3, r1
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f7ff fdeb 	bl	8009dd8 <ld_clust>
 800a202:	4602      	mov	r2, r0
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	609a      	str	r2, [r3, #8]
 800a208:	e7aa      	b.n	800a160 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800a20a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a20c:	e7a8      	b.n	800a160 <follow_path+0x68>
			if (res != FR_OK) break;
 800a20e:	bf00      	nop
 800a210:	e002      	b.n	800a218 <follow_path+0x120>
				break;
 800a212:	bf00      	nop
 800a214:	e000      	b.n	800a218 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a216:	bf00      	nop
			}
		}
	}

	return res;
 800a218:	7dfb      	ldrb	r3, [r7, #23]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3718      	adds	r7, #24
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a222:	b480      	push	{r7}
 800a224:	b087      	sub	sp, #28
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a22a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a22e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d031      	beq.n	800a29c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	617b      	str	r3, [r7, #20]
 800a23e:	e002      	b.n	800a246 <get_ldnumber+0x24>
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	3301      	adds	r3, #1
 800a244:	617b      	str	r3, [r7, #20]
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	2b20      	cmp	r3, #32
 800a24c:	d903      	bls.n	800a256 <get_ldnumber+0x34>
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	2b3a      	cmp	r3, #58	; 0x3a
 800a254:	d1f4      	bne.n	800a240 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	2b3a      	cmp	r3, #58	; 0x3a
 800a25c:	d11c      	bne.n	800a298 <get_ldnumber+0x76>
			tp = *path;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	1c5a      	adds	r2, r3, #1
 800a268:	60fa      	str	r2, [r7, #12]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	3b30      	subs	r3, #48	; 0x30
 800a26e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2b09      	cmp	r3, #9
 800a274:	d80e      	bhi.n	800a294 <get_ldnumber+0x72>
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d10a      	bne.n	800a294 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d107      	bne.n	800a294 <get_ldnumber+0x72>
					vol = (int)i;
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	3301      	adds	r3, #1
 800a28c:	617b      	str	r3, [r7, #20]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	e002      	b.n	800a29e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a298:	2300      	movs	r3, #0
 800a29a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a29c:	693b      	ldr	r3, [r7, #16]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	371c      	adds	r7, #28
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
	...

0800a2ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	70da      	strb	r2, [r3, #3]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2c2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f7fe fffe 	bl	80092c8 <move_window>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <check_fs+0x2a>
 800a2d2:	2304      	movs	r3, #4
 800a2d4:	e038      	b.n	800a348 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	333c      	adds	r3, #60	; 0x3c
 800a2da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fe fd10 	bl	8008d04 <ld_word>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d001      	beq.n	800a2f4 <check_fs+0x48>
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e029      	b.n	800a348 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2fa:	2be9      	cmp	r3, #233	; 0xe9
 800a2fc:	d009      	beq.n	800a312 <check_fs+0x66>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a304:	2beb      	cmp	r3, #235	; 0xeb
 800a306:	d11e      	bne.n	800a346 <check_fs+0x9a>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a30e:	2b90      	cmp	r3, #144	; 0x90
 800a310:	d119      	bne.n	800a346 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	333c      	adds	r3, #60	; 0x3c
 800a316:	3336      	adds	r3, #54	; 0x36
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fe fd0b 	bl	8008d34 <ld_dword>
 800a31e:	4603      	mov	r3, r0
 800a320:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a324:	4a0a      	ldr	r2, [pc, #40]	; (800a350 <check_fs+0xa4>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d101      	bne.n	800a32e <check_fs+0x82>
 800a32a:	2300      	movs	r3, #0
 800a32c:	e00c      	b.n	800a348 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	333c      	adds	r3, #60	; 0x3c
 800a332:	3352      	adds	r3, #82	; 0x52
 800a334:	4618      	mov	r0, r3
 800a336:	f7fe fcfd 	bl	8008d34 <ld_dword>
 800a33a:	4603      	mov	r3, r0
 800a33c:	4a05      	ldr	r2, [pc, #20]	; (800a354 <check_fs+0xa8>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d101      	bne.n	800a346 <check_fs+0x9a>
 800a342:	2300      	movs	r3, #0
 800a344:	e000      	b.n	800a348 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a346:	2302      	movs	r3, #2
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	00544146 	.word	0x00544146
 800a354:	33544146 	.word	0x33544146

0800a358 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b096      	sub	sp, #88	; 0x58
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	4613      	mov	r3, r2
 800a364:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2200      	movs	r2, #0
 800a36a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f7ff ff58 	bl	800a222 <get_ldnumber>
 800a372:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a376:	2b00      	cmp	r3, #0
 800a378:	da01      	bge.n	800a37e <find_volume+0x26>
 800a37a:	230b      	movs	r3, #11
 800a37c:	e26d      	b.n	800a85a <find_volume+0x502>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a37e:	4aa3      	ldr	r2, [pc, #652]	; (800a60c <find_volume+0x2b4>)
 800a380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a386:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d101      	bne.n	800a392 <find_volume+0x3a>
 800a38e:	230c      	movs	r3, #12
 800a390:	e263      	b.n	800a85a <find_volume+0x502>

	ENTER_FF(fs);						/* Lock the volume */
 800a392:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a394:	f7fe fdb6 	bl	8008f04 <lock_fs>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <find_volume+0x4a>
 800a39e:	230f      	movs	r3, #15
 800a3a0:	e25b      	b.n	800a85a <find_volume+0x502>
	*rfs = fs;							/* Return pointer to the file system object */
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a3a8:	79fb      	ldrb	r3, [r7, #7]
 800a3aa:	f023 0301 	bic.w	r3, r3, #1
 800a3ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d01a      	beq.n	800a3ee <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ba:	785b      	ldrb	r3, [r3, #1]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7fe fc03 	bl	8008bc8 <disk_status>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a3c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3cc:	f003 0301 	and.w	r3, r3, #1
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d10c      	bne.n	800a3ee <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a3d4:	79fb      	ldrb	r3, [r7, #7]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d007      	beq.n	800a3ea <find_volume+0x92>
 800a3da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3de:	f003 0304 	and.w	r3, r3, #4
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d001      	beq.n	800a3ea <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a3e6:	230a      	movs	r3, #10
 800a3e8:	e237      	b.n	800a85a <find_volume+0x502>
			}
			return FR_OK;				/* The file system object is valid */
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e235      	b.n	800a85a <find_volume+0x502>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fe:	785b      	ldrb	r3, [r3, #1]
 800a400:	4618      	mov	r0, r3
 800a402:	f7fe fbfb 	bl	8008bfc <disk_initialize>
 800a406:	4603      	mov	r3, r0
 800a408:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a40c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a410:	f003 0301 	and.w	r3, r3, #1
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a418:	2303      	movs	r3, #3
 800a41a:	e21e      	b.n	800a85a <find_volume+0x502>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a41c:	79fb      	ldrb	r3, [r7, #7]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d007      	beq.n	800a432 <find_volume+0xda>
 800a422:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a426:	f003 0304 	and.w	r3, r3, #4
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a42e:	230a      	movs	r3, #10
 800a430:	e213      	b.n	800a85a <find_volume+0x502>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a434:	7858      	ldrb	r0, [r3, #1]
 800a436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a438:	330c      	adds	r3, #12
 800a43a:	461a      	mov	r2, r3
 800a43c:	2102      	movs	r1, #2
 800a43e:	f7fe fc43 	bl	8008cc8 <disk_ioctl>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <find_volume+0xf4>
 800a448:	2301      	movs	r3, #1
 800a44a:	e206      	b.n	800a85a <find_volume+0x502>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	899b      	ldrh	r3, [r3, #12]
 800a450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a454:	d80d      	bhi.n	800a472 <find_volume+0x11a>
 800a456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a458:	899b      	ldrh	r3, [r3, #12]
 800a45a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a45e:	d308      	bcc.n	800a472 <find_volume+0x11a>
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	899b      	ldrh	r3, [r3, #12]
 800a464:	461a      	mov	r2, r3
 800a466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a468:	899b      	ldrh	r3, [r3, #12]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	4013      	ands	r3, r2
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <find_volume+0x11e>
 800a472:	2301      	movs	r3, #1
 800a474:	e1f1      	b.n	800a85a <find_volume+0x502>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a476:	2300      	movs	r3, #0
 800a478:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a47a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a47c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a47e:	f7ff ff15 	bl	800a2ac <check_fs>
 800a482:	4603      	mov	r3, r0
 800a484:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a488:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d149      	bne.n	800a524 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a490:	2300      	movs	r3, #0
 800a492:	643b      	str	r3, [r7, #64]	; 0x40
 800a494:	e01e      	b.n	800a4d4 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a498:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a49c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a49e:	011b      	lsls	r3, r3, #4
 800a4a0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a4a4:	4413      	add	r3, r2
 800a4a6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4aa:	3304      	adds	r3, #4
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d006      	beq.n	800a4c0 <find_volume+0x168>
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b4:	3308      	adds	r3, #8
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe fc3c 	bl	8008d34 <ld_dword>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	e000      	b.n	800a4c2 <find_volume+0x16a>
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	3358      	adds	r3, #88	; 0x58
 800a4c8:	443b      	add	r3, r7
 800a4ca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a4ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	643b      	str	r3, [r7, #64]	; 0x40
 800a4d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4d6:	2b03      	cmp	r3, #3
 800a4d8:	d9dd      	bls.n	800a496 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a4da:	2300      	movs	r3, #0
 800a4dc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a4de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d002      	beq.n	800a4ea <find_volume+0x192>
 800a4e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a4ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	3358      	adds	r3, #88	; 0x58
 800a4f0:	443b      	add	r3, r7
 800a4f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a4f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a4f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d005      	beq.n	800a50a <find_volume+0x1b2>
 800a4fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a500:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a502:	f7ff fed3 	bl	800a2ac <check_fs>
 800a506:	4603      	mov	r3, r0
 800a508:	e000      	b.n	800a50c <find_volume+0x1b4>
 800a50a:	2303      	movs	r3, #3
 800a50c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a510:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a514:	2b01      	cmp	r3, #1
 800a516:	d905      	bls.n	800a524 <find_volume+0x1cc>
 800a518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a51a:	3301      	adds	r3, #1
 800a51c:	643b      	str	r3, [r7, #64]	; 0x40
 800a51e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a520:	2b03      	cmp	r3, #3
 800a522:	d9e2      	bls.n	800a4ea <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a524:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a528:	2b04      	cmp	r3, #4
 800a52a:	d101      	bne.n	800a530 <find_volume+0x1d8>
 800a52c:	2301      	movs	r3, #1
 800a52e:	e194      	b.n	800a85a <find_volume+0x502>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a530:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a534:	2b01      	cmp	r3, #1
 800a536:	d901      	bls.n	800a53c <find_volume+0x1e4>
 800a538:	230d      	movs	r3, #13
 800a53a:	e18e      	b.n	800a85a <find_volume+0x502>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53e:	333c      	adds	r3, #60	; 0x3c
 800a540:	330b      	adds	r3, #11
 800a542:	4618      	mov	r0, r3
 800a544:	f7fe fbde 	bl	8008d04 <ld_word>
 800a548:	4603      	mov	r3, r0
 800a54a:	461a      	mov	r2, r3
 800a54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54e:	899b      	ldrh	r3, [r3, #12]
 800a550:	429a      	cmp	r2, r3
 800a552:	d001      	beq.n	800a558 <find_volume+0x200>
 800a554:	230d      	movs	r3, #13
 800a556:	e180      	b.n	800a85a <find_volume+0x502>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55a:	333c      	adds	r3, #60	; 0x3c
 800a55c:	3316      	adds	r3, #22
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fe fbd0 	bl	8008d04 <ld_word>
 800a564:	4603      	mov	r3, r0
 800a566:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d106      	bne.n	800a57c <find_volume+0x224>
 800a56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a570:	333c      	adds	r3, #60	; 0x3c
 800a572:	3324      	adds	r3, #36	; 0x24
 800a574:	4618      	mov	r0, r3
 800a576:	f7fe fbdd 	bl	8008d34 <ld_dword>
 800a57a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a580:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a584:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800a588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	789b      	ldrb	r3, [r3, #2]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d005      	beq.n	800a5a0 <find_volume+0x248>
 800a594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a596:	789b      	ldrb	r3, [r3, #2]
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d001      	beq.n	800a5a0 <find_volume+0x248>
 800a59c:	230d      	movs	r3, #13
 800a59e:	e15c      	b.n	800a85a <find_volume+0x502>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	789b      	ldrb	r3, [r3, #2]
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5a8:	fb02 f303 	mul.w	r3, r2, r3
 800a5ac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5bc:	895b      	ldrh	r3, [r3, #10]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d008      	beq.n	800a5d4 <find_volume+0x27c>
 800a5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c4:	895b      	ldrh	r3, [r3, #10]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ca:	895b      	ldrh	r3, [r3, #10]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <find_volume+0x280>
 800a5d4:	230d      	movs	r3, #13
 800a5d6:	e140      	b.n	800a85a <find_volume+0x502>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5da:	333c      	adds	r3, #60	; 0x3c
 800a5dc:	3311      	adds	r3, #17
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe fb90 	bl	8008d04 <ld_word>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ee:	891b      	ldrh	r3, [r3, #8]
 800a5f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5f2:	8992      	ldrh	r2, [r2, #12]
 800a5f4:	0952      	lsrs	r2, r2, #5
 800a5f6:	b292      	uxth	r2, r2
 800a5f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5fc:	fb01 f202 	mul.w	r2, r1, r2
 800a600:	1a9b      	subs	r3, r3, r2
 800a602:	b29b      	uxth	r3, r3
 800a604:	2b00      	cmp	r3, #0
 800a606:	d003      	beq.n	800a610 <find_volume+0x2b8>
 800a608:	230d      	movs	r3, #13
 800a60a:	e126      	b.n	800a85a <find_volume+0x502>
 800a60c:	200024f4 	.word	0x200024f4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a612:	333c      	adds	r3, #60	; 0x3c
 800a614:	3313      	adds	r3, #19
 800a616:	4618      	mov	r0, r3
 800a618:	f7fe fb74 	bl	8008d04 <ld_word>
 800a61c:	4603      	mov	r3, r0
 800a61e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a622:	2b00      	cmp	r3, #0
 800a624:	d106      	bne.n	800a634 <find_volume+0x2dc>
 800a626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a628:	333c      	adds	r3, #60	; 0x3c
 800a62a:	3320      	adds	r3, #32
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fe fb81 	bl	8008d34 <ld_dword>
 800a632:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a636:	333c      	adds	r3, #60	; 0x3c
 800a638:	330e      	adds	r3, #14
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fe fb62 	bl	8008d04 <ld_word>
 800a640:	4603      	mov	r3, r0
 800a642:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a644:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <find_volume+0x2f6>
 800a64a:	230d      	movs	r3, #13
 800a64c:	e105      	b.n	800a85a <find_volume+0x502>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a64e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a652:	4413      	add	r3, r2
 800a654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a656:	8911      	ldrh	r1, [r2, #8]
 800a658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a65a:	8992      	ldrh	r2, [r2, #12]
 800a65c:	0952      	lsrs	r2, r2, #5
 800a65e:	b292      	uxth	r2, r2
 800a660:	fbb1 f2f2 	udiv	r2, r1, r2
 800a664:	b292      	uxth	r2, r2
 800a666:	4413      	add	r3, r2
 800a668:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a66a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	429a      	cmp	r2, r3
 800a670:	d201      	bcs.n	800a676 <find_volume+0x31e>
 800a672:	230d      	movs	r3, #13
 800a674:	e0f1      	b.n	800a85a <find_volume+0x502>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a67e:	8952      	ldrh	r2, [r2, #10]
 800a680:	fbb3 f3f2 	udiv	r3, r3, r2
 800a684:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <find_volume+0x338>
 800a68c:	230d      	movs	r3, #13
 800a68e:	e0e4      	b.n	800a85a <find_volume+0x502>
		fmt = FS_FAT32;
 800a690:	2303      	movs	r3, #3
 800a692:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d802      	bhi.n	800a6a6 <find_volume+0x34e>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d802      	bhi.n	800a6b6 <find_volume+0x35e>
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	1c9a      	adds	r2, r3, #2
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6c2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a6c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a6c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6c8:	441a      	add	r2, r3
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6cc:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800a6ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	441a      	add	r2, r3
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d6:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800a6d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6dc:	2b03      	cmp	r3, #3
 800a6de:	d11e      	bne.n	800a71e <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e2:	333c      	adds	r3, #60	; 0x3c
 800a6e4:	332a      	adds	r3, #42	; 0x2a
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fe fb0c 	bl	8008d04 <ld_word>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <find_volume+0x39e>
 800a6f2:	230d      	movs	r3, #13
 800a6f4:	e0b1      	b.n	800a85a <find_volume+0x502>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f8:	891b      	ldrh	r3, [r3, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <find_volume+0x3aa>
 800a6fe:	230d      	movs	r3, #13
 800a700:	e0ab      	b.n	800a85a <find_volume+0x502>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a704:	333c      	adds	r3, #60	; 0x3c
 800a706:	332c      	adds	r3, #44	; 0x2c
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fe fb13 	bl	8008d34 <ld_dword>
 800a70e:	4602      	mov	r2, r0
 800a710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a712:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a716:	6a1b      	ldr	r3, [r3, #32]
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	647b      	str	r3, [r7, #68]	; 0x44
 800a71c:	e01f      	b.n	800a75e <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a720:	891b      	ldrh	r3, [r3, #8]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <find_volume+0x3d2>
 800a726:	230d      	movs	r3, #13
 800a728:	e097      	b.n	800a85a <find_volume+0x502>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a72e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a730:	441a      	add	r2, r3
 800a732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a734:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a736:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d103      	bne.n	800a746 <find_volume+0x3ee>
 800a73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	005b      	lsls	r3, r3, #1
 800a744:	e00a      	b.n	800a75c <find_volume+0x404>
 800a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a748:	6a1a      	ldr	r2, [r3, #32]
 800a74a:	4613      	mov	r3, r2
 800a74c:	005b      	lsls	r3, r3, #1
 800a74e:	4413      	add	r3, r2
 800a750:	085a      	lsrs	r2, r3, #1
 800a752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	f003 0301 	and.w	r3, r3, #1
 800a75a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a75c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a764:	899b      	ldrh	r3, [r3, #12]
 800a766:	4619      	mov	r1, r3
 800a768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a76a:	440b      	add	r3, r1
 800a76c:	3b01      	subs	r3, #1
 800a76e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a770:	8989      	ldrh	r1, [r1, #12]
 800a772:	fbb3 f3f1 	udiv	r3, r3, r1
 800a776:	429a      	cmp	r2, r3
 800a778:	d201      	bcs.n	800a77e <find_volume+0x426>
 800a77a:	230d      	movs	r3, #13
 800a77c:	e06d      	b.n	800a85a <find_volume+0x502>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a784:	619a      	str	r2, [r3, #24]
 800a786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a788:	699a      	ldr	r2, [r3, #24]
 800a78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a790:	2280      	movs	r2, #128	; 0x80
 800a792:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a794:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d149      	bne.n	800a830 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79e:	333c      	adds	r3, #60	; 0x3c
 800a7a0:	3330      	adds	r3, #48	; 0x30
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fe faae 	bl	8008d04 <ld_word>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d140      	bne.n	800a830 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a7ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a7b6:	f7fe fd87 	bl	80092c8 <move_window>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d137      	bne.n	800a830 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c8:	333c      	adds	r3, #60	; 0x3c
 800a7ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fe fa98 	bl	8008d04 <ld_word>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d127      	bne.n	800a830 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e2:	333c      	adds	r3, #60	; 0x3c
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7fe faa5 	bl	8008d34 <ld_dword>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	4a1d      	ldr	r2, [pc, #116]	; (800a864 <find_volume+0x50c>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d11e      	bne.n	800a830 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f4:	333c      	adds	r3, #60	; 0x3c
 800a7f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fe fa9a 	bl	8008d34 <ld_dword>
 800a800:	4603      	mov	r3, r0
 800a802:	4a19      	ldr	r2, [pc, #100]	; (800a868 <find_volume+0x510>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d113      	bne.n	800a830 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80a:	333c      	adds	r3, #60	; 0x3c
 800a80c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a810:	4618      	mov	r0, r3
 800a812:	f7fe fa8f 	bl	8008d34 <ld_dword>
 800a816:	4602      	mov	r2, r0
 800a818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81e:	333c      	adds	r3, #60	; 0x3c
 800a820:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a824:	4618      	mov	r0, r3
 800a826:	f7fe fa85 	bl	8008d34 <ld_dword>
 800a82a:	4602      	mov	r2, r0
 800a82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a832:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a836:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a838:	4b0c      	ldr	r3, [pc, #48]	; (800a86c <find_volume+0x514>)
 800a83a:	881b      	ldrh	r3, [r3, #0]
 800a83c:	3301      	adds	r3, #1
 800a83e:	b29a      	uxth	r2, r3
 800a840:	4b0a      	ldr	r3, [pc, #40]	; (800a86c <find_volume+0x514>)
 800a842:	801a      	strh	r2, [r3, #0]
 800a844:	4b09      	ldr	r3, [pc, #36]	; (800a86c <find_volume+0x514>)
 800a846:	881a      	ldrh	r2, [r3, #0]
 800a848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84a:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800a84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84e:	2200      	movs	r2, #0
 800a850:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a852:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a854:	f7fe fcd0 	bl	80091f8 <clear_lock>
#endif
	return FR_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3758      	adds	r7, #88	; 0x58
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	41615252 	.word	0x41615252
 800a868:	61417272 	.word	0x61417272
 800a86c:	200024f8 	.word	0x200024f8

0800a870 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a87a:	2309      	movs	r3, #9
 800a87c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d02e      	beq.n	800a8e2 <validate+0x72>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d02a      	beq.n	800a8e2 <validate+0x72>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d025      	beq.n	800a8e2 <validate+0x72>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	889a      	ldrh	r2, [r3, #4]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	88db      	ldrh	r3, [r3, #6]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d11e      	bne.n	800a8e2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7fe fb2b 	bl	8008f04 <lock_fs>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d014      	beq.n	800a8de <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	785b      	ldrb	r3, [r3, #1]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fe f984 	bl	8008bc8 <disk_status>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	f003 0301 	and.w	r3, r3, #1
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d102      	bne.n	800a8d0 <validate+0x60>
				res = FR_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73fb      	strb	r3, [r7, #15]
 800a8ce:	e008      	b.n	800a8e2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fe fb2a 	bl	8008f30 <unlock_fs>
 800a8dc:	e001      	b.n	800a8e2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a8de:	230f      	movs	r3, #15
 800a8e0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d102      	bne.n	800a8ee <validate+0x7e>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	e000      	b.n	800a8f0 <validate+0x80>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	6013      	str	r3, [r2, #0]
	return res;
 800a8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
	...

0800a900 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b088      	sub	sp, #32
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	4613      	mov	r3, r2
 800a90c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a912:	f107 0310 	add.w	r3, r7, #16
 800a916:	4618      	mov	r0, r3
 800a918:	f7ff fc83 	bl	800a222 <get_ldnumber>
 800a91c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	2b00      	cmp	r3, #0
 800a922:	da01      	bge.n	800a928 <f_mount+0x28>
 800a924:	230b      	movs	r3, #11
 800a926:	e048      	b.n	800a9ba <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a928:	4a26      	ldr	r2, [pc, #152]	; (800a9c4 <f_mount+0xc4>)
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a930:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00f      	beq.n	800a958 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a938:	69b8      	ldr	r0, [r7, #24]
 800a93a:	f7fe fc5d 	bl	80091f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	4618      	mov	r0, r3
 800a944:	f000 fe7b 	bl	800b63e <ff_del_syncobj>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d101      	bne.n	800a952 <f_mount+0x52>
 800a94e:	2302      	movs	r3, #2
 800a950:	e033      	b.n	800a9ba <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	2200      	movs	r2, #0
 800a956:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00f      	beq.n	800a97e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	b2da      	uxtb	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	3310      	adds	r3, #16
 800a96c:	4619      	mov	r1, r3
 800a96e:	4610      	mov	r0, r2
 800a970:	f000 fe45 	bl	800b5fe <ff_cre_syncobj>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d101      	bne.n	800a97e <f_mount+0x7e>
 800a97a:	2302      	movs	r3, #2
 800a97c:	e01d      	b.n	800a9ba <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	4910      	ldr	r1, [pc, #64]	; (800a9c4 <f_mount+0xc4>)
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d002      	beq.n	800a994 <f_mount+0x94>
 800a98e:	79fb      	ldrb	r3, [r7, #7]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d001      	beq.n	800a998 <f_mount+0x98>
 800a994:	2300      	movs	r3, #0
 800a996:	e010      	b.n	800a9ba <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a998:	f107 010c 	add.w	r1, r7, #12
 800a99c:	f107 0308 	add.w	r3, r7, #8
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7ff fcd8 	bl	800a358 <find_volume>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	7dfa      	ldrb	r2, [r7, #23]
 800a9b0:	4611      	mov	r1, r2
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fe fabc 	bl	8008f30 <unlock_fs>
 800a9b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3720      	adds	r7, #32
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	200024f4 	.word	0x200024f4

0800a9c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b098      	sub	sp, #96	; 0x60
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d101      	bne.n	800a9e0 <f_open+0x18>
 800a9dc:	2309      	movs	r3, #9
 800a9de:	e1c2      	b.n	800ad66 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a9e0:	79fb      	ldrb	r3, [r7, #7]
 800a9e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a9e8:	79fa      	ldrb	r2, [r7, #7]
 800a9ea:	f107 0110 	add.w	r1, r7, #16
 800a9ee:	f107 0308 	add.w	r3, r7, #8
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7ff fcb0 	bl	800a358 <find_volume>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a9fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f040 819f 	bne.w	800ad46 <f_open+0x37e>
		dj.obj.fs = fs;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	f107 0314 	add.w	r3, r7, #20
 800aa12:	4611      	mov	r1, r2
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7ff fb6f 	bl	800a0f8 <follow_path>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800aa20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d11a      	bne.n	800aa5e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800aa28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aa2c:	b25b      	sxtb	r3, r3
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	da03      	bge.n	800aa3a <f_open+0x72>
				res = FR_INVALID_NAME;
 800aa32:	2306      	movs	r3, #6
 800aa34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa38:	e011      	b.n	800aa5e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa3a:	79fb      	ldrb	r3, [r7, #7]
 800aa3c:	f023 0301 	bic.w	r3, r3, #1
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	bf14      	ite	ne
 800aa44:	2301      	movne	r3, #1
 800aa46:	2300      	moveq	r3, #0
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	f107 0314 	add.w	r3, r7, #20
 800aa50:	4611      	mov	r1, r2
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fe fa88 	bl	8008f68 <chk_lock>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800aa5e:	79fb      	ldrb	r3, [r7, #7]
 800aa60:	f003 031c 	and.w	r3, r3, #28
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d07f      	beq.n	800ab68 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800aa68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d017      	beq.n	800aaa0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800aa70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa74:	2b04      	cmp	r3, #4
 800aa76:	d10e      	bne.n	800aa96 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800aa78:	f7fe fad2 	bl	8009020 <enq_lock>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d006      	beq.n	800aa90 <f_open+0xc8>
 800aa82:	f107 0314 	add.w	r3, r7, #20
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7ff fa3a 	bl	8009f00 <dir_register>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	e000      	b.n	800aa92 <f_open+0xca>
 800aa90:	2312      	movs	r3, #18
 800aa92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800aa96:	79fb      	ldrb	r3, [r7, #7]
 800aa98:	f043 0308 	orr.w	r3, r3, #8
 800aa9c:	71fb      	strb	r3, [r7, #7]
 800aa9e:	e010      	b.n	800aac2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800aaa0:	7ebb      	ldrb	r3, [r7, #26]
 800aaa2:	f003 0311 	and.w	r3, r3, #17
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d003      	beq.n	800aab2 <f_open+0xea>
					res = FR_DENIED;
 800aaaa:	2307      	movs	r3, #7
 800aaac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aab0:	e007      	b.n	800aac2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800aab2:	79fb      	ldrb	r3, [r7, #7]
 800aab4:	f003 0304 	and.w	r3, r3, #4
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d002      	beq.n	800aac2 <f_open+0xfa>
 800aabc:	2308      	movs	r3, #8
 800aabe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d168      	bne.n	800ab9c <f_open+0x1d4>
 800aaca:	79fb      	ldrb	r3, [r7, #7]
 800aacc:	f003 0308 	and.w	r3, r3, #8
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d063      	beq.n	800ab9c <f_open+0x1d4>
				dw = GET_FATTIME();
 800aad4:	f7fa fc6c 	bl	80053b0 <get_fattime>
 800aad8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800aada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aadc:	330e      	adds	r3, #14
 800aade:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fe f965 	bl	8008db0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800aae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae8:	3316      	adds	r3, #22
 800aaea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fe f95f 	bl	8008db0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800aaf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf4:	330b      	adds	r3, #11
 800aaf6:	2220      	movs	r2, #32
 800aaf8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aafe:	4611      	mov	r1, r2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7ff f969 	bl	8009dd8 <ld_clust>
 800ab06:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7ff f981 	bl	8009e16 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ab14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab16:	331c      	adds	r3, #28
 800ab18:	2100      	movs	r1, #0
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fe f948 	bl	8008db0 <st_dword>
					fs->wflag = 1;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	2201      	movs	r2, #1
 800ab24:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ab26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d037      	beq.n	800ab9c <f_open+0x1d4>
						dw = fs->winsect;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab30:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ab32:	f107 0314 	add.w	r3, r7, #20
 800ab36:	2200      	movs	r2, #0
 800ab38:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fe fe71 	bl	8009822 <remove_chain>
 800ab40:	4603      	mov	r3, r0
 800ab42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ab46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d126      	bne.n	800ab9c <f_open+0x1d4>
							res = move_window(fs, dw);
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7fe fbb8 	bl	80092c8 <move_window>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab62:	3a01      	subs	r2, #1
 800ab64:	615a      	str	r2, [r3, #20]
 800ab66:	e019      	b.n	800ab9c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ab68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d115      	bne.n	800ab9c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ab70:	7ebb      	ldrb	r3, [r7, #26]
 800ab72:	f003 0310 	and.w	r3, r3, #16
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d003      	beq.n	800ab82 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ab7a:	2304      	movs	r3, #4
 800ab7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ab80:	e00c      	b.n	800ab9c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ab82:	79fb      	ldrb	r3, [r7, #7]
 800ab84:	f003 0302 	and.w	r3, r3, #2
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d007      	beq.n	800ab9c <f_open+0x1d4>
 800ab8c:	7ebb      	ldrb	r3, [r7, #26]
 800ab8e:	f003 0301 	and.w	r3, r3, #1
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d002      	beq.n	800ab9c <f_open+0x1d4>
						res = FR_DENIED;
 800ab96:	2307      	movs	r3, #7
 800ab98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ab9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d128      	bne.n	800abf6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aba4:	79fb      	ldrb	r3, [r7, #7]
 800aba6:	f003 0308 	and.w	r3, r3, #8
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d003      	beq.n	800abb6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800abae:	79fb      	ldrb	r3, [r7, #7]
 800abb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abb4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800abbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800abc4:	79fb      	ldrb	r3, [r7, #7]
 800abc6:	f023 0301 	bic.w	r3, r3, #1
 800abca:	2b00      	cmp	r3, #0
 800abcc:	bf14      	ite	ne
 800abce:	2301      	movne	r3, #1
 800abd0:	2300      	moveq	r3, #0
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	461a      	mov	r2, r3
 800abd6:	f107 0314 	add.w	r3, r7, #20
 800abda:	4611      	mov	r1, r2
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fe fa41 	bl	8009064 <inc_lock>
 800abe2:	4602      	mov	r2, r0
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d102      	bne.n	800abf6 <f_open+0x22e>
 800abf0:	2302      	movs	r3, #2
 800abf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800abf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f040 80a3 	bne.w	800ad46 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac04:	4611      	mov	r1, r2
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7ff f8e6 	bl	8009dd8 <ld_clust>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ac12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac14:	331c      	adds	r3, #28
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7fe f88c 	bl	8008d34 <ld_dword>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2200      	movs	r2, #0
 800ac26:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ac28:	693a      	ldr	r2, [r7, #16]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	88da      	ldrh	r2, [r3, #6]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	79fa      	ldrb	r2, [r7, #7]
 800ac3a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	3330      	adds	r3, #48	; 0x30
 800ac52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ac56:	2100      	movs	r1, #0
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7fe f8f6 	bl	8008e4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ac5e:	79fb      	ldrb	r3, [r7, #7]
 800ac60:	f003 0320 	and.w	r3, r3, #32
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d06e      	beq.n	800ad46 <f_open+0x37e>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d06a      	beq.n	800ad46 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	68da      	ldr	r2, [r3, #12]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	895b      	ldrh	r3, [r3, #10]
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	899b      	ldrh	r3, [r3, #12]
 800ac82:	fb02 f303 	mul.w	r3, r2, r3
 800ac86:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	657b      	str	r3, [r7, #84]	; 0x54
 800ac94:	e016      	b.n	800acc4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fe fbd1 	bl	8009442 <get_fat>
 800aca0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800aca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d802      	bhi.n	800acae <f_open+0x2e6>
 800aca8:	2302      	movs	r3, #2
 800acaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800acae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acb4:	d102      	bne.n	800acbc <f_open+0x2f4>
 800acb6:	2301      	movs	r3, #1
 800acb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800acbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800acbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	657b      	str	r3, [r7, #84]	; 0x54
 800acc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d103      	bne.n	800acd4 <f_open+0x30c>
 800accc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800acce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d8e0      	bhi.n	800ac96 <f_open+0x2ce>
				}
				fp->clust = clst;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acd8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800acda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d131      	bne.n	800ad46 <f_open+0x37e>
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	899b      	ldrh	r3, [r3, #12]
 800ace6:	461a      	mov	r2, r3
 800ace8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acea:	fbb3 f1f2 	udiv	r1, r3, r2
 800acee:	fb01 f202 	mul.w	r2, r1, r2
 800acf2:	1a9b      	subs	r3, r3, r2
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d026      	beq.n	800ad46 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fe fb81 	bl	8009404 <clust2sect>
 800ad02:	6478      	str	r0, [r7, #68]	; 0x44
 800ad04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d103      	bne.n	800ad12 <f_open+0x34a>
						res = FR_INT_ERR;
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ad10:	e019      	b.n	800ad46 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	899b      	ldrh	r3, [r3, #12]
 800ad16:	461a      	mov	r2, r3
 800ad18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad1a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad20:	441a      	add	r2, r3
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	7858      	ldrb	r0, [r3, #1]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6a1a      	ldr	r2, [r3, #32]
 800ad34:	2301      	movs	r3, #1
 800ad36:	f7fd ff87 	bl	8008c48 <disk_read>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d002      	beq.n	800ad46 <f_open+0x37e>
 800ad40:	2301      	movs	r3, #1
 800ad42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ad46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d002      	beq.n	800ad54 <f_open+0x38c>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7fe f8e7 	bl	8008f30 <unlock_fs>
 800ad62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3760      	adds	r7, #96	; 0x60
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b08c      	sub	sp, #48	; 0x30
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	60f8      	str	r0, [r7, #12]
 800ad76:	60b9      	str	r1, [r7, #8]
 800ad78:	607a      	str	r2, [r7, #4]
 800ad7a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	2200      	movs	r2, #0
 800ad84:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f107 0210 	add.w	r2, r7, #16
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7ff fd6e 	bl	800a870 <validate>
 800ad94:	4603      	mov	r3, r0
 800ad96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ad9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d107      	bne.n	800adb2 <f_write+0x44>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	7d5b      	ldrb	r3, [r3, #21]
 800ada6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800adaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d009      	beq.n	800adc6 <f_write+0x58>
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800adb8:	4611      	mov	r1, r2
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fe f8b8 	bl	8008f30 <unlock_fs>
 800adc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adc4:	e192      	b.n	800b0ec <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	7d1b      	ldrb	r3, [r3, #20]
 800adca:	f003 0302 	and.w	r3, r3, #2
 800adce:	2b00      	cmp	r3, #0
 800add0:	d106      	bne.n	800ade0 <f_write+0x72>
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	2107      	movs	r1, #7
 800add6:	4618      	mov	r0, r3
 800add8:	f7fe f8aa 	bl	8008f30 <unlock_fs>
 800addc:	2307      	movs	r3, #7
 800adde:	e185      	b.n	800b0ec <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	699a      	ldr	r2, [r3, #24]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	441a      	add	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	699b      	ldr	r3, [r3, #24]
 800adec:	429a      	cmp	r2, r3
 800adee:	f080 816a 	bcs.w	800b0c6 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	43db      	mvns	r3, r3
 800adf8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800adfa:	e164      	b.n	800b0c6 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	8992      	ldrh	r2, [r2, #12]
 800ae04:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae08:	fb01 f202 	mul.w	r2, r1, r2
 800ae0c:	1a9b      	subs	r3, r3, r2
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f040 810f 	bne.w	800b032 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	8992      	ldrh	r2, [r2, #12]
 800ae1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	8952      	ldrh	r2, [r2, #10]
 800ae24:	3a01      	subs	r2, #1
 800ae26:	4013      	ands	r3, r2
 800ae28:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d14d      	bne.n	800aecc <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d10c      	bne.n	800ae52 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ae3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d11a      	bne.n	800ae7a <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2100      	movs	r1, #0
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7fe fd4f 	bl	80098ec <create_chain>
 800ae4e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ae50:	e013      	b.n	800ae7a <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d007      	beq.n	800ae6a <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	699b      	ldr	r3, [r3, #24]
 800ae5e:	4619      	mov	r1, r3
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f7fe fddb 	bl	8009a1c <clmt_clust>
 800ae66:	62b8      	str	r0, [r7, #40]	; 0x28
 800ae68:	e007      	b.n	800ae7a <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	69db      	ldr	r3, [r3, #28]
 800ae70:	4619      	mov	r1, r3
 800ae72:	4610      	mov	r0, r2
 800ae74:	f7fe fd3a 	bl	80098ec <create_chain>
 800ae78:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f000 8127 	beq.w	800b0d0 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ae82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d109      	bne.n	800ae9c <f_write+0x12e>
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	755a      	strb	r2, [r3, #21]
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	2102      	movs	r1, #2
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fe f84c 	bl	8008f30 <unlock_fs>
 800ae98:	2302      	movs	r3, #2
 800ae9a:	e127      	b.n	800b0ec <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aea2:	d109      	bne.n	800aeb8 <f_write+0x14a>
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2201      	movs	r2, #1
 800aea8:	755a      	strb	r2, [r3, #21]
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	2101      	movs	r1, #1
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fe f83e 	bl	8008f30 <unlock_fs>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e119      	b.n	800b0ec <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aebc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d102      	bne.n	800aecc <f_write+0x15e>
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeca:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	7d1b      	ldrb	r3, [r3, #20]
 800aed0:	b25b      	sxtb	r3, r3
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	da1d      	bge.n	800af12 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	7858      	ldrb	r0, [r3, #1]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6a1a      	ldr	r2, [r3, #32]
 800aee4:	2301      	movs	r3, #1
 800aee6:	f7fd fecf 	bl	8008c88 <disk_write>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d009      	beq.n	800af04 <f_write+0x196>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2201      	movs	r2, #1
 800aef4:	755a      	strb	r2, [r3, #21]
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	2101      	movs	r1, #1
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fe f818 	bl	8008f30 <unlock_fs>
 800af00:	2301      	movs	r3, #1
 800af02:	e0f3      	b.n	800b0ec <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	7d1b      	ldrb	r3, [r3, #20]
 800af08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af0c:	b2da      	uxtb	r2, r3
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	69db      	ldr	r3, [r3, #28]
 800af18:	4619      	mov	r1, r3
 800af1a:	4610      	mov	r0, r2
 800af1c:	f7fe fa72 	bl	8009404 <clust2sect>
 800af20:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d109      	bne.n	800af3c <f_write+0x1ce>
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2202      	movs	r2, #2
 800af2c:	755a      	strb	r2, [r3, #21]
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	2102      	movs	r1, #2
 800af32:	4618      	mov	r0, r3
 800af34:	f7fd fffc 	bl	8008f30 <unlock_fs>
 800af38:	2302      	movs	r3, #2
 800af3a:	e0d7      	b.n	800b0ec <f_write+0x37e>
			sect += csect;
 800af3c:	697a      	ldr	r2, [r7, #20]
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	4413      	add	r3, r2
 800af42:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	899b      	ldrh	r3, [r3, #12]
 800af48:	461a      	mov	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af50:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800af52:	6a3b      	ldr	r3, [r7, #32]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d048      	beq.n	800afea <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800af58:	69ba      	ldr	r2, [r7, #24]
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	4413      	add	r3, r2
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	8952      	ldrh	r2, [r2, #10]
 800af62:	4293      	cmp	r3, r2
 800af64:	d905      	bls.n	800af72 <f_write+0x204>
					cc = fs->csize - csect;
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	895b      	ldrh	r3, [r3, #10]
 800af6a:	461a      	mov	r2, r3
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	7858      	ldrb	r0, [r3, #1]
 800af76:	6a3b      	ldr	r3, [r7, #32]
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	69f9      	ldr	r1, [r7, #28]
 800af7c:	f7fd fe84 	bl	8008c88 <disk_write>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d009      	beq.n	800af9a <f_write+0x22c>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2201      	movs	r2, #1
 800af8a:	755a      	strb	r2, [r3, #21]
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	2101      	movs	r1, #1
 800af90:	4618      	mov	r0, r3
 800af92:	f7fd ffcd 	bl	8008f30 <unlock_fs>
 800af96:	2301      	movs	r3, #1
 800af98:	e0a8      	b.n	800b0ec <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6a1a      	ldr	r2, [r3, #32]
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	6a3a      	ldr	r2, [r7, #32]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d918      	bls.n	800afda <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6a1a      	ldr	r2, [r3, #32]
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	8992      	ldrh	r2, [r2, #12]
 800afba:	fb02 f303 	mul.w	r3, r2, r3
 800afbe:	69fa      	ldr	r2, [r7, #28]
 800afc0:	18d1      	adds	r1, r2, r3
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	899b      	ldrh	r3, [r3, #12]
 800afc6:	461a      	mov	r2, r3
 800afc8:	f7fd ff1e 	bl	8008e08 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	7d1b      	ldrb	r3, [r3, #20]
 800afd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	899b      	ldrh	r3, [r3, #12]
 800afde:	461a      	mov	r2, r3
 800afe0:	6a3b      	ldr	r3, [r7, #32]
 800afe2:	fb02 f303 	mul.w	r3, r2, r3
 800afe6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800afe8:	e050      	b.n	800b08c <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d01b      	beq.n	800b02c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	699a      	ldr	r2, [r3, #24]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800affc:	429a      	cmp	r2, r3
 800affe:	d215      	bcs.n	800b02c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	7858      	ldrb	r0, [r3, #1]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b00a:	2301      	movs	r3, #1
 800b00c:	697a      	ldr	r2, [r7, #20]
 800b00e:	f7fd fe1b 	bl	8008c48 <disk_read>
 800b012:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b014:	2b00      	cmp	r3, #0
 800b016:	d009      	beq.n	800b02c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2201      	movs	r2, #1
 800b01c:	755a      	strb	r2, [r3, #21]
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	2101      	movs	r1, #1
 800b022:	4618      	mov	r0, r3
 800b024:	f7fd ff84 	bl	8008f30 <unlock_fs>
 800b028:	2301      	movs	r3, #1
 800b02a:	e05f      	b.n	800b0ec <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	697a      	ldr	r2, [r7, #20]
 800b030:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	899b      	ldrh	r3, [r3, #12]
 800b036:	4618      	mov	r0, r3
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	8992      	ldrh	r2, [r2, #12]
 800b040:	fbb3 f1f2 	udiv	r1, r3, r2
 800b044:	fb01 f202 	mul.w	r2, r1, r2
 800b048:	1a9b      	subs	r3, r3, r2
 800b04a:	1ac3      	subs	r3, r0, r3
 800b04c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b04e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	429a      	cmp	r2, r3
 800b054:	d901      	bls.n	800b05a <f_write+0x2ec>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	693a      	ldr	r2, [r7, #16]
 800b066:	8992      	ldrh	r2, [r2, #12]
 800b068:	fbb3 f0f2 	udiv	r0, r3, r2
 800b06c:	fb00 f202 	mul.w	r2, r0, r2
 800b070:	1a9b      	subs	r3, r3, r2
 800b072:	440b      	add	r3, r1
 800b074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b076:	69f9      	ldr	r1, [r7, #28]
 800b078:	4618      	mov	r0, r3
 800b07a:	f7fd fec5 	bl	8008e08 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	7d1b      	ldrb	r3, [r3, #20]
 800b082:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b086:	b2da      	uxtb	r2, r3
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b08c:	69fa      	ldr	r2, [r7, #28]
 800b08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b090:	4413      	add	r3, r2
 800b092:	61fb      	str	r3, [r7, #28]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	699a      	ldr	r2, [r3, #24]
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	441a      	add	r2, r3
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	619a      	str	r2, [r3, #24]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	68da      	ldr	r2, [r3, #12]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	bf38      	it	cc
 800b0ac:	461a      	movcc	r2, r3
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	60da      	str	r2, [r3, #12]
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b8:	441a      	add	r2, r3
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	601a      	str	r2, [r3, #0]
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c2:	1ad3      	subs	r3, r2, r3
 800b0c4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f47f ae97 	bne.w	800adfc <f_write+0x8e>
 800b0ce:	e000      	b.n	800b0d2 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b0d0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	7d1b      	ldrb	r3, [r3, #20]
 800b0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0da:	b2da      	uxtb	r2, r3
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7fd ff23 	bl	8008f30 <unlock_fs>
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3730      	adds	r7, #48	; 0x30
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f107 0208 	add.w	r2, r7, #8
 800b102:	4611      	mov	r1, r2
 800b104:	4618      	mov	r0, r3
 800b106:	f7ff fbb3 	bl	800a870 <validate>
 800b10a:	4603      	mov	r3, r0
 800b10c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b10e:	7dfb      	ldrb	r3, [r7, #23]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d16d      	bne.n	800b1f0 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	7d1b      	ldrb	r3, [r3, #20]
 800b118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d067      	beq.n	800b1f0 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	7d1b      	ldrb	r3, [r3, #20]
 800b124:	b25b      	sxtb	r3, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	da1a      	bge.n	800b160 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	7858      	ldrb	r0, [r3, #1]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a1a      	ldr	r2, [r3, #32]
 800b138:	2301      	movs	r3, #1
 800b13a:	f7fd fda5 	bl	8008c88 <disk_write>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d006      	beq.n	800b152 <f_sync+0x5e>
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	2101      	movs	r1, #1
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fd fef1 	bl	8008f30 <unlock_fs>
 800b14e:	2301      	movs	r3, #1
 800b150:	e055      	b.n	800b1fe <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	7d1b      	ldrb	r3, [r3, #20]
 800b156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b160:	f7fa f926 	bl	80053b0 <get_fattime>
 800b164:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16c:	4619      	mov	r1, r3
 800b16e:	4610      	mov	r0, r2
 800b170:	f7fe f8aa 	bl	80092c8 <move_window>
 800b174:	4603      	mov	r3, r0
 800b176:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b178:	7dfb      	ldrb	r3, [r7, #23]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d138      	bne.n	800b1f0 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b182:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	330b      	adds	r3, #11
 800b188:	781a      	ldrb	r2, [r3, #0]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	330b      	adds	r3, #11
 800b18e:	f042 0220 	orr.w	r2, r2, #32
 800b192:	b2d2      	uxtb	r2, r2
 800b194:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6818      	ldr	r0, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	68f9      	ldr	r1, [r7, #12]
 800b1a2:	f7fe fe38 	bl	8009e16 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f103 021c 	add.w	r2, r3, #28
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	f7fd fdfc 	bl	8008db0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	3316      	adds	r3, #22
 800b1bc:	6939      	ldr	r1, [r7, #16]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7fd fdf6 	bl	8008db0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	3312      	adds	r3, #18
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fd fdd5 	bl	8008d7a <st_word>
					fs->wflag = 1;
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fe f8a3 	bl	8009324 <sync_fs>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	7d1b      	ldrb	r3, [r3, #20]
 800b1e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	7dfa      	ldrb	r2, [r7, #23]
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fd fe9a 	bl	8008f30 <unlock_fs>
 800b1fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3718      	adds	r7, #24
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b084      	sub	sp, #16
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7ff ff70 	bl	800b0f4 <f_sync>
 800b214:	4603      	mov	r3, r0
 800b216:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d11d      	bne.n	800b25a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f107 0208 	add.w	r2, r7, #8
 800b224:	4611      	mov	r1, r2
 800b226:	4618      	mov	r0, r3
 800b228:	f7ff fb22 	bl	800a870 <validate>
 800b22c:	4603      	mov	r3, r0
 800b22e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b230:	7bfb      	ldrb	r3, [r7, #15]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d111      	bne.n	800b25a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7fd ffa0 	bl	8009180 <dec_lock>
 800b240:	4603      	mov	r3, r0
 800b242:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b244:	7bfb      	ldrb	r3, [r7, #15]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d102      	bne.n	800b250 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2100      	movs	r1, #0
 800b254:	4618      	mov	r0, r3
 800b256:	f7fd fe6b 	bl	8008f30 <unlock_fs>
#endif
		}
	}
	return res;
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b264:	b590      	push	{r4, r7, lr}
 800b266:	b091      	sub	sp, #68	; 0x44
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b26c:	f107 0108 	add.w	r1, r7, #8
 800b270:	1d3b      	adds	r3, r7, #4
 800b272:	2200      	movs	r2, #0
 800b274:	4618      	mov	r0, r3
 800b276:	f7ff f86f 	bl	800a358 <find_volume>
 800b27a:	4603      	mov	r3, r0
 800b27c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800b280:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b284:	2b00      	cmp	r3, #0
 800b286:	d131      	bne.n	800b2ec <f_chdir+0x88>
		dj.obj.fs = fs;
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	f107 030c 	add.w	r3, r7, #12
 800b292:	4611      	mov	r1, r2
 800b294:	4618      	mov	r0, r3
 800b296:	f7fe ff2f 	bl	800a0f8 <follow_path>
 800b29a:	4603      	mov	r3, r0
 800b29c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 800b2a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d11a      	bne.n	800b2de <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b2a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b2ac:	b25b      	sxtb	r3, r3
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	da03      	bge.n	800b2ba <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	697a      	ldr	r2, [r7, #20]
 800b2b6:	61da      	str	r2, [r3, #28]
 800b2b8:	e011      	b.n	800b2de <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 800b2ba:	7cbb      	ldrb	r3, [r7, #18]
 800b2bc:	f003 0310 	and.w	r3, r3, #16
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d009      	beq.n	800b2d8 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2c8:	68bc      	ldr	r4, [r7, #8]
 800b2ca:	4611      	mov	r1, r2
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7fe fd83 	bl	8009dd8 <ld_clust>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	61e3      	str	r3, [r4, #28]
 800b2d6:	e002      	b.n	800b2de <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 800b2d8:	2305      	movs	r3, #5
 800b2da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b2de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b2e2:	2b04      	cmp	r3, #4
 800b2e4:	d102      	bne.n	800b2ec <f_chdir+0x88>
 800b2e6:	2305      	movs	r3, #5
 800b2e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b2f2:	4611      	mov	r1, r2
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7fd fe1b 	bl	8008f30 <unlock_fs>
 800b2fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3744      	adds	r7, #68	; 0x44
 800b302:	46bd      	mov	sp, r7
 800b304:	bd90      	pop	{r4, r7, pc}

0800b306 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b096      	sub	sp, #88	; 0x58
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b30e:	f107 0108 	add.w	r1, r7, #8
 800b312:	1d3b      	adds	r3, r7, #4
 800b314:	2202      	movs	r2, #2
 800b316:	4618      	mov	r0, r3
 800b318:	f7ff f81e 	bl	800a358 <find_volume>
 800b31c:	4603      	mov	r3, r0
 800b31e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800b326:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f040 80ff 	bne.w	800b52e <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	f107 030c 	add.w	r3, r7, #12
 800b336:	4611      	mov	r1, r2
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fe fedd 	bl	800a0f8 <follow_path>
 800b33e:	4603      	mov	r3, r0
 800b340:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800b344:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d102      	bne.n	800b352 <f_mkdir+0x4c>
 800b34c:	2308      	movs	r3, #8
 800b34e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 800b352:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b356:	2b04      	cmp	r3, #4
 800b358:	d108      	bne.n	800b36c <f_mkdir+0x66>
 800b35a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b35e:	f003 0320 	and.w	r3, r3, #32
 800b362:	2b00      	cmp	r3, #0
 800b364:	d002      	beq.n	800b36c <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 800b366:	2306      	movs	r3, #6
 800b368:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800b36c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b370:	2b04      	cmp	r3, #4
 800b372:	f040 80dc 	bne.w	800b52e <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800b376:	f107 030c 	add.w	r3, r7, #12
 800b37a:	2100      	movs	r1, #0
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7fe fab5 	bl	80098ec <create_chain>
 800b382:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	895b      	ldrh	r3, [r3, #10]
 800b388:	461a      	mov	r2, r3
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	899b      	ldrh	r3, [r3, #12]
 800b38e:	fb02 f303 	mul.w	r3, r2, r3
 800b392:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800b394:	2300      	movs	r3, #0
 800b396:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800b39a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d102      	bne.n	800b3a6 <f_mkdir+0xa0>
 800b3a0:	2307      	movs	r3, #7
 800b3a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800b3a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d102      	bne.n	800b3b2 <f_mkdir+0xac>
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b3b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3b8:	d102      	bne.n	800b3c0 <f_mkdir+0xba>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800b3c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d106      	bne.n	800b3d6 <f_mkdir+0xd0>
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fd ff38 	bl	8009240 <sync_window>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800b3d6:	f7f9 ffeb 	bl	80053b0 <get_fattime>
 800b3da:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800b3dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d16c      	bne.n	800b4be <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7fe f80b 	bl	8009404 <clust2sect>
 800b3ee:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	333c      	adds	r3, #60	; 0x3c
 800b3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	899b      	ldrh	r3, [r3, #12]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b400:	f7fd fd23 	bl	8008e4a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800b404:	220b      	movs	r2, #11
 800b406:	2120      	movs	r1, #32
 800b408:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b40a:	f7fd fd1e 	bl	8008e4a <mem_set>
					dir[DIR_Name] = '.';
 800b40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b410:	222e      	movs	r2, #46	; 0x2e
 800b412:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800b414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b416:	330b      	adds	r3, #11
 800b418:	2210      	movs	r2, #16
 800b41a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800b41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b41e:	3316      	adds	r3, #22
 800b420:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b422:	4618      	mov	r0, r3
 800b424:	f7fd fcc4 	bl	8008db0 <st_dword>
					st_clust(fs, dir, dcl);
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b42c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fe fcf1 	bl	8009e16 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800b434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b436:	3320      	adds	r3, #32
 800b438:	2220      	movs	r2, #32
 800b43a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fd fce3 	bl	8008e08 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800b442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b444:	3321      	adds	r3, #33	; 0x21
 800b446:	222e      	movs	r2, #46	; 0x2e
 800b448:	701a      	strb	r2, [r3, #0]
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	2b03      	cmp	r3, #3
 800b454:	d106      	bne.n	800b464 <f_mkdir+0x15e>
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b45a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d101      	bne.n	800b464 <f_mkdir+0x15e>
 800b460:	2300      	movs	r3, #0
 800b462:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800b464:	68b8      	ldr	r0, [r7, #8]
 800b466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b468:	3320      	adds	r3, #32
 800b46a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b46c:	4619      	mov	r1, r3
 800b46e:	f7fe fcd2 	bl	8009e16 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	895b      	ldrh	r3, [r3, #10]
 800b476:	653b      	str	r3, [r7, #80]	; 0x50
 800b478:	e01c      	b.n	800b4b4 <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 800b47a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b47c:	1c5a      	adds	r2, r3, #1
 800b47e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	2201      	movs	r2, #1
 800b488:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7fd fed7 	bl	8009240 <sync_window>
 800b492:	4603      	mov	r3, r0
 800b494:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800b498:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10d      	bne.n	800b4bc <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	899b      	ldrh	r3, [r3, #12]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b4aa:	f7fd fcce 	bl	8008e4a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b4ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	653b      	str	r3, [r7, #80]	; 0x50
 800b4b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d1df      	bne.n	800b47a <f_mkdir+0x174>
 800b4ba:	e000      	b.n	800b4be <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 800b4bc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800b4be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d107      	bne.n	800b4d6 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800b4c6:	f107 030c 	add.w	r3, r7, #12
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7fe fd18 	bl	8009f00 <dir_register>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800b4d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d120      	bne.n	800b520 <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800b4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800b4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e4:	3316      	adds	r3, #22
 800b4e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7fd fc61 	bl	8008db0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7fe fc8e 	bl	8009e16 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800b4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4fc:	330b      	adds	r3, #11
 800b4fe:	2210      	movs	r2, #16
 800b500:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	2201      	movs	r2, #1
 800b506:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800b508:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10e      	bne.n	800b52e <f_mkdir+0x228>
					res = sync_fs(fs);
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	4618      	mov	r0, r3
 800b514:	f7fd ff06 	bl	8009324 <sync_fs>
 800b518:	4603      	mov	r3, r0
 800b51a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b51e:	e006      	b.n	800b52e <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800b520:	f107 030c 	add.w	r3, r7, #12
 800b524:	2200      	movs	r2, #0
 800b526:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fe f97a 	bl	8009822 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b534:	4611      	mov	r1, r2
 800b536:	4618      	mov	r0, r3
 800b538:	f7fd fcfa 	bl	8008f30 <unlock_fs>
 800b53c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800b540:	4618      	mov	r0, r3
 800b542:	3758      	adds	r7, #88	; 0x58
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b548:	b480      	push	{r7}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	4613      	mov	r3, r2
 800b554:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b556:	2301      	movs	r3, #1
 800b558:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b55e:	4b1f      	ldr	r3, [pc, #124]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b560:	7a5b      	ldrb	r3, [r3, #9]
 800b562:	b2db      	uxtb	r3, r3
 800b564:	2b00      	cmp	r3, #0
 800b566:	d131      	bne.n	800b5cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b568:	4b1c      	ldr	r3, [pc, #112]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b56a:	7a5b      	ldrb	r3, [r3, #9]
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	461a      	mov	r2, r3
 800b570:	4b1a      	ldr	r3, [pc, #104]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b572:	2100      	movs	r1, #0
 800b574:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b576:	4b19      	ldr	r3, [pc, #100]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b578:	7a5b      	ldrb	r3, [r3, #9]
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	4a17      	ldr	r2, [pc, #92]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	4413      	add	r3, r2
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b586:	4b15      	ldr	r3, [pc, #84]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b588:	7a5b      	ldrb	r3, [r3, #9]
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	461a      	mov	r2, r3
 800b58e:	4b13      	ldr	r3, [pc, #76]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b590:	4413      	add	r3, r2
 800b592:	79fa      	ldrb	r2, [r7, #7]
 800b594:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b596:	4b11      	ldr	r3, [pc, #68]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b598:	7a5b      	ldrb	r3, [r3, #9]
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	1c5a      	adds	r2, r3, #1
 800b59e:	b2d1      	uxtb	r1, r2
 800b5a0:	4a0e      	ldr	r2, [pc, #56]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b5a2:	7251      	strb	r1, [r2, #9]
 800b5a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b5a6:	7dbb      	ldrb	r3, [r7, #22]
 800b5a8:	3330      	adds	r3, #48	; 0x30
 800b5aa:	b2da      	uxtb	r2, r3
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	223a      	movs	r2, #58	; 0x3a
 800b5b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	3302      	adds	r3, #2
 800b5bc:	222f      	movs	r2, #47	; 0x2f
 800b5be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	3303      	adds	r3, #3
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b5cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	371c      	adds	r7, #28
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	2000251c 	.word	0x2000251c

0800b5e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	6839      	ldr	r1, [r7, #0]
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7ff ffaa 	bl	800b548 <FATFS_LinkDriverEx>
 800b5f4:	4603      	mov	r3, r0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b086      	sub	sp, #24
 800b602:	af00      	add	r7, sp, #0
 800b604:	4603      	mov	r3, r0
 800b606:	6039      	str	r1, [r7, #0]
 800b608:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800b60a:	2300      	movs	r3, #0
 800b60c:	60fb      	str	r3, [r7, #12]
 800b60e:	2300      	movs	r3, #0
 800b610:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800b612:	f107 030c 	add.w	r3, r7, #12
 800b616:	2101      	movs	r1, #1
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 f8cd 	bl	800b7b8 <osSemaphoreCreate>
 800b61e:	4602      	mov	r2, r0
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	bf14      	ite	ne
 800b62c:	2301      	movne	r3, #1
 800b62e:	2300      	moveq	r3, #0
 800b630:	b2db      	uxtb	r3, r3
 800b632:	617b      	str	r3, [r7, #20]

    return ret;
 800b634:	697b      	ldr	r3, [r7, #20]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3718      	adds	r7, #24
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b082      	sub	sp, #8
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f96c 	bl	800b924 <osSemaphoreDelete>
#endif
    return 1;
 800b64c:	2301      	movs	r3, #1
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b084      	sub	sp, #16
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800b65e:	2300      	movs	r3, #0
 800b660:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800b662:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f8d8 	bl	800b81c <osSemaphoreWait>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800b672:	2301      	movs	r3, #1
 800b674:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b676:	68fb      	ldr	r3, [r7, #12]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f915 	bl	800b8b8 <osSemaphoreRelease>
#endif
}
 800b68e:	bf00      	nop
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b696:	b480      	push	{r7}
 800b698:	b085      	sub	sp, #20
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	4603      	mov	r3, r0
 800b69e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b6a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b6a8:	2b84      	cmp	r3, #132	; 0x84
 800b6aa:	d005      	beq.n	800b6b8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b6ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	3303      	adds	r3, #3
 800b6b6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3714      	adds	r7, #20
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr

0800b6c6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	b083      	sub	sp, #12
 800b6ca:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6cc:	f3ef 8305 	mrs	r3, IPSR
 800b6d0:	607b      	str	r3, [r7, #4]
  return(result);
 800b6d2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	bf14      	ite	ne
 800b6d8:	2301      	movne	r3, #1
 800b6da:	2300      	moveq	r3, #0
 800b6dc:	b2db      	uxtb	r3, r3
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b6ee:	f001 fbdd 	bl	800ceac <vTaskStartScheduler>
  
  return osOK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6fa:	b089      	sub	sp, #36	; 0x24
 800b6fc:	af04      	add	r7, sp, #16
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	695b      	ldr	r3, [r3, #20]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d020      	beq.n	800b74c <osThreadCreate+0x54>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	699b      	ldr	r3, [r3, #24]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d01c      	beq.n	800b74c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685c      	ldr	r4, [r3, #4]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681d      	ldr	r5, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	691e      	ldr	r6, [r3, #16]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b724:	4618      	mov	r0, r3
 800b726:	f7ff ffb6 	bl	800b696 <makeFreeRtosPriority>
 800b72a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	695b      	ldr	r3, [r3, #20]
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b734:	9202      	str	r2, [sp, #8]
 800b736:	9301      	str	r3, [sp, #4]
 800b738:	9100      	str	r1, [sp, #0]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	4632      	mov	r2, r6
 800b73e:	4629      	mov	r1, r5
 800b740:	4620      	mov	r0, r4
 800b742:	f001 f9d5 	bl	800caf0 <xTaskCreateStatic>
 800b746:	4603      	mov	r3, r0
 800b748:	60fb      	str	r3, [r7, #12]
 800b74a:	e01c      	b.n	800b786 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685c      	ldr	r4, [r3, #4]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b758:	b29e      	uxth	r6, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b760:	4618      	mov	r0, r3
 800b762:	f7ff ff98 	bl	800b696 <makeFreeRtosPriority>
 800b766:	4602      	mov	r2, r0
 800b768:	f107 030c 	add.w	r3, r7, #12
 800b76c:	9301      	str	r3, [sp, #4]
 800b76e:	9200      	str	r2, [sp, #0]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	4632      	mov	r2, r6
 800b774:	4629      	mov	r1, r5
 800b776:	4620      	mov	r0, r4
 800b778:	f001 fa17 	bl	800cbaa <xTaskCreate>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d001      	beq.n	800b786 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b782:	2300      	movs	r3, #0
 800b784:	e000      	b.n	800b788 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b786:	68fb      	ldr	r3, [r7, #12]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b790 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <osDelay+0x16>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	e000      	b.n	800b7a8 <osDelay+0x18>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f001 fb4b 	bl	800ce44 <vTaskDelay>
  
  return osOK;
 800b7ae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af02      	add	r7, sp, #8
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00f      	beq.n	800b7ea <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d10a      	bne.n	800b7e6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	2203      	movs	r2, #3
 800b7d6:	9200      	str	r2, [sp, #0]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	2100      	movs	r1, #0
 800b7dc:	2001      	movs	r0, #1
 800b7de:	f000 faad 	bl	800bd3c <xQueueGenericCreateStatic>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	e016      	b.n	800b814 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	e014      	b.n	800b814 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d110      	bne.n	800b812 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b7f0:	2203      	movs	r2, #3
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	2001      	movs	r0, #1
 800b7f6:	f000 fb19 	bl	800be2c <xQueueGenericCreate>
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d005      	beq.n	800b80e <osSemaphoreCreate+0x56>
 800b802:	2300      	movs	r3, #0
 800b804:	2200      	movs	r2, #0
 800b806:	2100      	movs	r1, #0
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 fb69 	bl	800bee0 <xQueueGenericSend>
      return sema;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	e000      	b.n	800b814 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b812:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b826:	2300      	movs	r3, #0
 800b828:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d101      	bne.n	800b834 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b830:	2380      	movs	r3, #128	; 0x80
 800b832:	e03a      	b.n	800b8aa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b834:	2300      	movs	r3, #0
 800b836:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b83e:	d103      	bne.n	800b848 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b844:	60fb      	str	r3, [r7, #12]
 800b846:	e009      	b.n	800b85c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d006      	beq.n	800b85c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d101      	bne.n	800b85c <osSemaphoreWait+0x40>
      ticks = 1;
 800b858:	2301      	movs	r3, #1
 800b85a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b85c:	f7ff ff33 	bl	800b6c6 <inHandlerMode>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d017      	beq.n	800b896 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b866:	f107 0308 	add.w	r3, r7, #8
 800b86a:	461a      	mov	r2, r3
 800b86c:	2100      	movs	r1, #0
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 ff48 	bl	800c704 <xQueueReceiveFromISR>
 800b874:	4603      	mov	r3, r0
 800b876:	2b01      	cmp	r3, #1
 800b878:	d001      	beq.n	800b87e <osSemaphoreWait+0x62>
      return osErrorOS;
 800b87a:	23ff      	movs	r3, #255	; 0xff
 800b87c:	e015      	b.n	800b8aa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d011      	beq.n	800b8a8 <osSemaphoreWait+0x8c>
 800b884:	4b0b      	ldr	r3, [pc, #44]	; (800b8b4 <osSemaphoreWait+0x98>)
 800b886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b88a:	601a      	str	r2, [r3, #0]
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	f3bf 8f6f 	isb	sy
 800b894:	e008      	b.n	800b8a8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b896:	68f9      	ldr	r1, [r7, #12]
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 fe27 	bl	800c4ec <xQueueSemaphoreTake>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d001      	beq.n	800b8a8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b8a4:	23ff      	movs	r3, #255	; 0xff
 800b8a6:	e000      	b.n	800b8aa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	e000ed04 	.word	0xe000ed04

0800b8b8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b8c8:	f7ff fefd 	bl	800b6c6 <inHandlerMode>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d016      	beq.n	800b900 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b8d2:	f107 0308 	add.w	r3, r7, #8
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fc9a 	bl	800c212 <xQueueGiveFromISR>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d001      	beq.n	800b8e8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b8e4:	23ff      	movs	r3, #255	; 0xff
 800b8e6:	e017      	b.n	800b918 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d013      	beq.n	800b916 <osSemaphoreRelease+0x5e>
 800b8ee:	4b0c      	ldr	r3, [pc, #48]	; (800b920 <osSemaphoreRelease+0x68>)
 800b8f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8f4:	601a      	str	r2, [r3, #0]
 800b8f6:	f3bf 8f4f 	dsb	sy
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	e00a      	b.n	800b916 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b900:	2300      	movs	r3, #0
 800b902:	2200      	movs	r2, #0
 800b904:	2100      	movs	r1, #0
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 faea 	bl	800bee0 <xQueueGenericSend>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d001      	beq.n	800b916 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b912:	23ff      	movs	r3, #255	; 0xff
 800b914:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b916:	68fb      	ldr	r3, [r7, #12]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	e000ed04 	.word	0xe000ed04

0800b924 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b92c:	f7ff fecb 	bl	800b6c6 <inHandlerMode>
 800b930:	4603      	mov	r3, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	d001      	beq.n	800b93a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b936:	2382      	movs	r3, #130	; 0x82
 800b938:	e003      	b.n	800b942 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 ff62 	bl	800c804 <vQueueDelete>

  return osOK; 
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b94a:	b590      	push	{r4, r7, lr}
 800b94c:	b085      	sub	sp, #20
 800b94e:	af02      	add	r7, sp, #8
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d011      	beq.n	800b980 <osMessageCreate+0x36>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00d      	beq.n	800b980 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6818      	ldr	r0, [r3, #0]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6859      	ldr	r1, [r3, #4]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	689a      	ldr	r2, [r3, #8]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	2400      	movs	r4, #0
 800b976:	9400      	str	r4, [sp, #0]
 800b978:	f000 f9e0 	bl	800bd3c <xQueueGenericCreateStatic>
 800b97c:	4603      	mov	r3, r0
 800b97e:	e008      	b.n	800b992 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6818      	ldr	r0, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	4619      	mov	r1, r3
 800b98c:	f000 fa4e 	bl	800be2c <xQueueGenericCreate>
 800b990:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b992:	4618      	mov	r0, r3
 800b994:	370c      	adds	r7, #12
 800b996:	46bd      	mov	sp, r7
 800b998:	bd90      	pop	{r4, r7, pc}
	...

0800b99c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b086      	sub	sp, #24
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d101      	bne.n	800b9ba <osMessagePut+0x1e>
    ticks = 1;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b9ba:	f7ff fe84 	bl	800b6c6 <inHandlerMode>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d018      	beq.n	800b9f6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b9c4:	f107 0210 	add.w	r2, r7, #16
 800b9c8:	f107 0108 	add.w	r1, r7, #8
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f000 fb84 	bl	800c0dc <xQueueGenericSendFromISR>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d001      	beq.n	800b9de <osMessagePut+0x42>
      return osErrorOS;
 800b9da:	23ff      	movs	r3, #255	; 0xff
 800b9dc:	e018      	b.n	800ba10 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d014      	beq.n	800ba0e <osMessagePut+0x72>
 800b9e4:	4b0c      	ldr	r3, [pc, #48]	; (800ba18 <osMessagePut+0x7c>)
 800b9e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9ea:	601a      	str	r2, [r3, #0]
 800b9ec:	f3bf 8f4f 	dsb	sy
 800b9f0:	f3bf 8f6f 	isb	sy
 800b9f4:	e00b      	b.n	800ba0e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b9f6:	f107 0108 	add.w	r1, r7, #8
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	697a      	ldr	r2, [r7, #20]
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f000 fa6e 	bl	800bee0 <xQueueGenericSend>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d001      	beq.n	800ba0e <osMessagePut+0x72>
      return osErrorOS;
 800ba0a:	23ff      	movs	r3, #255	; 0xff
 800ba0c:	e000      	b.n	800ba10 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3718      	adds	r7, #24
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	e000ed04 	.word	0xe000ed04

0800ba1c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ba1c:	b590      	push	{r4, r7, lr}
 800ba1e:	b08b      	sub	sp, #44	; 0x2c
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10a      	bne.n	800ba4c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ba36:	2380      	movs	r3, #128	; 0x80
 800ba38:	617b      	str	r3, [r7, #20]
    return event;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	461c      	mov	r4, r3
 800ba3e:	f107 0314 	add.w	r3, r7, #20
 800ba42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ba4a:	e054      	b.n	800baf6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ba50:	2300      	movs	r3, #0
 800ba52:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba5a:	d103      	bne.n	800ba64 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ba5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba60:	627b      	str	r3, [r7, #36]	; 0x24
 800ba62:	e009      	b.n	800ba78 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d006      	beq.n	800ba78 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d101      	bne.n	800ba78 <osMessageGet+0x5c>
      ticks = 1;
 800ba74:	2301      	movs	r3, #1
 800ba76:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ba78:	f7ff fe25 	bl	800b6c6 <inHandlerMode>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d01c      	beq.n	800babc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ba82:	f107 0220 	add.w	r2, r7, #32
 800ba86:	f107 0314 	add.w	r3, r7, #20
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	68b8      	ldr	r0, [r7, #8]
 800ba90:	f000 fe38 	bl	800c704 <xQueueReceiveFromISR>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d102      	bne.n	800baa0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ba9a:	2310      	movs	r3, #16
 800ba9c:	617b      	str	r3, [r7, #20]
 800ba9e:	e001      	b.n	800baa4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800baa0:	2300      	movs	r3, #0
 800baa2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d01d      	beq.n	800bae6 <osMessageGet+0xca>
 800baaa:	4b15      	ldr	r3, [pc, #84]	; (800bb00 <osMessageGet+0xe4>)
 800baac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bab0:	601a      	str	r2, [r3, #0]
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	e014      	b.n	800bae6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800babc:	f107 0314 	add.w	r3, r7, #20
 800bac0:	3304      	adds	r3, #4
 800bac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bac4:	4619      	mov	r1, r3
 800bac6:	68b8      	ldr	r0, [r7, #8]
 800bac8:	f000 fc30 	bl	800c32c <xQueueReceive>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d102      	bne.n	800bad8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bad2:	2310      	movs	r3, #16
 800bad4:	617b      	str	r3, [r7, #20]
 800bad6:	e006      	b.n	800bae6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bada:	2b00      	cmp	r3, #0
 800badc:	d101      	bne.n	800bae2 <osMessageGet+0xc6>
 800bade:	2300      	movs	r3, #0
 800bae0:	e000      	b.n	800bae4 <osMessageGet+0xc8>
 800bae2:	2340      	movs	r3, #64	; 0x40
 800bae4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	461c      	mov	r4, r3
 800baea:	f107 0314 	add.w	r3, r7, #20
 800baee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800baf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	372c      	adds	r7, #44	; 0x2c
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd90      	pop	{r4, r7, pc}
 800bafe:	bf00      	nop
 800bb00:	e000ed04 	.word	0xe000ed04

0800bb04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f103 0208 	add.w	r2, r3, #8
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f103 0208 	add.w	r2, r3, #8
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f103 0208 	add.w	r2, r3, #8
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb38:	bf00      	nop
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bb52:	bf00      	nop
 800bb54:	370c      	adds	r7, #12
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb5e:	b480      	push	{r7}
 800bb60:	b085      	sub	sp, #20
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
 800bb66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	689a      	ldr	r2, [r3, #8]
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	683a      	ldr	r2, [r7, #0]
 800bb82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	683a      	ldr	r2, [r7, #0]
 800bb88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	1c5a      	adds	r2, r3, #1
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	601a      	str	r2, [r3, #0]
}
 800bb9a:	bf00      	nop
 800bb9c:	3714      	adds	r7, #20
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr

0800bba6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bba6:	b480      	push	{r7}
 800bba8:	b085      	sub	sp, #20
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbbc:	d103      	bne.n	800bbc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	60fb      	str	r3, [r7, #12]
 800bbc4:	e00c      	b.n	800bbe0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	3308      	adds	r3, #8
 800bbca:	60fb      	str	r3, [r7, #12]
 800bbcc:	e002      	b.n	800bbd4 <vListInsert+0x2e>
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	60fb      	str	r3, [r7, #12]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	68ba      	ldr	r2, [r7, #8]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d2f6      	bcs.n	800bbce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	685a      	ldr	r2, [r3, #4]
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	683a      	ldr	r2, [r7, #0]
 800bbee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	683a      	ldr	r2, [r7, #0]
 800bbfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	1c5a      	adds	r2, r3, #1
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	601a      	str	r2, [r3, #0]
}
 800bc0c:	bf00      	nop
 800bc0e:	3714      	adds	r7, #20
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	691b      	ldr	r3, [r3, #16]
 800bc24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	6892      	ldr	r2, [r2, #8]
 800bc2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	6852      	ldr	r2, [r2, #4]
 800bc38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d103      	bne.n	800bc4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	689a      	ldr	r2, [r3, #8]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	1e5a      	subs	r2, r3, #1
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d10a      	bne.n	800bc96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bc92:	bf00      	nop
 800bc94:	e7fe      	b.n	800bc94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bc96:	f002 f86d 	bl	800dd74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca2:	68f9      	ldr	r1, [r7, #12]
 800bca4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bca6:	fb01 f303 	mul.w	r3, r1, r3
 800bcaa:	441a      	add	r2, r3
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc6:	3b01      	subs	r3, #1
 800bcc8:	68f9      	ldr	r1, [r7, #12]
 800bcca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bccc:	fb01 f303 	mul.w	r3, r1, r3
 800bcd0:	441a      	add	r2, r3
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	22ff      	movs	r2, #255	; 0xff
 800bcda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	22ff      	movs	r2, #255	; 0xff
 800bce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d114      	bne.n	800bd16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	691b      	ldr	r3, [r3, #16]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d01a      	beq.n	800bd2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	3310      	adds	r3, #16
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f001 fb29 	bl	800d350 <xTaskRemoveFromEventList>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d012      	beq.n	800bd2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bd04:	4b0c      	ldr	r3, [pc, #48]	; (800bd38 <xQueueGenericReset+0xcc>)
 800bd06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd0a:	601a      	str	r2, [r3, #0]
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	e009      	b.n	800bd2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	3310      	adds	r3, #16
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7ff fef2 	bl	800bb04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	3324      	adds	r3, #36	; 0x24
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff feed 	bl	800bb04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bd2a:	f002 f853 	bl	800ddd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bd2e:	2301      	movs	r3, #1
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	e000ed04 	.word	0xe000ed04

0800bd3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b08e      	sub	sp, #56	; 0x38
 800bd40:	af02      	add	r7, sp, #8
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
 800bd48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10a      	bne.n	800bd66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd62:	bf00      	nop
 800bd64:	e7fe      	b.n	800bd64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d10a      	bne.n	800bd82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd70:	f383 8811 	msr	BASEPRI, r3
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	f3bf 8f4f 	dsb	sy
 800bd7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd7e:	bf00      	nop
 800bd80:	e7fe      	b.n	800bd80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d002      	beq.n	800bd8e <xQueueGenericCreateStatic+0x52>
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <xQueueGenericCreateStatic+0x56>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e000      	b.n	800bd94 <xQueueGenericCreateStatic+0x58>
 800bd92:	2300      	movs	r3, #0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10a      	bne.n	800bdae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9c:	f383 8811 	msr	BASEPRI, r3
 800bda0:	f3bf 8f6f 	isb	sy
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	623b      	str	r3, [r7, #32]
}
 800bdaa:	bf00      	nop
 800bdac:	e7fe      	b.n	800bdac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d102      	bne.n	800bdba <xQueueGenericCreateStatic+0x7e>
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <xQueueGenericCreateStatic+0x82>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e000      	b.n	800bdc0 <xQueueGenericCreateStatic+0x84>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10a      	bne.n	800bdda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	61fb      	str	r3, [r7, #28]
}
 800bdd6:	bf00      	nop
 800bdd8:	e7fe      	b.n	800bdd8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bdda:	2348      	movs	r3, #72	; 0x48
 800bddc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	2b48      	cmp	r3, #72	; 0x48
 800bde2:	d00a      	beq.n	800bdfa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	61bb      	str	r3, [r7, #24]
}
 800bdf6:	bf00      	nop
 800bdf8:	e7fe      	b.n	800bdf8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bdfa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800be00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00d      	beq.n	800be22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800be06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be08:	2201      	movs	r2, #1
 800be0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800be12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be14:	9300      	str	r3, [sp, #0]
 800be16:	4613      	mov	r3, r2
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	68b9      	ldr	r1, [r7, #8]
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f000 f83f 	bl	800bea0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800be24:	4618      	mov	r0, r3
 800be26:	3730      	adds	r7, #48	; 0x30
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b08a      	sub	sp, #40	; 0x28
 800be30:	af02      	add	r7, sp, #8
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	4613      	mov	r3, r2
 800be38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d10a      	bne.n	800be56 <xQueueGenericCreate+0x2a>
	__asm volatile
 800be40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	613b      	str	r3, [r7, #16]
}
 800be52:	bf00      	nop
 800be54:	e7fe      	b.n	800be54 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	68ba      	ldr	r2, [r7, #8]
 800be5a:	fb02 f303 	mul.w	r3, r2, r3
 800be5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	3348      	adds	r3, #72	; 0x48
 800be64:	4618      	mov	r0, r3
 800be66:	f002 f8a7 	bl	800dfb8 <pvPortMalloc>
 800be6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d011      	beq.n	800be96 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	3348      	adds	r3, #72	; 0x48
 800be7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	2200      	movs	r2, #0
 800be80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be84:	79fa      	ldrb	r2, [r7, #7]
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	4613      	mov	r3, r2
 800be8c:	697a      	ldr	r2, [r7, #20]
 800be8e:	68b9      	ldr	r1, [r7, #8]
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f000 f805 	bl	800bea0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be96:	69bb      	ldr	r3, [r7, #24]
	}
 800be98:	4618      	mov	r0, r3
 800be9a:	3720      	adds	r7, #32
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	607a      	str	r2, [r7, #4]
 800beac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d103      	bne.n	800bebc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	69ba      	ldr	r2, [r7, #24]
 800beb8:	601a      	str	r2, [r3, #0]
 800beba:	e002      	b.n	800bec2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bece:	2101      	movs	r1, #1
 800bed0:	69b8      	ldr	r0, [r7, #24]
 800bed2:	f7ff fecb 	bl	800bc6c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bed6:	bf00      	nop
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
	...

0800bee0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b08e      	sub	sp, #56	; 0x38
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	607a      	str	r2, [r7, #4]
 800beec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800beee:	2300      	movs	r3, #0
 800bef0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10a      	bne.n	800bf12 <xQueueGenericSend+0x32>
	__asm volatile
 800befc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf00:	f383 8811 	msr	BASEPRI, r3
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf0e:	bf00      	nop
 800bf10:	e7fe      	b.n	800bf10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d103      	bne.n	800bf20 <xQueueGenericSend+0x40>
 800bf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d101      	bne.n	800bf24 <xQueueGenericSend+0x44>
 800bf20:	2301      	movs	r3, #1
 800bf22:	e000      	b.n	800bf26 <xQueueGenericSend+0x46>
 800bf24:	2300      	movs	r3, #0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10a      	bne.n	800bf40 <xQueueGenericSend+0x60>
	__asm volatile
 800bf2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2e:	f383 8811 	msr	BASEPRI, r3
 800bf32:	f3bf 8f6f 	isb	sy
 800bf36:	f3bf 8f4f 	dsb	sy
 800bf3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf3c:	bf00      	nop
 800bf3e:	e7fe      	b.n	800bf3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d103      	bne.n	800bf4e <xQueueGenericSend+0x6e>
 800bf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d101      	bne.n	800bf52 <xQueueGenericSend+0x72>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e000      	b.n	800bf54 <xQueueGenericSend+0x74>
 800bf52:	2300      	movs	r3, #0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d10a      	bne.n	800bf6e <xQueueGenericSend+0x8e>
	__asm volatile
 800bf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5c:	f383 8811 	msr	BASEPRI, r3
 800bf60:	f3bf 8f6f 	isb	sy
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	623b      	str	r3, [r7, #32]
}
 800bf6a:	bf00      	nop
 800bf6c:	e7fe      	b.n	800bf6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf6e:	f001 fbaf 	bl	800d6d0 <xTaskGetSchedulerState>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d102      	bne.n	800bf7e <xQueueGenericSend+0x9e>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d101      	bne.n	800bf82 <xQueueGenericSend+0xa2>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e000      	b.n	800bf84 <xQueueGenericSend+0xa4>
 800bf82:	2300      	movs	r3, #0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d10a      	bne.n	800bf9e <xQueueGenericSend+0xbe>
	__asm volatile
 800bf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8c:	f383 8811 	msr	BASEPRI, r3
 800bf90:	f3bf 8f6f 	isb	sy
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	61fb      	str	r3, [r7, #28]
}
 800bf9a:	bf00      	nop
 800bf9c:	e7fe      	b.n	800bf9c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf9e:	f001 fee9 	bl	800dd74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d302      	bcc.n	800bfb4 <xQueueGenericSend+0xd4>
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d129      	bne.n	800c008 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bfb4:	683a      	ldr	r2, [r7, #0]
 800bfb6:	68b9      	ldr	r1, [r7, #8]
 800bfb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfba:	f000 fc5e 	bl	800c87a <prvCopyDataToQueue>
 800bfbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d010      	beq.n	800bfea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfca:	3324      	adds	r3, #36	; 0x24
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f001 f9bf 	bl	800d350 <xTaskRemoveFromEventList>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d013      	beq.n	800c000 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bfd8:	4b3f      	ldr	r3, [pc, #252]	; (800c0d8 <xQueueGenericSend+0x1f8>)
 800bfda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfde:	601a      	str	r2, [r3, #0]
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	e00a      	b.n	800c000 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d007      	beq.n	800c000 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bff0:	4b39      	ldr	r3, [pc, #228]	; (800c0d8 <xQueueGenericSend+0x1f8>)
 800bff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bff6:	601a      	str	r2, [r3, #0]
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c000:	f001 fee8 	bl	800ddd4 <vPortExitCritical>
				return pdPASS;
 800c004:	2301      	movs	r3, #1
 800c006:	e063      	b.n	800c0d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d103      	bne.n	800c016 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c00e:	f001 fee1 	bl	800ddd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c012:	2300      	movs	r3, #0
 800c014:	e05c      	b.n	800c0d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d106      	bne.n	800c02a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c01c:	f107 0314 	add.w	r3, r7, #20
 800c020:	4618      	mov	r0, r3
 800c022:	f001 f9f7 	bl	800d414 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c026:	2301      	movs	r3, #1
 800c028:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c02a:	f001 fed3 	bl	800ddd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c02e:	f000 ffa7 	bl	800cf80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c032:	f001 fe9f 	bl	800dd74 <vPortEnterCritical>
 800c036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c03c:	b25b      	sxtb	r3, r3
 800c03e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c042:	d103      	bne.n	800c04c <xQueueGenericSend+0x16c>
 800c044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c046:	2200      	movs	r2, #0
 800c048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c052:	b25b      	sxtb	r3, r3
 800c054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c058:	d103      	bne.n	800c062 <xQueueGenericSend+0x182>
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	2200      	movs	r2, #0
 800c05e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c062:	f001 feb7 	bl	800ddd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c066:	1d3a      	adds	r2, r7, #4
 800c068:	f107 0314 	add.w	r3, r7, #20
 800c06c:	4611      	mov	r1, r2
 800c06e:	4618      	mov	r0, r3
 800c070:	f001 f9e6 	bl	800d440 <xTaskCheckForTimeOut>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d124      	bne.n	800c0c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c07a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c07c:	f000 fcf5 	bl	800ca6a <prvIsQueueFull>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d018      	beq.n	800c0b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c088:	3310      	adds	r3, #16
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	4611      	mov	r1, r2
 800c08e:	4618      	mov	r0, r3
 800c090:	f001 f93a 	bl	800d308 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c096:	f000 fc80 	bl	800c99a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c09a:	f000 ff7f 	bl	800cf9c <xTaskResumeAll>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f47f af7c 	bne.w	800bf9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c0a6:	4b0c      	ldr	r3, [pc, #48]	; (800c0d8 <xQueueGenericSend+0x1f8>)
 800c0a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ac:	601a      	str	r2, [r3, #0]
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	e772      	b.n	800bf9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c0b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0ba:	f000 fc6e 	bl	800c99a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0be:	f000 ff6d 	bl	800cf9c <xTaskResumeAll>
 800c0c2:	e76c      	b.n	800bf9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c0c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0c6:	f000 fc68 	bl	800c99a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0ca:	f000 ff67 	bl	800cf9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c0ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3738      	adds	r7, #56	; 0x38
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	e000ed04 	.word	0xe000ed04

0800c0dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b090      	sub	sp, #64	; 0x40
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
 800c0e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10a      	bne.n	800c10a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f8:	f383 8811 	msr	BASEPRI, r3
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c106:	bf00      	nop
 800c108:	e7fe      	b.n	800c108 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d103      	bne.n	800c118 <xQueueGenericSendFromISR+0x3c>
 800c110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <xQueueGenericSendFromISR+0x40>
 800c118:	2301      	movs	r3, #1
 800c11a:	e000      	b.n	800c11e <xQueueGenericSendFromISR+0x42>
 800c11c:	2300      	movs	r3, #0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10a      	bne.n	800c138 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c134:	bf00      	nop
 800c136:	e7fe      	b.n	800c136 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d103      	bne.n	800c146 <xQueueGenericSendFromISR+0x6a>
 800c13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c142:	2b01      	cmp	r3, #1
 800c144:	d101      	bne.n	800c14a <xQueueGenericSendFromISR+0x6e>
 800c146:	2301      	movs	r3, #1
 800c148:	e000      	b.n	800c14c <xQueueGenericSendFromISR+0x70>
 800c14a:	2300      	movs	r3, #0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10a      	bne.n	800c166 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c154:	f383 8811 	msr	BASEPRI, r3
 800c158:	f3bf 8f6f 	isb	sy
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	623b      	str	r3, [r7, #32]
}
 800c162:	bf00      	nop
 800c164:	e7fe      	b.n	800c164 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c166:	f001 fee7 	bl	800df38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c16a:	f3ef 8211 	mrs	r2, BASEPRI
 800c16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	61fa      	str	r2, [r7, #28]
 800c180:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c182:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c184:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c18e:	429a      	cmp	r2, r3
 800c190:	d302      	bcc.n	800c198 <xQueueGenericSendFromISR+0xbc>
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	2b02      	cmp	r3, #2
 800c196:	d12f      	bne.n	800c1f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c1a8:	683a      	ldr	r2, [r7, #0]
 800c1aa:	68b9      	ldr	r1, [r7, #8]
 800c1ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c1ae:	f000 fb64 	bl	800c87a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c1b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c1b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1ba:	d112      	bne.n	800c1e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d016      	beq.n	800c1f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c6:	3324      	adds	r3, #36	; 0x24
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f001 f8c1 	bl	800d350 <xTaskRemoveFromEventList>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00e      	beq.n	800c1f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00b      	beq.n	800c1f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2201      	movs	r2, #1
 800c1de:	601a      	str	r2, [r3, #0]
 800c1e0:	e007      	b.n	800c1f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c1e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	b25a      	sxtb	r2, r3
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c1f6:	e001      	b.n	800c1fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c206:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3740      	adds	r7, #64	; 0x40
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b08e      	sub	sp, #56	; 0x38
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c222:	2b00      	cmp	r3, #0
 800c224:	d10a      	bne.n	800c23c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22a:	f383 8811 	msr	BASEPRI, r3
 800c22e:	f3bf 8f6f 	isb	sy
 800c232:	f3bf 8f4f 	dsb	sy
 800c236:	623b      	str	r3, [r7, #32]
}
 800c238:	bf00      	nop
 800c23a:	e7fe      	b.n	800c23a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00a      	beq.n	800c25a <xQueueGiveFromISR+0x48>
	__asm volatile
 800c244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c248:	f383 8811 	msr	BASEPRI, r3
 800c24c:	f3bf 8f6f 	isb	sy
 800c250:	f3bf 8f4f 	dsb	sy
 800c254:	61fb      	str	r3, [r7, #28]
}
 800c256:	bf00      	nop
 800c258:	e7fe      	b.n	800c258 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d103      	bne.n	800c26a <xQueueGiveFromISR+0x58>
 800c262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d101      	bne.n	800c26e <xQueueGiveFromISR+0x5c>
 800c26a:	2301      	movs	r3, #1
 800c26c:	e000      	b.n	800c270 <xQueueGiveFromISR+0x5e>
 800c26e:	2300      	movs	r3, #0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10a      	bne.n	800c28a <xQueueGiveFromISR+0x78>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	61bb      	str	r3, [r7, #24]
}
 800c286:	bf00      	nop
 800c288:	e7fe      	b.n	800c288 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c28a:	f001 fe55 	bl	800df38 <vPortValidateInterruptPriority>
	__asm volatile
 800c28e:	f3ef 8211 	mrs	r2, BASEPRI
 800c292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c296:	f383 8811 	msr	BASEPRI, r3
 800c29a:	f3bf 8f6f 	isb	sy
 800c29e:	f3bf 8f4f 	dsb	sy
 800c2a2:	617a      	str	r2, [r7, #20]
 800c2a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c2a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d22b      	bcs.n	800c312 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c6:	1c5a      	adds	r2, r3, #1
 800c2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c2cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2d4:	d112      	bne.n	800c2fc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d016      	beq.n	800c30c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e0:	3324      	adds	r3, #36	; 0x24
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f001 f834 	bl	800d350 <xTaskRemoveFromEventList>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00e      	beq.n	800c30c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00b      	beq.n	800c30c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	601a      	str	r2, [r3, #0]
 800c2fa:	e007      	b.n	800c30c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c300:	3301      	adds	r3, #1
 800c302:	b2db      	uxtb	r3, r3
 800c304:	b25a      	sxtb	r2, r3
 800c306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c30c:	2301      	movs	r3, #1
 800c30e:	637b      	str	r3, [r7, #52]	; 0x34
 800c310:	e001      	b.n	800c316 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c312:	2300      	movs	r3, #0
 800c314:	637b      	str	r3, [r7, #52]	; 0x34
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f383 8811 	msr	BASEPRI, r3
}
 800c320:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c324:	4618      	mov	r0, r3
 800c326:	3738      	adds	r7, #56	; 0x38
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b08c      	sub	sp, #48	; 0x30
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c338:	2300      	movs	r3, #0
 800c33a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10a      	bne.n	800c35c <xQueueReceive+0x30>
	__asm volatile
 800c346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	623b      	str	r3, [r7, #32]
}
 800c358:	bf00      	nop
 800c35a:	e7fe      	b.n	800c35a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d103      	bne.n	800c36a <xQueueReceive+0x3e>
 800c362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c366:	2b00      	cmp	r3, #0
 800c368:	d101      	bne.n	800c36e <xQueueReceive+0x42>
 800c36a:	2301      	movs	r3, #1
 800c36c:	e000      	b.n	800c370 <xQueueReceive+0x44>
 800c36e:	2300      	movs	r3, #0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d10a      	bne.n	800c38a <xQueueReceive+0x5e>
	__asm volatile
 800c374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	61fb      	str	r3, [r7, #28]
}
 800c386:	bf00      	nop
 800c388:	e7fe      	b.n	800c388 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c38a:	f001 f9a1 	bl	800d6d0 <xTaskGetSchedulerState>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d102      	bne.n	800c39a <xQueueReceive+0x6e>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d101      	bne.n	800c39e <xQueueReceive+0x72>
 800c39a:	2301      	movs	r3, #1
 800c39c:	e000      	b.n	800c3a0 <xQueueReceive+0x74>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d10a      	bne.n	800c3ba <xQueueReceive+0x8e>
	__asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	61bb      	str	r3, [r7, #24]
}
 800c3b6:	bf00      	nop
 800c3b8:	e7fe      	b.n	800c3b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3ba:	f001 fcdb 	bl	800dd74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d01f      	beq.n	800c40a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c3ca:	68b9      	ldr	r1, [r7, #8]
 800c3cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3ce:	f000 fabe 	bl	800c94e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d4:	1e5a      	subs	r2, r3, #1
 800c3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00f      	beq.n	800c402 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e4:	3310      	adds	r3, #16
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f000 ffb2 	bl	800d350 <xTaskRemoveFromEventList>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d007      	beq.n	800c402 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3f2:	4b3d      	ldr	r3, [pc, #244]	; (800c4e8 <xQueueReceive+0x1bc>)
 800c3f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3f8:	601a      	str	r2, [r3, #0]
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c402:	f001 fce7 	bl	800ddd4 <vPortExitCritical>
				return pdPASS;
 800c406:	2301      	movs	r3, #1
 800c408:	e069      	b.n	800c4de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d103      	bne.n	800c418 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c410:	f001 fce0 	bl	800ddd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c414:	2300      	movs	r3, #0
 800c416:	e062      	b.n	800c4de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d106      	bne.n	800c42c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c41e:	f107 0310 	add.w	r3, r7, #16
 800c422:	4618      	mov	r0, r3
 800c424:	f000 fff6 	bl	800d414 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c428:	2301      	movs	r3, #1
 800c42a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c42c:	f001 fcd2 	bl	800ddd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c430:	f000 fda6 	bl	800cf80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c434:	f001 fc9e 	bl	800dd74 <vPortEnterCritical>
 800c438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c43e:	b25b      	sxtb	r3, r3
 800c440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c444:	d103      	bne.n	800c44e <xQueueReceive+0x122>
 800c446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c448:	2200      	movs	r2, #0
 800c44a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c454:	b25b      	sxtb	r3, r3
 800c456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c45a:	d103      	bne.n	800c464 <xQueueReceive+0x138>
 800c45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45e:	2200      	movs	r2, #0
 800c460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c464:	f001 fcb6 	bl	800ddd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c468:	1d3a      	adds	r2, r7, #4
 800c46a:	f107 0310 	add.w	r3, r7, #16
 800c46e:	4611      	mov	r1, r2
 800c470:	4618      	mov	r0, r3
 800c472:	f000 ffe5 	bl	800d440 <xTaskCheckForTimeOut>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d123      	bne.n	800c4c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c47c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c47e:	f000 fade 	bl	800ca3e <prvIsQueueEmpty>
 800c482:	4603      	mov	r3, r0
 800c484:	2b00      	cmp	r3, #0
 800c486:	d017      	beq.n	800c4b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48a:	3324      	adds	r3, #36	; 0x24
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	4611      	mov	r1, r2
 800c490:	4618      	mov	r0, r3
 800c492:	f000 ff39 	bl	800d308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c498:	f000 fa7f 	bl	800c99a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c49c:	f000 fd7e 	bl	800cf9c <xTaskResumeAll>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d189      	bne.n	800c3ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c4a6:	4b10      	ldr	r3, [pc, #64]	; (800c4e8 <xQueueReceive+0x1bc>)
 800c4a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4ac:	601a      	str	r2, [r3, #0]
 800c4ae:	f3bf 8f4f 	dsb	sy
 800c4b2:	f3bf 8f6f 	isb	sy
 800c4b6:	e780      	b.n	800c3ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c4b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4ba:	f000 fa6e 	bl	800c99a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4be:	f000 fd6d 	bl	800cf9c <xTaskResumeAll>
 800c4c2:	e77a      	b.n	800c3ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c4c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4c6:	f000 fa68 	bl	800c99a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4ca:	f000 fd67 	bl	800cf9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4d0:	f000 fab5 	bl	800ca3e <prvIsQueueEmpty>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f43f af6f 	beq.w	800c3ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c4dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3730      	adds	r7, #48	; 0x30
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	e000ed04 	.word	0xe000ed04

0800c4ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b08e      	sub	sp, #56	; 0x38
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c4fe:	2300      	movs	r3, #0
 800c500:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10a      	bne.n	800c51e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50c:	f383 8811 	msr	BASEPRI, r3
 800c510:	f3bf 8f6f 	isb	sy
 800c514:	f3bf 8f4f 	dsb	sy
 800c518:	623b      	str	r3, [r7, #32]
}
 800c51a:	bf00      	nop
 800c51c:	e7fe      	b.n	800c51c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00a      	beq.n	800c53c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	61fb      	str	r3, [r7, #28]
}
 800c538:	bf00      	nop
 800c53a:	e7fe      	b.n	800c53a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c53c:	f001 f8c8 	bl	800d6d0 <xTaskGetSchedulerState>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d102      	bne.n	800c54c <xQueueSemaphoreTake+0x60>
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d101      	bne.n	800c550 <xQueueSemaphoreTake+0x64>
 800c54c:	2301      	movs	r3, #1
 800c54e:	e000      	b.n	800c552 <xQueueSemaphoreTake+0x66>
 800c550:	2300      	movs	r3, #0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10a      	bne.n	800c56c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	61bb      	str	r3, [r7, #24]
}
 800c568:	bf00      	nop
 800c56a:	e7fe      	b.n	800c56a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c56c:	f001 fc02 	bl	800dd74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c574:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d024      	beq.n	800c5c6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57e:	1e5a      	subs	r2, r3, #1
 800c580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c582:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d104      	bne.n	800c596 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c58c:	f001 fa48 	bl	800da20 <pvTaskIncrementMutexHeldCount>
 800c590:	4602      	mov	r2, r0
 800c592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c594:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00f      	beq.n	800c5be <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a0:	3310      	adds	r3, #16
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f000 fed4 	bl	800d350 <xTaskRemoveFromEventList>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d007      	beq.n	800c5be <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5ae:	4b54      	ldr	r3, [pc, #336]	; (800c700 <xQueueSemaphoreTake+0x214>)
 800c5b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5be:	f001 fc09 	bl	800ddd4 <vPortExitCritical>
				return pdPASS;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	e097      	b.n	800c6f6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d111      	bne.n	800c5f0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00a      	beq.n	800c5e8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	617b      	str	r3, [r7, #20]
}
 800c5e4:	bf00      	nop
 800c5e6:	e7fe      	b.n	800c5e6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c5e8:	f001 fbf4 	bl	800ddd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	e082      	b.n	800c6f6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d106      	bne.n	800c604 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5f6:	f107 030c 	add.w	r3, r7, #12
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f000 ff0a 	bl	800d414 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c600:	2301      	movs	r3, #1
 800c602:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c604:	f001 fbe6 	bl	800ddd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c608:	f000 fcba 	bl	800cf80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c60c:	f001 fbb2 	bl	800dd74 <vPortEnterCritical>
 800c610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c616:	b25b      	sxtb	r3, r3
 800c618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c61c:	d103      	bne.n	800c626 <xQueueSemaphoreTake+0x13a>
 800c61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c620:	2200      	movs	r2, #0
 800c622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c628:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c62c:	b25b      	sxtb	r3, r3
 800c62e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c632:	d103      	bne.n	800c63c <xQueueSemaphoreTake+0x150>
 800c634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c636:	2200      	movs	r2, #0
 800c638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c63c:	f001 fbca 	bl	800ddd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c640:	463a      	mov	r2, r7
 800c642:	f107 030c 	add.w	r3, r7, #12
 800c646:	4611      	mov	r1, r2
 800c648:	4618      	mov	r0, r3
 800c64a:	f000 fef9 	bl	800d440 <xTaskCheckForTimeOut>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d132      	bne.n	800c6ba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c654:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c656:	f000 f9f2 	bl	800ca3e <prvIsQueueEmpty>
 800c65a:	4603      	mov	r3, r0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d026      	beq.n	800c6ae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d109      	bne.n	800c67c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c668:	f001 fb84 	bl	800dd74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66e:	689b      	ldr	r3, [r3, #8]
 800c670:	4618      	mov	r0, r3
 800c672:	f001 f84b 	bl	800d70c <xTaskPriorityInherit>
 800c676:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c678:	f001 fbac 	bl	800ddd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67e:	3324      	adds	r3, #36	; 0x24
 800c680:	683a      	ldr	r2, [r7, #0]
 800c682:	4611      	mov	r1, r2
 800c684:	4618      	mov	r0, r3
 800c686:	f000 fe3f 	bl	800d308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c68a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c68c:	f000 f985 	bl	800c99a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c690:	f000 fc84 	bl	800cf9c <xTaskResumeAll>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	f47f af68 	bne.w	800c56c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c69c:	4b18      	ldr	r3, [pc, #96]	; (800c700 <xQueueSemaphoreTake+0x214>)
 800c69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	e75e      	b.n	800c56c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c6ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6b0:	f000 f973 	bl	800c99a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6b4:	f000 fc72 	bl	800cf9c <xTaskResumeAll>
 800c6b8:	e758      	b.n	800c56c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c6ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6bc:	f000 f96d 	bl	800c99a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6c0:	f000 fc6c 	bl	800cf9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6c6:	f000 f9ba 	bl	800ca3e <prvIsQueueEmpty>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f43f af4d 	beq.w	800c56c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d00d      	beq.n	800c6f4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c6d8:	f001 fb4c 	bl	800dd74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c6dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6de:	f000 f8b4 	bl	800c84a <prvGetDisinheritPriorityAfterTimeout>
 800c6e2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f001 f90a 	bl	800d904 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c6f0:	f001 fb70 	bl	800ddd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c6f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3738      	adds	r7, #56	; 0x38
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	e000ed04 	.word	0xe000ed04

0800c704 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b08e      	sub	sp, #56	; 0x38
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c716:	2b00      	cmp	r3, #0
 800c718:	d10a      	bne.n	800c730 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71e:	f383 8811 	msr	BASEPRI, r3
 800c722:	f3bf 8f6f 	isb	sy
 800c726:	f3bf 8f4f 	dsb	sy
 800c72a:	623b      	str	r3, [r7, #32]
}
 800c72c:	bf00      	nop
 800c72e:	e7fe      	b.n	800c72e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d103      	bne.n	800c73e <xQueueReceiveFromISR+0x3a>
 800c736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d101      	bne.n	800c742 <xQueueReceiveFromISR+0x3e>
 800c73e:	2301      	movs	r3, #1
 800c740:	e000      	b.n	800c744 <xQueueReceiveFromISR+0x40>
 800c742:	2300      	movs	r3, #0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10a      	bne.n	800c75e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74c:	f383 8811 	msr	BASEPRI, r3
 800c750:	f3bf 8f6f 	isb	sy
 800c754:	f3bf 8f4f 	dsb	sy
 800c758:	61fb      	str	r3, [r7, #28]
}
 800c75a:	bf00      	nop
 800c75c:	e7fe      	b.n	800c75c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c75e:	f001 fbeb 	bl	800df38 <vPortValidateInterruptPriority>
	__asm volatile
 800c762:	f3ef 8211 	mrs	r2, BASEPRI
 800c766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76a:	f383 8811 	msr	BASEPRI, r3
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	f3bf 8f4f 	dsb	sy
 800c776:	61ba      	str	r2, [r7, #24]
 800c778:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c77a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c77c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c782:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c786:	2b00      	cmp	r3, #0
 800c788:	d02f      	beq.n	800c7ea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c794:	68b9      	ldr	r1, [r7, #8]
 800c796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c798:	f000 f8d9 	bl	800c94e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	1e5a      	subs	r2, r3, #1
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c7a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7ac:	d112      	bne.n	800c7d4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d016      	beq.n	800c7e4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b8:	3310      	adds	r3, #16
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f000 fdc8 	bl	800d350 <xTaskRemoveFromEventList>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00e      	beq.n	800c7e4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00b      	beq.n	800c7e4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	601a      	str	r2, [r3, #0]
 800c7d2:	e007      	b.n	800c7e4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c7d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7d8:	3301      	adds	r3, #1
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	b25a      	sxtb	r2, r3
 800c7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	637b      	str	r3, [r7, #52]	; 0x34
 800c7e8:	e001      	b.n	800c7ee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	637b      	str	r3, [r7, #52]	; 0x34
 800c7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	f383 8811 	msr	BASEPRI, r3
}
 800c7f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3738      	adds	r7, #56	; 0x38
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10a      	bne.n	800c82c <vQueueDelete+0x28>
	__asm volatile
 800c816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81a:	f383 8811 	msr	BASEPRI, r3
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f3bf 8f4f 	dsb	sy
 800c826:	60bb      	str	r3, [r7, #8]
}
 800c828:	bf00      	nop
 800c82a:	e7fe      	b.n	800c82a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f000 f935 	bl	800ca9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d102      	bne.n	800c842 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f001 fc87 	bl	800e150 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c842:	bf00      	nop
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c84a:	b480      	push	{r7}
 800c84c:	b085      	sub	sp, #20
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c856:	2b00      	cmp	r3, #0
 800c858:	d006      	beq.n	800c868 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f1c3 0307 	rsb	r3, r3, #7
 800c864:	60fb      	str	r3, [r7, #12]
 800c866:	e001      	b.n	800c86c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c868:	2300      	movs	r3, #0
 800c86a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c86c:	68fb      	ldr	r3, [r7, #12]
	}
 800c86e:	4618      	mov	r0, r3
 800c870:	3714      	adds	r7, #20
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr

0800c87a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b086      	sub	sp, #24
 800c87e:	af00      	add	r7, sp, #0
 800c880:	60f8      	str	r0, [r7, #12]
 800c882:	60b9      	str	r1, [r7, #8]
 800c884:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c886:	2300      	movs	r3, #0
 800c888:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10d      	bne.n	800c8b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d14d      	bne.n	800c93c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f000 ffa7 	bl	800d7f8 <xTaskPriorityDisinherit>
 800c8aa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	609a      	str	r2, [r3, #8]
 800c8b2:	e043      	b.n	800c93c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d119      	bne.n	800c8ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	6858      	ldr	r0, [r3, #4]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	68b9      	ldr	r1, [r7, #8]
 800c8c6:	f002 f9b9 	bl	800ec3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	685a      	ldr	r2, [r3, #4]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d2:	441a      	add	r2, r3
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	685a      	ldr	r2, [r3, #4]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	689b      	ldr	r3, [r3, #8]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d32b      	bcc.n	800c93c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	605a      	str	r2, [r3, #4]
 800c8ec:	e026      	b.n	800c93c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	68d8      	ldr	r0, [r3, #12]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	68b9      	ldr	r1, [r7, #8]
 800c8fa:	f002 f99f 	bl	800ec3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	68da      	ldr	r2, [r3, #12]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c906:	425b      	negs	r3, r3
 800c908:	441a      	add	r2, r3
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	68da      	ldr	r2, [r3, #12]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	429a      	cmp	r2, r3
 800c918:	d207      	bcs.n	800c92a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	689a      	ldr	r2, [r3, #8]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c922:	425b      	negs	r3, r3
 800c924:	441a      	add	r2, r3
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b02      	cmp	r3, #2
 800c92e:	d105      	bne.n	800c93c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d002      	beq.n	800c93c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	3b01      	subs	r3, #1
 800c93a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	1c5a      	adds	r2, r3, #1
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c944:	697b      	ldr	r3, [r7, #20]
}
 800c946:	4618      	mov	r0, r3
 800c948:	3718      	adds	r7, #24
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b082      	sub	sp, #8
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d018      	beq.n	800c992 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	68da      	ldr	r2, [r3, #12]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c968:	441a      	add	r2, r3
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	68da      	ldr	r2, [r3, #12]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	429a      	cmp	r2, r3
 800c978:	d303      	bcc.n	800c982 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	68d9      	ldr	r1, [r3, #12]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c98a:	461a      	mov	r2, r3
 800c98c:	6838      	ldr	r0, [r7, #0]
 800c98e:	f002 f955 	bl	800ec3c <memcpy>
	}
}
 800c992:	bf00      	nop
 800c994:	3708      	adds	r7, #8
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b084      	sub	sp, #16
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c9a2:	f001 f9e7 	bl	800dd74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9ae:	e011      	b.n	800c9d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d012      	beq.n	800c9de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	3324      	adds	r3, #36	; 0x24
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f000 fcc7 	bl	800d350 <xTaskRemoveFromEventList>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d001      	beq.n	800c9cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c9c8:	f000 fd9c 	bl	800d504 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c9cc:	7bfb      	ldrb	r3, [r7, #15]
 800c9ce:	3b01      	subs	r3, #1
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	dce9      	bgt.n	800c9b0 <prvUnlockQueue+0x16>
 800c9dc:	e000      	b.n	800c9e0 <prvUnlockQueue+0x46>
					break;
 800c9de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	22ff      	movs	r2, #255	; 0xff
 800c9e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c9e8:	f001 f9f4 	bl	800ddd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c9ec:	f001 f9c2 	bl	800dd74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9f8:	e011      	b.n	800ca1e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	691b      	ldr	r3, [r3, #16]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d012      	beq.n	800ca28 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	3310      	adds	r3, #16
 800ca06:	4618      	mov	r0, r3
 800ca08:	f000 fca2 	bl	800d350 <xTaskRemoveFromEventList>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d001      	beq.n	800ca16 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca12:	f000 fd77 	bl	800d504 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca16:	7bbb      	ldrb	r3, [r7, #14]
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	dce9      	bgt.n	800c9fa <prvUnlockQueue+0x60>
 800ca26:	e000      	b.n	800ca2a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca28:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	22ff      	movs	r2, #255	; 0xff
 800ca2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ca32:	f001 f9cf 	bl	800ddd4 <vPortExitCritical>
}
 800ca36:	bf00      	nop
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b084      	sub	sp, #16
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca46:	f001 f995 	bl	800dd74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d102      	bne.n	800ca58 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca52:	2301      	movs	r3, #1
 800ca54:	60fb      	str	r3, [r7, #12]
 800ca56:	e001      	b.n	800ca5c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca5c:	f001 f9ba 	bl	800ddd4 <vPortExitCritical>

	return xReturn;
 800ca60:	68fb      	ldr	r3, [r7, #12]
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b084      	sub	sp, #16
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca72:	f001 f97f 	bl	800dd74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d102      	bne.n	800ca88 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca82:	2301      	movs	r3, #1
 800ca84:	60fb      	str	r3, [r7, #12]
 800ca86:	e001      	b.n	800ca8c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca8c:	f001 f9a2 	bl	800ddd4 <vPortExitCritical>

	return xReturn;
 800ca90:	68fb      	ldr	r3, [r7, #12]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
	...

0800ca9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b085      	sub	sp, #20
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800caa4:	2300      	movs	r3, #0
 800caa6:	60fb      	str	r3, [r7, #12]
 800caa8:	e016      	b.n	800cad8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800caaa:	4a10      	ldr	r2, [pc, #64]	; (800caec <vQueueUnregisterQueue+0x50>)
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	4413      	add	r3, r2
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d10b      	bne.n	800cad2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800caba:	4a0c      	ldr	r2, [pc, #48]	; (800caec <vQueueUnregisterQueue+0x50>)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2100      	movs	r1, #0
 800cac0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cac4:	4a09      	ldr	r2, [pc, #36]	; (800caec <vQueueUnregisterQueue+0x50>)
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	00db      	lsls	r3, r3, #3
 800caca:	4413      	add	r3, r2
 800cacc:	2200      	movs	r2, #0
 800cace:	605a      	str	r2, [r3, #4]
				break;
 800cad0:	e006      	b.n	800cae0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	3301      	adds	r3, #1
 800cad6:	60fb      	str	r3, [r7, #12]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2b07      	cmp	r3, #7
 800cadc:	d9e5      	bls.n	800caaa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cade:	bf00      	nop
 800cae0:	bf00      	nop
 800cae2:	3714      	adds	r7, #20
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr
 800caec:	20002528 	.word	0x20002528

0800caf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b08e      	sub	sp, #56	; 0x38
 800caf4:	af04      	add	r7, sp, #16
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	607a      	str	r2, [r7, #4]
 800cafc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d10a      	bne.n	800cb1a <xTaskCreateStatic+0x2a>
	__asm volatile
 800cb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb08:	f383 8811 	msr	BASEPRI, r3
 800cb0c:	f3bf 8f6f 	isb	sy
 800cb10:	f3bf 8f4f 	dsb	sy
 800cb14:	623b      	str	r3, [r7, #32]
}
 800cb16:	bf00      	nop
 800cb18:	e7fe      	b.n	800cb18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d10a      	bne.n	800cb36 <xTaskCreateStatic+0x46>
	__asm volatile
 800cb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb24:	f383 8811 	msr	BASEPRI, r3
 800cb28:	f3bf 8f6f 	isb	sy
 800cb2c:	f3bf 8f4f 	dsb	sy
 800cb30:	61fb      	str	r3, [r7, #28]
}
 800cb32:	bf00      	nop
 800cb34:	e7fe      	b.n	800cb34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb36:	23b4      	movs	r3, #180	; 0xb4
 800cb38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	2bb4      	cmp	r3, #180	; 0xb4
 800cb3e:	d00a      	beq.n	800cb56 <xTaskCreateStatic+0x66>
	__asm volatile
 800cb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb44:	f383 8811 	msr	BASEPRI, r3
 800cb48:	f3bf 8f6f 	isb	sy
 800cb4c:	f3bf 8f4f 	dsb	sy
 800cb50:	61bb      	str	r3, [r7, #24]
}
 800cb52:	bf00      	nop
 800cb54:	e7fe      	b.n	800cb54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cb56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d01e      	beq.n	800cb9c <xTaskCreateStatic+0xac>
 800cb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d01b      	beq.n	800cb9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb70:	2202      	movs	r2, #2
 800cb72:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb76:	2300      	movs	r3, #0
 800cb78:	9303      	str	r3, [sp, #12]
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	9302      	str	r3, [sp, #8]
 800cb7e:	f107 0314 	add.w	r3, r7, #20
 800cb82:	9301      	str	r3, [sp, #4]
 800cb84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb86:	9300      	str	r3, [sp, #0]
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	68b9      	ldr	r1, [r7, #8]
 800cb8e:	68f8      	ldr	r0, [r7, #12]
 800cb90:	f000 f850 	bl	800cc34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb96:	f000 f8eb 	bl	800cd70 <prvAddNewTaskToReadyList>
 800cb9a:	e001      	b.n	800cba0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cba0:	697b      	ldr	r3, [r7, #20]
	}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3728      	adds	r7, #40	; 0x28
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cbaa:	b580      	push	{r7, lr}
 800cbac:	b08c      	sub	sp, #48	; 0x30
 800cbae:	af04      	add	r7, sp, #16
 800cbb0:	60f8      	str	r0, [r7, #12]
 800cbb2:	60b9      	str	r1, [r7, #8]
 800cbb4:	603b      	str	r3, [r7, #0]
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cbba:	88fb      	ldrh	r3, [r7, #6]
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f001 f9fa 	bl	800dfb8 <pvPortMalloc>
 800cbc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d00e      	beq.n	800cbea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cbcc:	20b4      	movs	r0, #180	; 0xb4
 800cbce:	f001 f9f3 	bl	800dfb8 <pvPortMalloc>
 800cbd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d003      	beq.n	800cbe2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	697a      	ldr	r2, [r7, #20]
 800cbde:	631a      	str	r2, [r3, #48]	; 0x30
 800cbe0:	e005      	b.n	800cbee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cbe2:	6978      	ldr	r0, [r7, #20]
 800cbe4:	f001 fab4 	bl	800e150 <vPortFree>
 800cbe8:	e001      	b.n	800cbee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cbea:	2300      	movs	r3, #0
 800cbec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d017      	beq.n	800cc24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cbfc:	88fa      	ldrh	r2, [r7, #6]
 800cbfe:	2300      	movs	r3, #0
 800cc00:	9303      	str	r3, [sp, #12]
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	9302      	str	r3, [sp, #8]
 800cc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc08:	9301      	str	r3, [sp, #4]
 800cc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	68b9      	ldr	r1, [r7, #8]
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	f000 f80e 	bl	800cc34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc18:	69f8      	ldr	r0, [r7, #28]
 800cc1a:	f000 f8a9 	bl	800cd70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	61bb      	str	r3, [r7, #24]
 800cc22:	e002      	b.n	800cc2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc2a:	69bb      	ldr	r3, [r7, #24]
	}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3720      	adds	r7, #32
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b088      	sub	sp, #32
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
 800cc40:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	4413      	add	r3, r2
 800cc52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	f023 0307 	bic.w	r3, r3, #7
 800cc5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	f003 0307 	and.w	r3, r3, #7
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00a      	beq.n	800cc7c <prvInitialiseNewTask+0x48>
	__asm volatile
 800cc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6a:	f383 8811 	msr	BASEPRI, r3
 800cc6e:	f3bf 8f6f 	isb	sy
 800cc72:	f3bf 8f4f 	dsb	sy
 800cc76:	617b      	str	r3, [r7, #20]
}
 800cc78:	bf00      	nop
 800cc7a:	e7fe      	b.n	800cc7a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d01f      	beq.n	800ccc2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc82:	2300      	movs	r3, #0
 800cc84:	61fb      	str	r3, [r7, #28]
 800cc86:	e012      	b.n	800ccae <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc88:	68ba      	ldr	r2, [r7, #8]
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	4413      	add	r3, r2
 800cc8e:	7819      	ldrb	r1, [r3, #0]
 800cc90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	4413      	add	r3, r2
 800cc96:	3334      	adds	r3, #52	; 0x34
 800cc98:	460a      	mov	r2, r1
 800cc9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	4413      	add	r3, r2
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d006      	beq.n	800ccb6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	61fb      	str	r3, [r7, #28]
 800ccae:	69fb      	ldr	r3, [r7, #28]
 800ccb0:	2b0f      	cmp	r3, #15
 800ccb2:	d9e9      	bls.n	800cc88 <prvInitialiseNewTask+0x54>
 800ccb4:	e000      	b.n	800ccb8 <prvInitialiseNewTask+0x84>
			{
				break;
 800ccb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ccb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ccc0:	e003      	b.n	800ccca <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ccc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ccca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cccc:	2b06      	cmp	r3, #6
 800ccce:	d901      	bls.n	800ccd4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ccd0:	2306      	movs	r3, #6
 800ccd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ccd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ccda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccde:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce2:	2200      	movs	r2, #0
 800cce4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce8:	3304      	adds	r3, #4
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fe ff2a 	bl	800bb44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ccf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf2:	3318      	adds	r3, #24
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7fe ff25 	bl	800bb44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd02:	f1c3 0207 	rsb	r2, r3, #7
 800cd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd12:	2200      	movs	r2, #0
 800cd14:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd22:	334c      	adds	r3, #76	; 0x4c
 800cd24:	2260      	movs	r2, #96	; 0x60
 800cd26:	2100      	movs	r1, #0
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f001 ff95 	bl	800ec58 <memset>
 800cd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd30:	4a0c      	ldr	r2, [pc, #48]	; (800cd64 <prvInitialiseNewTask+0x130>)
 800cd32:	651a      	str	r2, [r3, #80]	; 0x50
 800cd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd36:	4a0c      	ldr	r2, [pc, #48]	; (800cd68 <prvInitialiseNewTask+0x134>)
 800cd38:	655a      	str	r2, [r3, #84]	; 0x54
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3c:	4a0b      	ldr	r2, [pc, #44]	; (800cd6c <prvInitialiseNewTask+0x138>)
 800cd3e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd40:	683a      	ldr	r2, [r7, #0]
 800cd42:	68f9      	ldr	r1, [r7, #12]
 800cd44:	69b8      	ldr	r0, [r7, #24]
 800cd46:	f000 fee5 	bl	800db14 <pxPortInitialiseStack>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d002      	beq.n	800cd5c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd5c:	bf00      	nop
 800cd5e:	3720      	adds	r7, #32
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	0801019c 	.word	0x0801019c
 800cd68:	080101bc 	.word	0x080101bc
 800cd6c:	0801017c 	.word	0x0801017c

0800cd70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd78:	f000 fffc 	bl	800dd74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd7c:	4b2a      	ldr	r3, [pc, #168]	; (800ce28 <prvAddNewTaskToReadyList+0xb8>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	3301      	adds	r3, #1
 800cd82:	4a29      	ldr	r2, [pc, #164]	; (800ce28 <prvAddNewTaskToReadyList+0xb8>)
 800cd84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd86:	4b29      	ldr	r3, [pc, #164]	; (800ce2c <prvAddNewTaskToReadyList+0xbc>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d109      	bne.n	800cda2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd8e:	4a27      	ldr	r2, [pc, #156]	; (800ce2c <prvAddNewTaskToReadyList+0xbc>)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cd94:	4b24      	ldr	r3, [pc, #144]	; (800ce28 <prvAddNewTaskToReadyList+0xb8>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d110      	bne.n	800cdbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cd9c:	f000 fbd6 	bl	800d54c <prvInitialiseTaskLists>
 800cda0:	e00d      	b.n	800cdbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cda2:	4b23      	ldr	r3, [pc, #140]	; (800ce30 <prvAddNewTaskToReadyList+0xc0>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d109      	bne.n	800cdbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cdaa:	4b20      	ldr	r3, [pc, #128]	; (800ce2c <prvAddNewTaskToReadyList+0xbc>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d802      	bhi.n	800cdbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cdb8:	4a1c      	ldr	r2, [pc, #112]	; (800ce2c <prvAddNewTaskToReadyList+0xbc>)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cdbe:	4b1d      	ldr	r3, [pc, #116]	; (800ce34 <prvAddNewTaskToReadyList+0xc4>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	4a1b      	ldr	r2, [pc, #108]	; (800ce34 <prvAddNewTaskToReadyList+0xc4>)
 800cdc6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdcc:	2201      	movs	r2, #1
 800cdce:	409a      	lsls	r2, r3
 800cdd0:	4b19      	ldr	r3, [pc, #100]	; (800ce38 <prvAddNewTaskToReadyList+0xc8>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	4a18      	ldr	r2, [pc, #96]	; (800ce38 <prvAddNewTaskToReadyList+0xc8>)
 800cdd8:	6013      	str	r3, [r2, #0]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdde:	4613      	mov	r3, r2
 800cde0:	009b      	lsls	r3, r3, #2
 800cde2:	4413      	add	r3, r2
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	4a15      	ldr	r2, [pc, #84]	; (800ce3c <prvAddNewTaskToReadyList+0xcc>)
 800cde8:	441a      	add	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	3304      	adds	r3, #4
 800cdee:	4619      	mov	r1, r3
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	f7fe feb4 	bl	800bb5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cdf6:	f000 ffed 	bl	800ddd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cdfa:	4b0d      	ldr	r3, [pc, #52]	; (800ce30 <prvAddNewTaskToReadyList+0xc0>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d00e      	beq.n	800ce20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce02:	4b0a      	ldr	r3, [pc, #40]	; (800ce2c <prvAddNewTaskToReadyList+0xbc>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d207      	bcs.n	800ce20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce10:	4b0b      	ldr	r3, [pc, #44]	; (800ce40 <prvAddNewTaskToReadyList+0xd0>)
 800ce12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce16:	601a      	str	r2, [r3, #0]
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce20:	bf00      	nop
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	20002668 	.word	0x20002668
 800ce2c:	20002568 	.word	0x20002568
 800ce30:	20002674 	.word	0x20002674
 800ce34:	20002684 	.word	0x20002684
 800ce38:	20002670 	.word	0x20002670
 800ce3c:	2000256c 	.word	0x2000256c
 800ce40:	e000ed04 	.word	0xe000ed04

0800ce44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d017      	beq.n	800ce86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ce56:	4b13      	ldr	r3, [pc, #76]	; (800cea4 <vTaskDelay+0x60>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00a      	beq.n	800ce74 <vTaskDelay+0x30>
	__asm volatile
 800ce5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce62:	f383 8811 	msr	BASEPRI, r3
 800ce66:	f3bf 8f6f 	isb	sy
 800ce6a:	f3bf 8f4f 	dsb	sy
 800ce6e:	60bb      	str	r3, [r7, #8]
}
 800ce70:	bf00      	nop
 800ce72:	e7fe      	b.n	800ce72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ce74:	f000 f884 	bl	800cf80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ce78:	2100      	movs	r1, #0
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 fde4 	bl	800da48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ce80:	f000 f88c 	bl	800cf9c <xTaskResumeAll>
 800ce84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d107      	bne.n	800ce9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ce8c:	4b06      	ldr	r3, [pc, #24]	; (800cea8 <vTaskDelay+0x64>)
 800ce8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce9c:	bf00      	nop
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	20002690 	.word	0x20002690
 800cea8:	e000ed04 	.word	0xe000ed04

0800ceac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b08a      	sub	sp, #40	; 0x28
 800ceb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ceba:	463a      	mov	r2, r7
 800cebc:	1d39      	adds	r1, r7, #4
 800cebe:	f107 0308 	add.w	r3, r7, #8
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7f3 fb5e 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cec8:	6839      	ldr	r1, [r7, #0]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	68ba      	ldr	r2, [r7, #8]
 800cece:	9202      	str	r2, [sp, #8]
 800ced0:	9301      	str	r3, [sp, #4]
 800ced2:	2300      	movs	r3, #0
 800ced4:	9300      	str	r3, [sp, #0]
 800ced6:	2300      	movs	r3, #0
 800ced8:	460a      	mov	r2, r1
 800ceda:	4921      	ldr	r1, [pc, #132]	; (800cf60 <vTaskStartScheduler+0xb4>)
 800cedc:	4821      	ldr	r0, [pc, #132]	; (800cf64 <vTaskStartScheduler+0xb8>)
 800cede:	f7ff fe07 	bl	800caf0 <xTaskCreateStatic>
 800cee2:	4603      	mov	r3, r0
 800cee4:	4a20      	ldr	r2, [pc, #128]	; (800cf68 <vTaskStartScheduler+0xbc>)
 800cee6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cee8:	4b1f      	ldr	r3, [pc, #124]	; (800cf68 <vTaskStartScheduler+0xbc>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d002      	beq.n	800cef6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cef0:	2301      	movs	r3, #1
 800cef2:	617b      	str	r3, [r7, #20]
 800cef4:	e001      	b.n	800cefa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cef6:	2300      	movs	r3, #0
 800cef8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d11b      	bne.n	800cf38 <vTaskStartScheduler+0x8c>
	__asm volatile
 800cf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf04:	f383 8811 	msr	BASEPRI, r3
 800cf08:	f3bf 8f6f 	isb	sy
 800cf0c:	f3bf 8f4f 	dsb	sy
 800cf10:	613b      	str	r3, [r7, #16]
}
 800cf12:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf14:	4b15      	ldr	r3, [pc, #84]	; (800cf6c <vTaskStartScheduler+0xc0>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	334c      	adds	r3, #76	; 0x4c
 800cf1a:	4a15      	ldr	r2, [pc, #84]	; (800cf70 <vTaskStartScheduler+0xc4>)
 800cf1c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf1e:	4b15      	ldr	r3, [pc, #84]	; (800cf74 <vTaskStartScheduler+0xc8>)
 800cf20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf26:	4b14      	ldr	r3, [pc, #80]	; (800cf78 <vTaskStartScheduler+0xcc>)
 800cf28:	2201      	movs	r2, #1
 800cf2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf2c:	4b13      	ldr	r3, [pc, #76]	; (800cf7c <vTaskStartScheduler+0xd0>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf32:	f000 fe7d 	bl	800dc30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf36:	e00e      	b.n	800cf56 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf3e:	d10a      	bne.n	800cf56 <vTaskStartScheduler+0xaa>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	60fb      	str	r3, [r7, #12]
}
 800cf52:	bf00      	nop
 800cf54:	e7fe      	b.n	800cf54 <vTaskStartScheduler+0xa8>
}
 800cf56:	bf00      	nop
 800cf58:	3718      	adds	r7, #24
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	080100c8 	.word	0x080100c8
 800cf64:	0800d51d 	.word	0x0800d51d
 800cf68:	2000268c 	.word	0x2000268c
 800cf6c:	20002568 	.word	0x20002568
 800cf70:	20000030 	.word	0x20000030
 800cf74:	20002688 	.word	0x20002688
 800cf78:	20002674 	.word	0x20002674
 800cf7c:	2000266c 	.word	0x2000266c

0800cf80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cf80:	b480      	push	{r7}
 800cf82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cf84:	4b04      	ldr	r3, [pc, #16]	; (800cf98 <vTaskSuspendAll+0x18>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	4a03      	ldr	r2, [pc, #12]	; (800cf98 <vTaskSuspendAll+0x18>)
 800cf8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cf8e:	bf00      	nop
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr
 800cf98:	20002690 	.word	0x20002690

0800cf9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cfaa:	4b41      	ldr	r3, [pc, #260]	; (800d0b0 <xTaskResumeAll+0x114>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d10a      	bne.n	800cfc8 <xTaskResumeAll+0x2c>
	__asm volatile
 800cfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	603b      	str	r3, [r7, #0]
}
 800cfc4:	bf00      	nop
 800cfc6:	e7fe      	b.n	800cfc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cfc8:	f000 fed4 	bl	800dd74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cfcc:	4b38      	ldr	r3, [pc, #224]	; (800d0b0 <xTaskResumeAll+0x114>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	4a37      	ldr	r2, [pc, #220]	; (800d0b0 <xTaskResumeAll+0x114>)
 800cfd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfd6:	4b36      	ldr	r3, [pc, #216]	; (800d0b0 <xTaskResumeAll+0x114>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d161      	bne.n	800d0a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cfde:	4b35      	ldr	r3, [pc, #212]	; (800d0b4 <xTaskResumeAll+0x118>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d05d      	beq.n	800d0a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfe6:	e02e      	b.n	800d046 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfe8:	4b33      	ldr	r3, [pc, #204]	; (800d0b8 <xTaskResumeAll+0x11c>)
 800cfea:	68db      	ldr	r3, [r3, #12]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	3318      	adds	r3, #24
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7fe fe0f 	bl	800bc18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	3304      	adds	r3, #4
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fe fe0a 	bl	800bc18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d008:	2201      	movs	r2, #1
 800d00a:	409a      	lsls	r2, r3
 800d00c:	4b2b      	ldr	r3, [pc, #172]	; (800d0bc <xTaskResumeAll+0x120>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4313      	orrs	r3, r2
 800d012:	4a2a      	ldr	r2, [pc, #168]	; (800d0bc <xTaskResumeAll+0x120>)
 800d014:	6013      	str	r3, [r2, #0]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d01a:	4613      	mov	r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	4413      	add	r3, r2
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	4a27      	ldr	r2, [pc, #156]	; (800d0c0 <xTaskResumeAll+0x124>)
 800d024:	441a      	add	r2, r3
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	3304      	adds	r3, #4
 800d02a:	4619      	mov	r1, r3
 800d02c:	4610      	mov	r0, r2
 800d02e:	f7fe fd96 	bl	800bb5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d036:	4b23      	ldr	r3, [pc, #140]	; (800d0c4 <xTaskResumeAll+0x128>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d302      	bcc.n	800d046 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d040:	4b21      	ldr	r3, [pc, #132]	; (800d0c8 <xTaskResumeAll+0x12c>)
 800d042:	2201      	movs	r2, #1
 800d044:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d046:	4b1c      	ldr	r3, [pc, #112]	; (800d0b8 <xTaskResumeAll+0x11c>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d1cc      	bne.n	800cfe8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d001      	beq.n	800d058 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d054:	f000 fb1c 	bl	800d690 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d058:	4b1c      	ldr	r3, [pc, #112]	; (800d0cc <xTaskResumeAll+0x130>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d010      	beq.n	800d086 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d064:	f000 f836 	bl	800d0d4 <xTaskIncrementTick>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d002      	beq.n	800d074 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d06e:	4b16      	ldr	r3, [pc, #88]	; (800d0c8 <xTaskResumeAll+0x12c>)
 800d070:	2201      	movs	r2, #1
 800d072:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	3b01      	subs	r3, #1
 800d078:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d1f1      	bne.n	800d064 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d080:	4b12      	ldr	r3, [pc, #72]	; (800d0cc <xTaskResumeAll+0x130>)
 800d082:	2200      	movs	r2, #0
 800d084:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d086:	4b10      	ldr	r3, [pc, #64]	; (800d0c8 <xTaskResumeAll+0x12c>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d009      	beq.n	800d0a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d08e:	2301      	movs	r3, #1
 800d090:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d092:	4b0f      	ldr	r3, [pc, #60]	; (800d0d0 <xTaskResumeAll+0x134>)
 800d094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d098:	601a      	str	r2, [r3, #0]
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0a2:	f000 fe97 	bl	800ddd4 <vPortExitCritical>

	return xAlreadyYielded;
 800d0a6:	68bb      	ldr	r3, [r7, #8]
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3710      	adds	r7, #16
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	20002690 	.word	0x20002690
 800d0b4:	20002668 	.word	0x20002668
 800d0b8:	20002628 	.word	0x20002628
 800d0bc:	20002670 	.word	0x20002670
 800d0c0:	2000256c 	.word	0x2000256c
 800d0c4:	20002568 	.word	0x20002568
 800d0c8:	2000267c 	.word	0x2000267c
 800d0cc:	20002678 	.word	0x20002678
 800d0d0:	e000ed04 	.word	0xe000ed04

0800d0d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b086      	sub	sp, #24
 800d0d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0de:	4b4e      	ldr	r3, [pc, #312]	; (800d218 <xTaskIncrementTick+0x144>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	f040 808e 	bne.w	800d204 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d0e8:	4b4c      	ldr	r3, [pc, #304]	; (800d21c <xTaskIncrementTick+0x148>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d0f0:	4a4a      	ldr	r2, [pc, #296]	; (800d21c <xTaskIncrementTick+0x148>)
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d120      	bne.n	800d13e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d0fc:	4b48      	ldr	r3, [pc, #288]	; (800d220 <xTaskIncrementTick+0x14c>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00a      	beq.n	800d11c <xTaskIncrementTick+0x48>
	__asm volatile
 800d106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10a:	f383 8811 	msr	BASEPRI, r3
 800d10e:	f3bf 8f6f 	isb	sy
 800d112:	f3bf 8f4f 	dsb	sy
 800d116:	603b      	str	r3, [r7, #0]
}
 800d118:	bf00      	nop
 800d11a:	e7fe      	b.n	800d11a <xTaskIncrementTick+0x46>
 800d11c:	4b40      	ldr	r3, [pc, #256]	; (800d220 <xTaskIncrementTick+0x14c>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	60fb      	str	r3, [r7, #12]
 800d122:	4b40      	ldr	r3, [pc, #256]	; (800d224 <xTaskIncrementTick+0x150>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a3e      	ldr	r2, [pc, #248]	; (800d220 <xTaskIncrementTick+0x14c>)
 800d128:	6013      	str	r3, [r2, #0]
 800d12a:	4a3e      	ldr	r2, [pc, #248]	; (800d224 <xTaskIncrementTick+0x150>)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6013      	str	r3, [r2, #0]
 800d130:	4b3d      	ldr	r3, [pc, #244]	; (800d228 <xTaskIncrementTick+0x154>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	3301      	adds	r3, #1
 800d136:	4a3c      	ldr	r2, [pc, #240]	; (800d228 <xTaskIncrementTick+0x154>)
 800d138:	6013      	str	r3, [r2, #0]
 800d13a:	f000 faa9 	bl	800d690 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d13e:	4b3b      	ldr	r3, [pc, #236]	; (800d22c <xTaskIncrementTick+0x158>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	693a      	ldr	r2, [r7, #16]
 800d144:	429a      	cmp	r2, r3
 800d146:	d348      	bcc.n	800d1da <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d148:	4b35      	ldr	r3, [pc, #212]	; (800d220 <xTaskIncrementTick+0x14c>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d104      	bne.n	800d15c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d152:	4b36      	ldr	r3, [pc, #216]	; (800d22c <xTaskIncrementTick+0x158>)
 800d154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d158:	601a      	str	r2, [r3, #0]
					break;
 800d15a:	e03e      	b.n	800d1da <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d15c:	4b30      	ldr	r3, [pc, #192]	; (800d220 <xTaskIncrementTick+0x14c>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d16c:	693a      	ldr	r2, [r7, #16]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	429a      	cmp	r2, r3
 800d172:	d203      	bcs.n	800d17c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d174:	4a2d      	ldr	r2, [pc, #180]	; (800d22c <xTaskIncrementTick+0x158>)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d17a:	e02e      	b.n	800d1da <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	3304      	adds	r3, #4
 800d180:	4618      	mov	r0, r3
 800d182:	f7fe fd49 	bl	800bc18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d004      	beq.n	800d198 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	3318      	adds	r3, #24
 800d192:	4618      	mov	r0, r3
 800d194:	f7fe fd40 	bl	800bc18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d19c:	2201      	movs	r2, #1
 800d19e:	409a      	lsls	r2, r3
 800d1a0:	4b23      	ldr	r3, [pc, #140]	; (800d230 <xTaskIncrementTick+0x15c>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	4a22      	ldr	r2, [pc, #136]	; (800d230 <xTaskIncrementTick+0x15c>)
 800d1a8:	6013      	str	r3, [r2, #0]
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	4413      	add	r3, r2
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	4a1f      	ldr	r2, [pc, #124]	; (800d234 <xTaskIncrementTick+0x160>)
 800d1b8:	441a      	add	r2, r3
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	3304      	adds	r3, #4
 800d1be:	4619      	mov	r1, r3
 800d1c0:	4610      	mov	r0, r2
 800d1c2:	f7fe fccc 	bl	800bb5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ca:	4b1b      	ldr	r3, [pc, #108]	; (800d238 <xTaskIncrementTick+0x164>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d3b9      	bcc.n	800d148 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1d8:	e7b6      	b.n	800d148 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d1da:	4b17      	ldr	r3, [pc, #92]	; (800d238 <xTaskIncrementTick+0x164>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1e0:	4914      	ldr	r1, [pc, #80]	; (800d234 <xTaskIncrementTick+0x160>)
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	4413      	add	r3, r2
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	440b      	add	r3, r1
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	d901      	bls.n	800d1f6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d1f6:	4b11      	ldr	r3, [pc, #68]	; (800d23c <xTaskIncrementTick+0x168>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d007      	beq.n	800d20e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d1fe:	2301      	movs	r3, #1
 800d200:	617b      	str	r3, [r7, #20]
 800d202:	e004      	b.n	800d20e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d204:	4b0e      	ldr	r3, [pc, #56]	; (800d240 <xTaskIncrementTick+0x16c>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	3301      	adds	r3, #1
 800d20a:	4a0d      	ldr	r2, [pc, #52]	; (800d240 <xTaskIncrementTick+0x16c>)
 800d20c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d20e:	697b      	ldr	r3, [r7, #20]
}
 800d210:	4618      	mov	r0, r3
 800d212:	3718      	adds	r7, #24
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}
 800d218:	20002690 	.word	0x20002690
 800d21c:	2000266c 	.word	0x2000266c
 800d220:	20002620 	.word	0x20002620
 800d224:	20002624 	.word	0x20002624
 800d228:	20002680 	.word	0x20002680
 800d22c:	20002688 	.word	0x20002688
 800d230:	20002670 	.word	0x20002670
 800d234:	2000256c 	.word	0x2000256c
 800d238:	20002568 	.word	0x20002568
 800d23c:	2000267c 	.word	0x2000267c
 800d240:	20002678 	.word	0x20002678

0800d244 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d244:	b480      	push	{r7}
 800d246:	b087      	sub	sp, #28
 800d248:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d24a:	4b29      	ldr	r3, [pc, #164]	; (800d2f0 <vTaskSwitchContext+0xac>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d003      	beq.n	800d25a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d252:	4b28      	ldr	r3, [pc, #160]	; (800d2f4 <vTaskSwitchContext+0xb0>)
 800d254:	2201      	movs	r2, #1
 800d256:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d258:	e044      	b.n	800d2e4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800d25a:	4b26      	ldr	r3, [pc, #152]	; (800d2f4 <vTaskSwitchContext+0xb0>)
 800d25c:	2200      	movs	r2, #0
 800d25e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d260:	4b25      	ldr	r3, [pc, #148]	; (800d2f8 <vTaskSwitchContext+0xb4>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	fab3 f383 	clz	r3, r3
 800d26c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d26e:	7afb      	ldrb	r3, [r7, #11]
 800d270:	f1c3 031f 	rsb	r3, r3, #31
 800d274:	617b      	str	r3, [r7, #20]
 800d276:	4921      	ldr	r1, [pc, #132]	; (800d2fc <vTaskSwitchContext+0xb8>)
 800d278:	697a      	ldr	r2, [r7, #20]
 800d27a:	4613      	mov	r3, r2
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	4413      	add	r3, r2
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	440b      	add	r3, r1
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d10a      	bne.n	800d2a0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28e:	f383 8811 	msr	BASEPRI, r3
 800d292:	f3bf 8f6f 	isb	sy
 800d296:	f3bf 8f4f 	dsb	sy
 800d29a:	607b      	str	r3, [r7, #4]
}
 800d29c:	bf00      	nop
 800d29e:	e7fe      	b.n	800d29e <vTaskSwitchContext+0x5a>
 800d2a0:	697a      	ldr	r2, [r7, #20]
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	4413      	add	r3, r2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	4a14      	ldr	r2, [pc, #80]	; (800d2fc <vTaskSwitchContext+0xb8>)
 800d2ac:	4413      	add	r3, r2
 800d2ae:	613b      	str	r3, [r7, #16]
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	685a      	ldr	r2, [r3, #4]
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	605a      	str	r2, [r3, #4]
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	685a      	ldr	r2, [r3, #4]
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	3308      	adds	r3, #8
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d104      	bne.n	800d2d0 <vTaskSwitchContext+0x8c>
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	685a      	ldr	r2, [r3, #4]
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	605a      	str	r2, [r3, #4]
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	4a0a      	ldr	r2, [pc, #40]	; (800d300 <vTaskSwitchContext+0xbc>)
 800d2d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d2da:	4b09      	ldr	r3, [pc, #36]	; (800d300 <vTaskSwitchContext+0xbc>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	334c      	adds	r3, #76	; 0x4c
 800d2e0:	4a08      	ldr	r2, [pc, #32]	; (800d304 <vTaskSwitchContext+0xc0>)
 800d2e2:	6013      	str	r3, [r2, #0]
}
 800d2e4:	bf00      	nop
 800d2e6:	371c      	adds	r7, #28
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr
 800d2f0:	20002690 	.word	0x20002690
 800d2f4:	2000267c 	.word	0x2000267c
 800d2f8:	20002670 	.word	0x20002670
 800d2fc:	2000256c 	.word	0x2000256c
 800d300:	20002568 	.word	0x20002568
 800d304:	20000030 	.word	0x20000030

0800d308 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10a      	bne.n	800d32e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31c:	f383 8811 	msr	BASEPRI, r3
 800d320:	f3bf 8f6f 	isb	sy
 800d324:	f3bf 8f4f 	dsb	sy
 800d328:	60fb      	str	r3, [r7, #12]
}
 800d32a:	bf00      	nop
 800d32c:	e7fe      	b.n	800d32c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d32e:	4b07      	ldr	r3, [pc, #28]	; (800d34c <vTaskPlaceOnEventList+0x44>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	3318      	adds	r3, #24
 800d334:	4619      	mov	r1, r3
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f7fe fc35 	bl	800bba6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d33c:	2101      	movs	r1, #1
 800d33e:	6838      	ldr	r0, [r7, #0]
 800d340:	f000 fb82 	bl	800da48 <prvAddCurrentTaskToDelayedList>
}
 800d344:	bf00      	nop
 800d346:	3710      	adds	r7, #16
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	20002568 	.word	0x20002568

0800d350 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d10a      	bne.n	800d37c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36a:	f383 8811 	msr	BASEPRI, r3
 800d36e:	f3bf 8f6f 	isb	sy
 800d372:	f3bf 8f4f 	dsb	sy
 800d376:	60fb      	str	r3, [r7, #12]
}
 800d378:	bf00      	nop
 800d37a:	e7fe      	b.n	800d37a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	3318      	adds	r3, #24
 800d380:	4618      	mov	r0, r3
 800d382:	f7fe fc49 	bl	800bc18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d386:	4b1d      	ldr	r3, [pc, #116]	; (800d3fc <xTaskRemoveFromEventList+0xac>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d11c      	bne.n	800d3c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	3304      	adds	r3, #4
 800d392:	4618      	mov	r0, r3
 800d394:	f7fe fc40 	bl	800bc18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39c:	2201      	movs	r2, #1
 800d39e:	409a      	lsls	r2, r3
 800d3a0:	4b17      	ldr	r3, [pc, #92]	; (800d400 <xTaskRemoveFromEventList+0xb0>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	4a16      	ldr	r2, [pc, #88]	; (800d400 <xTaskRemoveFromEventList+0xb0>)
 800d3a8:	6013      	str	r3, [r2, #0]
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	009b      	lsls	r3, r3, #2
 800d3b2:	4413      	add	r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	4a13      	ldr	r2, [pc, #76]	; (800d404 <xTaskRemoveFromEventList+0xb4>)
 800d3b8:	441a      	add	r2, r3
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	3304      	adds	r3, #4
 800d3be:	4619      	mov	r1, r3
 800d3c0:	4610      	mov	r0, r2
 800d3c2:	f7fe fbcc 	bl	800bb5e <vListInsertEnd>
 800d3c6:	e005      	b.n	800d3d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	3318      	adds	r3, #24
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	480e      	ldr	r0, [pc, #56]	; (800d408 <xTaskRemoveFromEventList+0xb8>)
 800d3d0:	f7fe fbc5 	bl	800bb5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3d8:	4b0c      	ldr	r3, [pc, #48]	; (800d40c <xTaskRemoveFromEventList+0xbc>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d905      	bls.n	800d3ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d3e6:	4b0a      	ldr	r3, [pc, #40]	; (800d410 <xTaskRemoveFromEventList+0xc0>)
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	601a      	str	r2, [r3, #0]
 800d3ec:	e001      	b.n	800d3f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d3f2:	697b      	ldr	r3, [r7, #20]
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3718      	adds	r7, #24
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	20002690 	.word	0x20002690
 800d400:	20002670 	.word	0x20002670
 800d404:	2000256c 	.word	0x2000256c
 800d408:	20002628 	.word	0x20002628
 800d40c:	20002568 	.word	0x20002568
 800d410:	2000267c 	.word	0x2000267c

0800d414 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d41c:	4b06      	ldr	r3, [pc, #24]	; (800d438 <vTaskInternalSetTimeOutState+0x24>)
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d424:	4b05      	ldr	r3, [pc, #20]	; (800d43c <vTaskInternalSetTimeOutState+0x28>)
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	605a      	str	r2, [r3, #4]
}
 800d42c:	bf00      	nop
 800d42e:	370c      	adds	r7, #12
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr
 800d438:	20002680 	.word	0x20002680
 800d43c:	2000266c 	.word	0x2000266c

0800d440 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b088      	sub	sp, #32
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d10a      	bne.n	800d466 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d454:	f383 8811 	msr	BASEPRI, r3
 800d458:	f3bf 8f6f 	isb	sy
 800d45c:	f3bf 8f4f 	dsb	sy
 800d460:	613b      	str	r3, [r7, #16]
}
 800d462:	bf00      	nop
 800d464:	e7fe      	b.n	800d464 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d10a      	bne.n	800d482 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d470:	f383 8811 	msr	BASEPRI, r3
 800d474:	f3bf 8f6f 	isb	sy
 800d478:	f3bf 8f4f 	dsb	sy
 800d47c:	60fb      	str	r3, [r7, #12]
}
 800d47e:	bf00      	nop
 800d480:	e7fe      	b.n	800d480 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d482:	f000 fc77 	bl	800dd74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d486:	4b1d      	ldr	r3, [pc, #116]	; (800d4fc <xTaskCheckForTimeOut+0xbc>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	69ba      	ldr	r2, [r7, #24]
 800d492:	1ad3      	subs	r3, r2, r3
 800d494:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d49e:	d102      	bne.n	800d4a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	61fb      	str	r3, [r7, #28]
 800d4a4:	e023      	b.n	800d4ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	4b15      	ldr	r3, [pc, #84]	; (800d500 <xTaskCheckForTimeOut+0xc0>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d007      	beq.n	800d4c2 <xTaskCheckForTimeOut+0x82>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	69ba      	ldr	r2, [r7, #24]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d302      	bcc.n	800d4c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	61fb      	str	r3, [r7, #28]
 800d4c0:	e015      	b.n	800d4ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	697a      	ldr	r2, [r7, #20]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d20b      	bcs.n	800d4e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	1ad2      	subs	r2, r2, r3
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f7ff ff9b 	bl	800d414 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	61fb      	str	r3, [r7, #28]
 800d4e2:	e004      	b.n	800d4ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d4ee:	f000 fc71 	bl	800ddd4 <vPortExitCritical>

	return xReturn;
 800d4f2:	69fb      	ldr	r3, [r7, #28]
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3720      	adds	r7, #32
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	2000266c 	.word	0x2000266c
 800d500:	20002680 	.word	0x20002680

0800d504 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d504:	b480      	push	{r7}
 800d506:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d508:	4b03      	ldr	r3, [pc, #12]	; (800d518 <vTaskMissedYield+0x14>)
 800d50a:	2201      	movs	r2, #1
 800d50c:	601a      	str	r2, [r3, #0]
}
 800d50e:	bf00      	nop
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr
 800d518:	2000267c 	.word	0x2000267c

0800d51c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d524:	f000 f852 	bl	800d5cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d528:	4b06      	ldr	r3, [pc, #24]	; (800d544 <prvIdleTask+0x28>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d9f9      	bls.n	800d524 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d530:	4b05      	ldr	r3, [pc, #20]	; (800d548 <prvIdleTask+0x2c>)
 800d532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d536:	601a      	str	r2, [r3, #0]
 800d538:	f3bf 8f4f 	dsb	sy
 800d53c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d540:	e7f0      	b.n	800d524 <prvIdleTask+0x8>
 800d542:	bf00      	nop
 800d544:	2000256c 	.word	0x2000256c
 800d548:	e000ed04 	.word	0xe000ed04

0800d54c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d552:	2300      	movs	r3, #0
 800d554:	607b      	str	r3, [r7, #4]
 800d556:	e00c      	b.n	800d572 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	4613      	mov	r3, r2
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	4413      	add	r3, r2
 800d560:	009b      	lsls	r3, r3, #2
 800d562:	4a12      	ldr	r2, [pc, #72]	; (800d5ac <prvInitialiseTaskLists+0x60>)
 800d564:	4413      	add	r3, r2
 800d566:	4618      	mov	r0, r3
 800d568:	f7fe facc 	bl	800bb04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	3301      	adds	r3, #1
 800d570:	607b      	str	r3, [r7, #4]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2b06      	cmp	r3, #6
 800d576:	d9ef      	bls.n	800d558 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d578:	480d      	ldr	r0, [pc, #52]	; (800d5b0 <prvInitialiseTaskLists+0x64>)
 800d57a:	f7fe fac3 	bl	800bb04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d57e:	480d      	ldr	r0, [pc, #52]	; (800d5b4 <prvInitialiseTaskLists+0x68>)
 800d580:	f7fe fac0 	bl	800bb04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d584:	480c      	ldr	r0, [pc, #48]	; (800d5b8 <prvInitialiseTaskLists+0x6c>)
 800d586:	f7fe fabd 	bl	800bb04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d58a:	480c      	ldr	r0, [pc, #48]	; (800d5bc <prvInitialiseTaskLists+0x70>)
 800d58c:	f7fe faba 	bl	800bb04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d590:	480b      	ldr	r0, [pc, #44]	; (800d5c0 <prvInitialiseTaskLists+0x74>)
 800d592:	f7fe fab7 	bl	800bb04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d596:	4b0b      	ldr	r3, [pc, #44]	; (800d5c4 <prvInitialiseTaskLists+0x78>)
 800d598:	4a05      	ldr	r2, [pc, #20]	; (800d5b0 <prvInitialiseTaskLists+0x64>)
 800d59a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d59c:	4b0a      	ldr	r3, [pc, #40]	; (800d5c8 <prvInitialiseTaskLists+0x7c>)
 800d59e:	4a05      	ldr	r2, [pc, #20]	; (800d5b4 <prvInitialiseTaskLists+0x68>)
 800d5a0:	601a      	str	r2, [r3, #0]
}
 800d5a2:	bf00      	nop
 800d5a4:	3708      	adds	r7, #8
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	2000256c 	.word	0x2000256c
 800d5b0:	200025f8 	.word	0x200025f8
 800d5b4:	2000260c 	.word	0x2000260c
 800d5b8:	20002628 	.word	0x20002628
 800d5bc:	2000263c 	.word	0x2000263c
 800d5c0:	20002654 	.word	0x20002654
 800d5c4:	20002620 	.word	0x20002620
 800d5c8:	20002624 	.word	0x20002624

0800d5cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d5d2:	e019      	b.n	800d608 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d5d4:	f000 fbce 	bl	800dd74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5d8:	4b10      	ldr	r3, [pc, #64]	; (800d61c <prvCheckTasksWaitingTermination+0x50>)
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7fe fb17 	bl	800bc18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d5ea:	4b0d      	ldr	r3, [pc, #52]	; (800d620 <prvCheckTasksWaitingTermination+0x54>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	4a0b      	ldr	r2, [pc, #44]	; (800d620 <prvCheckTasksWaitingTermination+0x54>)
 800d5f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d5f4:	4b0b      	ldr	r3, [pc, #44]	; (800d624 <prvCheckTasksWaitingTermination+0x58>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	4a0a      	ldr	r2, [pc, #40]	; (800d624 <prvCheckTasksWaitingTermination+0x58>)
 800d5fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d5fe:	f000 fbe9 	bl	800ddd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 f810 	bl	800d628 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d608:	4b06      	ldr	r3, [pc, #24]	; (800d624 <prvCheckTasksWaitingTermination+0x58>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d1e1      	bne.n	800d5d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d610:	bf00      	nop
 800d612:	bf00      	nop
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	2000263c 	.word	0x2000263c
 800d620:	20002668 	.word	0x20002668
 800d624:	20002650 	.word	0x20002650

0800d628 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	334c      	adds	r3, #76	; 0x4c
 800d634:	4618      	mov	r0, r3
 800d636:	f001 fc93 	bl	800ef60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d640:	2b00      	cmp	r3, #0
 800d642:	d108      	bne.n	800d656 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d648:	4618      	mov	r0, r3
 800d64a:	f000 fd81 	bl	800e150 <vPortFree>
				vPortFree( pxTCB );
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 fd7e 	bl	800e150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d654:	e018      	b.n	800d688 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d103      	bne.n	800d668 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 fd75 	bl	800e150 <vPortFree>
	}
 800d666:	e00f      	b.n	800d688 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d66e:	2b02      	cmp	r3, #2
 800d670:	d00a      	beq.n	800d688 <prvDeleteTCB+0x60>
	__asm volatile
 800d672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d676:	f383 8811 	msr	BASEPRI, r3
 800d67a:	f3bf 8f6f 	isb	sy
 800d67e:	f3bf 8f4f 	dsb	sy
 800d682:	60fb      	str	r3, [r7, #12]
}
 800d684:	bf00      	nop
 800d686:	e7fe      	b.n	800d686 <prvDeleteTCB+0x5e>
	}
 800d688:	bf00      	nop
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d696:	4b0c      	ldr	r3, [pc, #48]	; (800d6c8 <prvResetNextTaskUnblockTime+0x38>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d104      	bne.n	800d6aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d6a0:	4b0a      	ldr	r3, [pc, #40]	; (800d6cc <prvResetNextTaskUnblockTime+0x3c>)
 800d6a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d6a8:	e008      	b.n	800d6bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6aa:	4b07      	ldr	r3, [pc, #28]	; (800d6c8 <prvResetNextTaskUnblockTime+0x38>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	4a04      	ldr	r2, [pc, #16]	; (800d6cc <prvResetNextTaskUnblockTime+0x3c>)
 800d6ba:	6013      	str	r3, [r2, #0]
}
 800d6bc:	bf00      	nop
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr
 800d6c8:	20002620 	.word	0x20002620
 800d6cc:	20002688 	.word	0x20002688

0800d6d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d6d6:	4b0b      	ldr	r3, [pc, #44]	; (800d704 <xTaskGetSchedulerState+0x34>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d102      	bne.n	800d6e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	607b      	str	r3, [r7, #4]
 800d6e2:	e008      	b.n	800d6f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6e4:	4b08      	ldr	r3, [pc, #32]	; (800d708 <xTaskGetSchedulerState+0x38>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d102      	bne.n	800d6f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d6ec:	2302      	movs	r3, #2
 800d6ee:	607b      	str	r3, [r7, #4]
 800d6f0:	e001      	b.n	800d6f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d6f6:	687b      	ldr	r3, [r7, #4]
	}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr
 800d704:	20002674 	.word	0x20002674
 800d708:	20002690 	.word	0x20002690

0800d70c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d718:	2300      	movs	r3, #0
 800d71a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d05e      	beq.n	800d7e0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d726:	4b31      	ldr	r3, [pc, #196]	; (800d7ec <xTaskPriorityInherit+0xe0>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d24e      	bcs.n	800d7ce <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	699b      	ldr	r3, [r3, #24]
 800d734:	2b00      	cmp	r3, #0
 800d736:	db06      	blt.n	800d746 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d738:	4b2c      	ldr	r3, [pc, #176]	; (800d7ec <xTaskPriorityInherit+0xe0>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d73e:	f1c3 0207 	rsb	r2, r3, #7
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	6959      	ldr	r1, [r3, #20]
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d74e:	4613      	mov	r3, r2
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	4413      	add	r3, r2
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	4a26      	ldr	r2, [pc, #152]	; (800d7f0 <xTaskPriorityInherit+0xe4>)
 800d758:	4413      	add	r3, r2
 800d75a:	4299      	cmp	r1, r3
 800d75c:	d12f      	bne.n	800d7be <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	3304      	adds	r3, #4
 800d762:	4618      	mov	r0, r3
 800d764:	f7fe fa58 	bl	800bc18 <uxListRemove>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10a      	bne.n	800d784 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d772:	2201      	movs	r2, #1
 800d774:	fa02 f303 	lsl.w	r3, r2, r3
 800d778:	43da      	mvns	r2, r3
 800d77a:	4b1e      	ldr	r3, [pc, #120]	; (800d7f4 <xTaskPriorityInherit+0xe8>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4013      	ands	r3, r2
 800d780:	4a1c      	ldr	r2, [pc, #112]	; (800d7f4 <xTaskPriorityInherit+0xe8>)
 800d782:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d784:	4b19      	ldr	r3, [pc, #100]	; (800d7ec <xTaskPriorityInherit+0xe0>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d792:	2201      	movs	r2, #1
 800d794:	409a      	lsls	r2, r3
 800d796:	4b17      	ldr	r3, [pc, #92]	; (800d7f4 <xTaskPriorityInherit+0xe8>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4313      	orrs	r3, r2
 800d79c:	4a15      	ldr	r2, [pc, #84]	; (800d7f4 <xTaskPriorityInherit+0xe8>)
 800d79e:	6013      	str	r3, [r2, #0]
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	4413      	add	r3, r2
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	4a10      	ldr	r2, [pc, #64]	; (800d7f0 <xTaskPriorityInherit+0xe4>)
 800d7ae:	441a      	add	r2, r3
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	3304      	adds	r3, #4
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	4610      	mov	r0, r2
 800d7b8:	f7fe f9d1 	bl	800bb5e <vListInsertEnd>
 800d7bc:	e004      	b.n	800d7c8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d7be:	4b0b      	ldr	r3, [pc, #44]	; (800d7ec <xTaskPriorityInherit+0xe0>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	60fb      	str	r3, [r7, #12]
 800d7cc:	e008      	b.n	800d7e0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7d2:	4b06      	ldr	r3, [pc, #24]	; (800d7ec <xTaskPriorityInherit+0xe0>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d201      	bcs.n	800d7e0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d7dc:	2301      	movs	r3, #1
 800d7de:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
	}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	20002568 	.word	0x20002568
 800d7f0:	2000256c 	.word	0x2000256c
 800d7f4:	20002670 	.word	0x20002670

0800d7f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b086      	sub	sp, #24
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d804:	2300      	movs	r3, #0
 800d806:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d06e      	beq.n	800d8ec <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d80e:	4b3a      	ldr	r3, [pc, #232]	; (800d8f8 <xTaskPriorityDisinherit+0x100>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	693a      	ldr	r2, [r7, #16]
 800d814:	429a      	cmp	r2, r3
 800d816:	d00a      	beq.n	800d82e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81c:	f383 8811 	msr	BASEPRI, r3
 800d820:	f3bf 8f6f 	isb	sy
 800d824:	f3bf 8f4f 	dsb	sy
 800d828:	60fb      	str	r3, [r7, #12]
}
 800d82a:	bf00      	nop
 800d82c:	e7fe      	b.n	800d82c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d832:	2b00      	cmp	r3, #0
 800d834:	d10a      	bne.n	800d84c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d83a:	f383 8811 	msr	BASEPRI, r3
 800d83e:	f3bf 8f6f 	isb	sy
 800d842:	f3bf 8f4f 	dsb	sy
 800d846:	60bb      	str	r3, [r7, #8]
}
 800d848:	bf00      	nop
 800d84a:	e7fe      	b.n	800d84a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d850:	1e5a      	subs	r2, r3, #1
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d85e:	429a      	cmp	r2, r3
 800d860:	d044      	beq.n	800d8ec <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d866:	2b00      	cmp	r3, #0
 800d868:	d140      	bne.n	800d8ec <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	3304      	adds	r3, #4
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fe f9d2 	bl	800bc18 <uxListRemove>
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	d115      	bne.n	800d8a6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d87e:	491f      	ldr	r1, [pc, #124]	; (800d8fc <xTaskPriorityDisinherit+0x104>)
 800d880:	4613      	mov	r3, r2
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	4413      	add	r3, r2
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	440b      	add	r3, r1
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d10a      	bne.n	800d8a6 <xTaskPriorityDisinherit+0xae>
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d894:	2201      	movs	r2, #1
 800d896:	fa02 f303 	lsl.w	r3, r2, r3
 800d89a:	43da      	mvns	r2, r3
 800d89c:	4b18      	ldr	r3, [pc, #96]	; (800d900 <xTaskPriorityDisinherit+0x108>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	4a17      	ldr	r2, [pc, #92]	; (800d900 <xTaskPriorityDisinherit+0x108>)
 800d8a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b2:	f1c3 0207 	rsb	r2, r3, #7
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8be:	2201      	movs	r2, #1
 800d8c0:	409a      	lsls	r2, r3
 800d8c2:	4b0f      	ldr	r3, [pc, #60]	; (800d900 <xTaskPriorityDisinherit+0x108>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	4a0d      	ldr	r2, [pc, #52]	; (800d900 <xTaskPriorityDisinherit+0x108>)
 800d8ca:	6013      	str	r3, [r2, #0]
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8d0:	4613      	mov	r3, r2
 800d8d2:	009b      	lsls	r3, r3, #2
 800d8d4:	4413      	add	r3, r2
 800d8d6:	009b      	lsls	r3, r3, #2
 800d8d8:	4a08      	ldr	r2, [pc, #32]	; (800d8fc <xTaskPriorityDisinherit+0x104>)
 800d8da:	441a      	add	r2, r3
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	3304      	adds	r3, #4
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	4610      	mov	r0, r2
 800d8e4:	f7fe f93b 	bl	800bb5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d8ec:	697b      	ldr	r3, [r7, #20]
	}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3718      	adds	r7, #24
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	20002568 	.word	0x20002568
 800d8fc:	2000256c 	.word	0x2000256c
 800d900:	20002670 	.word	0x20002670

0800d904 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d904:	b580      	push	{r7, lr}
 800d906:	b088      	sub	sp, #32
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d912:	2301      	movs	r3, #1
 800d914:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d077      	beq.n	800da0c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d920:	2b00      	cmp	r3, #0
 800d922:	d10a      	bne.n	800d93a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d928:	f383 8811 	msr	BASEPRI, r3
 800d92c:	f3bf 8f6f 	isb	sy
 800d930:	f3bf 8f4f 	dsb	sy
 800d934:	60fb      	str	r3, [r7, #12]
}
 800d936:	bf00      	nop
 800d938:	e7fe      	b.n	800d938 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d93a:	69bb      	ldr	r3, [r7, #24]
 800d93c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d93e:	683a      	ldr	r2, [r7, #0]
 800d940:	429a      	cmp	r2, r3
 800d942:	d902      	bls.n	800d94a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	61fb      	str	r3, [r7, #28]
 800d948:	e002      	b.n	800d950 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d94e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d950:	69bb      	ldr	r3, [r7, #24]
 800d952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d954:	69fa      	ldr	r2, [r7, #28]
 800d956:	429a      	cmp	r2, r3
 800d958:	d058      	beq.n	800da0c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d95e:	697a      	ldr	r2, [r7, #20]
 800d960:	429a      	cmp	r2, r3
 800d962:	d153      	bne.n	800da0c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d964:	4b2b      	ldr	r3, [pc, #172]	; (800da14 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	69ba      	ldr	r2, [r7, #24]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d10a      	bne.n	800d984 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d972:	f383 8811 	msr	BASEPRI, r3
 800d976:	f3bf 8f6f 	isb	sy
 800d97a:	f3bf 8f4f 	dsb	sy
 800d97e:	60bb      	str	r3, [r7, #8]
}
 800d980:	bf00      	nop
 800d982:	e7fe      	b.n	800d982 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d988:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	69fa      	ldr	r2, [r7, #28]
 800d98e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	699b      	ldr	r3, [r3, #24]
 800d994:	2b00      	cmp	r3, #0
 800d996:	db04      	blt.n	800d9a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	f1c3 0207 	rsb	r2, r3, #7
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	6959      	ldr	r1, [r3, #20]
 800d9a6:	693a      	ldr	r2, [r7, #16]
 800d9a8:	4613      	mov	r3, r2
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	4413      	add	r3, r2
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	4a19      	ldr	r2, [pc, #100]	; (800da18 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d9b2:	4413      	add	r3, r2
 800d9b4:	4299      	cmp	r1, r3
 800d9b6:	d129      	bne.n	800da0c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	3304      	adds	r3, #4
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7fe f92b 	bl	800bc18 <uxListRemove>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d10a      	bne.n	800d9de <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d9d2:	43da      	mvns	r2, r3
 800d9d4:	4b11      	ldr	r3, [pc, #68]	; (800da1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4013      	ands	r3, r2
 800d9da:	4a10      	ldr	r2, [pc, #64]	; (800da1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d9dc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	409a      	lsls	r2, r3
 800d9e6:	4b0d      	ldr	r3, [pc, #52]	; (800da1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4313      	orrs	r3, r2
 800d9ec:	4a0b      	ldr	r2, [pc, #44]	; (800da1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d9ee:	6013      	str	r3, [r2, #0]
 800d9f0:	69bb      	ldr	r3, [r7, #24]
 800d9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	4413      	add	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4a06      	ldr	r2, [pc, #24]	; (800da18 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d9fe:	441a      	add	r2, r3
 800da00:	69bb      	ldr	r3, [r7, #24]
 800da02:	3304      	adds	r3, #4
 800da04:	4619      	mov	r1, r3
 800da06:	4610      	mov	r0, r2
 800da08:	f7fe f8a9 	bl	800bb5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da0c:	bf00      	nop
 800da0e:	3720      	adds	r7, #32
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	20002568 	.word	0x20002568
 800da18:	2000256c 	.word	0x2000256c
 800da1c:	20002670 	.word	0x20002670

0800da20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800da20:	b480      	push	{r7}
 800da22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800da24:	4b07      	ldr	r3, [pc, #28]	; (800da44 <pvTaskIncrementMutexHeldCount+0x24>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d004      	beq.n	800da36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800da2c:	4b05      	ldr	r3, [pc, #20]	; (800da44 <pvTaskIncrementMutexHeldCount+0x24>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da32:	3201      	adds	r2, #1
 800da34:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800da36:	4b03      	ldr	r3, [pc, #12]	; (800da44 <pvTaskIncrementMutexHeldCount+0x24>)
 800da38:	681b      	ldr	r3, [r3, #0]
	}
 800da3a:	4618      	mov	r0, r3
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr
 800da44:	20002568 	.word	0x20002568

0800da48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800da52:	4b29      	ldr	r3, [pc, #164]	; (800daf8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da58:	4b28      	ldr	r3, [pc, #160]	; (800dafc <prvAddCurrentTaskToDelayedList+0xb4>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	3304      	adds	r3, #4
 800da5e:	4618      	mov	r0, r3
 800da60:	f7fe f8da 	bl	800bc18 <uxListRemove>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d10b      	bne.n	800da82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800da6a:	4b24      	ldr	r3, [pc, #144]	; (800dafc <prvAddCurrentTaskToDelayedList+0xb4>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da70:	2201      	movs	r2, #1
 800da72:	fa02 f303 	lsl.w	r3, r2, r3
 800da76:	43da      	mvns	r2, r3
 800da78:	4b21      	ldr	r3, [pc, #132]	; (800db00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4013      	ands	r3, r2
 800da7e:	4a20      	ldr	r2, [pc, #128]	; (800db00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800da80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da88:	d10a      	bne.n	800daa0 <prvAddCurrentTaskToDelayedList+0x58>
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d007      	beq.n	800daa0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da90:	4b1a      	ldr	r3, [pc, #104]	; (800dafc <prvAddCurrentTaskToDelayedList+0xb4>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	3304      	adds	r3, #4
 800da96:	4619      	mov	r1, r3
 800da98:	481a      	ldr	r0, [pc, #104]	; (800db04 <prvAddCurrentTaskToDelayedList+0xbc>)
 800da9a:	f7fe f860 	bl	800bb5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800da9e:	e026      	b.n	800daee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800daa0:	68fa      	ldr	r2, [r7, #12]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	4413      	add	r3, r2
 800daa6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800daa8:	4b14      	ldr	r3, [pc, #80]	; (800dafc <prvAddCurrentTaskToDelayedList+0xb4>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	68ba      	ldr	r2, [r7, #8]
 800daae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dab0:	68ba      	ldr	r2, [r7, #8]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d209      	bcs.n	800dacc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dab8:	4b13      	ldr	r3, [pc, #76]	; (800db08 <prvAddCurrentTaskToDelayedList+0xc0>)
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	4b0f      	ldr	r3, [pc, #60]	; (800dafc <prvAddCurrentTaskToDelayedList+0xb4>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	3304      	adds	r3, #4
 800dac2:	4619      	mov	r1, r3
 800dac4:	4610      	mov	r0, r2
 800dac6:	f7fe f86e 	bl	800bba6 <vListInsert>
}
 800daca:	e010      	b.n	800daee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dacc:	4b0f      	ldr	r3, [pc, #60]	; (800db0c <prvAddCurrentTaskToDelayedList+0xc4>)
 800dace:	681a      	ldr	r2, [r3, #0]
 800dad0:	4b0a      	ldr	r3, [pc, #40]	; (800dafc <prvAddCurrentTaskToDelayedList+0xb4>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	3304      	adds	r3, #4
 800dad6:	4619      	mov	r1, r3
 800dad8:	4610      	mov	r0, r2
 800dada:	f7fe f864 	bl	800bba6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dade:	4b0c      	ldr	r3, [pc, #48]	; (800db10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	68ba      	ldr	r2, [r7, #8]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d202      	bcs.n	800daee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dae8:	4a09      	ldr	r2, [pc, #36]	; (800db10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	6013      	str	r3, [r2, #0]
}
 800daee:	bf00      	nop
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	2000266c 	.word	0x2000266c
 800dafc:	20002568 	.word	0x20002568
 800db00:	20002670 	.word	0x20002670
 800db04:	20002654 	.word	0x20002654
 800db08:	20002624 	.word	0x20002624
 800db0c:	20002620 	.word	0x20002620
 800db10:	20002688 	.word	0x20002688

0800db14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
 800db1a:	60f8      	str	r0, [r7, #12]
 800db1c:	60b9      	str	r1, [r7, #8]
 800db1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	3b04      	subs	r3, #4
 800db24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800db2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	3b04      	subs	r3, #4
 800db32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	f023 0201 	bic.w	r2, r3, #1
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	3b04      	subs	r3, #4
 800db42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800db44:	4a0c      	ldr	r2, [pc, #48]	; (800db78 <pxPortInitialiseStack+0x64>)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	3b14      	subs	r3, #20
 800db4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	3b04      	subs	r3, #4
 800db5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f06f 0202 	mvn.w	r2, #2
 800db62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	3b20      	subs	r3, #32
 800db68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800db6a:	68fb      	ldr	r3, [r7, #12]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3714      	adds	r7, #20
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr
 800db78:	0800db7d 	.word	0x0800db7d

0800db7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800db7c:	b480      	push	{r7}
 800db7e:	b085      	sub	sp, #20
 800db80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800db82:	2300      	movs	r3, #0
 800db84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800db86:	4b12      	ldr	r3, [pc, #72]	; (800dbd0 <prvTaskExitError+0x54>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db8e:	d00a      	beq.n	800dba6 <prvTaskExitError+0x2a>
	__asm volatile
 800db90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db94:	f383 8811 	msr	BASEPRI, r3
 800db98:	f3bf 8f6f 	isb	sy
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	60fb      	str	r3, [r7, #12]
}
 800dba2:	bf00      	nop
 800dba4:	e7fe      	b.n	800dba4 <prvTaskExitError+0x28>
	__asm volatile
 800dba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbaa:	f383 8811 	msr	BASEPRI, r3
 800dbae:	f3bf 8f6f 	isb	sy
 800dbb2:	f3bf 8f4f 	dsb	sy
 800dbb6:	60bb      	str	r3, [r7, #8]
}
 800dbb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dbba:	bf00      	nop
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d0fc      	beq.n	800dbbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dbc2:	bf00      	nop
 800dbc4:	bf00      	nop
 800dbc6:	3714      	adds	r7, #20
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr
 800dbd0:	2000002c 	.word	0x2000002c
	...

0800dbe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dbe0:	4b07      	ldr	r3, [pc, #28]	; (800dc00 <pxCurrentTCBConst2>)
 800dbe2:	6819      	ldr	r1, [r3, #0]
 800dbe4:	6808      	ldr	r0, [r1, #0]
 800dbe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbea:	f380 8809 	msr	PSP, r0
 800dbee:	f3bf 8f6f 	isb	sy
 800dbf2:	f04f 0000 	mov.w	r0, #0
 800dbf6:	f380 8811 	msr	BASEPRI, r0
 800dbfa:	4770      	bx	lr
 800dbfc:	f3af 8000 	nop.w

0800dc00 <pxCurrentTCBConst2>:
 800dc00:	20002568 	.word	0x20002568
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dc04:	bf00      	nop
 800dc06:	bf00      	nop

0800dc08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dc08:	4808      	ldr	r0, [pc, #32]	; (800dc2c <prvPortStartFirstTask+0x24>)
 800dc0a:	6800      	ldr	r0, [r0, #0]
 800dc0c:	6800      	ldr	r0, [r0, #0]
 800dc0e:	f380 8808 	msr	MSP, r0
 800dc12:	f04f 0000 	mov.w	r0, #0
 800dc16:	f380 8814 	msr	CONTROL, r0
 800dc1a:	b662      	cpsie	i
 800dc1c:	b661      	cpsie	f
 800dc1e:	f3bf 8f4f 	dsb	sy
 800dc22:	f3bf 8f6f 	isb	sy
 800dc26:	df00      	svc	0
 800dc28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dc2a:	bf00      	nop
 800dc2c:	e000ed08 	.word	0xe000ed08

0800dc30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b086      	sub	sp, #24
 800dc34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dc36:	4b46      	ldr	r3, [pc, #280]	; (800dd50 <xPortStartScheduler+0x120>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4a46      	ldr	r2, [pc, #280]	; (800dd54 <xPortStartScheduler+0x124>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d10a      	bne.n	800dc56 <xPortStartScheduler+0x26>
	__asm volatile
 800dc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc44:	f383 8811 	msr	BASEPRI, r3
 800dc48:	f3bf 8f6f 	isb	sy
 800dc4c:	f3bf 8f4f 	dsb	sy
 800dc50:	613b      	str	r3, [r7, #16]
}
 800dc52:	bf00      	nop
 800dc54:	e7fe      	b.n	800dc54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dc56:	4b3e      	ldr	r3, [pc, #248]	; (800dd50 <xPortStartScheduler+0x120>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4a3f      	ldr	r2, [pc, #252]	; (800dd58 <xPortStartScheduler+0x128>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d10a      	bne.n	800dc76 <xPortStartScheduler+0x46>
	__asm volatile
 800dc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc64:	f383 8811 	msr	BASEPRI, r3
 800dc68:	f3bf 8f6f 	isb	sy
 800dc6c:	f3bf 8f4f 	dsb	sy
 800dc70:	60fb      	str	r3, [r7, #12]
}
 800dc72:	bf00      	nop
 800dc74:	e7fe      	b.n	800dc74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dc76:	4b39      	ldr	r3, [pc, #228]	; (800dd5c <xPortStartScheduler+0x12c>)
 800dc78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	22ff      	movs	r2, #255	; 0xff
 800dc86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dc90:	78fb      	ldrb	r3, [r7, #3]
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dc98:	b2da      	uxtb	r2, r3
 800dc9a:	4b31      	ldr	r3, [pc, #196]	; (800dd60 <xPortStartScheduler+0x130>)
 800dc9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dc9e:	4b31      	ldr	r3, [pc, #196]	; (800dd64 <xPortStartScheduler+0x134>)
 800dca0:	2207      	movs	r2, #7
 800dca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dca4:	e009      	b.n	800dcba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dca6:	4b2f      	ldr	r3, [pc, #188]	; (800dd64 <xPortStartScheduler+0x134>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	4a2d      	ldr	r2, [pc, #180]	; (800dd64 <xPortStartScheduler+0x134>)
 800dcae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dcb0:	78fb      	ldrb	r3, [r7, #3]
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	005b      	lsls	r3, r3, #1
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dcba:	78fb      	ldrb	r3, [r7, #3]
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcc2:	2b80      	cmp	r3, #128	; 0x80
 800dcc4:	d0ef      	beq.n	800dca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dcc6:	4b27      	ldr	r3, [pc, #156]	; (800dd64 <xPortStartScheduler+0x134>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f1c3 0307 	rsb	r3, r3, #7
 800dcce:	2b04      	cmp	r3, #4
 800dcd0:	d00a      	beq.n	800dce8 <xPortStartScheduler+0xb8>
	__asm volatile
 800dcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd6:	f383 8811 	msr	BASEPRI, r3
 800dcda:	f3bf 8f6f 	isb	sy
 800dcde:	f3bf 8f4f 	dsb	sy
 800dce2:	60bb      	str	r3, [r7, #8]
}
 800dce4:	bf00      	nop
 800dce6:	e7fe      	b.n	800dce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dce8:	4b1e      	ldr	r3, [pc, #120]	; (800dd64 <xPortStartScheduler+0x134>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	021b      	lsls	r3, r3, #8
 800dcee:	4a1d      	ldr	r2, [pc, #116]	; (800dd64 <xPortStartScheduler+0x134>)
 800dcf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dcf2:	4b1c      	ldr	r3, [pc, #112]	; (800dd64 <xPortStartScheduler+0x134>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dcfa:	4a1a      	ldr	r2, [pc, #104]	; (800dd64 <xPortStartScheduler+0x134>)
 800dcfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dd06:	4b18      	ldr	r3, [pc, #96]	; (800dd68 <xPortStartScheduler+0x138>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a17      	ldr	r2, [pc, #92]	; (800dd68 <xPortStartScheduler+0x138>)
 800dd0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dd10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dd12:	4b15      	ldr	r3, [pc, #84]	; (800dd68 <xPortStartScheduler+0x138>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4a14      	ldr	r2, [pc, #80]	; (800dd68 <xPortStartScheduler+0x138>)
 800dd18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dd1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dd1e:	f000 f8dd 	bl	800dedc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dd22:	4b12      	ldr	r3, [pc, #72]	; (800dd6c <xPortStartScheduler+0x13c>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dd28:	f000 f8fc 	bl	800df24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dd2c:	4b10      	ldr	r3, [pc, #64]	; (800dd70 <xPortStartScheduler+0x140>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a0f      	ldr	r2, [pc, #60]	; (800dd70 <xPortStartScheduler+0x140>)
 800dd32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dd36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dd38:	f7ff ff66 	bl	800dc08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dd3c:	f7ff fa82 	bl	800d244 <vTaskSwitchContext>
	prvTaskExitError();
 800dd40:	f7ff ff1c 	bl	800db7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dd44:	2300      	movs	r3, #0
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3718      	adds	r7, #24
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	e000ed00 	.word	0xe000ed00
 800dd54:	410fc271 	.word	0x410fc271
 800dd58:	410fc270 	.word	0x410fc270
 800dd5c:	e000e400 	.word	0xe000e400
 800dd60:	20002694 	.word	0x20002694
 800dd64:	20002698 	.word	0x20002698
 800dd68:	e000ed20 	.word	0xe000ed20
 800dd6c:	2000002c 	.word	0x2000002c
 800dd70:	e000ef34 	.word	0xe000ef34

0800dd74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dd74:	b480      	push	{r7}
 800dd76:	b083      	sub	sp, #12
 800dd78:	af00      	add	r7, sp, #0
	__asm volatile
 800dd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7e:	f383 8811 	msr	BASEPRI, r3
 800dd82:	f3bf 8f6f 	isb	sy
 800dd86:	f3bf 8f4f 	dsb	sy
 800dd8a:	607b      	str	r3, [r7, #4]
}
 800dd8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dd8e:	4b0f      	ldr	r3, [pc, #60]	; (800ddcc <vPortEnterCritical+0x58>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	3301      	adds	r3, #1
 800dd94:	4a0d      	ldr	r2, [pc, #52]	; (800ddcc <vPortEnterCritical+0x58>)
 800dd96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dd98:	4b0c      	ldr	r3, [pc, #48]	; (800ddcc <vPortEnterCritical+0x58>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d10f      	bne.n	800ddc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dda0:	4b0b      	ldr	r3, [pc, #44]	; (800ddd0 <vPortEnterCritical+0x5c>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00a      	beq.n	800ddc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ddaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddae:	f383 8811 	msr	BASEPRI, r3
 800ddb2:	f3bf 8f6f 	isb	sy
 800ddb6:	f3bf 8f4f 	dsb	sy
 800ddba:	603b      	str	r3, [r7, #0]
}
 800ddbc:	bf00      	nop
 800ddbe:	e7fe      	b.n	800ddbe <vPortEnterCritical+0x4a>
	}
}
 800ddc0:	bf00      	nop
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr
 800ddcc:	2000002c 	.word	0x2000002c
 800ddd0:	e000ed04 	.word	0xe000ed04

0800ddd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ddda:	4b12      	ldr	r3, [pc, #72]	; (800de24 <vPortExitCritical+0x50>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d10a      	bne.n	800ddf8 <vPortExitCritical+0x24>
	__asm volatile
 800dde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde6:	f383 8811 	msr	BASEPRI, r3
 800ddea:	f3bf 8f6f 	isb	sy
 800ddee:	f3bf 8f4f 	dsb	sy
 800ddf2:	607b      	str	r3, [r7, #4]
}
 800ddf4:	bf00      	nop
 800ddf6:	e7fe      	b.n	800ddf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ddf8:	4b0a      	ldr	r3, [pc, #40]	; (800de24 <vPortExitCritical+0x50>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	3b01      	subs	r3, #1
 800ddfe:	4a09      	ldr	r2, [pc, #36]	; (800de24 <vPortExitCritical+0x50>)
 800de00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800de02:	4b08      	ldr	r3, [pc, #32]	; (800de24 <vPortExitCritical+0x50>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d105      	bne.n	800de16 <vPortExitCritical+0x42>
 800de0a:	2300      	movs	r3, #0
 800de0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	f383 8811 	msr	BASEPRI, r3
}
 800de14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800de16:	bf00      	nop
 800de18:	370c      	adds	r7, #12
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr
 800de22:	bf00      	nop
 800de24:	2000002c 	.word	0x2000002c
	...

0800de30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800de30:	f3ef 8009 	mrs	r0, PSP
 800de34:	f3bf 8f6f 	isb	sy
 800de38:	4b15      	ldr	r3, [pc, #84]	; (800de90 <pxCurrentTCBConst>)
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	f01e 0f10 	tst.w	lr, #16
 800de40:	bf08      	it	eq
 800de42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800de46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de4a:	6010      	str	r0, [r2, #0]
 800de4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800de50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800de54:	f380 8811 	msr	BASEPRI, r0
 800de58:	f3bf 8f4f 	dsb	sy
 800de5c:	f3bf 8f6f 	isb	sy
 800de60:	f7ff f9f0 	bl	800d244 <vTaskSwitchContext>
 800de64:	f04f 0000 	mov.w	r0, #0
 800de68:	f380 8811 	msr	BASEPRI, r0
 800de6c:	bc09      	pop	{r0, r3}
 800de6e:	6819      	ldr	r1, [r3, #0]
 800de70:	6808      	ldr	r0, [r1, #0]
 800de72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de76:	f01e 0f10 	tst.w	lr, #16
 800de7a:	bf08      	it	eq
 800de7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800de80:	f380 8809 	msr	PSP, r0
 800de84:	f3bf 8f6f 	isb	sy
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	f3af 8000 	nop.w

0800de90 <pxCurrentTCBConst>:
 800de90:	20002568 	.word	0x20002568
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800de94:	bf00      	nop
 800de96:	bf00      	nop

0800de98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
	__asm volatile
 800de9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea2:	f383 8811 	msr	BASEPRI, r3
 800dea6:	f3bf 8f6f 	isb	sy
 800deaa:	f3bf 8f4f 	dsb	sy
 800deae:	607b      	str	r3, [r7, #4]
}
 800deb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800deb2:	f7ff f90f 	bl	800d0d4 <xTaskIncrementTick>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d003      	beq.n	800dec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800debc:	4b06      	ldr	r3, [pc, #24]	; (800ded8 <SysTick_Handler+0x40>)
 800debe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dec2:	601a      	str	r2, [r3, #0]
 800dec4:	2300      	movs	r3, #0
 800dec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	f383 8811 	msr	BASEPRI, r3
}
 800dece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ded0:	bf00      	nop
 800ded2:	3708      	adds	r7, #8
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	e000ed04 	.word	0xe000ed04

0800dedc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dedc:	b480      	push	{r7}
 800dede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dee0:	4b0b      	ldr	r3, [pc, #44]	; (800df10 <vPortSetupTimerInterrupt+0x34>)
 800dee2:	2200      	movs	r2, #0
 800dee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dee6:	4b0b      	ldr	r3, [pc, #44]	; (800df14 <vPortSetupTimerInterrupt+0x38>)
 800dee8:	2200      	movs	r2, #0
 800deea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800deec:	4b0a      	ldr	r3, [pc, #40]	; (800df18 <vPortSetupTimerInterrupt+0x3c>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a0a      	ldr	r2, [pc, #40]	; (800df1c <vPortSetupTimerInterrupt+0x40>)
 800def2:	fba2 2303 	umull	r2, r3, r2, r3
 800def6:	099b      	lsrs	r3, r3, #6
 800def8:	4a09      	ldr	r2, [pc, #36]	; (800df20 <vPortSetupTimerInterrupt+0x44>)
 800defa:	3b01      	subs	r3, #1
 800defc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800defe:	4b04      	ldr	r3, [pc, #16]	; (800df10 <vPortSetupTimerInterrupt+0x34>)
 800df00:	2207      	movs	r2, #7
 800df02:	601a      	str	r2, [r3, #0]
}
 800df04:	bf00      	nop
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop
 800df10:	e000e010 	.word	0xe000e010
 800df14:	e000e018 	.word	0xe000e018
 800df18:	20000000 	.word	0x20000000
 800df1c:	10624dd3 	.word	0x10624dd3
 800df20:	e000e014 	.word	0xe000e014

0800df24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800df24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800df34 <vPortEnableVFP+0x10>
 800df28:	6801      	ldr	r1, [r0, #0]
 800df2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800df2e:	6001      	str	r1, [r0, #0]
 800df30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800df32:	bf00      	nop
 800df34:	e000ed88 	.word	0xe000ed88

0800df38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800df38:	b480      	push	{r7}
 800df3a:	b085      	sub	sp, #20
 800df3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800df3e:	f3ef 8305 	mrs	r3, IPSR
 800df42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2b0f      	cmp	r3, #15
 800df48:	d914      	bls.n	800df74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800df4a:	4a17      	ldr	r2, [pc, #92]	; (800dfa8 <vPortValidateInterruptPriority+0x70>)
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	4413      	add	r3, r2
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800df54:	4b15      	ldr	r3, [pc, #84]	; (800dfac <vPortValidateInterruptPriority+0x74>)
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	7afa      	ldrb	r2, [r7, #11]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d20a      	bcs.n	800df74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800df5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df62:	f383 8811 	msr	BASEPRI, r3
 800df66:	f3bf 8f6f 	isb	sy
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	607b      	str	r3, [r7, #4]
}
 800df70:	bf00      	nop
 800df72:	e7fe      	b.n	800df72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800df74:	4b0e      	ldr	r3, [pc, #56]	; (800dfb0 <vPortValidateInterruptPriority+0x78>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800df7c:	4b0d      	ldr	r3, [pc, #52]	; (800dfb4 <vPortValidateInterruptPriority+0x7c>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	429a      	cmp	r2, r3
 800df82:	d90a      	bls.n	800df9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800df84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df88:	f383 8811 	msr	BASEPRI, r3
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f3bf 8f4f 	dsb	sy
 800df94:	603b      	str	r3, [r7, #0]
}
 800df96:	bf00      	nop
 800df98:	e7fe      	b.n	800df98 <vPortValidateInterruptPriority+0x60>
	}
 800df9a:	bf00      	nop
 800df9c:	3714      	adds	r7, #20
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop
 800dfa8:	e000e3f0 	.word	0xe000e3f0
 800dfac:	20002694 	.word	0x20002694
 800dfb0:	e000ed0c 	.word	0xe000ed0c
 800dfb4:	20002698 	.word	0x20002698

0800dfb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b08a      	sub	sp, #40	; 0x28
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dfc4:	f7fe ffdc 	bl	800cf80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dfc8:	4b5b      	ldr	r3, [pc, #364]	; (800e138 <pvPortMalloc+0x180>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d101      	bne.n	800dfd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dfd0:	f000 f920 	bl	800e214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dfd4:	4b59      	ldr	r3, [pc, #356]	; (800e13c <pvPortMalloc+0x184>)
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	4013      	ands	r3, r2
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	f040 8093 	bne.w	800e108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d01d      	beq.n	800e024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dfe8:	2208      	movs	r2, #8
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	4413      	add	r3, r2
 800dfee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f003 0307 	and.w	r3, r3, #7
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d014      	beq.n	800e024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f023 0307 	bic.w	r3, r3, #7
 800e000:	3308      	adds	r3, #8
 800e002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f003 0307 	and.w	r3, r3, #7
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d00a      	beq.n	800e024 <pvPortMalloc+0x6c>
	__asm volatile
 800e00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e012:	f383 8811 	msr	BASEPRI, r3
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	617b      	str	r3, [r7, #20]
}
 800e020:	bf00      	nop
 800e022:	e7fe      	b.n	800e022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d06e      	beq.n	800e108 <pvPortMalloc+0x150>
 800e02a:	4b45      	ldr	r3, [pc, #276]	; (800e140 <pvPortMalloc+0x188>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	429a      	cmp	r2, r3
 800e032:	d869      	bhi.n	800e108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e034:	4b43      	ldr	r3, [pc, #268]	; (800e144 <pvPortMalloc+0x18c>)
 800e036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e038:	4b42      	ldr	r3, [pc, #264]	; (800e144 <pvPortMalloc+0x18c>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e03e:	e004      	b.n	800e04a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	429a      	cmp	r2, r3
 800e052:	d903      	bls.n	800e05c <pvPortMalloc+0xa4>
 800e054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d1f1      	bne.n	800e040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e05c:	4b36      	ldr	r3, [pc, #216]	; (800e138 <pvPortMalloc+0x180>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e062:	429a      	cmp	r2, r3
 800e064:	d050      	beq.n	800e108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e066:	6a3b      	ldr	r3, [r7, #32]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2208      	movs	r2, #8
 800e06c:	4413      	add	r3, r2
 800e06e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	6a3b      	ldr	r3, [r7, #32]
 800e076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07a:	685a      	ldr	r2, [r3, #4]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	1ad2      	subs	r2, r2, r3
 800e080:	2308      	movs	r3, #8
 800e082:	005b      	lsls	r3, r3, #1
 800e084:	429a      	cmp	r2, r3
 800e086:	d91f      	bls.n	800e0c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4413      	add	r3, r2
 800e08e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	f003 0307 	and.w	r3, r3, #7
 800e096:	2b00      	cmp	r3, #0
 800e098:	d00a      	beq.n	800e0b0 <pvPortMalloc+0xf8>
	__asm volatile
 800e09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09e:	f383 8811 	msr	BASEPRI, r3
 800e0a2:	f3bf 8f6f 	isb	sy
 800e0a6:	f3bf 8f4f 	dsb	sy
 800e0aa:	613b      	str	r3, [r7, #16]
}
 800e0ac:	bf00      	nop
 800e0ae:	e7fe      	b.n	800e0ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b2:	685a      	ldr	r2, [r3, #4]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	1ad2      	subs	r2, r2, r3
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e0c2:	69b8      	ldr	r0, [r7, #24]
 800e0c4:	f000 f908 	bl	800e2d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e0c8:	4b1d      	ldr	r3, [pc, #116]	; (800e140 <pvPortMalloc+0x188>)
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	1ad3      	subs	r3, r2, r3
 800e0d2:	4a1b      	ldr	r2, [pc, #108]	; (800e140 <pvPortMalloc+0x188>)
 800e0d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e0d6:	4b1a      	ldr	r3, [pc, #104]	; (800e140 <pvPortMalloc+0x188>)
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	4b1b      	ldr	r3, [pc, #108]	; (800e148 <pvPortMalloc+0x190>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d203      	bcs.n	800e0ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e0e2:	4b17      	ldr	r3, [pc, #92]	; (800e140 <pvPortMalloc+0x188>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	4a18      	ldr	r2, [pc, #96]	; (800e148 <pvPortMalloc+0x190>)
 800e0e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ec:	685a      	ldr	r2, [r3, #4]
 800e0ee:	4b13      	ldr	r3, [pc, #76]	; (800e13c <pvPortMalloc+0x184>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	431a      	orrs	r2, r3
 800e0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e0fe:	4b13      	ldr	r3, [pc, #76]	; (800e14c <pvPortMalloc+0x194>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	3301      	adds	r3, #1
 800e104:	4a11      	ldr	r2, [pc, #68]	; (800e14c <pvPortMalloc+0x194>)
 800e106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e108:	f7fe ff48 	bl	800cf9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	f003 0307 	and.w	r3, r3, #7
 800e112:	2b00      	cmp	r3, #0
 800e114:	d00a      	beq.n	800e12c <pvPortMalloc+0x174>
	__asm volatile
 800e116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11a:	f383 8811 	msr	BASEPRI, r3
 800e11e:	f3bf 8f6f 	isb	sy
 800e122:	f3bf 8f4f 	dsb	sy
 800e126:	60fb      	str	r3, [r7, #12]
}
 800e128:	bf00      	nop
 800e12a:	e7fe      	b.n	800e12a <pvPortMalloc+0x172>
	return pvReturn;
 800e12c:	69fb      	ldr	r3, [r7, #28]
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3728      	adds	r7, #40	; 0x28
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	200062a4 	.word	0x200062a4
 800e13c:	200062b8 	.word	0x200062b8
 800e140:	200062a8 	.word	0x200062a8
 800e144:	2000629c 	.word	0x2000629c
 800e148:	200062ac 	.word	0x200062ac
 800e14c:	200062b0 	.word	0x200062b0

0800e150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b086      	sub	sp, #24
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d04d      	beq.n	800e1fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e162:	2308      	movs	r3, #8
 800e164:	425b      	negs	r3, r3
 800e166:	697a      	ldr	r2, [r7, #20]
 800e168:	4413      	add	r3, r2
 800e16a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	685a      	ldr	r2, [r3, #4]
 800e174:	4b24      	ldr	r3, [pc, #144]	; (800e208 <vPortFree+0xb8>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	4013      	ands	r3, r2
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d10a      	bne.n	800e194 <vPortFree+0x44>
	__asm volatile
 800e17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e182:	f383 8811 	msr	BASEPRI, r3
 800e186:	f3bf 8f6f 	isb	sy
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	60fb      	str	r3, [r7, #12]
}
 800e190:	bf00      	nop
 800e192:	e7fe      	b.n	800e192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d00a      	beq.n	800e1b2 <vPortFree+0x62>
	__asm volatile
 800e19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a0:	f383 8811 	msr	BASEPRI, r3
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	f3bf 8f4f 	dsb	sy
 800e1ac:	60bb      	str	r3, [r7, #8]
}
 800e1ae:	bf00      	nop
 800e1b0:	e7fe      	b.n	800e1b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	685a      	ldr	r2, [r3, #4]
 800e1b6:	4b14      	ldr	r3, [pc, #80]	; (800e208 <vPortFree+0xb8>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4013      	ands	r3, r2
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d01e      	beq.n	800e1fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d11a      	bne.n	800e1fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	685a      	ldr	r2, [r3, #4]
 800e1cc:	4b0e      	ldr	r3, [pc, #56]	; (800e208 <vPortFree+0xb8>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	43db      	mvns	r3, r3
 800e1d2:	401a      	ands	r2, r3
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e1d8:	f7fe fed2 	bl	800cf80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	685a      	ldr	r2, [r3, #4]
 800e1e0:	4b0a      	ldr	r3, [pc, #40]	; (800e20c <vPortFree+0xbc>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	4a09      	ldr	r2, [pc, #36]	; (800e20c <vPortFree+0xbc>)
 800e1e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e1ea:	6938      	ldr	r0, [r7, #16]
 800e1ec:	f000 f874 	bl	800e2d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e1f0:	4b07      	ldr	r3, [pc, #28]	; (800e210 <vPortFree+0xc0>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	4a06      	ldr	r2, [pc, #24]	; (800e210 <vPortFree+0xc0>)
 800e1f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e1fa:	f7fe fecf 	bl	800cf9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e1fe:	bf00      	nop
 800e200:	3718      	adds	r7, #24
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	200062b8 	.word	0x200062b8
 800e20c:	200062a8 	.word	0x200062a8
 800e210:	200062b4 	.word	0x200062b4

0800e214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e214:	b480      	push	{r7}
 800e216:	b085      	sub	sp, #20
 800e218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e21a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e21e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e220:	4b27      	ldr	r3, [pc, #156]	; (800e2c0 <prvHeapInit+0xac>)
 800e222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f003 0307 	and.w	r3, r3, #7
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d00c      	beq.n	800e248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	3307      	adds	r3, #7
 800e232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f023 0307 	bic.w	r3, r3, #7
 800e23a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e23c:	68ba      	ldr	r2, [r7, #8]
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	1ad3      	subs	r3, r2, r3
 800e242:	4a1f      	ldr	r2, [pc, #124]	; (800e2c0 <prvHeapInit+0xac>)
 800e244:	4413      	add	r3, r2
 800e246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e24c:	4a1d      	ldr	r2, [pc, #116]	; (800e2c4 <prvHeapInit+0xb0>)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e252:	4b1c      	ldr	r3, [pc, #112]	; (800e2c4 <prvHeapInit+0xb0>)
 800e254:	2200      	movs	r2, #0
 800e256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	68ba      	ldr	r2, [r7, #8]
 800e25c:	4413      	add	r3, r2
 800e25e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e260:	2208      	movs	r2, #8
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	1a9b      	subs	r3, r3, r2
 800e266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f023 0307 	bic.w	r3, r3, #7
 800e26e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	4a15      	ldr	r2, [pc, #84]	; (800e2c8 <prvHeapInit+0xb4>)
 800e274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e276:	4b14      	ldr	r3, [pc, #80]	; (800e2c8 <prvHeapInit+0xb4>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	2200      	movs	r2, #0
 800e27c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e27e:	4b12      	ldr	r3, [pc, #72]	; (800e2c8 <prvHeapInit+0xb4>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	2200      	movs	r2, #0
 800e284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	1ad2      	subs	r2, r2, r3
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e294:	4b0c      	ldr	r3, [pc, #48]	; (800e2c8 <prvHeapInit+0xb4>)
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	4a0a      	ldr	r2, [pc, #40]	; (800e2cc <prvHeapInit+0xb8>)
 800e2a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	4a09      	ldr	r2, [pc, #36]	; (800e2d0 <prvHeapInit+0xbc>)
 800e2aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e2ac:	4b09      	ldr	r3, [pc, #36]	; (800e2d4 <prvHeapInit+0xc0>)
 800e2ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e2b2:	601a      	str	r2, [r3, #0]
}
 800e2b4:	bf00      	nop
 800e2b6:	3714      	adds	r7, #20
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr
 800e2c0:	2000269c 	.word	0x2000269c
 800e2c4:	2000629c 	.word	0x2000629c
 800e2c8:	200062a4 	.word	0x200062a4
 800e2cc:	200062ac 	.word	0x200062ac
 800e2d0:	200062a8 	.word	0x200062a8
 800e2d4:	200062b8 	.word	0x200062b8

0800e2d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b085      	sub	sp, #20
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e2e0:	4b28      	ldr	r3, [pc, #160]	; (800e384 <prvInsertBlockIntoFreeList+0xac>)
 800e2e2:	60fb      	str	r3, [r7, #12]
 800e2e4:	e002      	b.n	800e2ec <prvInsertBlockIntoFreeList+0x14>
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	60fb      	str	r3, [r7, #12]
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d8f7      	bhi.n	800e2e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	68ba      	ldr	r2, [r7, #8]
 800e300:	4413      	add	r3, r2
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	429a      	cmp	r2, r3
 800e306:	d108      	bne.n	800e31a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	685a      	ldr	r2, [r3, #4]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	441a      	add	r2, r3
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	68ba      	ldr	r2, [r7, #8]
 800e324:	441a      	add	r2, r3
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d118      	bne.n	800e360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681a      	ldr	r2, [r3, #0]
 800e332:	4b15      	ldr	r3, [pc, #84]	; (800e388 <prvInsertBlockIntoFreeList+0xb0>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	429a      	cmp	r2, r3
 800e338:	d00d      	beq.n	800e356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	685a      	ldr	r2, [r3, #4]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	441a      	add	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	601a      	str	r2, [r3, #0]
 800e354:	e008      	b.n	800e368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e356:	4b0c      	ldr	r3, [pc, #48]	; (800e388 <prvInsertBlockIntoFreeList+0xb0>)
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	601a      	str	r2, [r3, #0]
 800e35e:	e003      	b.n	800e368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e368:	68fa      	ldr	r2, [r7, #12]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d002      	beq.n	800e376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e376:	bf00      	nop
 800e378:	3714      	adds	r7, #20
 800e37a:	46bd      	mov	sp, r7
 800e37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e380:	4770      	bx	lr
 800e382:	bf00      	nop
 800e384:	2000629c 	.word	0x2000629c
 800e388:	200062a4 	.word	0x200062a4

0800e38c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e390:	2201      	movs	r2, #1
 800e392:	490e      	ldr	r1, [pc, #56]	; (800e3cc <MX_USB_HOST_Init+0x40>)
 800e394:	480e      	ldr	r0, [pc, #56]	; (800e3d0 <MX_USB_HOST_Init+0x44>)
 800e396:	f7f8 fd93 	bl	8006ec0 <USBH_Init>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d001      	beq.n	800e3a4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e3a0:	f7f2 fbd0 	bl	8000b44 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800e3a4:	490b      	ldr	r1, [pc, #44]	; (800e3d4 <MX_USB_HOST_Init+0x48>)
 800e3a6:	480a      	ldr	r0, [pc, #40]	; (800e3d0 <MX_USB_HOST_Init+0x44>)
 800e3a8:	f7f8 fe40 	bl	800702c <USBH_RegisterClass>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d001      	beq.n	800e3b6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e3b2:	f7f2 fbc7 	bl	8000b44 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e3b6:	4806      	ldr	r0, [pc, #24]	; (800e3d0 <MX_USB_HOST_Init+0x44>)
 800e3b8:	f7f8 fec4 	bl	8007144 <USBH_Start>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d001      	beq.n	800e3c6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e3c2:	f7f2 fbbf 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e3c6:	bf00      	nop
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	0800e3d9 	.word	0x0800e3d9
 800e3d0:	200062bc 	.word	0x200062bc
 800e3d4:	2000000c 	.word	0x2000000c

0800e3d8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b083      	sub	sp, #12
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e3e4:	78fb      	ldrb	r3, [r7, #3]
 800e3e6:	3b01      	subs	r3, #1
 800e3e8:	2b04      	cmp	r3, #4
 800e3ea:	d819      	bhi.n	800e420 <USBH_UserProcess+0x48>
 800e3ec:	a201      	add	r2, pc, #4	; (adr r2, 800e3f4 <USBH_UserProcess+0x1c>)
 800e3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3f2:	bf00      	nop
 800e3f4:	0800e421 	.word	0x0800e421
 800e3f8:	0800e411 	.word	0x0800e411
 800e3fc:	0800e421 	.word	0x0800e421
 800e400:	0800e419 	.word	0x0800e419
 800e404:	0800e409 	.word	0x0800e409
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e408:	4b09      	ldr	r3, [pc, #36]	; (800e430 <USBH_UserProcess+0x58>)
 800e40a:	2203      	movs	r2, #3
 800e40c:	701a      	strb	r2, [r3, #0]
  break;
 800e40e:	e008      	b.n	800e422 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e410:	4b07      	ldr	r3, [pc, #28]	; (800e430 <USBH_UserProcess+0x58>)
 800e412:	2202      	movs	r2, #2
 800e414:	701a      	strb	r2, [r3, #0]
  break;
 800e416:	e004      	b.n	800e422 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e418:	4b05      	ldr	r3, [pc, #20]	; (800e430 <USBH_UserProcess+0x58>)
 800e41a:	2201      	movs	r2, #1
 800e41c:	701a      	strb	r2, [r3, #0]
  break;
 800e41e:	e000      	b.n	800e422 <USBH_UserProcess+0x4a>

  default:
  break;
 800e420:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e422:	bf00      	nop
 800e424:	370c      	adds	r7, #12
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr
 800e42e:	bf00      	nop
 800e430:	200066a0 	.word	0x200066a0

0800e434 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b08a      	sub	sp, #40	; 0x28
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e43c:	f107 0314 	add.w	r3, r7, #20
 800e440:	2200      	movs	r2, #0
 800e442:	601a      	str	r2, [r3, #0]
 800e444:	605a      	str	r2, [r3, #4]
 800e446:	609a      	str	r2, [r3, #8]
 800e448:	60da      	str	r2, [r3, #12]
 800e44a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e454:	d13a      	bne.n	800e4cc <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e456:	2300      	movs	r3, #0
 800e458:	613b      	str	r3, [r7, #16]
 800e45a:	4b1e      	ldr	r3, [pc, #120]	; (800e4d4 <HAL_HCD_MspInit+0xa0>)
 800e45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e45e:	4a1d      	ldr	r2, [pc, #116]	; (800e4d4 <HAL_HCD_MspInit+0xa0>)
 800e460:	f043 0301 	orr.w	r3, r3, #1
 800e464:	6313      	str	r3, [r2, #48]	; 0x30
 800e466:	4b1b      	ldr	r3, [pc, #108]	; (800e4d4 <HAL_HCD_MspInit+0xa0>)
 800e468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e46a:	f003 0301 	and.w	r3, r3, #1
 800e46e:	613b      	str	r3, [r7, #16]
 800e470:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e472:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e478:	2302      	movs	r3, #2
 800e47a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e47c:	2300      	movs	r3, #0
 800e47e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e480:	2303      	movs	r3, #3
 800e482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e484:	230a      	movs	r3, #10
 800e486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e488:	f107 0314 	add.w	r3, r7, #20
 800e48c:	4619      	mov	r1, r3
 800e48e:	4812      	ldr	r0, [pc, #72]	; (800e4d8 <HAL_HCD_MspInit+0xa4>)
 800e490:	f7f2 fe84 	bl	800119c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e494:	4b0f      	ldr	r3, [pc, #60]	; (800e4d4 <HAL_HCD_MspInit+0xa0>)
 800e496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e498:	4a0e      	ldr	r2, [pc, #56]	; (800e4d4 <HAL_HCD_MspInit+0xa0>)
 800e49a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e49e:	6353      	str	r3, [r2, #52]	; 0x34
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	60fb      	str	r3, [r7, #12]
 800e4a4:	4b0b      	ldr	r3, [pc, #44]	; (800e4d4 <HAL_HCD_MspInit+0xa0>)
 800e4a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4a8:	4a0a      	ldr	r2, [pc, #40]	; (800e4d4 <HAL_HCD_MspInit+0xa0>)
 800e4aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e4ae:	6453      	str	r3, [r2, #68]	; 0x44
 800e4b0:	4b08      	ldr	r3, [pc, #32]	; (800e4d4 <HAL_HCD_MspInit+0xa0>)
 800e4b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4b8:	60fb      	str	r3, [r7, #12]
 800e4ba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e4bc:	2200      	movs	r2, #0
 800e4be:	2105      	movs	r1, #5
 800e4c0:	2043      	movs	r0, #67	; 0x43
 800e4c2:	f7f2 fe41 	bl	8001148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e4c6:	2043      	movs	r0, #67	; 0x43
 800e4c8:	f7f2 fe5a 	bl	8001180 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e4cc:	bf00      	nop
 800e4ce:	3728      	adds	r7, #40	; 0x28
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	40023800 	.word	0x40023800
 800e4d8:	40020000 	.word	0x40020000

0800e4dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7f9 fae1 	bl	8007ab2 <USBH_LL_IncTimer>
}
 800e4f0:	bf00      	nop
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e506:	4618      	mov	r0, r3
 800e508:	f7f9 fb25 	bl	8007b56 <USBH_LL_Connect>
}
 800e50c:	bf00      	nop
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e522:	4618      	mov	r0, r3
 800e524:	f7f9 fb3a 	bl	8007b9c <USBH_LL_Disconnect>
}
 800e528:	bf00      	nop
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	460b      	mov	r3, r1
 800e53a:	70fb      	strb	r3, [r7, #3]
 800e53c:	4613      	mov	r3, r2
 800e53e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e546:	4618      	mov	r0, r3
 800e548:	f7f9 fb6f 	bl	8007c2a <USBH_LL_NotifyURBChange>
#endif
}
 800e54c:	bf00      	nop
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e562:	4618      	mov	r0, r3
 800e564:	f7f9 facf 	bl	8007b06 <USBH_LL_PortEnabled>
}
 800e568:	bf00      	nop
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e57e:	4618      	mov	r0, r3
 800e580:	f7f9 fadb 	bl	8007b3a <USBH_LL_PortDisabled>
}
 800e584:	bf00      	nop
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d12a      	bne.n	800e5f4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e59e:	4a18      	ldr	r2, [pc, #96]	; (800e600 <USBH_LL_Init+0x74>)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4a15      	ldr	r2, [pc, #84]	; (800e600 <USBH_LL_Init+0x74>)
 800e5aa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e5ae:	4b14      	ldr	r3, [pc, #80]	; (800e600 <USBH_LL_Init+0x74>)
 800e5b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e5b4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e5b6:	4b12      	ldr	r3, [pc, #72]	; (800e600 <USBH_LL_Init+0x74>)
 800e5b8:	2208      	movs	r2, #8
 800e5ba:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e5bc:	4b10      	ldr	r3, [pc, #64]	; (800e600 <USBH_LL_Init+0x74>)
 800e5be:	2201      	movs	r2, #1
 800e5c0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e5c2:	4b0f      	ldr	r3, [pc, #60]	; (800e600 <USBH_LL_Init+0x74>)
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e5c8:	4b0d      	ldr	r3, [pc, #52]	; (800e600 <USBH_LL_Init+0x74>)
 800e5ca:	2202      	movs	r2, #2
 800e5cc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e5ce:	4b0c      	ldr	r3, [pc, #48]	; (800e600 <USBH_LL_Init+0x74>)
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e5d4:	480a      	ldr	r0, [pc, #40]	; (800e600 <USBH_LL_Init+0x74>)
 800e5d6:	f7f2 ffae 	bl	8001536 <HAL_HCD_Init>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d001      	beq.n	800e5e4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e5e0:	f7f2 fab0 	bl	8000b44 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e5e4:	4806      	ldr	r0, [pc, #24]	; (800e600 <USBH_LL_Init+0x74>)
 800e5e6:	f7f3 fb92 	bl	8001d0e <HAL_HCD_GetCurrentFrame>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7f9 fa50 	bl	8007a94 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	200066a4 	.word	0x200066a4

0800e604 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e60c:	2300      	movs	r3, #0
 800e60e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e610:	2300      	movs	r3, #0
 800e612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7f3 fb01 	bl	8001c22 <HAL_HCD_Start>
 800e620:	4603      	mov	r3, r0
 800e622:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e624:	7bfb      	ldrb	r3, [r7, #15]
 800e626:	4618      	mov	r0, r3
 800e628:	f000 f98c 	bl	800e944 <USBH_Get_USB_Status>
 800e62c:	4603      	mov	r3, r0
 800e62e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e630:	7bbb      	ldrb	r3, [r7, #14]
}
 800e632:	4618      	mov	r0, r3
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b084      	sub	sp, #16
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e642:	2300      	movs	r3, #0
 800e644:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e646:	2300      	movs	r3, #0
 800e648:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e650:	4618      	mov	r0, r3
 800e652:	f7f3 fb09 	bl	8001c68 <HAL_HCD_Stop>
 800e656:	4603      	mov	r3, r0
 800e658:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e65a:	7bfb      	ldrb	r3, [r7, #15]
 800e65c:	4618      	mov	r0, r3
 800e65e:	f000 f971 	bl	800e944 <USBH_Get_USB_Status>
 800e662:	4603      	mov	r3, r0
 800e664:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e666:	7bbb      	ldrb	r3, [r7, #14]
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b084      	sub	sp, #16
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e678:	2301      	movs	r3, #1
 800e67a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e682:	4618      	mov	r0, r3
 800e684:	f7f3 fb51 	bl	8001d2a <HAL_HCD_GetCurrentSpeed>
 800e688:	4603      	mov	r3, r0
 800e68a:	2b02      	cmp	r3, #2
 800e68c:	d00c      	beq.n	800e6a8 <USBH_LL_GetSpeed+0x38>
 800e68e:	2b02      	cmp	r3, #2
 800e690:	d80d      	bhi.n	800e6ae <USBH_LL_GetSpeed+0x3e>
 800e692:	2b00      	cmp	r3, #0
 800e694:	d002      	beq.n	800e69c <USBH_LL_GetSpeed+0x2c>
 800e696:	2b01      	cmp	r3, #1
 800e698:	d003      	beq.n	800e6a2 <USBH_LL_GetSpeed+0x32>
 800e69a:	e008      	b.n	800e6ae <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e69c:	2300      	movs	r3, #0
 800e69e:	73fb      	strb	r3, [r7, #15]
    break;
 800e6a0:	e008      	b.n	800e6b4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	73fb      	strb	r3, [r7, #15]
    break;
 800e6a6:	e005      	b.n	800e6b4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e6a8:	2302      	movs	r3, #2
 800e6aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e6ac:	e002      	b.n	800e6b4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	73fb      	strb	r3, [r7, #15]
    break;
 800e6b2:	bf00      	nop
  }
  return  speed;
 800e6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}

0800e6be <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e6be:	b580      	push	{r7, lr}
 800e6c0:	b084      	sub	sp, #16
 800e6c2:	af00      	add	r7, sp, #0
 800e6c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7f3 fae4 	bl	8001ca2 <HAL_HCD_ResetPort>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e6de:	7bfb      	ldrb	r3, [r7, #15]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f000 f92f 	bl	800e944 <USBH_Get_USB_Status>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3710      	adds	r7, #16
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e706:	78fa      	ldrb	r2, [r7, #3]
 800e708:	4611      	mov	r1, r2
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7f3 faeb 	bl	8001ce6 <HAL_HCD_HC_GetXferCount>
 800e710:	4603      	mov	r3, r0
}
 800e712:	4618      	mov	r0, r3
 800e714:	3708      	adds	r7, #8
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}

0800e71a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e71a:	b590      	push	{r4, r7, lr}
 800e71c:	b089      	sub	sp, #36	; 0x24
 800e71e:	af04      	add	r7, sp, #16
 800e720:	6078      	str	r0, [r7, #4]
 800e722:	4608      	mov	r0, r1
 800e724:	4611      	mov	r1, r2
 800e726:	461a      	mov	r2, r3
 800e728:	4603      	mov	r3, r0
 800e72a:	70fb      	strb	r3, [r7, #3]
 800e72c:	460b      	mov	r3, r1
 800e72e:	70bb      	strb	r3, [r7, #2]
 800e730:	4613      	mov	r3, r2
 800e732:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e734:	2300      	movs	r3, #0
 800e736:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e738:	2300      	movs	r3, #0
 800e73a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e742:	787c      	ldrb	r4, [r7, #1]
 800e744:	78ba      	ldrb	r2, [r7, #2]
 800e746:	78f9      	ldrb	r1, [r7, #3]
 800e748:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e74a:	9302      	str	r3, [sp, #8]
 800e74c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e750:	9301      	str	r3, [sp, #4]
 800e752:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e756:	9300      	str	r3, [sp, #0]
 800e758:	4623      	mov	r3, r4
 800e75a:	f7f2 ff4e 	bl	80015fa <HAL_HCD_HC_Init>
 800e75e:	4603      	mov	r3, r0
 800e760:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e762:	7bfb      	ldrb	r3, [r7, #15]
 800e764:	4618      	mov	r0, r3
 800e766:	f000 f8ed 	bl	800e944 <USBH_Get_USB_Status>
 800e76a:	4603      	mov	r3, r0
 800e76c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e76e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e770:	4618      	mov	r0, r3
 800e772:	3714      	adds	r7, #20
 800e774:	46bd      	mov	sp, r7
 800e776:	bd90      	pop	{r4, r7, pc}

0800e778 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	460b      	mov	r3, r1
 800e782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e784:	2300      	movs	r3, #0
 800e786:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e788:	2300      	movs	r3, #0
 800e78a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e792:	78fa      	ldrb	r2, [r7, #3]
 800e794:	4611      	mov	r1, r2
 800e796:	4618      	mov	r0, r3
 800e798:	f7f2 ffbe 	bl	8001718 <HAL_HCD_HC_Halt>
 800e79c:	4603      	mov	r3, r0
 800e79e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e7a0:	7bfb      	ldrb	r3, [r7, #15]
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f000 f8ce 	bl	800e944 <USBH_Get_USB_Status>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3710      	adds	r7, #16
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}

0800e7b6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e7b6:	b590      	push	{r4, r7, lr}
 800e7b8:	b089      	sub	sp, #36	; 0x24
 800e7ba:	af04      	add	r7, sp, #16
 800e7bc:	6078      	str	r0, [r7, #4]
 800e7be:	4608      	mov	r0, r1
 800e7c0:	4611      	mov	r1, r2
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	70fb      	strb	r3, [r7, #3]
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	70bb      	strb	r3, [r7, #2]
 800e7cc:	4613      	mov	r3, r2
 800e7ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e7de:	787c      	ldrb	r4, [r7, #1]
 800e7e0:	78ba      	ldrb	r2, [r7, #2]
 800e7e2:	78f9      	ldrb	r1, [r7, #3]
 800e7e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e7e8:	9303      	str	r3, [sp, #12]
 800e7ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e7ec:	9302      	str	r3, [sp, #8]
 800e7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f0:	9301      	str	r3, [sp, #4]
 800e7f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e7f6:	9300      	str	r3, [sp, #0]
 800e7f8:	4623      	mov	r3, r4
 800e7fa:	f7f2 ffb1 	bl	8001760 <HAL_HCD_HC_SubmitRequest>
 800e7fe:	4603      	mov	r3, r0
 800e800:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e802:	7bfb      	ldrb	r3, [r7, #15]
 800e804:	4618      	mov	r0, r3
 800e806:	f000 f89d 	bl	800e944 <USBH_Get_USB_Status>
 800e80a:	4603      	mov	r3, r0
 800e80c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e80e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e810:	4618      	mov	r0, r3
 800e812:	3714      	adds	r7, #20
 800e814:	46bd      	mov	sp, r7
 800e816:	bd90      	pop	{r4, r7, pc}

0800e818 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	460b      	mov	r3, r1
 800e822:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e82a:	78fa      	ldrb	r2, [r7, #3]
 800e82c:	4611      	mov	r1, r2
 800e82e:	4618      	mov	r0, r3
 800e830:	f7f3 fa45 	bl	8001cbe <HAL_HCD_HC_GetURBState>
 800e834:	4603      	mov	r3, r0
}
 800e836:	4618      	mov	r0, r3
 800e838:	3708      	adds	r7, #8
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}

0800e83e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e83e:	b580      	push	{r7, lr}
 800e840:	b082      	sub	sp, #8
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
 800e846:	460b      	mov	r3, r1
 800e848:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e850:	2b01      	cmp	r3, #1
 800e852:	d103      	bne.n	800e85c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e854:	78fb      	ldrb	r3, [r7, #3]
 800e856:	4618      	mov	r0, r3
 800e858:	f000 f8a0 	bl	800e99c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e85c:	20c8      	movs	r0, #200	; 0xc8
 800e85e:	f7f2 fb97 	bl	8000f90 <HAL_Delay>
  return USBH_OK;
 800e862:	2300      	movs	r3, #0
}
 800e864:	4618      	mov	r0, r3
 800e866:	3708      	adds	r7, #8
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b085      	sub	sp, #20
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	460b      	mov	r3, r1
 800e876:	70fb      	strb	r3, [r7, #3]
 800e878:	4613      	mov	r3, r2
 800e87a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e882:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e884:	78fb      	ldrb	r3, [r7, #3]
 800e886:	68fa      	ldr	r2, [r7, #12]
 800e888:	212c      	movs	r1, #44	; 0x2c
 800e88a:	fb01 f303 	mul.w	r3, r1, r3
 800e88e:	4413      	add	r3, r2
 800e890:	333b      	adds	r3, #59	; 0x3b
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d009      	beq.n	800e8ac <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e898:	78fb      	ldrb	r3, [r7, #3]
 800e89a:	68fa      	ldr	r2, [r7, #12]
 800e89c:	212c      	movs	r1, #44	; 0x2c
 800e89e:	fb01 f303 	mul.w	r3, r1, r3
 800e8a2:	4413      	add	r3, r2
 800e8a4:	3354      	adds	r3, #84	; 0x54
 800e8a6:	78ba      	ldrb	r2, [r7, #2]
 800e8a8:	701a      	strb	r2, [r3, #0]
 800e8aa:	e008      	b.n	800e8be <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e8ac:	78fb      	ldrb	r3, [r7, #3]
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	212c      	movs	r1, #44	; 0x2c
 800e8b2:	fb01 f303 	mul.w	r3, r1, r3
 800e8b6:	4413      	add	r3, r2
 800e8b8:	3355      	adds	r3, #85	; 0x55
 800e8ba:	78ba      	ldrb	r2, [r7, #2]
 800e8bc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3714      	adds	r7, #20
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b085      	sub	sp, #20
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e8e2:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e8e4:	78fb      	ldrb	r3, [r7, #3]
 800e8e6:	68ba      	ldr	r2, [r7, #8]
 800e8e8:	212c      	movs	r1, #44	; 0x2c
 800e8ea:	fb01 f303 	mul.w	r3, r1, r3
 800e8ee:	4413      	add	r3, r2
 800e8f0:	333b      	adds	r3, #59	; 0x3b
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d009      	beq.n	800e90c <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e8f8:	78fb      	ldrb	r3, [r7, #3]
 800e8fa:	68ba      	ldr	r2, [r7, #8]
 800e8fc:	212c      	movs	r1, #44	; 0x2c
 800e8fe:	fb01 f303 	mul.w	r3, r1, r3
 800e902:	4413      	add	r3, r2
 800e904:	3354      	adds	r3, #84	; 0x54
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	73fb      	strb	r3, [r7, #15]
 800e90a:	e008      	b.n	800e91e <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e90c:	78fb      	ldrb	r3, [r7, #3]
 800e90e:	68ba      	ldr	r2, [r7, #8]
 800e910:	212c      	movs	r1, #44	; 0x2c
 800e912:	fb01 f303 	mul.w	r3, r1, r3
 800e916:	4413      	add	r3, r2
 800e918:	3355      	adds	r3, #85	; 0x55
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e920:	4618      	mov	r0, r3
 800e922:	3714      	adds	r7, #20
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f7f2 fb2b 	bl	8000f90 <HAL_Delay>
}
 800e93a:	bf00      	nop
 800e93c:	3708      	adds	r7, #8
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
	...

0800e944 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e944:	b480      	push	{r7}
 800e946:	b085      	sub	sp, #20
 800e948:	af00      	add	r7, sp, #0
 800e94a:	4603      	mov	r3, r0
 800e94c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e94e:	2300      	movs	r3, #0
 800e950:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e952:	79fb      	ldrb	r3, [r7, #7]
 800e954:	2b03      	cmp	r3, #3
 800e956:	d817      	bhi.n	800e988 <USBH_Get_USB_Status+0x44>
 800e958:	a201      	add	r2, pc, #4	; (adr r2, 800e960 <USBH_Get_USB_Status+0x1c>)
 800e95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e95e:	bf00      	nop
 800e960:	0800e971 	.word	0x0800e971
 800e964:	0800e977 	.word	0x0800e977
 800e968:	0800e97d 	.word	0x0800e97d
 800e96c:	0800e983 	.word	0x0800e983
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e970:	2300      	movs	r3, #0
 800e972:	73fb      	strb	r3, [r7, #15]
    break;
 800e974:	e00b      	b.n	800e98e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e976:	2302      	movs	r3, #2
 800e978:	73fb      	strb	r3, [r7, #15]
    break;
 800e97a:	e008      	b.n	800e98e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e97c:	2301      	movs	r3, #1
 800e97e:	73fb      	strb	r3, [r7, #15]
    break;
 800e980:	e005      	b.n	800e98e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e982:	2302      	movs	r3, #2
 800e984:	73fb      	strb	r3, [r7, #15]
    break;
 800e986:	e002      	b.n	800e98e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e988:	2302      	movs	r3, #2
 800e98a:	73fb      	strb	r3, [r7, #15]
    break;
 800e98c:	bf00      	nop
  }
  return usb_status;
 800e98e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e990:	4618      	mov	r0, r3
 800e992:	3714      	adds	r7, #20
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e9a6:	79fb      	ldrb	r3, [r7, #7]
 800e9a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e9aa:	79fb      	ldrb	r3, [r7, #7]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d102      	bne.n	800e9b6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	73fb      	strb	r3, [r7, #15]
 800e9b4:	e001      	b.n	800e9ba <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e9ba:	7bfb      	ldrb	r3, [r7, #15]
 800e9bc:	461a      	mov	r2, r3
 800e9be:	2101      	movs	r1, #1
 800e9c0:	4803      	ldr	r0, [pc, #12]	; (800e9d0 <MX_DriverVbusFS+0x34>)
 800e9c2:	f7f2 fd9f 	bl	8001504 <HAL_GPIO_WritePin>
}
 800e9c6:	bf00      	nop
 800e9c8:	3710      	adds	r7, #16
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	40020800 	.word	0x40020800

0800e9d4 <__errno>:
 800e9d4:	4b01      	ldr	r3, [pc, #4]	; (800e9dc <__errno+0x8>)
 800e9d6:	6818      	ldr	r0, [r3, #0]
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	20000030 	.word	0x20000030

0800e9e0 <std>:
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	b510      	push	{r4, lr}
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	e9c0 3300 	strd	r3, r3, [r0]
 800e9ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9ee:	6083      	str	r3, [r0, #8]
 800e9f0:	8181      	strh	r1, [r0, #12]
 800e9f2:	6643      	str	r3, [r0, #100]	; 0x64
 800e9f4:	81c2      	strh	r2, [r0, #14]
 800e9f6:	6183      	str	r3, [r0, #24]
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	2208      	movs	r2, #8
 800e9fc:	305c      	adds	r0, #92	; 0x5c
 800e9fe:	f000 f92b 	bl	800ec58 <memset>
 800ea02:	4b05      	ldr	r3, [pc, #20]	; (800ea18 <std+0x38>)
 800ea04:	6263      	str	r3, [r4, #36]	; 0x24
 800ea06:	4b05      	ldr	r3, [pc, #20]	; (800ea1c <std+0x3c>)
 800ea08:	62a3      	str	r3, [r4, #40]	; 0x28
 800ea0a:	4b05      	ldr	r3, [pc, #20]	; (800ea20 <std+0x40>)
 800ea0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ea0e:	4b05      	ldr	r3, [pc, #20]	; (800ea24 <std+0x44>)
 800ea10:	6224      	str	r4, [r4, #32]
 800ea12:	6323      	str	r3, [r4, #48]	; 0x30
 800ea14:	bd10      	pop	{r4, pc}
 800ea16:	bf00      	nop
 800ea18:	0800f079 	.word	0x0800f079
 800ea1c:	0800f09b 	.word	0x0800f09b
 800ea20:	0800f0d3 	.word	0x0800f0d3
 800ea24:	0800f0f7 	.word	0x0800f0f7

0800ea28 <_cleanup_r>:
 800ea28:	4901      	ldr	r1, [pc, #4]	; (800ea30 <_cleanup_r+0x8>)
 800ea2a:	f000 b8af 	b.w	800eb8c <_fwalk_reent>
 800ea2e:	bf00      	nop
 800ea30:	0800f3d1 	.word	0x0800f3d1

0800ea34 <__sfmoreglue>:
 800ea34:	b570      	push	{r4, r5, r6, lr}
 800ea36:	2268      	movs	r2, #104	; 0x68
 800ea38:	1e4d      	subs	r5, r1, #1
 800ea3a:	4355      	muls	r5, r2
 800ea3c:	460e      	mov	r6, r1
 800ea3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ea42:	f000 f97d 	bl	800ed40 <_malloc_r>
 800ea46:	4604      	mov	r4, r0
 800ea48:	b140      	cbz	r0, 800ea5c <__sfmoreglue+0x28>
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	e9c0 1600 	strd	r1, r6, [r0]
 800ea50:	300c      	adds	r0, #12
 800ea52:	60a0      	str	r0, [r4, #8]
 800ea54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ea58:	f000 f8fe 	bl	800ec58 <memset>
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	bd70      	pop	{r4, r5, r6, pc}

0800ea60 <__sfp_lock_acquire>:
 800ea60:	4801      	ldr	r0, [pc, #4]	; (800ea68 <__sfp_lock_acquire+0x8>)
 800ea62:	f000 b8d8 	b.w	800ec16 <__retarget_lock_acquire_recursive>
 800ea66:	bf00      	nop
 800ea68:	200069a9 	.word	0x200069a9

0800ea6c <__sfp_lock_release>:
 800ea6c:	4801      	ldr	r0, [pc, #4]	; (800ea74 <__sfp_lock_release+0x8>)
 800ea6e:	f000 b8d3 	b.w	800ec18 <__retarget_lock_release_recursive>
 800ea72:	bf00      	nop
 800ea74:	200069a9 	.word	0x200069a9

0800ea78 <__sinit_lock_acquire>:
 800ea78:	4801      	ldr	r0, [pc, #4]	; (800ea80 <__sinit_lock_acquire+0x8>)
 800ea7a:	f000 b8cc 	b.w	800ec16 <__retarget_lock_acquire_recursive>
 800ea7e:	bf00      	nop
 800ea80:	200069aa 	.word	0x200069aa

0800ea84 <__sinit_lock_release>:
 800ea84:	4801      	ldr	r0, [pc, #4]	; (800ea8c <__sinit_lock_release+0x8>)
 800ea86:	f000 b8c7 	b.w	800ec18 <__retarget_lock_release_recursive>
 800ea8a:	bf00      	nop
 800ea8c:	200069aa 	.word	0x200069aa

0800ea90 <__sinit>:
 800ea90:	b510      	push	{r4, lr}
 800ea92:	4604      	mov	r4, r0
 800ea94:	f7ff fff0 	bl	800ea78 <__sinit_lock_acquire>
 800ea98:	69a3      	ldr	r3, [r4, #24]
 800ea9a:	b11b      	cbz	r3, 800eaa4 <__sinit+0x14>
 800ea9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eaa0:	f7ff bff0 	b.w	800ea84 <__sinit_lock_release>
 800eaa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eaa8:	6523      	str	r3, [r4, #80]	; 0x50
 800eaaa:	4b13      	ldr	r3, [pc, #76]	; (800eaf8 <__sinit+0x68>)
 800eaac:	4a13      	ldr	r2, [pc, #76]	; (800eafc <__sinit+0x6c>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	62a2      	str	r2, [r4, #40]	; 0x28
 800eab2:	42a3      	cmp	r3, r4
 800eab4:	bf04      	itt	eq
 800eab6:	2301      	moveq	r3, #1
 800eab8:	61a3      	streq	r3, [r4, #24]
 800eaba:	4620      	mov	r0, r4
 800eabc:	f000 f820 	bl	800eb00 <__sfp>
 800eac0:	6060      	str	r0, [r4, #4]
 800eac2:	4620      	mov	r0, r4
 800eac4:	f000 f81c 	bl	800eb00 <__sfp>
 800eac8:	60a0      	str	r0, [r4, #8]
 800eaca:	4620      	mov	r0, r4
 800eacc:	f000 f818 	bl	800eb00 <__sfp>
 800ead0:	2200      	movs	r2, #0
 800ead2:	60e0      	str	r0, [r4, #12]
 800ead4:	2104      	movs	r1, #4
 800ead6:	6860      	ldr	r0, [r4, #4]
 800ead8:	f7ff ff82 	bl	800e9e0 <std>
 800eadc:	68a0      	ldr	r0, [r4, #8]
 800eade:	2201      	movs	r2, #1
 800eae0:	2109      	movs	r1, #9
 800eae2:	f7ff ff7d 	bl	800e9e0 <std>
 800eae6:	68e0      	ldr	r0, [r4, #12]
 800eae8:	2202      	movs	r2, #2
 800eaea:	2112      	movs	r1, #18
 800eaec:	f7ff ff78 	bl	800e9e0 <std>
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	61a3      	str	r3, [r4, #24]
 800eaf4:	e7d2      	b.n	800ea9c <__sinit+0xc>
 800eaf6:	bf00      	nop
 800eaf8:	080101dc 	.word	0x080101dc
 800eafc:	0800ea29 	.word	0x0800ea29

0800eb00 <__sfp>:
 800eb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb02:	4607      	mov	r7, r0
 800eb04:	f7ff ffac 	bl	800ea60 <__sfp_lock_acquire>
 800eb08:	4b1e      	ldr	r3, [pc, #120]	; (800eb84 <__sfp+0x84>)
 800eb0a:	681e      	ldr	r6, [r3, #0]
 800eb0c:	69b3      	ldr	r3, [r6, #24]
 800eb0e:	b913      	cbnz	r3, 800eb16 <__sfp+0x16>
 800eb10:	4630      	mov	r0, r6
 800eb12:	f7ff ffbd 	bl	800ea90 <__sinit>
 800eb16:	3648      	adds	r6, #72	; 0x48
 800eb18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	d503      	bpl.n	800eb28 <__sfp+0x28>
 800eb20:	6833      	ldr	r3, [r6, #0]
 800eb22:	b30b      	cbz	r3, 800eb68 <__sfp+0x68>
 800eb24:	6836      	ldr	r6, [r6, #0]
 800eb26:	e7f7      	b.n	800eb18 <__sfp+0x18>
 800eb28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eb2c:	b9d5      	cbnz	r5, 800eb64 <__sfp+0x64>
 800eb2e:	4b16      	ldr	r3, [pc, #88]	; (800eb88 <__sfp+0x88>)
 800eb30:	60e3      	str	r3, [r4, #12]
 800eb32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eb36:	6665      	str	r5, [r4, #100]	; 0x64
 800eb38:	f000 f86c 	bl	800ec14 <__retarget_lock_init_recursive>
 800eb3c:	f7ff ff96 	bl	800ea6c <__sfp_lock_release>
 800eb40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eb44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eb48:	6025      	str	r5, [r4, #0]
 800eb4a:	61a5      	str	r5, [r4, #24]
 800eb4c:	2208      	movs	r2, #8
 800eb4e:	4629      	mov	r1, r5
 800eb50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eb54:	f000 f880 	bl	800ec58 <memset>
 800eb58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eb5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eb60:	4620      	mov	r0, r4
 800eb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb64:	3468      	adds	r4, #104	; 0x68
 800eb66:	e7d9      	b.n	800eb1c <__sfp+0x1c>
 800eb68:	2104      	movs	r1, #4
 800eb6a:	4638      	mov	r0, r7
 800eb6c:	f7ff ff62 	bl	800ea34 <__sfmoreglue>
 800eb70:	4604      	mov	r4, r0
 800eb72:	6030      	str	r0, [r6, #0]
 800eb74:	2800      	cmp	r0, #0
 800eb76:	d1d5      	bne.n	800eb24 <__sfp+0x24>
 800eb78:	f7ff ff78 	bl	800ea6c <__sfp_lock_release>
 800eb7c:	230c      	movs	r3, #12
 800eb7e:	603b      	str	r3, [r7, #0]
 800eb80:	e7ee      	b.n	800eb60 <__sfp+0x60>
 800eb82:	bf00      	nop
 800eb84:	080101dc 	.word	0x080101dc
 800eb88:	ffff0001 	.word	0xffff0001

0800eb8c <_fwalk_reent>:
 800eb8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb90:	4606      	mov	r6, r0
 800eb92:	4688      	mov	r8, r1
 800eb94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb98:	2700      	movs	r7, #0
 800eb9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb9e:	f1b9 0901 	subs.w	r9, r9, #1
 800eba2:	d505      	bpl.n	800ebb0 <_fwalk_reent+0x24>
 800eba4:	6824      	ldr	r4, [r4, #0]
 800eba6:	2c00      	cmp	r4, #0
 800eba8:	d1f7      	bne.n	800eb9a <_fwalk_reent+0xe>
 800ebaa:	4638      	mov	r0, r7
 800ebac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebb0:	89ab      	ldrh	r3, [r5, #12]
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d907      	bls.n	800ebc6 <_fwalk_reent+0x3a>
 800ebb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ebba:	3301      	adds	r3, #1
 800ebbc:	d003      	beq.n	800ebc6 <_fwalk_reent+0x3a>
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	47c0      	blx	r8
 800ebc4:	4307      	orrs	r7, r0
 800ebc6:	3568      	adds	r5, #104	; 0x68
 800ebc8:	e7e9      	b.n	800eb9e <_fwalk_reent+0x12>
	...

0800ebcc <__libc_init_array>:
 800ebcc:	b570      	push	{r4, r5, r6, lr}
 800ebce:	4d0d      	ldr	r5, [pc, #52]	; (800ec04 <__libc_init_array+0x38>)
 800ebd0:	4c0d      	ldr	r4, [pc, #52]	; (800ec08 <__libc_init_array+0x3c>)
 800ebd2:	1b64      	subs	r4, r4, r5
 800ebd4:	10a4      	asrs	r4, r4, #2
 800ebd6:	2600      	movs	r6, #0
 800ebd8:	42a6      	cmp	r6, r4
 800ebda:	d109      	bne.n	800ebf0 <__libc_init_array+0x24>
 800ebdc:	4d0b      	ldr	r5, [pc, #44]	; (800ec0c <__libc_init_array+0x40>)
 800ebde:	4c0c      	ldr	r4, [pc, #48]	; (800ec10 <__libc_init_array+0x44>)
 800ebe0:	f001 f986 	bl	800fef0 <_init>
 800ebe4:	1b64      	subs	r4, r4, r5
 800ebe6:	10a4      	asrs	r4, r4, #2
 800ebe8:	2600      	movs	r6, #0
 800ebea:	42a6      	cmp	r6, r4
 800ebec:	d105      	bne.n	800ebfa <__libc_init_array+0x2e>
 800ebee:	bd70      	pop	{r4, r5, r6, pc}
 800ebf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebf4:	4798      	blx	r3
 800ebf6:	3601      	adds	r6, #1
 800ebf8:	e7ee      	b.n	800ebd8 <__libc_init_array+0xc>
 800ebfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebfe:	4798      	blx	r3
 800ec00:	3601      	adds	r6, #1
 800ec02:	e7f2      	b.n	800ebea <__libc_init_array+0x1e>
 800ec04:	0801021c 	.word	0x0801021c
 800ec08:	0801021c 	.word	0x0801021c
 800ec0c:	0801021c 	.word	0x0801021c
 800ec10:	08010220 	.word	0x08010220

0800ec14 <__retarget_lock_init_recursive>:
 800ec14:	4770      	bx	lr

0800ec16 <__retarget_lock_acquire_recursive>:
 800ec16:	4770      	bx	lr

0800ec18 <__retarget_lock_release_recursive>:
 800ec18:	4770      	bx	lr
	...

0800ec1c <malloc>:
 800ec1c:	4b02      	ldr	r3, [pc, #8]	; (800ec28 <malloc+0xc>)
 800ec1e:	4601      	mov	r1, r0
 800ec20:	6818      	ldr	r0, [r3, #0]
 800ec22:	f000 b88d 	b.w	800ed40 <_malloc_r>
 800ec26:	bf00      	nop
 800ec28:	20000030 	.word	0x20000030

0800ec2c <free>:
 800ec2c:	4b02      	ldr	r3, [pc, #8]	; (800ec38 <free+0xc>)
 800ec2e:	4601      	mov	r1, r0
 800ec30:	6818      	ldr	r0, [r3, #0]
 800ec32:	f000 b819 	b.w	800ec68 <_free_r>
 800ec36:	bf00      	nop
 800ec38:	20000030 	.word	0x20000030

0800ec3c <memcpy>:
 800ec3c:	440a      	add	r2, r1
 800ec3e:	4291      	cmp	r1, r2
 800ec40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ec44:	d100      	bne.n	800ec48 <memcpy+0xc>
 800ec46:	4770      	bx	lr
 800ec48:	b510      	push	{r4, lr}
 800ec4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec52:	4291      	cmp	r1, r2
 800ec54:	d1f9      	bne.n	800ec4a <memcpy+0xe>
 800ec56:	bd10      	pop	{r4, pc}

0800ec58 <memset>:
 800ec58:	4402      	add	r2, r0
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d100      	bne.n	800ec62 <memset+0xa>
 800ec60:	4770      	bx	lr
 800ec62:	f803 1b01 	strb.w	r1, [r3], #1
 800ec66:	e7f9      	b.n	800ec5c <memset+0x4>

0800ec68 <_free_r>:
 800ec68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec6a:	2900      	cmp	r1, #0
 800ec6c:	d044      	beq.n	800ecf8 <_free_r+0x90>
 800ec6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec72:	9001      	str	r0, [sp, #4]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f1a1 0404 	sub.w	r4, r1, #4
 800ec7a:	bfb8      	it	lt
 800ec7c:	18e4      	addlt	r4, r4, r3
 800ec7e:	f000 fc5b 	bl	800f538 <__malloc_lock>
 800ec82:	4a1e      	ldr	r2, [pc, #120]	; (800ecfc <_free_r+0x94>)
 800ec84:	9801      	ldr	r0, [sp, #4]
 800ec86:	6813      	ldr	r3, [r2, #0]
 800ec88:	b933      	cbnz	r3, 800ec98 <_free_r+0x30>
 800ec8a:	6063      	str	r3, [r4, #4]
 800ec8c:	6014      	str	r4, [r2, #0]
 800ec8e:	b003      	add	sp, #12
 800ec90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec94:	f000 bc56 	b.w	800f544 <__malloc_unlock>
 800ec98:	42a3      	cmp	r3, r4
 800ec9a:	d908      	bls.n	800ecae <_free_r+0x46>
 800ec9c:	6825      	ldr	r5, [r4, #0]
 800ec9e:	1961      	adds	r1, r4, r5
 800eca0:	428b      	cmp	r3, r1
 800eca2:	bf01      	itttt	eq
 800eca4:	6819      	ldreq	r1, [r3, #0]
 800eca6:	685b      	ldreq	r3, [r3, #4]
 800eca8:	1949      	addeq	r1, r1, r5
 800ecaa:	6021      	streq	r1, [r4, #0]
 800ecac:	e7ed      	b.n	800ec8a <_free_r+0x22>
 800ecae:	461a      	mov	r2, r3
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	b10b      	cbz	r3, 800ecb8 <_free_r+0x50>
 800ecb4:	42a3      	cmp	r3, r4
 800ecb6:	d9fa      	bls.n	800ecae <_free_r+0x46>
 800ecb8:	6811      	ldr	r1, [r2, #0]
 800ecba:	1855      	adds	r5, r2, r1
 800ecbc:	42a5      	cmp	r5, r4
 800ecbe:	d10b      	bne.n	800ecd8 <_free_r+0x70>
 800ecc0:	6824      	ldr	r4, [r4, #0]
 800ecc2:	4421      	add	r1, r4
 800ecc4:	1854      	adds	r4, r2, r1
 800ecc6:	42a3      	cmp	r3, r4
 800ecc8:	6011      	str	r1, [r2, #0]
 800ecca:	d1e0      	bne.n	800ec8e <_free_r+0x26>
 800eccc:	681c      	ldr	r4, [r3, #0]
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	6053      	str	r3, [r2, #4]
 800ecd2:	4421      	add	r1, r4
 800ecd4:	6011      	str	r1, [r2, #0]
 800ecd6:	e7da      	b.n	800ec8e <_free_r+0x26>
 800ecd8:	d902      	bls.n	800ece0 <_free_r+0x78>
 800ecda:	230c      	movs	r3, #12
 800ecdc:	6003      	str	r3, [r0, #0]
 800ecde:	e7d6      	b.n	800ec8e <_free_r+0x26>
 800ece0:	6825      	ldr	r5, [r4, #0]
 800ece2:	1961      	adds	r1, r4, r5
 800ece4:	428b      	cmp	r3, r1
 800ece6:	bf04      	itt	eq
 800ece8:	6819      	ldreq	r1, [r3, #0]
 800ecea:	685b      	ldreq	r3, [r3, #4]
 800ecec:	6063      	str	r3, [r4, #4]
 800ecee:	bf04      	itt	eq
 800ecf0:	1949      	addeq	r1, r1, r5
 800ecf2:	6021      	streq	r1, [r4, #0]
 800ecf4:	6054      	str	r4, [r2, #4]
 800ecf6:	e7ca      	b.n	800ec8e <_free_r+0x26>
 800ecf8:	b003      	add	sp, #12
 800ecfa:	bd30      	pop	{r4, r5, pc}
 800ecfc:	200069ac 	.word	0x200069ac

0800ed00 <sbrk_aligned>:
 800ed00:	b570      	push	{r4, r5, r6, lr}
 800ed02:	4e0e      	ldr	r6, [pc, #56]	; (800ed3c <sbrk_aligned+0x3c>)
 800ed04:	460c      	mov	r4, r1
 800ed06:	6831      	ldr	r1, [r6, #0]
 800ed08:	4605      	mov	r5, r0
 800ed0a:	b911      	cbnz	r1, 800ed12 <sbrk_aligned+0x12>
 800ed0c:	f000 f984 	bl	800f018 <_sbrk_r>
 800ed10:	6030      	str	r0, [r6, #0]
 800ed12:	4621      	mov	r1, r4
 800ed14:	4628      	mov	r0, r5
 800ed16:	f000 f97f 	bl	800f018 <_sbrk_r>
 800ed1a:	1c43      	adds	r3, r0, #1
 800ed1c:	d00a      	beq.n	800ed34 <sbrk_aligned+0x34>
 800ed1e:	1cc4      	adds	r4, r0, #3
 800ed20:	f024 0403 	bic.w	r4, r4, #3
 800ed24:	42a0      	cmp	r0, r4
 800ed26:	d007      	beq.n	800ed38 <sbrk_aligned+0x38>
 800ed28:	1a21      	subs	r1, r4, r0
 800ed2a:	4628      	mov	r0, r5
 800ed2c:	f000 f974 	bl	800f018 <_sbrk_r>
 800ed30:	3001      	adds	r0, #1
 800ed32:	d101      	bne.n	800ed38 <sbrk_aligned+0x38>
 800ed34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ed38:	4620      	mov	r0, r4
 800ed3a:	bd70      	pop	{r4, r5, r6, pc}
 800ed3c:	200069b0 	.word	0x200069b0

0800ed40 <_malloc_r>:
 800ed40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed44:	1ccd      	adds	r5, r1, #3
 800ed46:	f025 0503 	bic.w	r5, r5, #3
 800ed4a:	3508      	adds	r5, #8
 800ed4c:	2d0c      	cmp	r5, #12
 800ed4e:	bf38      	it	cc
 800ed50:	250c      	movcc	r5, #12
 800ed52:	2d00      	cmp	r5, #0
 800ed54:	4607      	mov	r7, r0
 800ed56:	db01      	blt.n	800ed5c <_malloc_r+0x1c>
 800ed58:	42a9      	cmp	r1, r5
 800ed5a:	d905      	bls.n	800ed68 <_malloc_r+0x28>
 800ed5c:	230c      	movs	r3, #12
 800ed5e:	603b      	str	r3, [r7, #0]
 800ed60:	2600      	movs	r6, #0
 800ed62:	4630      	mov	r0, r6
 800ed64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed68:	4e2e      	ldr	r6, [pc, #184]	; (800ee24 <_malloc_r+0xe4>)
 800ed6a:	f000 fbe5 	bl	800f538 <__malloc_lock>
 800ed6e:	6833      	ldr	r3, [r6, #0]
 800ed70:	461c      	mov	r4, r3
 800ed72:	bb34      	cbnz	r4, 800edc2 <_malloc_r+0x82>
 800ed74:	4629      	mov	r1, r5
 800ed76:	4638      	mov	r0, r7
 800ed78:	f7ff ffc2 	bl	800ed00 <sbrk_aligned>
 800ed7c:	1c43      	adds	r3, r0, #1
 800ed7e:	4604      	mov	r4, r0
 800ed80:	d14d      	bne.n	800ee1e <_malloc_r+0xde>
 800ed82:	6834      	ldr	r4, [r6, #0]
 800ed84:	4626      	mov	r6, r4
 800ed86:	2e00      	cmp	r6, #0
 800ed88:	d140      	bne.n	800ee0c <_malloc_r+0xcc>
 800ed8a:	6823      	ldr	r3, [r4, #0]
 800ed8c:	4631      	mov	r1, r6
 800ed8e:	4638      	mov	r0, r7
 800ed90:	eb04 0803 	add.w	r8, r4, r3
 800ed94:	f000 f940 	bl	800f018 <_sbrk_r>
 800ed98:	4580      	cmp	r8, r0
 800ed9a:	d13a      	bne.n	800ee12 <_malloc_r+0xd2>
 800ed9c:	6821      	ldr	r1, [r4, #0]
 800ed9e:	3503      	adds	r5, #3
 800eda0:	1a6d      	subs	r5, r5, r1
 800eda2:	f025 0503 	bic.w	r5, r5, #3
 800eda6:	3508      	adds	r5, #8
 800eda8:	2d0c      	cmp	r5, #12
 800edaa:	bf38      	it	cc
 800edac:	250c      	movcc	r5, #12
 800edae:	4629      	mov	r1, r5
 800edb0:	4638      	mov	r0, r7
 800edb2:	f7ff ffa5 	bl	800ed00 <sbrk_aligned>
 800edb6:	3001      	adds	r0, #1
 800edb8:	d02b      	beq.n	800ee12 <_malloc_r+0xd2>
 800edba:	6823      	ldr	r3, [r4, #0]
 800edbc:	442b      	add	r3, r5
 800edbe:	6023      	str	r3, [r4, #0]
 800edc0:	e00e      	b.n	800ede0 <_malloc_r+0xa0>
 800edc2:	6822      	ldr	r2, [r4, #0]
 800edc4:	1b52      	subs	r2, r2, r5
 800edc6:	d41e      	bmi.n	800ee06 <_malloc_r+0xc6>
 800edc8:	2a0b      	cmp	r2, #11
 800edca:	d916      	bls.n	800edfa <_malloc_r+0xba>
 800edcc:	1961      	adds	r1, r4, r5
 800edce:	42a3      	cmp	r3, r4
 800edd0:	6025      	str	r5, [r4, #0]
 800edd2:	bf18      	it	ne
 800edd4:	6059      	strne	r1, [r3, #4]
 800edd6:	6863      	ldr	r3, [r4, #4]
 800edd8:	bf08      	it	eq
 800edda:	6031      	streq	r1, [r6, #0]
 800eddc:	5162      	str	r2, [r4, r5]
 800edde:	604b      	str	r3, [r1, #4]
 800ede0:	4638      	mov	r0, r7
 800ede2:	f104 060b 	add.w	r6, r4, #11
 800ede6:	f000 fbad 	bl	800f544 <__malloc_unlock>
 800edea:	f026 0607 	bic.w	r6, r6, #7
 800edee:	1d23      	adds	r3, r4, #4
 800edf0:	1af2      	subs	r2, r6, r3
 800edf2:	d0b6      	beq.n	800ed62 <_malloc_r+0x22>
 800edf4:	1b9b      	subs	r3, r3, r6
 800edf6:	50a3      	str	r3, [r4, r2]
 800edf8:	e7b3      	b.n	800ed62 <_malloc_r+0x22>
 800edfa:	6862      	ldr	r2, [r4, #4]
 800edfc:	42a3      	cmp	r3, r4
 800edfe:	bf0c      	ite	eq
 800ee00:	6032      	streq	r2, [r6, #0]
 800ee02:	605a      	strne	r2, [r3, #4]
 800ee04:	e7ec      	b.n	800ede0 <_malloc_r+0xa0>
 800ee06:	4623      	mov	r3, r4
 800ee08:	6864      	ldr	r4, [r4, #4]
 800ee0a:	e7b2      	b.n	800ed72 <_malloc_r+0x32>
 800ee0c:	4634      	mov	r4, r6
 800ee0e:	6876      	ldr	r6, [r6, #4]
 800ee10:	e7b9      	b.n	800ed86 <_malloc_r+0x46>
 800ee12:	230c      	movs	r3, #12
 800ee14:	603b      	str	r3, [r7, #0]
 800ee16:	4638      	mov	r0, r7
 800ee18:	f000 fb94 	bl	800f544 <__malloc_unlock>
 800ee1c:	e7a1      	b.n	800ed62 <_malloc_r+0x22>
 800ee1e:	6025      	str	r5, [r4, #0]
 800ee20:	e7de      	b.n	800ede0 <_malloc_r+0xa0>
 800ee22:	bf00      	nop
 800ee24:	200069ac 	.word	0x200069ac

0800ee28 <iprintf>:
 800ee28:	b40f      	push	{r0, r1, r2, r3}
 800ee2a:	4b0a      	ldr	r3, [pc, #40]	; (800ee54 <iprintf+0x2c>)
 800ee2c:	b513      	push	{r0, r1, r4, lr}
 800ee2e:	681c      	ldr	r4, [r3, #0]
 800ee30:	b124      	cbz	r4, 800ee3c <iprintf+0x14>
 800ee32:	69a3      	ldr	r3, [r4, #24]
 800ee34:	b913      	cbnz	r3, 800ee3c <iprintf+0x14>
 800ee36:	4620      	mov	r0, r4
 800ee38:	f7ff fe2a 	bl	800ea90 <__sinit>
 800ee3c:	ab05      	add	r3, sp, #20
 800ee3e:	9a04      	ldr	r2, [sp, #16]
 800ee40:	68a1      	ldr	r1, [r4, #8]
 800ee42:	9301      	str	r3, [sp, #4]
 800ee44:	4620      	mov	r0, r4
 800ee46:	f000 fd09 	bl	800f85c <_vfiprintf_r>
 800ee4a:	b002      	add	sp, #8
 800ee4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee50:	b004      	add	sp, #16
 800ee52:	4770      	bx	lr
 800ee54:	20000030 	.word	0x20000030

0800ee58 <_puts_r>:
 800ee58:	b570      	push	{r4, r5, r6, lr}
 800ee5a:	460e      	mov	r6, r1
 800ee5c:	4605      	mov	r5, r0
 800ee5e:	b118      	cbz	r0, 800ee68 <_puts_r+0x10>
 800ee60:	6983      	ldr	r3, [r0, #24]
 800ee62:	b90b      	cbnz	r3, 800ee68 <_puts_r+0x10>
 800ee64:	f7ff fe14 	bl	800ea90 <__sinit>
 800ee68:	69ab      	ldr	r3, [r5, #24]
 800ee6a:	68ac      	ldr	r4, [r5, #8]
 800ee6c:	b913      	cbnz	r3, 800ee74 <_puts_r+0x1c>
 800ee6e:	4628      	mov	r0, r5
 800ee70:	f7ff fe0e 	bl	800ea90 <__sinit>
 800ee74:	4b2c      	ldr	r3, [pc, #176]	; (800ef28 <_puts_r+0xd0>)
 800ee76:	429c      	cmp	r4, r3
 800ee78:	d120      	bne.n	800eebc <_puts_r+0x64>
 800ee7a:	686c      	ldr	r4, [r5, #4]
 800ee7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee7e:	07db      	lsls	r3, r3, #31
 800ee80:	d405      	bmi.n	800ee8e <_puts_r+0x36>
 800ee82:	89a3      	ldrh	r3, [r4, #12]
 800ee84:	0598      	lsls	r0, r3, #22
 800ee86:	d402      	bmi.n	800ee8e <_puts_r+0x36>
 800ee88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee8a:	f7ff fec4 	bl	800ec16 <__retarget_lock_acquire_recursive>
 800ee8e:	89a3      	ldrh	r3, [r4, #12]
 800ee90:	0719      	lsls	r1, r3, #28
 800ee92:	d51d      	bpl.n	800eed0 <_puts_r+0x78>
 800ee94:	6923      	ldr	r3, [r4, #16]
 800ee96:	b1db      	cbz	r3, 800eed0 <_puts_r+0x78>
 800ee98:	3e01      	subs	r6, #1
 800ee9a:	68a3      	ldr	r3, [r4, #8]
 800ee9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eea0:	3b01      	subs	r3, #1
 800eea2:	60a3      	str	r3, [r4, #8]
 800eea4:	bb39      	cbnz	r1, 800eef6 <_puts_r+0x9e>
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	da38      	bge.n	800ef1c <_puts_r+0xc4>
 800eeaa:	4622      	mov	r2, r4
 800eeac:	210a      	movs	r1, #10
 800eeae:	4628      	mov	r0, r5
 800eeb0:	f000 f926 	bl	800f100 <__swbuf_r>
 800eeb4:	3001      	adds	r0, #1
 800eeb6:	d011      	beq.n	800eedc <_puts_r+0x84>
 800eeb8:	250a      	movs	r5, #10
 800eeba:	e011      	b.n	800eee0 <_puts_r+0x88>
 800eebc:	4b1b      	ldr	r3, [pc, #108]	; (800ef2c <_puts_r+0xd4>)
 800eebe:	429c      	cmp	r4, r3
 800eec0:	d101      	bne.n	800eec6 <_puts_r+0x6e>
 800eec2:	68ac      	ldr	r4, [r5, #8]
 800eec4:	e7da      	b.n	800ee7c <_puts_r+0x24>
 800eec6:	4b1a      	ldr	r3, [pc, #104]	; (800ef30 <_puts_r+0xd8>)
 800eec8:	429c      	cmp	r4, r3
 800eeca:	bf08      	it	eq
 800eecc:	68ec      	ldreq	r4, [r5, #12]
 800eece:	e7d5      	b.n	800ee7c <_puts_r+0x24>
 800eed0:	4621      	mov	r1, r4
 800eed2:	4628      	mov	r0, r5
 800eed4:	f000 f978 	bl	800f1c8 <__swsetup_r>
 800eed8:	2800      	cmp	r0, #0
 800eeda:	d0dd      	beq.n	800ee98 <_puts_r+0x40>
 800eedc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800eee0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eee2:	07da      	lsls	r2, r3, #31
 800eee4:	d405      	bmi.n	800eef2 <_puts_r+0x9a>
 800eee6:	89a3      	ldrh	r3, [r4, #12]
 800eee8:	059b      	lsls	r3, r3, #22
 800eeea:	d402      	bmi.n	800eef2 <_puts_r+0x9a>
 800eeec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eeee:	f7ff fe93 	bl	800ec18 <__retarget_lock_release_recursive>
 800eef2:	4628      	mov	r0, r5
 800eef4:	bd70      	pop	{r4, r5, r6, pc}
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	da04      	bge.n	800ef04 <_puts_r+0xac>
 800eefa:	69a2      	ldr	r2, [r4, #24]
 800eefc:	429a      	cmp	r2, r3
 800eefe:	dc06      	bgt.n	800ef0e <_puts_r+0xb6>
 800ef00:	290a      	cmp	r1, #10
 800ef02:	d004      	beq.n	800ef0e <_puts_r+0xb6>
 800ef04:	6823      	ldr	r3, [r4, #0]
 800ef06:	1c5a      	adds	r2, r3, #1
 800ef08:	6022      	str	r2, [r4, #0]
 800ef0a:	7019      	strb	r1, [r3, #0]
 800ef0c:	e7c5      	b.n	800ee9a <_puts_r+0x42>
 800ef0e:	4622      	mov	r2, r4
 800ef10:	4628      	mov	r0, r5
 800ef12:	f000 f8f5 	bl	800f100 <__swbuf_r>
 800ef16:	3001      	adds	r0, #1
 800ef18:	d1bf      	bne.n	800ee9a <_puts_r+0x42>
 800ef1a:	e7df      	b.n	800eedc <_puts_r+0x84>
 800ef1c:	6823      	ldr	r3, [r4, #0]
 800ef1e:	250a      	movs	r5, #10
 800ef20:	1c5a      	adds	r2, r3, #1
 800ef22:	6022      	str	r2, [r4, #0]
 800ef24:	701d      	strb	r5, [r3, #0]
 800ef26:	e7db      	b.n	800eee0 <_puts_r+0x88>
 800ef28:	0801019c 	.word	0x0801019c
 800ef2c:	080101bc 	.word	0x080101bc
 800ef30:	0801017c 	.word	0x0801017c

0800ef34 <puts>:
 800ef34:	4b02      	ldr	r3, [pc, #8]	; (800ef40 <puts+0xc>)
 800ef36:	4601      	mov	r1, r0
 800ef38:	6818      	ldr	r0, [r3, #0]
 800ef3a:	f7ff bf8d 	b.w	800ee58 <_puts_r>
 800ef3e:	bf00      	nop
 800ef40:	20000030 	.word	0x20000030

0800ef44 <cleanup_glue>:
 800ef44:	b538      	push	{r3, r4, r5, lr}
 800ef46:	460c      	mov	r4, r1
 800ef48:	6809      	ldr	r1, [r1, #0]
 800ef4a:	4605      	mov	r5, r0
 800ef4c:	b109      	cbz	r1, 800ef52 <cleanup_glue+0xe>
 800ef4e:	f7ff fff9 	bl	800ef44 <cleanup_glue>
 800ef52:	4621      	mov	r1, r4
 800ef54:	4628      	mov	r0, r5
 800ef56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef5a:	f7ff be85 	b.w	800ec68 <_free_r>
	...

0800ef60 <_reclaim_reent>:
 800ef60:	4b2c      	ldr	r3, [pc, #176]	; (800f014 <_reclaim_reent+0xb4>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4283      	cmp	r3, r0
 800ef66:	b570      	push	{r4, r5, r6, lr}
 800ef68:	4604      	mov	r4, r0
 800ef6a:	d051      	beq.n	800f010 <_reclaim_reent+0xb0>
 800ef6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ef6e:	b143      	cbz	r3, 800ef82 <_reclaim_reent+0x22>
 800ef70:	68db      	ldr	r3, [r3, #12]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d14a      	bne.n	800f00c <_reclaim_reent+0xac>
 800ef76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef78:	6819      	ldr	r1, [r3, #0]
 800ef7a:	b111      	cbz	r1, 800ef82 <_reclaim_reent+0x22>
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	f7ff fe73 	bl	800ec68 <_free_r>
 800ef82:	6961      	ldr	r1, [r4, #20]
 800ef84:	b111      	cbz	r1, 800ef8c <_reclaim_reent+0x2c>
 800ef86:	4620      	mov	r0, r4
 800ef88:	f7ff fe6e 	bl	800ec68 <_free_r>
 800ef8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ef8e:	b111      	cbz	r1, 800ef96 <_reclaim_reent+0x36>
 800ef90:	4620      	mov	r0, r4
 800ef92:	f7ff fe69 	bl	800ec68 <_free_r>
 800ef96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ef98:	b111      	cbz	r1, 800efa0 <_reclaim_reent+0x40>
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f7ff fe64 	bl	800ec68 <_free_r>
 800efa0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800efa2:	b111      	cbz	r1, 800efaa <_reclaim_reent+0x4a>
 800efa4:	4620      	mov	r0, r4
 800efa6:	f7ff fe5f 	bl	800ec68 <_free_r>
 800efaa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800efac:	b111      	cbz	r1, 800efb4 <_reclaim_reent+0x54>
 800efae:	4620      	mov	r0, r4
 800efb0:	f7ff fe5a 	bl	800ec68 <_free_r>
 800efb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800efb6:	b111      	cbz	r1, 800efbe <_reclaim_reent+0x5e>
 800efb8:	4620      	mov	r0, r4
 800efba:	f7ff fe55 	bl	800ec68 <_free_r>
 800efbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800efc0:	b111      	cbz	r1, 800efc8 <_reclaim_reent+0x68>
 800efc2:	4620      	mov	r0, r4
 800efc4:	f7ff fe50 	bl	800ec68 <_free_r>
 800efc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efca:	b111      	cbz	r1, 800efd2 <_reclaim_reent+0x72>
 800efcc:	4620      	mov	r0, r4
 800efce:	f7ff fe4b 	bl	800ec68 <_free_r>
 800efd2:	69a3      	ldr	r3, [r4, #24]
 800efd4:	b1e3      	cbz	r3, 800f010 <_reclaim_reent+0xb0>
 800efd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800efd8:	4620      	mov	r0, r4
 800efda:	4798      	blx	r3
 800efdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800efde:	b1b9      	cbz	r1, 800f010 <_reclaim_reent+0xb0>
 800efe0:	4620      	mov	r0, r4
 800efe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efe6:	f7ff bfad 	b.w	800ef44 <cleanup_glue>
 800efea:	5949      	ldr	r1, [r1, r5]
 800efec:	b941      	cbnz	r1, 800f000 <_reclaim_reent+0xa0>
 800efee:	3504      	adds	r5, #4
 800eff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eff2:	2d80      	cmp	r5, #128	; 0x80
 800eff4:	68d9      	ldr	r1, [r3, #12]
 800eff6:	d1f8      	bne.n	800efea <_reclaim_reent+0x8a>
 800eff8:	4620      	mov	r0, r4
 800effa:	f7ff fe35 	bl	800ec68 <_free_r>
 800effe:	e7ba      	b.n	800ef76 <_reclaim_reent+0x16>
 800f000:	680e      	ldr	r6, [r1, #0]
 800f002:	4620      	mov	r0, r4
 800f004:	f7ff fe30 	bl	800ec68 <_free_r>
 800f008:	4631      	mov	r1, r6
 800f00a:	e7ef      	b.n	800efec <_reclaim_reent+0x8c>
 800f00c:	2500      	movs	r5, #0
 800f00e:	e7ef      	b.n	800eff0 <_reclaim_reent+0x90>
 800f010:	bd70      	pop	{r4, r5, r6, pc}
 800f012:	bf00      	nop
 800f014:	20000030 	.word	0x20000030

0800f018 <_sbrk_r>:
 800f018:	b538      	push	{r3, r4, r5, lr}
 800f01a:	4d06      	ldr	r5, [pc, #24]	; (800f034 <_sbrk_r+0x1c>)
 800f01c:	2300      	movs	r3, #0
 800f01e:	4604      	mov	r4, r0
 800f020:	4608      	mov	r0, r1
 800f022:	602b      	str	r3, [r5, #0]
 800f024:	f7f1 ff00 	bl	8000e28 <_sbrk>
 800f028:	1c43      	adds	r3, r0, #1
 800f02a:	d102      	bne.n	800f032 <_sbrk_r+0x1a>
 800f02c:	682b      	ldr	r3, [r5, #0]
 800f02e:	b103      	cbz	r3, 800f032 <_sbrk_r+0x1a>
 800f030:	6023      	str	r3, [r4, #0]
 800f032:	bd38      	pop	{r3, r4, r5, pc}
 800f034:	200069b4 	.word	0x200069b4

0800f038 <siprintf>:
 800f038:	b40e      	push	{r1, r2, r3}
 800f03a:	b500      	push	{lr}
 800f03c:	b09c      	sub	sp, #112	; 0x70
 800f03e:	ab1d      	add	r3, sp, #116	; 0x74
 800f040:	9002      	str	r0, [sp, #8]
 800f042:	9006      	str	r0, [sp, #24]
 800f044:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f048:	4809      	ldr	r0, [pc, #36]	; (800f070 <siprintf+0x38>)
 800f04a:	9107      	str	r1, [sp, #28]
 800f04c:	9104      	str	r1, [sp, #16]
 800f04e:	4909      	ldr	r1, [pc, #36]	; (800f074 <siprintf+0x3c>)
 800f050:	f853 2b04 	ldr.w	r2, [r3], #4
 800f054:	9105      	str	r1, [sp, #20]
 800f056:	6800      	ldr	r0, [r0, #0]
 800f058:	9301      	str	r3, [sp, #4]
 800f05a:	a902      	add	r1, sp, #8
 800f05c:	f000 fad4 	bl	800f608 <_svfiprintf_r>
 800f060:	9b02      	ldr	r3, [sp, #8]
 800f062:	2200      	movs	r2, #0
 800f064:	701a      	strb	r2, [r3, #0]
 800f066:	b01c      	add	sp, #112	; 0x70
 800f068:	f85d eb04 	ldr.w	lr, [sp], #4
 800f06c:	b003      	add	sp, #12
 800f06e:	4770      	bx	lr
 800f070:	20000030 	.word	0x20000030
 800f074:	ffff0208 	.word	0xffff0208

0800f078 <__sread>:
 800f078:	b510      	push	{r4, lr}
 800f07a:	460c      	mov	r4, r1
 800f07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f080:	f000 feb0 	bl	800fde4 <_read_r>
 800f084:	2800      	cmp	r0, #0
 800f086:	bfab      	itete	ge
 800f088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f08a:	89a3      	ldrhlt	r3, [r4, #12]
 800f08c:	181b      	addge	r3, r3, r0
 800f08e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f092:	bfac      	ite	ge
 800f094:	6563      	strge	r3, [r4, #84]	; 0x54
 800f096:	81a3      	strhlt	r3, [r4, #12]
 800f098:	bd10      	pop	{r4, pc}

0800f09a <__swrite>:
 800f09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f09e:	461f      	mov	r7, r3
 800f0a0:	898b      	ldrh	r3, [r1, #12]
 800f0a2:	05db      	lsls	r3, r3, #23
 800f0a4:	4605      	mov	r5, r0
 800f0a6:	460c      	mov	r4, r1
 800f0a8:	4616      	mov	r6, r2
 800f0aa:	d505      	bpl.n	800f0b8 <__swrite+0x1e>
 800f0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0b0:	2302      	movs	r3, #2
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f000 f9c8 	bl	800f448 <_lseek_r>
 800f0b8:	89a3      	ldrh	r3, [r4, #12]
 800f0ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f0c2:	81a3      	strh	r3, [r4, #12]
 800f0c4:	4632      	mov	r2, r6
 800f0c6:	463b      	mov	r3, r7
 800f0c8:	4628      	mov	r0, r5
 800f0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ce:	f000 b869 	b.w	800f1a4 <_write_r>

0800f0d2 <__sseek>:
 800f0d2:	b510      	push	{r4, lr}
 800f0d4:	460c      	mov	r4, r1
 800f0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0da:	f000 f9b5 	bl	800f448 <_lseek_r>
 800f0de:	1c43      	adds	r3, r0, #1
 800f0e0:	89a3      	ldrh	r3, [r4, #12]
 800f0e2:	bf15      	itete	ne
 800f0e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f0e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f0ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f0ee:	81a3      	strheq	r3, [r4, #12]
 800f0f0:	bf18      	it	ne
 800f0f2:	81a3      	strhne	r3, [r4, #12]
 800f0f4:	bd10      	pop	{r4, pc}

0800f0f6 <__sclose>:
 800f0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0fa:	f000 b8d3 	b.w	800f2a4 <_close_r>
	...

0800f100 <__swbuf_r>:
 800f100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f102:	460e      	mov	r6, r1
 800f104:	4614      	mov	r4, r2
 800f106:	4605      	mov	r5, r0
 800f108:	b118      	cbz	r0, 800f112 <__swbuf_r+0x12>
 800f10a:	6983      	ldr	r3, [r0, #24]
 800f10c:	b90b      	cbnz	r3, 800f112 <__swbuf_r+0x12>
 800f10e:	f7ff fcbf 	bl	800ea90 <__sinit>
 800f112:	4b21      	ldr	r3, [pc, #132]	; (800f198 <__swbuf_r+0x98>)
 800f114:	429c      	cmp	r4, r3
 800f116:	d12b      	bne.n	800f170 <__swbuf_r+0x70>
 800f118:	686c      	ldr	r4, [r5, #4]
 800f11a:	69a3      	ldr	r3, [r4, #24]
 800f11c:	60a3      	str	r3, [r4, #8]
 800f11e:	89a3      	ldrh	r3, [r4, #12]
 800f120:	071a      	lsls	r2, r3, #28
 800f122:	d52f      	bpl.n	800f184 <__swbuf_r+0x84>
 800f124:	6923      	ldr	r3, [r4, #16]
 800f126:	b36b      	cbz	r3, 800f184 <__swbuf_r+0x84>
 800f128:	6923      	ldr	r3, [r4, #16]
 800f12a:	6820      	ldr	r0, [r4, #0]
 800f12c:	1ac0      	subs	r0, r0, r3
 800f12e:	6963      	ldr	r3, [r4, #20]
 800f130:	b2f6      	uxtb	r6, r6
 800f132:	4283      	cmp	r3, r0
 800f134:	4637      	mov	r7, r6
 800f136:	dc04      	bgt.n	800f142 <__swbuf_r+0x42>
 800f138:	4621      	mov	r1, r4
 800f13a:	4628      	mov	r0, r5
 800f13c:	f000 f948 	bl	800f3d0 <_fflush_r>
 800f140:	bb30      	cbnz	r0, 800f190 <__swbuf_r+0x90>
 800f142:	68a3      	ldr	r3, [r4, #8]
 800f144:	3b01      	subs	r3, #1
 800f146:	60a3      	str	r3, [r4, #8]
 800f148:	6823      	ldr	r3, [r4, #0]
 800f14a:	1c5a      	adds	r2, r3, #1
 800f14c:	6022      	str	r2, [r4, #0]
 800f14e:	701e      	strb	r6, [r3, #0]
 800f150:	6963      	ldr	r3, [r4, #20]
 800f152:	3001      	adds	r0, #1
 800f154:	4283      	cmp	r3, r0
 800f156:	d004      	beq.n	800f162 <__swbuf_r+0x62>
 800f158:	89a3      	ldrh	r3, [r4, #12]
 800f15a:	07db      	lsls	r3, r3, #31
 800f15c:	d506      	bpl.n	800f16c <__swbuf_r+0x6c>
 800f15e:	2e0a      	cmp	r6, #10
 800f160:	d104      	bne.n	800f16c <__swbuf_r+0x6c>
 800f162:	4621      	mov	r1, r4
 800f164:	4628      	mov	r0, r5
 800f166:	f000 f933 	bl	800f3d0 <_fflush_r>
 800f16a:	b988      	cbnz	r0, 800f190 <__swbuf_r+0x90>
 800f16c:	4638      	mov	r0, r7
 800f16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f170:	4b0a      	ldr	r3, [pc, #40]	; (800f19c <__swbuf_r+0x9c>)
 800f172:	429c      	cmp	r4, r3
 800f174:	d101      	bne.n	800f17a <__swbuf_r+0x7a>
 800f176:	68ac      	ldr	r4, [r5, #8]
 800f178:	e7cf      	b.n	800f11a <__swbuf_r+0x1a>
 800f17a:	4b09      	ldr	r3, [pc, #36]	; (800f1a0 <__swbuf_r+0xa0>)
 800f17c:	429c      	cmp	r4, r3
 800f17e:	bf08      	it	eq
 800f180:	68ec      	ldreq	r4, [r5, #12]
 800f182:	e7ca      	b.n	800f11a <__swbuf_r+0x1a>
 800f184:	4621      	mov	r1, r4
 800f186:	4628      	mov	r0, r5
 800f188:	f000 f81e 	bl	800f1c8 <__swsetup_r>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d0cb      	beq.n	800f128 <__swbuf_r+0x28>
 800f190:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f194:	e7ea      	b.n	800f16c <__swbuf_r+0x6c>
 800f196:	bf00      	nop
 800f198:	0801019c 	.word	0x0801019c
 800f19c:	080101bc 	.word	0x080101bc
 800f1a0:	0801017c 	.word	0x0801017c

0800f1a4 <_write_r>:
 800f1a4:	b538      	push	{r3, r4, r5, lr}
 800f1a6:	4d07      	ldr	r5, [pc, #28]	; (800f1c4 <_write_r+0x20>)
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	4608      	mov	r0, r1
 800f1ac:	4611      	mov	r1, r2
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	602a      	str	r2, [r5, #0]
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	f7f1 fa28 	bl	8000608 <_write>
 800f1b8:	1c43      	adds	r3, r0, #1
 800f1ba:	d102      	bne.n	800f1c2 <_write_r+0x1e>
 800f1bc:	682b      	ldr	r3, [r5, #0]
 800f1be:	b103      	cbz	r3, 800f1c2 <_write_r+0x1e>
 800f1c0:	6023      	str	r3, [r4, #0]
 800f1c2:	bd38      	pop	{r3, r4, r5, pc}
 800f1c4:	200069b4 	.word	0x200069b4

0800f1c8 <__swsetup_r>:
 800f1c8:	4b32      	ldr	r3, [pc, #200]	; (800f294 <__swsetup_r+0xcc>)
 800f1ca:	b570      	push	{r4, r5, r6, lr}
 800f1cc:	681d      	ldr	r5, [r3, #0]
 800f1ce:	4606      	mov	r6, r0
 800f1d0:	460c      	mov	r4, r1
 800f1d2:	b125      	cbz	r5, 800f1de <__swsetup_r+0x16>
 800f1d4:	69ab      	ldr	r3, [r5, #24]
 800f1d6:	b913      	cbnz	r3, 800f1de <__swsetup_r+0x16>
 800f1d8:	4628      	mov	r0, r5
 800f1da:	f7ff fc59 	bl	800ea90 <__sinit>
 800f1de:	4b2e      	ldr	r3, [pc, #184]	; (800f298 <__swsetup_r+0xd0>)
 800f1e0:	429c      	cmp	r4, r3
 800f1e2:	d10f      	bne.n	800f204 <__swsetup_r+0x3c>
 800f1e4:	686c      	ldr	r4, [r5, #4]
 800f1e6:	89a3      	ldrh	r3, [r4, #12]
 800f1e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1ec:	0719      	lsls	r1, r3, #28
 800f1ee:	d42c      	bmi.n	800f24a <__swsetup_r+0x82>
 800f1f0:	06dd      	lsls	r5, r3, #27
 800f1f2:	d411      	bmi.n	800f218 <__swsetup_r+0x50>
 800f1f4:	2309      	movs	r3, #9
 800f1f6:	6033      	str	r3, [r6, #0]
 800f1f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f1fc:	81a3      	strh	r3, [r4, #12]
 800f1fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f202:	e03e      	b.n	800f282 <__swsetup_r+0xba>
 800f204:	4b25      	ldr	r3, [pc, #148]	; (800f29c <__swsetup_r+0xd4>)
 800f206:	429c      	cmp	r4, r3
 800f208:	d101      	bne.n	800f20e <__swsetup_r+0x46>
 800f20a:	68ac      	ldr	r4, [r5, #8]
 800f20c:	e7eb      	b.n	800f1e6 <__swsetup_r+0x1e>
 800f20e:	4b24      	ldr	r3, [pc, #144]	; (800f2a0 <__swsetup_r+0xd8>)
 800f210:	429c      	cmp	r4, r3
 800f212:	bf08      	it	eq
 800f214:	68ec      	ldreq	r4, [r5, #12]
 800f216:	e7e6      	b.n	800f1e6 <__swsetup_r+0x1e>
 800f218:	0758      	lsls	r0, r3, #29
 800f21a:	d512      	bpl.n	800f242 <__swsetup_r+0x7a>
 800f21c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f21e:	b141      	cbz	r1, 800f232 <__swsetup_r+0x6a>
 800f220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f224:	4299      	cmp	r1, r3
 800f226:	d002      	beq.n	800f22e <__swsetup_r+0x66>
 800f228:	4630      	mov	r0, r6
 800f22a:	f7ff fd1d 	bl	800ec68 <_free_r>
 800f22e:	2300      	movs	r3, #0
 800f230:	6363      	str	r3, [r4, #52]	; 0x34
 800f232:	89a3      	ldrh	r3, [r4, #12]
 800f234:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f238:	81a3      	strh	r3, [r4, #12]
 800f23a:	2300      	movs	r3, #0
 800f23c:	6063      	str	r3, [r4, #4]
 800f23e:	6923      	ldr	r3, [r4, #16]
 800f240:	6023      	str	r3, [r4, #0]
 800f242:	89a3      	ldrh	r3, [r4, #12]
 800f244:	f043 0308 	orr.w	r3, r3, #8
 800f248:	81a3      	strh	r3, [r4, #12]
 800f24a:	6923      	ldr	r3, [r4, #16]
 800f24c:	b94b      	cbnz	r3, 800f262 <__swsetup_r+0x9a>
 800f24e:	89a3      	ldrh	r3, [r4, #12]
 800f250:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f258:	d003      	beq.n	800f262 <__swsetup_r+0x9a>
 800f25a:	4621      	mov	r1, r4
 800f25c:	4630      	mov	r0, r6
 800f25e:	f000 f92b 	bl	800f4b8 <__smakebuf_r>
 800f262:	89a0      	ldrh	r0, [r4, #12]
 800f264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f268:	f010 0301 	ands.w	r3, r0, #1
 800f26c:	d00a      	beq.n	800f284 <__swsetup_r+0xbc>
 800f26e:	2300      	movs	r3, #0
 800f270:	60a3      	str	r3, [r4, #8]
 800f272:	6963      	ldr	r3, [r4, #20]
 800f274:	425b      	negs	r3, r3
 800f276:	61a3      	str	r3, [r4, #24]
 800f278:	6923      	ldr	r3, [r4, #16]
 800f27a:	b943      	cbnz	r3, 800f28e <__swsetup_r+0xc6>
 800f27c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f280:	d1ba      	bne.n	800f1f8 <__swsetup_r+0x30>
 800f282:	bd70      	pop	{r4, r5, r6, pc}
 800f284:	0781      	lsls	r1, r0, #30
 800f286:	bf58      	it	pl
 800f288:	6963      	ldrpl	r3, [r4, #20]
 800f28a:	60a3      	str	r3, [r4, #8]
 800f28c:	e7f4      	b.n	800f278 <__swsetup_r+0xb0>
 800f28e:	2000      	movs	r0, #0
 800f290:	e7f7      	b.n	800f282 <__swsetup_r+0xba>
 800f292:	bf00      	nop
 800f294:	20000030 	.word	0x20000030
 800f298:	0801019c 	.word	0x0801019c
 800f29c:	080101bc 	.word	0x080101bc
 800f2a0:	0801017c 	.word	0x0801017c

0800f2a4 <_close_r>:
 800f2a4:	b538      	push	{r3, r4, r5, lr}
 800f2a6:	4d06      	ldr	r5, [pc, #24]	; (800f2c0 <_close_r+0x1c>)
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	4604      	mov	r4, r0
 800f2ac:	4608      	mov	r0, r1
 800f2ae:	602b      	str	r3, [r5, #0]
 800f2b0:	f7f1 fd85 	bl	8000dbe <_close>
 800f2b4:	1c43      	adds	r3, r0, #1
 800f2b6:	d102      	bne.n	800f2be <_close_r+0x1a>
 800f2b8:	682b      	ldr	r3, [r5, #0]
 800f2ba:	b103      	cbz	r3, 800f2be <_close_r+0x1a>
 800f2bc:	6023      	str	r3, [r4, #0]
 800f2be:	bd38      	pop	{r3, r4, r5, pc}
 800f2c0:	200069b4 	.word	0x200069b4

0800f2c4 <__sflush_r>:
 800f2c4:	898a      	ldrh	r2, [r1, #12]
 800f2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ca:	4605      	mov	r5, r0
 800f2cc:	0710      	lsls	r0, r2, #28
 800f2ce:	460c      	mov	r4, r1
 800f2d0:	d458      	bmi.n	800f384 <__sflush_r+0xc0>
 800f2d2:	684b      	ldr	r3, [r1, #4]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	dc05      	bgt.n	800f2e4 <__sflush_r+0x20>
 800f2d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	dc02      	bgt.n	800f2e4 <__sflush_r+0x20>
 800f2de:	2000      	movs	r0, #0
 800f2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2e6:	2e00      	cmp	r6, #0
 800f2e8:	d0f9      	beq.n	800f2de <__sflush_r+0x1a>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2f0:	682f      	ldr	r7, [r5, #0]
 800f2f2:	602b      	str	r3, [r5, #0]
 800f2f4:	d032      	beq.n	800f35c <__sflush_r+0x98>
 800f2f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f2f8:	89a3      	ldrh	r3, [r4, #12]
 800f2fa:	075a      	lsls	r2, r3, #29
 800f2fc:	d505      	bpl.n	800f30a <__sflush_r+0x46>
 800f2fe:	6863      	ldr	r3, [r4, #4]
 800f300:	1ac0      	subs	r0, r0, r3
 800f302:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f304:	b10b      	cbz	r3, 800f30a <__sflush_r+0x46>
 800f306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f308:	1ac0      	subs	r0, r0, r3
 800f30a:	2300      	movs	r3, #0
 800f30c:	4602      	mov	r2, r0
 800f30e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f310:	6a21      	ldr	r1, [r4, #32]
 800f312:	4628      	mov	r0, r5
 800f314:	47b0      	blx	r6
 800f316:	1c43      	adds	r3, r0, #1
 800f318:	89a3      	ldrh	r3, [r4, #12]
 800f31a:	d106      	bne.n	800f32a <__sflush_r+0x66>
 800f31c:	6829      	ldr	r1, [r5, #0]
 800f31e:	291d      	cmp	r1, #29
 800f320:	d82c      	bhi.n	800f37c <__sflush_r+0xb8>
 800f322:	4a2a      	ldr	r2, [pc, #168]	; (800f3cc <__sflush_r+0x108>)
 800f324:	40ca      	lsrs	r2, r1
 800f326:	07d6      	lsls	r6, r2, #31
 800f328:	d528      	bpl.n	800f37c <__sflush_r+0xb8>
 800f32a:	2200      	movs	r2, #0
 800f32c:	6062      	str	r2, [r4, #4]
 800f32e:	04d9      	lsls	r1, r3, #19
 800f330:	6922      	ldr	r2, [r4, #16]
 800f332:	6022      	str	r2, [r4, #0]
 800f334:	d504      	bpl.n	800f340 <__sflush_r+0x7c>
 800f336:	1c42      	adds	r2, r0, #1
 800f338:	d101      	bne.n	800f33e <__sflush_r+0x7a>
 800f33a:	682b      	ldr	r3, [r5, #0]
 800f33c:	b903      	cbnz	r3, 800f340 <__sflush_r+0x7c>
 800f33e:	6560      	str	r0, [r4, #84]	; 0x54
 800f340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f342:	602f      	str	r7, [r5, #0]
 800f344:	2900      	cmp	r1, #0
 800f346:	d0ca      	beq.n	800f2de <__sflush_r+0x1a>
 800f348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f34c:	4299      	cmp	r1, r3
 800f34e:	d002      	beq.n	800f356 <__sflush_r+0x92>
 800f350:	4628      	mov	r0, r5
 800f352:	f7ff fc89 	bl	800ec68 <_free_r>
 800f356:	2000      	movs	r0, #0
 800f358:	6360      	str	r0, [r4, #52]	; 0x34
 800f35a:	e7c1      	b.n	800f2e0 <__sflush_r+0x1c>
 800f35c:	6a21      	ldr	r1, [r4, #32]
 800f35e:	2301      	movs	r3, #1
 800f360:	4628      	mov	r0, r5
 800f362:	47b0      	blx	r6
 800f364:	1c41      	adds	r1, r0, #1
 800f366:	d1c7      	bne.n	800f2f8 <__sflush_r+0x34>
 800f368:	682b      	ldr	r3, [r5, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d0c4      	beq.n	800f2f8 <__sflush_r+0x34>
 800f36e:	2b1d      	cmp	r3, #29
 800f370:	d001      	beq.n	800f376 <__sflush_r+0xb2>
 800f372:	2b16      	cmp	r3, #22
 800f374:	d101      	bne.n	800f37a <__sflush_r+0xb6>
 800f376:	602f      	str	r7, [r5, #0]
 800f378:	e7b1      	b.n	800f2de <__sflush_r+0x1a>
 800f37a:	89a3      	ldrh	r3, [r4, #12]
 800f37c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f380:	81a3      	strh	r3, [r4, #12]
 800f382:	e7ad      	b.n	800f2e0 <__sflush_r+0x1c>
 800f384:	690f      	ldr	r7, [r1, #16]
 800f386:	2f00      	cmp	r7, #0
 800f388:	d0a9      	beq.n	800f2de <__sflush_r+0x1a>
 800f38a:	0793      	lsls	r3, r2, #30
 800f38c:	680e      	ldr	r6, [r1, #0]
 800f38e:	bf08      	it	eq
 800f390:	694b      	ldreq	r3, [r1, #20]
 800f392:	600f      	str	r7, [r1, #0]
 800f394:	bf18      	it	ne
 800f396:	2300      	movne	r3, #0
 800f398:	eba6 0807 	sub.w	r8, r6, r7
 800f39c:	608b      	str	r3, [r1, #8]
 800f39e:	f1b8 0f00 	cmp.w	r8, #0
 800f3a2:	dd9c      	ble.n	800f2de <__sflush_r+0x1a>
 800f3a4:	6a21      	ldr	r1, [r4, #32]
 800f3a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f3a8:	4643      	mov	r3, r8
 800f3aa:	463a      	mov	r2, r7
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	47b0      	blx	r6
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	dc06      	bgt.n	800f3c2 <__sflush_r+0xfe>
 800f3b4:	89a3      	ldrh	r3, [r4, #12]
 800f3b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3ba:	81a3      	strh	r3, [r4, #12]
 800f3bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3c0:	e78e      	b.n	800f2e0 <__sflush_r+0x1c>
 800f3c2:	4407      	add	r7, r0
 800f3c4:	eba8 0800 	sub.w	r8, r8, r0
 800f3c8:	e7e9      	b.n	800f39e <__sflush_r+0xda>
 800f3ca:	bf00      	nop
 800f3cc:	20400001 	.word	0x20400001

0800f3d0 <_fflush_r>:
 800f3d0:	b538      	push	{r3, r4, r5, lr}
 800f3d2:	690b      	ldr	r3, [r1, #16]
 800f3d4:	4605      	mov	r5, r0
 800f3d6:	460c      	mov	r4, r1
 800f3d8:	b913      	cbnz	r3, 800f3e0 <_fflush_r+0x10>
 800f3da:	2500      	movs	r5, #0
 800f3dc:	4628      	mov	r0, r5
 800f3de:	bd38      	pop	{r3, r4, r5, pc}
 800f3e0:	b118      	cbz	r0, 800f3ea <_fflush_r+0x1a>
 800f3e2:	6983      	ldr	r3, [r0, #24]
 800f3e4:	b90b      	cbnz	r3, 800f3ea <_fflush_r+0x1a>
 800f3e6:	f7ff fb53 	bl	800ea90 <__sinit>
 800f3ea:	4b14      	ldr	r3, [pc, #80]	; (800f43c <_fflush_r+0x6c>)
 800f3ec:	429c      	cmp	r4, r3
 800f3ee:	d11b      	bne.n	800f428 <_fflush_r+0x58>
 800f3f0:	686c      	ldr	r4, [r5, #4]
 800f3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d0ef      	beq.n	800f3da <_fflush_r+0xa>
 800f3fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f3fc:	07d0      	lsls	r0, r2, #31
 800f3fe:	d404      	bmi.n	800f40a <_fflush_r+0x3a>
 800f400:	0599      	lsls	r1, r3, #22
 800f402:	d402      	bmi.n	800f40a <_fflush_r+0x3a>
 800f404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f406:	f7ff fc06 	bl	800ec16 <__retarget_lock_acquire_recursive>
 800f40a:	4628      	mov	r0, r5
 800f40c:	4621      	mov	r1, r4
 800f40e:	f7ff ff59 	bl	800f2c4 <__sflush_r>
 800f412:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f414:	07da      	lsls	r2, r3, #31
 800f416:	4605      	mov	r5, r0
 800f418:	d4e0      	bmi.n	800f3dc <_fflush_r+0xc>
 800f41a:	89a3      	ldrh	r3, [r4, #12]
 800f41c:	059b      	lsls	r3, r3, #22
 800f41e:	d4dd      	bmi.n	800f3dc <_fflush_r+0xc>
 800f420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f422:	f7ff fbf9 	bl	800ec18 <__retarget_lock_release_recursive>
 800f426:	e7d9      	b.n	800f3dc <_fflush_r+0xc>
 800f428:	4b05      	ldr	r3, [pc, #20]	; (800f440 <_fflush_r+0x70>)
 800f42a:	429c      	cmp	r4, r3
 800f42c:	d101      	bne.n	800f432 <_fflush_r+0x62>
 800f42e:	68ac      	ldr	r4, [r5, #8]
 800f430:	e7df      	b.n	800f3f2 <_fflush_r+0x22>
 800f432:	4b04      	ldr	r3, [pc, #16]	; (800f444 <_fflush_r+0x74>)
 800f434:	429c      	cmp	r4, r3
 800f436:	bf08      	it	eq
 800f438:	68ec      	ldreq	r4, [r5, #12]
 800f43a:	e7da      	b.n	800f3f2 <_fflush_r+0x22>
 800f43c:	0801019c 	.word	0x0801019c
 800f440:	080101bc 	.word	0x080101bc
 800f444:	0801017c 	.word	0x0801017c

0800f448 <_lseek_r>:
 800f448:	b538      	push	{r3, r4, r5, lr}
 800f44a:	4d07      	ldr	r5, [pc, #28]	; (800f468 <_lseek_r+0x20>)
 800f44c:	4604      	mov	r4, r0
 800f44e:	4608      	mov	r0, r1
 800f450:	4611      	mov	r1, r2
 800f452:	2200      	movs	r2, #0
 800f454:	602a      	str	r2, [r5, #0]
 800f456:	461a      	mov	r2, r3
 800f458:	f7f1 fcd8 	bl	8000e0c <_lseek>
 800f45c:	1c43      	adds	r3, r0, #1
 800f45e:	d102      	bne.n	800f466 <_lseek_r+0x1e>
 800f460:	682b      	ldr	r3, [r5, #0]
 800f462:	b103      	cbz	r3, 800f466 <_lseek_r+0x1e>
 800f464:	6023      	str	r3, [r4, #0]
 800f466:	bd38      	pop	{r3, r4, r5, pc}
 800f468:	200069b4 	.word	0x200069b4

0800f46c <__swhatbuf_r>:
 800f46c:	b570      	push	{r4, r5, r6, lr}
 800f46e:	460e      	mov	r6, r1
 800f470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f474:	2900      	cmp	r1, #0
 800f476:	b096      	sub	sp, #88	; 0x58
 800f478:	4614      	mov	r4, r2
 800f47a:	461d      	mov	r5, r3
 800f47c:	da08      	bge.n	800f490 <__swhatbuf_r+0x24>
 800f47e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f482:	2200      	movs	r2, #0
 800f484:	602a      	str	r2, [r5, #0]
 800f486:	061a      	lsls	r2, r3, #24
 800f488:	d410      	bmi.n	800f4ac <__swhatbuf_r+0x40>
 800f48a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f48e:	e00e      	b.n	800f4ae <__swhatbuf_r+0x42>
 800f490:	466a      	mov	r2, sp
 800f492:	f000 fcb9 	bl	800fe08 <_fstat_r>
 800f496:	2800      	cmp	r0, #0
 800f498:	dbf1      	blt.n	800f47e <__swhatbuf_r+0x12>
 800f49a:	9a01      	ldr	r2, [sp, #4]
 800f49c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f4a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f4a4:	425a      	negs	r2, r3
 800f4a6:	415a      	adcs	r2, r3
 800f4a8:	602a      	str	r2, [r5, #0]
 800f4aa:	e7ee      	b.n	800f48a <__swhatbuf_r+0x1e>
 800f4ac:	2340      	movs	r3, #64	; 0x40
 800f4ae:	2000      	movs	r0, #0
 800f4b0:	6023      	str	r3, [r4, #0]
 800f4b2:	b016      	add	sp, #88	; 0x58
 800f4b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f4b8 <__smakebuf_r>:
 800f4b8:	898b      	ldrh	r3, [r1, #12]
 800f4ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4bc:	079d      	lsls	r5, r3, #30
 800f4be:	4606      	mov	r6, r0
 800f4c0:	460c      	mov	r4, r1
 800f4c2:	d507      	bpl.n	800f4d4 <__smakebuf_r+0x1c>
 800f4c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f4c8:	6023      	str	r3, [r4, #0]
 800f4ca:	6123      	str	r3, [r4, #16]
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	6163      	str	r3, [r4, #20]
 800f4d0:	b002      	add	sp, #8
 800f4d2:	bd70      	pop	{r4, r5, r6, pc}
 800f4d4:	ab01      	add	r3, sp, #4
 800f4d6:	466a      	mov	r2, sp
 800f4d8:	f7ff ffc8 	bl	800f46c <__swhatbuf_r>
 800f4dc:	9900      	ldr	r1, [sp, #0]
 800f4de:	4605      	mov	r5, r0
 800f4e0:	4630      	mov	r0, r6
 800f4e2:	f7ff fc2d 	bl	800ed40 <_malloc_r>
 800f4e6:	b948      	cbnz	r0, 800f4fc <__smakebuf_r+0x44>
 800f4e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4ec:	059a      	lsls	r2, r3, #22
 800f4ee:	d4ef      	bmi.n	800f4d0 <__smakebuf_r+0x18>
 800f4f0:	f023 0303 	bic.w	r3, r3, #3
 800f4f4:	f043 0302 	orr.w	r3, r3, #2
 800f4f8:	81a3      	strh	r3, [r4, #12]
 800f4fa:	e7e3      	b.n	800f4c4 <__smakebuf_r+0xc>
 800f4fc:	4b0d      	ldr	r3, [pc, #52]	; (800f534 <__smakebuf_r+0x7c>)
 800f4fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800f500:	89a3      	ldrh	r3, [r4, #12]
 800f502:	6020      	str	r0, [r4, #0]
 800f504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f508:	81a3      	strh	r3, [r4, #12]
 800f50a:	9b00      	ldr	r3, [sp, #0]
 800f50c:	6163      	str	r3, [r4, #20]
 800f50e:	9b01      	ldr	r3, [sp, #4]
 800f510:	6120      	str	r0, [r4, #16]
 800f512:	b15b      	cbz	r3, 800f52c <__smakebuf_r+0x74>
 800f514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f518:	4630      	mov	r0, r6
 800f51a:	f000 fc87 	bl	800fe2c <_isatty_r>
 800f51e:	b128      	cbz	r0, 800f52c <__smakebuf_r+0x74>
 800f520:	89a3      	ldrh	r3, [r4, #12]
 800f522:	f023 0303 	bic.w	r3, r3, #3
 800f526:	f043 0301 	orr.w	r3, r3, #1
 800f52a:	81a3      	strh	r3, [r4, #12]
 800f52c:	89a0      	ldrh	r0, [r4, #12]
 800f52e:	4305      	orrs	r5, r0
 800f530:	81a5      	strh	r5, [r4, #12]
 800f532:	e7cd      	b.n	800f4d0 <__smakebuf_r+0x18>
 800f534:	0800ea29 	.word	0x0800ea29

0800f538 <__malloc_lock>:
 800f538:	4801      	ldr	r0, [pc, #4]	; (800f540 <__malloc_lock+0x8>)
 800f53a:	f7ff bb6c 	b.w	800ec16 <__retarget_lock_acquire_recursive>
 800f53e:	bf00      	nop
 800f540:	200069a8 	.word	0x200069a8

0800f544 <__malloc_unlock>:
 800f544:	4801      	ldr	r0, [pc, #4]	; (800f54c <__malloc_unlock+0x8>)
 800f546:	f7ff bb67 	b.w	800ec18 <__retarget_lock_release_recursive>
 800f54a:	bf00      	nop
 800f54c:	200069a8 	.word	0x200069a8

0800f550 <__ssputs_r>:
 800f550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f554:	688e      	ldr	r6, [r1, #8]
 800f556:	429e      	cmp	r6, r3
 800f558:	4682      	mov	sl, r0
 800f55a:	460c      	mov	r4, r1
 800f55c:	4690      	mov	r8, r2
 800f55e:	461f      	mov	r7, r3
 800f560:	d838      	bhi.n	800f5d4 <__ssputs_r+0x84>
 800f562:	898a      	ldrh	r2, [r1, #12]
 800f564:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f568:	d032      	beq.n	800f5d0 <__ssputs_r+0x80>
 800f56a:	6825      	ldr	r5, [r4, #0]
 800f56c:	6909      	ldr	r1, [r1, #16]
 800f56e:	eba5 0901 	sub.w	r9, r5, r1
 800f572:	6965      	ldr	r5, [r4, #20]
 800f574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f578:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f57c:	3301      	adds	r3, #1
 800f57e:	444b      	add	r3, r9
 800f580:	106d      	asrs	r5, r5, #1
 800f582:	429d      	cmp	r5, r3
 800f584:	bf38      	it	cc
 800f586:	461d      	movcc	r5, r3
 800f588:	0553      	lsls	r3, r2, #21
 800f58a:	d531      	bpl.n	800f5f0 <__ssputs_r+0xa0>
 800f58c:	4629      	mov	r1, r5
 800f58e:	f7ff fbd7 	bl	800ed40 <_malloc_r>
 800f592:	4606      	mov	r6, r0
 800f594:	b950      	cbnz	r0, 800f5ac <__ssputs_r+0x5c>
 800f596:	230c      	movs	r3, #12
 800f598:	f8ca 3000 	str.w	r3, [sl]
 800f59c:	89a3      	ldrh	r3, [r4, #12]
 800f59e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5a2:	81a3      	strh	r3, [r4, #12]
 800f5a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5ac:	6921      	ldr	r1, [r4, #16]
 800f5ae:	464a      	mov	r2, r9
 800f5b0:	f7ff fb44 	bl	800ec3c <memcpy>
 800f5b4:	89a3      	ldrh	r3, [r4, #12]
 800f5b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f5ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5be:	81a3      	strh	r3, [r4, #12]
 800f5c0:	6126      	str	r6, [r4, #16]
 800f5c2:	6165      	str	r5, [r4, #20]
 800f5c4:	444e      	add	r6, r9
 800f5c6:	eba5 0509 	sub.w	r5, r5, r9
 800f5ca:	6026      	str	r6, [r4, #0]
 800f5cc:	60a5      	str	r5, [r4, #8]
 800f5ce:	463e      	mov	r6, r7
 800f5d0:	42be      	cmp	r6, r7
 800f5d2:	d900      	bls.n	800f5d6 <__ssputs_r+0x86>
 800f5d4:	463e      	mov	r6, r7
 800f5d6:	6820      	ldr	r0, [r4, #0]
 800f5d8:	4632      	mov	r2, r6
 800f5da:	4641      	mov	r1, r8
 800f5dc:	f000 fc36 	bl	800fe4c <memmove>
 800f5e0:	68a3      	ldr	r3, [r4, #8]
 800f5e2:	1b9b      	subs	r3, r3, r6
 800f5e4:	60a3      	str	r3, [r4, #8]
 800f5e6:	6823      	ldr	r3, [r4, #0]
 800f5e8:	4433      	add	r3, r6
 800f5ea:	6023      	str	r3, [r4, #0]
 800f5ec:	2000      	movs	r0, #0
 800f5ee:	e7db      	b.n	800f5a8 <__ssputs_r+0x58>
 800f5f0:	462a      	mov	r2, r5
 800f5f2:	f000 fc45 	bl	800fe80 <_realloc_r>
 800f5f6:	4606      	mov	r6, r0
 800f5f8:	2800      	cmp	r0, #0
 800f5fa:	d1e1      	bne.n	800f5c0 <__ssputs_r+0x70>
 800f5fc:	6921      	ldr	r1, [r4, #16]
 800f5fe:	4650      	mov	r0, sl
 800f600:	f7ff fb32 	bl	800ec68 <_free_r>
 800f604:	e7c7      	b.n	800f596 <__ssputs_r+0x46>
	...

0800f608 <_svfiprintf_r>:
 800f608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f60c:	4698      	mov	r8, r3
 800f60e:	898b      	ldrh	r3, [r1, #12]
 800f610:	061b      	lsls	r3, r3, #24
 800f612:	b09d      	sub	sp, #116	; 0x74
 800f614:	4607      	mov	r7, r0
 800f616:	460d      	mov	r5, r1
 800f618:	4614      	mov	r4, r2
 800f61a:	d50e      	bpl.n	800f63a <_svfiprintf_r+0x32>
 800f61c:	690b      	ldr	r3, [r1, #16]
 800f61e:	b963      	cbnz	r3, 800f63a <_svfiprintf_r+0x32>
 800f620:	2140      	movs	r1, #64	; 0x40
 800f622:	f7ff fb8d 	bl	800ed40 <_malloc_r>
 800f626:	6028      	str	r0, [r5, #0]
 800f628:	6128      	str	r0, [r5, #16]
 800f62a:	b920      	cbnz	r0, 800f636 <_svfiprintf_r+0x2e>
 800f62c:	230c      	movs	r3, #12
 800f62e:	603b      	str	r3, [r7, #0]
 800f630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f634:	e0d1      	b.n	800f7da <_svfiprintf_r+0x1d2>
 800f636:	2340      	movs	r3, #64	; 0x40
 800f638:	616b      	str	r3, [r5, #20]
 800f63a:	2300      	movs	r3, #0
 800f63c:	9309      	str	r3, [sp, #36]	; 0x24
 800f63e:	2320      	movs	r3, #32
 800f640:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f644:	f8cd 800c 	str.w	r8, [sp, #12]
 800f648:	2330      	movs	r3, #48	; 0x30
 800f64a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f7f4 <_svfiprintf_r+0x1ec>
 800f64e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f652:	f04f 0901 	mov.w	r9, #1
 800f656:	4623      	mov	r3, r4
 800f658:	469a      	mov	sl, r3
 800f65a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f65e:	b10a      	cbz	r2, 800f664 <_svfiprintf_r+0x5c>
 800f660:	2a25      	cmp	r2, #37	; 0x25
 800f662:	d1f9      	bne.n	800f658 <_svfiprintf_r+0x50>
 800f664:	ebba 0b04 	subs.w	fp, sl, r4
 800f668:	d00b      	beq.n	800f682 <_svfiprintf_r+0x7a>
 800f66a:	465b      	mov	r3, fp
 800f66c:	4622      	mov	r2, r4
 800f66e:	4629      	mov	r1, r5
 800f670:	4638      	mov	r0, r7
 800f672:	f7ff ff6d 	bl	800f550 <__ssputs_r>
 800f676:	3001      	adds	r0, #1
 800f678:	f000 80aa 	beq.w	800f7d0 <_svfiprintf_r+0x1c8>
 800f67c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f67e:	445a      	add	r2, fp
 800f680:	9209      	str	r2, [sp, #36]	; 0x24
 800f682:	f89a 3000 	ldrb.w	r3, [sl]
 800f686:	2b00      	cmp	r3, #0
 800f688:	f000 80a2 	beq.w	800f7d0 <_svfiprintf_r+0x1c8>
 800f68c:	2300      	movs	r3, #0
 800f68e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f696:	f10a 0a01 	add.w	sl, sl, #1
 800f69a:	9304      	str	r3, [sp, #16]
 800f69c:	9307      	str	r3, [sp, #28]
 800f69e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6a2:	931a      	str	r3, [sp, #104]	; 0x68
 800f6a4:	4654      	mov	r4, sl
 800f6a6:	2205      	movs	r2, #5
 800f6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6ac:	4851      	ldr	r0, [pc, #324]	; (800f7f4 <_svfiprintf_r+0x1ec>)
 800f6ae:	f7f0 fd97 	bl	80001e0 <memchr>
 800f6b2:	9a04      	ldr	r2, [sp, #16]
 800f6b4:	b9d8      	cbnz	r0, 800f6ee <_svfiprintf_r+0xe6>
 800f6b6:	06d0      	lsls	r0, r2, #27
 800f6b8:	bf44      	itt	mi
 800f6ba:	2320      	movmi	r3, #32
 800f6bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6c0:	0711      	lsls	r1, r2, #28
 800f6c2:	bf44      	itt	mi
 800f6c4:	232b      	movmi	r3, #43	; 0x2b
 800f6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6ca:	f89a 3000 	ldrb.w	r3, [sl]
 800f6ce:	2b2a      	cmp	r3, #42	; 0x2a
 800f6d0:	d015      	beq.n	800f6fe <_svfiprintf_r+0xf6>
 800f6d2:	9a07      	ldr	r2, [sp, #28]
 800f6d4:	4654      	mov	r4, sl
 800f6d6:	2000      	movs	r0, #0
 800f6d8:	f04f 0c0a 	mov.w	ip, #10
 800f6dc:	4621      	mov	r1, r4
 800f6de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6e2:	3b30      	subs	r3, #48	; 0x30
 800f6e4:	2b09      	cmp	r3, #9
 800f6e6:	d94e      	bls.n	800f786 <_svfiprintf_r+0x17e>
 800f6e8:	b1b0      	cbz	r0, 800f718 <_svfiprintf_r+0x110>
 800f6ea:	9207      	str	r2, [sp, #28]
 800f6ec:	e014      	b.n	800f718 <_svfiprintf_r+0x110>
 800f6ee:	eba0 0308 	sub.w	r3, r0, r8
 800f6f2:	fa09 f303 	lsl.w	r3, r9, r3
 800f6f6:	4313      	orrs	r3, r2
 800f6f8:	9304      	str	r3, [sp, #16]
 800f6fa:	46a2      	mov	sl, r4
 800f6fc:	e7d2      	b.n	800f6a4 <_svfiprintf_r+0x9c>
 800f6fe:	9b03      	ldr	r3, [sp, #12]
 800f700:	1d19      	adds	r1, r3, #4
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	9103      	str	r1, [sp, #12]
 800f706:	2b00      	cmp	r3, #0
 800f708:	bfbb      	ittet	lt
 800f70a:	425b      	neglt	r3, r3
 800f70c:	f042 0202 	orrlt.w	r2, r2, #2
 800f710:	9307      	strge	r3, [sp, #28]
 800f712:	9307      	strlt	r3, [sp, #28]
 800f714:	bfb8      	it	lt
 800f716:	9204      	strlt	r2, [sp, #16]
 800f718:	7823      	ldrb	r3, [r4, #0]
 800f71a:	2b2e      	cmp	r3, #46	; 0x2e
 800f71c:	d10c      	bne.n	800f738 <_svfiprintf_r+0x130>
 800f71e:	7863      	ldrb	r3, [r4, #1]
 800f720:	2b2a      	cmp	r3, #42	; 0x2a
 800f722:	d135      	bne.n	800f790 <_svfiprintf_r+0x188>
 800f724:	9b03      	ldr	r3, [sp, #12]
 800f726:	1d1a      	adds	r2, r3, #4
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	9203      	str	r2, [sp, #12]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	bfb8      	it	lt
 800f730:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f734:	3402      	adds	r4, #2
 800f736:	9305      	str	r3, [sp, #20]
 800f738:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f804 <_svfiprintf_r+0x1fc>
 800f73c:	7821      	ldrb	r1, [r4, #0]
 800f73e:	2203      	movs	r2, #3
 800f740:	4650      	mov	r0, sl
 800f742:	f7f0 fd4d 	bl	80001e0 <memchr>
 800f746:	b140      	cbz	r0, 800f75a <_svfiprintf_r+0x152>
 800f748:	2340      	movs	r3, #64	; 0x40
 800f74a:	eba0 000a 	sub.w	r0, r0, sl
 800f74e:	fa03 f000 	lsl.w	r0, r3, r0
 800f752:	9b04      	ldr	r3, [sp, #16]
 800f754:	4303      	orrs	r3, r0
 800f756:	3401      	adds	r4, #1
 800f758:	9304      	str	r3, [sp, #16]
 800f75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f75e:	4826      	ldr	r0, [pc, #152]	; (800f7f8 <_svfiprintf_r+0x1f0>)
 800f760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f764:	2206      	movs	r2, #6
 800f766:	f7f0 fd3b 	bl	80001e0 <memchr>
 800f76a:	2800      	cmp	r0, #0
 800f76c:	d038      	beq.n	800f7e0 <_svfiprintf_r+0x1d8>
 800f76e:	4b23      	ldr	r3, [pc, #140]	; (800f7fc <_svfiprintf_r+0x1f4>)
 800f770:	bb1b      	cbnz	r3, 800f7ba <_svfiprintf_r+0x1b2>
 800f772:	9b03      	ldr	r3, [sp, #12]
 800f774:	3307      	adds	r3, #7
 800f776:	f023 0307 	bic.w	r3, r3, #7
 800f77a:	3308      	adds	r3, #8
 800f77c:	9303      	str	r3, [sp, #12]
 800f77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f780:	4433      	add	r3, r6
 800f782:	9309      	str	r3, [sp, #36]	; 0x24
 800f784:	e767      	b.n	800f656 <_svfiprintf_r+0x4e>
 800f786:	fb0c 3202 	mla	r2, ip, r2, r3
 800f78a:	460c      	mov	r4, r1
 800f78c:	2001      	movs	r0, #1
 800f78e:	e7a5      	b.n	800f6dc <_svfiprintf_r+0xd4>
 800f790:	2300      	movs	r3, #0
 800f792:	3401      	adds	r4, #1
 800f794:	9305      	str	r3, [sp, #20]
 800f796:	4619      	mov	r1, r3
 800f798:	f04f 0c0a 	mov.w	ip, #10
 800f79c:	4620      	mov	r0, r4
 800f79e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7a2:	3a30      	subs	r2, #48	; 0x30
 800f7a4:	2a09      	cmp	r2, #9
 800f7a6:	d903      	bls.n	800f7b0 <_svfiprintf_r+0x1a8>
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d0c5      	beq.n	800f738 <_svfiprintf_r+0x130>
 800f7ac:	9105      	str	r1, [sp, #20]
 800f7ae:	e7c3      	b.n	800f738 <_svfiprintf_r+0x130>
 800f7b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7b4:	4604      	mov	r4, r0
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	e7f0      	b.n	800f79c <_svfiprintf_r+0x194>
 800f7ba:	ab03      	add	r3, sp, #12
 800f7bc:	9300      	str	r3, [sp, #0]
 800f7be:	462a      	mov	r2, r5
 800f7c0:	4b0f      	ldr	r3, [pc, #60]	; (800f800 <_svfiprintf_r+0x1f8>)
 800f7c2:	a904      	add	r1, sp, #16
 800f7c4:	4638      	mov	r0, r7
 800f7c6:	f3af 8000 	nop.w
 800f7ca:	1c42      	adds	r2, r0, #1
 800f7cc:	4606      	mov	r6, r0
 800f7ce:	d1d6      	bne.n	800f77e <_svfiprintf_r+0x176>
 800f7d0:	89ab      	ldrh	r3, [r5, #12]
 800f7d2:	065b      	lsls	r3, r3, #25
 800f7d4:	f53f af2c 	bmi.w	800f630 <_svfiprintf_r+0x28>
 800f7d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7da:	b01d      	add	sp, #116	; 0x74
 800f7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e0:	ab03      	add	r3, sp, #12
 800f7e2:	9300      	str	r3, [sp, #0]
 800f7e4:	462a      	mov	r2, r5
 800f7e6:	4b06      	ldr	r3, [pc, #24]	; (800f800 <_svfiprintf_r+0x1f8>)
 800f7e8:	a904      	add	r1, sp, #16
 800f7ea:	4638      	mov	r0, r7
 800f7ec:	f000 f9d4 	bl	800fb98 <_printf_i>
 800f7f0:	e7eb      	b.n	800f7ca <_svfiprintf_r+0x1c2>
 800f7f2:	bf00      	nop
 800f7f4:	080101e0 	.word	0x080101e0
 800f7f8:	080101ea 	.word	0x080101ea
 800f7fc:	00000000 	.word	0x00000000
 800f800:	0800f551 	.word	0x0800f551
 800f804:	080101e6 	.word	0x080101e6

0800f808 <__sfputc_r>:
 800f808:	6893      	ldr	r3, [r2, #8]
 800f80a:	3b01      	subs	r3, #1
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	b410      	push	{r4}
 800f810:	6093      	str	r3, [r2, #8]
 800f812:	da08      	bge.n	800f826 <__sfputc_r+0x1e>
 800f814:	6994      	ldr	r4, [r2, #24]
 800f816:	42a3      	cmp	r3, r4
 800f818:	db01      	blt.n	800f81e <__sfputc_r+0x16>
 800f81a:	290a      	cmp	r1, #10
 800f81c:	d103      	bne.n	800f826 <__sfputc_r+0x1e>
 800f81e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f822:	f7ff bc6d 	b.w	800f100 <__swbuf_r>
 800f826:	6813      	ldr	r3, [r2, #0]
 800f828:	1c58      	adds	r0, r3, #1
 800f82a:	6010      	str	r0, [r2, #0]
 800f82c:	7019      	strb	r1, [r3, #0]
 800f82e:	4608      	mov	r0, r1
 800f830:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f834:	4770      	bx	lr

0800f836 <__sfputs_r>:
 800f836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f838:	4606      	mov	r6, r0
 800f83a:	460f      	mov	r7, r1
 800f83c:	4614      	mov	r4, r2
 800f83e:	18d5      	adds	r5, r2, r3
 800f840:	42ac      	cmp	r4, r5
 800f842:	d101      	bne.n	800f848 <__sfputs_r+0x12>
 800f844:	2000      	movs	r0, #0
 800f846:	e007      	b.n	800f858 <__sfputs_r+0x22>
 800f848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f84c:	463a      	mov	r2, r7
 800f84e:	4630      	mov	r0, r6
 800f850:	f7ff ffda 	bl	800f808 <__sfputc_r>
 800f854:	1c43      	adds	r3, r0, #1
 800f856:	d1f3      	bne.n	800f840 <__sfputs_r+0xa>
 800f858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f85c <_vfiprintf_r>:
 800f85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f860:	460d      	mov	r5, r1
 800f862:	b09d      	sub	sp, #116	; 0x74
 800f864:	4614      	mov	r4, r2
 800f866:	4698      	mov	r8, r3
 800f868:	4606      	mov	r6, r0
 800f86a:	b118      	cbz	r0, 800f874 <_vfiprintf_r+0x18>
 800f86c:	6983      	ldr	r3, [r0, #24]
 800f86e:	b90b      	cbnz	r3, 800f874 <_vfiprintf_r+0x18>
 800f870:	f7ff f90e 	bl	800ea90 <__sinit>
 800f874:	4b89      	ldr	r3, [pc, #548]	; (800fa9c <_vfiprintf_r+0x240>)
 800f876:	429d      	cmp	r5, r3
 800f878:	d11b      	bne.n	800f8b2 <_vfiprintf_r+0x56>
 800f87a:	6875      	ldr	r5, [r6, #4]
 800f87c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f87e:	07d9      	lsls	r1, r3, #31
 800f880:	d405      	bmi.n	800f88e <_vfiprintf_r+0x32>
 800f882:	89ab      	ldrh	r3, [r5, #12]
 800f884:	059a      	lsls	r2, r3, #22
 800f886:	d402      	bmi.n	800f88e <_vfiprintf_r+0x32>
 800f888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f88a:	f7ff f9c4 	bl	800ec16 <__retarget_lock_acquire_recursive>
 800f88e:	89ab      	ldrh	r3, [r5, #12]
 800f890:	071b      	lsls	r3, r3, #28
 800f892:	d501      	bpl.n	800f898 <_vfiprintf_r+0x3c>
 800f894:	692b      	ldr	r3, [r5, #16]
 800f896:	b9eb      	cbnz	r3, 800f8d4 <_vfiprintf_r+0x78>
 800f898:	4629      	mov	r1, r5
 800f89a:	4630      	mov	r0, r6
 800f89c:	f7ff fc94 	bl	800f1c8 <__swsetup_r>
 800f8a0:	b1c0      	cbz	r0, 800f8d4 <_vfiprintf_r+0x78>
 800f8a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8a4:	07dc      	lsls	r4, r3, #31
 800f8a6:	d50e      	bpl.n	800f8c6 <_vfiprintf_r+0x6a>
 800f8a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8ac:	b01d      	add	sp, #116	; 0x74
 800f8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b2:	4b7b      	ldr	r3, [pc, #492]	; (800faa0 <_vfiprintf_r+0x244>)
 800f8b4:	429d      	cmp	r5, r3
 800f8b6:	d101      	bne.n	800f8bc <_vfiprintf_r+0x60>
 800f8b8:	68b5      	ldr	r5, [r6, #8]
 800f8ba:	e7df      	b.n	800f87c <_vfiprintf_r+0x20>
 800f8bc:	4b79      	ldr	r3, [pc, #484]	; (800faa4 <_vfiprintf_r+0x248>)
 800f8be:	429d      	cmp	r5, r3
 800f8c0:	bf08      	it	eq
 800f8c2:	68f5      	ldreq	r5, [r6, #12]
 800f8c4:	e7da      	b.n	800f87c <_vfiprintf_r+0x20>
 800f8c6:	89ab      	ldrh	r3, [r5, #12]
 800f8c8:	0598      	lsls	r0, r3, #22
 800f8ca:	d4ed      	bmi.n	800f8a8 <_vfiprintf_r+0x4c>
 800f8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8ce:	f7ff f9a3 	bl	800ec18 <__retarget_lock_release_recursive>
 800f8d2:	e7e9      	b.n	800f8a8 <_vfiprintf_r+0x4c>
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f8d8:	2320      	movs	r3, #32
 800f8da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f8de:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8e2:	2330      	movs	r3, #48	; 0x30
 800f8e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800faa8 <_vfiprintf_r+0x24c>
 800f8e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f8ec:	f04f 0901 	mov.w	r9, #1
 800f8f0:	4623      	mov	r3, r4
 800f8f2:	469a      	mov	sl, r3
 800f8f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8f8:	b10a      	cbz	r2, 800f8fe <_vfiprintf_r+0xa2>
 800f8fa:	2a25      	cmp	r2, #37	; 0x25
 800f8fc:	d1f9      	bne.n	800f8f2 <_vfiprintf_r+0x96>
 800f8fe:	ebba 0b04 	subs.w	fp, sl, r4
 800f902:	d00b      	beq.n	800f91c <_vfiprintf_r+0xc0>
 800f904:	465b      	mov	r3, fp
 800f906:	4622      	mov	r2, r4
 800f908:	4629      	mov	r1, r5
 800f90a:	4630      	mov	r0, r6
 800f90c:	f7ff ff93 	bl	800f836 <__sfputs_r>
 800f910:	3001      	adds	r0, #1
 800f912:	f000 80aa 	beq.w	800fa6a <_vfiprintf_r+0x20e>
 800f916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f918:	445a      	add	r2, fp
 800f91a:	9209      	str	r2, [sp, #36]	; 0x24
 800f91c:	f89a 3000 	ldrb.w	r3, [sl]
 800f920:	2b00      	cmp	r3, #0
 800f922:	f000 80a2 	beq.w	800fa6a <_vfiprintf_r+0x20e>
 800f926:	2300      	movs	r3, #0
 800f928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f92c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f930:	f10a 0a01 	add.w	sl, sl, #1
 800f934:	9304      	str	r3, [sp, #16]
 800f936:	9307      	str	r3, [sp, #28]
 800f938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f93c:	931a      	str	r3, [sp, #104]	; 0x68
 800f93e:	4654      	mov	r4, sl
 800f940:	2205      	movs	r2, #5
 800f942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f946:	4858      	ldr	r0, [pc, #352]	; (800faa8 <_vfiprintf_r+0x24c>)
 800f948:	f7f0 fc4a 	bl	80001e0 <memchr>
 800f94c:	9a04      	ldr	r2, [sp, #16]
 800f94e:	b9d8      	cbnz	r0, 800f988 <_vfiprintf_r+0x12c>
 800f950:	06d1      	lsls	r1, r2, #27
 800f952:	bf44      	itt	mi
 800f954:	2320      	movmi	r3, #32
 800f956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f95a:	0713      	lsls	r3, r2, #28
 800f95c:	bf44      	itt	mi
 800f95e:	232b      	movmi	r3, #43	; 0x2b
 800f960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f964:	f89a 3000 	ldrb.w	r3, [sl]
 800f968:	2b2a      	cmp	r3, #42	; 0x2a
 800f96a:	d015      	beq.n	800f998 <_vfiprintf_r+0x13c>
 800f96c:	9a07      	ldr	r2, [sp, #28]
 800f96e:	4654      	mov	r4, sl
 800f970:	2000      	movs	r0, #0
 800f972:	f04f 0c0a 	mov.w	ip, #10
 800f976:	4621      	mov	r1, r4
 800f978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f97c:	3b30      	subs	r3, #48	; 0x30
 800f97e:	2b09      	cmp	r3, #9
 800f980:	d94e      	bls.n	800fa20 <_vfiprintf_r+0x1c4>
 800f982:	b1b0      	cbz	r0, 800f9b2 <_vfiprintf_r+0x156>
 800f984:	9207      	str	r2, [sp, #28]
 800f986:	e014      	b.n	800f9b2 <_vfiprintf_r+0x156>
 800f988:	eba0 0308 	sub.w	r3, r0, r8
 800f98c:	fa09 f303 	lsl.w	r3, r9, r3
 800f990:	4313      	orrs	r3, r2
 800f992:	9304      	str	r3, [sp, #16]
 800f994:	46a2      	mov	sl, r4
 800f996:	e7d2      	b.n	800f93e <_vfiprintf_r+0xe2>
 800f998:	9b03      	ldr	r3, [sp, #12]
 800f99a:	1d19      	adds	r1, r3, #4
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	9103      	str	r1, [sp, #12]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	bfbb      	ittet	lt
 800f9a4:	425b      	neglt	r3, r3
 800f9a6:	f042 0202 	orrlt.w	r2, r2, #2
 800f9aa:	9307      	strge	r3, [sp, #28]
 800f9ac:	9307      	strlt	r3, [sp, #28]
 800f9ae:	bfb8      	it	lt
 800f9b0:	9204      	strlt	r2, [sp, #16]
 800f9b2:	7823      	ldrb	r3, [r4, #0]
 800f9b4:	2b2e      	cmp	r3, #46	; 0x2e
 800f9b6:	d10c      	bne.n	800f9d2 <_vfiprintf_r+0x176>
 800f9b8:	7863      	ldrb	r3, [r4, #1]
 800f9ba:	2b2a      	cmp	r3, #42	; 0x2a
 800f9bc:	d135      	bne.n	800fa2a <_vfiprintf_r+0x1ce>
 800f9be:	9b03      	ldr	r3, [sp, #12]
 800f9c0:	1d1a      	adds	r2, r3, #4
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	9203      	str	r2, [sp, #12]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	bfb8      	it	lt
 800f9ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f9ce:	3402      	adds	r4, #2
 800f9d0:	9305      	str	r3, [sp, #20]
 800f9d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fab8 <_vfiprintf_r+0x25c>
 800f9d6:	7821      	ldrb	r1, [r4, #0]
 800f9d8:	2203      	movs	r2, #3
 800f9da:	4650      	mov	r0, sl
 800f9dc:	f7f0 fc00 	bl	80001e0 <memchr>
 800f9e0:	b140      	cbz	r0, 800f9f4 <_vfiprintf_r+0x198>
 800f9e2:	2340      	movs	r3, #64	; 0x40
 800f9e4:	eba0 000a 	sub.w	r0, r0, sl
 800f9e8:	fa03 f000 	lsl.w	r0, r3, r0
 800f9ec:	9b04      	ldr	r3, [sp, #16]
 800f9ee:	4303      	orrs	r3, r0
 800f9f0:	3401      	adds	r4, #1
 800f9f2:	9304      	str	r3, [sp, #16]
 800f9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9f8:	482c      	ldr	r0, [pc, #176]	; (800faac <_vfiprintf_r+0x250>)
 800f9fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f9fe:	2206      	movs	r2, #6
 800fa00:	f7f0 fbee 	bl	80001e0 <memchr>
 800fa04:	2800      	cmp	r0, #0
 800fa06:	d03f      	beq.n	800fa88 <_vfiprintf_r+0x22c>
 800fa08:	4b29      	ldr	r3, [pc, #164]	; (800fab0 <_vfiprintf_r+0x254>)
 800fa0a:	bb1b      	cbnz	r3, 800fa54 <_vfiprintf_r+0x1f8>
 800fa0c:	9b03      	ldr	r3, [sp, #12]
 800fa0e:	3307      	adds	r3, #7
 800fa10:	f023 0307 	bic.w	r3, r3, #7
 800fa14:	3308      	adds	r3, #8
 800fa16:	9303      	str	r3, [sp, #12]
 800fa18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa1a:	443b      	add	r3, r7
 800fa1c:	9309      	str	r3, [sp, #36]	; 0x24
 800fa1e:	e767      	b.n	800f8f0 <_vfiprintf_r+0x94>
 800fa20:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa24:	460c      	mov	r4, r1
 800fa26:	2001      	movs	r0, #1
 800fa28:	e7a5      	b.n	800f976 <_vfiprintf_r+0x11a>
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	3401      	adds	r4, #1
 800fa2e:	9305      	str	r3, [sp, #20]
 800fa30:	4619      	mov	r1, r3
 800fa32:	f04f 0c0a 	mov.w	ip, #10
 800fa36:	4620      	mov	r0, r4
 800fa38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa3c:	3a30      	subs	r2, #48	; 0x30
 800fa3e:	2a09      	cmp	r2, #9
 800fa40:	d903      	bls.n	800fa4a <_vfiprintf_r+0x1ee>
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d0c5      	beq.n	800f9d2 <_vfiprintf_r+0x176>
 800fa46:	9105      	str	r1, [sp, #20]
 800fa48:	e7c3      	b.n	800f9d2 <_vfiprintf_r+0x176>
 800fa4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa4e:	4604      	mov	r4, r0
 800fa50:	2301      	movs	r3, #1
 800fa52:	e7f0      	b.n	800fa36 <_vfiprintf_r+0x1da>
 800fa54:	ab03      	add	r3, sp, #12
 800fa56:	9300      	str	r3, [sp, #0]
 800fa58:	462a      	mov	r2, r5
 800fa5a:	4b16      	ldr	r3, [pc, #88]	; (800fab4 <_vfiprintf_r+0x258>)
 800fa5c:	a904      	add	r1, sp, #16
 800fa5e:	4630      	mov	r0, r6
 800fa60:	f3af 8000 	nop.w
 800fa64:	4607      	mov	r7, r0
 800fa66:	1c78      	adds	r0, r7, #1
 800fa68:	d1d6      	bne.n	800fa18 <_vfiprintf_r+0x1bc>
 800fa6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa6c:	07d9      	lsls	r1, r3, #31
 800fa6e:	d405      	bmi.n	800fa7c <_vfiprintf_r+0x220>
 800fa70:	89ab      	ldrh	r3, [r5, #12]
 800fa72:	059a      	lsls	r2, r3, #22
 800fa74:	d402      	bmi.n	800fa7c <_vfiprintf_r+0x220>
 800fa76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa78:	f7ff f8ce 	bl	800ec18 <__retarget_lock_release_recursive>
 800fa7c:	89ab      	ldrh	r3, [r5, #12]
 800fa7e:	065b      	lsls	r3, r3, #25
 800fa80:	f53f af12 	bmi.w	800f8a8 <_vfiprintf_r+0x4c>
 800fa84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa86:	e711      	b.n	800f8ac <_vfiprintf_r+0x50>
 800fa88:	ab03      	add	r3, sp, #12
 800fa8a:	9300      	str	r3, [sp, #0]
 800fa8c:	462a      	mov	r2, r5
 800fa8e:	4b09      	ldr	r3, [pc, #36]	; (800fab4 <_vfiprintf_r+0x258>)
 800fa90:	a904      	add	r1, sp, #16
 800fa92:	4630      	mov	r0, r6
 800fa94:	f000 f880 	bl	800fb98 <_printf_i>
 800fa98:	e7e4      	b.n	800fa64 <_vfiprintf_r+0x208>
 800fa9a:	bf00      	nop
 800fa9c:	0801019c 	.word	0x0801019c
 800faa0:	080101bc 	.word	0x080101bc
 800faa4:	0801017c 	.word	0x0801017c
 800faa8:	080101e0 	.word	0x080101e0
 800faac:	080101ea 	.word	0x080101ea
 800fab0:	00000000 	.word	0x00000000
 800fab4:	0800f837 	.word	0x0800f837
 800fab8:	080101e6 	.word	0x080101e6

0800fabc <_printf_common>:
 800fabc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fac0:	4616      	mov	r6, r2
 800fac2:	4699      	mov	r9, r3
 800fac4:	688a      	ldr	r2, [r1, #8]
 800fac6:	690b      	ldr	r3, [r1, #16]
 800fac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800facc:	4293      	cmp	r3, r2
 800face:	bfb8      	it	lt
 800fad0:	4613      	movlt	r3, r2
 800fad2:	6033      	str	r3, [r6, #0]
 800fad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fad8:	4607      	mov	r7, r0
 800fada:	460c      	mov	r4, r1
 800fadc:	b10a      	cbz	r2, 800fae2 <_printf_common+0x26>
 800fade:	3301      	adds	r3, #1
 800fae0:	6033      	str	r3, [r6, #0]
 800fae2:	6823      	ldr	r3, [r4, #0]
 800fae4:	0699      	lsls	r1, r3, #26
 800fae6:	bf42      	ittt	mi
 800fae8:	6833      	ldrmi	r3, [r6, #0]
 800faea:	3302      	addmi	r3, #2
 800faec:	6033      	strmi	r3, [r6, #0]
 800faee:	6825      	ldr	r5, [r4, #0]
 800faf0:	f015 0506 	ands.w	r5, r5, #6
 800faf4:	d106      	bne.n	800fb04 <_printf_common+0x48>
 800faf6:	f104 0a19 	add.w	sl, r4, #25
 800fafa:	68e3      	ldr	r3, [r4, #12]
 800fafc:	6832      	ldr	r2, [r6, #0]
 800fafe:	1a9b      	subs	r3, r3, r2
 800fb00:	42ab      	cmp	r3, r5
 800fb02:	dc26      	bgt.n	800fb52 <_printf_common+0x96>
 800fb04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb08:	1e13      	subs	r3, r2, #0
 800fb0a:	6822      	ldr	r2, [r4, #0]
 800fb0c:	bf18      	it	ne
 800fb0e:	2301      	movne	r3, #1
 800fb10:	0692      	lsls	r2, r2, #26
 800fb12:	d42b      	bmi.n	800fb6c <_printf_common+0xb0>
 800fb14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb18:	4649      	mov	r1, r9
 800fb1a:	4638      	mov	r0, r7
 800fb1c:	47c0      	blx	r8
 800fb1e:	3001      	adds	r0, #1
 800fb20:	d01e      	beq.n	800fb60 <_printf_common+0xa4>
 800fb22:	6823      	ldr	r3, [r4, #0]
 800fb24:	68e5      	ldr	r5, [r4, #12]
 800fb26:	6832      	ldr	r2, [r6, #0]
 800fb28:	f003 0306 	and.w	r3, r3, #6
 800fb2c:	2b04      	cmp	r3, #4
 800fb2e:	bf08      	it	eq
 800fb30:	1aad      	subeq	r5, r5, r2
 800fb32:	68a3      	ldr	r3, [r4, #8]
 800fb34:	6922      	ldr	r2, [r4, #16]
 800fb36:	bf0c      	ite	eq
 800fb38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb3c:	2500      	movne	r5, #0
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	bfc4      	itt	gt
 800fb42:	1a9b      	subgt	r3, r3, r2
 800fb44:	18ed      	addgt	r5, r5, r3
 800fb46:	2600      	movs	r6, #0
 800fb48:	341a      	adds	r4, #26
 800fb4a:	42b5      	cmp	r5, r6
 800fb4c:	d11a      	bne.n	800fb84 <_printf_common+0xc8>
 800fb4e:	2000      	movs	r0, #0
 800fb50:	e008      	b.n	800fb64 <_printf_common+0xa8>
 800fb52:	2301      	movs	r3, #1
 800fb54:	4652      	mov	r2, sl
 800fb56:	4649      	mov	r1, r9
 800fb58:	4638      	mov	r0, r7
 800fb5a:	47c0      	blx	r8
 800fb5c:	3001      	adds	r0, #1
 800fb5e:	d103      	bne.n	800fb68 <_printf_common+0xac>
 800fb60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb68:	3501      	adds	r5, #1
 800fb6a:	e7c6      	b.n	800fafa <_printf_common+0x3e>
 800fb6c:	18e1      	adds	r1, r4, r3
 800fb6e:	1c5a      	adds	r2, r3, #1
 800fb70:	2030      	movs	r0, #48	; 0x30
 800fb72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fb76:	4422      	add	r2, r4
 800fb78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fb7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fb80:	3302      	adds	r3, #2
 800fb82:	e7c7      	b.n	800fb14 <_printf_common+0x58>
 800fb84:	2301      	movs	r3, #1
 800fb86:	4622      	mov	r2, r4
 800fb88:	4649      	mov	r1, r9
 800fb8a:	4638      	mov	r0, r7
 800fb8c:	47c0      	blx	r8
 800fb8e:	3001      	adds	r0, #1
 800fb90:	d0e6      	beq.n	800fb60 <_printf_common+0xa4>
 800fb92:	3601      	adds	r6, #1
 800fb94:	e7d9      	b.n	800fb4a <_printf_common+0x8e>
	...

0800fb98 <_printf_i>:
 800fb98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb9c:	7e0f      	ldrb	r7, [r1, #24]
 800fb9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fba0:	2f78      	cmp	r7, #120	; 0x78
 800fba2:	4691      	mov	r9, r2
 800fba4:	4680      	mov	r8, r0
 800fba6:	460c      	mov	r4, r1
 800fba8:	469a      	mov	sl, r3
 800fbaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fbae:	d807      	bhi.n	800fbc0 <_printf_i+0x28>
 800fbb0:	2f62      	cmp	r7, #98	; 0x62
 800fbb2:	d80a      	bhi.n	800fbca <_printf_i+0x32>
 800fbb4:	2f00      	cmp	r7, #0
 800fbb6:	f000 80d8 	beq.w	800fd6a <_printf_i+0x1d2>
 800fbba:	2f58      	cmp	r7, #88	; 0x58
 800fbbc:	f000 80a3 	beq.w	800fd06 <_printf_i+0x16e>
 800fbc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fbc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fbc8:	e03a      	b.n	800fc40 <_printf_i+0xa8>
 800fbca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fbce:	2b15      	cmp	r3, #21
 800fbd0:	d8f6      	bhi.n	800fbc0 <_printf_i+0x28>
 800fbd2:	a101      	add	r1, pc, #4	; (adr r1, 800fbd8 <_printf_i+0x40>)
 800fbd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fbd8:	0800fc31 	.word	0x0800fc31
 800fbdc:	0800fc45 	.word	0x0800fc45
 800fbe0:	0800fbc1 	.word	0x0800fbc1
 800fbe4:	0800fbc1 	.word	0x0800fbc1
 800fbe8:	0800fbc1 	.word	0x0800fbc1
 800fbec:	0800fbc1 	.word	0x0800fbc1
 800fbf0:	0800fc45 	.word	0x0800fc45
 800fbf4:	0800fbc1 	.word	0x0800fbc1
 800fbf8:	0800fbc1 	.word	0x0800fbc1
 800fbfc:	0800fbc1 	.word	0x0800fbc1
 800fc00:	0800fbc1 	.word	0x0800fbc1
 800fc04:	0800fd51 	.word	0x0800fd51
 800fc08:	0800fc75 	.word	0x0800fc75
 800fc0c:	0800fd33 	.word	0x0800fd33
 800fc10:	0800fbc1 	.word	0x0800fbc1
 800fc14:	0800fbc1 	.word	0x0800fbc1
 800fc18:	0800fd73 	.word	0x0800fd73
 800fc1c:	0800fbc1 	.word	0x0800fbc1
 800fc20:	0800fc75 	.word	0x0800fc75
 800fc24:	0800fbc1 	.word	0x0800fbc1
 800fc28:	0800fbc1 	.word	0x0800fbc1
 800fc2c:	0800fd3b 	.word	0x0800fd3b
 800fc30:	682b      	ldr	r3, [r5, #0]
 800fc32:	1d1a      	adds	r2, r3, #4
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	602a      	str	r2, [r5, #0]
 800fc38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc40:	2301      	movs	r3, #1
 800fc42:	e0a3      	b.n	800fd8c <_printf_i+0x1f4>
 800fc44:	6820      	ldr	r0, [r4, #0]
 800fc46:	6829      	ldr	r1, [r5, #0]
 800fc48:	0606      	lsls	r6, r0, #24
 800fc4a:	f101 0304 	add.w	r3, r1, #4
 800fc4e:	d50a      	bpl.n	800fc66 <_printf_i+0xce>
 800fc50:	680e      	ldr	r6, [r1, #0]
 800fc52:	602b      	str	r3, [r5, #0]
 800fc54:	2e00      	cmp	r6, #0
 800fc56:	da03      	bge.n	800fc60 <_printf_i+0xc8>
 800fc58:	232d      	movs	r3, #45	; 0x2d
 800fc5a:	4276      	negs	r6, r6
 800fc5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc60:	485e      	ldr	r0, [pc, #376]	; (800fddc <_printf_i+0x244>)
 800fc62:	230a      	movs	r3, #10
 800fc64:	e019      	b.n	800fc9a <_printf_i+0x102>
 800fc66:	680e      	ldr	r6, [r1, #0]
 800fc68:	602b      	str	r3, [r5, #0]
 800fc6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fc6e:	bf18      	it	ne
 800fc70:	b236      	sxthne	r6, r6
 800fc72:	e7ef      	b.n	800fc54 <_printf_i+0xbc>
 800fc74:	682b      	ldr	r3, [r5, #0]
 800fc76:	6820      	ldr	r0, [r4, #0]
 800fc78:	1d19      	adds	r1, r3, #4
 800fc7a:	6029      	str	r1, [r5, #0]
 800fc7c:	0601      	lsls	r1, r0, #24
 800fc7e:	d501      	bpl.n	800fc84 <_printf_i+0xec>
 800fc80:	681e      	ldr	r6, [r3, #0]
 800fc82:	e002      	b.n	800fc8a <_printf_i+0xf2>
 800fc84:	0646      	lsls	r6, r0, #25
 800fc86:	d5fb      	bpl.n	800fc80 <_printf_i+0xe8>
 800fc88:	881e      	ldrh	r6, [r3, #0]
 800fc8a:	4854      	ldr	r0, [pc, #336]	; (800fddc <_printf_i+0x244>)
 800fc8c:	2f6f      	cmp	r7, #111	; 0x6f
 800fc8e:	bf0c      	ite	eq
 800fc90:	2308      	moveq	r3, #8
 800fc92:	230a      	movne	r3, #10
 800fc94:	2100      	movs	r1, #0
 800fc96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fc9a:	6865      	ldr	r5, [r4, #4]
 800fc9c:	60a5      	str	r5, [r4, #8]
 800fc9e:	2d00      	cmp	r5, #0
 800fca0:	bfa2      	ittt	ge
 800fca2:	6821      	ldrge	r1, [r4, #0]
 800fca4:	f021 0104 	bicge.w	r1, r1, #4
 800fca8:	6021      	strge	r1, [r4, #0]
 800fcaa:	b90e      	cbnz	r6, 800fcb0 <_printf_i+0x118>
 800fcac:	2d00      	cmp	r5, #0
 800fcae:	d04d      	beq.n	800fd4c <_printf_i+0x1b4>
 800fcb0:	4615      	mov	r5, r2
 800fcb2:	fbb6 f1f3 	udiv	r1, r6, r3
 800fcb6:	fb03 6711 	mls	r7, r3, r1, r6
 800fcba:	5dc7      	ldrb	r7, [r0, r7]
 800fcbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fcc0:	4637      	mov	r7, r6
 800fcc2:	42bb      	cmp	r3, r7
 800fcc4:	460e      	mov	r6, r1
 800fcc6:	d9f4      	bls.n	800fcb2 <_printf_i+0x11a>
 800fcc8:	2b08      	cmp	r3, #8
 800fcca:	d10b      	bne.n	800fce4 <_printf_i+0x14c>
 800fccc:	6823      	ldr	r3, [r4, #0]
 800fcce:	07de      	lsls	r6, r3, #31
 800fcd0:	d508      	bpl.n	800fce4 <_printf_i+0x14c>
 800fcd2:	6923      	ldr	r3, [r4, #16]
 800fcd4:	6861      	ldr	r1, [r4, #4]
 800fcd6:	4299      	cmp	r1, r3
 800fcd8:	bfde      	ittt	le
 800fcda:	2330      	movle	r3, #48	; 0x30
 800fcdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fce0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fce4:	1b52      	subs	r2, r2, r5
 800fce6:	6122      	str	r2, [r4, #16]
 800fce8:	f8cd a000 	str.w	sl, [sp]
 800fcec:	464b      	mov	r3, r9
 800fcee:	aa03      	add	r2, sp, #12
 800fcf0:	4621      	mov	r1, r4
 800fcf2:	4640      	mov	r0, r8
 800fcf4:	f7ff fee2 	bl	800fabc <_printf_common>
 800fcf8:	3001      	adds	r0, #1
 800fcfa:	d14c      	bne.n	800fd96 <_printf_i+0x1fe>
 800fcfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd00:	b004      	add	sp, #16
 800fd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd06:	4835      	ldr	r0, [pc, #212]	; (800fddc <_printf_i+0x244>)
 800fd08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fd0c:	6829      	ldr	r1, [r5, #0]
 800fd0e:	6823      	ldr	r3, [r4, #0]
 800fd10:	f851 6b04 	ldr.w	r6, [r1], #4
 800fd14:	6029      	str	r1, [r5, #0]
 800fd16:	061d      	lsls	r5, r3, #24
 800fd18:	d514      	bpl.n	800fd44 <_printf_i+0x1ac>
 800fd1a:	07df      	lsls	r7, r3, #31
 800fd1c:	bf44      	itt	mi
 800fd1e:	f043 0320 	orrmi.w	r3, r3, #32
 800fd22:	6023      	strmi	r3, [r4, #0]
 800fd24:	b91e      	cbnz	r6, 800fd2e <_printf_i+0x196>
 800fd26:	6823      	ldr	r3, [r4, #0]
 800fd28:	f023 0320 	bic.w	r3, r3, #32
 800fd2c:	6023      	str	r3, [r4, #0]
 800fd2e:	2310      	movs	r3, #16
 800fd30:	e7b0      	b.n	800fc94 <_printf_i+0xfc>
 800fd32:	6823      	ldr	r3, [r4, #0]
 800fd34:	f043 0320 	orr.w	r3, r3, #32
 800fd38:	6023      	str	r3, [r4, #0]
 800fd3a:	2378      	movs	r3, #120	; 0x78
 800fd3c:	4828      	ldr	r0, [pc, #160]	; (800fde0 <_printf_i+0x248>)
 800fd3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fd42:	e7e3      	b.n	800fd0c <_printf_i+0x174>
 800fd44:	0659      	lsls	r1, r3, #25
 800fd46:	bf48      	it	mi
 800fd48:	b2b6      	uxthmi	r6, r6
 800fd4a:	e7e6      	b.n	800fd1a <_printf_i+0x182>
 800fd4c:	4615      	mov	r5, r2
 800fd4e:	e7bb      	b.n	800fcc8 <_printf_i+0x130>
 800fd50:	682b      	ldr	r3, [r5, #0]
 800fd52:	6826      	ldr	r6, [r4, #0]
 800fd54:	6961      	ldr	r1, [r4, #20]
 800fd56:	1d18      	adds	r0, r3, #4
 800fd58:	6028      	str	r0, [r5, #0]
 800fd5a:	0635      	lsls	r5, r6, #24
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	d501      	bpl.n	800fd64 <_printf_i+0x1cc>
 800fd60:	6019      	str	r1, [r3, #0]
 800fd62:	e002      	b.n	800fd6a <_printf_i+0x1d2>
 800fd64:	0670      	lsls	r0, r6, #25
 800fd66:	d5fb      	bpl.n	800fd60 <_printf_i+0x1c8>
 800fd68:	8019      	strh	r1, [r3, #0]
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	6123      	str	r3, [r4, #16]
 800fd6e:	4615      	mov	r5, r2
 800fd70:	e7ba      	b.n	800fce8 <_printf_i+0x150>
 800fd72:	682b      	ldr	r3, [r5, #0]
 800fd74:	1d1a      	adds	r2, r3, #4
 800fd76:	602a      	str	r2, [r5, #0]
 800fd78:	681d      	ldr	r5, [r3, #0]
 800fd7a:	6862      	ldr	r2, [r4, #4]
 800fd7c:	2100      	movs	r1, #0
 800fd7e:	4628      	mov	r0, r5
 800fd80:	f7f0 fa2e 	bl	80001e0 <memchr>
 800fd84:	b108      	cbz	r0, 800fd8a <_printf_i+0x1f2>
 800fd86:	1b40      	subs	r0, r0, r5
 800fd88:	6060      	str	r0, [r4, #4]
 800fd8a:	6863      	ldr	r3, [r4, #4]
 800fd8c:	6123      	str	r3, [r4, #16]
 800fd8e:	2300      	movs	r3, #0
 800fd90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd94:	e7a8      	b.n	800fce8 <_printf_i+0x150>
 800fd96:	6923      	ldr	r3, [r4, #16]
 800fd98:	462a      	mov	r2, r5
 800fd9a:	4649      	mov	r1, r9
 800fd9c:	4640      	mov	r0, r8
 800fd9e:	47d0      	blx	sl
 800fda0:	3001      	adds	r0, #1
 800fda2:	d0ab      	beq.n	800fcfc <_printf_i+0x164>
 800fda4:	6823      	ldr	r3, [r4, #0]
 800fda6:	079b      	lsls	r3, r3, #30
 800fda8:	d413      	bmi.n	800fdd2 <_printf_i+0x23a>
 800fdaa:	68e0      	ldr	r0, [r4, #12]
 800fdac:	9b03      	ldr	r3, [sp, #12]
 800fdae:	4298      	cmp	r0, r3
 800fdb0:	bfb8      	it	lt
 800fdb2:	4618      	movlt	r0, r3
 800fdb4:	e7a4      	b.n	800fd00 <_printf_i+0x168>
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	4632      	mov	r2, r6
 800fdba:	4649      	mov	r1, r9
 800fdbc:	4640      	mov	r0, r8
 800fdbe:	47d0      	blx	sl
 800fdc0:	3001      	adds	r0, #1
 800fdc2:	d09b      	beq.n	800fcfc <_printf_i+0x164>
 800fdc4:	3501      	adds	r5, #1
 800fdc6:	68e3      	ldr	r3, [r4, #12]
 800fdc8:	9903      	ldr	r1, [sp, #12]
 800fdca:	1a5b      	subs	r3, r3, r1
 800fdcc:	42ab      	cmp	r3, r5
 800fdce:	dcf2      	bgt.n	800fdb6 <_printf_i+0x21e>
 800fdd0:	e7eb      	b.n	800fdaa <_printf_i+0x212>
 800fdd2:	2500      	movs	r5, #0
 800fdd4:	f104 0619 	add.w	r6, r4, #25
 800fdd8:	e7f5      	b.n	800fdc6 <_printf_i+0x22e>
 800fdda:	bf00      	nop
 800fddc:	080101f1 	.word	0x080101f1
 800fde0:	08010202 	.word	0x08010202

0800fde4 <_read_r>:
 800fde4:	b538      	push	{r3, r4, r5, lr}
 800fde6:	4d07      	ldr	r5, [pc, #28]	; (800fe04 <_read_r+0x20>)
 800fde8:	4604      	mov	r4, r0
 800fdea:	4608      	mov	r0, r1
 800fdec:	4611      	mov	r1, r2
 800fdee:	2200      	movs	r2, #0
 800fdf0:	602a      	str	r2, [r5, #0]
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	f7f0 ffc6 	bl	8000d84 <_read>
 800fdf8:	1c43      	adds	r3, r0, #1
 800fdfa:	d102      	bne.n	800fe02 <_read_r+0x1e>
 800fdfc:	682b      	ldr	r3, [r5, #0]
 800fdfe:	b103      	cbz	r3, 800fe02 <_read_r+0x1e>
 800fe00:	6023      	str	r3, [r4, #0]
 800fe02:	bd38      	pop	{r3, r4, r5, pc}
 800fe04:	200069b4 	.word	0x200069b4

0800fe08 <_fstat_r>:
 800fe08:	b538      	push	{r3, r4, r5, lr}
 800fe0a:	4d07      	ldr	r5, [pc, #28]	; (800fe28 <_fstat_r+0x20>)
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	4604      	mov	r4, r0
 800fe10:	4608      	mov	r0, r1
 800fe12:	4611      	mov	r1, r2
 800fe14:	602b      	str	r3, [r5, #0]
 800fe16:	f7f0 ffde 	bl	8000dd6 <_fstat>
 800fe1a:	1c43      	adds	r3, r0, #1
 800fe1c:	d102      	bne.n	800fe24 <_fstat_r+0x1c>
 800fe1e:	682b      	ldr	r3, [r5, #0]
 800fe20:	b103      	cbz	r3, 800fe24 <_fstat_r+0x1c>
 800fe22:	6023      	str	r3, [r4, #0]
 800fe24:	bd38      	pop	{r3, r4, r5, pc}
 800fe26:	bf00      	nop
 800fe28:	200069b4 	.word	0x200069b4

0800fe2c <_isatty_r>:
 800fe2c:	b538      	push	{r3, r4, r5, lr}
 800fe2e:	4d06      	ldr	r5, [pc, #24]	; (800fe48 <_isatty_r+0x1c>)
 800fe30:	2300      	movs	r3, #0
 800fe32:	4604      	mov	r4, r0
 800fe34:	4608      	mov	r0, r1
 800fe36:	602b      	str	r3, [r5, #0]
 800fe38:	f7f0 ffdd 	bl	8000df6 <_isatty>
 800fe3c:	1c43      	adds	r3, r0, #1
 800fe3e:	d102      	bne.n	800fe46 <_isatty_r+0x1a>
 800fe40:	682b      	ldr	r3, [r5, #0]
 800fe42:	b103      	cbz	r3, 800fe46 <_isatty_r+0x1a>
 800fe44:	6023      	str	r3, [r4, #0]
 800fe46:	bd38      	pop	{r3, r4, r5, pc}
 800fe48:	200069b4 	.word	0x200069b4

0800fe4c <memmove>:
 800fe4c:	4288      	cmp	r0, r1
 800fe4e:	b510      	push	{r4, lr}
 800fe50:	eb01 0402 	add.w	r4, r1, r2
 800fe54:	d902      	bls.n	800fe5c <memmove+0x10>
 800fe56:	4284      	cmp	r4, r0
 800fe58:	4623      	mov	r3, r4
 800fe5a:	d807      	bhi.n	800fe6c <memmove+0x20>
 800fe5c:	1e43      	subs	r3, r0, #1
 800fe5e:	42a1      	cmp	r1, r4
 800fe60:	d008      	beq.n	800fe74 <memmove+0x28>
 800fe62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe6a:	e7f8      	b.n	800fe5e <memmove+0x12>
 800fe6c:	4402      	add	r2, r0
 800fe6e:	4601      	mov	r1, r0
 800fe70:	428a      	cmp	r2, r1
 800fe72:	d100      	bne.n	800fe76 <memmove+0x2a>
 800fe74:	bd10      	pop	{r4, pc}
 800fe76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe7e:	e7f7      	b.n	800fe70 <memmove+0x24>

0800fe80 <_realloc_r>:
 800fe80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe84:	4680      	mov	r8, r0
 800fe86:	4614      	mov	r4, r2
 800fe88:	460e      	mov	r6, r1
 800fe8a:	b921      	cbnz	r1, 800fe96 <_realloc_r+0x16>
 800fe8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe90:	4611      	mov	r1, r2
 800fe92:	f7fe bf55 	b.w	800ed40 <_malloc_r>
 800fe96:	b92a      	cbnz	r2, 800fea4 <_realloc_r+0x24>
 800fe98:	f7fe fee6 	bl	800ec68 <_free_r>
 800fe9c:	4625      	mov	r5, r4
 800fe9e:	4628      	mov	r0, r5
 800fea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fea4:	f000 f81b 	bl	800fede <_malloc_usable_size_r>
 800fea8:	4284      	cmp	r4, r0
 800feaa:	4607      	mov	r7, r0
 800feac:	d802      	bhi.n	800feb4 <_realloc_r+0x34>
 800feae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800feb2:	d812      	bhi.n	800feda <_realloc_r+0x5a>
 800feb4:	4621      	mov	r1, r4
 800feb6:	4640      	mov	r0, r8
 800feb8:	f7fe ff42 	bl	800ed40 <_malloc_r>
 800febc:	4605      	mov	r5, r0
 800febe:	2800      	cmp	r0, #0
 800fec0:	d0ed      	beq.n	800fe9e <_realloc_r+0x1e>
 800fec2:	42bc      	cmp	r4, r7
 800fec4:	4622      	mov	r2, r4
 800fec6:	4631      	mov	r1, r6
 800fec8:	bf28      	it	cs
 800feca:	463a      	movcs	r2, r7
 800fecc:	f7fe feb6 	bl	800ec3c <memcpy>
 800fed0:	4631      	mov	r1, r6
 800fed2:	4640      	mov	r0, r8
 800fed4:	f7fe fec8 	bl	800ec68 <_free_r>
 800fed8:	e7e1      	b.n	800fe9e <_realloc_r+0x1e>
 800feda:	4635      	mov	r5, r6
 800fedc:	e7df      	b.n	800fe9e <_realloc_r+0x1e>

0800fede <_malloc_usable_size_r>:
 800fede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fee2:	1f18      	subs	r0, r3, #4
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	bfbc      	itt	lt
 800fee8:	580b      	ldrlt	r3, [r1, r0]
 800feea:	18c0      	addlt	r0, r0, r3
 800feec:	4770      	bx	lr
	...

0800fef0 <_init>:
 800fef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fef2:	bf00      	nop
 800fef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fef6:	bc08      	pop	{r3}
 800fef8:	469e      	mov	lr, r3
 800fefa:	4770      	bx	lr

0800fefc <_fini>:
 800fefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fefe:	bf00      	nop
 800ff00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff02:	bc08      	pop	{r3}
 800ff04:	469e      	mov	lr, r3
 800ff06:	4770      	bx	lr
