
Keyboart_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08007c28  08007c28  00017c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cf8  08007cf8  000201bc  2**0
                  CONTENTS
  4 .ARM          00000000  08007cf8  08007cf8  000201bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cf8  08007cf8  000201bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cf8  08007cf8  00017cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cfc  08007cfc  00017cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001bc  20000000  08007d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000868  200001bc  08007ebc  000201bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a24  08007ebc  00020a24  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b544  00000000  00000000  000201e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000264d  00000000  00000000  0002b729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002dd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197b8  00000000  00000000  0002eff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4ce  00000000  00000000  000487a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008480e  00000000  00000000  00055c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da484  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002988  00000000  00000000  000da4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001bc 	.word	0x200001bc
 8000128:	00000000 	.word	0x00000000
 800012c:	08007c10 	.word	0x08007c10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001c0 	.word	0x200001c0
 8000148:	08007c10 	.word	0x08007c10

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <KeyBoardPrint>:
}subKeyBoard;

subKeyBoard keyBoardHIDsub = {0,0,0,0,0,0,0,0};

void KeyBoardPrint(char *data,uint16_t length)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	460b      	mov	r3, r1
 8000166:	807b      	strh	r3, [r7, #2]
	for(uint16_t count=0;count<length;count++)
 8000168:	2300      	movs	r3, #0
 800016a:	81fb      	strh	r3, [r7, #14]
 800016c:	e088      	b.n	8000280 <KeyBoardPrint+0x124>
	{
		if(data[count]>=0x41 && data[count]<=0x5A)
 800016e:	89fb      	ldrh	r3, [r7, #14]
 8000170:	687a      	ldr	r2, [r7, #4]
 8000172:	4413      	add	r3, r2
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	2b40      	cmp	r3, #64	; 0x40
 8000178:	d924      	bls.n	80001c4 <KeyBoardPrint+0x68>
 800017a:	89fb      	ldrh	r3, [r7, #14]
 800017c:	687a      	ldr	r2, [r7, #4]
 800017e:	4413      	add	r3, r2
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	2b5a      	cmp	r3, #90	; 0x5a
 8000184:	d81e      	bhi.n	80001c4 <KeyBoardPrint+0x68>
		{
			keyBoardHIDsub.MODIFIER=0x02;
 8000186:	4b43      	ldr	r3, [pc, #268]	; (8000294 <KeyBoardPrint+0x138>)
 8000188:	2202      	movs	r2, #2
 800018a:	701a      	strb	r2, [r3, #0]
			keyBoardHIDsub.KEYCODE1=data[count]-0x3D;
 800018c:	89fb      	ldrh	r3, [r7, #14]
 800018e:	687a      	ldr	r2, [r7, #4]
 8000190:	4413      	add	r3, r2
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	3b3d      	subs	r3, #61	; 0x3d
 8000196:	b2da      	uxtb	r2, r3
 8000198:	4b3e      	ldr	r3, [pc, #248]	; (8000294 <KeyBoardPrint+0x138>)
 800019a:	709a      	strb	r2, [r3, #2]
			USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 800019c:	2208      	movs	r2, #8
 800019e:	493d      	ldr	r1, [pc, #244]	; (8000294 <KeyBoardPrint+0x138>)
 80001a0:	483d      	ldr	r0, [pc, #244]	; (8000298 <KeyBoardPrint+0x13c>)
 80001a2:	f005 fbdf 	bl	8005964 <USBD_HID_SendReport>
			HAL_Delay(15);
 80001a6:	200f      	movs	r0, #15
 80001a8:	f000 fa4e 	bl	8000648 <HAL_Delay>
			keyBoardHIDsub.MODIFIER=0x00;
 80001ac:	4b39      	ldr	r3, [pc, #228]	; (8000294 <KeyBoardPrint+0x138>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
			keyBoardHIDsub.KEYCODE1=0x00;
 80001b2:	4b38      	ldr	r3, [pc, #224]	; (8000294 <KeyBoardPrint+0x138>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	709a      	strb	r2, [r3, #2]
			USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80001b8:	2208      	movs	r2, #8
 80001ba:	4936      	ldr	r1, [pc, #216]	; (8000294 <KeyBoardPrint+0x138>)
 80001bc:	4836      	ldr	r0, [pc, #216]	; (8000298 <KeyBoardPrint+0x13c>)
 80001be:	f005 fbd1 	bl	8005964 <USBD_HID_SendReport>
 80001c2:	e057      	b.n	8000274 <KeyBoardPrint+0x118>
		}
		else if(data[count]>=0x61 && data[count]<=0x7A)
 80001c4:	89fb      	ldrh	r3, [r7, #14]
 80001c6:	687a      	ldr	r2, [r7, #4]
 80001c8:	4413      	add	r3, r2
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	2b60      	cmp	r3, #96	; 0x60
 80001ce:	d91e      	bls.n	800020e <KeyBoardPrint+0xb2>
 80001d0:	89fb      	ldrh	r3, [r7, #14]
 80001d2:	687a      	ldr	r2, [r7, #4]
 80001d4:	4413      	add	r3, r2
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	2b7a      	cmp	r3, #122	; 0x7a
 80001da:	d818      	bhi.n	800020e <KeyBoardPrint+0xb2>
		{
			keyBoardHIDsub.KEYCODE1=data[count]-0x5D;
 80001dc:	89fb      	ldrh	r3, [r7, #14]
 80001de:	687a      	ldr	r2, [r7, #4]
 80001e0:	4413      	add	r3, r2
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	3b5d      	subs	r3, #93	; 0x5d
 80001e6:	b2da      	uxtb	r2, r3
 80001e8:	4b2a      	ldr	r3, [pc, #168]	; (8000294 <KeyBoardPrint+0x138>)
 80001ea:	709a      	strb	r2, [r3, #2]
			USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80001ec:	2208      	movs	r2, #8
 80001ee:	4929      	ldr	r1, [pc, #164]	; (8000294 <KeyBoardPrint+0x138>)
 80001f0:	4829      	ldr	r0, [pc, #164]	; (8000298 <KeyBoardPrint+0x13c>)
 80001f2:	f005 fbb7 	bl	8005964 <USBD_HID_SendReport>
			HAL_Delay(15);
 80001f6:	200f      	movs	r0, #15
 80001f8:	f000 fa26 	bl	8000648 <HAL_Delay>
			keyBoardHIDsub.KEYCODE1=0x00;
 80001fc:	4b25      	ldr	r3, [pc, #148]	; (8000294 <KeyBoardPrint+0x138>)
 80001fe:	2200      	movs	r2, #0
 8000200:	709a      	strb	r2, [r3, #2]
			USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 8000202:	2208      	movs	r2, #8
 8000204:	4923      	ldr	r1, [pc, #140]	; (8000294 <KeyBoardPrint+0x138>)
 8000206:	4824      	ldr	r0, [pc, #144]	; (8000298 <KeyBoardPrint+0x13c>)
 8000208:	f005 fbac 	bl	8005964 <USBD_HID_SendReport>
 800020c:	e032      	b.n	8000274 <KeyBoardPrint+0x118>
		}
		else if(data[count]==0x20)
 800020e:	89fb      	ldrh	r3, [r7, #14]
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	4413      	add	r3, r2
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	2b20      	cmp	r3, #32
 8000218:	d113      	bne.n	8000242 <KeyBoardPrint+0xe6>
		{
			keyBoardHIDsub.KEYCODE1=0x2C;
 800021a:	4b1e      	ldr	r3, [pc, #120]	; (8000294 <KeyBoardPrint+0x138>)
 800021c:	222c      	movs	r2, #44	; 0x2c
 800021e:	709a      	strb	r2, [r3, #2]
			USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 8000220:	2208      	movs	r2, #8
 8000222:	491c      	ldr	r1, [pc, #112]	; (8000294 <KeyBoardPrint+0x138>)
 8000224:	481c      	ldr	r0, [pc, #112]	; (8000298 <KeyBoardPrint+0x13c>)
 8000226:	f005 fb9d 	bl	8005964 <USBD_HID_SendReport>
			HAL_Delay(15);
 800022a:	200f      	movs	r0, #15
 800022c:	f000 fa0c 	bl	8000648 <HAL_Delay>
			keyBoardHIDsub.KEYCODE1=0x00;
 8000230:	4b18      	ldr	r3, [pc, #96]	; (8000294 <KeyBoardPrint+0x138>)
 8000232:	2200      	movs	r2, #0
 8000234:	709a      	strb	r2, [r3, #2]
			USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 8000236:	2208      	movs	r2, #8
 8000238:	4916      	ldr	r1, [pc, #88]	; (8000294 <KeyBoardPrint+0x138>)
 800023a:	4817      	ldr	r0, [pc, #92]	; (8000298 <KeyBoardPrint+0x13c>)
 800023c:	f005 fb92 	bl	8005964 <USBD_HID_SendReport>
 8000240:	e018      	b.n	8000274 <KeyBoardPrint+0x118>
		}
		else if(data[count]==0x0A)
 8000242:	89fb      	ldrh	r3, [r7, #14]
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	4413      	add	r3, r2
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2b0a      	cmp	r3, #10
 800024c:	d112      	bne.n	8000274 <KeyBoardPrint+0x118>
		{
			keyBoardHIDsub.KEYCODE1=0x28;
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <KeyBoardPrint+0x138>)
 8000250:	2228      	movs	r2, #40	; 0x28
 8000252:	709a      	strb	r2, [r3, #2]
			USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 8000254:	2208      	movs	r2, #8
 8000256:	490f      	ldr	r1, [pc, #60]	; (8000294 <KeyBoardPrint+0x138>)
 8000258:	480f      	ldr	r0, [pc, #60]	; (8000298 <KeyBoardPrint+0x13c>)
 800025a:	f005 fb83 	bl	8005964 <USBD_HID_SendReport>
			HAL_Delay(15);
 800025e:	200f      	movs	r0, #15
 8000260:	f000 f9f2 	bl	8000648 <HAL_Delay>
			keyBoardHIDsub.KEYCODE1=0x00;
 8000264:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <KeyBoardPrint+0x138>)
 8000266:	2200      	movs	r2, #0
 8000268:	709a      	strb	r2, [r3, #2]
			USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 800026a:	2208      	movs	r2, #8
 800026c:	4909      	ldr	r1, [pc, #36]	; (8000294 <KeyBoardPrint+0x138>)
 800026e:	480a      	ldr	r0, [pc, #40]	; (8000298 <KeyBoardPrint+0x13c>)
 8000270:	f005 fb78 	bl	8005964 <USBD_HID_SendReport>
		}
		HAL_Delay(25);
 8000274:	2019      	movs	r0, #25
 8000276:	f000 f9e7 	bl	8000648 <HAL_Delay>
	for(uint16_t count=0;count<length;count++)
 800027a:	89fb      	ldrh	r3, [r7, #14]
 800027c:	3301      	adds	r3, #1
 800027e:	81fb      	strh	r3, [r7, #14]
 8000280:	89fa      	ldrh	r2, [r7, #14]
 8000282:	887b      	ldrh	r3, [r7, #2]
 8000284:	429a      	cmp	r2, r3
 8000286:	f4ff af72 	bcc.w	800016e <KeyBoardPrint+0x12>
	}
}
 800028a:	bf00      	nop
 800028c:	bf00      	nop
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	200001d8 	.word	0x200001d8
 8000298:	20000250 	.word	0x20000250

0800029c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a0:	f000 f970 	bl	8000584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a4:	f000 f81a 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a8:	f000 f872 	bl	8000390 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80002ac:	f006 fc4a 	bl	8006b44 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  sprintf(msg_buff,"Hii this is video tutorial from Ankit Ghevariya\n\n");
 80002b0:	4908      	ldr	r1, [pc, #32]	; (80002d4 <main+0x38>)
 80002b2:	4809      	ldr	r0, [pc, #36]	; (80002d8 <main+0x3c>)
 80002b4:	f007 f832 	bl	800731c <siprintf>
//	  keyBoardHIDsub.KEYCODE1=0x00;  // Release A key
//	  keyBoardHIDsub.KEYCODE2=0x00;  // Release B key
//	  keyBoardHIDsub.KEYCODE3=0x00;  // Release C key
//	  USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));

	  KeyBoardPrint(msg_buff,strlen(msg_buff));
 80002b8:	4807      	ldr	r0, [pc, #28]	; (80002d8 <main+0x3c>)
 80002ba:	f7ff ff47 	bl	800014c <strlen>
 80002be:	4603      	mov	r3, r0
 80002c0:	4619      	mov	r1, r3
 80002c2:	4805      	ldr	r0, [pc, #20]	; (80002d8 <main+0x3c>)
 80002c4:	f7ff ff4a 	bl	800015c <KeyBoardPrint>
	  HAL_Delay(1000); 	       // Repeat this task on every 1 second
 80002c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002cc:	f000 f9bc 	bl	8000648 <HAL_Delay>
  {
 80002d0:	e7f2      	b.n	80002b8 <main+0x1c>
 80002d2:	bf00      	nop
 80002d4:	08007c28 	.word	0x08007c28
 80002d8:	200001e0 	.word	0x200001e0

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b094      	sub	sp, #80	; 0x50
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e6:	2228      	movs	r2, #40	; 0x28
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f007 f80e 	bl	800730c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f0:	f107 0314 	add.w	r3, r7, #20
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030c:	2301      	movs	r3, #1
 800030e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000314:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	2301      	movs	r3, #1
 800031c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031e:	2302      	movs	r3, #2
 8000320:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000326:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000328:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800032c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000332:	4618      	mov	r0, r3
 8000334:	f001 ff66 	bl	8002204 <HAL_RCC_OscConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800033e:	f000 f855 	bl	80003ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	230f      	movs	r3, #15
 8000344:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000346:	2302      	movs	r3, #2
 8000348:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000352:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000358:	f107 0314 	add.w	r3, r7, #20
 800035c:	2102      	movs	r1, #2
 800035e:	4618      	mov	r0, r3
 8000360:	f002 f9d2 	bl	8002708 <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800036a:	f000 f83f 	bl	80003ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800036e:	2310      	movs	r3, #16
 8000370:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000372:	2300      	movs	r3, #0
 8000374:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4618      	mov	r0, r3
 800037a:	f002 fb2b 	bl	80029d4 <HAL_RCCEx_PeriphCLKConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000384:	f000 f832 	bl	80003ec <Error_Handler>
  }
}
 8000388:	bf00      	nop
 800038a:	3750      	adds	r7, #80	; 0x50
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000396:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_GPIO_Init+0x58>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a13      	ldr	r2, [pc, #76]	; (80003e8 <MX_GPIO_Init+0x58>)
 800039c:	f043 0320 	orr.w	r3, r3, #32
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_GPIO_Init+0x58>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0320 	and.w	r3, r3, #32
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_GPIO_Init+0x58>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <MX_GPIO_Init+0x58>)
 80003b4:	f043 0304 	orr.w	r3, r3, #4
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_GPIO_Init+0x58>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0304 	and.w	r3, r3, #4
 80003c2:	60bb      	str	r3, [r7, #8]
 80003c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_GPIO_Init+0x58>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4a07      	ldr	r2, [pc, #28]	; (80003e8 <MX_GPIO_Init+0x58>)
 80003cc:	f043 0308 	orr.w	r3, r3, #8
 80003d0:	6193      	str	r3, [r2, #24]
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <MX_GPIO_Init+0x58>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	f003 0308 	and.w	r3, r3, #8
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f0:	b672      	cpsid	i
}
 80003f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <Error_Handler+0x8>
	...

080003f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <HAL_MspInit+0x5c>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a14      	ldr	r2, [pc, #80]	; (8000454 <HAL_MspInit+0x5c>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <HAL_MspInit+0x5c>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <HAL_MspInit+0x5c>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <HAL_MspInit+0x5c>)
 800041c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000420:	61d3      	str	r3, [r2, #28]
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <HAL_MspInit+0x5c>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042e:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <HAL_MspInit+0x60>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	4a04      	ldr	r2, [pc, #16]	; (8000458 <HAL_MspInit+0x60>)
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	bf00      	nop
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40021000 	.word	0x40021000
 8000458:	40010000 	.word	0x40010000

0800045c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000460:	e7fe      	b.n	8000460 <NMI_Handler+0x4>

08000462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000466:	e7fe      	b.n	8000466 <HardFault_Handler+0x4>

08000468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800046c:	e7fe      	b.n	800046c <MemManage_Handler+0x4>

0800046e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000472:	e7fe      	b.n	8000472 <BusFault_Handler+0x4>

08000474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000478:	e7fe      	b.n	8000478 <UsageFault_Handler+0x4>

0800047a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800047e:	bf00      	nop
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr

08000486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr

08000492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr

0800049e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a2:	f000 f8b5 	bl	8000610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004b0:	4802      	ldr	r0, [pc, #8]	; (80004bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004b2:	f000 fb2b 	bl	8000b0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000714 	.word	0x20000714

080004c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c8:	4a14      	ldr	r2, [pc, #80]	; (800051c <_sbrk+0x5c>)
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <_sbrk+0x60>)
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <_sbrk+0x64>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d102      	bne.n	80004e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <_sbrk+0x64>)
 80004de:	4a12      	ldr	r2, [pc, #72]	; (8000528 <_sbrk+0x68>)
 80004e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <_sbrk+0x64>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4413      	add	r3, r2
 80004ea:	693a      	ldr	r2, [r7, #16]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d207      	bcs.n	8000500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004f0:	f006 fee2 	bl	80072b8 <__errno>
 80004f4:	4603      	mov	r3, r0
 80004f6:	220c      	movs	r2, #12
 80004f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004fe:	e009      	b.n	8000514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <_sbrk+0x64>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000506:	4b07      	ldr	r3, [pc, #28]	; (8000524 <_sbrk+0x64>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	4a05      	ldr	r2, [pc, #20]	; (8000524 <_sbrk+0x64>)
 8000510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000512:	68fb      	ldr	r3, [r7, #12]
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20005000 	.word	0x20005000
 8000520:	00000400 	.word	0x00000400
 8000524:	20000244 	.word	0x20000244
 8000528:	20000a28 	.word	0x20000a28

0800052c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800053a:	490d      	ldr	r1, [pc, #52]	; (8000570 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000540:	e002      	b.n	8000548 <LoopCopyDataInit>

08000542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000546:	3304      	adds	r3, #4

08000548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800054c:	d3f9      	bcc.n	8000542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000550:	4c0a      	ldr	r4, [pc, #40]	; (800057c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000554:	e001      	b.n	800055a <LoopFillZerobss>

08000556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000558:	3204      	adds	r2, #4

0800055a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800055c:	d3fb      	bcc.n	8000556 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800055e:	f7ff ffe5 	bl	800052c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000562:	f006 feaf 	bl	80072c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000566:	f7ff fe99 	bl	800029c <main>
  bx lr
 800056a:	4770      	bx	lr
  ldr r0, =_sdata
 800056c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000570:	200001bc 	.word	0x200001bc
  ldr r2, =_sidata
 8000574:	08007d00 	.word	0x08007d00
  ldr r2, =_sbss
 8000578:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 800057c:	20000a24 	.word	0x20000a24

08000580 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000580:	e7fe      	b.n	8000580 <ADC1_2_IRQHandler>
	...

08000584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <HAL_Init+0x28>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <HAL_Init+0x28>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000594:	2003      	movs	r0, #3
 8000596:	f000 f947 	bl	8000828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059a:	200f      	movs	r0, #15
 800059c:	f000 f808 	bl	80005b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a0:	f7ff ff2a 	bl	80003f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40022000 	.word	0x40022000

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HAL_InitTick+0x54>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x58>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4619      	mov	r1, r3
 80005c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f95f 	bl	8000892 <HAL_SYSTICK_Config>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005da:	2301      	movs	r3, #1
 80005dc:	e00e      	b.n	80005fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b0f      	cmp	r3, #15
 80005e2:	d80a      	bhi.n	80005fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	2200      	movs	r2, #0
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005ec:	f000 f927 	bl	800083e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <HAL_InitTick+0x5c>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005f6:	2300      	movs	r3, #0
 80005f8:	e000      	b.n	80005fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fa:	2301      	movs	r3, #1
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000000 	.word	0x20000000
 8000608:	20000008 	.word	0x20000008
 800060c:	20000004 	.word	0x20000004

08000610 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <HAL_IncTick+0x1c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <HAL_IncTick+0x20>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4413      	add	r3, r2
 8000620:	4a03      	ldr	r2, [pc, #12]	; (8000630 <HAL_IncTick+0x20>)
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	20000008 	.word	0x20000008
 8000630:	20000248 	.word	0x20000248

08000634 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  return uwTick;
 8000638:	4b02      	ldr	r3, [pc, #8]	; (8000644 <HAL_GetTick+0x10>)
 800063a:	681b      	ldr	r3, [r3, #0]
}
 800063c:	4618      	mov	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	20000248 	.word	0x20000248

08000648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000650:	f7ff fff0 	bl	8000634 <HAL_GetTick>
 8000654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000660:	d005      	beq.n	800066e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <HAL_Delay+0x44>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	461a      	mov	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800066e:	bf00      	nop
 8000670:	f7ff ffe0 	bl	8000634 <HAL_GetTick>
 8000674:	4602      	mov	r2, r0
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	429a      	cmp	r2, r3
 800067e:	d8f7      	bhi.n	8000670 <HAL_Delay+0x28>
  {
  }
}
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000008 	.word	0x20000008

08000690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <__NVIC_SetPriorityGrouping+0x44>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a6:	68ba      	ldr	r2, [r7, #8]
 80006a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006ac:	4013      	ands	r3, r2
 80006ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006c2:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <__NVIC_SetPriorityGrouping+0x44>)
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	60d3      	str	r3, [r2, #12]
}
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006dc:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <__NVIC_GetPriorityGrouping+0x18>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	f003 0307 	and.w	r3, r3, #7
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	2b00      	cmp	r3, #0
 8000704:	db0b      	blt.n	800071e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f003 021f 	and.w	r2, r3, #31
 800070c:	4906      	ldr	r1, [pc, #24]	; (8000728 <__NVIC_EnableIRQ+0x34>)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	095b      	lsrs	r3, r3, #5
 8000714:	2001      	movs	r0, #1
 8000716:	fa00 f202 	lsl.w	r2, r0, r2
 800071a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100

0800072c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db0a      	blt.n	8000756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	490c      	ldr	r1, [pc, #48]	; (8000778 <__NVIC_SetPriority+0x4c>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000754:	e00a      	b.n	800076c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4908      	ldr	r1, [pc, #32]	; (800077c <__NVIC_SetPriority+0x50>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	440b      	add	r3, r1
 800076a:	761a      	strb	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000e100 	.word	0xe000e100
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000780:	b480      	push	{r7}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f1c3 0307 	rsb	r3, r3, #7
 800079a:	2b04      	cmp	r3, #4
 800079c:	bf28      	it	cs
 800079e:	2304      	movcs	r3, #4
 80007a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3304      	adds	r3, #4
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	d902      	bls.n	80007b0 <NVIC_EncodePriority+0x30>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3b03      	subs	r3, #3
 80007ae:	e000      	b.n	80007b2 <NVIC_EncodePriority+0x32>
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43da      	mvns	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	401a      	ands	r2, r3
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43d9      	mvns	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	4313      	orrs	r3, r2
         );
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3724      	adds	r7, #36	; 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f4:	d301      	bcc.n	80007fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00f      	b.n	800081a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <SysTick_Config+0x40>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000802:	210f      	movs	r1, #15
 8000804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000808:	f7ff ff90 	bl	800072c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <SysTick_Config+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000812:	4b04      	ldr	r3, [pc, #16]	; (8000824 <SysTick_Config+0x40>)
 8000814:	2207      	movs	r2, #7
 8000816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	e000e010 	.word	0xe000e010

08000828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ff2d 	bl	8000690 <__NVIC_SetPriorityGrouping>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000850:	f7ff ff42 	bl	80006d8 <__NVIC_GetPriorityGrouping>
 8000854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	68b9      	ldr	r1, [r7, #8]
 800085a:	6978      	ldr	r0, [r7, #20]
 800085c:	f7ff ff90 	bl	8000780 <NVIC_EncodePriority>
 8000860:	4602      	mov	r2, r0
 8000862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff5f 	bl	800072c <__NVIC_SetPriority>
}
 800086e:	bf00      	nop
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff35 	bl	80006f4 <__NVIC_EnableIRQ>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ffa2 	bl	80007e4 <SysTick_Config>
 80008a0:	4603      	mov	r3, r0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80008aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ac:	b08b      	sub	sp, #44	; 0x2c
 80008ae:	af06      	add	r7, sp, #24
 80008b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d101      	bne.n	80008bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e0fd      	b.n	8000ab8 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d106      	bne.n	80008d6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f006 fa6b 	bl	8006dac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2203      	movs	r2, #3
 80008da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 f952 	bl	8002b8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	687e      	ldr	r6, [r7, #4]
 80008f0:	466d      	mov	r5, sp
 80008f2:	f106 0410 	add.w	r4, r6, #16
 80008f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fa:	6823      	ldr	r3, [r4, #0]
 80008fc:	602b      	str	r3, [r5, #0]
 80008fe:	1d33      	adds	r3, r6, #4
 8000900:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000902:	6838      	ldr	r0, [r7, #0]
 8000904:	f002 f91c 	bl	8002b40 <USB_CoreInit>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d005      	beq.n	800091a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2202      	movs	r2, #2
 8000912:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e0ce      	b.n	8000ab8 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f002 f94d 	bl	8002bc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000926:	2300      	movs	r3, #0
 8000928:	73fb      	strb	r3, [r7, #15]
 800092a:	e04c      	b.n	80009c6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	4613      	mov	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4413      	add	r3, r2
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	440b      	add	r3, r1
 800093c:	3301      	adds	r3, #1
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	4613      	mov	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	440b      	add	r3, r1
 8000952:	7bfa      	ldrb	r2, [r7, #15]
 8000954:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000956:	7bfa      	ldrb	r2, [r7, #15]
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	b298      	uxth	r0, r3
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	4613      	mov	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	440b      	add	r3, r1
 8000968:	3336      	adds	r3, #54	; 0x36
 800096a:	4602      	mov	r2, r0
 800096c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	6879      	ldr	r1, [r7, #4]
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	4613      	mov	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4413      	add	r3, r2
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	440b      	add	r3, r1
 800097e:	3303      	adds	r3, #3
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000984:	7bfa      	ldrb	r2, [r7, #15]
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	4613      	mov	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4413      	add	r3, r2
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	440b      	add	r3, r1
 8000992:	3338      	adds	r3, #56	; 0x38
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000998:	7bfa      	ldrb	r2, [r7, #15]
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	4613      	mov	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	4413      	add	r3, r2
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	440b      	add	r3, r1
 80009a6:	333c      	adds	r3, #60	; 0x3c
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80009ac:	7bfa      	ldrb	r2, [r7, #15]
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	4613      	mov	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4413      	add	r3, r2
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	440b      	add	r3, r1
 80009ba:	3340      	adds	r3, #64	; 0x40
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	3301      	adds	r3, #1
 80009c4:	73fb      	strb	r3, [r7, #15]
 80009c6:	7bfa      	ldrb	r2, [r7, #15]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3ad      	bcc.n	800092c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	73fb      	strb	r3, [r7, #15]
 80009d4:	e044      	b.n	8000a60 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80009d6:	7bfa      	ldrb	r2, [r7, #15]
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	4613      	mov	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	440b      	add	r3, r1
 80009e4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80009ec:	7bfa      	ldrb	r2, [r7, #15]
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	4613      	mov	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	440b      	add	r3, r1
 80009fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80009fe:	7bfa      	ldrb	r2, [r7, #15]
 8000a00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000a02:	7bfa      	ldrb	r2, [r7, #15]
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000a18:	7bfa      	ldrb	r2, [r7, #15]
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	440b      	add	r3, r1
 8000a26:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000a2e:	7bfa      	ldrb	r2, [r7, #15]
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	4613      	mov	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4413      	add	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000a44:	7bfa      	ldrb	r2, [r7, #15]
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	440b      	add	r3, r1
 8000a52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	73fb      	strb	r3, [r7, #15]
 8000a60:	7bfa      	ldrb	r2, [r7, #15]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d3b5      	bcc.n	80009d6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	687e      	ldr	r6, [r7, #4]
 8000a72:	466d      	mov	r5, sp
 8000a74:	f106 0410 	add.w	r4, r6, #16
 8000a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	602b      	str	r3, [r5, #0]
 8000a80:	1d33      	adds	r3, r6, #4
 8000a82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a84:	6838      	ldr	r0, [r7, #0]
 8000a86:	f002 f8a7 	bl	8002bd8 <USB_DevInit>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d005      	beq.n	8000a9c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2202      	movs	r2, #2
 8000a94:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e00d      	b.n	8000ab8 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f004 fd59 	bl	8005568 <USB_DevDisconnect>

  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ac0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d101      	bne.n	8000ad6 <HAL_PCD_Start+0x16>
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	e016      	b.n	8000b04 <HAL_PCD_Start+0x44>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 f83c 	bl	8002b60 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000ae8:	2101      	movs	r1, #1
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f006 fbad 	bl	800724a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f004 fd2d 	bl	8005554 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f004 fd2f 	bl	800557c <USB_ReadInterrupts>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b28:	d102      	bne.n	8000b30 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 fb48 	bl	80011c0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f004 fd21 	bl	800557c <USB_ReadInterrupts>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b44:	d112      	bne.n	8000b6c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b58:	b292      	uxth	r2, r2
 8000b5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f006 f99f 	bl	8006ea2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000b64:	2100      	movs	r1, #0
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f000 f923 	bl	8000db2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 fd03 	bl	800557c <USB_ReadInterrupts>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b80:	d10b      	bne.n	8000b9a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000b94:	b292      	uxth	r2, r2
 8000b96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f004 fcec 	bl	800557c <USB_ReadInterrupts>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bae:	d10b      	bne.n	8000bc8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000bc2:	b292      	uxth	r2, r2
 8000bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f004 fcd5 	bl	800557c <USB_ReadInterrupts>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bdc:	d126      	bne.n	8000c2c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f022 0204 	bic.w	r2, r2, #4
 8000bf0:	b292      	uxth	r2, r2
 8000bf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 0208 	bic.w	r2, r2, #8
 8000c08:	b292      	uxth	r2, r2
 8000c0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f006 f980 	bl	8006f14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000c26:	b292      	uxth	r2, r2
 8000c28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f004 fca3 	bl	800557c <USB_ReadInterrupts>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c40:	f040 8082 	bne.w	8000d48 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	77fb      	strb	r3, [r7, #31]
 8000c48:	e010      	b.n	8000c6c <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	7ffb      	ldrb	r3, [r7, #31]
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	441a      	add	r2, r3
 8000c56:	7ffb      	ldrb	r3, [r7, #31]
 8000c58:	8812      	ldrh	r2, [r2, #0]
 8000c5a:	b292      	uxth	r2, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	3320      	adds	r3, #32
 8000c60:	443b      	add	r3, r7
 8000c62:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000c66:	7ffb      	ldrb	r3, [r7, #31]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	77fb      	strb	r3, [r7, #31]
 8000c6c:	7ffb      	ldrb	r3, [r7, #31]
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	d9eb      	bls.n	8000c4a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f042 0201 	orr.w	r2, r2, #1
 8000c84:	b292      	uxth	r2, r2
 8000c86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0201 	bic.w	r2, r2, #1
 8000c9c:	b292      	uxth	r2, r2
 8000c9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000ca2:	bf00      	nop
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d0f6      	beq.n	8000ca4 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cc8:	b292      	uxth	r2, r2
 8000cca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	77fb      	strb	r3, [r7, #31]
 8000cd2:	e00f      	b.n	8000cf4 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000cd4:	7ffb      	ldrb	r3, [r7, #31]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	7ffa      	ldrb	r2, [r7, #31]
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	440a      	add	r2, r1
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	3320      	adds	r3, #32
 8000ce6:	443b      	add	r3, r7
 8000ce8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000cec:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000cee:	7ffb      	ldrb	r3, [r7, #31]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	77fb      	strb	r3, [r7, #31]
 8000cf4:	7ffb      	ldrb	r3, [r7, #31]
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	d9ec      	bls.n	8000cd4 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f042 0208 	orr.w	r2, r2, #8
 8000d0c:	b292      	uxth	r2, r2
 8000d0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d24:	b292      	uxth	r2, r2
 8000d26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f042 0204 	orr.w	r2, r2, #4
 8000d3c:	b292      	uxth	r2, r2
 8000d3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f006 f8cc 	bl	8006ee0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f004 fc15 	bl	800557c <USB_ReadInterrupts>
 8000d52:	4603      	mov	r3, r0
 8000d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d5c:	d10e      	bne.n	8000d7c <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d70:	b292      	uxth	r2, r2
 8000d72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f006 f885 	bl	8006e86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f004 fbfb 	bl	800557c <USB_ReadInterrupts>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d90:	d10b      	bne.n	8000daa <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000da4:	b292      	uxth	r2, r2
 8000da6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000daa:	bf00      	nop
 8000dac:	3720      	adds	r7, #32
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d101      	bne.n	8000dcc <HAL_PCD_SetAddress+0x1a>
 8000dc8:	2302      	movs	r3, #2
 8000dca:	e013      	b.n	8000df4 <HAL_PCD_SetAddress+0x42>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	78fa      	ldrb	r2, [r7, #3]
 8000dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	78fa      	ldrb	r2, [r7, #3]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 fba2 	bl	800552e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	4608      	mov	r0, r1
 8000e06:	4611      	mov	r1, r2
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	70fb      	strb	r3, [r7, #3]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	803b      	strh	r3, [r7, #0]
 8000e12:	4613      	mov	r3, r2
 8000e14:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	da0e      	bge.n	8000e40 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e22:	78fb      	ldrb	r3, [r7, #3]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	1c5a      	adds	r2, r3, #1
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	705a      	strb	r2, [r3, #1]
 8000e3e:	e00e      	b.n	8000e5e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	f003 0207 	and.w	r2, r3, #7
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000e6a:	883a      	ldrh	r2, [r7, #0]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	78ba      	ldrb	r2, [r7, #2]
 8000e74:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	785b      	ldrb	r3, [r3, #1]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d004      	beq.n	8000e88 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000e88:	78bb      	ldrb	r3, [r7, #2]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d102      	bne.n	8000e94 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2200      	movs	r2, #0
 8000e92:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d101      	bne.n	8000ea2 <HAL_PCD_EP_Open+0xa6>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e00e      	b.n	8000ec0 <HAL_PCD_EP_Open+0xc4>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68f9      	ldr	r1, [r7, #12]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 feb1 	bl	8002c18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000ebe:	7afb      	ldrb	r3, [r7, #11]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da0e      	bge.n	8000efa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	705a      	strb	r2, [r3, #1]
 8000ef8:	e00e      	b.n	8000f18 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	f003 0207 	and.w	r2, r3, #7
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <HAL_PCD_EP_Close+0x6a>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e00e      	b.n	8000f50 <HAL_PCD_EP_Close+0x88>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2201      	movs	r2, #1
 8000f36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68f9      	ldr	r1, [r7, #12]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 f9d3 	bl	80032ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	460b      	mov	r3, r1
 8000f66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f68:	7afb      	ldrb	r3, [r7, #11]
 8000f6a:	f003 0207 	and.w	r2, r3, #7
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2200      	movs	r2, #0
 8000f96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f98:	7afb      	ldrb	r3, [r7, #11]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000fa4:	7afb      	ldrb	r3, [r7, #11]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d106      	bne.n	8000fbc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6979      	ldr	r1, [r7, #20]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fb85 	bl	80036c4 <USB_EPStartXfer>
 8000fba:	e005      	b.n	8000fc8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6979      	ldr	r1, [r7, #20]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fb7e 	bl	80036c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fe2:	7afb      	ldrb	r3, [r7, #11]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	2201      	movs	r2, #1
 8001008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	2201      	movs	r2, #1
 800101c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800101e:	7afb      	ldrb	r3, [r7, #11]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	b2da      	uxtb	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800102a:	7afb      	ldrb	r3, [r7, #11]
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	2b00      	cmp	r3, #0
 8001032:	d106      	bne.n	8001042 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6979      	ldr	r1, [r7, #20]
 800103a:	4618      	mov	r0, r3
 800103c:	f002 fb42 	bl	80036c4 <USB_EPStartXfer>
 8001040:	e005      	b.n	800104e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6979      	ldr	r1, [r7, #20]
 8001048:	4618      	mov	r0, r3
 800104a:	f002 fb3b 	bl	80036c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	f003 0207 	and.w	r2, r3, #7
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	d901      	bls.n	8001076 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e04c      	b.n	8001110 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800107a:	2b00      	cmp	r3, #0
 800107c:	da0e      	bge.n	800109c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2201      	movs	r2, #1
 8001098:	705a      	strb	r2, [r3, #1]
 800109a:	e00c      	b.n	80010b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800109c:	78fa      	ldrb	r2, [r7, #3]
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2200      	movs	r2, #0
 80010b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2201      	movs	r2, #1
 80010ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_PCD_EP_SetStall+0x7e>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e01c      	b.n	8001110 <HAL_PCD_EP_SetStall+0xb8>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68f9      	ldr	r1, [r7, #12]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f004 f925 	bl	8005334 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d108      	bne.n	8001106 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80010fe:	4619      	mov	r1, r3
 8001100:	4610      	mov	r0, r2
 8001102:	f004 fa4a 	bl	800559a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	f003 020f 	and.w	r2, r3, #15
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	429a      	cmp	r2, r3
 8001130:	d901      	bls.n	8001136 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e040      	b.n	80011b8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800113a:	2b00      	cmp	r3, #0
 800113c:	da0e      	bge.n	800115c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2201      	movs	r2, #1
 8001158:	705a      	strb	r2, [r3, #1]
 800115a:	e00e      	b.n	800117a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	f003 0207 	and.w	r2, r3, #7
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2200      	movs	r2, #0
 800117e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	b2da      	uxtb	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_PCD_EP_ClrStall+0x82>
 8001196:	2302      	movs	r3, #2
 8001198:	e00e      	b.n	80011b8 <HAL_PCD_EP_ClrStall+0xa0>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68f9      	ldr	r1, [r7, #12]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 f913 	bl	80053d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80011c8:	e2ec      	b.n	80017a4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80011d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80011e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f040 8161 	bne.w	80014ac <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80011ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80011ec:	f003 0310 	and.w	r3, r3, #16
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d152      	bne.n	800129a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001204:	81fb      	strh	r3, [r7, #14]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001214:	b29b      	uxth	r3, r3
 8001216:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3328      	adds	r3, #40	; 0x28
 800121c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001226:	b29b      	uxth	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4413      	add	r3, r2
 8001232:	3302      	adds	r3, #2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	4413      	add	r3, r2
 800123c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	695a      	ldr	r2, [r3, #20]
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	441a      	add	r2, r3
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001258:	2100      	movs	r1, #0
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f005 fdf9 	bl	8006e52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 829b 	beq.w	80017a4 <PCD_EP_ISR_Handler+0x5e4>
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f040 8296 	bne.w	80017a4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800127e:	b2db      	uxtb	r3, r3
 8001280:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001284:	b2da      	uxtb	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b292      	uxth	r2, r2
 800128c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001298:	e284      	b.n	80017a4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80012aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d034      	beq.n	800131e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012bc:	b29b      	uxth	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	4413      	add	r3, r2
 80012c8:	3306      	adds	r3, #6
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	f004 f9a1 	bl	800563a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	b29a      	uxth	r2, r3
 8001300:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001304:	4013      	ands	r3, r2
 8001306:	823b      	strh	r3, [r7, #16]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	8a3a      	ldrh	r2, [r7, #16]
 800130e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001312:	b292      	uxth	r2, r2
 8001314:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f005 fd6e 	bl	8006df8 <HAL_PCD_SetupStageCallback>
 800131c:	e242      	b.n	80017a4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800131e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001322:	2b00      	cmp	r3, #0
 8001324:	f280 823e 	bge.w	80017a4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	b29a      	uxth	r2, r3
 8001330:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001334:	4013      	ands	r3, r2
 8001336:	83bb      	strh	r3, [r7, #28]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	8bba      	ldrh	r2, [r7, #28]
 800133e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001342:	b292      	uxth	r2, r2
 8001344:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800134e:	b29b      	uxth	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	4413      	add	r3, r2
 800135a:	3306      	adds	r3, #6
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	4413      	add	r3, r2
 8001364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d019      	beq.n	80013ae <PCD_EP_ISR_Handler+0x1ee>
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d015      	beq.n	80013ae <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	6959      	ldr	r1, [r3, #20]
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001392:	b29b      	uxth	r3, r3
 8001394:	f004 f951 	bl	800563a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	695a      	ldr	r2, [r3, #20]
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	441a      	add	r2, r3
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80013a6:	2100      	movs	r1, #0
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f005 fd37 	bl	8006e1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f040 81f2 	bne.w	80017a4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	4413      	add	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d112      	bne.n	800140e <PCD_EP_ISR_Handler+0x24e>
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	801a      	strh	r2, [r3, #0]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001406:	b29a      	uxth	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	801a      	strh	r2, [r3, #0]
 800140c:	e02f      	b.n	800146e <PCD_EP_ISR_Handler+0x2ae>
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	2b3e      	cmp	r3, #62	; 0x3e
 8001414:	d813      	bhi.n	800143e <PCD_EP_ISR_Handler+0x27e>
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	085b      	lsrs	r3, r3, #1
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <PCD_EP_ISR_Handler+0x270>
 800142a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142c:	3301      	adds	r3, #1
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
 8001430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001432:	b29b      	uxth	r3, r3
 8001434:	029b      	lsls	r3, r3, #10
 8001436:	b29a      	uxth	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	801a      	strh	r2, [r3, #0]
 800143c:	e017      	b.n	800146e <PCD_EP_ISR_Handler+0x2ae>
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	f003 031f 	and.w	r3, r3, #31
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <PCD_EP_ISR_Handler+0x298>
 8001452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001454:	3b01      	subs	r3, #1
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
 8001458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800145a:	b29b      	uxth	r3, r3
 800145c:	029b      	lsls	r3, r3, #10
 800145e:	b29b      	uxth	r3, r3
 8001460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001468:	b29a      	uxth	r2, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	b29b      	uxth	r3, r3
 8001476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800147a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800147e:	827b      	strh	r3, [r7, #18]
 8001480:	8a7b      	ldrh	r3, [r7, #18]
 8001482:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001486:	827b      	strh	r3, [r7, #18]
 8001488:	8a7b      	ldrh	r3, [r7, #18]
 800148a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800148e:	827b      	strh	r3, [r7, #18]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	8a7b      	ldrh	r3, [r7, #18]
 8001496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800149a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800149e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	8013      	strh	r3, [r2, #0]
 80014aa:	e17b      	b.n	80017a4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f280 80ea 	bge.w	800169c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	b29a      	uxth	r2, r3
 80014da:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014de:	4013      	ands	r3, r2
 80014e0:	853b      	strh	r3, [r7, #40]	; 0x28
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014f6:	b292      	uxth	r2, r2
 80014f8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80014fa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	7b1b      	ldrb	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d122      	bne.n	800155e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001520:	b29b      	uxth	r3, r3
 8001522:	461a      	mov	r2, r3
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4413      	add	r3, r2
 800152c:	3306      	adds	r3, #6
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	4413      	add	r3, r2
 8001536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001540:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001542:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 8087 	beq.w	8001658 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	6959      	ldr	r1, [r3, #20]
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	88da      	ldrh	r2, [r3, #6]
 8001556:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001558:	f004 f86f 	bl	800563a <USB_ReadPMA>
 800155c:	e07c      	b.n	8001658 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	78db      	ldrb	r3, [r3, #3]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d108      	bne.n	8001578 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001566:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001568:	461a      	mov	r2, r3
 800156a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f927 	bl	80017c0 <HAL_PCD_EP_DB_Receive>
 8001572:	4603      	mov	r3, r0
 8001574:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001576:	e06f      	b.n	8001658 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800158e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001592:	847b      	strh	r3, [r7, #34]	; 0x22
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	441a      	add	r2, r3
 80015a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80015a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80015a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80015ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d021      	beq.n	8001616 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015da:	b29b      	uxth	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4413      	add	r3, r2
 80015e6:	3302      	adds	r3, #2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015fa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80015fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d02a      	beq.n	8001658 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	6959      	ldr	r1, [r3, #20]
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	891a      	ldrh	r2, [r3, #8]
 800160e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001610:	f004 f813 	bl	800563a <USB_ReadPMA>
 8001614:	e020      	b.n	8001658 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800161e:	b29b      	uxth	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4413      	add	r3, r2
 800162a:	3306      	adds	r3, #6
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	4413      	add	r3, r2
 8001634:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800163e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001640:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001642:	2b00      	cmp	r3, #0
 8001644:	d008      	beq.n	8001658 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	6959      	ldr	r1, [r3, #20]
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	895a      	ldrh	r2, [r3, #10]
 8001652:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001654:	f003 fff1 	bl	800563a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	69da      	ldr	r2, [r3, #28]
 800165c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800165e:	441a      	add	r2, r3
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	695a      	ldr	r2, [r3, #20]
 8001668:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800166a:	441a      	add	r2, r3
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d004      	beq.n	8001682 <PCD_EP_ISR_Handler+0x4c2>
 8001678:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	429a      	cmp	r2, r3
 8001680:	d206      	bcs.n	8001690 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	4619      	mov	r1, r3
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f005 fbc7 	bl	8006e1c <HAL_PCD_DataOutStageCallback>
 800168e:	e005      	b.n	800169c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001696:	4618      	mov	r0, r3
 8001698:	f002 f814 	bl	80036c4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800169c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800169e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d07e      	beq.n	80017a4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80016a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80016d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016d4:	843b      	strh	r3, [r7, #32]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	441a      	add	r2, r3
 80016e4:	8c3b      	ldrh	r3, [r7, #32]
 80016e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	78db      	ldrb	r3, [r3, #3]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d00c      	beq.n	8001714 <PCD_EP_ISR_Handler+0x554>
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	78db      	ldrb	r3, [r3, #3]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d008      	beq.n	8001714 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001706:	2b02      	cmp	r3, #2
 8001708:	d146      	bne.n	8001798 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800170a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d141      	bne.n	8001798 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800171c:	b29b      	uxth	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4413      	add	r3, r2
 8001728:	3302      	adds	r3, #2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	4413      	add	r3, r2
 8001732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800173c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	699a      	ldr	r2, [r3, #24]
 8001742:	8bfb      	ldrh	r3, [r7, #30]
 8001744:	429a      	cmp	r2, r3
 8001746:	d906      	bls.n	8001756 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	699a      	ldr	r2, [r3, #24]
 800174c:	8bfb      	ldrh	r3, [r7, #30]
 800174e:	1ad2      	subs	r2, r2, r3
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	619a      	str	r2, [r3, #24]
 8001754:	e002      	b.n	800175c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d106      	bne.n	8001772 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f005 fb71 	bl	8006e52 <HAL_PCD_DataInStageCallback>
 8001770:	e018      	b.n	80017a4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	8bfb      	ldrh	r3, [r7, #30]
 8001778:	441a      	add	r2, r3
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	69da      	ldr	r2, [r3, #28]
 8001782:	8bfb      	ldrh	r3, [r7, #30]
 8001784:	441a      	add	r2, r3
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001790:	4618      	mov	r0, r3
 8001792:	f001 ff97 	bl	80036c4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001796:	e005      	b.n	80017a4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001798:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800179a:	461a      	mov	r2, r3
 800179c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f91b 	bl	80019da <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f6ff ad0a 	blt.w	80011ca <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3738      	adds	r7, #56	; 0x38
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	4613      	mov	r3, r2
 80017cc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d07e      	beq.n	80018d6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	3302      	adds	r3, #2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001800:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	8b7b      	ldrh	r3, [r7, #26]
 8001808:	429a      	cmp	r2, r3
 800180a:	d306      	bcc.n	800181a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	699a      	ldr	r2, [r3, #24]
 8001810:	8b7b      	ldrh	r3, [r7, #26]
 8001812:	1ad2      	subs	r2, r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	619a      	str	r2, [r3, #24]
 8001818:	e002      	b.n	8001820 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d123      	bne.n	8001870 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	b29b      	uxth	r3, r3
 800183a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800183e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001842:	833b      	strh	r3, [r7, #24]
 8001844:	8b3b      	ldrh	r3, [r7, #24]
 8001846:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800184a:	833b      	strh	r3, [r7, #24]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	441a      	add	r2, r3
 800185a:	8b3b      	ldrh	r3, [r7, #24]
 800185c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186c:	b29b      	uxth	r3, r3
 800186e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001876:	2b00      	cmp	r3, #0
 8001878:	d01f      	beq.n	80018ba <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001894:	82fb      	strh	r3, [r7, #22]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	441a      	add	r2, r3
 80018a4:	8afb      	ldrh	r3, [r7, #22]
 80018a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80018ba:	8b7b      	ldrh	r3, [r7, #26]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 8087 	beq.w	80019d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	6959      	ldr	r1, [r3, #20]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	891a      	ldrh	r2, [r3, #8]
 80018ce:	8b7b      	ldrh	r3, [r7, #26]
 80018d0:	f003 feb3 	bl	800563a <USB_ReadPMA>
 80018d4:	e07c      	b.n	80019d0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018de:	b29b      	uxth	r3, r3
 80018e0:	461a      	mov	r2, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4413      	add	r3, r2
 80018ea:	3306      	adds	r3, #6
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	699a      	ldr	r2, [r3, #24]
 8001904:	8b7b      	ldrh	r3, [r7, #26]
 8001906:	429a      	cmp	r2, r3
 8001908:	d306      	bcc.n	8001918 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	699a      	ldr	r2, [r3, #24]
 800190e:	8b7b      	ldrh	r3, [r7, #26]
 8001910:	1ad2      	subs	r2, r2, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	619a      	str	r2, [r3, #24]
 8001916:	e002      	b.n	800191e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d123      	bne.n	800196e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
 8001938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800193c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001940:	83fb      	strh	r3, [r7, #30]
 8001942:	8bfb      	ldrh	r3, [r7, #30]
 8001944:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001948:	83fb      	strh	r3, [r7, #30]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	441a      	add	r2, r3
 8001958:	8bfb      	ldrh	r3, [r7, #30]
 800195a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800195e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800196a:	b29b      	uxth	r3, r3
 800196c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001974:	2b00      	cmp	r3, #0
 8001976:	d11f      	bne.n	80019b8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	b29b      	uxth	r3, r3
 800198a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800198e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001992:	83bb      	strh	r3, [r7, #28]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	441a      	add	r2, r3
 80019a2:	8bbb      	ldrh	r3, [r7, #28]
 80019a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80019b8:	8b7b      	ldrh	r3, [r7, #26]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d008      	beq.n	80019d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	6959      	ldr	r1, [r3, #20]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	895a      	ldrh	r2, [r3, #10]
 80019ca:	8b7b      	ldrh	r3, [r7, #26]
 80019cc:	f003 fe35 	bl	800563a <USB_ReadPMA>
    }
  }

  return count;
 80019d0:	8b7b      	ldrh	r3, [r7, #26]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3720      	adds	r7, #32
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b0a2      	sub	sp, #136	; 0x88
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	4613      	mov	r3, r2
 80019e6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 81c7 	beq.w	8001d82 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4413      	add	r3, r2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	699a      	ldr	r2, [r3, #24]
 8001a24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d907      	bls.n	8001a3c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a34:	1ad2      	subs	r2, r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	619a      	str	r2, [r3, #24]
 8001a3a:	e002      	b.n	8001a42 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 80b9 	bne.w	8001bbe <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	785b      	ldrb	r3, [r3, #1]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d126      	bne.n	8001aa2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a68:	4413      	add	r3, r2
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	011a      	lsls	r2, r3, #4
 8001a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a74:	4413      	add	r3, r2
 8001a76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	801a      	strh	r2, [r3, #0]
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	801a      	strh	r2, [r3, #0]
 8001aa0:	e01a      	b.n	8001ad8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	785b      	ldrb	r3, [r3, #1]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d116      	bne.n	8001ad8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	633b      	str	r3, [r7, #48]	; 0x30
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abe:	4413      	add	r3, r2
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	011a      	lsls	r2, r3, #4
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aca:	4413      	add	r3, r2
 8001acc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	623b      	str	r3, [r7, #32]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	785b      	ldrb	r3, [r3, #1]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d126      	bne.n	8001b34 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	4413      	add	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	011a      	lsls	r2, r3, #4
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	4413      	add	r3, r2
 8001b08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	801a      	strh	r2, [r3, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	801a      	strh	r2, [r3, #0]
 8001b32:	e017      	b.n	8001b64 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	785b      	ldrb	r3, [r3, #1]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d113      	bne.n	8001b64 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	623b      	str	r3, [r7, #32]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	011a      	lsls	r2, r3, #4
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	4413      	add	r3, r2
 8001b58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	2200      	movs	r2, #0
 8001b62:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f005 f971 	bl	8006e52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 82d4 	beq.w	8002124 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b96:	827b      	strh	r3, [r7, #18]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	441a      	add	r2, r3
 8001ba6:	8a7b      	ldrh	r3, [r7, #18]
 8001ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	8013      	strh	r3, [r2, #0]
 8001bbc:	e2b2      	b.n	8002124 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d021      	beq.n	8001c0c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	441a      	add	r2, r3
 8001bf4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	f040 8286 	bne.w	8002124 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c20:	441a      	add	r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	69da      	ldr	r2, [r3, #28]
 8001c2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c2e:	441a      	add	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	6a1a      	ldr	r2, [r3, #32]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d309      	bcc.n	8001c54 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	6a1a      	ldr	r2, [r3, #32]
 8001c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c4c:	1ad2      	subs	r2, r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	621a      	str	r2, [r3, #32]
 8001c52:	e015      	b.n	8001c80 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001c5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c60:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c6a:	e009      	b.n	8001c80 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	785b      	ldrb	r3, [r3, #1]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d155      	bne.n	8001d34 <HAL_PCD_EP_DB_Transmit+0x35a>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9c:	4413      	add	r3, r2
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	011a      	lsls	r2, r3, #4
 8001ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca8:	4413      	add	r3, r2
 8001caa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001cae:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d112      	bne.n	8001cdc <HAL_PCD_EP_DB_Transmit+0x302>
 8001cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc4:	801a      	strh	r2, [r3, #0]
 8001cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd8:	801a      	strh	r2, [r3, #0]
 8001cda:	e047      	b.n	8001d6c <HAL_PCD_EP_DB_Transmit+0x392>
 8001cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cde:	2b3e      	cmp	r3, #62	; 0x3e
 8001ce0:	d811      	bhi.n	8001d06 <HAL_PCD_EP_DB_Transmit+0x32c>
 8001ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce4:	085b      	lsrs	r3, r3, #1
 8001ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <HAL_PCD_EP_DB_Transmit+0x31e>
 8001cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	029b      	lsls	r3, r3, #10
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d02:	801a      	strh	r2, [r3, #0]
 8001d04:	e032      	b.n	8001d6c <HAL_PCD_EP_DB_Transmit+0x392>
 8001d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d08:	095b      	lsrs	r3, r3, #5
 8001d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d0e:	f003 031f 	and.w	r3, r3, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d102      	bne.n	8001d1c <HAL_PCD_EP_DB_Transmit+0x342>
 8001d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	029b      	lsls	r3, r3, #10
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d30:	801a      	strh	r2, [r3, #0]
 8001d32:	e01b      	b.n	8001d6c <HAL_PCD_EP_DB_Transmit+0x392>
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	785b      	ldrb	r3, [r3, #1]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d117      	bne.n	8001d6c <HAL_PCD_EP_DB_Transmit+0x392>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	643b      	str	r3, [r7, #64]	; 0x40
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d50:	4413      	add	r3, r2
 8001d52:	643b      	str	r3, [r7, #64]	; 0x40
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	011a      	lsls	r2, r3, #4
 8001d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d6a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	6959      	ldr	r1, [r3, #20]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	891a      	ldrh	r2, [r3, #8]
 8001d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f003 fc18 	bl	80055b0 <USB_WritePMA>
 8001d80:	e1d0      	b.n	8002124 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	3306      	adds	r3, #6
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001daa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	699a      	ldr	r2, [r3, #24]
 8001db2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d307      	bcc.n	8001dca <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	699a      	ldr	r2, [r3, #24]
 8001dbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001dc2:	1ad2      	subs	r2, r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	619a      	str	r2, [r3, #24]
 8001dc8:	e002      	b.n	8001dd0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f040 80c4 	bne.w	8001f62 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	785b      	ldrb	r3, [r3, #1]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d126      	bne.n	8001e30 <HAL_PCD_EP_DB_Transmit+0x456>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001df6:	4413      	add	r3, r2
 8001df8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	011a      	lsls	r2, r3, #4
 8001e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e02:	4413      	add	r3, r2
 8001e04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e08:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e18:	801a      	strh	r2, [r3, #0]
 8001e1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e2c:	801a      	strh	r2, [r3, #0]
 8001e2e:	e01a      	b.n	8001e66 <HAL_PCD_EP_DB_Transmit+0x48c>
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	785b      	ldrb	r3, [r3, #1]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d116      	bne.n	8001e66 <HAL_PCD_EP_DB_Transmit+0x48c>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	677b      	str	r3, [r7, #116]	; 0x74
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e4c:	4413      	add	r3, r2
 8001e4e:	677b      	str	r3, [r7, #116]	; 0x74
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	011a      	lsls	r2, r3, #4
 8001e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e58:	4413      	add	r3, r2
 8001e5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e5e:	673b      	str	r3, [r7, #112]	; 0x70
 8001e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e62:	2200      	movs	r2, #0
 8001e64:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	785b      	ldrb	r3, [r3, #1]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d12f      	bne.n	8001ed4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	011a      	lsls	r2, r3, #4
 8001e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ea2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eb8:	801a      	strh	r2, [r3, #0]
 8001eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ed0:	801a      	strh	r2, [r3, #0]
 8001ed2:	e017      	b.n	8001f04 <HAL_PCD_EP_DB_Transmit+0x52a>
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	785b      	ldrb	r3, [r3, #1]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d113      	bne.n	8001f04 <HAL_PCD_EP_DB_Transmit+0x52a>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eea:	4413      	add	r3, r2
 8001eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	011a      	lsls	r2, r3, #4
 8001ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001efc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001efe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f00:	2200      	movs	r2, #0
 8001f02:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f004 ffa1 	bl	8006e52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 8104 	bne.w	8002124 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	441a      	add	r2, r3
 8001f48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	8013      	strh	r3, [r2, #0]
 8001f60:	e0e0      	b.n	8002124 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d121      	bne.n	8001fb0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f86:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	441a      	add	r2, r3
 8001f98:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	f040 80b4 	bne.w	8002124 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001fc4:	441a      	add	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	69da      	ldr	r2, [r3, #28]
 8001fce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001fd2:	441a      	add	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	6a1a      	ldr	r2, [r3, #32]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d309      	bcc.n	8001ff8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	6a1a      	ldr	r2, [r3, #32]
 8001fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ff0:	1ad2      	subs	r2, r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	621a      	str	r2, [r3, #32]
 8001ff6:	e015      	b.n	8002024 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002000:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002004:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800200e:	e009      	b.n	8002024 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	667b      	str	r3, [r7, #100]	; 0x64
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	785b      	ldrb	r3, [r3, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d155      	bne.n	80020de <HAL_PCD_EP_DB_Transmit+0x704>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002040:	b29b      	uxth	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002046:	4413      	add	r3, r2
 8002048:	65fb      	str	r3, [r7, #92]	; 0x5c
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	011a      	lsls	r2, r3, #4
 8002050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002052:	4413      	add	r3, r2
 8002054:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002058:	65bb      	str	r3, [r7, #88]	; 0x58
 800205a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800205c:	2b00      	cmp	r3, #0
 800205e:	d112      	bne.n	8002086 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	b29b      	uxth	r3, r3
 8002066:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800206a:	b29a      	uxth	r2, r3
 800206c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800206e:	801a      	strh	r2, [r3, #0]
 8002070:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800207a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800207e:	b29a      	uxth	r2, r3
 8002080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002082:	801a      	strh	r2, [r3, #0]
 8002084:	e044      	b.n	8002110 <HAL_PCD_EP_DB_Transmit+0x736>
 8002086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002088:	2b3e      	cmp	r3, #62	; 0x3e
 800208a:	d811      	bhi.n	80020b0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800208c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800208e:	085b      	lsrs	r3, r3, #1
 8002090:	657b      	str	r3, [r7, #84]	; 0x54
 8002092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800209c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209e:	3301      	adds	r3, #1
 80020a0:	657b      	str	r3, [r7, #84]	; 0x54
 80020a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	029b      	lsls	r3, r3, #10
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020ac:	801a      	strh	r2, [r3, #0]
 80020ae:	e02f      	b.n	8002110 <HAL_PCD_EP_DB_Transmit+0x736>
 80020b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	657b      	str	r3, [r7, #84]	; 0x54
 80020b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80020c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c2:	3b01      	subs	r3, #1
 80020c4:	657b      	str	r3, [r7, #84]	; 0x54
 80020c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	029b      	lsls	r3, r3, #10
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020da:	801a      	strh	r2, [r3, #0]
 80020dc:	e018      	b.n	8002110 <HAL_PCD_EP_DB_Transmit+0x736>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	785b      	ldrb	r3, [r3, #1]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d114      	bne.n	8002110 <HAL_PCD_EP_DB_Transmit+0x736>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020f4:	4413      	add	r3, r2
 80020f6:	667b      	str	r3, [r7, #100]	; 0x64
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	011a      	lsls	r2, r3, #4
 80020fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002100:	4413      	add	r3, r2
 8002102:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002106:	663b      	str	r3, [r7, #96]	; 0x60
 8002108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800210a:	b29a      	uxth	r2, r3
 800210c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800210e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	6959      	ldr	r1, [r3, #20]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	895a      	ldrh	r2, [r3, #10]
 800211c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800211e:	b29b      	uxth	r3, r3
 8002120:	f003 fa46 	bl	80055b0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800213a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800213e:	823b      	strh	r3, [r7, #16]
 8002140:	8a3b      	ldrh	r3, [r7, #16]
 8002142:	f083 0310 	eor.w	r3, r3, #16
 8002146:	823b      	strh	r3, [r7, #16]
 8002148:	8a3b      	ldrh	r3, [r7, #16]
 800214a:	f083 0320 	eor.w	r3, r3, #32
 800214e:	823b      	strh	r3, [r7, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	441a      	add	r2, r3
 800215e:	8a3b      	ldrh	r3, [r7, #16]
 8002160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800216c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002170:	b29b      	uxth	r3, r3
 8002172:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3788      	adds	r7, #136	; 0x88
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800217e:	b480      	push	{r7}
 8002180:	b087      	sub	sp, #28
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	817b      	strh	r3, [r7, #10]
 800218c:	4613      	mov	r3, r2
 800218e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002190:	897b      	ldrh	r3, [r7, #10]
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00b      	beq.n	80021b4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219c:	897b      	ldrh	r3, [r7, #10]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e009      	b.n	80021c8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021b4:	897a      	ldrh	r2, [r7, #10]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4413      	add	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80021c8:	893b      	ldrh	r3, [r7, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d107      	bne.n	80021de <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2200      	movs	r2, #0
 80021d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	80da      	strh	r2, [r3, #6]
 80021dc:	e00b      	b.n	80021f6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2201      	movs	r2, #1
 80021e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	0c1b      	lsrs	r3, r3, #16
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	371c      	adds	r7, #28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
	...

08002204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e272      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8087 	beq.w	8002332 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002224:	4b92      	ldr	r3, [pc, #584]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b04      	cmp	r3, #4
 800222e:	d00c      	beq.n	800224a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002230:	4b8f      	ldr	r3, [pc, #572]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b08      	cmp	r3, #8
 800223a:	d112      	bne.n	8002262 <HAL_RCC_OscConfig+0x5e>
 800223c:	4b8c      	ldr	r3, [pc, #560]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002248:	d10b      	bne.n	8002262 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224a:	4b89      	ldr	r3, [pc, #548]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d06c      	beq.n	8002330 <HAL_RCC_OscConfig+0x12c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d168      	bne.n	8002330 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e24c      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x76>
 800226c:	4b80      	ldr	r3, [pc, #512]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a7f      	ldr	r2, [pc, #508]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	e02e      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x98>
 8002282:	4b7b      	ldr	r3, [pc, #492]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a7a      	ldr	r2, [pc, #488]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b78      	ldr	r3, [pc, #480]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a77      	ldr	r2, [pc, #476]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e01d      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0xbc>
 80022a6:	4b72      	ldr	r3, [pc, #456]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a71      	ldr	r2, [pc, #452]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b6f      	ldr	r3, [pc, #444]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a6e      	ldr	r2, [pc, #440]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e00b      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 80022c0:	4b6b      	ldr	r3, [pc, #428]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a6a      	ldr	r2, [pc, #424]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b68      	ldr	r3, [pc, #416]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a67      	ldr	r2, [pc, #412]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7fe f9a8 	bl	8000634 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7fe f9a4 	bl	8000634 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e200      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	4b5d      	ldr	r3, [pc, #372]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0xe4>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe f994 	bl	8000634 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe f990 	bl	8000634 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e1ec      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002322:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x10c>
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d063      	beq.n	8002406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800233e:	4b4c      	ldr	r3, [pc, #304]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800234a:	4b49      	ldr	r3, [pc, #292]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b08      	cmp	r3, #8
 8002354:	d11c      	bne.n	8002390 <HAL_RCC_OscConfig+0x18c>
 8002356:	4b46      	ldr	r3, [pc, #280]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d116      	bne.n	8002390 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	4b43      	ldr	r3, [pc, #268]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_RCC_OscConfig+0x176>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e1c0      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237a:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4939      	ldr	r1, [pc, #228]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	e03a      	b.n	8002406 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002398:	4b36      	ldr	r3, [pc, #216]	; (8002474 <HAL_RCC_OscConfig+0x270>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7fe f949 	bl	8000634 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a6:	f7fe f945 	bl	8000634 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e1a1      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4927      	ldr	r1, [pc, #156]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
 80023d8:	e015      	b.n	8002406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <HAL_RCC_OscConfig+0x270>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe f928 	bl	8000634 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e8:	f7fe f924 	bl	8000634 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e180      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d03a      	beq.n	8002488 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d019      	beq.n	800244e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002420:	f7fe f908 	bl	8000634 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002428:	f7fe f904 	bl	8000634 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e160      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002446:	2001      	movs	r0, #1
 8002448:	f000 faa6 	bl	8002998 <RCC_Delay>
 800244c:	e01c      	b.n	8002488 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002454:	f7fe f8ee 	bl	8000634 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245a:	e00f      	b.n	800247c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245c:	f7fe f8ea 	bl	8000634 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d908      	bls.n	800247c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e146      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	42420000 	.word	0x42420000
 8002478:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247c:	4b92      	ldr	r3, [pc, #584]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e9      	bne.n	800245c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a6 	beq.w	80025e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249a:	4b8b      	ldr	r3, [pc, #556]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10d      	bne.n	80024c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	4b88      	ldr	r3, [pc, #544]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4a87      	ldr	r2, [pc, #540]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b0:	61d3      	str	r3, [r2, #28]
 80024b2:	4b85      	ldr	r3, [pc, #532]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024be:	2301      	movs	r3, #1
 80024c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c2:	4b82      	ldr	r3, [pc, #520]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d118      	bne.n	8002500 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ce:	4b7f      	ldr	r3, [pc, #508]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a7e      	ldr	r2, [pc, #504]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024da:	f7fe f8ab 	bl	8000634 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e2:	f7fe f8a7 	bl	8000634 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b64      	cmp	r3, #100	; 0x64
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e103      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f4:	4b75      	ldr	r3, [pc, #468]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x312>
 8002508:	4b6f      	ldr	r3, [pc, #444]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4a6e      	ldr	r2, [pc, #440]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6213      	str	r3, [r2, #32]
 8002514:	e02d      	b.n	8002572 <HAL_RCC_OscConfig+0x36e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x334>
 800251e:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a69      	ldr	r2, [pc, #420]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6213      	str	r3, [r2, #32]
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4a66      	ldr	r2, [pc, #408]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	6213      	str	r3, [r2, #32]
 8002536:	e01c      	b.n	8002572 <HAL_RCC_OscConfig+0x36e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d10c      	bne.n	800255a <HAL_RCC_OscConfig+0x356>
 8002540:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a60      	ldr	r2, [pc, #384]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	4b5e      	ldr	r3, [pc, #376]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a5d      	ldr	r2, [pc, #372]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6213      	str	r3, [r2, #32]
 8002558:	e00b      	b.n	8002572 <HAL_RCC_OscConfig+0x36e>
 800255a:	4b5b      	ldr	r3, [pc, #364]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a5a      	ldr	r2, [pc, #360]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	6213      	str	r3, [r2, #32]
 8002566:	4b58      	ldr	r3, [pc, #352]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a57      	ldr	r2, [pc, #348]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	f023 0304 	bic.w	r3, r3, #4
 8002570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d015      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257a:	f7fe f85b 	bl	8000634 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7fe f857 	bl	8000634 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0b1      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	4b4b      	ldr	r3, [pc, #300]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ee      	beq.n	8002582 <HAL_RCC_OscConfig+0x37e>
 80025a4:	e014      	b.n	80025d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a6:	f7fe f845 	bl	8000634 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7fe f841 	bl	8000634 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e09b      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	4b40      	ldr	r3, [pc, #256]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ee      	bne.n	80025ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	4b3c      	ldr	r3, [pc, #240]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4a3b      	ldr	r2, [pc, #236]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8087 	beq.w	80026fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ec:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d061      	beq.n	80026bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d146      	bne.n	800268e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002600:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7fe f815 	bl	8000634 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7fe f811 	bl	8000634 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e06d      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002620:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002634:	d108      	bne.n	8002648 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4921      	ldr	r1, [pc, #132]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002648:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a19      	ldr	r1, [r3, #32]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	430b      	orrs	r3, r1
 800265a:	491b      	ldr	r1, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x4cc>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7fd ffe5 	bl	8000634 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7fd ffe1 	bl	8000634 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e03d      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x46a>
 800268c:	e035      	b.n	80026fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_RCC_OscConfig+0x4cc>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7fd ffce 	bl	8000634 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269c:	f7fd ffca 	bl	8000634 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e026      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x498>
 80026ba:	e01e      	b.n	80026fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e019      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40007000 	.word	0x40007000
 80026d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_OscConfig+0x500>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0d0      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800271c:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d910      	bls.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b67      	ldr	r3, [pc, #412]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0207 	bic.w	r2, r3, #7
 8002732:	4965      	ldr	r1, [pc, #404]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b8      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800276e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002786:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b50      	ldr	r3, [pc, #320]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	494d      	ldr	r1, [pc, #308]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d040      	beq.n	8002828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d115      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07f      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e073      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d6:	4b3d      	ldr	r3, [pc, #244]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e06b      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e6:	4b39      	ldr	r3, [pc, #228]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f023 0203 	bic.w	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4936      	ldr	r1, [pc, #216]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f8:	f7fd ff1c 	bl	8000634 <HAL_GetTick>
 80027fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002800:	f7fd ff18 	bl	8000634 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e053      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 020c 	and.w	r2, r3, #12
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	429a      	cmp	r2, r3
 8002826:	d1eb      	bne.n	8002800 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d210      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 0207 	bic.w	r2, r3, #7
 800283e:	4922      	ldr	r1, [pc, #136]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e032      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4916      	ldr	r1, [pc, #88]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	490e      	ldr	r1, [pc, #56]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002896:	f000 f821 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800289a:	4602      	mov	r2, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	490a      	ldr	r1, [pc, #40]	; (80028d0 <HAL_RCC_ClockConfig+0x1c8>)
 80028a8:	5ccb      	ldrb	r3, [r1, r3]
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1cc>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1d0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fd fe7a 	bl	80005b0 <HAL_InitTick>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40022000 	.word	0x40022000
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08007cb4 	.word	0x08007cb4
 80028d4:	20000000 	.word	0x20000000
 80028d8:	20000004 	.word	0x20000004

080028dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	b490      	push	{r4, r7}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028e2:	4b29      	ldr	r3, [pc, #164]	; (8002988 <HAL_RCC_GetSysClockFreq+0xac>)
 80028e4:	1d3c      	adds	r4, r7, #4
 80028e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028ec:	f240 2301 	movw	r3, #513	; 0x201
 80028f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002906:	4b21      	ldr	r3, [pc, #132]	; (800298c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b04      	cmp	r3, #4
 8002914:	d002      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x40>
 8002916:	2b08      	cmp	r3, #8
 8002918:	d003      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x46>
 800291a:	e02b      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800291c:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_RCC_GetSysClockFreq+0xb4>)
 800291e:	623b      	str	r3, [r7, #32]
      break;
 8002920:	e02b      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	0c9b      	lsrs	r3, r3, #18
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	3328      	adds	r3, #40	; 0x28
 800292c:	443b      	add	r3, r7
 800292e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002932:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d012      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800293e:	4b13      	ldr	r3, [pc, #76]	; (800298c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	0c5b      	lsrs	r3, r3, #17
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	3328      	adds	r3, #40	; 0x28
 800294a:	443b      	add	r3, r7
 800294c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002950:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002956:	fb03 f202 	mul.w	r2, r3, r2
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
 8002962:	e004      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	623b      	str	r3, [r7, #32]
      break;
 8002972:	e002      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002976:	623b      	str	r3, [r7, #32]
      break;
 8002978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297a:	6a3b      	ldr	r3, [r7, #32]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3728      	adds	r7, #40	; 0x28
 8002980:	46bd      	mov	sp, r7
 8002982:	bc90      	pop	{r4, r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	08007c5c 	.word	0x08007c5c
 800298c:	40021000 	.word	0x40021000
 8002990:	007a1200 	.word	0x007a1200
 8002994:	003d0900 	.word	0x003d0900

08002998 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <RCC_Delay+0x34>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <RCC_Delay+0x38>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0a5b      	lsrs	r3, r3, #9
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029b4:	bf00      	nop
  }
  while (Delay --);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1e5a      	subs	r2, r3, #1
 80029ba:	60fa      	str	r2, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f9      	bne.n	80029b4 <RCC_Delay+0x1c>
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20000000 	.word	0x20000000
 80029d0:	10624dd3 	.word	0x10624dd3

080029d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d07d      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f4:	4b4f      	ldr	r3, [pc, #316]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10d      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a00:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	4a4b      	ldr	r2, [pc, #300]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	61d3      	str	r3, [r2, #28]
 8002a0c:	4b49      	ldr	r3, [pc, #292]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1c:	4b46      	ldr	r3, [pc, #280]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d118      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a28:	4b43      	ldr	r3, [pc, #268]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a42      	ldr	r2, [pc, #264]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a34:	f7fd fdfe 	bl	8000634 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	e008      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3c:	f7fd fdfa 	bl	8000634 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e06d      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4e:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a5a:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d02e      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d027      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a78:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a82:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a88:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a8e:	4a29      	ldr	r2, [pc, #164]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d014      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9e:	f7fd fdc9 	bl	8000634 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fd fdc5 	bl	8000634 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e036      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abc:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ee      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4917      	ldr	r1, [pc, #92]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d105      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae0:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	490b      	ldr	r1, [pc, #44]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b16:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4904      	ldr	r1, [pc, #16]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40007000 	.word	0x40007000
 8002b3c:	42420440 	.word	0x42420440

08002b40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b40:	b084      	sub	sp, #16
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	f107 0014 	add.w	r0, r7, #20
 8002b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	b004      	add	sp, #16
 8002b5e:	4770      	bx	lr

08002b60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b70:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002b74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b94:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002b98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	4013      	ands	r3, r2
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002bd8:	b084      	sub	sp, #16
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	f107 0014 	add.w	r0, r7, #20
 8002be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	b004      	add	sp, #16
 8002c16:	4770      	bx	lr

08002c18 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b09b      	sub	sp, #108	; 0x6c
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	78db      	ldrb	r3, [r3, #3]
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d81f      	bhi.n	8002c8a <USB_ActivateEndpoint+0x72>
 8002c4a:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <USB_ActivateEndpoint+0x38>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002c61 	.word	0x08002c61
 8002c54:	08002c7d 	.word	0x08002c7d
 8002c58:	08002c93 	.word	0x08002c93
 8002c5c:	08002c6f 	.word	0x08002c6f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002c60:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c68:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002c6c:	e012      	b.n	8002c94 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002c6e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c72:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002c76:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002c7a:	e00b      	b.n	8002c94 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002c7c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c84:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002c88:	e004      	b.n	8002c94 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002c90:	e000      	b.n	8002c94 <USB_ActivateEndpoint+0x7c>
      break;
 8002c92:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	441a      	add	r2, r3
 8002c9e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	441a      	add	r2, r3
 8002ce4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	7b1b      	ldrb	r3, [r3, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f040 8149 	bne.w	8002f98 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	785b      	ldrb	r3, [r3, #1]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8084 	beq.w	8002e18 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	4413      	add	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	011a      	lsls	r2, r3, #4
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	88db      	ldrh	r3, [r3, #6]
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	81fb      	strh	r3, [r7, #14]
 8002d52:	89fb      	ldrh	r3, [r7, #14]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d01b      	beq.n	8002d94 <USB_ActivateEndpoint+0x17c>
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d72:	81bb      	strh	r3, [r7, #12]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	441a      	add	r2, r3
 8002d7e:	89bb      	ldrh	r3, [r7, #12]
 8002d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	78db      	ldrb	r3, [r3, #3]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d020      	beq.n	8002dde <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002db2:	813b      	strh	r3, [r7, #8]
 8002db4:	893b      	ldrh	r3, [r7, #8]
 8002db6:	f083 0320 	eor.w	r3, r3, #32
 8002dba:	813b      	strh	r3, [r7, #8]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	441a      	add	r2, r3
 8002dc6:	893b      	ldrh	r3, [r7, #8]
 8002dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	8013      	strh	r3, [r2, #0]
 8002ddc:	e27f      	b.n	80032de <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002df4:	817b      	strh	r3, [r7, #10]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	441a      	add	r2, r3
 8002e00:	897b      	ldrh	r3, [r7, #10]
 8002e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	8013      	strh	r3, [r2, #0]
 8002e16:	e262      	b.n	80032de <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	4413      	add	r3, r2
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	011a      	lsls	r2, r3, #4
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	88db      	ldrh	r3, [r3, #6]
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	4413      	add	r3, r2
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	011a      	lsls	r2, r3, #4
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	4413      	add	r3, r2
 8002e6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e6e:	623b      	str	r3, [r7, #32]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d112      	bne.n	8002e9e <USB_ActivateEndpoint+0x286>
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	801a      	strh	r2, [r3, #0]
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	801a      	strh	r2, [r3, #0]
 8002e9c:	e02f      	b.n	8002efe <USB_ActivateEndpoint+0x2e6>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ea4:	d813      	bhi.n	8002ece <USB_ActivateEndpoint+0x2b6>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	085b      	lsrs	r3, r3, #1
 8002eac:	663b      	str	r3, [r7, #96]	; 0x60
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <USB_ActivateEndpoint+0x2a8>
 8002eba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	663b      	str	r3, [r7, #96]	; 0x60
 8002ec0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	029b      	lsls	r3, r3, #10
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	801a      	strh	r2, [r3, #0]
 8002ecc:	e017      	b.n	8002efe <USB_ActivateEndpoint+0x2e6>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <USB_ActivateEndpoint+0x2d0>
 8002ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	029b      	lsls	r3, r3, #10
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	83fb      	strh	r3, [r7, #30]
 8002f0c:	8bfb      	ldrh	r3, [r7, #30]
 8002f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01b      	beq.n	8002f4e <USB_ActivateEndpoint+0x336>
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2c:	83bb      	strh	r3, [r7, #28]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	441a      	add	r2, r3
 8002f38:	8bbb      	ldrh	r3, [r7, #28]
 8002f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f64:	837b      	strh	r3, [r7, #26]
 8002f66:	8b7b      	ldrh	r3, [r7, #26]
 8002f68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f6c:	837b      	strh	r3, [r7, #26]
 8002f6e:	8b7b      	ldrh	r3, [r7, #26]
 8002f70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f74:	837b      	strh	r3, [r7, #26]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	441a      	add	r2, r3
 8002f80:	8b7b      	ldrh	r3, [r7, #26]
 8002f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	8013      	strh	r3, [r2, #0]
 8002f96:	e1a2      	b.n	80032de <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	441a      	add	r2, r3
 8002fbc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fe4:	4413      	add	r3, r2
 8002fe6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	011a      	lsls	r2, r3, #4
 8002fee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	891b      	ldrh	r3, [r3, #8]
 8002ffc:	085b      	lsrs	r3, r3, #1
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003006:	801a      	strh	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	653b      	str	r3, [r7, #80]	; 0x50
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003012:	b29b      	uxth	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003018:	4413      	add	r3, r2
 800301a:	653b      	str	r3, [r7, #80]	; 0x50
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	011a      	lsls	r2, r3, #4
 8003022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003024:	4413      	add	r3, r2
 8003026:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800302a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	895b      	ldrh	r3, [r3, #10]
 8003030:	085b      	lsrs	r3, r3, #1
 8003032:	b29b      	uxth	r3, r3
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	785b      	ldrb	r3, [r3, #1]
 8003040:	2b00      	cmp	r3, #0
 8003042:	f040 8091 	bne.w	8003168 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003054:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d01b      	beq.n	8003096 <USB_ActivateEndpoint+0x47e>
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003074:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	441a      	add	r2, r3
 8003080:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800308a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800308e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003092:	b29b      	uxth	r3, r3
 8003094:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	873b      	strh	r3, [r7, #56]	; 0x38
 80030a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d01b      	beq.n	80030e6 <USB_ActivateEndpoint+0x4ce>
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	441a      	add	r2, r3
 80030d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80030fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003100:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003104:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003106:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003108:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800310c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	441a      	add	r2, r3
 8003118:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800311a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800311e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312a:	b29b      	uxth	r3, r3
 800312c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003144:	867b      	strh	r3, [r7, #50]	; 0x32
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	441a      	add	r2, r3
 8003150:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800315a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003162:	b29b      	uxth	r3, r3
 8003164:	8013      	strh	r3, [r2, #0]
 8003166:	e0ba      	b.n	80032de <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003178:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800317c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01d      	beq.n	80031c0 <USB_ActivateEndpoint+0x5a8>
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	b29b      	uxth	r3, r3
 8003192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	441a      	add	r2, r3
 80031a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80031ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031bc:	b29b      	uxth	r3, r3
 80031be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80031d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01d      	beq.n	8003218 <USB_ActivateEndpoint+0x600>
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	441a      	add	r2, r3
 8003200:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003210:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003214:	b29b      	uxth	r3, r3
 8003216:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	78db      	ldrb	r3, [r3, #3]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d024      	beq.n	800326a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
 800322e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003236:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800323a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800323e:	f083 0320 	eor.w	r3, r3, #32
 8003242:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	441a      	add	r2, r3
 8003250:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800325c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003264:	b29b      	uxth	r3, r3
 8003266:	8013      	strh	r3, [r2, #0]
 8003268:	e01d      	b.n	80032a6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b29b      	uxth	r3, r3
 8003278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003280:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	441a      	add	r2, r3
 800328e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800329a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	441a      	add	r2, r3
 80032c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80032ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032da:	b29b      	uxth	r3, r3
 80032dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80032de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	376c      	adds	r7, #108	; 0x6c
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b08d      	sub	sp, #52	; 0x34
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	7b1b      	ldrb	r3, [r3, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f040 808e 	bne.w	800341c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	785b      	ldrb	r3, [r3, #1]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d044      	beq.n	8003392 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	81bb      	strh	r3, [r7, #12]
 8003316:	89bb      	ldrh	r3, [r7, #12]
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01b      	beq.n	8003358 <USB_DeactivateEndpoint+0x6c>
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003336:	817b      	strh	r3, [r7, #10]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	441a      	add	r2, r3
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800334c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003350:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003354:	b29b      	uxth	r3, r3
 8003356:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	b29b      	uxth	r3, r3
 8003366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800336a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800336e:	813b      	strh	r3, [r7, #8]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	441a      	add	r2, r3
 800337a:	893b      	ldrh	r3, [r7, #8]
 800337c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800338c:	b29b      	uxth	r3, r3
 800338e:	8013      	strh	r3, [r2, #0]
 8003390:	e192      	b.n	80036b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	827b      	strh	r3, [r7, #18]
 80033a0:	8a7b      	ldrh	r3, [r7, #18]
 80033a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d01b      	beq.n	80033e2 <USB_DeactivateEndpoint+0xf6>
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c0:	823b      	strh	r3, [r7, #16]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	441a      	add	r2, r3
 80033cc:	8a3b      	ldrh	r3, [r7, #16]
 80033ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033de:	b29b      	uxth	r3, r3
 80033e0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f8:	81fb      	strh	r3, [r7, #14]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	441a      	add	r2, r3
 8003404:	89fb      	ldrh	r3, [r7, #14]
 8003406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800340a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800340e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003416:	b29b      	uxth	r3, r3
 8003418:	8013      	strh	r3, [r2, #0]
 800341a:	e14d      	b.n	80036b8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	785b      	ldrb	r3, [r3, #1]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f040 80a5 	bne.w	8003570 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	843b      	strh	r3, [r7, #32]
 8003434:	8c3b      	ldrh	r3, [r7, #32]
 8003436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d01b      	beq.n	8003476 <USB_DeactivateEndpoint+0x18a>
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003454:	83fb      	strh	r3, [r7, #30]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	441a      	add	r2, r3
 8003460:	8bfb      	ldrh	r3, [r7, #30]
 8003462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800346a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800346e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003472:	b29b      	uxth	r3, r3
 8003474:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	83bb      	strh	r3, [r7, #28]
 8003484:	8bbb      	ldrh	r3, [r7, #28]
 8003486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d01b      	beq.n	80034c6 <USB_DeactivateEndpoint+0x1da>
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a4:	837b      	strh	r3, [r7, #26]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	441a      	add	r2, r3
 80034b0:	8b7b      	ldrh	r3, [r7, #26]
 80034b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034dc:	833b      	strh	r3, [r7, #24]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	441a      	add	r2, r3
 80034e8:	8b3b      	ldrh	r3, [r7, #24]
 80034ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	b29b      	uxth	r3, r3
 800350c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003514:	82fb      	strh	r3, [r7, #22]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	441a      	add	r2, r3
 8003520:	8afb      	ldrh	r3, [r7, #22]
 8003522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800352a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800352e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003532:	b29b      	uxth	r3, r3
 8003534:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800354c:	82bb      	strh	r3, [r7, #20]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	441a      	add	r2, r3
 8003558:	8abb      	ldrh	r3, [r7, #20]
 800355a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800355e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800356a:	b29b      	uxth	r3, r3
 800356c:	8013      	strh	r3, [r2, #0]
 800356e:	e0a3      	b.n	80036b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800357e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01b      	beq.n	80035c0 <USB_DeactivateEndpoint+0x2d4>
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800359a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	441a      	add	r2, r3
 80035aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80035ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035bc:	b29b      	uxth	r3, r3
 80035be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80035ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01b      	beq.n	8003610 <USB_DeactivateEndpoint+0x324>
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	441a      	add	r2, r3
 80035fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003608:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800360c:	b29b      	uxth	r3, r3
 800360e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	441a      	add	r2, r3
 8003632:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800363c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003644:	b29b      	uxth	r3, r3
 8003646:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800365a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800365e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	441a      	add	r2, r3
 800366a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800366c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367c:	b29b      	uxth	r3, r3
 800367e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b29b      	uxth	r3, r3
 800368e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003696:	847b      	strh	r3, [r7, #34]	; 0x22
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	441a      	add	r2, r3
 80036a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3734      	adds	r7, #52	; 0x34
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b0cc      	sub	sp, #304	; 0x130
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80036d2:	6018      	str	r0, [r3, #0]
 80036d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80036dc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	785b      	ldrb	r3, [r3, #1]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	f041 817d 	bne.w	80049ea <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80036f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699a      	ldr	r2, [r3, #24]
 80036fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	429a      	cmp	r2, r3
 800370a:	d908      	bls.n	800371e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800370c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800371c:	e007      	b.n	800372e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800371e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800372e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003732:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	7b1b      	ldrb	r3, [r3, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d152      	bne.n	80037e4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800373e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003742:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6959      	ldr	r1, [r3, #20]
 800374a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800374e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	88da      	ldrh	r2, [r3, #6]
 8003756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800375a:	b29b      	uxth	r3, r3
 800375c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003760:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003764:	6800      	ldr	r0, [r0, #0]
 8003766:	f001 ff23 	bl	80055b0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800376a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800376e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003772:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003776:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003782:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800378c:	b29b      	uxth	r3, r3
 800378e:	4619      	mov	r1, r3
 8003790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003794:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003798:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800379c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	440a      	add	r2, r1
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	011a      	lsls	r2, r3, #4
 80037b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037b8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4413      	add	r3, r2
 80037c0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80037c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	801a      	strh	r2, [r3, #0]
 80037e0:	f001 b8b5 	b.w	800494e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80037e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	78db      	ldrb	r3, [r3, #3]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	f040 84c6 	bne.w	8004182 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80037f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6a1a      	ldr	r2, [r3, #32]
 8003802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	429a      	cmp	r2, r3
 8003810:	f240 8443 	bls.w	800409a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003818:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800383e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003842:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800384c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	441a      	add	r2, r3
 8003858:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800385c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003864:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800386c:	b29b      	uxth	r3, r3
 800386e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a1a      	ldr	r2, [r3, #32]
 800387c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003880:	1ad2      	subs	r2, r2, r3
 8003882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800388e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003892:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800389c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 823e 	beq.w	8003d32 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80038b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038ba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80038be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80038c2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	785b      	ldrb	r3, [r3, #1]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 809a 	bne.w	8003a10 <USB_EPStartXfer+0x34c>
 80038dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80038e8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038fe:	b29b      	uxth	r3, r3
 8003900:	4619      	mov	r1, r3
 8003902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800390a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800390e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	440a      	add	r2, r1
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800391c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	011a      	lsls	r2, r3, #4
 8003926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800392a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4413      	add	r3, r2
 8003932:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800393a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d122      	bne.n	800398e <USB_EPStartXfer+0x2ca>
 8003948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800394c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	b29b      	uxth	r3, r3
 8003956:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800395a:	b29a      	uxth	r2, r3
 800395c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003960:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	801a      	strh	r2, [r3, #0]
 8003968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800396c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	b29b      	uxth	r3, r3
 8003976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800397a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800397e:	b29a      	uxth	r2, r3
 8003980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003984:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	801a      	strh	r2, [r3, #0]
 800398c:	e079      	b.n	8003a82 <USB_EPStartXfer+0x3be>
 800398e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003992:	2b3e      	cmp	r3, #62	; 0x3e
 8003994:	d81b      	bhi.n	80039ce <USB_EPStartXfer+0x30a>
 8003996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800399a:	085b      	lsrs	r3, r3, #1
 800399c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80039a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d004      	beq.n	80039b6 <USB_EPStartXfer+0x2f2>
 80039ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039b0:	3301      	adds	r3, #1
 80039b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80039b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	029b      	lsls	r3, r3, #10
 80039be:	b29a      	uxth	r2, r3
 80039c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	801a      	strh	r2, [r3, #0]
 80039cc:	e059      	b.n	8003a82 <USB_EPStartXfer+0x3be>
 80039ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80039d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d104      	bne.n	80039ee <USB_EPStartXfer+0x32a>
 80039e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039e8:	3b01      	subs	r3, #1
 80039ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80039ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	029b      	lsls	r3, r3, #10
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	801a      	strh	r2, [r3, #0]
 8003a0e:	e038      	b.n	8003a82 <USB_EPStartXfer+0x3be>
 8003a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	785b      	ldrb	r3, [r3, #1]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d130      	bne.n	8003a82 <USB_EPStartXfer+0x3be>
 8003a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	4619      	mov	r1, r3
 8003a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a36:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003a3a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003a3e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	440a      	add	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	011a      	lsls	r2, r3, #4
 8003a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a5a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4413      	add	r3, r2
 8003a62:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	895b      	ldrh	r3, [r3, #10]
 8003a8e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6959      	ldr	r1, [r3, #20]
 8003a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003aa8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003aac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003ab0:	6800      	ldr	r0, [r0, #0]
 8003ab2:	f001 fd7d 	bl	80055b0 <USB_WritePMA>
            ep->xfer_buff += len;
 8003ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ac6:	441a      	add	r2, r3
 8003ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003acc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6a1a      	ldr	r2, [r3, #32]
 8003ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d90f      	bls.n	8003b10 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8003af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003af4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6a1a      	ldr	r2, [r3, #32]
 8003afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b00:	1ad2      	subs	r2, r2, r3
 8003b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	621a      	str	r2, [r3, #32]
 8003b0e:	e00e      	b.n	8003b2e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8003b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	785b      	ldrb	r3, [r3, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f040 809a 	bne.w	8003c74 <USB_EPStartXfer+0x5b0>
 8003b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b44:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003b4c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	4619      	mov	r1, r3
 8003b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b6a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003b72:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	440a      	add	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	011a      	lsls	r2, r3, #4
 8003b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b8e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4413      	add	r3, r2
 8003b96:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d122      	bne.n	8003bf2 <USB_EPStartXfer+0x52e>
 8003bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bb0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bc4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	801a      	strh	r2, [r3, #0]
 8003bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bd0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003be8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	801a      	strh	r2, [r3, #0]
 8003bf0:	e083      	b.n	8003cfa <USB_EPStartXfer+0x636>
 8003bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bf6:	2b3e      	cmp	r3, #62	; 0x3e
 8003bf8:	d81b      	bhi.n	8003c32 <USB_EPStartXfer+0x56e>
 8003bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d004      	beq.n	8003c1a <USB_EPStartXfer+0x556>
 8003c10:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003c14:	3301      	adds	r3, #1
 8003c16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003c1a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	029b      	lsls	r3, r3, #10
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	801a      	strh	r2, [r3, #0]
 8003c30:	e063      	b.n	8003cfa <USB_EPStartXfer+0x636>
 8003c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <USB_EPStartXfer+0x58e>
 8003c48:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003c52:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	029b      	lsls	r3, r3, #10
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	801a      	strh	r2, [r3, #0]
 8003c72:	e042      	b.n	8003cfa <USB_EPStartXfer+0x636>
 8003c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	785b      	ldrb	r3, [r3, #1]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d13a      	bne.n	8003cfa <USB_EPStartXfer+0x636>
 8003c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003c8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003c90:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003cb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003cb6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	440a      	add	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	011a      	lsls	r2, r3, #4
 8003cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cd2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ce2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cf2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	891b      	ldrh	r3, [r3, #8]
 8003d06:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6959      	ldr	r1, [r3, #20]
 8003d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003d20:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003d24:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003d28:	6800      	ldr	r0, [r0, #0]
 8003d2a:	f001 fc41 	bl	80055b0 <USB_WritePMA>
 8003d2e:	f000 be0e 	b.w	800494e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	785b      	ldrb	r3, [r3, #1]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d16d      	bne.n	8003e1e <USB_EPStartXfer+0x75a>
 8003d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d62:	4413      	add	r3, r2
 8003d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	011a      	lsls	r2, r3, #4
 8003d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d76:	4413      	add	r3, r2
 8003d78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d112      	bne.n	8003dac <USB_EPStartXfer+0x6e8>
 8003d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d94:	801a      	strh	r2, [r3, #0]
 8003d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da8:	801a      	strh	r2, [r3, #0]
 8003daa:	e063      	b.n	8003e74 <USB_EPStartXfer+0x7b0>
 8003dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003db0:	2b3e      	cmp	r3, #62	; 0x3e
 8003db2:	d817      	bhi.n	8003de4 <USB_EPStartXfer+0x720>
 8003db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d004      	beq.n	8003dd4 <USB_EPStartXfer+0x710>
 8003dca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003dce:	3301      	adds	r3, #1
 8003dd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003dd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	029b      	lsls	r3, r3, #10
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	e047      	b.n	8003e74 <USB_EPStartXfer+0x7b0>
 8003de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <USB_EPStartXfer+0x740>
 8003dfa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	029b      	lsls	r3, r3, #10
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e1a:	801a      	strh	r2, [r3, #0]
 8003e1c:	e02a      	b.n	8003e74 <USB_EPStartXfer+0x7b0>
 8003e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	785b      	ldrb	r3, [r3, #1]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d122      	bne.n	8003e74 <USB_EPStartXfer+0x7b0>
 8003e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	653b      	str	r3, [r7, #80]	; 0x50
 8003e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e4e:	4413      	add	r3, r2
 8003e50:	653b      	str	r3, [r7, #80]	; 0x50
 8003e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	011a      	lsls	r2, r3, #4
 8003e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e62:	4413      	add	r3, r2
 8003e64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	891b      	ldrh	r3, [r3, #8]
 8003e80:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6959      	ldr	r1, [r3, #20]
 8003e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003e9a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003e9e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003ea2:	6800      	ldr	r0, [r0, #0]
 8003ea4:	f001 fb84 	bl	80055b0 <USB_WritePMA>
            ep->xfer_buff += len;
 8003ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003eac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003eb8:	441a      	add	r2, r3
 8003eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a1a      	ldr	r2, [r3, #32]
 8003ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d90f      	bls.n	8003f02 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8003ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	621a      	str	r2, [r3, #32]
 8003f00:	e00e      	b.n	8003f20 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8003f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	785b      	ldrb	r3, [r3, #1]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d16d      	bne.n	8004018 <USB_EPStartXfer+0x954>
 8003f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5c:	4413      	add	r3, r2
 8003f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	011a      	lsls	r2, r3, #4
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	4413      	add	r3, r2
 8003f72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f76:	637b      	str	r3, [r7, #52]	; 0x34
 8003f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d112      	bne.n	8003fa6 <USB_EPStartXfer+0x8e2>
 8003f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8e:	801a      	strh	r2, [r3, #0]
 8003f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa2:	801a      	strh	r2, [r3, #0]
 8003fa4:	e05d      	b.n	8004062 <USB_EPStartXfer+0x99e>
 8003fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003faa:	2b3e      	cmp	r3, #62	; 0x3e
 8003fac:	d817      	bhi.n	8003fde <USB_EPStartXfer+0x91a>
 8003fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d004      	beq.n	8003fce <USB_EPStartXfer+0x90a>
 8003fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fc8:	3301      	adds	r3, #1
 8003fca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	029b      	lsls	r3, r3, #10
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fda:	801a      	strh	r2, [r3, #0]
 8003fdc:	e041      	b.n	8004062 <USB_EPStartXfer+0x99e>
 8003fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <USB_EPStartXfer+0x93a>
 8003ff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003ffe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004002:	b29b      	uxth	r3, r3
 8004004:	029b      	lsls	r3, r3, #10
 8004006:	b29b      	uxth	r3, r3
 8004008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800400c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004010:	b29a      	uxth	r2, r3
 8004012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004014:	801a      	strh	r2, [r3, #0]
 8004016:	e024      	b.n	8004062 <USB_EPStartXfer+0x99e>
 8004018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800401c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	785b      	ldrb	r3, [r3, #1]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d11c      	bne.n	8004062 <USB_EPStartXfer+0x99e>
 8004028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800402c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800403c:	4413      	add	r3, r2
 800403e:	643b      	str	r3, [r7, #64]	; 0x40
 8004040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	011a      	lsls	r2, r3, #4
 800404e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004050:	4413      	add	r3, r2
 8004052:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800405c:	b29a      	uxth	r2, r3
 800405e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004060:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	895b      	ldrh	r3, [r3, #10]
 800406e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6959      	ldr	r1, [r3, #20]
 800407e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004082:	b29b      	uxth	r3, r3
 8004084:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004088:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800408c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004090:	6800      	ldr	r0, [r0, #0]
 8004092:	f001 fa8d 	bl	80055b0 <USB_WritePMA>
 8004096:	f000 bc5a 	b.w	800494e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800409a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800409e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80040aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80040cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80040d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	441a      	add	r2, r3
 80040ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80040f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004102:	b29b      	uxth	r3, r3
 8004104:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800410a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004116:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004120:	b29b      	uxth	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004126:	4413      	add	r3, r2
 8004128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800412a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800412e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	011a      	lsls	r2, r3, #4
 8004138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800413a:	4413      	add	r3, r2
 800413c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004140:	65bb      	str	r3, [r7, #88]	; 0x58
 8004142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004146:	b29a      	uxth	r2, r3
 8004148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800414a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800414c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004150:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	891b      	ldrh	r3, [r3, #8]
 8004158:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800415c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004160:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6959      	ldr	r1, [r3, #20]
 8004168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800416c:	b29b      	uxth	r3, r3
 800416e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004172:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004176:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800417a:	6800      	ldr	r0, [r0, #0]
 800417c:	f001 fa18 	bl	80055b0 <USB_WritePMA>
 8004180:	e3e5      	b.n	800494e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004186:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80041ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	441a      	add	r2, r3
 80041c6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80041ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80041d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041da:	b29b      	uxth	r3, r3
 80041dc:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80041de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6a1a      	ldr	r2, [r3, #32]
 80041ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041ee:	1ad2      	subs	r2, r2, r3
 80041f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80041fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800420a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 81bc 	beq.w	800459c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004228:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	785b      	ldrb	r3, [r3, #1]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d16d      	bne.n	800431e <USB_EPStartXfer+0xc5a>
 8004242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004246:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	67bb      	str	r3, [r7, #120]	; 0x78
 800424e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004252:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800425c:	b29b      	uxth	r3, r3
 800425e:	461a      	mov	r2, r3
 8004260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004262:	4413      	add	r3, r2
 8004264:	67bb      	str	r3, [r7, #120]	; 0x78
 8004266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800426a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	011a      	lsls	r2, r3, #4
 8004274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004276:	4413      	add	r3, r2
 8004278:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800427c:	677b      	str	r3, [r7, #116]	; 0x74
 800427e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d112      	bne.n	80042ac <USB_EPStartXfer+0xbe8>
 8004286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	b29b      	uxth	r3, r3
 800428c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004290:	b29a      	uxth	r2, r3
 8004292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004294:	801a      	strh	r2, [r3, #0]
 8004296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	b29b      	uxth	r3, r3
 800429c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042a8:	801a      	strh	r2, [r3, #0]
 80042aa:	e060      	b.n	800436e <USB_EPStartXfer+0xcaa>
 80042ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042b0:	2b3e      	cmp	r3, #62	; 0x3e
 80042b2:	d817      	bhi.n	80042e4 <USB_EPStartXfer+0xc20>
 80042b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042b8:	085b      	lsrs	r3, r3, #1
 80042ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80042be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d004      	beq.n	80042d4 <USB_EPStartXfer+0xc10>
 80042ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80042ce:	3301      	adds	r3, #1
 80042d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80042d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80042d8:	b29b      	uxth	r3, r3
 80042da:	029b      	lsls	r3, r3, #10
 80042dc:	b29a      	uxth	r2, r3
 80042de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042e0:	801a      	strh	r2, [r3, #0]
 80042e2:	e044      	b.n	800436e <USB_EPStartXfer+0xcaa>
 80042e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80042ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d104      	bne.n	8004304 <USB_EPStartXfer+0xc40>
 80042fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80042fe:	3b01      	subs	r3, #1
 8004300:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004304:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004308:	b29b      	uxth	r3, r3
 800430a:	029b      	lsls	r3, r3, #10
 800430c:	b29b      	uxth	r3, r3
 800430e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004316:	b29a      	uxth	r2, r3
 8004318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800431a:	801a      	strh	r2, [r3, #0]
 800431c:	e027      	b.n	800436e <USB_EPStartXfer+0xcaa>
 800431e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	785b      	ldrb	r3, [r3, #1]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d11f      	bne.n	800436e <USB_EPStartXfer+0xcaa>
 800432e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004332:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433c:	b29b      	uxth	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004344:	4413      	add	r3, r2
 8004346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800434a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800434e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	011a      	lsls	r2, r3, #4
 8004358:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800435c:	4413      	add	r3, r2
 800435e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004362:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004368:	b29a      	uxth	r2, r3
 800436a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800436c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800436e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	895b      	ldrh	r3, [r3, #10]
 800437a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800437e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6959      	ldr	r1, [r3, #20]
 800438a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800438e:	b29b      	uxth	r3, r3
 8004390:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004394:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004398:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800439c:	6800      	ldr	r0, [r0, #0]
 800439e:	f001 f907 	bl	80055b0 <USB_WritePMA>
          ep->xfer_buff += len;
 80043a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043b2:	441a      	add	r2, r3
 80043b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80043c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6a1a      	ldr	r2, [r3, #32]
 80043cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d90f      	bls.n	80043fc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80043dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a1a      	ldr	r2, [r3, #32]
 80043e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043ec:	1ad2      	subs	r2, r2, r3
 80043ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	621a      	str	r2, [r3, #32]
 80043fa:	e00e      	b.n	800441a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80043fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800440c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2200      	movs	r2, #0
 8004418:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800441a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8295 	beq.w	800494e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	785b      	ldrb	r3, [r3, #1]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d16d      	bne.n	8004510 <USB_EPStartXfer+0xe4c>
 8004434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004438:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004444:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444e:	b29b      	uxth	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004454:	4413      	add	r3, r2
 8004456:	66bb      	str	r3, [r7, #104]	; 0x68
 8004458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800445c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	011a      	lsls	r2, r3, #4
 8004466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004468:	4413      	add	r3, r2
 800446a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800446e:	667b      	str	r3, [r7, #100]	; 0x64
 8004470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004474:	2b00      	cmp	r3, #0
 8004476:	d112      	bne.n	800449e <USB_EPStartXfer+0xdda>
 8004478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004482:	b29a      	uxth	r2, r3
 8004484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004486:	801a      	strh	r2, [r3, #0]
 8004488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b29b      	uxth	r3, r3
 800448e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004496:	b29a      	uxth	r2, r3
 8004498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800449a:	801a      	strh	r2, [r3, #0]
 800449c:	e063      	b.n	8004566 <USB_EPStartXfer+0xea2>
 800449e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044a2:	2b3e      	cmp	r3, #62	; 0x3e
 80044a4:	d817      	bhi.n	80044d6 <USB_EPStartXfer+0xe12>
 80044a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044aa:	085b      	lsrs	r3, r3, #1
 80044ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80044b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <USB_EPStartXfer+0xe02>
 80044bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c0:	3301      	adds	r3, #1
 80044c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	029b      	lsls	r3, r3, #10
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044d2:	801a      	strh	r2, [r3, #0]
 80044d4:	e047      	b.n	8004566 <USB_EPStartXfer+0xea2>
 80044d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80044e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <USB_EPStartXfer+0xe32>
 80044ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f0:	3b01      	subs	r3, #1
 80044f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	029b      	lsls	r3, r3, #10
 80044fe:	b29b      	uxth	r3, r3
 8004500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004508:	b29a      	uxth	r2, r3
 800450a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800450c:	801a      	strh	r2, [r3, #0]
 800450e:	e02a      	b.n	8004566 <USB_EPStartXfer+0xea2>
 8004510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d122      	bne.n	8004566 <USB_EPStartXfer+0xea2>
 8004520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	673b      	str	r3, [r7, #112]	; 0x70
 800452c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004530:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800453a:	b29b      	uxth	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004540:	4413      	add	r3, r2
 8004542:	673b      	str	r3, [r7, #112]	; 0x70
 8004544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	011a      	lsls	r2, r3, #4
 8004552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004554:	4413      	add	r3, r2
 8004556:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800455a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800455c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004560:	b29a      	uxth	r2, r3
 8004562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004564:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800456a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	891b      	ldrh	r3, [r3, #8]
 8004572:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800457a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6959      	ldr	r1, [r3, #20]
 8004582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004586:	b29b      	uxth	r3, r3
 8004588:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800458c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004590:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004594:	6800      	ldr	r0, [r0, #0]
 8004596:	f001 f80b 	bl	80055b0 <USB_WritePMA>
 800459a:	e1d8      	b.n	800494e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800459c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	785b      	ldrb	r3, [r3, #1]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d178      	bne.n	800469e <USB_EPStartXfer+0xfda>
 80045ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	461a      	mov	r2, r3
 80045cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045d0:	4413      	add	r3, r2
 80045d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	011a      	lsls	r2, r3, #4
 80045e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045e8:	4413      	add	r3, r2
 80045ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d116      	bne.n	8004628 <USB_EPStartXfer+0xf64>
 80045fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004606:	b29a      	uxth	r2, r3
 8004608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800460c:	801a      	strh	r2, [r3, #0]
 800460e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	b29b      	uxth	r3, r3
 8004616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800461a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800461e:	b29a      	uxth	r2, r3
 8004620:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004624:	801a      	strh	r2, [r3, #0]
 8004626:	e06b      	b.n	8004700 <USB_EPStartXfer+0x103c>
 8004628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800462c:	2b3e      	cmp	r3, #62	; 0x3e
 800462e:	d818      	bhi.n	8004662 <USB_EPStartXfer+0xf9e>
 8004630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004634:	085b      	lsrs	r3, r3, #1
 8004636:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800463a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <USB_EPStartXfer+0xf8c>
 8004646:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800464a:	3301      	adds	r3, #1
 800464c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004650:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004654:	b29b      	uxth	r3, r3
 8004656:	029b      	lsls	r3, r3, #10
 8004658:	b29a      	uxth	r2, r3
 800465a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800465e:	801a      	strh	r2, [r3, #0]
 8004660:	e04e      	b.n	8004700 <USB_EPStartXfer+0x103c>
 8004662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800466c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004670:	f003 031f 	and.w	r3, r3, #31
 8004674:	2b00      	cmp	r3, #0
 8004676:	d104      	bne.n	8004682 <USB_EPStartXfer+0xfbe>
 8004678:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800467c:	3b01      	subs	r3, #1
 800467e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004682:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004686:	b29b      	uxth	r3, r3
 8004688:	029b      	lsls	r3, r3, #10
 800468a:	b29b      	uxth	r3, r3
 800468c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004694:	b29a      	uxth	r2, r3
 8004696:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800469a:	801a      	strh	r2, [r3, #0]
 800469c:	e030      	b.n	8004700 <USB_EPStartXfer+0x103c>
 800469e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	785b      	ldrb	r3, [r3, #1]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d128      	bne.n	8004700 <USB_EPStartXfer+0x103c>
 80046ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80046bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046d2:	4413      	add	r3, r2
 80046d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80046d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	011a      	lsls	r2, r3, #4
 80046e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046ea:	4413      	add	r3, r2
 80046ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	891b      	ldrh	r3, [r3, #8]
 800470c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6959      	ldr	r1, [r3, #20]
 800471c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004720:	b29b      	uxth	r3, r3
 8004722:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004726:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800472a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800472e:	6800      	ldr	r0, [r0, #0]
 8004730:	f000 ff3e 	bl	80055b0 <USB_WritePMA>
          ep->xfer_buff += len;
 8004734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004744:	441a      	add	r2, r3
 8004746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800474a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6a1a      	ldr	r2, [r3, #32]
 800475e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	429a      	cmp	r2, r3
 800476c:	d90f      	bls.n	800478e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800476e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6a1a      	ldr	r2, [r3, #32]
 800477a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800477e:	1ad2      	subs	r2, r2, r3
 8004780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	621a      	str	r2, [r3, #32]
 800478c:	e00e      	b.n	80047ac <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800478e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800479e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2200      	movs	r2, #0
 80047aa:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80047ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80cc 	beq.w	800494e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80047b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d178      	bne.n	80048c6 <USB_EPStartXfer+0x1202>
 80047d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047f8:	4413      	add	r3, r2
 80047fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	011a      	lsls	r2, r3, #4
 800480c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004810:	4413      	add	r3, r2
 8004812:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004816:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800481a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d116      	bne.n	8004850 <USB_EPStartXfer+0x118c>
 8004822:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800482e:	b29a      	uxth	r2, r3
 8004830:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004846:	b29a      	uxth	r2, r3
 8004848:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800484c:	801a      	strh	r2, [r3, #0]
 800484e:	e064      	b.n	800491a <USB_EPStartXfer+0x1256>
 8004850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004854:	2b3e      	cmp	r3, #62	; 0x3e
 8004856:	d818      	bhi.n	800488a <USB_EPStartXfer+0x11c6>
 8004858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <USB_EPStartXfer+0x11b4>
 800486e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004872:	3301      	adds	r3, #1
 8004874:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800487c:	b29b      	uxth	r3, r3
 800487e:	029b      	lsls	r3, r3, #10
 8004880:	b29a      	uxth	r2, r3
 8004882:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004886:	801a      	strh	r2, [r3, #0]
 8004888:	e047      	b.n	800491a <USB_EPStartXfer+0x1256>
 800488a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004898:	f003 031f 	and.w	r3, r3, #31
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <USB_EPStartXfer+0x11e6>
 80048a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a4:	3b01      	subs	r3, #1
 80048a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80048aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	029b      	lsls	r3, r3, #10
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048bc:	b29a      	uxth	r2, r3
 80048be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048c2:	801a      	strh	r2, [r3, #0]
 80048c4:	e029      	b.n	800491a <USB_EPStartXfer+0x1256>
 80048c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	785b      	ldrb	r3, [r3, #1]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d121      	bne.n	800491a <USB_EPStartXfer+0x1256>
 80048d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048ec:	4413      	add	r3, r2
 80048ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	011a      	lsls	r2, r3, #4
 8004900:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004904:	4413      	add	r3, r2
 8004906:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800490a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800490e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004912:	b29a      	uxth	r2, r3
 8004914:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004918:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800491a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800491e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	895b      	ldrh	r3, [r3, #10]
 8004926:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800492a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800492e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6959      	ldr	r1, [r3, #20]
 8004936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800493a:	b29b      	uxth	r3, r3
 800493c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004940:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004944:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004948:	6800      	ldr	r0, [r0, #0]
 800494a:	f000 fe31 	bl	80055b0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800494e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004952:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800495c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004970:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497c:	8013      	strh	r3, [r2, #0]
 800497e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004982:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004986:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800498a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800498e:	8812      	ldrh	r2, [r2, #0]
 8004990:	f082 0210 	eor.w	r2, r2, #16
 8004994:	801a      	strh	r2, [r3, #0]
 8004996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800499a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800499e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049a2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80049a6:	8812      	ldrh	r2, [r2, #0]
 80049a8:	f082 0220 	eor.w	r2, r2, #32
 80049ac:	801a      	strh	r2, [r3, #0]
 80049ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	441a      	add	r2, r3
 80049c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049cc:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	8013      	strh	r3, [r2, #0]
 80049e6:	f000 bc9f 	b.w	8005328 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80049ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	7b1b      	ldrb	r3, [r3, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f040 80ae 	bne.w	8004b58 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80049fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699a      	ldr	r2, [r3, #24]
 8004a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d917      	bls.n	8004a48 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8004a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8004a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	699a      	ldr	r2, [r3, #24]
 8004a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a38:	1ad2      	subs	r2, r2, r3
 8004a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	619a      	str	r2, [r3, #24]
 8004a46:	e00e      	b.n	8004a66 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8004a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8004a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2200      	movs	r2, #0
 8004a64:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	011a      	lsls	r2, r3, #4
 8004a9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d116      	bne.n	8004ae2 <USB_EPStartXfer+0x141e>
 8004ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ac6:	801a      	strh	r2, [r3, #0]
 8004ac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	e3e8      	b.n	80052b4 <USB_EPStartXfer+0x1bf0>
 8004ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ae8:	d818      	bhi.n	8004b1c <USB_EPStartXfer+0x1458>
 8004aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d004      	beq.n	8004b0a <USB_EPStartXfer+0x1446>
 8004b00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b04:	3301      	adds	r3, #1
 8004b06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004b0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	029b      	lsls	r3, r3, #10
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b18:	801a      	strh	r2, [r3, #0]
 8004b1a:	e3cb      	b.n	80052b4 <USB_EPStartXfer+0x1bf0>
 8004b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d104      	bne.n	8004b3c <USB_EPStartXfer+0x1478>
 8004b32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b36:	3b01      	subs	r3, #1
 8004b38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004b3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	029b      	lsls	r3, r3, #10
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b54:	801a      	strh	r2, [r3, #0]
 8004b56:	e3ad      	b.n	80052b4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	78db      	ldrb	r3, [r3, #3]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	f040 8200 	bne.w	8004f6a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	785b      	ldrb	r3, [r3, #1]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f040 8091 	bne.w	8004c9e <USB_EPStartXfer+0x15da>
 8004b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	011a      	lsls	r2, r3, #4
 8004bb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bb8:	4413      	add	r3, r2
 8004bba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d116      	bne.n	8004c00 <USB_EPStartXfer+0x153c>
 8004bd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004be4:	801a      	strh	r2, [r3, #0]
 8004be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bfc:	801a      	strh	r2, [r3, #0]
 8004bfe:	e083      	b.n	8004d08 <USB_EPStartXfer+0x1644>
 8004c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b3e      	cmp	r3, #62	; 0x3e
 8004c0e:	d820      	bhi.n	8004c52 <USB_EPStartXfer+0x158e>
 8004c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d004      	beq.n	8004c40 <USB_EPStartXfer+0x157c>
 8004c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	029b      	lsls	r3, r3, #10
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c4e:	801a      	strh	r2, [r3, #0]
 8004c50:	e05a      	b.n	8004d08 <USB_EPStartXfer+0x1644>
 8004c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d104      	bne.n	8004c82 <USB_EPStartXfer+0x15be>
 8004c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	029b      	lsls	r3, r3, #10
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	e034      	b.n	8004d08 <USB_EPStartXfer+0x1644>
 8004c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	785b      	ldrb	r3, [r3, #1]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d12c      	bne.n	8004d08 <USB_EPStartXfer+0x1644>
 8004cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	011a      	lsls	r2, r3, #4
 8004ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cea:	4413      	add	r3, r2
 8004cec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	785b      	ldrb	r3, [r3, #1]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f040 8091 	bne.w	8004e4a <USB_EPStartXfer+0x1786>
 8004d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	461a      	mov	r2, r3
 8004d48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	011a      	lsls	r2, r3, #4
 8004d60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d64:	4413      	add	r3, r2
 8004d66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d116      	bne.n	8004dac <USB_EPStartXfer+0x16e8>
 8004d7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d90:	801a      	strh	r2, [r3, #0]
 8004d92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	e07c      	b.n	8004ea6 <USB_EPStartXfer+0x17e2>
 8004dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b3e      	cmp	r3, #62	; 0x3e
 8004dba:	d820      	bhi.n	8004dfe <USB_EPStartXfer+0x173a>
 8004dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d004      	beq.n	8004dec <USB_EPStartXfer+0x1728>
 8004de2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004de6:	3301      	adds	r3, #1
 8004de8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004dec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	029b      	lsls	r3, r3, #10
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004dfa:	801a      	strh	r2, [r3, #0]
 8004dfc:	e053      	b.n	8004ea6 <USB_EPStartXfer+0x17e2>
 8004dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f003 031f 	and.w	r3, r3, #31
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d104      	bne.n	8004e2e <USB_EPStartXfer+0x176a>
 8004e24:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	029b      	lsls	r3, r3, #10
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e46:	801a      	strh	r2, [r3, #0]
 8004e48:	e02d      	b.n	8004ea6 <USB_EPStartXfer+0x17e2>
 8004e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d125      	bne.n	8004ea6 <USB_EPStartXfer+0x17e2>
 8004e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e70:	4413      	add	r3, r2
 8004e72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	011a      	lsls	r2, r3, #4
 8004e84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e88:	4413      	add	r3, r2
 8004e8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ea4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 81fe 	beq.w	80052b4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004ed8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <USB_EPStartXfer+0x182c>
 8004ee4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10d      	bne.n	8004f0c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004ef0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f040 81db 	bne.w	80052b4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004efe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f040 81d4 	bne.w	80052b4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f32:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8004f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	441a      	add	r2, r3
 8004f50:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	8013      	strh	r3, [r2, #0]
 8004f68:	e1a4      	b.n	80052b4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	78db      	ldrb	r3, [r3, #3]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	f040 819a 	bne.w	80052b0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d917      	bls.n	8004fc8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8004f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8004fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699a      	ldr	r2, [r3, #24]
 8004fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fb8:	1ad2      	subs	r2, r2, r3
 8004fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	619a      	str	r2, [r3, #24]
 8004fc6:	e00e      	b.n	8004fe6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8004fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8004fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d178      	bne.n	80050e8 <USB_EPStartXfer+0x1a24>
 8004ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005008:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005012:	b29b      	uxth	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800501a:	4413      	add	r3, r2
 800501c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005024:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	011a      	lsls	r2, r3, #4
 800502e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005032:	4413      	add	r3, r2
 8005034:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005038:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800503c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d116      	bne.n	8005072 <USB_EPStartXfer+0x19ae>
 8005044:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005050:	b29a      	uxth	r2, r3
 8005052:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005056:	801a      	strh	r2, [r3, #0]
 8005058:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005068:	b29a      	uxth	r2, r3
 800506a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800506e:	801a      	strh	r2, [r3, #0]
 8005070:	e06b      	b.n	800514a <USB_EPStartXfer+0x1a86>
 8005072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005076:	2b3e      	cmp	r3, #62	; 0x3e
 8005078:	d818      	bhi.n	80050ac <USB_EPStartXfer+0x19e8>
 800507a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d004      	beq.n	800509a <USB_EPStartXfer+0x19d6>
 8005090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005094:	3301      	adds	r3, #1
 8005096:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800509a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800509e:	b29b      	uxth	r3, r3
 80050a0:	029b      	lsls	r3, r3, #10
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050a8:	801a      	strh	r2, [r3, #0]
 80050aa:	e04e      	b.n	800514a <USB_EPStartXfer+0x1a86>
 80050ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80050b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d104      	bne.n	80050cc <USB_EPStartXfer+0x1a08>
 80050c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050c6:	3b01      	subs	r3, #1
 80050c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80050cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	029b      	lsls	r3, r3, #10
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050de:	b29a      	uxth	r2, r3
 80050e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050e4:	801a      	strh	r2, [r3, #0]
 80050e6:	e030      	b.n	800514a <USB_EPStartXfer+0x1a86>
 80050e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d128      	bne.n	800514a <USB_EPStartXfer+0x1a86>
 80050f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800510a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005114:	b29b      	uxth	r3, r3
 8005116:	461a      	mov	r2, r3
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511c:	4413      	add	r3, r2
 800511e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	011a      	lsls	r2, r3, #4
 8005130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005134:	4413      	add	r3, r2
 8005136:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800513a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800513e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005142:	b29a      	uxth	r2, r3
 8005144:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005148:	801a      	strh	r2, [r3, #0]
 800514a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	785b      	ldrb	r3, [r3, #1]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d178      	bne.n	800525a <USB_EPStartXfer+0x1b96>
 8005168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005184:	b29b      	uxth	r3, r3
 8005186:	461a      	mov	r2, r3
 8005188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800518c:	4413      	add	r3, r2
 800518e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	011a      	lsls	r2, r3, #4
 80051a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051a4:	4413      	add	r3, r2
 80051a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d116      	bne.n	80051e4 <USB_EPStartXfer+0x1b20>
 80051b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051c8:	801a      	strh	r2, [r3, #0]
 80051ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051da:	b29a      	uxth	r2, r3
 80051dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	e067      	b.n	80052b4 <USB_EPStartXfer+0x1bf0>
 80051e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e8:	2b3e      	cmp	r3, #62	; 0x3e
 80051ea:	d818      	bhi.n	800521e <USB_EPStartXfer+0x1b5a>
 80051ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f0:	085b      	lsrs	r3, r3, #1
 80051f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d004      	beq.n	800520c <USB_EPStartXfer+0x1b48>
 8005202:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005206:	3301      	adds	r3, #1
 8005208:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800520c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005210:	b29b      	uxth	r3, r3
 8005212:	029b      	lsls	r3, r3, #10
 8005214:	b29a      	uxth	r2, r3
 8005216:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800521a:	801a      	strh	r2, [r3, #0]
 800521c:	e04a      	b.n	80052b4 <USB_EPStartXfer+0x1bf0>
 800521e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <USB_EPStartXfer+0x1b7a>
 8005234:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005238:	3b01      	subs	r3, #1
 800523a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800523e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005242:	b29b      	uxth	r3, r3
 8005244:	029b      	lsls	r3, r3, #10
 8005246:	b29b      	uxth	r3, r3
 8005248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005250:	b29a      	uxth	r2, r3
 8005252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	e02c      	b.n	80052b4 <USB_EPStartXfer+0x1bf0>
 800525a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	785b      	ldrb	r3, [r3, #1]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d124      	bne.n	80052b4 <USB_EPStartXfer+0x1bf0>
 800526a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005278:	b29b      	uxth	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005280:	4413      	add	r3, r2
 8005282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	011a      	lsls	r2, r3, #4
 8005294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005298:	4413      	add	r3, r2
 800529a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800529e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	e001      	b.n	80052b4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e03a      	b.n	800532a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80052de:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80052e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80052ea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80052ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80052f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	441a      	add	r2, r3
 8005310:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800531c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005324:	b29b      	uxth	r3, r3
 8005326:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	785b      	ldrb	r3, [r3, #1]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d020      	beq.n	8005388 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800535c:	81bb      	strh	r3, [r7, #12]
 800535e:	89bb      	ldrh	r3, [r7, #12]
 8005360:	f083 0310 	eor.w	r3, r3, #16
 8005364:	81bb      	strh	r3, [r7, #12]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	441a      	add	r2, r3
 8005370:	89bb      	ldrh	r3, [r7, #12]
 8005372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005382:	b29b      	uxth	r3, r3
 8005384:	8013      	strh	r3, [r2, #0]
 8005386:	e01f      	b.n	80053c8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800539a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539e:	81fb      	strh	r3, [r7, #14]
 80053a0:	89fb      	ldrh	r3, [r7, #14]
 80053a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053a6:	81fb      	strh	r3, [r7, #14]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	441a      	add	r2, r3
 80053b2:	89fb      	ldrh	r3, [r7, #14]
 80053b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	7b1b      	ldrb	r3, [r3, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f040 809d 	bne.w	8005522 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	785b      	ldrb	r3, [r3, #1]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d04c      	beq.n	800548a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	823b      	strh	r3, [r7, #16]
 80053fe:	8a3b      	ldrh	r3, [r7, #16]
 8005400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01b      	beq.n	8005440 <USB_EPClearStall+0x6c>
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	b29b      	uxth	r3, r3
 8005416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541e:	81fb      	strh	r3, [r7, #14]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	441a      	add	r2, r3
 800542a:	89fb      	ldrh	r3, [r7, #14]
 800542c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005438:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800543c:	b29b      	uxth	r3, r3
 800543e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	78db      	ldrb	r3, [r3, #3]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d06c      	beq.n	8005522 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800545e:	81bb      	strh	r3, [r7, #12]
 8005460:	89bb      	ldrh	r3, [r7, #12]
 8005462:	f083 0320 	eor.w	r3, r3, #32
 8005466:	81bb      	strh	r3, [r7, #12]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	441a      	add	r2, r3
 8005472:	89bb      	ldrh	r3, [r7, #12]
 8005474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800547c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005484:	b29b      	uxth	r3, r3
 8005486:	8013      	strh	r3, [r2, #0]
 8005488:	e04b      	b.n	8005522 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	82fb      	strh	r3, [r7, #22]
 8005498:	8afb      	ldrh	r3, [r7, #22]
 800549a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d01b      	beq.n	80054da <USB_EPClearStall+0x106>
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b8:	82bb      	strh	r3, [r7, #20]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	441a      	add	r2, r3
 80054c4:	8abb      	ldrh	r3, [r7, #20]
 80054c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f0:	827b      	strh	r3, [r7, #18]
 80054f2:	8a7b      	ldrh	r3, [r7, #18]
 80054f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054f8:	827b      	strh	r3, [r7, #18]
 80054fa:	8a7b      	ldrh	r3, [r7, #18]
 80054fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005500:	827b      	strh	r3, [r7, #18]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	441a      	add	r2, r3
 800550c:	8a7b      	ldrh	r3, [r7, #18]
 800550e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551e:	b29b      	uxth	r3, r3
 8005520:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr

0800552e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	460b      	mov	r3, r1
 8005538:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d103      	bne.n	8005548 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2280      	movs	r2, #128	; 0x80
 8005544:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800558a:	b29b      	uxth	r3, r3
 800558c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800558e:	68fb      	ldr	r3, [r7, #12]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr

0800559a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr

080055b0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b08d      	sub	sp, #52	; 0x34
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	4611      	mov	r1, r2
 80055bc:	461a      	mov	r2, r3
 80055be:	460b      	mov	r3, r1
 80055c0:	80fb      	strh	r3, [r7, #6]
 80055c2:	4613      	mov	r3, r2
 80055c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80055c6:	88bb      	ldrh	r3, [r7, #4]
 80055c8:	3301      	adds	r3, #1
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	005a      	lsls	r2, r3, #1
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055e8:	e01e      	b.n	8005628 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	3301      	adds	r3, #1
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	021b      	lsls	r3, r3, #8
 80055fe:	b29b      	uxth	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	b29a      	uxth	r2, r3
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	3302      	adds	r3, #2
 8005614:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	3302      	adds	r3, #2
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	3301      	adds	r3, #1
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005624:	3b01      	subs	r3, #1
 8005626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1dd      	bne.n	80055ea <USB_WritePMA+0x3a>
  }
}
 800562e:	bf00      	nop
 8005630:	bf00      	nop
 8005632:	3734      	adds	r7, #52	; 0x34
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr

0800563a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800563a:	b480      	push	{r7}
 800563c:	b08b      	sub	sp, #44	; 0x2c
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	4611      	mov	r1, r2
 8005646:	461a      	mov	r2, r3
 8005648:	460b      	mov	r3, r1
 800564a:	80fb      	strh	r3, [r7, #6]
 800564c:	4613      	mov	r3, r2
 800564e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005650:	88bb      	ldrh	r3, [r7, #4]
 8005652:	085b      	lsrs	r3, r3, #1
 8005654:	b29b      	uxth	r3, r3
 8005656:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	005a      	lsls	r2, r3, #1
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800566c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
 8005672:	e01b      	b.n	80056ac <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	3302      	adds	r3, #2
 8005680:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	b2da      	uxtb	r2, r3
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	3301      	adds	r3, #1
 800568e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	0a1b      	lsrs	r3, r3, #8
 8005694:	b2da      	uxtb	r2, r3
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	3301      	adds	r3, #1
 800569e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	3302      	adds	r3, #2
 80056a4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	3b01      	subs	r3, #1
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e0      	bne.n	8005674 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80056b2:	88bb      	ldrh	r3, [r7, #4]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d007      	beq.n	80056ce <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	701a      	strb	r2, [r3, #0]
  }
}
 80056ce:	bf00      	nop
 80056d0:	372c      	adds	r7, #44	; 0x2c
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr

080056d8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80056e4:	2304      	movs	r3, #4
 80056e6:	2203      	movs	r2, #3
 80056e8:	2181      	movs	r1, #129	; 0x81
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f001 fc83 	bl	8006ff6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80056f6:	2010      	movs	r0, #16
 80056f8:	f001 fd92 	bl	8007220 <USBD_static_malloc>
 80056fc:	4602      	mov	r2, r0
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800570e:	2302      	movs	r3, #2
 8005710:	e005      	b.n	800571e <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005718:	2200      	movs	r2, #0
 800571a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	460b      	mov	r3, r1
 8005730:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005732:	2181      	movs	r1, #129	; 0x81
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f001 fc84 	bl	8007042 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005750:	4618      	mov	r0, r3
 8005752:	f001 fd71 	bl	8007238 <USBD_static_free>
    pdev->pClassData = NULL;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005778:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005792:	2b00      	cmp	r3, #0
 8005794:	d045      	beq.n	8005822 <USBD_HID_Setup+0xba>
 8005796:	2b20      	cmp	r3, #32
 8005798:	f040 80d3 	bne.w	8005942 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	785b      	ldrb	r3, [r3, #1]
 80057a0:	3b02      	subs	r3, #2
 80057a2:	2b09      	cmp	r3, #9
 80057a4:	d835      	bhi.n	8005812 <USBD_HID_Setup+0xaa>
 80057a6:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <USBD_HID_Setup+0x44>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	08005803 	.word	0x08005803
 80057b0:	080057e3 	.word	0x080057e3
 80057b4:	08005813 	.word	0x08005813
 80057b8:	08005813 	.word	0x08005813
 80057bc:	08005813 	.word	0x08005813
 80057c0:	08005813 	.word	0x08005813
 80057c4:	08005813 	.word	0x08005813
 80057c8:	08005813 	.word	0x08005813
 80057cc:	080057f1 	.word	0x080057f1
 80057d0:	080057d5 	.word	0x080057d5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	885b      	ldrh	r3, [r3, #2]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	461a      	mov	r2, r3
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	601a      	str	r2, [r3, #0]
          break;
 80057e0:	e01e      	b.n	8005820 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2201      	movs	r2, #1
 80057e6:	4619      	mov	r1, r3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f001 f944 	bl	8006a76 <USBD_CtlSendData>
          break;
 80057ee:	e017      	b.n	8005820 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	885b      	ldrh	r3, [r3, #2]
 80057f4:	0a1b      	lsrs	r3, r3, #8
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	461a      	mov	r2, r3
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	605a      	str	r2, [r3, #4]
          break;
 8005800:	e00e      	b.n	8005820 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	3304      	adds	r3, #4
 8005806:	2201      	movs	r2, #1
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f001 f933 	bl	8006a76 <USBD_CtlSendData>
          break;
 8005810:	e006      	b.n	8005820 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8005812:	6839      	ldr	r1, [r7, #0]
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f001 f8c4 	bl	80069a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800581a:	2302      	movs	r3, #2
 800581c:	75fb      	strb	r3, [r7, #23]
          break;
 800581e:	bf00      	nop
      }
      break;
 8005820:	e096      	b.n	8005950 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	785b      	ldrb	r3, [r3, #1]
 8005826:	2b0b      	cmp	r3, #11
 8005828:	f200 8083 	bhi.w	8005932 <USBD_HID_Setup+0x1ca>
 800582c:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <USBD_HID_Setup+0xcc>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	08005865 	.word	0x08005865
 8005838:	08005933 	.word	0x08005933
 800583c:	08005933 	.word	0x08005933
 8005840:	08005933 	.word	0x08005933
 8005844:	08005933 	.word	0x08005933
 8005848:	08005933 	.word	0x08005933
 800584c:	0800588d 	.word	0x0800588d
 8005850:	08005933 	.word	0x08005933
 8005854:	08005933 	.word	0x08005933
 8005858:	08005933 	.word	0x08005933
 800585c:	080058e5 	.word	0x080058e5
 8005860:	0800590d 	.word	0x0800590d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800586a:	2b03      	cmp	r3, #3
 800586c:	d107      	bne.n	800587e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800586e:	f107 030e 	add.w	r3, r7, #14
 8005872:	2202      	movs	r2, #2
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f001 f8fd 	bl	8006a76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800587c:	e060      	b.n	8005940 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 f88e 	bl	80069a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005886:	2302      	movs	r3, #2
 8005888:	75fb      	strb	r3, [r7, #23]
          break;
 800588a:	e059      	b.n	8005940 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	885b      	ldrh	r3, [r3, #2]
 8005890:	0a1b      	lsrs	r3, r3, #8
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b22      	cmp	r3, #34	; 0x22
 8005896:	d108      	bne.n	80058aa <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	88db      	ldrh	r3, [r3, #6]
 800589c:	2b3f      	cmp	r3, #63	; 0x3f
 800589e:	bf28      	it	cs
 80058a0:	233f      	movcs	r3, #63	; 0x3f
 80058a2:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80058a4:	4b2d      	ldr	r3, [pc, #180]	; (800595c <USBD_HID_Setup+0x1f4>)
 80058a6:	61bb      	str	r3, [r7, #24]
 80058a8:	e015      	b.n	80058d6 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	885b      	ldrh	r3, [r3, #2]
 80058ae:	0a1b      	lsrs	r3, r3, #8
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b21      	cmp	r3, #33	; 0x21
 80058b4:	d108      	bne.n	80058c8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80058b6:	4b2a      	ldr	r3, [pc, #168]	; (8005960 <USBD_HID_Setup+0x1f8>)
 80058b8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	88db      	ldrh	r3, [r3, #6]
 80058be:	2b09      	cmp	r3, #9
 80058c0:	bf28      	it	cs
 80058c2:	2309      	movcs	r3, #9
 80058c4:	83fb      	strh	r3, [r7, #30]
 80058c6:	e006      	b.n	80058d6 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f001 f869 	bl	80069a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80058d0:	2302      	movs	r3, #2
 80058d2:	75fb      	strb	r3, [r7, #23]
            break;
 80058d4:	e034      	b.n	8005940 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80058d6:	8bfb      	ldrh	r3, [r7, #30]
 80058d8:	461a      	mov	r2, r3
 80058da:	69b9      	ldr	r1, [r7, #24]
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f001 f8ca 	bl	8006a76 <USBD_CtlSendData>
          break;
 80058e2:	e02d      	b.n	8005940 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d107      	bne.n	80058fe <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	3308      	adds	r3, #8
 80058f2:	2201      	movs	r2, #1
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f001 f8bd 	bl	8006a76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058fc:	e020      	b.n	8005940 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 f84e 	bl	80069a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005906:	2302      	movs	r3, #2
 8005908:	75fb      	strb	r3, [r7, #23]
          break;
 800590a:	e019      	b.n	8005940 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005912:	2b03      	cmp	r3, #3
 8005914:	d106      	bne.n	8005924 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	885b      	ldrh	r3, [r3, #2]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005922:	e00d      	b.n	8005940 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f001 f83b 	bl	80069a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800592c:	2302      	movs	r3, #2
 800592e:	75fb      	strb	r3, [r7, #23]
          break;
 8005930:	e006      	b.n	8005940 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f001 f834 	bl	80069a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800593a:	2302      	movs	r3, #2
 800593c:	75fb      	strb	r3, [r7, #23]
          break;
 800593e:	bf00      	nop
      }
      break;
 8005940:	e006      	b.n	8005950 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f001 f82c 	bl	80069a2 <USBD_CtlError>
      ret = USBD_FAIL;
 800594a:	2302      	movs	r3, #2
 800594c:	75fb      	strb	r3, [r7, #23]
      break;
 800594e:	bf00      	nop
  }

  return ret;
 8005950:	7dfb      	ldrb	r3, [r7, #23]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3720      	adds	r7, #32
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	200000c8 	.word	0x200000c8
 8005960:	200000b0 	.word	0x200000b0

08005964 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005978:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005980:	2b03      	cmp	r3, #3
 8005982:	d10c      	bne.n	800599e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	7b1b      	ldrb	r3, [r3, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d108      	bne.n	800599e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2201      	movs	r2, #1
 8005990:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	2181      	movs	r1, #129	; 0x81
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f001 fbfa 	bl	8007192 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2222      	movs	r2, #34	; 0x22
 80059b4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80059b6:	4b03      	ldr	r3, [pc, #12]	; (80059c4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000044 	.word	0x20000044

080059c8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2222      	movs	r2, #34	; 0x22
 80059d4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80059d6:	4b03      	ldr	r3, [pc, #12]	; (80059e4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20000068 	.word	0x20000068

080059e8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2222      	movs	r2, #34	; 0x22
 80059f4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80059f6:	4b03      	ldr	r3, [pc, #12]	; (8005a04 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	2000008c 	.word	0x2000008c

08005a08 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bc80      	pop	{r7}
 8005a28:	4770      	bx	lr
	...

08005a2c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	220a      	movs	r2, #10
 8005a38:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8005a3a:	4b03      	ldr	r3, [pc, #12]	; (8005a48 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	200000bc 	.word	0x200000bc

08005a4c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	4613      	mov	r3, r2
 8005a58:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005a60:	2302      	movs	r3, #2
 8005a62:	e01a      	b.n	8005a9a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	79fa      	ldrb	r2, [r7, #7]
 8005a90:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f001 fa4c 	bl	8006f30 <USBD_LL_Init>

  return USBD_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d006      	beq.n	8005ac4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	73fb      	strb	r3, [r7, #15]
 8005ac2:	e001      	b.n	8005ac8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr

08005ad4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f001 fa6f 	bl	8006fc0 <USBD_LL_Start>

  return USBD_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bc80      	pop	{r7}
 8005afe:	4770      	bx	lr

08005b00 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00c      	beq.n	8005b34 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	78fa      	ldrb	r2, [r7, #3]
 8005b24:	4611      	mov	r1, r2
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	4798      	blx	r3
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	460b      	mov	r3, r1
 8005b48:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	78fa      	ldrb	r2, [r7, #3]
 8005b54:	4611      	mov	r1, r2
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	4798      	blx	r3

  return USBD_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fed7 	bl	800692a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b98:	f003 031f 	and.w	r3, r3, #31
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d016      	beq.n	8005bce <USBD_LL_SetupStage+0x6a>
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d81c      	bhi.n	8005bde <USBD_LL_SetupStage+0x7a>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <USBD_LL_SetupStage+0x4a>
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d008      	beq.n	8005bbe <USBD_LL_SetupStage+0x5a>
 8005bac:	e017      	b.n	8005bde <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f9ca 	bl	8005f50 <USBD_StdDevReq>
      break;
 8005bbc:	e01a      	b.n	8005bf4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fa2c 	bl	8006024 <USBD_StdItfReq>
      break;
 8005bcc:	e012      	b.n	8005bf4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fa6c 	bl	80060b4 <USBD_StdEPReq>
      break;
 8005bdc:	e00a      	b.n	8005bf4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005be4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f001 fa47 	bl	8007080 <USBD_LL_StallEP>
      break;
 8005bf2:	bf00      	nop
  }

  return USBD_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b086      	sub	sp, #24
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	460b      	mov	r3, r1
 8005c08:	607a      	str	r2, [r7, #4]
 8005c0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005c0c:	7afb      	ldrb	r3, [r7, #11]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d14b      	bne.n	8005caa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c18:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d134      	bne.n	8005c8e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d919      	bls.n	8005c64 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	1ad2      	subs	r2, r2, r3
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d203      	bcs.n	8005c52 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	e002      	b.n	8005c58 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 ff38 	bl	8006ad2 <USBD_CtlContinueRx>
 8005c62:	e038      	b.n	8005cd6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d105      	bne.n	8005c86 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 ff35 	bl	8006af6 <USBD_CtlSendStatus>
 8005c8c:	e023      	b.n	8005cd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c94:	2b05      	cmp	r3, #5
 8005c96:	d11e      	bne.n	8005cd6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f001 f9ec 	bl	8007080 <USBD_LL_StallEP>
 8005ca8:	e015      	b.n	8005cd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00d      	beq.n	8005cd2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d108      	bne.n	8005cd2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	7afa      	ldrb	r2, [r7, #11]
 8005cca:	4611      	mov	r1, r2
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	4798      	blx	r3
 8005cd0:	e001      	b.n	8005cd6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e000      	b.n	8005cd8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005cee:	7afb      	ldrb	r3, [r7, #11]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d17f      	bne.n	8005df4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3314      	adds	r3, #20
 8005cf8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d15c      	bne.n	8005dbe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d915      	bls.n	8005d3c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	1ad2      	subs	r2, r2, r3
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 fec0 	bl	8006aae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d2e:	2300      	movs	r3, #0
 8005d30:	2200      	movs	r2, #0
 8005d32:	2100      	movs	r1, #0
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f001 fa4f 	bl	80071d8 <USBD_LL_PrepareReceive>
 8005d3a:	e04e      	b.n	8005dda <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	6912      	ldr	r2, [r2, #16]
 8005d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d48:	fb01 f202 	mul.w	r2, r1, r2
 8005d4c:	1a9b      	subs	r3, r3, r2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d11c      	bne.n	8005d8c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d316      	bcc.n	8005d8c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d20f      	bcs.n	8005d8c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2100      	movs	r1, #0
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 fe9c 	bl	8006aae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d7e:	2300      	movs	r3, #0
 8005d80:	2200      	movs	r2, #0
 8005d82:	2100      	movs	r1, #0
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f001 fa27 	bl	80071d8 <USBD_LL_PrepareReceive>
 8005d8a:	e026      	b.n	8005dda <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00a      	beq.n	8005dae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d105      	bne.n	8005dae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005dae:	2180      	movs	r1, #128	; 0x80
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f001 f965 	bl	8007080 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 feb0 	bl	8006b1c <USBD_CtlReceiveStatus>
 8005dbc:	e00d      	b.n	8005dda <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d004      	beq.n	8005dd2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d103      	bne.n	8005dda <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005dd2:	2180      	movs	r1, #128	; 0x80
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f001 f953 	bl	8007080 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d11d      	bne.n	8005e20 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff fe81 	bl	8005aec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005df2:	e015      	b.n	8005e20 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00d      	beq.n	8005e1c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d108      	bne.n	8005e1c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	7afa      	ldrb	r2, [r7, #11]
 8005e14:	4611      	mov	r1, r2
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	4798      	blx	r3
 8005e1a:	e001      	b.n	8005e20 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e000      	b.n	8005e22 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e32:	2340      	movs	r3, #64	; 0x40
 8005e34:	2200      	movs	r2, #0
 8005e36:	2100      	movs	r1, #0
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f001 f8dc 	bl	8006ff6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2240      	movs	r2, #64	; 0x40
 8005e4a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e4e:	2340      	movs	r3, #64	; 0x40
 8005e50:	2200      	movs	r2, #0
 8005e52:	2180      	movs	r1, #128	; 0x80
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f001 f8ce 	bl	8006ff6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2240      	movs	r2, #64	; 0x40
 8005e64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d009      	beq.n	8005ea2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6852      	ldr	r2, [r2, #4]
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	4798      	blx	r3
  }

  return USBD_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	78fa      	ldrb	r2, [r7, #3]
 8005ebc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bc80      	pop	{r7}
 8005ec8:	4770      	bx	lr

08005eca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2204      	movs	r2, #4
 8005ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr

08005ef2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d105      	bne.n	8005f10 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr

08005f1c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d10b      	bne.n	8005f46 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f66:	2b40      	cmp	r3, #64	; 0x40
 8005f68:	d005      	beq.n	8005f76 <USBD_StdDevReq+0x26>
 8005f6a:	2b40      	cmp	r3, #64	; 0x40
 8005f6c:	d84f      	bhi.n	800600e <USBD_StdDevReq+0xbe>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <USBD_StdDevReq+0x36>
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	d14b      	bne.n	800600e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
      break;
 8005f84:	e048      	b.n	8006018 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	785b      	ldrb	r3, [r3, #1]
 8005f8a:	2b09      	cmp	r3, #9
 8005f8c:	d839      	bhi.n	8006002 <USBD_StdDevReq+0xb2>
 8005f8e:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <USBD_StdDevReq+0x44>)
 8005f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f94:	08005fe5 	.word	0x08005fe5
 8005f98:	08005ff9 	.word	0x08005ff9
 8005f9c:	08006003 	.word	0x08006003
 8005fa0:	08005fef 	.word	0x08005fef
 8005fa4:	08006003 	.word	0x08006003
 8005fa8:	08005fc7 	.word	0x08005fc7
 8005fac:	08005fbd 	.word	0x08005fbd
 8005fb0:	08006003 	.word	0x08006003
 8005fb4:	08005fdb 	.word	0x08005fdb
 8005fb8:	08005fd1 	.word	0x08005fd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f9dc 	bl	800637c <USBD_GetDescriptor>
          break;
 8005fc4:	e022      	b.n	800600c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 fb3f 	bl	800664c <USBD_SetAddress>
          break;
 8005fce:	e01d      	b.n	800600c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fb7e 	bl	80066d4 <USBD_SetConfig>
          break;
 8005fd8:	e018      	b.n	800600c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fc07 	bl	80067f0 <USBD_GetConfig>
          break;
 8005fe2:	e013      	b.n	800600c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fc37 	bl	800685a <USBD_GetStatus>
          break;
 8005fec:	e00e      	b.n	800600c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fc65 	bl	80068c0 <USBD_SetFeature>
          break;
 8005ff6:	e009      	b.n	800600c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fc74 	bl	80068e8 <USBD_ClrFeature>
          break;
 8006000:	e004      	b.n	800600c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fccc 	bl	80069a2 <USBD_CtlError>
          break;
 800600a:	bf00      	nop
      }
      break;
 800600c:	e004      	b.n	8006018 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800600e:	6839      	ldr	r1, [r7, #0]
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fcc6 	bl	80069a2 <USBD_CtlError>
      break;
 8006016:	bf00      	nop
  }

  return ret;
 8006018:	7bfb      	ldrb	r3, [r7, #15]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop

08006024 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d005      	beq.n	800604a <USBD_StdItfReq+0x26>
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	d82e      	bhi.n	80060a0 <USBD_StdItfReq+0x7c>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <USBD_StdItfReq+0x26>
 8006046:	2b20      	cmp	r3, #32
 8006048:	d12a      	bne.n	80060a0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006050:	3b01      	subs	r3, #1
 8006052:	2b02      	cmp	r3, #2
 8006054:	d81d      	bhi.n	8006092 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	889b      	ldrh	r3, [r3, #4]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b01      	cmp	r3, #1
 800605e:	d813      	bhi.n	8006088 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	4798      	blx	r3
 800606e:	4603      	mov	r3, r0
 8006070:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	88db      	ldrh	r3, [r3, #6]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d110      	bne.n	800609c <USBD_StdItfReq+0x78>
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10d      	bne.n	800609c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fd38 	bl	8006af6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006086:	e009      	b.n	800609c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fc89 	bl	80069a2 <USBD_CtlError>
          break;
 8006090:	e004      	b.n	800609c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fc84 	bl	80069a2 <USBD_CtlError>
          break;
 800609a:	e000      	b.n	800609e <USBD_StdItfReq+0x7a>
          break;
 800609c:	bf00      	nop
      }
      break;
 800609e:	e004      	b.n	80060aa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fc7d 	bl	80069a2 <USBD_CtlError>
      break;
 80060a8:	bf00      	nop
  }

  return USBD_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	889b      	ldrh	r3, [r3, #4]
 80060c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060d0:	2b40      	cmp	r3, #64	; 0x40
 80060d2:	d007      	beq.n	80060e4 <USBD_StdEPReq+0x30>
 80060d4:	2b40      	cmp	r3, #64	; 0x40
 80060d6:	f200 8146 	bhi.w	8006366 <USBD_StdEPReq+0x2b2>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <USBD_StdEPReq+0x40>
 80060de:	2b20      	cmp	r3, #32
 80060e0:	f040 8141 	bne.w	8006366 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	4798      	blx	r3
      break;
 80060f2:	e13d      	b.n	8006370 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	d10a      	bne.n	8006116 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	4798      	blx	r3
 800610e:	4603      	mov	r3, r0
 8006110:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	e12d      	b.n	8006372 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	785b      	ldrb	r3, [r3, #1]
 800611a:	2b03      	cmp	r3, #3
 800611c:	d007      	beq.n	800612e <USBD_StdEPReq+0x7a>
 800611e:	2b03      	cmp	r3, #3
 8006120:	f300 811b 	bgt.w	800635a <USBD_StdEPReq+0x2a6>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d072      	beq.n	800620e <USBD_StdEPReq+0x15a>
 8006128:	2b01      	cmp	r3, #1
 800612a:	d03a      	beq.n	80061a2 <USBD_StdEPReq+0xee>
 800612c:	e115      	b.n	800635a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006134:	2b02      	cmp	r3, #2
 8006136:	d002      	beq.n	800613e <USBD_StdEPReq+0x8a>
 8006138:	2b03      	cmp	r3, #3
 800613a:	d015      	beq.n	8006168 <USBD_StdEPReq+0xb4>
 800613c:	e02b      	b.n	8006196 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800613e:	7bbb      	ldrb	r3, [r7, #14]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00c      	beq.n	800615e <USBD_StdEPReq+0xaa>
 8006144:	7bbb      	ldrb	r3, [r7, #14]
 8006146:	2b80      	cmp	r3, #128	; 0x80
 8006148:	d009      	beq.n	800615e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800614a:	7bbb      	ldrb	r3, [r7, #14]
 800614c:	4619      	mov	r1, r3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 ff96 	bl	8007080 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006154:	2180      	movs	r1, #128	; 0x80
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 ff92 	bl	8007080 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800615c:	e020      	b.n	80061a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fc1e 	bl	80069a2 <USBD_CtlError>
              break;
 8006166:	e01b      	b.n	80061a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	885b      	ldrh	r3, [r3, #2]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10e      	bne.n	800618e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006170:	7bbb      	ldrb	r3, [r7, #14]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00b      	beq.n	800618e <USBD_StdEPReq+0xda>
 8006176:	7bbb      	ldrb	r3, [r7, #14]
 8006178:	2b80      	cmp	r3, #128	; 0x80
 800617a:	d008      	beq.n	800618e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	88db      	ldrh	r3, [r3, #6]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d104      	bne.n	800618e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006184:	7bbb      	ldrb	r3, [r7, #14]
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 ff79 	bl	8007080 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fcb1 	bl	8006af6 <USBD_CtlSendStatus>

              break;
 8006194:	e004      	b.n	80061a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fc02 	bl	80069a2 <USBD_CtlError>
              break;
 800619e:	bf00      	nop
          }
          break;
 80061a0:	e0e0      	b.n	8006364 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d002      	beq.n	80061b2 <USBD_StdEPReq+0xfe>
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d015      	beq.n	80061dc <USBD_StdEPReq+0x128>
 80061b0:	e026      	b.n	8006200 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061b2:	7bbb      	ldrb	r3, [r7, #14]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00c      	beq.n	80061d2 <USBD_StdEPReq+0x11e>
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	2b80      	cmp	r3, #128	; 0x80
 80061bc:	d009      	beq.n	80061d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 ff5c 	bl	8007080 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80061c8:	2180      	movs	r1, #128	; 0x80
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 ff58 	bl	8007080 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061d0:	e01c      	b.n	800620c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fbe4 	bl	80069a2 <USBD_CtlError>
              break;
 80061da:	e017      	b.n	800620c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	885b      	ldrh	r3, [r3, #2]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d112      	bne.n	800620a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80061e4:	7bbb      	ldrb	r3, [r7, #14]
 80061e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d004      	beq.n	80061f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80061ee:	7bbb      	ldrb	r3, [r7, #14]
 80061f0:	4619      	mov	r1, r3
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 ff63 	bl	80070be <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fc7c 	bl	8006af6 <USBD_CtlSendStatus>
              }
              break;
 80061fe:	e004      	b.n	800620a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fbcd 	bl	80069a2 <USBD_CtlError>
              break;
 8006208:	e000      	b.n	800620c <USBD_StdEPReq+0x158>
              break;
 800620a:	bf00      	nop
          }
          break;
 800620c:	e0aa      	b.n	8006364 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006214:	2b02      	cmp	r3, #2
 8006216:	d002      	beq.n	800621e <USBD_StdEPReq+0x16a>
 8006218:	2b03      	cmp	r3, #3
 800621a:	d032      	beq.n	8006282 <USBD_StdEPReq+0x1ce>
 800621c:	e097      	b.n	800634e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <USBD_StdEPReq+0x180>
 8006224:	7bbb      	ldrb	r3, [r7, #14]
 8006226:	2b80      	cmp	r3, #128	; 0x80
 8006228:	d004      	beq.n	8006234 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fbb8 	bl	80069a2 <USBD_CtlError>
                break;
 8006232:	e091      	b.n	8006358 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006234:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006238:	2b00      	cmp	r3, #0
 800623a:	da0b      	bge.n	8006254 <USBD_StdEPReq+0x1a0>
 800623c:	7bbb      	ldrb	r3, [r7, #14]
 800623e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	3310      	adds	r3, #16
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	4413      	add	r3, r2
 8006250:	3304      	adds	r3, #4
 8006252:	e00b      	b.n	800626c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006254:	7bbb      	ldrb	r3, [r7, #14]
 8006256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	4413      	add	r3, r2
 800626a:	3304      	adds	r3, #4
 800626c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2202      	movs	r2, #2
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fbfb 	bl	8006a76 <USBD_CtlSendData>
              break;
 8006280:	e06a      	b.n	8006358 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006282:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006286:	2b00      	cmp	r3, #0
 8006288:	da11      	bge.n	80062ae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	f003 020f 	and.w	r2, r3, #15
 8006290:	6879      	ldr	r1, [r7, #4]
 8006292:	4613      	mov	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	440b      	add	r3, r1
 800629c:	3318      	adds	r3, #24
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d117      	bne.n	80062d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fb7b 	bl	80069a2 <USBD_CtlError>
                  break;
 80062ac:	e054      	b.n	8006358 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80062ae:	7bbb      	ldrb	r3, [r7, #14]
 80062b0:	f003 020f 	and.w	r2, r3, #15
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d104      	bne.n	80062d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fb68 	bl	80069a2 <USBD_CtlError>
                  break;
 80062d2:	e041      	b.n	8006358 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	da0b      	bge.n	80062f4 <USBD_StdEPReq+0x240>
 80062dc:	7bbb      	ldrb	r3, [r7, #14]
 80062de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	3310      	adds	r3, #16
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	4413      	add	r3, r2
 80062f0:	3304      	adds	r3, #4
 80062f2:	e00b      	b.n	800630c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062f4:	7bbb      	ldrb	r3, [r7, #14]
 80062f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062fa:	4613      	mov	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4413      	add	r3, r2
 800630a:	3304      	adds	r3, #4
 800630c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800630e:	7bbb      	ldrb	r3, [r7, #14]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <USBD_StdEPReq+0x266>
 8006314:	7bbb      	ldrb	r3, [r7, #14]
 8006316:	2b80      	cmp	r3, #128	; 0x80
 8006318:	d103      	bne.n	8006322 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e00e      	b.n	8006340 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006322:	7bbb      	ldrb	r3, [r7, #14]
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fee8 	bl	80070fc <USBD_LL_IsStallEP>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2201      	movs	r2, #1
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	e002      	b.n	8006340 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2202      	movs	r2, #2
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fb95 	bl	8006a76 <USBD_CtlSendData>
              break;
 800634c:	e004      	b.n	8006358 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fb26 	bl	80069a2 <USBD_CtlError>
              break;
 8006356:	bf00      	nop
          }
          break;
 8006358:	e004      	b.n	8006364 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fb20 	bl	80069a2 <USBD_CtlError>
          break;
 8006362:	bf00      	nop
      }
      break;
 8006364:	e004      	b.n	8006370 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fb1a 	bl	80069a2 <USBD_CtlError>
      break;
 800636e:	bf00      	nop
  }

  return ret;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	885b      	ldrh	r3, [r3, #2]
 8006396:	0a1b      	lsrs	r3, r3, #8
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	2b06      	cmp	r3, #6
 800639e:	f200 8128 	bhi.w	80065f2 <USBD_GetDescriptor+0x276>
 80063a2:	a201      	add	r2, pc, #4	; (adr r2, 80063a8 <USBD_GetDescriptor+0x2c>)
 80063a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a8:	080063c5 	.word	0x080063c5
 80063ac:	080063dd 	.word	0x080063dd
 80063b0:	0800641d 	.word	0x0800641d
 80063b4:	080065f3 	.word	0x080065f3
 80063b8:	080065f3 	.word	0x080065f3
 80063bc:	08006593 	.word	0x08006593
 80063c0:	080065bf 	.word	0x080065bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	7c12      	ldrb	r2, [r2, #16]
 80063d0:	f107 0108 	add.w	r1, r7, #8
 80063d4:	4610      	mov	r0, r2
 80063d6:	4798      	blx	r3
 80063d8:	60f8      	str	r0, [r7, #12]
      break;
 80063da:	e112      	b.n	8006602 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	7c1b      	ldrb	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10d      	bne.n	8006400 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ec:	f107 0208 	add.w	r2, r7, #8
 80063f0:	4610      	mov	r0, r2
 80063f2:	4798      	blx	r3
 80063f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3301      	adds	r3, #1
 80063fa:	2202      	movs	r2, #2
 80063fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80063fe:	e100      	b.n	8006602 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	f107 0208 	add.w	r2, r7, #8
 800640c:	4610      	mov	r0, r2
 800640e:	4798      	blx	r3
 8006410:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3301      	adds	r3, #1
 8006416:	2202      	movs	r2, #2
 8006418:	701a      	strb	r2, [r3, #0]
      break;
 800641a:	e0f2      	b.n	8006602 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	885b      	ldrh	r3, [r3, #2]
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b05      	cmp	r3, #5
 8006424:	f200 80ac 	bhi.w	8006580 <USBD_GetDescriptor+0x204>
 8006428:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <USBD_GetDescriptor+0xb4>)
 800642a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642e:	bf00      	nop
 8006430:	08006449 	.word	0x08006449
 8006434:	0800647d 	.word	0x0800647d
 8006438:	080064b1 	.word	0x080064b1
 800643c:	080064e5 	.word	0x080064e5
 8006440:	08006519 	.word	0x08006519
 8006444:	0800654d 	.word	0x0800654d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	7c12      	ldrb	r2, [r2, #16]
 8006460:	f107 0108 	add.w	r1, r7, #8
 8006464:	4610      	mov	r0, r2
 8006466:	4798      	blx	r3
 8006468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800646a:	e091      	b.n	8006590 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa97 	bl	80069a2 <USBD_CtlError>
            err++;
 8006474:	7afb      	ldrb	r3, [r7, #11]
 8006476:	3301      	adds	r3, #1
 8006478:	72fb      	strb	r3, [r7, #11]
          break;
 800647a:	e089      	b.n	8006590 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00b      	beq.n	80064a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	7c12      	ldrb	r2, [r2, #16]
 8006494:	f107 0108 	add.w	r1, r7, #8
 8006498:	4610      	mov	r0, r2
 800649a:	4798      	blx	r3
 800649c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800649e:	e077      	b.n	8006590 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa7d 	bl	80069a2 <USBD_CtlError>
            err++;
 80064a8:	7afb      	ldrb	r3, [r7, #11]
 80064aa:	3301      	adds	r3, #1
 80064ac:	72fb      	strb	r3, [r7, #11]
          break;
 80064ae:	e06f      	b.n	8006590 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00b      	beq.n	80064d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	7c12      	ldrb	r2, [r2, #16]
 80064c8:	f107 0108 	add.w	r1, r7, #8
 80064cc:	4610      	mov	r0, r2
 80064ce:	4798      	blx	r3
 80064d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064d2:	e05d      	b.n	8006590 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fa63 	bl	80069a2 <USBD_CtlError>
            err++;
 80064dc:	7afb      	ldrb	r3, [r7, #11]
 80064de:	3301      	adds	r3, #1
 80064e0:	72fb      	strb	r3, [r7, #11]
          break;
 80064e2:	e055      	b.n	8006590 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00b      	beq.n	8006508 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	7c12      	ldrb	r2, [r2, #16]
 80064fc:	f107 0108 	add.w	r1, r7, #8
 8006500:	4610      	mov	r0, r2
 8006502:	4798      	blx	r3
 8006504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006506:	e043      	b.n	8006590 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fa49 	bl	80069a2 <USBD_CtlError>
            err++;
 8006510:	7afb      	ldrb	r3, [r7, #11]
 8006512:	3301      	adds	r3, #1
 8006514:	72fb      	strb	r3, [r7, #11]
          break;
 8006516:	e03b      	b.n	8006590 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00b      	beq.n	800653c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	7c12      	ldrb	r2, [r2, #16]
 8006530:	f107 0108 	add.w	r1, r7, #8
 8006534:	4610      	mov	r0, r2
 8006536:	4798      	blx	r3
 8006538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800653a:	e029      	b.n	8006590 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fa2f 	bl	80069a2 <USBD_CtlError>
            err++;
 8006544:	7afb      	ldrb	r3, [r7, #11]
 8006546:	3301      	adds	r3, #1
 8006548:	72fb      	strb	r3, [r7, #11]
          break;
 800654a:	e021      	b.n	8006590 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00b      	beq.n	8006570 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	7c12      	ldrb	r2, [r2, #16]
 8006564:	f107 0108 	add.w	r1, r7, #8
 8006568:	4610      	mov	r0, r2
 800656a:	4798      	blx	r3
 800656c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800656e:	e00f      	b.n	8006590 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa15 	bl	80069a2 <USBD_CtlError>
            err++;
 8006578:	7afb      	ldrb	r3, [r7, #11]
 800657a:	3301      	adds	r3, #1
 800657c:	72fb      	strb	r3, [r7, #11]
          break;
 800657e:	e007      	b.n	8006590 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fa0d 	bl	80069a2 <USBD_CtlError>
          err++;
 8006588:	7afb      	ldrb	r3, [r7, #11]
 800658a:	3301      	adds	r3, #1
 800658c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800658e:	e038      	b.n	8006602 <USBD_GetDescriptor+0x286>
 8006590:	e037      	b.n	8006602 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	7c1b      	ldrb	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d109      	bne.n	80065ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a2:	f107 0208 	add.w	r2, r7, #8
 80065a6:	4610      	mov	r0, r2
 80065a8:	4798      	blx	r3
 80065aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065ac:	e029      	b.n	8006602 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f9f6 	bl	80069a2 <USBD_CtlError>
        err++;
 80065b6:	7afb      	ldrb	r3, [r7, #11]
 80065b8:	3301      	adds	r3, #1
 80065ba:	72fb      	strb	r3, [r7, #11]
      break;
 80065bc:	e021      	b.n	8006602 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	7c1b      	ldrb	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10d      	bne.n	80065e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	f107 0208 	add.w	r2, r7, #8
 80065d2:	4610      	mov	r0, r2
 80065d4:	4798      	blx	r3
 80065d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3301      	adds	r3, #1
 80065dc:	2207      	movs	r2, #7
 80065de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065e0:	e00f      	b.n	8006602 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f9dc 	bl	80069a2 <USBD_CtlError>
        err++;
 80065ea:	7afb      	ldrb	r3, [r7, #11]
 80065ec:	3301      	adds	r3, #1
 80065ee:	72fb      	strb	r3, [r7, #11]
      break;
 80065f0:	e007      	b.n	8006602 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f9d4 	bl	80069a2 <USBD_CtlError>
      err++;
 80065fa:	7afb      	ldrb	r3, [r7, #11]
 80065fc:	3301      	adds	r3, #1
 80065fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006600:	bf00      	nop
  }

  if (err != 0U)
 8006602:	7afb      	ldrb	r3, [r7, #11]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d11c      	bne.n	8006642 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006608:	893b      	ldrh	r3, [r7, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d011      	beq.n	8006632 <USBD_GetDescriptor+0x2b6>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	88db      	ldrh	r3, [r3, #6]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00d      	beq.n	8006632 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	88da      	ldrh	r2, [r3, #6]
 800661a:	893b      	ldrh	r3, [r7, #8]
 800661c:	4293      	cmp	r3, r2
 800661e:	bf28      	it	cs
 8006620:	4613      	movcs	r3, r2
 8006622:	b29b      	uxth	r3, r3
 8006624:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006626:	893b      	ldrh	r3, [r7, #8]
 8006628:	461a      	mov	r2, r3
 800662a:	68f9      	ldr	r1, [r7, #12]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fa22 	bl	8006a76 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	88db      	ldrh	r3, [r3, #6]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d104      	bne.n	8006644 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fa5b 	bl	8006af6 <USBD_CtlSendStatus>
 8006640:	e000      	b.n	8006644 <USBD_GetDescriptor+0x2c8>
    return;
 8006642:	bf00      	nop
    }
  }
}
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop

0800664c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	889b      	ldrh	r3, [r3, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d130      	bne.n	80066c0 <USBD_SetAddress+0x74>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	88db      	ldrh	r3, [r3, #6]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d12c      	bne.n	80066c0 <USBD_SetAddress+0x74>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	885b      	ldrh	r3, [r3, #2]
 800666a:	2b7f      	cmp	r3, #127	; 0x7f
 800666c:	d828      	bhi.n	80066c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	885b      	ldrh	r3, [r3, #2]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006678:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006680:	2b03      	cmp	r3, #3
 8006682:	d104      	bne.n	800668e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f98b 	bl	80069a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800668c:	e01d      	b.n	80066ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	7bfa      	ldrb	r2, [r7, #15]
 8006692:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fd5a 	bl	8007154 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fa28 	bl	8006af6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d004      	beq.n	80066b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066b4:	e009      	b.n	80066ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066be:	e004      	b.n	80066ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f96d 	bl	80069a2 <USBD_CtlError>
  }
}
 80066c8:	bf00      	nop
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	885b      	ldrh	r3, [r3, #2]
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	4b41      	ldr	r3, [pc, #260]	; (80067ec <USBD_SetConfig+0x118>)
 80066e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80066e8:	4b40      	ldr	r3, [pc, #256]	; (80067ec <USBD_SetConfig+0x118>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d904      	bls.n	80066fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f955 	bl	80069a2 <USBD_CtlError>
 80066f8:	e075      	b.n	80067e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006700:	2b02      	cmp	r3, #2
 8006702:	d002      	beq.n	800670a <USBD_SetConfig+0x36>
 8006704:	2b03      	cmp	r3, #3
 8006706:	d023      	beq.n	8006750 <USBD_SetConfig+0x7c>
 8006708:	e062      	b.n	80067d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800670a:	4b38      	ldr	r3, [pc, #224]	; (80067ec <USBD_SetConfig+0x118>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d01a      	beq.n	8006748 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006712:	4b36      	ldr	r3, [pc, #216]	; (80067ec <USBD_SetConfig+0x118>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2203      	movs	r2, #3
 8006720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006724:	4b31      	ldr	r3, [pc, #196]	; (80067ec <USBD_SetConfig+0x118>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7ff f9e8 	bl	8005b00 <USBD_SetClassConfig>
 8006730:	4603      	mov	r3, r0
 8006732:	2b02      	cmp	r3, #2
 8006734:	d104      	bne.n	8006740 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f932 	bl	80069a2 <USBD_CtlError>
            return;
 800673e:	e052      	b.n	80067e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f9d8 	bl	8006af6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006746:	e04e      	b.n	80067e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f9d4 	bl	8006af6 <USBD_CtlSendStatus>
        break;
 800674e:	e04a      	b.n	80067e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006750:	4b26      	ldr	r3, [pc, #152]	; (80067ec <USBD_SetConfig+0x118>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d112      	bne.n	800677e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006760:	4b22      	ldr	r3, [pc, #136]	; (80067ec <USBD_SetConfig+0x118>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800676a:	4b20      	ldr	r3, [pc, #128]	; (80067ec <USBD_SetConfig+0x118>)
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	4619      	mov	r1, r3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff f9e4 	bl	8005b3e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f9bd 	bl	8006af6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800677c:	e033      	b.n	80067e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800677e:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <USBD_SetConfig+0x118>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	429a      	cmp	r2, r3
 800678a:	d01d      	beq.n	80067c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	b2db      	uxtb	r3, r3
 8006792:	4619      	mov	r1, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7ff f9d2 	bl	8005b3e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800679a:	4b14      	ldr	r3, [pc, #80]	; (80067ec <USBD_SetConfig+0x118>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80067a4:	4b11      	ldr	r3, [pc, #68]	; (80067ec <USBD_SetConfig+0x118>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff f9a8 	bl	8005b00 <USBD_SetClassConfig>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d104      	bne.n	80067c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f8f2 	bl	80069a2 <USBD_CtlError>
            return;
 80067be:	e012      	b.n	80067e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f998 	bl	8006af6 <USBD_CtlSendStatus>
        break;
 80067c6:	e00e      	b.n	80067e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f994 	bl	8006af6 <USBD_CtlSendStatus>
        break;
 80067ce:	e00a      	b.n	80067e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f8e5 	bl	80069a2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80067d8:	4b04      	ldr	r3, [pc, #16]	; (80067ec <USBD_SetConfig+0x118>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7ff f9ad 	bl	8005b3e <USBD_ClrClassConfig>
        break;
 80067e4:	bf00      	nop
    }
  }
}
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	2000024c 	.word	0x2000024c

080067f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	88db      	ldrh	r3, [r3, #6]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d004      	beq.n	800680c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f8cc 	bl	80069a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800680a:	e022      	b.n	8006852 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006812:	2b02      	cmp	r3, #2
 8006814:	dc02      	bgt.n	800681c <USBD_GetConfig+0x2c>
 8006816:	2b00      	cmp	r3, #0
 8006818:	dc03      	bgt.n	8006822 <USBD_GetConfig+0x32>
 800681a:	e015      	b.n	8006848 <USBD_GetConfig+0x58>
 800681c:	2b03      	cmp	r3, #3
 800681e:	d00b      	beq.n	8006838 <USBD_GetConfig+0x48>
 8006820:	e012      	b.n	8006848 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3308      	adds	r3, #8
 800682c:	2201      	movs	r2, #1
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f920 	bl	8006a76 <USBD_CtlSendData>
        break;
 8006836:	e00c      	b.n	8006852 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3304      	adds	r3, #4
 800683c:	2201      	movs	r2, #1
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f918 	bl	8006a76 <USBD_CtlSendData>
        break;
 8006846:	e004      	b.n	8006852 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f8a9 	bl	80069a2 <USBD_CtlError>
        break;
 8006850:	bf00      	nop
}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800686a:	3b01      	subs	r3, #1
 800686c:	2b02      	cmp	r3, #2
 800686e:	d81e      	bhi.n	80068ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	88db      	ldrh	r3, [r3, #6]
 8006874:	2b02      	cmp	r3, #2
 8006876:	d004      	beq.n	8006882 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f891 	bl	80069a2 <USBD_CtlError>
        break;
 8006880:	e01a      	b.n	80068b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800688e:	2b00      	cmp	r3, #0
 8006890:	d005      	beq.n	800689e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f043 0202 	orr.w	r2, r3, #2
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	330c      	adds	r3, #12
 80068a2:	2202      	movs	r2, #2
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f8e5 	bl	8006a76 <USBD_CtlSendData>
      break;
 80068ac:	e004      	b.n	80068b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f876 	bl	80069a2 <USBD_CtlError>
      break;
 80068b6:	bf00      	nop
  }
}
 80068b8:	bf00      	nop
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	885b      	ldrh	r3, [r3, #2]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d106      	bne.n	80068e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f90b 	bl	8006af6 <USBD_CtlSendStatus>
  }
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f8:	3b01      	subs	r3, #1
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d80b      	bhi.n	8006916 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	885b      	ldrh	r3, [r3, #2]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d10c      	bne.n	8006920 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f8f1 	bl	8006af6 <USBD_CtlSendStatus>
      }
      break;
 8006914:	e004      	b.n	8006920 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f842 	bl	80069a2 <USBD_CtlError>
      break;
 800691e:	e000      	b.n	8006922 <USBD_ClrFeature+0x3a>
      break;
 8006920:	bf00      	nop
  }
}
 8006922:	bf00      	nop
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781a      	ldrb	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	785a      	ldrb	r2, [r3, #1]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	3302      	adds	r3, #2
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	b29a      	uxth	r2, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	3303      	adds	r3, #3
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	b29b      	uxth	r3, r3
 8006954:	021b      	lsls	r3, r3, #8
 8006956:	b29b      	uxth	r3, r3
 8006958:	4413      	add	r3, r2
 800695a:	b29a      	uxth	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	3304      	adds	r3, #4
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	b29a      	uxth	r2, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	3305      	adds	r3, #5
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	021b      	lsls	r3, r3, #8
 8006972:	b29b      	uxth	r3, r3
 8006974:	4413      	add	r3, r2
 8006976:	b29a      	uxth	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	3306      	adds	r3, #6
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	b29a      	uxth	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	3307      	adds	r3, #7
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	b29b      	uxth	r3, r3
 8006990:	4413      	add	r3, r2
 8006992:	b29a      	uxth	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	80da      	strh	r2, [r3, #6]

}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr

080069a2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b082      	sub	sp, #8
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80069ac:	2180      	movs	r1, #128	; 0x80
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fb66 	bl	8007080 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80069b4:	2100      	movs	r1, #0
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fb62 	bl	8007080 <USBD_LL_StallEP>
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d032      	beq.n	8006a40 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 f834 	bl	8006a48 <USBD_GetLen>
 80069e0:	4603      	mov	r3, r0
 80069e2:	3301      	adds	r3, #1
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	75fa      	strb	r2, [r7, #23]
 80069f4:	461a      	mov	r2, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	4413      	add	r3, r2
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	7812      	ldrb	r2, [r2, #0]
 80069fe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	75fa      	strb	r2, [r7, #23]
 8006a06:	461a      	mov	r2, r3
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	2203      	movs	r2, #3
 8006a0e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006a10:	e012      	b.n	8006a38 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	60fa      	str	r2, [r7, #12]
 8006a18:	7dfa      	ldrb	r2, [r7, #23]
 8006a1a:	1c51      	adds	r1, r2, #1
 8006a1c:	75f9      	strb	r1, [r7, #23]
 8006a1e:	4611      	mov	r1, r2
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	440a      	add	r2, r1
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	75fa      	strb	r2, [r7, #23]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4413      	add	r3, r2
 8006a34:	2200      	movs	r2, #0
 8006a36:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e8      	bne.n	8006a12 <USBD_GetString+0x4e>
    }
  }
}
 8006a40:	bf00      	nop
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006a54:	e005      	b.n	8006a62 <USBD_GetLen+0x1a>
  {
    len++;
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f5      	bne.n	8006a56 <USBD_GetLen+0xe>
  }

  return len;
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	4613      	mov	r3, r2
 8006a82:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006a8c:	88fa      	ldrh	r2, [r7, #6]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006a92:	88fa      	ldrh	r2, [r7, #6]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a98:	88fb      	ldrh	r3, [r7, #6]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fb77 	bl	8007192 <USBD_LL_Transmit>

  return USBD_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006abc:	88fb      	ldrh	r3, [r7, #6]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 fb65 	bl	8007192 <USBD_LL_Transmit>

  return USBD_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	60f8      	str	r0, [r7, #12]
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	4613      	mov	r3, r2
 8006ade:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ae0:	88fb      	ldrh	r3, [r7, #6]
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 fb76 	bl	80071d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2204      	movs	r2, #4
 8006b02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b06:	2300      	movs	r3, #0
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fb40 	bl	8007192 <USBD_LL_Transmit>

  return USBD_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2205      	movs	r2, #5
 8006b28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	2200      	movs	r2, #0
 8006b30:	2100      	movs	r1, #0
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fb50 	bl	80071d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	490e      	ldr	r1, [pc, #56]	; (8006b84 <MX_USB_DEVICE_Init+0x40>)
 8006b4c:	480e      	ldr	r0, [pc, #56]	; (8006b88 <MX_USB_DEVICE_Init+0x44>)
 8006b4e:	f7fe ff7d 	bl	8005a4c <USBD_Init>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b58:	f7f9 fc48 	bl	80003ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006b5c:	490b      	ldr	r1, [pc, #44]	; (8006b8c <MX_USB_DEVICE_Init+0x48>)
 8006b5e:	480a      	ldr	r0, [pc, #40]	; (8006b88 <MX_USB_DEVICE_Init+0x44>)
 8006b60:	f7fe ff9f 	bl	8005aa2 <USBD_RegisterClass>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b6a:	f7f9 fc3f 	bl	80003ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b6e:	4806      	ldr	r0, [pc, #24]	; (8006b88 <MX_USB_DEVICE_Init+0x44>)
 8006b70:	f7fe ffb0 	bl	8005ad4 <USBD_Start>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006b7a:	f7f9 fc37 	bl	80003ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b7e:	bf00      	nop
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000108 	.word	0x20000108
 8006b88:	20000250 	.word	0x20000250
 8006b8c:	2000000c 	.word	0x2000000c

08006b90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	4603      	mov	r3, r0
 8006b98:	6039      	str	r1, [r7, #0]
 8006b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2212      	movs	r2, #18
 8006ba0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ba2:	4b03      	ldr	r3, [pc, #12]	; (8006bb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bc80      	pop	{r7}
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	20000124 	.word	0x20000124

08006bb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	6039      	str	r1, [r7, #0]
 8006bbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2204      	movs	r2, #4
 8006bc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006bc6:	4b03      	ldr	r3, [pc, #12]	; (8006bd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	20000138 	.word	0x20000138

08006bd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4603      	mov	r3, r0
 8006be0:	6039      	str	r1, [r7, #0]
 8006be2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d105      	bne.n	8006bf6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	4907      	ldr	r1, [pc, #28]	; (8006c0c <USBD_FS_ProductStrDescriptor+0x34>)
 8006bee:	4808      	ldr	r0, [pc, #32]	; (8006c10 <USBD_FS_ProductStrDescriptor+0x38>)
 8006bf0:	f7ff fee8 	bl	80069c4 <USBD_GetString>
 8006bf4:	e004      	b.n	8006c00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	4904      	ldr	r1, [pc, #16]	; (8006c0c <USBD_FS_ProductStrDescriptor+0x34>)
 8006bfa:	4805      	ldr	r0, [pc, #20]	; (8006c10 <USBD_FS_ProductStrDescriptor+0x38>)
 8006bfc:	f7ff fee2 	bl	80069c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c00:	4b02      	ldr	r3, [pc, #8]	; (8006c0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000514 	.word	0x20000514
 8006c10:	08007c6c 	.word	0x08007c6c

08006c14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	6039      	str	r1, [r7, #0]
 8006c1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	4904      	ldr	r1, [pc, #16]	; (8006c34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006c24:	4804      	ldr	r0, [pc, #16]	; (8006c38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006c26:	f7ff fecd 	bl	80069c4 <USBD_GetString>
  return USBD_StrDesc;
 8006c2a:	4b02      	ldr	r3, [pc, #8]	; (8006c34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20000514 	.word	0x20000514
 8006c38:	08007c84 	.word	0x08007c84

08006c3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	6039      	str	r1, [r7, #0]
 8006c46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	221a      	movs	r2, #26
 8006c4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c4e:	f000 f843 	bl	8006cd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c52:	4b02      	ldr	r3, [pc, #8]	; (8006c5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	2000013c 	.word	0x2000013c

08006c60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	4603      	mov	r3, r0
 8006c68:	6039      	str	r1, [r7, #0]
 8006c6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c6c:	79fb      	ldrb	r3, [r7, #7]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d105      	bne.n	8006c7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	4907      	ldr	r1, [pc, #28]	; (8006c94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c76:	4808      	ldr	r0, [pc, #32]	; (8006c98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c78:	f7ff fea4 	bl	80069c4 <USBD_GetString>
 8006c7c:	e004      	b.n	8006c88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	4904      	ldr	r1, [pc, #16]	; (8006c94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c82:	4805      	ldr	r0, [pc, #20]	; (8006c98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c84:	f7ff fe9e 	bl	80069c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c88:	4b02      	ldr	r3, [pc, #8]	; (8006c94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000514 	.word	0x20000514
 8006c98:	08007c98 	.word	0x08007c98

08006c9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	6039      	str	r1, [r7, #0]
 8006ca6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d105      	bne.n	8006cba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	4907      	ldr	r1, [pc, #28]	; (8006cd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006cb2:	4808      	ldr	r0, [pc, #32]	; (8006cd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006cb4:	f7ff fe86 	bl	80069c4 <USBD_GetString>
 8006cb8:	e004      	b.n	8006cc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	4904      	ldr	r1, [pc, #16]	; (8006cd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006cbe:	4805      	ldr	r0, [pc, #20]	; (8006cd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006cc0:	f7ff fe80 	bl	80069c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006cc4:	4b02      	ldr	r3, [pc, #8]	; (8006cd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000514 	.word	0x20000514
 8006cd4:	08007ca4 	.word	0x08007ca4

08006cd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006cde:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <Get_SerialNum+0x44>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ce4:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <Get_SerialNum+0x48>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006cea:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <Get_SerialNum+0x4c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d009      	beq.n	8006d12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006cfe:	2208      	movs	r2, #8
 8006d00:	4909      	ldr	r1, [pc, #36]	; (8006d28 <Get_SerialNum+0x50>)
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 f814 	bl	8006d30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006d08:	2204      	movs	r2, #4
 8006d0a:	4908      	ldr	r1, [pc, #32]	; (8006d2c <Get_SerialNum+0x54>)
 8006d0c:	68b8      	ldr	r0, [r7, #8]
 8006d0e:	f000 f80f 	bl	8006d30 <IntToUnicode>
  }
}
 8006d12:	bf00      	nop
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	1ffff7e8 	.word	0x1ffff7e8
 8006d20:	1ffff7ec 	.word	0x1ffff7ec
 8006d24:	1ffff7f0 	.word	0x1ffff7f0
 8006d28:	2000013e 	.word	0x2000013e
 8006d2c:	2000014e 	.word	0x2000014e

08006d30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d42:	2300      	movs	r3, #0
 8006d44:	75fb      	strb	r3, [r7, #23]
 8006d46:	e027      	b.n	8006d98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	0f1b      	lsrs	r3, r3, #28
 8006d4c:	2b09      	cmp	r3, #9
 8006d4e:	d80b      	bhi.n	8006d68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	0f1b      	lsrs	r3, r3, #28
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	440b      	add	r3, r1
 8006d60:	3230      	adds	r2, #48	; 0x30
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	e00a      	b.n	8006d7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	0f1b      	lsrs	r3, r3, #28
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	4619      	mov	r1, r3
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	440b      	add	r3, r1
 8006d78:	3237      	adds	r2, #55	; 0x37
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	011b      	lsls	r3, r3, #4
 8006d82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	005b      	lsls	r3, r3, #1
 8006d88:	3301      	adds	r3, #1
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	2200      	movs	r2, #0
 8006d90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	3301      	adds	r3, #1
 8006d96:	75fb      	strb	r3, [r7, #23]
 8006d98:	7dfa      	ldrb	r2, [r7, #23]
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d3d3      	bcc.n	8006d48 <IntToUnicode+0x18>
  }
}
 8006da0:	bf00      	nop
 8006da2:	bf00      	nop
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bc80      	pop	{r7}
 8006daa:	4770      	bx	lr

08006dac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a0d      	ldr	r2, [pc, #52]	; (8006df0 <HAL_PCD_MspInit+0x44>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d113      	bne.n	8006de6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <HAL_PCD_MspInit+0x48>)
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	4a0c      	ldr	r2, [pc, #48]	; (8006df4 <HAL_PCD_MspInit+0x48>)
 8006dc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dc8:	61d3      	str	r3, [r2, #28]
 8006dca:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <HAL_PCD_MspInit+0x48>)
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	2100      	movs	r1, #0
 8006dda:	2014      	movs	r0, #20
 8006ddc:	f7f9 fd2f 	bl	800083e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006de0:	2014      	movs	r0, #20
 8006de2:	f7f9 fd48 	bl	8000876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006de6:	bf00      	nop
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	40005c00 	.word	0x40005c00
 8006df4:	40021000 	.word	0x40021000

08006df8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4610      	mov	r0, r2
 8006e10:	f7fe fea8 	bl	8005b64 <USBD_LL_SetupStage>
}
 8006e14:	bf00      	nop
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006e2e:	78fa      	ldrb	r2, [r7, #3]
 8006e30:	6879      	ldr	r1, [r7, #4]
 8006e32:	4613      	mov	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	440b      	add	r3, r1
 8006e3c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	78fb      	ldrb	r3, [r7, #3]
 8006e44:	4619      	mov	r1, r3
 8006e46:	f7fe feda 	bl	8005bfe <USBD_LL_DataOutStage>
}
 8006e4a:	bf00      	nop
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b082      	sub	sp, #8
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006e64:	78fa      	ldrb	r2, [r7, #3]
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	00db      	lsls	r3, r3, #3
 8006e70:	440b      	add	r3, r1
 8006e72:	333c      	adds	r3, #60	; 0x3c
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	78fb      	ldrb	r3, [r7, #3]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f7fe ff31 	bl	8005ce0 <USBD_LL_DataInStage>
}
 8006e7e:	bf00      	nop
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff f841 	bl	8005f1c <USBD_LL_SOF>
}
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d001      	beq.n	8006eba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006eb6:	f7f9 fa99 	bl	80003ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006ec0:	7bfa      	ldrb	r2, [r7, #15]
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fe fff1 	bl	8005eac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fe ffaa 	bl	8005e2a <USBD_LL_Reset>
}
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe ffeb 	bl	8005eca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006efc:	4b04      	ldr	r3, [pc, #16]	; (8006f10 <HAL_PCD_SuspendCallback+0x30>)
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	4a03      	ldr	r2, [pc, #12]	; (8006f10 <HAL_PCD_SuspendCallback+0x30>)
 8006f02:	f043 0306 	orr.w	r3, r3, #6
 8006f06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f08:	bf00      	nop
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	e000ed00 	.word	0xe000ed00

08006f14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe ffe5 	bl	8005ef2 <USBD_LL_Resume>
}
 8006f28:	bf00      	nop
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006f38:	4a1f      	ldr	r2, [pc, #124]	; (8006fb8 <USBD_LL_Init+0x88>)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a1d      	ldr	r2, [pc, #116]	; (8006fb8 <USBD_LL_Init+0x88>)
 8006f44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006f48:	4b1b      	ldr	r3, [pc, #108]	; (8006fb8 <USBD_LL_Init+0x88>)
 8006f4a:	4a1c      	ldr	r2, [pc, #112]	; (8006fbc <USBD_LL_Init+0x8c>)
 8006f4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006f4e:	4b1a      	ldr	r3, [pc, #104]	; (8006fb8 <USBD_LL_Init+0x88>)
 8006f50:	2208      	movs	r2, #8
 8006f52:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006f54:	4b18      	ldr	r3, [pc, #96]	; (8006fb8 <USBD_LL_Init+0x88>)
 8006f56:	2202      	movs	r2, #2
 8006f58:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006f5a:	4b17      	ldr	r3, [pc, #92]	; (8006fb8 <USBD_LL_Init+0x88>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006f60:	4b15      	ldr	r3, [pc, #84]	; (8006fb8 <USBD_LL_Init+0x88>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006f66:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <USBD_LL_Init+0x88>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006f6c:	4812      	ldr	r0, [pc, #72]	; (8006fb8 <USBD_LL_Init+0x88>)
 8006f6e:	f7f9 fc9c 	bl	80008aa <HAL_PCD_Init>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006f78:	f7f9 fa38 	bl	80003ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f82:	2318      	movs	r3, #24
 8006f84:	2200      	movs	r2, #0
 8006f86:	2100      	movs	r1, #0
 8006f88:	f7fb f8f9 	bl	800217e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f92:	2358      	movs	r3, #88	; 0x58
 8006f94:	2200      	movs	r2, #0
 8006f96:	2180      	movs	r1, #128	; 0x80
 8006f98:	f7fb f8f1 	bl	800217e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	2181      	movs	r1, #129	; 0x81
 8006faa:	f7fb f8e8 	bl	800217e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20000714 	.word	0x20000714
 8006fbc:	40005c00 	.word	0x40005c00

08006fc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7f9 fd72 	bl	8000ac0 <HAL_PCD_Start>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 f93c 	bl	8007260 <USBD_Get_USB_Status>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fec:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	4608      	mov	r0, r1
 8007000:	4611      	mov	r1, r2
 8007002:	461a      	mov	r2, r3
 8007004:	4603      	mov	r3, r0
 8007006:	70fb      	strb	r3, [r7, #3]
 8007008:	460b      	mov	r3, r1
 800700a:	70bb      	strb	r3, [r7, #2]
 800700c:	4613      	mov	r3, r2
 800700e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007010:	2300      	movs	r3, #0
 8007012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800701e:	78bb      	ldrb	r3, [r7, #2]
 8007020:	883a      	ldrh	r2, [r7, #0]
 8007022:	78f9      	ldrb	r1, [r7, #3]
 8007024:	f7f9 feea 	bl	8000dfc <HAL_PCD_EP_Open>
 8007028:	4603      	mov	r3, r0
 800702a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	4618      	mov	r0, r3
 8007030:	f000 f916 	bl	8007260 <USBD_Get_USB_Status>
 8007034:	4603      	mov	r3, r0
 8007036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007038:	7bbb      	ldrb	r3, [r7, #14]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	460b      	mov	r3, r1
 800704c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800705c:	78fa      	ldrb	r2, [r7, #3]
 800705e:	4611      	mov	r1, r2
 8007060:	4618      	mov	r0, r3
 8007062:	f7f9 ff31 	bl	8000ec8 <HAL_PCD_EP_Close>
 8007066:	4603      	mov	r3, r0
 8007068:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	4618      	mov	r0, r3
 800706e:	f000 f8f7 	bl	8007260 <USBD_Get_USB_Status>
 8007072:	4603      	mov	r3, r0
 8007074:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007076:	7bbb      	ldrb	r3, [r7, #14]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800709a:	78fa      	ldrb	r2, [r7, #3]
 800709c:	4611      	mov	r1, r2
 800709e:	4618      	mov	r0, r3
 80070a0:	f7f9 ffda 	bl	8001058 <HAL_PCD_EP_SetStall>
 80070a4:	4603      	mov	r3, r0
 80070a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 f8d8 	bl	8007260 <USBD_Get_USB_Status>
 80070b0:	4603      	mov	r3, r0
 80070b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	460b      	mov	r3, r1
 80070c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070d8:	78fa      	ldrb	r2, [r7, #3]
 80070da:	4611      	mov	r1, r2
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fa f81b 	bl	8001118 <HAL_PCD_EP_ClrStall>
 80070e2:	4603      	mov	r3, r0
 80070e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 f8b9 	bl	8007260 <USBD_Get_USB_Status>
 80070ee:	4603      	mov	r3, r0
 80070f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800710e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007114:	2b00      	cmp	r3, #0
 8007116:	da0c      	bge.n	8007132 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007118:	78fb      	ldrb	r3, [r7, #3]
 800711a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800711e:	68f9      	ldr	r1, [r7, #12]
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	440b      	add	r3, r1
 800712c:	3302      	adds	r3, #2
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	e00b      	b.n	800714a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007132:	78fb      	ldrb	r3, [r7, #3]
 8007134:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007138:	68f9      	ldr	r1, [r7, #12]
 800713a:	4613      	mov	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	440b      	add	r3, r1
 8007144:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007148:	781b      	ldrb	r3, [r3, #0]
  }
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr

08007154 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800716e:	78fa      	ldrb	r2, [r7, #3]
 8007170:	4611      	mov	r1, r2
 8007172:	4618      	mov	r0, r3
 8007174:	f7f9 fe1d 	bl	8000db2 <HAL_PCD_SetAddress>
 8007178:	4603      	mov	r3, r0
 800717a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	4618      	mov	r0, r3
 8007180:	f000 f86e 	bl	8007260 <USBD_Get_USB_Status>
 8007184:	4603      	mov	r3, r0
 8007186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007188:	7bbb      	ldrb	r3, [r7, #14]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b086      	sub	sp, #24
 8007196:	af00      	add	r7, sp, #0
 8007198:	60f8      	str	r0, [r7, #12]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	461a      	mov	r2, r3
 800719e:	460b      	mov	r3, r1
 80071a0:	72fb      	strb	r3, [r7, #11]
 80071a2:	4613      	mov	r3, r2
 80071a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071b4:	893b      	ldrh	r3, [r7, #8]
 80071b6:	7af9      	ldrb	r1, [r7, #11]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	f7f9 ff0a 	bl	8000fd2 <HAL_PCD_EP_Transmit>
 80071be:	4603      	mov	r3, r0
 80071c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 f84b 	bl	8007260 <USBD_Get_USB_Status>
 80071ca:	4603      	mov	r3, r0
 80071cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80071ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	607a      	str	r2, [r7, #4]
 80071e2:	461a      	mov	r2, r3
 80071e4:	460b      	mov	r3, r1
 80071e6:	72fb      	strb	r3, [r7, #11]
 80071e8:	4613      	mov	r3, r2
 80071ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071fa:	893b      	ldrh	r3, [r7, #8]
 80071fc:	7af9      	ldrb	r1, [r7, #11]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	f7f9 feaa 	bl	8000f58 <HAL_PCD_EP_Receive>
 8007204:	4603      	mov	r3, r0
 8007206:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	4618      	mov	r0, r3
 800720c:	f000 f828 	bl	8007260 <USBD_Get_USB_Status>
 8007210:	4603      	mov	r3, r0
 8007212:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007214:	7dbb      	ldrb	r3, [r7, #22]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007228:	4b02      	ldr	r3, [pc, #8]	; (8007234 <USBD_static_malloc+0x14>)
}
 800722a:	4618      	mov	r0, r3
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	bc80      	pop	{r7}
 8007232:	4770      	bx	lr
 8007234:	20000a00 	.word	0x20000a00

08007238 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]

}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	bc80      	pop	{r7}
 8007248:	4770      	bx	lr

0800724a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	460b      	mov	r3, r1
 8007254:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007256:	bf00      	nop
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr

08007260 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	4603      	mov	r3, r0
 8007268:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	2b03      	cmp	r3, #3
 8007272:	d817      	bhi.n	80072a4 <USBD_Get_USB_Status+0x44>
 8007274:	a201      	add	r2, pc, #4	; (adr r2, 800727c <USBD_Get_USB_Status+0x1c>)
 8007276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727a:	bf00      	nop
 800727c:	0800728d 	.word	0x0800728d
 8007280:	08007293 	.word	0x08007293
 8007284:	08007299 	.word	0x08007299
 8007288:	0800729f 	.word	0x0800729f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	73fb      	strb	r3, [r7, #15]
    break;
 8007290:	e00b      	b.n	80072aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007292:	2302      	movs	r3, #2
 8007294:	73fb      	strb	r3, [r7, #15]
    break;
 8007296:	e008      	b.n	80072aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007298:	2301      	movs	r3, #1
 800729a:	73fb      	strb	r3, [r7, #15]
    break;
 800729c:	e005      	b.n	80072aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800729e:	2302      	movs	r3, #2
 80072a0:	73fb      	strb	r3, [r7, #15]
    break;
 80072a2:	e002      	b.n	80072aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80072a4:	2302      	movs	r3, #2
 80072a6:	73fb      	strb	r3, [r7, #15]
    break;
 80072a8:	bf00      	nop
  }
  return usb_status;
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bc80      	pop	{r7}
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop

080072b8 <__errno>:
 80072b8:	4b01      	ldr	r3, [pc, #4]	; (80072c0 <__errno+0x8>)
 80072ba:	6818      	ldr	r0, [r3, #0]
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	20000158 	.word	0x20000158

080072c4 <__libc_init_array>:
 80072c4:	b570      	push	{r4, r5, r6, lr}
 80072c6:	2600      	movs	r6, #0
 80072c8:	4d0c      	ldr	r5, [pc, #48]	; (80072fc <__libc_init_array+0x38>)
 80072ca:	4c0d      	ldr	r4, [pc, #52]	; (8007300 <__libc_init_array+0x3c>)
 80072cc:	1b64      	subs	r4, r4, r5
 80072ce:	10a4      	asrs	r4, r4, #2
 80072d0:	42a6      	cmp	r6, r4
 80072d2:	d109      	bne.n	80072e8 <__libc_init_array+0x24>
 80072d4:	f000 fc9c 	bl	8007c10 <_init>
 80072d8:	2600      	movs	r6, #0
 80072da:	4d0a      	ldr	r5, [pc, #40]	; (8007304 <__libc_init_array+0x40>)
 80072dc:	4c0a      	ldr	r4, [pc, #40]	; (8007308 <__libc_init_array+0x44>)
 80072de:	1b64      	subs	r4, r4, r5
 80072e0:	10a4      	asrs	r4, r4, #2
 80072e2:	42a6      	cmp	r6, r4
 80072e4:	d105      	bne.n	80072f2 <__libc_init_array+0x2e>
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ec:	4798      	blx	r3
 80072ee:	3601      	adds	r6, #1
 80072f0:	e7ee      	b.n	80072d0 <__libc_init_array+0xc>
 80072f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f6:	4798      	blx	r3
 80072f8:	3601      	adds	r6, #1
 80072fa:	e7f2      	b.n	80072e2 <__libc_init_array+0x1e>
 80072fc:	08007cf8 	.word	0x08007cf8
 8007300:	08007cf8 	.word	0x08007cf8
 8007304:	08007cf8 	.word	0x08007cf8
 8007308:	08007cfc 	.word	0x08007cfc

0800730c <memset>:
 800730c:	4603      	mov	r3, r0
 800730e:	4402      	add	r2, r0
 8007310:	4293      	cmp	r3, r2
 8007312:	d100      	bne.n	8007316 <memset+0xa>
 8007314:	4770      	bx	lr
 8007316:	f803 1b01 	strb.w	r1, [r3], #1
 800731a:	e7f9      	b.n	8007310 <memset+0x4>

0800731c <siprintf>:
 800731c:	b40e      	push	{r1, r2, r3}
 800731e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007322:	b500      	push	{lr}
 8007324:	b09c      	sub	sp, #112	; 0x70
 8007326:	ab1d      	add	r3, sp, #116	; 0x74
 8007328:	9002      	str	r0, [sp, #8]
 800732a:	9006      	str	r0, [sp, #24]
 800732c:	9107      	str	r1, [sp, #28]
 800732e:	9104      	str	r1, [sp, #16]
 8007330:	4808      	ldr	r0, [pc, #32]	; (8007354 <siprintf+0x38>)
 8007332:	4909      	ldr	r1, [pc, #36]	; (8007358 <siprintf+0x3c>)
 8007334:	f853 2b04 	ldr.w	r2, [r3], #4
 8007338:	9105      	str	r1, [sp, #20]
 800733a:	6800      	ldr	r0, [r0, #0]
 800733c:	a902      	add	r1, sp, #8
 800733e:	9301      	str	r3, [sp, #4]
 8007340:	f000 f868 	bl	8007414 <_svfiprintf_r>
 8007344:	2200      	movs	r2, #0
 8007346:	9b02      	ldr	r3, [sp, #8]
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	b01c      	add	sp, #112	; 0x70
 800734c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007350:	b003      	add	sp, #12
 8007352:	4770      	bx	lr
 8007354:	20000158 	.word	0x20000158
 8007358:	ffff0208 	.word	0xffff0208

0800735c <__ssputs_r>:
 800735c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007360:	688e      	ldr	r6, [r1, #8]
 8007362:	4682      	mov	sl, r0
 8007364:	429e      	cmp	r6, r3
 8007366:	460c      	mov	r4, r1
 8007368:	4690      	mov	r8, r2
 800736a:	461f      	mov	r7, r3
 800736c:	d838      	bhi.n	80073e0 <__ssputs_r+0x84>
 800736e:	898a      	ldrh	r2, [r1, #12]
 8007370:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007374:	d032      	beq.n	80073dc <__ssputs_r+0x80>
 8007376:	6825      	ldr	r5, [r4, #0]
 8007378:	6909      	ldr	r1, [r1, #16]
 800737a:	3301      	adds	r3, #1
 800737c:	eba5 0901 	sub.w	r9, r5, r1
 8007380:	6965      	ldr	r5, [r4, #20]
 8007382:	444b      	add	r3, r9
 8007384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800738c:	106d      	asrs	r5, r5, #1
 800738e:	429d      	cmp	r5, r3
 8007390:	bf38      	it	cc
 8007392:	461d      	movcc	r5, r3
 8007394:	0553      	lsls	r3, r2, #21
 8007396:	d531      	bpl.n	80073fc <__ssputs_r+0xa0>
 8007398:	4629      	mov	r1, r5
 800739a:	f000 fb6f 	bl	8007a7c <_malloc_r>
 800739e:	4606      	mov	r6, r0
 80073a0:	b950      	cbnz	r0, 80073b8 <__ssputs_r+0x5c>
 80073a2:	230c      	movs	r3, #12
 80073a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073a8:	f8ca 3000 	str.w	r3, [sl]
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073b2:	81a3      	strh	r3, [r4, #12]
 80073b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b8:	464a      	mov	r2, r9
 80073ba:	6921      	ldr	r1, [r4, #16]
 80073bc:	f000 face 	bl	800795c <memcpy>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ca:	81a3      	strh	r3, [r4, #12]
 80073cc:	6126      	str	r6, [r4, #16]
 80073ce:	444e      	add	r6, r9
 80073d0:	6026      	str	r6, [r4, #0]
 80073d2:	463e      	mov	r6, r7
 80073d4:	6165      	str	r5, [r4, #20]
 80073d6:	eba5 0509 	sub.w	r5, r5, r9
 80073da:	60a5      	str	r5, [r4, #8]
 80073dc:	42be      	cmp	r6, r7
 80073de:	d900      	bls.n	80073e2 <__ssputs_r+0x86>
 80073e0:	463e      	mov	r6, r7
 80073e2:	4632      	mov	r2, r6
 80073e4:	4641      	mov	r1, r8
 80073e6:	6820      	ldr	r0, [r4, #0]
 80073e8:	f000 fac6 	bl	8007978 <memmove>
 80073ec:	68a3      	ldr	r3, [r4, #8]
 80073ee:	2000      	movs	r0, #0
 80073f0:	1b9b      	subs	r3, r3, r6
 80073f2:	60a3      	str	r3, [r4, #8]
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	4433      	add	r3, r6
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	e7db      	b.n	80073b4 <__ssputs_r+0x58>
 80073fc:	462a      	mov	r2, r5
 80073fe:	f000 fbb1 	bl	8007b64 <_realloc_r>
 8007402:	4606      	mov	r6, r0
 8007404:	2800      	cmp	r0, #0
 8007406:	d1e1      	bne.n	80073cc <__ssputs_r+0x70>
 8007408:	4650      	mov	r0, sl
 800740a:	6921      	ldr	r1, [r4, #16]
 800740c:	f000 face 	bl	80079ac <_free_r>
 8007410:	e7c7      	b.n	80073a2 <__ssputs_r+0x46>
	...

08007414 <_svfiprintf_r>:
 8007414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	4698      	mov	r8, r3
 800741a:	898b      	ldrh	r3, [r1, #12]
 800741c:	4607      	mov	r7, r0
 800741e:	061b      	lsls	r3, r3, #24
 8007420:	460d      	mov	r5, r1
 8007422:	4614      	mov	r4, r2
 8007424:	b09d      	sub	sp, #116	; 0x74
 8007426:	d50e      	bpl.n	8007446 <_svfiprintf_r+0x32>
 8007428:	690b      	ldr	r3, [r1, #16]
 800742a:	b963      	cbnz	r3, 8007446 <_svfiprintf_r+0x32>
 800742c:	2140      	movs	r1, #64	; 0x40
 800742e:	f000 fb25 	bl	8007a7c <_malloc_r>
 8007432:	6028      	str	r0, [r5, #0]
 8007434:	6128      	str	r0, [r5, #16]
 8007436:	b920      	cbnz	r0, 8007442 <_svfiprintf_r+0x2e>
 8007438:	230c      	movs	r3, #12
 800743a:	603b      	str	r3, [r7, #0]
 800743c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007440:	e0d1      	b.n	80075e6 <_svfiprintf_r+0x1d2>
 8007442:	2340      	movs	r3, #64	; 0x40
 8007444:	616b      	str	r3, [r5, #20]
 8007446:	2300      	movs	r3, #0
 8007448:	9309      	str	r3, [sp, #36]	; 0x24
 800744a:	2320      	movs	r3, #32
 800744c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007450:	2330      	movs	r3, #48	; 0x30
 8007452:	f04f 0901 	mov.w	r9, #1
 8007456:	f8cd 800c 	str.w	r8, [sp, #12]
 800745a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007600 <_svfiprintf_r+0x1ec>
 800745e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007462:	4623      	mov	r3, r4
 8007464:	469a      	mov	sl, r3
 8007466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800746a:	b10a      	cbz	r2, 8007470 <_svfiprintf_r+0x5c>
 800746c:	2a25      	cmp	r2, #37	; 0x25
 800746e:	d1f9      	bne.n	8007464 <_svfiprintf_r+0x50>
 8007470:	ebba 0b04 	subs.w	fp, sl, r4
 8007474:	d00b      	beq.n	800748e <_svfiprintf_r+0x7a>
 8007476:	465b      	mov	r3, fp
 8007478:	4622      	mov	r2, r4
 800747a:	4629      	mov	r1, r5
 800747c:	4638      	mov	r0, r7
 800747e:	f7ff ff6d 	bl	800735c <__ssputs_r>
 8007482:	3001      	adds	r0, #1
 8007484:	f000 80aa 	beq.w	80075dc <_svfiprintf_r+0x1c8>
 8007488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800748a:	445a      	add	r2, fp
 800748c:	9209      	str	r2, [sp, #36]	; 0x24
 800748e:	f89a 3000 	ldrb.w	r3, [sl]
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 80a2 	beq.w	80075dc <_svfiprintf_r+0x1c8>
 8007498:	2300      	movs	r3, #0
 800749a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800749e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074a2:	f10a 0a01 	add.w	sl, sl, #1
 80074a6:	9304      	str	r3, [sp, #16]
 80074a8:	9307      	str	r3, [sp, #28]
 80074aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074ae:	931a      	str	r3, [sp, #104]	; 0x68
 80074b0:	4654      	mov	r4, sl
 80074b2:	2205      	movs	r2, #5
 80074b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b8:	4851      	ldr	r0, [pc, #324]	; (8007600 <_svfiprintf_r+0x1ec>)
 80074ba:	f000 fa41 	bl	8007940 <memchr>
 80074be:	9a04      	ldr	r2, [sp, #16]
 80074c0:	b9d8      	cbnz	r0, 80074fa <_svfiprintf_r+0xe6>
 80074c2:	06d0      	lsls	r0, r2, #27
 80074c4:	bf44      	itt	mi
 80074c6:	2320      	movmi	r3, #32
 80074c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074cc:	0711      	lsls	r1, r2, #28
 80074ce:	bf44      	itt	mi
 80074d0:	232b      	movmi	r3, #43	; 0x2b
 80074d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074d6:	f89a 3000 	ldrb.w	r3, [sl]
 80074da:	2b2a      	cmp	r3, #42	; 0x2a
 80074dc:	d015      	beq.n	800750a <_svfiprintf_r+0xf6>
 80074de:	4654      	mov	r4, sl
 80074e0:	2000      	movs	r0, #0
 80074e2:	f04f 0c0a 	mov.w	ip, #10
 80074e6:	9a07      	ldr	r2, [sp, #28]
 80074e8:	4621      	mov	r1, r4
 80074ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074ee:	3b30      	subs	r3, #48	; 0x30
 80074f0:	2b09      	cmp	r3, #9
 80074f2:	d94e      	bls.n	8007592 <_svfiprintf_r+0x17e>
 80074f4:	b1b0      	cbz	r0, 8007524 <_svfiprintf_r+0x110>
 80074f6:	9207      	str	r2, [sp, #28]
 80074f8:	e014      	b.n	8007524 <_svfiprintf_r+0x110>
 80074fa:	eba0 0308 	sub.w	r3, r0, r8
 80074fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007502:	4313      	orrs	r3, r2
 8007504:	46a2      	mov	sl, r4
 8007506:	9304      	str	r3, [sp, #16]
 8007508:	e7d2      	b.n	80074b0 <_svfiprintf_r+0x9c>
 800750a:	9b03      	ldr	r3, [sp, #12]
 800750c:	1d19      	adds	r1, r3, #4
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	9103      	str	r1, [sp, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	bfbb      	ittet	lt
 8007516:	425b      	neglt	r3, r3
 8007518:	f042 0202 	orrlt.w	r2, r2, #2
 800751c:	9307      	strge	r3, [sp, #28]
 800751e:	9307      	strlt	r3, [sp, #28]
 8007520:	bfb8      	it	lt
 8007522:	9204      	strlt	r2, [sp, #16]
 8007524:	7823      	ldrb	r3, [r4, #0]
 8007526:	2b2e      	cmp	r3, #46	; 0x2e
 8007528:	d10c      	bne.n	8007544 <_svfiprintf_r+0x130>
 800752a:	7863      	ldrb	r3, [r4, #1]
 800752c:	2b2a      	cmp	r3, #42	; 0x2a
 800752e:	d135      	bne.n	800759c <_svfiprintf_r+0x188>
 8007530:	9b03      	ldr	r3, [sp, #12]
 8007532:	3402      	adds	r4, #2
 8007534:	1d1a      	adds	r2, r3, #4
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	9203      	str	r2, [sp, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	bfb8      	it	lt
 800753e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007542:	9305      	str	r3, [sp, #20]
 8007544:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007604 <_svfiprintf_r+0x1f0>
 8007548:	2203      	movs	r2, #3
 800754a:	4650      	mov	r0, sl
 800754c:	7821      	ldrb	r1, [r4, #0]
 800754e:	f000 f9f7 	bl	8007940 <memchr>
 8007552:	b140      	cbz	r0, 8007566 <_svfiprintf_r+0x152>
 8007554:	2340      	movs	r3, #64	; 0x40
 8007556:	eba0 000a 	sub.w	r0, r0, sl
 800755a:	fa03 f000 	lsl.w	r0, r3, r0
 800755e:	9b04      	ldr	r3, [sp, #16]
 8007560:	3401      	adds	r4, #1
 8007562:	4303      	orrs	r3, r0
 8007564:	9304      	str	r3, [sp, #16]
 8007566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800756a:	2206      	movs	r2, #6
 800756c:	4826      	ldr	r0, [pc, #152]	; (8007608 <_svfiprintf_r+0x1f4>)
 800756e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007572:	f000 f9e5 	bl	8007940 <memchr>
 8007576:	2800      	cmp	r0, #0
 8007578:	d038      	beq.n	80075ec <_svfiprintf_r+0x1d8>
 800757a:	4b24      	ldr	r3, [pc, #144]	; (800760c <_svfiprintf_r+0x1f8>)
 800757c:	bb1b      	cbnz	r3, 80075c6 <_svfiprintf_r+0x1b2>
 800757e:	9b03      	ldr	r3, [sp, #12]
 8007580:	3307      	adds	r3, #7
 8007582:	f023 0307 	bic.w	r3, r3, #7
 8007586:	3308      	adds	r3, #8
 8007588:	9303      	str	r3, [sp, #12]
 800758a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758c:	4433      	add	r3, r6
 800758e:	9309      	str	r3, [sp, #36]	; 0x24
 8007590:	e767      	b.n	8007462 <_svfiprintf_r+0x4e>
 8007592:	460c      	mov	r4, r1
 8007594:	2001      	movs	r0, #1
 8007596:	fb0c 3202 	mla	r2, ip, r2, r3
 800759a:	e7a5      	b.n	80074e8 <_svfiprintf_r+0xd4>
 800759c:	2300      	movs	r3, #0
 800759e:	f04f 0c0a 	mov.w	ip, #10
 80075a2:	4619      	mov	r1, r3
 80075a4:	3401      	adds	r4, #1
 80075a6:	9305      	str	r3, [sp, #20]
 80075a8:	4620      	mov	r0, r4
 80075aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ae:	3a30      	subs	r2, #48	; 0x30
 80075b0:	2a09      	cmp	r2, #9
 80075b2:	d903      	bls.n	80075bc <_svfiprintf_r+0x1a8>
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0c5      	beq.n	8007544 <_svfiprintf_r+0x130>
 80075b8:	9105      	str	r1, [sp, #20]
 80075ba:	e7c3      	b.n	8007544 <_svfiprintf_r+0x130>
 80075bc:	4604      	mov	r4, r0
 80075be:	2301      	movs	r3, #1
 80075c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80075c4:	e7f0      	b.n	80075a8 <_svfiprintf_r+0x194>
 80075c6:	ab03      	add	r3, sp, #12
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	462a      	mov	r2, r5
 80075cc:	4638      	mov	r0, r7
 80075ce:	4b10      	ldr	r3, [pc, #64]	; (8007610 <_svfiprintf_r+0x1fc>)
 80075d0:	a904      	add	r1, sp, #16
 80075d2:	f3af 8000 	nop.w
 80075d6:	1c42      	adds	r2, r0, #1
 80075d8:	4606      	mov	r6, r0
 80075da:	d1d6      	bne.n	800758a <_svfiprintf_r+0x176>
 80075dc:	89ab      	ldrh	r3, [r5, #12]
 80075de:	065b      	lsls	r3, r3, #25
 80075e0:	f53f af2c 	bmi.w	800743c <_svfiprintf_r+0x28>
 80075e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075e6:	b01d      	add	sp, #116	; 0x74
 80075e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ec:	ab03      	add	r3, sp, #12
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	462a      	mov	r2, r5
 80075f2:	4638      	mov	r0, r7
 80075f4:	4b06      	ldr	r3, [pc, #24]	; (8007610 <_svfiprintf_r+0x1fc>)
 80075f6:	a904      	add	r1, sp, #16
 80075f8:	f000 f87c 	bl	80076f4 <_printf_i>
 80075fc:	e7eb      	b.n	80075d6 <_svfiprintf_r+0x1c2>
 80075fe:	bf00      	nop
 8007600:	08007cc4 	.word	0x08007cc4
 8007604:	08007cca 	.word	0x08007cca
 8007608:	08007cce 	.word	0x08007cce
 800760c:	00000000 	.word	0x00000000
 8007610:	0800735d 	.word	0x0800735d

08007614 <_printf_common>:
 8007614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007618:	4616      	mov	r6, r2
 800761a:	4699      	mov	r9, r3
 800761c:	688a      	ldr	r2, [r1, #8]
 800761e:	690b      	ldr	r3, [r1, #16]
 8007620:	4607      	mov	r7, r0
 8007622:	4293      	cmp	r3, r2
 8007624:	bfb8      	it	lt
 8007626:	4613      	movlt	r3, r2
 8007628:	6033      	str	r3, [r6, #0]
 800762a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800762e:	460c      	mov	r4, r1
 8007630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007634:	b10a      	cbz	r2, 800763a <_printf_common+0x26>
 8007636:	3301      	adds	r3, #1
 8007638:	6033      	str	r3, [r6, #0]
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	0699      	lsls	r1, r3, #26
 800763e:	bf42      	ittt	mi
 8007640:	6833      	ldrmi	r3, [r6, #0]
 8007642:	3302      	addmi	r3, #2
 8007644:	6033      	strmi	r3, [r6, #0]
 8007646:	6825      	ldr	r5, [r4, #0]
 8007648:	f015 0506 	ands.w	r5, r5, #6
 800764c:	d106      	bne.n	800765c <_printf_common+0x48>
 800764e:	f104 0a19 	add.w	sl, r4, #25
 8007652:	68e3      	ldr	r3, [r4, #12]
 8007654:	6832      	ldr	r2, [r6, #0]
 8007656:	1a9b      	subs	r3, r3, r2
 8007658:	42ab      	cmp	r3, r5
 800765a:	dc28      	bgt.n	80076ae <_printf_common+0x9a>
 800765c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007660:	1e13      	subs	r3, r2, #0
 8007662:	6822      	ldr	r2, [r4, #0]
 8007664:	bf18      	it	ne
 8007666:	2301      	movne	r3, #1
 8007668:	0692      	lsls	r2, r2, #26
 800766a:	d42d      	bmi.n	80076c8 <_printf_common+0xb4>
 800766c:	4649      	mov	r1, r9
 800766e:	4638      	mov	r0, r7
 8007670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007674:	47c0      	blx	r8
 8007676:	3001      	adds	r0, #1
 8007678:	d020      	beq.n	80076bc <_printf_common+0xa8>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	68e5      	ldr	r5, [r4, #12]
 800767e:	f003 0306 	and.w	r3, r3, #6
 8007682:	2b04      	cmp	r3, #4
 8007684:	bf18      	it	ne
 8007686:	2500      	movne	r5, #0
 8007688:	6832      	ldr	r2, [r6, #0]
 800768a:	f04f 0600 	mov.w	r6, #0
 800768e:	68a3      	ldr	r3, [r4, #8]
 8007690:	bf08      	it	eq
 8007692:	1aad      	subeq	r5, r5, r2
 8007694:	6922      	ldr	r2, [r4, #16]
 8007696:	bf08      	it	eq
 8007698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800769c:	4293      	cmp	r3, r2
 800769e:	bfc4      	itt	gt
 80076a0:	1a9b      	subgt	r3, r3, r2
 80076a2:	18ed      	addgt	r5, r5, r3
 80076a4:	341a      	adds	r4, #26
 80076a6:	42b5      	cmp	r5, r6
 80076a8:	d11a      	bne.n	80076e0 <_printf_common+0xcc>
 80076aa:	2000      	movs	r0, #0
 80076ac:	e008      	b.n	80076c0 <_printf_common+0xac>
 80076ae:	2301      	movs	r3, #1
 80076b0:	4652      	mov	r2, sl
 80076b2:	4649      	mov	r1, r9
 80076b4:	4638      	mov	r0, r7
 80076b6:	47c0      	blx	r8
 80076b8:	3001      	adds	r0, #1
 80076ba:	d103      	bne.n	80076c4 <_printf_common+0xb0>
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c4:	3501      	adds	r5, #1
 80076c6:	e7c4      	b.n	8007652 <_printf_common+0x3e>
 80076c8:	2030      	movs	r0, #48	; 0x30
 80076ca:	18e1      	adds	r1, r4, r3
 80076cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076d0:	1c5a      	adds	r2, r3, #1
 80076d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076d6:	4422      	add	r2, r4
 80076d8:	3302      	adds	r3, #2
 80076da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076de:	e7c5      	b.n	800766c <_printf_common+0x58>
 80076e0:	2301      	movs	r3, #1
 80076e2:	4622      	mov	r2, r4
 80076e4:	4649      	mov	r1, r9
 80076e6:	4638      	mov	r0, r7
 80076e8:	47c0      	blx	r8
 80076ea:	3001      	adds	r0, #1
 80076ec:	d0e6      	beq.n	80076bc <_printf_common+0xa8>
 80076ee:	3601      	adds	r6, #1
 80076f0:	e7d9      	b.n	80076a6 <_printf_common+0x92>
	...

080076f4 <_printf_i>:
 80076f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f8:	7e0f      	ldrb	r7, [r1, #24]
 80076fa:	4691      	mov	r9, r2
 80076fc:	2f78      	cmp	r7, #120	; 0x78
 80076fe:	4680      	mov	r8, r0
 8007700:	460c      	mov	r4, r1
 8007702:	469a      	mov	sl, r3
 8007704:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007706:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800770a:	d807      	bhi.n	800771c <_printf_i+0x28>
 800770c:	2f62      	cmp	r7, #98	; 0x62
 800770e:	d80a      	bhi.n	8007726 <_printf_i+0x32>
 8007710:	2f00      	cmp	r7, #0
 8007712:	f000 80d9 	beq.w	80078c8 <_printf_i+0x1d4>
 8007716:	2f58      	cmp	r7, #88	; 0x58
 8007718:	f000 80a4 	beq.w	8007864 <_printf_i+0x170>
 800771c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007724:	e03a      	b.n	800779c <_printf_i+0xa8>
 8007726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800772a:	2b15      	cmp	r3, #21
 800772c:	d8f6      	bhi.n	800771c <_printf_i+0x28>
 800772e:	a101      	add	r1, pc, #4	; (adr r1, 8007734 <_printf_i+0x40>)
 8007730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007734:	0800778d 	.word	0x0800778d
 8007738:	080077a1 	.word	0x080077a1
 800773c:	0800771d 	.word	0x0800771d
 8007740:	0800771d 	.word	0x0800771d
 8007744:	0800771d 	.word	0x0800771d
 8007748:	0800771d 	.word	0x0800771d
 800774c:	080077a1 	.word	0x080077a1
 8007750:	0800771d 	.word	0x0800771d
 8007754:	0800771d 	.word	0x0800771d
 8007758:	0800771d 	.word	0x0800771d
 800775c:	0800771d 	.word	0x0800771d
 8007760:	080078af 	.word	0x080078af
 8007764:	080077d1 	.word	0x080077d1
 8007768:	08007891 	.word	0x08007891
 800776c:	0800771d 	.word	0x0800771d
 8007770:	0800771d 	.word	0x0800771d
 8007774:	080078d1 	.word	0x080078d1
 8007778:	0800771d 	.word	0x0800771d
 800777c:	080077d1 	.word	0x080077d1
 8007780:	0800771d 	.word	0x0800771d
 8007784:	0800771d 	.word	0x0800771d
 8007788:	08007899 	.word	0x08007899
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	1d1a      	adds	r2, r3, #4
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	602a      	str	r2, [r5, #0]
 8007794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800779c:	2301      	movs	r3, #1
 800779e:	e0a4      	b.n	80078ea <_printf_i+0x1f6>
 80077a0:	6820      	ldr	r0, [r4, #0]
 80077a2:	6829      	ldr	r1, [r5, #0]
 80077a4:	0606      	lsls	r6, r0, #24
 80077a6:	f101 0304 	add.w	r3, r1, #4
 80077aa:	d50a      	bpl.n	80077c2 <_printf_i+0xce>
 80077ac:	680e      	ldr	r6, [r1, #0]
 80077ae:	602b      	str	r3, [r5, #0]
 80077b0:	2e00      	cmp	r6, #0
 80077b2:	da03      	bge.n	80077bc <_printf_i+0xc8>
 80077b4:	232d      	movs	r3, #45	; 0x2d
 80077b6:	4276      	negs	r6, r6
 80077b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077bc:	230a      	movs	r3, #10
 80077be:	485e      	ldr	r0, [pc, #376]	; (8007938 <_printf_i+0x244>)
 80077c0:	e019      	b.n	80077f6 <_printf_i+0x102>
 80077c2:	680e      	ldr	r6, [r1, #0]
 80077c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077c8:	602b      	str	r3, [r5, #0]
 80077ca:	bf18      	it	ne
 80077cc:	b236      	sxthne	r6, r6
 80077ce:	e7ef      	b.n	80077b0 <_printf_i+0xbc>
 80077d0:	682b      	ldr	r3, [r5, #0]
 80077d2:	6820      	ldr	r0, [r4, #0]
 80077d4:	1d19      	adds	r1, r3, #4
 80077d6:	6029      	str	r1, [r5, #0]
 80077d8:	0601      	lsls	r1, r0, #24
 80077da:	d501      	bpl.n	80077e0 <_printf_i+0xec>
 80077dc:	681e      	ldr	r6, [r3, #0]
 80077de:	e002      	b.n	80077e6 <_printf_i+0xf2>
 80077e0:	0646      	lsls	r6, r0, #25
 80077e2:	d5fb      	bpl.n	80077dc <_printf_i+0xe8>
 80077e4:	881e      	ldrh	r6, [r3, #0]
 80077e6:	2f6f      	cmp	r7, #111	; 0x6f
 80077e8:	bf0c      	ite	eq
 80077ea:	2308      	moveq	r3, #8
 80077ec:	230a      	movne	r3, #10
 80077ee:	4852      	ldr	r0, [pc, #328]	; (8007938 <_printf_i+0x244>)
 80077f0:	2100      	movs	r1, #0
 80077f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077f6:	6865      	ldr	r5, [r4, #4]
 80077f8:	2d00      	cmp	r5, #0
 80077fa:	bfa8      	it	ge
 80077fc:	6821      	ldrge	r1, [r4, #0]
 80077fe:	60a5      	str	r5, [r4, #8]
 8007800:	bfa4      	itt	ge
 8007802:	f021 0104 	bicge.w	r1, r1, #4
 8007806:	6021      	strge	r1, [r4, #0]
 8007808:	b90e      	cbnz	r6, 800780e <_printf_i+0x11a>
 800780a:	2d00      	cmp	r5, #0
 800780c:	d04d      	beq.n	80078aa <_printf_i+0x1b6>
 800780e:	4615      	mov	r5, r2
 8007810:	fbb6 f1f3 	udiv	r1, r6, r3
 8007814:	fb03 6711 	mls	r7, r3, r1, r6
 8007818:	5dc7      	ldrb	r7, [r0, r7]
 800781a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800781e:	4637      	mov	r7, r6
 8007820:	42bb      	cmp	r3, r7
 8007822:	460e      	mov	r6, r1
 8007824:	d9f4      	bls.n	8007810 <_printf_i+0x11c>
 8007826:	2b08      	cmp	r3, #8
 8007828:	d10b      	bne.n	8007842 <_printf_i+0x14e>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	07de      	lsls	r6, r3, #31
 800782e:	d508      	bpl.n	8007842 <_printf_i+0x14e>
 8007830:	6923      	ldr	r3, [r4, #16]
 8007832:	6861      	ldr	r1, [r4, #4]
 8007834:	4299      	cmp	r1, r3
 8007836:	bfde      	ittt	le
 8007838:	2330      	movle	r3, #48	; 0x30
 800783a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800783e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007842:	1b52      	subs	r2, r2, r5
 8007844:	6122      	str	r2, [r4, #16]
 8007846:	464b      	mov	r3, r9
 8007848:	4621      	mov	r1, r4
 800784a:	4640      	mov	r0, r8
 800784c:	f8cd a000 	str.w	sl, [sp]
 8007850:	aa03      	add	r2, sp, #12
 8007852:	f7ff fedf 	bl	8007614 <_printf_common>
 8007856:	3001      	adds	r0, #1
 8007858:	d14c      	bne.n	80078f4 <_printf_i+0x200>
 800785a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800785e:	b004      	add	sp, #16
 8007860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007864:	4834      	ldr	r0, [pc, #208]	; (8007938 <_printf_i+0x244>)
 8007866:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800786a:	6829      	ldr	r1, [r5, #0]
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007872:	6029      	str	r1, [r5, #0]
 8007874:	061d      	lsls	r5, r3, #24
 8007876:	d514      	bpl.n	80078a2 <_printf_i+0x1ae>
 8007878:	07df      	lsls	r7, r3, #31
 800787a:	bf44      	itt	mi
 800787c:	f043 0320 	orrmi.w	r3, r3, #32
 8007880:	6023      	strmi	r3, [r4, #0]
 8007882:	b91e      	cbnz	r6, 800788c <_printf_i+0x198>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	f023 0320 	bic.w	r3, r3, #32
 800788a:	6023      	str	r3, [r4, #0]
 800788c:	2310      	movs	r3, #16
 800788e:	e7af      	b.n	80077f0 <_printf_i+0xfc>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	f043 0320 	orr.w	r3, r3, #32
 8007896:	6023      	str	r3, [r4, #0]
 8007898:	2378      	movs	r3, #120	; 0x78
 800789a:	4828      	ldr	r0, [pc, #160]	; (800793c <_printf_i+0x248>)
 800789c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078a0:	e7e3      	b.n	800786a <_printf_i+0x176>
 80078a2:	0659      	lsls	r1, r3, #25
 80078a4:	bf48      	it	mi
 80078a6:	b2b6      	uxthmi	r6, r6
 80078a8:	e7e6      	b.n	8007878 <_printf_i+0x184>
 80078aa:	4615      	mov	r5, r2
 80078ac:	e7bb      	b.n	8007826 <_printf_i+0x132>
 80078ae:	682b      	ldr	r3, [r5, #0]
 80078b0:	6826      	ldr	r6, [r4, #0]
 80078b2:	1d18      	adds	r0, r3, #4
 80078b4:	6961      	ldr	r1, [r4, #20]
 80078b6:	6028      	str	r0, [r5, #0]
 80078b8:	0635      	lsls	r5, r6, #24
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	d501      	bpl.n	80078c2 <_printf_i+0x1ce>
 80078be:	6019      	str	r1, [r3, #0]
 80078c0:	e002      	b.n	80078c8 <_printf_i+0x1d4>
 80078c2:	0670      	lsls	r0, r6, #25
 80078c4:	d5fb      	bpl.n	80078be <_printf_i+0x1ca>
 80078c6:	8019      	strh	r1, [r3, #0]
 80078c8:	2300      	movs	r3, #0
 80078ca:	4615      	mov	r5, r2
 80078cc:	6123      	str	r3, [r4, #16]
 80078ce:	e7ba      	b.n	8007846 <_printf_i+0x152>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	2100      	movs	r1, #0
 80078d4:	1d1a      	adds	r2, r3, #4
 80078d6:	602a      	str	r2, [r5, #0]
 80078d8:	681d      	ldr	r5, [r3, #0]
 80078da:	6862      	ldr	r2, [r4, #4]
 80078dc:	4628      	mov	r0, r5
 80078de:	f000 f82f 	bl	8007940 <memchr>
 80078e2:	b108      	cbz	r0, 80078e8 <_printf_i+0x1f4>
 80078e4:	1b40      	subs	r0, r0, r5
 80078e6:	6060      	str	r0, [r4, #4]
 80078e8:	6863      	ldr	r3, [r4, #4]
 80078ea:	6123      	str	r3, [r4, #16]
 80078ec:	2300      	movs	r3, #0
 80078ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078f2:	e7a8      	b.n	8007846 <_printf_i+0x152>
 80078f4:	462a      	mov	r2, r5
 80078f6:	4649      	mov	r1, r9
 80078f8:	4640      	mov	r0, r8
 80078fa:	6923      	ldr	r3, [r4, #16]
 80078fc:	47d0      	blx	sl
 80078fe:	3001      	adds	r0, #1
 8007900:	d0ab      	beq.n	800785a <_printf_i+0x166>
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	079b      	lsls	r3, r3, #30
 8007906:	d413      	bmi.n	8007930 <_printf_i+0x23c>
 8007908:	68e0      	ldr	r0, [r4, #12]
 800790a:	9b03      	ldr	r3, [sp, #12]
 800790c:	4298      	cmp	r0, r3
 800790e:	bfb8      	it	lt
 8007910:	4618      	movlt	r0, r3
 8007912:	e7a4      	b.n	800785e <_printf_i+0x16a>
 8007914:	2301      	movs	r3, #1
 8007916:	4632      	mov	r2, r6
 8007918:	4649      	mov	r1, r9
 800791a:	4640      	mov	r0, r8
 800791c:	47d0      	blx	sl
 800791e:	3001      	adds	r0, #1
 8007920:	d09b      	beq.n	800785a <_printf_i+0x166>
 8007922:	3501      	adds	r5, #1
 8007924:	68e3      	ldr	r3, [r4, #12]
 8007926:	9903      	ldr	r1, [sp, #12]
 8007928:	1a5b      	subs	r3, r3, r1
 800792a:	42ab      	cmp	r3, r5
 800792c:	dcf2      	bgt.n	8007914 <_printf_i+0x220>
 800792e:	e7eb      	b.n	8007908 <_printf_i+0x214>
 8007930:	2500      	movs	r5, #0
 8007932:	f104 0619 	add.w	r6, r4, #25
 8007936:	e7f5      	b.n	8007924 <_printf_i+0x230>
 8007938:	08007cd5 	.word	0x08007cd5
 800793c:	08007ce6 	.word	0x08007ce6

08007940 <memchr>:
 8007940:	4603      	mov	r3, r0
 8007942:	b510      	push	{r4, lr}
 8007944:	b2c9      	uxtb	r1, r1
 8007946:	4402      	add	r2, r0
 8007948:	4293      	cmp	r3, r2
 800794a:	4618      	mov	r0, r3
 800794c:	d101      	bne.n	8007952 <memchr+0x12>
 800794e:	2000      	movs	r0, #0
 8007950:	e003      	b.n	800795a <memchr+0x1a>
 8007952:	7804      	ldrb	r4, [r0, #0]
 8007954:	3301      	adds	r3, #1
 8007956:	428c      	cmp	r4, r1
 8007958:	d1f6      	bne.n	8007948 <memchr+0x8>
 800795a:	bd10      	pop	{r4, pc}

0800795c <memcpy>:
 800795c:	440a      	add	r2, r1
 800795e:	4291      	cmp	r1, r2
 8007960:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007964:	d100      	bne.n	8007968 <memcpy+0xc>
 8007966:	4770      	bx	lr
 8007968:	b510      	push	{r4, lr}
 800796a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800796e:	4291      	cmp	r1, r2
 8007970:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007974:	d1f9      	bne.n	800796a <memcpy+0xe>
 8007976:	bd10      	pop	{r4, pc}

08007978 <memmove>:
 8007978:	4288      	cmp	r0, r1
 800797a:	b510      	push	{r4, lr}
 800797c:	eb01 0402 	add.w	r4, r1, r2
 8007980:	d902      	bls.n	8007988 <memmove+0x10>
 8007982:	4284      	cmp	r4, r0
 8007984:	4623      	mov	r3, r4
 8007986:	d807      	bhi.n	8007998 <memmove+0x20>
 8007988:	1e43      	subs	r3, r0, #1
 800798a:	42a1      	cmp	r1, r4
 800798c:	d008      	beq.n	80079a0 <memmove+0x28>
 800798e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007992:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007996:	e7f8      	b.n	800798a <memmove+0x12>
 8007998:	4601      	mov	r1, r0
 800799a:	4402      	add	r2, r0
 800799c:	428a      	cmp	r2, r1
 800799e:	d100      	bne.n	80079a2 <memmove+0x2a>
 80079a0:	bd10      	pop	{r4, pc}
 80079a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079aa:	e7f7      	b.n	800799c <memmove+0x24>

080079ac <_free_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4605      	mov	r5, r0
 80079b0:	2900      	cmp	r1, #0
 80079b2:	d040      	beq.n	8007a36 <_free_r+0x8a>
 80079b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079b8:	1f0c      	subs	r4, r1, #4
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bfb8      	it	lt
 80079be:	18e4      	addlt	r4, r4, r3
 80079c0:	f000 f910 	bl	8007be4 <__malloc_lock>
 80079c4:	4a1c      	ldr	r2, [pc, #112]	; (8007a38 <_free_r+0x8c>)
 80079c6:	6813      	ldr	r3, [r2, #0]
 80079c8:	b933      	cbnz	r3, 80079d8 <_free_r+0x2c>
 80079ca:	6063      	str	r3, [r4, #4]
 80079cc:	6014      	str	r4, [r2, #0]
 80079ce:	4628      	mov	r0, r5
 80079d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079d4:	f000 b90c 	b.w	8007bf0 <__malloc_unlock>
 80079d8:	42a3      	cmp	r3, r4
 80079da:	d908      	bls.n	80079ee <_free_r+0x42>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	1821      	adds	r1, r4, r0
 80079e0:	428b      	cmp	r3, r1
 80079e2:	bf01      	itttt	eq
 80079e4:	6819      	ldreq	r1, [r3, #0]
 80079e6:	685b      	ldreq	r3, [r3, #4]
 80079e8:	1809      	addeq	r1, r1, r0
 80079ea:	6021      	streq	r1, [r4, #0]
 80079ec:	e7ed      	b.n	80079ca <_free_r+0x1e>
 80079ee:	461a      	mov	r2, r3
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	b10b      	cbz	r3, 80079f8 <_free_r+0x4c>
 80079f4:	42a3      	cmp	r3, r4
 80079f6:	d9fa      	bls.n	80079ee <_free_r+0x42>
 80079f8:	6811      	ldr	r1, [r2, #0]
 80079fa:	1850      	adds	r0, r2, r1
 80079fc:	42a0      	cmp	r0, r4
 80079fe:	d10b      	bne.n	8007a18 <_free_r+0x6c>
 8007a00:	6820      	ldr	r0, [r4, #0]
 8007a02:	4401      	add	r1, r0
 8007a04:	1850      	adds	r0, r2, r1
 8007a06:	4283      	cmp	r3, r0
 8007a08:	6011      	str	r1, [r2, #0]
 8007a0a:	d1e0      	bne.n	80079ce <_free_r+0x22>
 8007a0c:	6818      	ldr	r0, [r3, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	4401      	add	r1, r0
 8007a12:	6011      	str	r1, [r2, #0]
 8007a14:	6053      	str	r3, [r2, #4]
 8007a16:	e7da      	b.n	80079ce <_free_r+0x22>
 8007a18:	d902      	bls.n	8007a20 <_free_r+0x74>
 8007a1a:	230c      	movs	r3, #12
 8007a1c:	602b      	str	r3, [r5, #0]
 8007a1e:	e7d6      	b.n	80079ce <_free_r+0x22>
 8007a20:	6820      	ldr	r0, [r4, #0]
 8007a22:	1821      	adds	r1, r4, r0
 8007a24:	428b      	cmp	r3, r1
 8007a26:	bf01      	itttt	eq
 8007a28:	6819      	ldreq	r1, [r3, #0]
 8007a2a:	685b      	ldreq	r3, [r3, #4]
 8007a2c:	1809      	addeq	r1, r1, r0
 8007a2e:	6021      	streq	r1, [r4, #0]
 8007a30:	6063      	str	r3, [r4, #4]
 8007a32:	6054      	str	r4, [r2, #4]
 8007a34:	e7cb      	b.n	80079ce <_free_r+0x22>
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	20000a14 	.word	0x20000a14

08007a3c <sbrk_aligned>:
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	4e0e      	ldr	r6, [pc, #56]	; (8007a78 <sbrk_aligned+0x3c>)
 8007a40:	460c      	mov	r4, r1
 8007a42:	6831      	ldr	r1, [r6, #0]
 8007a44:	4605      	mov	r5, r0
 8007a46:	b911      	cbnz	r1, 8007a4e <sbrk_aligned+0x12>
 8007a48:	f000 f8bc 	bl	8007bc4 <_sbrk_r>
 8007a4c:	6030      	str	r0, [r6, #0]
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4628      	mov	r0, r5
 8007a52:	f000 f8b7 	bl	8007bc4 <_sbrk_r>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	d00a      	beq.n	8007a70 <sbrk_aligned+0x34>
 8007a5a:	1cc4      	adds	r4, r0, #3
 8007a5c:	f024 0403 	bic.w	r4, r4, #3
 8007a60:	42a0      	cmp	r0, r4
 8007a62:	d007      	beq.n	8007a74 <sbrk_aligned+0x38>
 8007a64:	1a21      	subs	r1, r4, r0
 8007a66:	4628      	mov	r0, r5
 8007a68:	f000 f8ac 	bl	8007bc4 <_sbrk_r>
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d101      	bne.n	8007a74 <sbrk_aligned+0x38>
 8007a70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007a74:	4620      	mov	r0, r4
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	20000a18 	.word	0x20000a18

08007a7c <_malloc_r>:
 8007a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a80:	1ccd      	adds	r5, r1, #3
 8007a82:	f025 0503 	bic.w	r5, r5, #3
 8007a86:	3508      	adds	r5, #8
 8007a88:	2d0c      	cmp	r5, #12
 8007a8a:	bf38      	it	cc
 8007a8c:	250c      	movcc	r5, #12
 8007a8e:	2d00      	cmp	r5, #0
 8007a90:	4607      	mov	r7, r0
 8007a92:	db01      	blt.n	8007a98 <_malloc_r+0x1c>
 8007a94:	42a9      	cmp	r1, r5
 8007a96:	d905      	bls.n	8007aa4 <_malloc_r+0x28>
 8007a98:	230c      	movs	r3, #12
 8007a9a:	2600      	movs	r6, #0
 8007a9c:	603b      	str	r3, [r7, #0]
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aa4:	4e2e      	ldr	r6, [pc, #184]	; (8007b60 <_malloc_r+0xe4>)
 8007aa6:	f000 f89d 	bl	8007be4 <__malloc_lock>
 8007aaa:	6833      	ldr	r3, [r6, #0]
 8007aac:	461c      	mov	r4, r3
 8007aae:	bb34      	cbnz	r4, 8007afe <_malloc_r+0x82>
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	4638      	mov	r0, r7
 8007ab4:	f7ff ffc2 	bl	8007a3c <sbrk_aligned>
 8007ab8:	1c43      	adds	r3, r0, #1
 8007aba:	4604      	mov	r4, r0
 8007abc:	d14d      	bne.n	8007b5a <_malloc_r+0xde>
 8007abe:	6834      	ldr	r4, [r6, #0]
 8007ac0:	4626      	mov	r6, r4
 8007ac2:	2e00      	cmp	r6, #0
 8007ac4:	d140      	bne.n	8007b48 <_malloc_r+0xcc>
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4638      	mov	r0, r7
 8007acc:	eb04 0803 	add.w	r8, r4, r3
 8007ad0:	f000 f878 	bl	8007bc4 <_sbrk_r>
 8007ad4:	4580      	cmp	r8, r0
 8007ad6:	d13a      	bne.n	8007b4e <_malloc_r+0xd2>
 8007ad8:	6821      	ldr	r1, [r4, #0]
 8007ada:	3503      	adds	r5, #3
 8007adc:	1a6d      	subs	r5, r5, r1
 8007ade:	f025 0503 	bic.w	r5, r5, #3
 8007ae2:	3508      	adds	r5, #8
 8007ae4:	2d0c      	cmp	r5, #12
 8007ae6:	bf38      	it	cc
 8007ae8:	250c      	movcc	r5, #12
 8007aea:	4638      	mov	r0, r7
 8007aec:	4629      	mov	r1, r5
 8007aee:	f7ff ffa5 	bl	8007a3c <sbrk_aligned>
 8007af2:	3001      	adds	r0, #1
 8007af4:	d02b      	beq.n	8007b4e <_malloc_r+0xd2>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	442b      	add	r3, r5
 8007afa:	6023      	str	r3, [r4, #0]
 8007afc:	e00e      	b.n	8007b1c <_malloc_r+0xa0>
 8007afe:	6822      	ldr	r2, [r4, #0]
 8007b00:	1b52      	subs	r2, r2, r5
 8007b02:	d41e      	bmi.n	8007b42 <_malloc_r+0xc6>
 8007b04:	2a0b      	cmp	r2, #11
 8007b06:	d916      	bls.n	8007b36 <_malloc_r+0xba>
 8007b08:	1961      	adds	r1, r4, r5
 8007b0a:	42a3      	cmp	r3, r4
 8007b0c:	6025      	str	r5, [r4, #0]
 8007b0e:	bf18      	it	ne
 8007b10:	6059      	strne	r1, [r3, #4]
 8007b12:	6863      	ldr	r3, [r4, #4]
 8007b14:	bf08      	it	eq
 8007b16:	6031      	streq	r1, [r6, #0]
 8007b18:	5162      	str	r2, [r4, r5]
 8007b1a:	604b      	str	r3, [r1, #4]
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	f104 060b 	add.w	r6, r4, #11
 8007b22:	f000 f865 	bl	8007bf0 <__malloc_unlock>
 8007b26:	f026 0607 	bic.w	r6, r6, #7
 8007b2a:	1d23      	adds	r3, r4, #4
 8007b2c:	1af2      	subs	r2, r6, r3
 8007b2e:	d0b6      	beq.n	8007a9e <_malloc_r+0x22>
 8007b30:	1b9b      	subs	r3, r3, r6
 8007b32:	50a3      	str	r3, [r4, r2]
 8007b34:	e7b3      	b.n	8007a9e <_malloc_r+0x22>
 8007b36:	6862      	ldr	r2, [r4, #4]
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	bf0c      	ite	eq
 8007b3c:	6032      	streq	r2, [r6, #0]
 8007b3e:	605a      	strne	r2, [r3, #4]
 8007b40:	e7ec      	b.n	8007b1c <_malloc_r+0xa0>
 8007b42:	4623      	mov	r3, r4
 8007b44:	6864      	ldr	r4, [r4, #4]
 8007b46:	e7b2      	b.n	8007aae <_malloc_r+0x32>
 8007b48:	4634      	mov	r4, r6
 8007b4a:	6876      	ldr	r6, [r6, #4]
 8007b4c:	e7b9      	b.n	8007ac2 <_malloc_r+0x46>
 8007b4e:	230c      	movs	r3, #12
 8007b50:	4638      	mov	r0, r7
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	f000 f84c 	bl	8007bf0 <__malloc_unlock>
 8007b58:	e7a1      	b.n	8007a9e <_malloc_r+0x22>
 8007b5a:	6025      	str	r5, [r4, #0]
 8007b5c:	e7de      	b.n	8007b1c <_malloc_r+0xa0>
 8007b5e:	bf00      	nop
 8007b60:	20000a14 	.word	0x20000a14

08007b64 <_realloc_r>:
 8007b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b68:	4680      	mov	r8, r0
 8007b6a:	4614      	mov	r4, r2
 8007b6c:	460e      	mov	r6, r1
 8007b6e:	b921      	cbnz	r1, 8007b7a <_realloc_r+0x16>
 8007b70:	4611      	mov	r1, r2
 8007b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b76:	f7ff bf81 	b.w	8007a7c <_malloc_r>
 8007b7a:	b92a      	cbnz	r2, 8007b88 <_realloc_r+0x24>
 8007b7c:	f7ff ff16 	bl	80079ac <_free_r>
 8007b80:	4625      	mov	r5, r4
 8007b82:	4628      	mov	r0, r5
 8007b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b88:	f000 f838 	bl	8007bfc <_malloc_usable_size_r>
 8007b8c:	4284      	cmp	r4, r0
 8007b8e:	4607      	mov	r7, r0
 8007b90:	d802      	bhi.n	8007b98 <_realloc_r+0x34>
 8007b92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b96:	d812      	bhi.n	8007bbe <_realloc_r+0x5a>
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4640      	mov	r0, r8
 8007b9c:	f7ff ff6e 	bl	8007a7c <_malloc_r>
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d0ed      	beq.n	8007b82 <_realloc_r+0x1e>
 8007ba6:	42bc      	cmp	r4, r7
 8007ba8:	4622      	mov	r2, r4
 8007baa:	4631      	mov	r1, r6
 8007bac:	bf28      	it	cs
 8007bae:	463a      	movcs	r2, r7
 8007bb0:	f7ff fed4 	bl	800795c <memcpy>
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	f7ff fef8 	bl	80079ac <_free_r>
 8007bbc:	e7e1      	b.n	8007b82 <_realloc_r+0x1e>
 8007bbe:	4635      	mov	r5, r6
 8007bc0:	e7df      	b.n	8007b82 <_realloc_r+0x1e>
	...

08007bc4 <_sbrk_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	4d05      	ldr	r5, [pc, #20]	; (8007be0 <_sbrk_r+0x1c>)
 8007bca:	4604      	mov	r4, r0
 8007bcc:	4608      	mov	r0, r1
 8007bce:	602b      	str	r3, [r5, #0]
 8007bd0:	f7f8 fc76 	bl	80004c0 <_sbrk>
 8007bd4:	1c43      	adds	r3, r0, #1
 8007bd6:	d102      	bne.n	8007bde <_sbrk_r+0x1a>
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	b103      	cbz	r3, 8007bde <_sbrk_r+0x1a>
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	bd38      	pop	{r3, r4, r5, pc}
 8007be0:	20000a1c 	.word	0x20000a1c

08007be4 <__malloc_lock>:
 8007be4:	4801      	ldr	r0, [pc, #4]	; (8007bec <__malloc_lock+0x8>)
 8007be6:	f000 b811 	b.w	8007c0c <__retarget_lock_acquire_recursive>
 8007bea:	bf00      	nop
 8007bec:	20000a20 	.word	0x20000a20

08007bf0 <__malloc_unlock>:
 8007bf0:	4801      	ldr	r0, [pc, #4]	; (8007bf8 <__malloc_unlock+0x8>)
 8007bf2:	f000 b80c 	b.w	8007c0e <__retarget_lock_release_recursive>
 8007bf6:	bf00      	nop
 8007bf8:	20000a20 	.word	0x20000a20

08007bfc <_malloc_usable_size_r>:
 8007bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c00:	1f18      	subs	r0, r3, #4
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bfbc      	itt	lt
 8007c06:	580b      	ldrlt	r3, [r1, r0]
 8007c08:	18c0      	addlt	r0, r0, r3
 8007c0a:	4770      	bx	lr

08007c0c <__retarget_lock_acquire_recursive>:
 8007c0c:	4770      	bx	lr

08007c0e <__retarget_lock_release_recursive>:
 8007c0e:	4770      	bx	lr

08007c10 <_init>:
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	bf00      	nop
 8007c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c16:	bc08      	pop	{r3}
 8007c18:	469e      	mov	lr, r3
 8007c1a:	4770      	bx	lr

08007c1c <_fini>:
 8007c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1e:	bf00      	nop
 8007c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c22:	bc08      	pop	{r3}
 8007c24:	469e      	mov	lr, r3
 8007c26:	4770      	bx	lr
