
RTC_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003c0c  08003c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb8  08003cb8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cc0  08003cc0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000013c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001b4  200001b4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ca17  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d43  00000000  00000000  0002cabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000960  00000000  00000000  0002e808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a8  00000000  00000000  0002f168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211c9  00000000  00000000  0002fa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc2d  00000000  00000000  00050bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8e89  00000000  00000000  0005c806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012568f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029f4  00000000  00000000  001256e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003bf4 	.word	0x08003bf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08003bf4 	.word	0x08003bf4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <set_time>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_time(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = { 0 };
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 800058c:	2300      	movs	r3, #0
 800058e:	603b      	str	r3, [r7, #0]
	/** Initialize RTC and set the Time and Date */
	sTime.Hours = 0x12;    // 12ч.
 8000590:	2312      	movs	r3, #18
 8000592:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x45;  // 45м.
 8000594:	2345      	movs	r3, #69	; 0x45
 8000596:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x50;  // 50с.
 8000598:	2350      	movs	r3, #80	; 0x50
 800059a:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2201      	movs	r2, #1
 80005a8:	4619      	mov	r1, r3
 80005aa:	480f      	ldr	r0, [pc, #60]	; (80005e8 <set_time+0x70>)
 80005ac:	f001 fdbd 	bl	800212a <HAL_RTC_SetTime>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <set_time+0x42>
		Error_Handler();
 80005b6:	f000 fa91 	bl	8000adc <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80005ba:	2302      	movs	r3, #2
 80005bc:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_OCTOBER;
 80005be:	2310      	movs	r3, #16
 80005c0:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x19;
 80005c2:	2319      	movs	r3, #25
 80005c4:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x21;
 80005c6:	2321      	movs	r3, #33	; 0x21
 80005c8:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80005ca:	463b      	mov	r3, r7
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <set_time+0x70>)
 80005d2:	f001 fec5 	bl	8002360 <HAL_RTC_SetDate>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <set_time+0x68>
		Error_Handler();
 80005dc:	f000 fa7e 	bl	8000adc <Error_Handler>
	}
	/* Backup register to store TIME and DATE! */
	//HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
}
 80005e0:	bf00      	nop
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000124 	.word	0x20000124

080005ec <set_alarm>:

void set_alarm(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef sAlarm = { 0 };
 80005f2:	463b      	mov	r3, r7
 80005f4:	2228      	movs	r2, #40	; 0x28
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 fe91 	bl	8003320 <memset>
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x12;    // 12ч.
 80005fe:	2312      	movs	r3, #18
 8000600:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x46;  // 46м.
 8000602:	2346      	movs	r3, #70	; 0x46
 8000604:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0; // 0 сек.
 8000606:	2300      	movs	r3, #0
 8000608:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x13; // 19
 8000622:	2313      	movs	r3, #19
 8000624:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8000628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 800062e:	463b      	mov	r3, r7
 8000630:	2201      	movs	r2, #1
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <set_alarm+0x60>)
 8000636:	f001 ff89 	bl	800254c <HAL_RTC_SetAlarm_IT>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <set_alarm+0x58>
		Error_Handler();
 8000640:	f000 fa4c 	bl	8000adc <Error_Handler>
	}

}
 8000644:	bf00      	nop
 8000646:	3728      	adds	r7, #40	; 0x28
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000124 	.word	0x20000124

08000650 <get_time>:

void get_time(void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af02      	add	r7, sp, #8

		RTC_TimeTypeDef sTime = { 0 };
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = { 0 };
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]

		/* Get the RTC current Time */
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	4619      	mov	r1, r3
 800066e:	4812      	ldr	r0, [pc, #72]	; (80006b8 <get_time+0x68>)
 8000670:	f001 fe18 	bl	80022a4 <HAL_RTC_GetTime>
		/* Get the RTC current Date */
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	4619      	mov	r1, r3
 800067a:	480f      	ldr	r0, [pc, #60]	; (80006b8 <get_time+0x68>)
 800067c:	f001 ff17 	bl	80024ae <HAL_RTC_GetDate>

		/* Display time Format: hh:mm:ss */
		sprintf((char*) time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 8000680:	793b      	ldrb	r3, [r7, #4]
 8000682:	461a      	mov	r2, r3
 8000684:	797b      	ldrb	r3, [r7, #5]
 8000686:	4619      	mov	r1, r3
				sTime.Seconds);
 8000688:	79bb      	ldrb	r3, [r7, #6]
		sprintf((char*) time, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes,
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	460b      	mov	r3, r1
 800068e:	490b      	ldr	r1, [pc, #44]	; (80006bc <get_time+0x6c>)
 8000690:	480b      	ldr	r0, [pc, #44]	; (80006c0 <get_time+0x70>)
 8000692:	f002 fe81 	bl	8003398 <siprintf>

		/* Display date Format: mm-dd-yy */
		sprintf((char*) date, "%02d-%02d-%2d", sDate.Date, sDate.Month,
 8000696:	78bb      	ldrb	r3, [r7, #2]
 8000698:	461a      	mov	r2, r3
 800069a:	787b      	ldrb	r3, [r7, #1]
 800069c:	4619      	mov	r1, r3
				2000 + sDate.Year);  // I like the date first
 800069e:	78fb      	ldrb	r3, [r7, #3]
		sprintf((char*) date, "%02d-%02d-%2d", sDate.Date, sDate.Month,
 80006a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	460b      	mov	r3, r1
 80006a8:	4906      	ldr	r1, [pc, #24]	; (80006c4 <get_time+0x74>)
 80006aa:	4807      	ldr	r0, [pc, #28]	; (80006c8 <get_time+0x78>)
 80006ac:	f002 fe74 	bl	8003398 <siprintf>

	}
 80006b0:	bf00      	nop
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000124 	.word	0x20000124
 80006bc:	08003c0c 	.word	0x08003c0c
 80006c0:	20000144 	.word	0x20000144
 80006c4:	08003c1c 	.word	0x08003c1c
 80006c8:	20000194 	.word	0x20000194

080006cc <display_time>:

//Let's display the time and date on lcd

	void display_time(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af04      	add	r7, sp, #16
		//lcd_send_cmd (0x80);
		//lcd_send_string (time);
		//lcd_send_cmd (0xc0);
		//lcd_send_string (date);

		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 80006d2:	2200      	movs	r2, #0
 80006d4:	4935      	ldr	r1, [pc, #212]	; (80007ac <display_time+0xe0>)
 80006d6:	4836      	ldr	r0, [pc, #216]	; (80007b0 <display_time+0xe4>)
 80006d8:	f001 fde4 	bl	80022a4 <HAL_RTC_GetTime>
		//snprintf(trans_str, 63, "Time %d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
		snprintf(trans_str, 63, "Time %d:%d:%d:%lu\n", sTime.Hours,sTime.Minutes, sTime.Seconds, sTime.SubSeconds);
 80006dc:	4b33      	ldr	r3, [pc, #204]	; (80007ac <display_time+0xe0>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	4b32      	ldr	r3, [pc, #200]	; (80007ac <display_time+0xe0>)
 80006e4:	785b      	ldrb	r3, [r3, #1]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b30      	ldr	r3, [pc, #192]	; (80007ac <display_time+0xe0>)
 80006ea:	789b      	ldrb	r3, [r3, #2]
 80006ec:	4619      	mov	r1, r3
 80006ee:	4b2f      	ldr	r3, [pc, #188]	; (80007ac <display_time+0xe0>)
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	9302      	str	r3, [sp, #8]
 80006f4:	9101      	str	r1, [sp, #4]
 80006f6:	9200      	str	r2, [sp, #0]
 80006f8:	4603      	mov	r3, r0
 80006fa:	4a2e      	ldr	r2, [pc, #184]	; (80007b4 <display_time+0xe8>)
 80006fc:	213f      	movs	r1, #63	; 0x3f
 80006fe:	482e      	ldr	r0, [pc, #184]	; (80007b8 <display_time+0xec>)
 8000700:	f002 fe16 	bl	8003330 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) trans_str, strlen(trans_str),1000);
 8000704:	482c      	ldr	r0, [pc, #176]	; (80007b8 <display_time+0xec>)
 8000706:	f7ff fd63 	bl	80001d0 <strlen>
 800070a:	4603      	mov	r3, r0
 800070c:	b29a      	uxth	r2, r3
 800070e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000712:	4929      	ldr	r1, [pc, #164]	; (80007b8 <display_time+0xec>)
 8000714:	4829      	ldr	r0, [pc, #164]	; (80007bc <display_time+0xf0>)
 8000716:	f002 fa26 	bl	8002b66 <HAL_UART_Transmit>

		HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 800071a:	2200      	movs	r2, #0
 800071c:	4928      	ldr	r1, [pc, #160]	; (80007c0 <display_time+0xf4>)
 800071e:	4824      	ldr	r0, [pc, #144]	; (80007b0 <display_time+0xe4>)
 8000720:	f001 fec5 	bl	80024ae <HAL_RTC_GetDate>
		snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date,DateToUpdate.Month, DateToUpdate.Year);
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <display_time+0xf4>)
 8000726:	789b      	ldrb	r3, [r3, #2]
 8000728:	4619      	mov	r1, r3
 800072a:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <display_time+0xf4>)
 800072c:	785b      	ldrb	r3, [r3, #1]
 800072e:	461a      	mov	r2, r3
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <display_time+0xf4>)
 8000732:	78db      	ldrb	r3, [r3, #3]
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	9200      	str	r2, [sp, #0]
 8000738:	460b      	mov	r3, r1
 800073a:	4a22      	ldr	r2, [pc, #136]	; (80007c4 <display_time+0xf8>)
 800073c:	213f      	movs	r1, #63	; 0x3f
 800073e:	481e      	ldr	r0, [pc, #120]	; (80007b8 <display_time+0xec>)
 8000740:	f002 fdf6 	bl	8003330 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) trans_str, strlen(trans_str),1000);
 8000744:	481c      	ldr	r0, [pc, #112]	; (80007b8 <display_time+0xec>)
 8000746:	f7ff fd43 	bl	80001d0 <strlen>
 800074a:	4603      	mov	r3, r0
 800074c:	b29a      	uxth	r2, r3
 800074e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000752:	4919      	ldr	r1, [pc, #100]	; (80007b8 <display_time+0xec>)
 8000754:	4819      	ldr	r0, [pc, #100]	; (80007bc <display_time+0xf0>)
 8000756:	f002 fa06 	bl	8002b66 <HAL_UART_Transmit>

		HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 800075a:	2300      	movs	r3, #0
 800075c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000760:	4919      	ldr	r1, [pc, #100]	; (80007c8 <display_time+0xfc>)
 8000762:	4813      	ldr	r0, [pc, #76]	; (80007b0 <display_time+0xe4>)
 8000764:	f002 f82a 	bl	80027bc <HAL_RTC_GetAlarm>
		snprintf(trans_str, 63, "Alarm %d:%d:%d\n", sAlarm.AlarmTime.Hours,sAlarm.AlarmTime.Minutes, sAlarm.AlarmTime.Seconds);
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <display_time+0xfc>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <display_time+0xfc>)
 8000770:	785b      	ldrb	r3, [r3, #1]
 8000772:	461a      	mov	r2, r3
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <display_time+0xfc>)
 8000776:	789b      	ldrb	r3, [r3, #2]
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	9200      	str	r2, [sp, #0]
 800077c:	460b      	mov	r3, r1
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <display_time+0x100>)
 8000780:	213f      	movs	r1, #63	; 0x3f
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <display_time+0xec>)
 8000784:	f002 fdd4 	bl	8003330 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) trans_str, strlen(trans_str),1000);
 8000788:	480b      	ldr	r0, [pc, #44]	; (80007b8 <display_time+0xec>)
 800078a:	f7ff fd21 	bl	80001d0 <strlen>
 800078e:	4603      	mov	r3, r0
 8000790:	b29a      	uxth	r2, r3
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	4908      	ldr	r1, [pc, #32]	; (80007b8 <display_time+0xec>)
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <display_time+0xf0>)
 800079a:	f002 f9e4 	bl	8002b66 <HAL_UART_Transmit>

		HAL_UART_Abort(&huart2); // Обрываем связь UART
 800079e:	4807      	ldr	r0, [pc, #28]	; (80007bc <display_time+0xf0>)
 80007a0:	f002 fa73 	bl	8002c8a <HAL_UART_Abort>
	}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000d8 	.word	0x200000d8
 80007b0:	20000124 	.word	0x20000124
 80007b4:	08003c2c 	.word	0x08003c2c
 80007b8:	20000098 	.word	0x20000098
 80007bc:	20000150 	.word	0x20000150
 80007c0:	200000ec 	.word	0x200000ec
 80007c4:	08003c40 	.word	0x08003c40
 80007c8:	200000f0 	.word	0x200000f0
 80007cc:	08003c54 	.word	0x08003c54

080007d0 <to_do_on_alarm>:

	void to_do_on_alarm(void)  // Действие на срабатывание будильника
	{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);  // set led ON
 80007d4:	2200      	movs	r2, #0
 80007d6:	2102      	movs	r1, #2
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <to_do_on_alarm+0x14>)
 80007da:	f000 fea5 	bl	8001528 <HAL_GPIO_WritePin>
		//lcd_send_cmd (0x80);
		//for (int i=0;i<60;i++)
		//{
		//lcd_send_data (' ');  // clear lcd
		//}
	}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40020000 	.word	0x40020000

080007e8 <main>:

	/**
	 * @brief  The application entry point.
	 * @retval int
	 */
	int main(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
		/* USER CODE END 1 */

		/* MCU Configuration--------------------------------------------------------*/

		/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
		HAL_Init();
 80007ec:	f000 fac4 	bl	8000d78 <HAL_Init>
		/* USER CODE BEGIN Init */

		/* USER CODE END Init */

		/* Configure the system clock */
		SystemClock_Config();
 80007f0:	f000 f846 	bl	8000880 <SystemClock_Config>
		/* USER CODE BEGIN SysInit */

		/* USER CODE END SysInit */

		/* Initialize all configured peripherals */
		MX_GPIO_Init();
 80007f4:	f000 f900 	bl	80009f8 <MX_GPIO_Init>
		MX_RTC_Init();
 80007f8:	f000 f8ae 	bl	8000958 <MX_RTC_Init>
		MX_USART2_UART_Init();
 80007fc:	f000 f8d2 	bl	80009a4 <MX_USART2_UART_Init>
		/* USER CODE BEGIN 2 */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);  // Отключим по дефолку LED
 8000800:	2201      	movs	r2, #1
 8000802:	2102      	movs	r1, #2
 8000804:	4819      	ldr	r0, [pc, #100]	; (800086c <main+0x84>)
 8000806:	f000 fe8f 	bl	8001528 <HAL_GPIO_WritePin>

		/* Backup register to store TIME and DATE! */
		if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2) // Time is not restting now!
 800080a:	2101      	movs	r1, #1
 800080c:	4818      	ldr	r0, [pc, #96]	; (8000870 <main+0x88>)
 800080e:	f002 f93b 	bl	8002a88 <HAL_RTCEx_BKUPRead>
 8000812:	4603      	mov	r3, r0
 8000814:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000818:	4293      	cmp	r3, r2
 800081a:	d001      	beq.n	8000820 <main+0x38>
				{
		set_time(); // Set the time
 800081c:	f7ff feac 	bl	8000578 <set_time>
		}

		set_alarm();
 8000820:	f7ff fee4 	bl	80005ec <set_alarm>

		HAL_UART_Transmit(&huart2, (uint8_t*) TxData2, sizeof(TxData2), 500);
 8000824:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000828:	2208      	movs	r2, #8
 800082a:	4912      	ldr	r1, [pc, #72]	; (8000874 <main+0x8c>)
 800082c:	4812      	ldr	r0, [pc, #72]	; (8000878 <main+0x90>)
 800082e:	f002 f99a 	bl	8002b66 <HAL_UART_Transmit>
		/* USER CODE BEGIN WHILE */
		while (1) {
			/* USER CODE END WHILE */

			/* USER CODE BEGIN 3 */
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000832:	2101      	movs	r1, #1
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <main+0x84>)
 8000836:	f000 fe5f 	bl	80014f8 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d105      	bne.n	800084c <main+0x64>
				display_time();
 8000840:	f7ff ff44 	bl	80006cc <display_time>
				HAL_Delay(1000);
 8000844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000848:	f000 fb08 	bl	8000e5c <HAL_Delay>
			}

			//display_time();
			get_time();
 800084c:	f7ff ff00 	bl	8000650 <get_time>
			HAL_Delay(500);
 8000850:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000854:	f000 fb02 	bl	8000e5c <HAL_Delay>

			if (alarm) {
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <main+0x94>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d0e8      	beq.n	8000832 <main+0x4a>
				to_do_on_alarm();
 8000860:	f7ff ffb6 	bl	80007d0 <to_do_on_alarm>
				alarm = 0;
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <main+0x94>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 800086a:	e7e2      	b.n	8000832 <main+0x4a>
 800086c:	40020000 	.word	0x40020000
 8000870:	20000124 	.word	0x20000124
 8000874:	20000000 	.word	0x20000000
 8000878:	20000150 	.word	0x20000150
 800087c:	20000094 	.word	0x20000094

08000880 <SystemClock_Config>:

	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	; 0x50
 8000884:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2230      	movs	r2, #48	; 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f002 fd46 	bl	8003320 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		__HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <SystemClock_Config+0xd0>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a28      	ldr	r2, [pc, #160]	; (8000950 <SystemClock_Config+0xd0>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <SystemClock_Config+0xd0>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
		__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <SystemClock_Config+0xd4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a22      	ldr	r2, [pc, #136]	; (8000954 <SystemClock_Config+0xd4>)
 80008ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	4b20      	ldr	r3, [pc, #128]	; (8000954 <SystemClock_Config+0xd4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 80008dc:	2309      	movs	r3, #9
 80008de:	623b      	str	r3, [r7, #32]
				| RCC_OSCILLATORTYPE_HSE;
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
		RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008e6:	2301      	movs	r3, #1
 80008e8:	637b      	str	r3, [r7, #52]	; 0x34
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	63bb      	str	r3, [r7, #56]	; 0x38
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
		RCC_OscInitStruct.PLL.PLLM = 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
		RCC_OscInitStruct.PLL.PLLN = 168;
 80008f8:	23a8      	movs	r3, #168	; 0xa8
 80008fa:	647b      	str	r3, [r7, #68]	; 0x44
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
		RCC_OscInitStruct.PLL.PLLQ = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000904:	f107 0320 	add.w	r3, r7, #32
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fe27 	bl	800155c <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x98>
			Error_Handler();
 8000914:	f000 f8e2 	bl	8000adc <Error_Handler>
		}
		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	60fb      	str	r3, [r7, #12]
				| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2302      	movs	r3, #2
 800091e:	613b      	str	r3, [r7, #16]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000924:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000928:	61bb      	str	r3, [r7, #24]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800092a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092e:	61fb      	str	r3, [r7, #28]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5)
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2105      	movs	r1, #5
 8000936:	4618      	mov	r0, r3
 8000938:	f001 f888 	bl	8001a4c <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xc6>
				!= HAL_OK) {
			Error_Handler();
 8000942:	f000 f8cb 	bl	8000adc <Error_Handler>
		}
	}
 8000946:	bf00      	nop
 8000948:	3750      	adds	r7, #80	; 0x50
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <MX_RTC_Init>:
	/**
	 * @brief RTC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_RTC_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
		/* USER CODE BEGIN RTC_Init 1 */

		/* USER CODE END RTC_Init 1 */
		/** Initialize RTC Only
		 */
		hrtc.Instance = RTC;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_RTC_Init+0x44>)
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <MX_RTC_Init+0x48>)
 8000960:	601a      	str	r2, [r3, #0]
		hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_RTC_Init+0x44>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
		hrtc.Init.AsynchPrediv = 127;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_RTC_Init+0x44>)
 800096a:	227f      	movs	r2, #127	; 0x7f
 800096c:	609a      	str	r2, [r3, #8]
		hrtc.Init.SynchPrediv = 255;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_RTC_Init+0x44>)
 8000970:	22ff      	movs	r2, #255	; 0xff
 8000972:	60da      	str	r2, [r3, #12]
		hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_RTC_Init+0x44>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
		hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_RTC_Init+0x44>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
		hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_RTC_Init+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
		if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_RTC_Init+0x44>)
 8000988:	f001 fb3e 	bl	8002008 <HAL_RTC_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_RTC_Init+0x3e>
			Error_Handler();
 8000992:	f000 f8a3 	bl	8000adc <Error_Handler>
//  }
		/* USER CODE BEGIN RTC_Init 2 */

		/* USER CODE END RTC_Init 2 */

	}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000124 	.word	0x20000124
 80009a0:	40002800 	.word	0x40002800

080009a4 <MX_USART2_UART_Init>:
	/**
	 * @brief USART2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART2_UART_Init(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
		/* USER CODE END USART2_Init 0 */

		/* USER CODE BEGIN USART2_Init 1 */

		/* USER CODE END USART2_Init 1 */
		huart2.Instance = USART2;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <MX_USART2_UART_Init+0x50>)
 80009ac:	601a      	str	r2, [r3, #0]
		huart2.Init.BaudRate = 115200;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
		huart2.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
		huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
		huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
		if (HAL_UART_Init(&huart2) != HAL_OK) {
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART2_UART_Init+0x4c>)
 80009dc:	f002 f876 	bl	8002acc <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART2_UART_Init+0x46>
			Error_Handler();
 80009e6:	f000 f879 	bl	8000adc <Error_Handler>
		}
		/* USER CODE BEGIN USART2_Init 2 */

		/* USER CODE END USART2_Init 2 */

	}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000150 	.word	0x20000150
 80009f4:	40004400 	.word	0x40004400

080009f8 <MX_GPIO_Init>:
	/**
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <MX_GPIO_Init+0x94>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <MX_GPIO_Init+0x94>)
 8000a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <MX_GPIO_Init+0x94>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_GPIO_Init+0x94>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a16      	ldr	r2, [pc, #88]	; (8000a8c <MX_GPIO_Init+0x94>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_GPIO_Init+0x94>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2102      	movs	r1, #2
 8000a4a:	4811      	ldr	r0, [pc, #68]	; (8000a90 <MX_GPIO_Init+0x98>)
 8000a4c:	f000 fd6c 	bl	8001528 <HAL_GPIO_WritePin>

		/*Configure GPIO pin : BTN_Pin */
		GPIO_InitStruct.Pin = BTN_Pin;
 8000a50:	2301      	movs	r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	4619      	mov	r1, r3
 8000a62:	480b      	ldr	r0, [pc, #44]	; (8000a90 <MX_GPIO_Init+0x98>)
 8000a64:	f000 fbac 	bl	80011c0 <HAL_GPIO_Init>

		/*Configure GPIO pin : LED_Pin */
		GPIO_InitStruct.Pin = LED_Pin;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_GPIO_Init+0x98>)
 8000a80:	f000 fb9e 	bl	80011c0 <HAL_GPIO_Init>

	}
 8000a84:	bf00      	nop
 8000a86:	3720      	adds	r7, #32
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000

08000a94 <HAL_RTC_AlarmAEventCallback>:

	/* USER CODE BEGIN 4 */
	/*** Callback будилькина ***/
	void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
		snprintf(trans_str, 63, "ALARM\n");
 8000a9c:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <HAL_RTC_AlarmAEventCallback+0x38>)
 8000a9e:	213f      	movs	r1, #63	; 0x3f
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8000aa2:	f002 fc45 	bl	8003330 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) trans_str, strlen(trans_str),
 8000aa6:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8000aa8:	f7ff fb92 	bl	80001d0 <strlen>
 8000aac:	4603      	mov	r3, r0
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab4:	4906      	ldr	r1, [pc, #24]	; (8000ad0 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8000ab6:	4807      	ldr	r0, [pc, #28]	; (8000ad4 <HAL_RTC_AlarmAEventCallback+0x40>)
 8000ab8:	f002 f855 	bl	8002b66 <HAL_UART_Transmit>
				1000);

		alarm = 1;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_RTC_AlarmAEventCallback+0x44>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
	}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	08003c64 	.word	0x08003c64
 8000ad0:	20000098 	.word	0x20000098
 8000ad4:	20000150 	.word	0x20000150
 8000ad8:	20000094 	.word	0x20000094

08000adc <Error_Handler>:

	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void) {
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_RTC_MspInit+0x5c>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d119      	bne.n	8000b8c <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b60:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f96c 	bl	8001e44 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000b72:	f7ff ffb3 	bl	8000adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_RTC_MspInit+0x60>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2029      	movs	r0, #41	; 0x29
 8000b82:	f000 fa6a 	bl	800105a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000b86:	2029      	movs	r0, #41	; 0x29
 8000b88:	f000 fa83 	bl	8001092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40002800 	.word	0x40002800
 8000b98:	42470e3c 	.word	0x42470e3c

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a19      	ldr	r2, [pc, #100]	; (8000c20 <HAL_UART_MspInit+0x84>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d12b      	bne.n	8000c16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_UART_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <HAL_UART_MspInit+0x88>)
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_UART_MspInit+0x88>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_UART_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <HAL_UART_MspInit+0x88>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_UART_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c06:	2307      	movs	r3, #7
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_UART_MspInit+0x8c>)
 8000c12:	f000 fad5 	bl	80011c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	; 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40004400 	.word	0x40004400
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c78:	f000 f8d0 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <RTC_Alarm_IRQHandler+0x10>)
 8000c86:	f001 fe29 	bl	80028dc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000124 	.word	0x20000124

08000c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c9c:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <_sbrk+0x5c>)
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <_sbrk+0x60>)
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <_sbrk+0x64>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <_sbrk+0x68>)
 8000cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d207      	bcs.n	8000cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc4:	f002 fb02 	bl	80032cc <__errno>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	220c      	movs	r2, #12
 8000ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cd2:	e009      	b.n	8000ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <_sbrk+0x64>)
 8000ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20020000 	.word	0x20020000
 8000cf4:	00000400 	.word	0x00000400
 8000cf8:	20000118 	.word	0x20000118
 8000cfc:	200001b8 	.word	0x200001b8

08000d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2a:	490e      	ldr	r1, [pc, #56]	; (8000d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d2c:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d40:	4c0b      	ldr	r4, [pc, #44]	; (8000d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d4e:	f7ff ffd7 	bl	8000d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d52:	f002 fac1 	bl	80032d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d56:	f7ff fd47 	bl	80007e8 <main>
  bx  lr    
 8000d5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d68:	08003cc8 	.word	0x08003cc8
  ldr r2, =_sbss
 8000d6c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d70:	200001b4 	.word	0x200001b4

08000d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <HAL_Init+0x40>)
 8000d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_Init+0x40>)
 8000d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_Init+0x40>)
 8000d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f000 f94f 	bl	8001044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da6:	200f      	movs	r0, #15
 8000da8:	f000 f808 	bl	8000dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dac:	f7ff fe9c 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023c00 	.word	0x40023c00

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x54>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x58>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f967 	bl	80010ae <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00e      	b.n	8000e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d80a      	bhi.n	8000e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df0:	2200      	movs	r2, #0
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df8:	f000 f92f 	bl	800105a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dfc:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <HAL_InitTick+0x5c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e000      	b.n	8000e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000010 	.word	0x20000010
 8000e18:	2000000c 	.word	0x2000000c

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000010 	.word	0x20000010
 8000e40:	200001a0 	.word	0x200001a0

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200001a0 	.word	0x200001a0

08000e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff ffee 	bl	8000e44 <HAL_GetTick>
 8000e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e74:	d005      	beq.n	8000e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_Delay+0x44>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e82:	bf00      	nop
 8000e84:	f7ff ffde 	bl	8000e44 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d8f7      	bhi.n	8000e84 <HAL_Delay+0x28>
  {
  }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000010 	.word	0x20000010

08000ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	f003 0307 	and.w	r3, r3, #7
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	db0b      	blt.n	8000f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f003 021f 	and.w	r2, r3, #31
 8000f20:	4907      	ldr	r1, [pc, #28]	; (8000f40 <__NVIC_EnableIRQ+0x38>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	095b      	lsrs	r3, r3, #5
 8000f28:	2001      	movs	r0, #1
 8000f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000e100 	.word	0xe000e100

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001010:	d301      	bcc.n	8001016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001012:	2301      	movs	r3, #1
 8001014:	e00f      	b.n	8001036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <SysTick_Config+0x40>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101e:	210f      	movs	r1, #15
 8001020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001024:	f7ff ff8e 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <SysTick_Config+0x40>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SysTick_Config+0x40>)
 8001030:	2207      	movs	r2, #7
 8001032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010

08001044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff29 	bl	8000ea4 <__NVIC_SetPriorityGrouping>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106c:	f7ff ff3e 	bl	8000eec <__NVIC_GetPriorityGrouping>
 8001070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff ff8e 	bl	8000f98 <NVIC_EncodePriority>
 800107c:	4602      	mov	r2, r0
 800107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff5d 	bl	8000f44 <__NVIC_SetPriority>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff31 	bl	8000f08 <__NVIC_EnableIRQ>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ffa2 	bl	8001000 <SysTick_Config>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff feb6 	bl	8000e44 <HAL_GetTick>
 80010d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d008      	beq.n	80010f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2280      	movs	r2, #128	; 0x80
 80010ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e052      	b.n	800119e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0216 	bic.w	r2, r2, #22
 8001106:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	695a      	ldr	r2, [r3, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001116:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	2b00      	cmp	r3, #0
 800111e:	d103      	bne.n	8001128 <HAL_DMA_Abort+0x62>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001124:	2b00      	cmp	r3, #0
 8001126:	d007      	beq.n	8001138 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0208 	bic.w	r2, r2, #8
 8001136:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0201 	bic.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001148:	e013      	b.n	8001172 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800114a:	f7ff fe7b 	bl	8000e44 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b05      	cmp	r3, #5
 8001156:	d90c      	bls.n	8001172 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2220      	movs	r2, #32
 800115c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2203      	movs	r2, #3
 8001162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e015      	b.n	800119e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1e4      	bne.n	800114a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001184:	223f      	movs	r2, #63	; 0x3f
 8001186:	409a      	lsls	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	e16b      	b.n	80014b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011dc:	2201      	movs	r2, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	f040 815a 	bne.w	80014ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b01      	cmp	r3, #1
 8001204:	d005      	beq.n	8001212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120e:	2b02      	cmp	r3, #2
 8001210:	d130      	bne.n	8001274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001248:	2201      	movs	r2, #1
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	f003 0201 	and.w	r2, r3, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b03      	cmp	r3, #3
 800127e:	d017      	beq.n	80012b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d123      	bne.n	8001304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	08da      	lsrs	r2, r3, #3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3208      	adds	r2, #8
 80012c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	08da      	lsrs	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3208      	adds	r2, #8
 80012fe:	69b9      	ldr	r1, [r7, #24]
 8001300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0203 	and.w	r2, r3, #3
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80b4 	beq.w	80014ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b60      	ldr	r3, [pc, #384]	; (80014cc <HAL_GPIO_Init+0x30c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	4a5f      	ldr	r2, [pc, #380]	; (80014cc <HAL_GPIO_Init+0x30c>)
 8001350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001354:	6453      	str	r3, [r2, #68]	; 0x44
 8001356:	4b5d      	ldr	r3, [pc, #372]	; (80014cc <HAL_GPIO_Init+0x30c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001362:	4a5b      	ldr	r2, [pc, #364]	; (80014d0 <HAL_GPIO_Init+0x310>)
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	220f      	movs	r2, #15
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a52      	ldr	r2, [pc, #328]	; (80014d4 <HAL_GPIO_Init+0x314>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d02b      	beq.n	80013e6 <HAL_GPIO_Init+0x226>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a51      	ldr	r2, [pc, #324]	; (80014d8 <HAL_GPIO_Init+0x318>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d025      	beq.n	80013e2 <HAL_GPIO_Init+0x222>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a50      	ldr	r2, [pc, #320]	; (80014dc <HAL_GPIO_Init+0x31c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d01f      	beq.n	80013de <HAL_GPIO_Init+0x21e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4f      	ldr	r2, [pc, #316]	; (80014e0 <HAL_GPIO_Init+0x320>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d019      	beq.n	80013da <HAL_GPIO_Init+0x21a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4e      	ldr	r2, [pc, #312]	; (80014e4 <HAL_GPIO_Init+0x324>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0x216>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4d      	ldr	r2, [pc, #308]	; (80014e8 <HAL_GPIO_Init+0x328>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00d      	beq.n	80013d2 <HAL_GPIO_Init+0x212>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4c      	ldr	r2, [pc, #304]	; (80014ec <HAL_GPIO_Init+0x32c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_Init+0x20e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4b      	ldr	r2, [pc, #300]	; (80014f0 <HAL_GPIO_Init+0x330>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_GPIO_Init+0x20a>
 80013c6:	2307      	movs	r3, #7
 80013c8:	e00e      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013ca:	2308      	movs	r3, #8
 80013cc:	e00c      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013ce:	2306      	movs	r3, #6
 80013d0:	e00a      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013d2:	2305      	movs	r3, #5
 80013d4:	e008      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013d6:	2304      	movs	r3, #4
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013da:	2303      	movs	r3, #3
 80013dc:	e004      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013de:	2302      	movs	r3, #2
 80013e0:	e002      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <HAL_GPIO_Init+0x228>
 80013e6:	2300      	movs	r3, #0
 80013e8:	69fa      	ldr	r2, [r7, #28]
 80013ea:	f002 0203 	and.w	r2, r2, #3
 80013ee:	0092      	lsls	r2, r2, #2
 80013f0:	4093      	lsls	r3, r2
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f8:	4935      	ldr	r1, [pc, #212]	; (80014d0 <HAL_GPIO_Init+0x310>)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	3302      	adds	r3, #2
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001406:	4b3b      	ldr	r3, [pc, #236]	; (80014f4 <HAL_GPIO_Init+0x334>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800142a:	4a32      	ldr	r2, [pc, #200]	; (80014f4 <HAL_GPIO_Init+0x334>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001430:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <HAL_GPIO_Init+0x334>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001454:	4a27      	ldr	r2, [pc, #156]	; (80014f4 <HAL_GPIO_Init+0x334>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <HAL_GPIO_Init+0x334>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147e:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <HAL_GPIO_Init+0x334>)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_GPIO_Init+0x334>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a8:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <HAL_GPIO_Init+0x334>)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3301      	adds	r3, #1
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	2b0f      	cmp	r3, #15
 80014b8:	f67f ae90 	bls.w	80011dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40013800 	.word	0x40013800
 80014d4:	40020000 	.word	0x40020000
 80014d8:	40020400 	.word	0x40020400
 80014dc:	40020800 	.word	0x40020800
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40021400 	.word	0x40021400
 80014ec:	40021800 	.word	0x40021800
 80014f0:	40021c00 	.word	0x40021c00
 80014f4:	40013c00 	.word	0x40013c00

080014f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691a      	ldr	r2, [r3, #16]
 8001508:	887b      	ldrh	r3, [r7, #2]
 800150a:	4013      	ands	r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e001      	b.n	800151a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001544:	e003      	b.n	800154e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	041a      	lsls	r2, r3, #16
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	619a      	str	r2, [r3, #24]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e264      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d075      	beq.n	8001666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800157a:	4ba3      	ldr	r3, [pc, #652]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b04      	cmp	r3, #4
 8001584:	d00c      	beq.n	80015a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001586:	4ba0      	ldr	r3, [pc, #640]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800158e:	2b08      	cmp	r3, #8
 8001590:	d112      	bne.n	80015b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001592:	4b9d      	ldr	r3, [pc, #628]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800159e:	d10b      	bne.n	80015b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a0:	4b99      	ldr	r3, [pc, #612]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d05b      	beq.n	8001664 <HAL_RCC_OscConfig+0x108>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d157      	bne.n	8001664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e23f      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c0:	d106      	bne.n	80015d0 <HAL_RCC_OscConfig+0x74>
 80015c2:	4b91      	ldr	r3, [pc, #580]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a90      	ldr	r2, [pc, #576]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e01d      	b.n	800160c <HAL_RCC_OscConfig+0xb0>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x98>
 80015da:	4b8b      	ldr	r3, [pc, #556]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a8a      	ldr	r2, [pc, #552]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b88      	ldr	r3, [pc, #544]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a87      	ldr	r2, [pc, #540]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0xb0>
 80015f4:	4b84      	ldr	r3, [pc, #528]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a83      	ldr	r2, [pc, #524]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80015fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b81      	ldr	r3, [pc, #516]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a80      	ldr	r2, [pc, #512]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fc16 	bl	8000e44 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff fc12 	bl	8000e44 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e204      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b76      	ldr	r3, [pc, #472]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0xc0>
 800163a:	e014      	b.n	8001666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fc02 	bl	8000e44 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fbfe 	bl	8000e44 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1f0      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001656:	4b6c      	ldr	r3, [pc, #432]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0xe8>
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d063      	beq.n	800173a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001672:	4b65      	ldr	r3, [pc, #404]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00b      	beq.n	8001696 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800167e:	4b62      	ldr	r3, [pc, #392]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001686:	2b08      	cmp	r3, #8
 8001688:	d11c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800168a:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d116      	bne.n	80016c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001696:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <HAL_RCC_OscConfig+0x152>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e1c4      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ae:	4b56      	ldr	r3, [pc, #344]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4952      	ldr	r1, [pc, #328]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	e03a      	b.n	800173a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d020      	beq.n	800170e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016cc:	4b4f      	ldr	r3, [pc, #316]	; (800180c <HAL_RCC_OscConfig+0x2b0>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d2:	f7ff fbb7 	bl	8000e44 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016da:	f7ff fbb3 	bl	8000e44 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e1a5      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ec:	4b46      	ldr	r3, [pc, #280]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b43      	ldr	r3, [pc, #268]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4940      	ldr	r1, [pc, #256]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
 800170c:	e015      	b.n	800173a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170e:	4b3f      	ldr	r3, [pc, #252]	; (800180c <HAL_RCC_OscConfig+0x2b0>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fb96 	bl	8000e44 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800171c:	f7ff fb92 	bl	8000e44 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e184      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d030      	beq.n	80017a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d016      	beq.n	800177c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174e:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HAL_RCC_OscConfig+0x2b4>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001754:	f7ff fb76 	bl	8000e44 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff fb72 	bl	8000e44 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e164      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x200>
 800177a:	e015      	b.n	80017a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800177c:	4b24      	ldr	r3, [pc, #144]	; (8001810 <HAL_RCC_OscConfig+0x2b4>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7ff fb5f 	bl	8000e44 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178a:	f7ff fb5b 	bl	8000e44 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e14d      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 800179e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80a0 	beq.w	80018f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10f      	bne.n	80017e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017e2:	2301      	movs	r3, #1
 80017e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_RCC_OscConfig+0x2b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d121      	bne.n	8001836 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_RCC_OscConfig+0x2b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_RCC_OscConfig+0x2b8>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fb21 	bl	8000e44 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	e011      	b.n	800182a <HAL_RCC_OscConfig+0x2ce>
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	42470000 	.word	0x42470000
 8001810:	42470e80 	.word	0x42470e80
 8001814:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001818:	f7ff fb14 	bl	8000e44 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e106      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182a:	4b85      	ldr	r3, [pc, #532]	; (8001a40 <HAL_RCC_OscConfig+0x4e4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d106      	bne.n	800184c <HAL_RCC_OscConfig+0x2f0>
 800183e:	4b81      	ldr	r3, [pc, #516]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	4a80      	ldr	r2, [pc, #512]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6713      	str	r3, [r2, #112]	; 0x70
 800184a:	e01c      	b.n	8001886 <HAL_RCC_OscConfig+0x32a>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b05      	cmp	r3, #5
 8001852:	d10c      	bne.n	800186e <HAL_RCC_OscConfig+0x312>
 8001854:	4b7b      	ldr	r3, [pc, #492]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	4a7a      	ldr	r2, [pc, #488]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6713      	str	r3, [r2, #112]	; 0x70
 8001860:	4b78      	ldr	r3, [pc, #480]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	4a77      	ldr	r2, [pc, #476]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6713      	str	r3, [r2, #112]	; 0x70
 800186c:	e00b      	b.n	8001886 <HAL_RCC_OscConfig+0x32a>
 800186e:	4b75      	ldr	r3, [pc, #468]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	4a74      	ldr	r2, [pc, #464]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	6713      	str	r3, [r2, #112]	; 0x70
 800187a:	4b72      	ldr	r3, [pc, #456]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187e:	4a71      	ldr	r2, [pc, #452]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001880:	f023 0304 	bic.w	r3, r3, #4
 8001884:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d015      	beq.n	80018ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188e:	f7ff fad9 	bl	8000e44 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	e00a      	b.n	80018ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff fad5 	bl	8000e44 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e0c5      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ac:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0ee      	beq.n	8001896 <HAL_RCC_OscConfig+0x33a>
 80018b8:	e014      	b.n	80018e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fac3 	bl	8000e44 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7ff fabf 	bl	8000e44 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e0af      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d8:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 80018da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ee      	bne.n	80018c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d105      	bne.n	80018f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ea:	4b56      	ldr	r3, [pc, #344]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a55      	ldr	r2, [pc, #340]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 80018f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 809b 	beq.w	8001a36 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001900:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	d05c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d141      	bne.n	8001998 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001914:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <HAL_RCC_OscConfig+0x4ec>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff fa93 	bl	8000e44 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff fa8f 	bl	8000e44 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e081      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001934:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	019b      	lsls	r3, r3, #6
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	3b01      	subs	r3, #1
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	061b      	lsls	r3, r3, #24
 8001964:	4937      	ldr	r1, [pc, #220]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 8001966:	4313      	orrs	r3, r2
 8001968:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_RCC_OscConfig+0x4ec>)
 800196c:	2201      	movs	r2, #1
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fa68 	bl	8000e44 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff fa64 	bl	8000e44 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e056      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x41c>
 8001996:	e04e      	b.n	8001a36 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001998:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_RCC_OscConfig+0x4ec>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff fa51 	bl	8000e44 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff fa4d 	bl	8000e44 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e03f      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f0      	bne.n	80019a6 <HAL_RCC_OscConfig+0x44a>
 80019c4:	e037      	b.n	8001a36 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e032      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_RCC_OscConfig+0x4e8>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d028      	beq.n	8001a32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d121      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d11a      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a02:	4013      	ands	r3, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a08:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d111      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	085b      	lsrs	r3, r3, #1
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40007000 	.word	0x40007000
 8001a44:	40023800 	.word	0x40023800
 8001a48:	42470060 	.word	0x42470060

08001a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0cc      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a60:	4b68      	ldr	r3, [pc, #416]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d90c      	bls.n	8001a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b65      	ldr	r3, [pc, #404]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b63      	ldr	r3, [pc, #396]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0b8      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa0:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	4a58      	ldr	r2, [pc, #352]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab8:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac4:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	494d      	ldr	r1, [pc, #308]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d044      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d119      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e07f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d003      	beq.n	8001b0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0a:	4b3f      	ldr	r3, [pc, #252]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e06f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e067      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2a:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f023 0203 	bic.w	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4934      	ldr	r1, [pc, #208]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b3c:	f7ff f982 	bl	8000e44 <HAL_GetTick>
 8001b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b44:	f7ff f97e 	bl	8000e44 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e04f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 020c 	and.w	r2, r3, #12
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d1eb      	bne.n	8001b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d20c      	bcs.n	8001b94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e032      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4916      	ldr	r1, [pc, #88]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	490e      	ldr	r1, [pc, #56]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bd2:	f000 f821 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	490a      	ldr	r1, [pc, #40]	; (8001c0c <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	5ccb      	ldrb	r3, [r1, r3]
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f8e2 	bl	8000dbc <HAL_InitTick>

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023c00 	.word	0x40023c00
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	08003c6c 	.word	0x08003c6c
 8001c10:	20000008 	.word	0x20000008
 8001c14:	2000000c 	.word	0x2000000c

08001c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c30:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d00d      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x40>
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	f200 80bd 	bhi.w	8001dbc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x34>
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d003      	beq.n	8001c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c4a:	e0b7      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c4c:	4b61      	ldr	r3, [pc, #388]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c4e:	60bb      	str	r3, [r7, #8]
       break;
 8001c50:	e0b7      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c52:	4b61      	ldr	r3, [pc, #388]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c54:	60bb      	str	r3, [r7, #8]
      break;
 8001c56:	e0b4      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c58:	4b5d      	ldr	r3, [pc, #372]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c62:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d04d      	beq.n	8001d0a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6e:	4b58      	ldr	r3, [pc, #352]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	099b      	lsrs	r3, r3, #6
 8001c74:	461a      	mov	r2, r3
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c7e:	f04f 0100 	mov.w	r1, #0
 8001c82:	ea02 0800 	and.w	r8, r2, r0
 8001c86:	ea03 0901 	and.w	r9, r3, r1
 8001c8a:	4640      	mov	r0, r8
 8001c8c:	4649      	mov	r1, r9
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	014b      	lsls	r3, r1, #5
 8001c98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c9c:	0142      	lsls	r2, r0, #5
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	ebb0 0008 	subs.w	r0, r0, r8
 8001ca6:	eb61 0109 	sbc.w	r1, r1, r9
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	018b      	lsls	r3, r1, #6
 8001cb4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cb8:	0182      	lsls	r2, r0, #6
 8001cba:	1a12      	subs	r2, r2, r0
 8001cbc:	eb63 0301 	sbc.w	r3, r3, r1
 8001cc0:	f04f 0000 	mov.w	r0, #0
 8001cc4:	f04f 0100 	mov.w	r1, #0
 8001cc8:	00d9      	lsls	r1, r3, #3
 8001cca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cce:	00d0      	lsls	r0, r2, #3
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	eb12 0208 	adds.w	r2, r2, r8
 8001cd8:	eb43 0309 	adc.w	r3, r3, r9
 8001cdc:	f04f 0000 	mov.w	r0, #0
 8001ce0:	f04f 0100 	mov.w	r1, #0
 8001ce4:	0259      	lsls	r1, r3, #9
 8001ce6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001cea:	0250      	lsls	r0, r2, #9
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	f7fe fac0 	bl	8000280 <__aeabi_uldivmod>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4613      	mov	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	e04a      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0a:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	099b      	lsrs	r3, r3, #6
 8001d10:	461a      	mov	r2, r3
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d1a:	f04f 0100 	mov.w	r1, #0
 8001d1e:	ea02 0400 	and.w	r4, r2, r0
 8001d22:	ea03 0501 	and.w	r5, r3, r1
 8001d26:	4620      	mov	r0, r4
 8001d28:	4629      	mov	r1, r5
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	014b      	lsls	r3, r1, #5
 8001d34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d38:	0142      	lsls	r2, r0, #5
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	1b00      	subs	r0, r0, r4
 8001d40:	eb61 0105 	sbc.w	r1, r1, r5
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	018b      	lsls	r3, r1, #6
 8001d4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d52:	0182      	lsls	r2, r0, #6
 8001d54:	1a12      	subs	r2, r2, r0
 8001d56:	eb63 0301 	sbc.w	r3, r3, r1
 8001d5a:	f04f 0000 	mov.w	r0, #0
 8001d5e:	f04f 0100 	mov.w	r1, #0
 8001d62:	00d9      	lsls	r1, r3, #3
 8001d64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d68:	00d0      	lsls	r0, r2, #3
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	1912      	adds	r2, r2, r4
 8001d70:	eb45 0303 	adc.w	r3, r5, r3
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	0299      	lsls	r1, r3, #10
 8001d7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d82:	0290      	lsls	r0, r2, #10
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	f7fe fa74 	bl	8000280 <__aeabi_uldivmod>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	3301      	adds	r3, #1
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	60bb      	str	r3, [r7, #8]
      break;
 8001dba:	e002      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dbe:	60bb      	str	r3, [r7, #8]
      break;
 8001dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	00f42400 	.word	0x00f42400
 8001dd8:	007a1200 	.word	0x007a1200

08001ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000008 	.word	0x20000008

08001df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001df8:	f7ff fff0 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0a9b      	lsrs	r3, r3, #10
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4903      	ldr	r1, [pc, #12]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800
 8001e18:	08003c7c 	.word	0x08003c7c

08001e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e20:	f7ff ffdc 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	0b5b      	lsrs	r3, r3, #13
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4903      	ldr	r1, [pc, #12]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	08003c7c 	.word	0x08003c7c

08001e44 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d035      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e6c:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e72:	f7fe ffe7 	bl	8000e44 <HAL_GetTick>
 8001e76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e7a:	f7fe ffe3 	bl	8000e44 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e0b0      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e8c:	4b5b      	ldr	r3, [pc, #364]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f0      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	019a      	lsls	r2, r3, #6
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	071b      	lsls	r3, r3, #28
 8001ea4:	4955      	ldr	r1, [pc, #340]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001eac:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001eb2:	f7fe ffc7 	bl	8000e44 <HAL_GetTick>
 8001eb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001eba:	f7fe ffc3 	bl	8000e44 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e090      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ecc:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 8083 	beq.w	8001fec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b44      	ldr	r3, [pc, #272]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a43      	ldr	r2, [pc, #268]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef6:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001f02:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a3e      	ldr	r2, [pc, #248]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f0e:	f7fe ff99 	bl	8000e44 <HAL_GetTick>
 8001f12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7fe ff95 	bl	8000e44 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e062      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f28:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f34:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d02f      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d028      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f52:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f5c:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f62:	4b28      	ldr	r3, [pc, #160]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001f68:	4a24      	ldr	r2, [pc, #144]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f6e:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d114      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7fe ff63 	bl	8000e44 <HAL_GetTick>
 8001f7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7fe ff5f 	bl	8000e44 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e02a      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ee      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fb0:	d10d      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc6:	490d      	ldr	r1, [pc, #52]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]
 8001fcc:	e005      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fd4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001fd8:	6093      	str	r3, [r2, #8]
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe6:	4905      	ldr	r1, [pc, #20]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	42470068 	.word	0x42470068
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40007000 	.word	0x40007000
 8002004:	42470e40 	.word	0x42470e40

08002008 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e083      	b.n	8002122 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	7f5b      	ldrb	r3, [r3, #29]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d105      	bne.n	8002030 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe fd84 	bl	8000b38 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	22ca      	movs	r2, #202	; 0xca
 800203c:	625a      	str	r2, [r3, #36]	; 0x24
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2253      	movs	r2, #83	; 0x53
 8002044:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 fcb6 	bl	80029b8 <RTC_EnterInitMode>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d008      	beq.n	8002064 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	22ff      	movs	r2, #255	; 0xff
 8002058:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2204      	movs	r2, #4
 800205e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e05e      	b.n	8002122 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002076:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6899      	ldr	r1, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68d2      	ldr	r2, [r2, #12]
 800209e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6919      	ldr	r1, [r3, #16]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	041a      	lsls	r2, r3, #16
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10e      	bne.n	80020f0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fc48 	bl	8002968 <HAL_RTC_WaitForSynchro>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d008      	beq.n	80020f0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	22ff      	movs	r2, #255	; 0xff
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2204      	movs	r2, #4
 80020ea:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e018      	b.n	8002122 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	22ff      	movs	r2, #255	; 0xff
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002120:	2300      	movs	r3, #0
  }
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800212a:	b590      	push	{r4, r7, lr}
 800212c:	b087      	sub	sp, #28
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	7f1b      	ldrb	r3, [r3, #28]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_RTC_SetTime+0x1c>
 8002142:	2302      	movs	r3, #2
 8002144:	e0aa      	b.n	800229c <HAL_RTC_SetTime+0x172>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2202      	movs	r2, #2
 8002150:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d126      	bne.n	80021a6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2200      	movs	r2, #0
 800216a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fc4d 	bl	8002a10 <RTC_ByteToBcd2>
 8002176:	4603      	mov	r3, r0
 8002178:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	785b      	ldrb	r3, [r3, #1]
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fc46 	bl	8002a10 <RTC_ByteToBcd2>
 8002184:	4603      	mov	r3, r0
 8002186:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002188:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	789b      	ldrb	r3, [r3, #2]
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fc3e 	bl	8002a10 <RTC_ByteToBcd2>
 8002194:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002196:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	78db      	ldrb	r3, [r3, #3]
 800219e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	e018      	b.n	80021d8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2200      	movs	r2, #0
 80021b8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	785b      	ldrb	r3, [r3, #1]
 80021c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80021c6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80021cc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	78db      	ldrb	r3, [r3, #3]
 80021d2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	22ca      	movs	r2, #202	; 0xca
 80021de:	625a      	str	r2, [r3, #36]	; 0x24
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2253      	movs	r2, #83	; 0x53
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 fbe5 	bl	80029b8 <RTC_EnterInitMode>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00b      	beq.n	800220c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	22ff      	movs	r2, #255	; 0xff
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2204      	movs	r2, #4
 8002200:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e047      	b.n	800229c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002216:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800221a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800222a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6899      	ldr	r1, [r3, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	431a      	orrs	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002252:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b00      	cmp	r3, #0
 8002260:	d111      	bne.n	8002286 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fb80 	bl	8002968 <HAL_RTC_WaitForSynchro>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	22ff      	movs	r2, #255	; 0xff
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2204      	movs	r2, #4
 800227a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e00a      	b.n	800229c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	22ff      	movs	r2, #255	; 0xff
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800229a:	2300      	movs	r3, #0
  }
}
 800229c:	4618      	mov	r0, r3
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd90      	pop	{r4, r7, pc}

080022a4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80022d6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80022da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	0c1b      	lsrs	r3, r3, #16
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002304:	b2da      	uxtb	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	0c1b      	lsrs	r3, r3, #16
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002314:	b2da      	uxtb	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d11a      	bne.n	8002356 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fb91 	bl	8002a4c <RTC_Bcd2ToByte>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	785b      	ldrb	r3, [r3, #1]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fb88 	bl	8002a4c <RTC_Bcd2ToByte>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	789b      	ldrb	r3, [r3, #2]
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fb7f 	bl	8002a4c <RTC_Bcd2ToByte>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	7f1b      	ldrb	r3, [r3, #28]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_RTC_SetDate+0x1c>
 8002378:	2302      	movs	r3, #2
 800237a:	e094      	b.n	80024a6 <HAL_RTC_SetDate+0x146>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2201      	movs	r2, #1
 8002380:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2202      	movs	r2, #2
 8002386:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10e      	bne.n	80023ac <HAL_RTC_SetDate+0x4c>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	785b      	ldrb	r3, [r3, #1]
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	785b      	ldrb	r3, [r3, #1]
 800239e:	f023 0310 	bic.w	r3, r3, #16
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	330a      	adds	r3, #10
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d11c      	bne.n	80023ec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	78db      	ldrb	r3, [r3, #3]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fb2a 	bl	8002a10 <RTC_ByteToBcd2>
 80023bc:	4603      	mov	r3, r0
 80023be:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	785b      	ldrb	r3, [r3, #1]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fb23 	bl	8002a10 <RTC_ByteToBcd2>
 80023ca:	4603      	mov	r3, r0
 80023cc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80023ce:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	789b      	ldrb	r3, [r3, #2]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fb1b 	bl	8002a10 <RTC_ByteToBcd2>
 80023da:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80023dc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	e00e      	b.n	800240a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	78db      	ldrb	r3, [r3, #3]
 80023f0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	785b      	ldrb	r3, [r3, #1]
 80023f6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80023f8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80023fe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	22ca      	movs	r2, #202	; 0xca
 8002410:	625a      	str	r2, [r3, #36]	; 0x24
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2253      	movs	r2, #83	; 0x53
 8002418:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 facc 	bl	80029b8 <RTC_EnterInitMode>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00b      	beq.n	800243e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	22ff      	movs	r2, #255	; 0xff
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2204      	movs	r2, #4
 8002432:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e033      	b.n	80024a6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002448:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800244c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800245c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d111      	bne.n	8002490 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fa7b 	bl	8002968 <HAL_RTC_WaitForSynchro>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00b      	beq.n	8002490 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	22ff      	movs	r2, #255	; 0xff
 800247e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2204      	movs	r2, #4
 8002484:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e00a      	b.n	80024a6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	22ff      	movs	r2, #255	; 0xff
 8002496:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2201      	movs	r2, #1
 800249c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
  }
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}

080024ae <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80024cc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	0c1b      	lsrs	r3, r3, #16
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	0b5b      	lsrs	r3, r3, #13
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	b2da      	uxtb	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d11a      	bne.n	8002542 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	78db      	ldrb	r3, [r3, #3]
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fa9b 	bl	8002a4c <RTC_Bcd2ToByte>
 8002516:	4603      	mov	r3, r0
 8002518:	461a      	mov	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	785b      	ldrb	r3, [r3, #1]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fa92 	bl	8002a4c <RTC_Bcd2ToByte>
 8002528:	4603      	mov	r3, r0
 800252a:	461a      	mov	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	789b      	ldrb	r3, [r3, #2]
 8002534:	4618      	mov	r0, r3
 8002536:	f000 fa89 	bl	8002a4c <RTC_Bcd2ToByte>
 800253a:	4603      	mov	r3, r0
 800253c:	461a      	mov	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002560:	4b93      	ldr	r3, [pc, #588]	; (80027b0 <HAL_RTC_SetAlarm_IT+0x264>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a93      	ldr	r2, [pc, #588]	; (80027b4 <HAL_RTC_SetAlarm_IT+0x268>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	0adb      	lsrs	r3, r3, #11
 800256c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002570:	fb02 f303 	mul.w	r3, r2, r3
 8002574:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	7f1b      	ldrb	r3, [r3, #28]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_RTC_SetAlarm_IT+0x36>
 800257e:	2302      	movs	r3, #2
 8002580:	e111      	b.n	80027a6 <HAL_RTC_SetAlarm_IT+0x25a>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2202      	movs	r2, #2
 800258c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d137      	bne.n	8002604 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d102      	bne.n	80025a8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2200      	movs	r2, #0
 80025a6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fa2f 	bl	8002a10 <RTC_ByteToBcd2>
 80025b2:	4603      	mov	r3, r0
 80025b4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	785b      	ldrb	r3, [r3, #1]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fa28 	bl	8002a10 <RTC_ByteToBcd2>
 80025c0:	4603      	mov	r3, r0
 80025c2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80025c4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	789b      	ldrb	r3, [r3, #2]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fa20 	bl	8002a10 <RTC_ByteToBcd2>
 80025d0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80025d2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	78db      	ldrb	r3, [r3, #3]
 80025da:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80025dc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fa12 	bl	8002a10 <RTC_ByteToBcd2>
 80025ec:	4603      	mov	r3, r0
 80025ee:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80025f0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80025f8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80025fe:	4313      	orrs	r3, r2
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	e023      	b.n	800264c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d102      	bne.n	8002618 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2200      	movs	r2, #0
 8002616:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	785b      	ldrb	r3, [r3, #1]
 8002622:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002624:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800262a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	78db      	ldrb	r3, [r3, #3]
 8002630:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002632:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f893 3020 	ldrb.w	r3, [r3, #32]
 800263a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800263c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002642:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002648:	4313      	orrs	r3, r2
 800264a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	22ca      	movs	r2, #202	; 0xca
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2253      	movs	r2, #83	; 0x53
 8002666:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002670:	d141      	bne.n	80026f6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002680:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002692:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	1e5a      	subs	r2, r3, #1
 8002698:	617a      	str	r2, [r7, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10b      	bne.n	80026b6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	22ff      	movs	r2, #255	; 0xff
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2203      	movs	r2, #3
 80026aa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e077      	b.n	80027a6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0e7      	beq.n	8002694 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	e040      	b.n	8002778 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002704:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002716:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	1e5a      	subs	r2, r3, #1
 800271c:	617a      	str	r2, [r7, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10b      	bne.n	800273a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	22ff      	movs	r2, #255	; 0xff
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2203      	movs	r2, #3
 800272e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e035      	b.n	80027a6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0e7      	beq.n	8002718 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002766:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002776:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002778:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800277e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002782:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800278a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	22ff      	movs	r2, #255	; 0xff
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3724      	adds	r7, #36	; 0x24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd90      	pop	{r4, r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000008 	.word	0x20000008
 80027b4:	10624dd3 	.word	0x10624dd3
 80027b8:	40013c00 	.word	0x40013c00

080027bc <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d8:	d10e      	bne.n	80027f8 <HAL_RTC_GetAlarm+0x3c>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	e00d      	b.n	8002814 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002812:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	0c1b      	lsrs	r3, r3, #16
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800281e:	b2da      	uxtb	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800282e:	b2da      	uxtb	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800283c:	b2da      	uxtb	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	0c1b      	lsrs	r3, r3, #16
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	0e1b      	lsrs	r3, r3, #24
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002862:	b2da      	uxtb	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	615a      	str	r2, [r3, #20]

  if(Format == RTC_FORMAT_BIN)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d125      	bne.n	80028d0 <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f000 f8df 	bl	8002a4c <RTC_Bcd2ToByte>
 800288e:	4603      	mov	r3, r0
 8002890:	461a      	mov	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	785b      	ldrb	r3, [r3, #1]
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f8d6 	bl	8002a4c <RTC_Bcd2ToByte>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461a      	mov	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	789b      	ldrb	r3, [r3, #2]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 f8cd 	bl	8002a4c <RTC_Bcd2ToByte>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461a      	mov	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 f8c3 	bl	8002a4c <RTC_Bcd2ToByte>
 80028c6:	4603      	mov	r3, r0
 80028c8:	461a      	mov	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d012      	beq.n	8002918 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00b      	beq.n	8002918 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7fe f8c7 	bl	8000a94 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	b2da      	uxtb	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002916:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d012      	beq.n	800294c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00b      	beq.n	800294c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f8bf 	bl	8002ab8 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f462 7220 	orn	r2, r2, #640	; 0x280
 800294a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <HAL_RTC_AlarmIRQHandler+0x88>)
 800294e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002952:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	775a      	strb	r2, [r3, #29]
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40013c00 	.word	0x40013c00

08002968 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002982:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002984:	f7fe fa5e 	bl	8000e44 <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800298a:	e009      	b.n	80029a0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800298c:	f7fe fa5a 	bl	8000e44 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800299a:	d901      	bls.n	80029a0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e007      	b.n	80029b0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0ee      	beq.n	800298c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d119      	bne.n	8002a06 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029dc:	f7fe fa32 	bl	8000e44 <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80029e2:	e009      	b.n	80029f8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80029e4:	f7fe fa2e 	bl	8000e44 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029f2:	d901      	bls.n	80029f8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e007      	b.n	8002a08 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0ee      	beq.n	80029e4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8002a1e:	e005      	b.n	8002a2c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3301      	adds	r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	3b0a      	subs	r3, #10
 8002a2a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	2b09      	cmp	r3, #9
 8002a30:	d8f6      	bhi.n	8002a20 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	b2db      	uxtb	r3, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	b2db      	uxtb	r3, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3350      	adds	r3, #80	; 0x50
 8002a9c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e03f      	b.n	8002b5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe f852 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2224      	movs	r2, #36	; 0x24
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fa13 	bl	8002f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b08a      	sub	sp, #40	; 0x28
 8002b6a:	af02      	add	r7, sp, #8
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	d17c      	bne.n	8002c80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_UART_Transmit+0x2c>
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e075      	b.n	8002c82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_UART_Transmit+0x3e>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e06e      	b.n	8002c82 <HAL_UART_Transmit+0x11c>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2221      	movs	r2, #33	; 0x21
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bba:	f7fe f943 	bl	8000e44 <HAL_GetTick>
 8002bbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	88fa      	ldrh	r2, [r7, #6]
 8002bca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd4:	d108      	bne.n	8002be8 <HAL_UART_Transmit+0x82>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d104      	bne.n	8002be8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	e003      	b.n	8002bf0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002bf8:	e02a      	b.n	8002c50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2200      	movs	r2, #0
 8002c02:	2180      	movs	r1, #128	; 0x80
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f92b 	bl	8002e60 <UART_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e036      	b.n	8002c82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10b      	bne.n	8002c32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	e007      	b.n	8002c42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1cf      	bne.n	8002bfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2200      	movs	r2, #0
 8002c62:	2140      	movs	r1, #64	; 0x40
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f8fb 	bl	8002e60 <UART_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e006      	b.n	8002c82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e000      	b.n	8002c82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
  }
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b0a0      	sub	sp, #128	; 0x80
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	330c      	adds	r3, #12
 8002c98:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9c:	e853 3f00 	ldrex	r3, [r3]
 8002ca0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8002ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca4:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8002ca8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	330c      	adds	r3, #12
 8002cb0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002cb2:	66ba      	str	r2, [r7, #104]	; 0x68
 8002cb4:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002cb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002cba:	e841 2300 	strex	r3, r2, [r1]
 8002cbe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8002cc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1e5      	bne.n	8002c92 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3314      	adds	r3, #20
 8002ccc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd0:	e853 3f00 	ldrex	r3, [r3]
 8002cd4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3314      	adds	r3, #20
 8002ce4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ce6:	657a      	str	r2, [r7, #84]	; 0x54
 8002ce8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002cec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cee:	e841 2300 	strex	r3, r2, [r1]
 8002cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e5      	bne.n	8002cc6 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d119      	bne.n	8002d36 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	330c      	adds	r3, #12
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	f023 0310 	bic.w	r3, r3, #16
 8002d18:	677b      	str	r3, [r7, #116]	; 0x74
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	330c      	adds	r3, #12
 8002d20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d22:	643a      	str	r2, [r7, #64]	; 0x40
 8002d24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d2a:	e841 2300 	strex	r3, r2, [r1]
 8002d2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e5      	bne.n	8002d02 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	d136      	bne.n	8002db2 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3314      	adds	r3, #20
 8002d4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d5a:	673b      	str	r3, [r7, #112]	; 0x70
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3314      	adds	r3, #20
 8002d62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002d64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e5      	bne.n	8002d44 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d018      	beq.n	8002db2 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d84:	2200      	movs	r2, #0
 8002d86:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe f99a 	bl	80010c6 <HAL_DMA_Abort>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00c      	beq.n	8002db2 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe fa02 	bl	80011a6 <HAL_DMA_GetError>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d104      	bne.n	8002db2 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2210      	movs	r2, #16
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e052      	b.n	8002e58 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d136      	bne.n	8002e2e <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3314      	adds	r3, #20
 8002dc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	e853 3f00 	ldrex	r3, [r3]
 8002dce:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3314      	adds	r3, #20
 8002dde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002de0:	61ba      	str	r2, [r7, #24]
 8002de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de4:	6979      	ldr	r1, [r7, #20]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	e841 2300 	strex	r3, r2, [r1]
 8002dec:	613b      	str	r3, [r7, #16]
   return(result);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e5      	bne.n	8002dc0 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d018      	beq.n	8002e2e <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e00:	2200      	movs	r2, #0
 8002e02:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe f95c 	bl	80010c6 <HAL_DMA_Abort>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00c      	beq.n	8002e2e <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe f9c4 	bl	80011a6 <HAL_DMA_GetError>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d104      	bne.n	8002e2e <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2210      	movs	r2, #16
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e014      	b.n	8002e58 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3780      	adds	r7, #128	; 0x80
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b090      	sub	sp, #64	; 0x40
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e70:	e050      	b.n	8002f14 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e78:	d04c      	beq.n	8002f14 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e80:	f7fd ffe0 	bl	8000e44 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d241      	bcs.n	8002f14 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	330c      	adds	r3, #12
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	e853 3f00 	ldrex	r3, [r3]
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	330c      	adds	r3, #12
 8002eae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eb0:	637a      	str	r2, [r7, #52]	; 0x34
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eb8:	e841 2300 	strex	r3, r2, [r1]
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e5      	bne.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3314      	adds	r3, #20
 8002eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	e853 3f00 	ldrex	r3, [r3]
 8002ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	3314      	adds	r3, #20
 8002ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ee4:	623a      	str	r2, [r7, #32]
 8002ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee8:	69f9      	ldr	r1, [r7, #28]
 8002eea:	6a3a      	ldr	r2, [r7, #32]
 8002eec:	e841 2300 	strex	r3, r2, [r1]
 8002ef0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e5      	bne.n	8002ec4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e00f      	b.n	8002f34 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d09f      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3740      	adds	r7, #64	; 0x40
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f40:	b09f      	sub	sp, #124	; 0x7c
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f52:	68d9      	ldr	r1, [r3, #12]
 8002f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	ea40 0301 	orr.w	r3, r0, r1
 8002f5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f80:	f021 010c 	bic.w	r1, r1, #12
 8002f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9a:	6999      	ldr	r1, [r3, #24]
 8002f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	ea40 0301 	orr.w	r3, r0, r1
 8002fa4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	4bc5      	ldr	r3, [pc, #788]	; (80032c0 <UART_SetConfig+0x384>)
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d004      	beq.n	8002fba <UART_SetConfig+0x7e>
 8002fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4bc3      	ldr	r3, [pc, #780]	; (80032c4 <UART_SetConfig+0x388>)
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d103      	bne.n	8002fc2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fba:	f7fe ff2f 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 8002fbe:	6778      	str	r0, [r7, #116]	; 0x74
 8002fc0:	e002      	b.n	8002fc8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fc2:	f7fe ff17 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8002fc6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd0:	f040 80b6 	bne.w	8003140 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd6:	461c      	mov	r4, r3
 8002fd8:	f04f 0500 	mov.w	r5, #0
 8002fdc:	4622      	mov	r2, r4
 8002fde:	462b      	mov	r3, r5
 8002fe0:	1891      	adds	r1, r2, r2
 8002fe2:	6439      	str	r1, [r7, #64]	; 0x40
 8002fe4:	415b      	adcs	r3, r3
 8002fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fec:	1912      	adds	r2, r2, r4
 8002fee:	eb45 0303 	adc.w	r3, r5, r3
 8002ff2:	f04f 0000 	mov.w	r0, #0
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	00d9      	lsls	r1, r3, #3
 8002ffc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003000:	00d0      	lsls	r0, r2, #3
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	1911      	adds	r1, r2, r4
 8003008:	6639      	str	r1, [r7, #96]	; 0x60
 800300a:	416b      	adcs	r3, r5
 800300c:	667b      	str	r3, [r7, #100]	; 0x64
 800300e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	461a      	mov	r2, r3
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	1891      	adds	r1, r2, r2
 800301a:	63b9      	str	r1, [r7, #56]	; 0x38
 800301c:	415b      	adcs	r3, r3
 800301e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003020:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003024:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003028:	f7fd f92a 	bl	8000280 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4ba5      	ldr	r3, [pc, #660]	; (80032c8 <UART_SetConfig+0x38c>)
 8003032:	fba3 2302 	umull	r2, r3, r3, r2
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	011e      	lsls	r6, r3, #4
 800303a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800303c:	461c      	mov	r4, r3
 800303e:	f04f 0500 	mov.w	r5, #0
 8003042:	4622      	mov	r2, r4
 8003044:	462b      	mov	r3, r5
 8003046:	1891      	adds	r1, r2, r2
 8003048:	6339      	str	r1, [r7, #48]	; 0x30
 800304a:	415b      	adcs	r3, r3
 800304c:	637b      	str	r3, [r7, #52]	; 0x34
 800304e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003052:	1912      	adds	r2, r2, r4
 8003054:	eb45 0303 	adc.w	r3, r5, r3
 8003058:	f04f 0000 	mov.w	r0, #0
 800305c:	f04f 0100 	mov.w	r1, #0
 8003060:	00d9      	lsls	r1, r3, #3
 8003062:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003066:	00d0      	lsls	r0, r2, #3
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	1911      	adds	r1, r2, r4
 800306e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003070:	416b      	adcs	r3, r5
 8003072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	461a      	mov	r2, r3
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	1891      	adds	r1, r2, r2
 8003080:	62b9      	str	r1, [r7, #40]	; 0x28
 8003082:	415b      	adcs	r3, r3
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800308a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800308e:	f7fd f8f7 	bl	8000280 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4b8c      	ldr	r3, [pc, #560]	; (80032c8 <UART_SetConfig+0x38c>)
 8003098:	fba3 1302 	umull	r1, r3, r3, r2
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	2164      	movs	r1, #100	; 0x64
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	3332      	adds	r3, #50	; 0x32
 80030aa:	4a87      	ldr	r2, [pc, #540]	; (80032c8 <UART_SetConfig+0x38c>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030b8:	441e      	add	r6, r3
 80030ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030bc:	4618      	mov	r0, r3
 80030be:	f04f 0100 	mov.w	r1, #0
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	1894      	adds	r4, r2, r2
 80030c8:	623c      	str	r4, [r7, #32]
 80030ca:	415b      	adcs	r3, r3
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030d2:	1812      	adds	r2, r2, r0
 80030d4:	eb41 0303 	adc.w	r3, r1, r3
 80030d8:	f04f 0400 	mov.w	r4, #0
 80030dc:	f04f 0500 	mov.w	r5, #0
 80030e0:	00dd      	lsls	r5, r3, #3
 80030e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030e6:	00d4      	lsls	r4, r2, #3
 80030e8:	4622      	mov	r2, r4
 80030ea:	462b      	mov	r3, r5
 80030ec:	1814      	adds	r4, r2, r0
 80030ee:	653c      	str	r4, [r7, #80]	; 0x50
 80030f0:	414b      	adcs	r3, r1
 80030f2:	657b      	str	r3, [r7, #84]	; 0x54
 80030f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	461a      	mov	r2, r3
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	1891      	adds	r1, r2, r2
 8003100:	61b9      	str	r1, [r7, #24]
 8003102:	415b      	adcs	r3, r3
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800310a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800310e:	f7fd f8b7 	bl	8000280 <__aeabi_uldivmod>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4b6c      	ldr	r3, [pc, #432]	; (80032c8 <UART_SetConfig+0x38c>)
 8003118:	fba3 1302 	umull	r1, r3, r3, r2
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	2164      	movs	r1, #100	; 0x64
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	3332      	adds	r3, #50	; 0x32
 800312a:	4a67      	ldr	r2, [pc, #412]	; (80032c8 <UART_SetConfig+0x38c>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	f003 0207 	and.w	r2, r3, #7
 8003136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4432      	add	r2, r6
 800313c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800313e:	e0b9      	b.n	80032b4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003142:	461c      	mov	r4, r3
 8003144:	f04f 0500 	mov.w	r5, #0
 8003148:	4622      	mov	r2, r4
 800314a:	462b      	mov	r3, r5
 800314c:	1891      	adds	r1, r2, r2
 800314e:	6139      	str	r1, [r7, #16]
 8003150:	415b      	adcs	r3, r3
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003158:	1912      	adds	r2, r2, r4
 800315a:	eb45 0303 	adc.w	r3, r5, r3
 800315e:	f04f 0000 	mov.w	r0, #0
 8003162:	f04f 0100 	mov.w	r1, #0
 8003166:	00d9      	lsls	r1, r3, #3
 8003168:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800316c:	00d0      	lsls	r0, r2, #3
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	eb12 0804 	adds.w	r8, r2, r4
 8003176:	eb43 0905 	adc.w	r9, r3, r5
 800317a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4618      	mov	r0, r3
 8003180:	f04f 0100 	mov.w	r1, #0
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	008b      	lsls	r3, r1, #2
 800318e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003192:	0082      	lsls	r2, r0, #2
 8003194:	4640      	mov	r0, r8
 8003196:	4649      	mov	r1, r9
 8003198:	f7fd f872 	bl	8000280 <__aeabi_uldivmod>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4b49      	ldr	r3, [pc, #292]	; (80032c8 <UART_SetConfig+0x38c>)
 80031a2:	fba3 2302 	umull	r2, r3, r3, r2
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	011e      	lsls	r6, r3, #4
 80031aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ac:	4618      	mov	r0, r3
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	1894      	adds	r4, r2, r2
 80031b8:	60bc      	str	r4, [r7, #8]
 80031ba:	415b      	adcs	r3, r3
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031c2:	1812      	adds	r2, r2, r0
 80031c4:	eb41 0303 	adc.w	r3, r1, r3
 80031c8:	f04f 0400 	mov.w	r4, #0
 80031cc:	f04f 0500 	mov.w	r5, #0
 80031d0:	00dd      	lsls	r5, r3, #3
 80031d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031d6:	00d4      	lsls	r4, r2, #3
 80031d8:	4622      	mov	r2, r4
 80031da:	462b      	mov	r3, r5
 80031dc:	1814      	adds	r4, r2, r0
 80031de:	64bc      	str	r4, [r7, #72]	; 0x48
 80031e0:	414b      	adcs	r3, r1
 80031e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	008b      	lsls	r3, r1, #2
 80031f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031fc:	0082      	lsls	r2, r0, #2
 80031fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003202:	f7fd f83d 	bl	8000280 <__aeabi_uldivmod>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4b2f      	ldr	r3, [pc, #188]	; (80032c8 <UART_SetConfig+0x38c>)
 800320c:	fba3 1302 	umull	r1, r3, r3, r2
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	2164      	movs	r1, #100	; 0x64
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	3332      	adds	r3, #50	; 0x32
 800321e:	4a2a      	ldr	r2, [pc, #168]	; (80032c8 <UART_SetConfig+0x38c>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800322a:	441e      	add	r6, r3
 800322c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322e:	4618      	mov	r0, r3
 8003230:	f04f 0100 	mov.w	r1, #0
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	1894      	adds	r4, r2, r2
 800323a:	603c      	str	r4, [r7, #0]
 800323c:	415b      	adcs	r3, r3
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003244:	1812      	adds	r2, r2, r0
 8003246:	eb41 0303 	adc.w	r3, r1, r3
 800324a:	f04f 0400 	mov.w	r4, #0
 800324e:	f04f 0500 	mov.w	r5, #0
 8003252:	00dd      	lsls	r5, r3, #3
 8003254:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003258:	00d4      	lsls	r4, r2, #3
 800325a:	4622      	mov	r2, r4
 800325c:	462b      	mov	r3, r5
 800325e:	eb12 0a00 	adds.w	sl, r2, r0
 8003262:	eb43 0b01 	adc.w	fp, r3, r1
 8003266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4618      	mov	r0, r3
 800326c:	f04f 0100 	mov.w	r1, #0
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	008b      	lsls	r3, r1, #2
 800327a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800327e:	0082      	lsls	r2, r0, #2
 8003280:	4650      	mov	r0, sl
 8003282:	4659      	mov	r1, fp
 8003284:	f7fc fffc 	bl	8000280 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <UART_SetConfig+0x38c>)
 800328e:	fba3 1302 	umull	r1, r3, r3, r2
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2164      	movs	r1, #100	; 0x64
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	3332      	adds	r3, #50	; 0x32
 80032a0:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <UART_SetConfig+0x38c>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	f003 020f 	and.w	r2, r3, #15
 80032ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4432      	add	r2, r6
 80032b2:	609a      	str	r2, [r3, #8]
}
 80032b4:	bf00      	nop
 80032b6:	377c      	adds	r7, #124	; 0x7c
 80032b8:	46bd      	mov	sp, r7
 80032ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032be:	bf00      	nop
 80032c0:	40011000 	.word	0x40011000
 80032c4:	40011400 	.word	0x40011400
 80032c8:	51eb851f 	.word	0x51eb851f

080032cc <__errno>:
 80032cc:	4b01      	ldr	r3, [pc, #4]	; (80032d4 <__errno+0x8>)
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000014 	.word	0x20000014

080032d8 <__libc_init_array>:
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	4d0d      	ldr	r5, [pc, #52]	; (8003310 <__libc_init_array+0x38>)
 80032dc:	4c0d      	ldr	r4, [pc, #52]	; (8003314 <__libc_init_array+0x3c>)
 80032de:	1b64      	subs	r4, r4, r5
 80032e0:	10a4      	asrs	r4, r4, #2
 80032e2:	2600      	movs	r6, #0
 80032e4:	42a6      	cmp	r6, r4
 80032e6:	d109      	bne.n	80032fc <__libc_init_array+0x24>
 80032e8:	4d0b      	ldr	r5, [pc, #44]	; (8003318 <__libc_init_array+0x40>)
 80032ea:	4c0c      	ldr	r4, [pc, #48]	; (800331c <__libc_init_array+0x44>)
 80032ec:	f000 fc82 	bl	8003bf4 <_init>
 80032f0:	1b64      	subs	r4, r4, r5
 80032f2:	10a4      	asrs	r4, r4, #2
 80032f4:	2600      	movs	r6, #0
 80032f6:	42a6      	cmp	r6, r4
 80032f8:	d105      	bne.n	8003306 <__libc_init_array+0x2e>
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003300:	4798      	blx	r3
 8003302:	3601      	adds	r6, #1
 8003304:	e7ee      	b.n	80032e4 <__libc_init_array+0xc>
 8003306:	f855 3b04 	ldr.w	r3, [r5], #4
 800330a:	4798      	blx	r3
 800330c:	3601      	adds	r6, #1
 800330e:	e7f2      	b.n	80032f6 <__libc_init_array+0x1e>
 8003310:	08003cc0 	.word	0x08003cc0
 8003314:	08003cc0 	.word	0x08003cc0
 8003318:	08003cc0 	.word	0x08003cc0
 800331c:	08003cc4 	.word	0x08003cc4

08003320 <memset>:
 8003320:	4402      	add	r2, r0
 8003322:	4603      	mov	r3, r0
 8003324:	4293      	cmp	r3, r2
 8003326:	d100      	bne.n	800332a <memset+0xa>
 8003328:	4770      	bx	lr
 800332a:	f803 1b01 	strb.w	r1, [r3], #1
 800332e:	e7f9      	b.n	8003324 <memset+0x4>

08003330 <sniprintf>:
 8003330:	b40c      	push	{r2, r3}
 8003332:	b530      	push	{r4, r5, lr}
 8003334:	4b17      	ldr	r3, [pc, #92]	; (8003394 <sniprintf+0x64>)
 8003336:	1e0c      	subs	r4, r1, #0
 8003338:	681d      	ldr	r5, [r3, #0]
 800333a:	b09d      	sub	sp, #116	; 0x74
 800333c:	da08      	bge.n	8003350 <sniprintf+0x20>
 800333e:	238b      	movs	r3, #139	; 0x8b
 8003340:	602b      	str	r3, [r5, #0]
 8003342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003346:	b01d      	add	sp, #116	; 0x74
 8003348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800334c:	b002      	add	sp, #8
 800334e:	4770      	bx	lr
 8003350:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003354:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003358:	bf14      	ite	ne
 800335a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800335e:	4623      	moveq	r3, r4
 8003360:	9304      	str	r3, [sp, #16]
 8003362:	9307      	str	r3, [sp, #28]
 8003364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003368:	9002      	str	r0, [sp, #8]
 800336a:	9006      	str	r0, [sp, #24]
 800336c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003370:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003372:	ab21      	add	r3, sp, #132	; 0x84
 8003374:	a902      	add	r1, sp, #8
 8003376:	4628      	mov	r0, r5
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	f000 f889 	bl	8003490 <_svfiprintf_r>
 800337e:	1c43      	adds	r3, r0, #1
 8003380:	bfbc      	itt	lt
 8003382:	238b      	movlt	r3, #139	; 0x8b
 8003384:	602b      	strlt	r3, [r5, #0]
 8003386:	2c00      	cmp	r4, #0
 8003388:	d0dd      	beq.n	8003346 <sniprintf+0x16>
 800338a:	9b02      	ldr	r3, [sp, #8]
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e7d9      	b.n	8003346 <sniprintf+0x16>
 8003392:	bf00      	nop
 8003394:	20000014 	.word	0x20000014

08003398 <siprintf>:
 8003398:	b40e      	push	{r1, r2, r3}
 800339a:	b500      	push	{lr}
 800339c:	b09c      	sub	sp, #112	; 0x70
 800339e:	ab1d      	add	r3, sp, #116	; 0x74
 80033a0:	9002      	str	r0, [sp, #8]
 80033a2:	9006      	str	r0, [sp, #24]
 80033a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033a8:	4809      	ldr	r0, [pc, #36]	; (80033d0 <siprintf+0x38>)
 80033aa:	9107      	str	r1, [sp, #28]
 80033ac:	9104      	str	r1, [sp, #16]
 80033ae:	4909      	ldr	r1, [pc, #36]	; (80033d4 <siprintf+0x3c>)
 80033b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80033b4:	9105      	str	r1, [sp, #20]
 80033b6:	6800      	ldr	r0, [r0, #0]
 80033b8:	9301      	str	r3, [sp, #4]
 80033ba:	a902      	add	r1, sp, #8
 80033bc:	f000 f868 	bl	8003490 <_svfiprintf_r>
 80033c0:	9b02      	ldr	r3, [sp, #8]
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	b01c      	add	sp, #112	; 0x70
 80033c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033cc:	b003      	add	sp, #12
 80033ce:	4770      	bx	lr
 80033d0:	20000014 	.word	0x20000014
 80033d4:	ffff0208 	.word	0xffff0208

080033d8 <__ssputs_r>:
 80033d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033dc:	688e      	ldr	r6, [r1, #8]
 80033de:	429e      	cmp	r6, r3
 80033e0:	4682      	mov	sl, r0
 80033e2:	460c      	mov	r4, r1
 80033e4:	4690      	mov	r8, r2
 80033e6:	461f      	mov	r7, r3
 80033e8:	d838      	bhi.n	800345c <__ssputs_r+0x84>
 80033ea:	898a      	ldrh	r2, [r1, #12]
 80033ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033f0:	d032      	beq.n	8003458 <__ssputs_r+0x80>
 80033f2:	6825      	ldr	r5, [r4, #0]
 80033f4:	6909      	ldr	r1, [r1, #16]
 80033f6:	eba5 0901 	sub.w	r9, r5, r1
 80033fa:	6965      	ldr	r5, [r4, #20]
 80033fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003400:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003404:	3301      	adds	r3, #1
 8003406:	444b      	add	r3, r9
 8003408:	106d      	asrs	r5, r5, #1
 800340a:	429d      	cmp	r5, r3
 800340c:	bf38      	it	cc
 800340e:	461d      	movcc	r5, r3
 8003410:	0553      	lsls	r3, r2, #21
 8003412:	d531      	bpl.n	8003478 <__ssputs_r+0xa0>
 8003414:	4629      	mov	r1, r5
 8003416:	f000 fb47 	bl	8003aa8 <_malloc_r>
 800341a:	4606      	mov	r6, r0
 800341c:	b950      	cbnz	r0, 8003434 <__ssputs_r+0x5c>
 800341e:	230c      	movs	r3, #12
 8003420:	f8ca 3000 	str.w	r3, [sl]
 8003424:	89a3      	ldrh	r3, [r4, #12]
 8003426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800342a:	81a3      	strh	r3, [r4, #12]
 800342c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003434:	6921      	ldr	r1, [r4, #16]
 8003436:	464a      	mov	r2, r9
 8003438:	f000 fabe 	bl	80039b8 <memcpy>
 800343c:	89a3      	ldrh	r3, [r4, #12]
 800343e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003446:	81a3      	strh	r3, [r4, #12]
 8003448:	6126      	str	r6, [r4, #16]
 800344a:	6165      	str	r5, [r4, #20]
 800344c:	444e      	add	r6, r9
 800344e:	eba5 0509 	sub.w	r5, r5, r9
 8003452:	6026      	str	r6, [r4, #0]
 8003454:	60a5      	str	r5, [r4, #8]
 8003456:	463e      	mov	r6, r7
 8003458:	42be      	cmp	r6, r7
 800345a:	d900      	bls.n	800345e <__ssputs_r+0x86>
 800345c:	463e      	mov	r6, r7
 800345e:	4632      	mov	r2, r6
 8003460:	6820      	ldr	r0, [r4, #0]
 8003462:	4641      	mov	r1, r8
 8003464:	f000 fab6 	bl	80039d4 <memmove>
 8003468:	68a3      	ldr	r3, [r4, #8]
 800346a:	6822      	ldr	r2, [r4, #0]
 800346c:	1b9b      	subs	r3, r3, r6
 800346e:	4432      	add	r2, r6
 8003470:	60a3      	str	r3, [r4, #8]
 8003472:	6022      	str	r2, [r4, #0]
 8003474:	2000      	movs	r0, #0
 8003476:	e7db      	b.n	8003430 <__ssputs_r+0x58>
 8003478:	462a      	mov	r2, r5
 800347a:	f000 fb6f 	bl	8003b5c <_realloc_r>
 800347e:	4606      	mov	r6, r0
 8003480:	2800      	cmp	r0, #0
 8003482:	d1e1      	bne.n	8003448 <__ssputs_r+0x70>
 8003484:	6921      	ldr	r1, [r4, #16]
 8003486:	4650      	mov	r0, sl
 8003488:	f000 fabe 	bl	8003a08 <_free_r>
 800348c:	e7c7      	b.n	800341e <__ssputs_r+0x46>
	...

08003490 <_svfiprintf_r>:
 8003490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003494:	4698      	mov	r8, r3
 8003496:	898b      	ldrh	r3, [r1, #12]
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	b09d      	sub	sp, #116	; 0x74
 800349c:	4607      	mov	r7, r0
 800349e:	460d      	mov	r5, r1
 80034a0:	4614      	mov	r4, r2
 80034a2:	d50e      	bpl.n	80034c2 <_svfiprintf_r+0x32>
 80034a4:	690b      	ldr	r3, [r1, #16]
 80034a6:	b963      	cbnz	r3, 80034c2 <_svfiprintf_r+0x32>
 80034a8:	2140      	movs	r1, #64	; 0x40
 80034aa:	f000 fafd 	bl	8003aa8 <_malloc_r>
 80034ae:	6028      	str	r0, [r5, #0]
 80034b0:	6128      	str	r0, [r5, #16]
 80034b2:	b920      	cbnz	r0, 80034be <_svfiprintf_r+0x2e>
 80034b4:	230c      	movs	r3, #12
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034bc:	e0d1      	b.n	8003662 <_svfiprintf_r+0x1d2>
 80034be:	2340      	movs	r3, #64	; 0x40
 80034c0:	616b      	str	r3, [r5, #20]
 80034c2:	2300      	movs	r3, #0
 80034c4:	9309      	str	r3, [sp, #36]	; 0x24
 80034c6:	2320      	movs	r3, #32
 80034c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80034d0:	2330      	movs	r3, #48	; 0x30
 80034d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800367c <_svfiprintf_r+0x1ec>
 80034d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034da:	f04f 0901 	mov.w	r9, #1
 80034de:	4623      	mov	r3, r4
 80034e0:	469a      	mov	sl, r3
 80034e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034e6:	b10a      	cbz	r2, 80034ec <_svfiprintf_r+0x5c>
 80034e8:	2a25      	cmp	r2, #37	; 0x25
 80034ea:	d1f9      	bne.n	80034e0 <_svfiprintf_r+0x50>
 80034ec:	ebba 0b04 	subs.w	fp, sl, r4
 80034f0:	d00b      	beq.n	800350a <_svfiprintf_r+0x7a>
 80034f2:	465b      	mov	r3, fp
 80034f4:	4622      	mov	r2, r4
 80034f6:	4629      	mov	r1, r5
 80034f8:	4638      	mov	r0, r7
 80034fa:	f7ff ff6d 	bl	80033d8 <__ssputs_r>
 80034fe:	3001      	adds	r0, #1
 8003500:	f000 80aa 	beq.w	8003658 <_svfiprintf_r+0x1c8>
 8003504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003506:	445a      	add	r2, fp
 8003508:	9209      	str	r2, [sp, #36]	; 0x24
 800350a:	f89a 3000 	ldrb.w	r3, [sl]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80a2 	beq.w	8003658 <_svfiprintf_r+0x1c8>
 8003514:	2300      	movs	r3, #0
 8003516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800351a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800351e:	f10a 0a01 	add.w	sl, sl, #1
 8003522:	9304      	str	r3, [sp, #16]
 8003524:	9307      	str	r3, [sp, #28]
 8003526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800352a:	931a      	str	r3, [sp, #104]	; 0x68
 800352c:	4654      	mov	r4, sl
 800352e:	2205      	movs	r2, #5
 8003530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003534:	4851      	ldr	r0, [pc, #324]	; (800367c <_svfiprintf_r+0x1ec>)
 8003536:	f7fc fe53 	bl	80001e0 <memchr>
 800353a:	9a04      	ldr	r2, [sp, #16]
 800353c:	b9d8      	cbnz	r0, 8003576 <_svfiprintf_r+0xe6>
 800353e:	06d0      	lsls	r0, r2, #27
 8003540:	bf44      	itt	mi
 8003542:	2320      	movmi	r3, #32
 8003544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003548:	0711      	lsls	r1, r2, #28
 800354a:	bf44      	itt	mi
 800354c:	232b      	movmi	r3, #43	; 0x2b
 800354e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003552:	f89a 3000 	ldrb.w	r3, [sl]
 8003556:	2b2a      	cmp	r3, #42	; 0x2a
 8003558:	d015      	beq.n	8003586 <_svfiprintf_r+0xf6>
 800355a:	9a07      	ldr	r2, [sp, #28]
 800355c:	4654      	mov	r4, sl
 800355e:	2000      	movs	r0, #0
 8003560:	f04f 0c0a 	mov.w	ip, #10
 8003564:	4621      	mov	r1, r4
 8003566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800356a:	3b30      	subs	r3, #48	; 0x30
 800356c:	2b09      	cmp	r3, #9
 800356e:	d94e      	bls.n	800360e <_svfiprintf_r+0x17e>
 8003570:	b1b0      	cbz	r0, 80035a0 <_svfiprintf_r+0x110>
 8003572:	9207      	str	r2, [sp, #28]
 8003574:	e014      	b.n	80035a0 <_svfiprintf_r+0x110>
 8003576:	eba0 0308 	sub.w	r3, r0, r8
 800357a:	fa09 f303 	lsl.w	r3, r9, r3
 800357e:	4313      	orrs	r3, r2
 8003580:	9304      	str	r3, [sp, #16]
 8003582:	46a2      	mov	sl, r4
 8003584:	e7d2      	b.n	800352c <_svfiprintf_r+0x9c>
 8003586:	9b03      	ldr	r3, [sp, #12]
 8003588:	1d19      	adds	r1, r3, #4
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	9103      	str	r1, [sp, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	bfbb      	ittet	lt
 8003592:	425b      	neglt	r3, r3
 8003594:	f042 0202 	orrlt.w	r2, r2, #2
 8003598:	9307      	strge	r3, [sp, #28]
 800359a:	9307      	strlt	r3, [sp, #28]
 800359c:	bfb8      	it	lt
 800359e:	9204      	strlt	r2, [sp, #16]
 80035a0:	7823      	ldrb	r3, [r4, #0]
 80035a2:	2b2e      	cmp	r3, #46	; 0x2e
 80035a4:	d10c      	bne.n	80035c0 <_svfiprintf_r+0x130>
 80035a6:	7863      	ldrb	r3, [r4, #1]
 80035a8:	2b2a      	cmp	r3, #42	; 0x2a
 80035aa:	d135      	bne.n	8003618 <_svfiprintf_r+0x188>
 80035ac:	9b03      	ldr	r3, [sp, #12]
 80035ae:	1d1a      	adds	r2, r3, #4
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	9203      	str	r2, [sp, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bfb8      	it	lt
 80035b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80035bc:	3402      	adds	r4, #2
 80035be:	9305      	str	r3, [sp, #20]
 80035c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800368c <_svfiprintf_r+0x1fc>
 80035c4:	7821      	ldrb	r1, [r4, #0]
 80035c6:	2203      	movs	r2, #3
 80035c8:	4650      	mov	r0, sl
 80035ca:	f7fc fe09 	bl	80001e0 <memchr>
 80035ce:	b140      	cbz	r0, 80035e2 <_svfiprintf_r+0x152>
 80035d0:	2340      	movs	r3, #64	; 0x40
 80035d2:	eba0 000a 	sub.w	r0, r0, sl
 80035d6:	fa03 f000 	lsl.w	r0, r3, r0
 80035da:	9b04      	ldr	r3, [sp, #16]
 80035dc:	4303      	orrs	r3, r0
 80035de:	3401      	adds	r4, #1
 80035e0:	9304      	str	r3, [sp, #16]
 80035e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035e6:	4826      	ldr	r0, [pc, #152]	; (8003680 <_svfiprintf_r+0x1f0>)
 80035e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035ec:	2206      	movs	r2, #6
 80035ee:	f7fc fdf7 	bl	80001e0 <memchr>
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d038      	beq.n	8003668 <_svfiprintf_r+0x1d8>
 80035f6:	4b23      	ldr	r3, [pc, #140]	; (8003684 <_svfiprintf_r+0x1f4>)
 80035f8:	bb1b      	cbnz	r3, 8003642 <_svfiprintf_r+0x1b2>
 80035fa:	9b03      	ldr	r3, [sp, #12]
 80035fc:	3307      	adds	r3, #7
 80035fe:	f023 0307 	bic.w	r3, r3, #7
 8003602:	3308      	adds	r3, #8
 8003604:	9303      	str	r3, [sp, #12]
 8003606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003608:	4433      	add	r3, r6
 800360a:	9309      	str	r3, [sp, #36]	; 0x24
 800360c:	e767      	b.n	80034de <_svfiprintf_r+0x4e>
 800360e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003612:	460c      	mov	r4, r1
 8003614:	2001      	movs	r0, #1
 8003616:	e7a5      	b.n	8003564 <_svfiprintf_r+0xd4>
 8003618:	2300      	movs	r3, #0
 800361a:	3401      	adds	r4, #1
 800361c:	9305      	str	r3, [sp, #20]
 800361e:	4619      	mov	r1, r3
 8003620:	f04f 0c0a 	mov.w	ip, #10
 8003624:	4620      	mov	r0, r4
 8003626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800362a:	3a30      	subs	r2, #48	; 0x30
 800362c:	2a09      	cmp	r2, #9
 800362e:	d903      	bls.n	8003638 <_svfiprintf_r+0x1a8>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0c5      	beq.n	80035c0 <_svfiprintf_r+0x130>
 8003634:	9105      	str	r1, [sp, #20]
 8003636:	e7c3      	b.n	80035c0 <_svfiprintf_r+0x130>
 8003638:	fb0c 2101 	mla	r1, ip, r1, r2
 800363c:	4604      	mov	r4, r0
 800363e:	2301      	movs	r3, #1
 8003640:	e7f0      	b.n	8003624 <_svfiprintf_r+0x194>
 8003642:	ab03      	add	r3, sp, #12
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	462a      	mov	r2, r5
 8003648:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <_svfiprintf_r+0x1f8>)
 800364a:	a904      	add	r1, sp, #16
 800364c:	4638      	mov	r0, r7
 800364e:	f3af 8000 	nop.w
 8003652:	1c42      	adds	r2, r0, #1
 8003654:	4606      	mov	r6, r0
 8003656:	d1d6      	bne.n	8003606 <_svfiprintf_r+0x176>
 8003658:	89ab      	ldrh	r3, [r5, #12]
 800365a:	065b      	lsls	r3, r3, #25
 800365c:	f53f af2c 	bmi.w	80034b8 <_svfiprintf_r+0x28>
 8003660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003662:	b01d      	add	sp, #116	; 0x74
 8003664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003668:	ab03      	add	r3, sp, #12
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	462a      	mov	r2, r5
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <_svfiprintf_r+0x1f8>)
 8003670:	a904      	add	r1, sp, #16
 8003672:	4638      	mov	r0, r7
 8003674:	f000 f87a 	bl	800376c <_printf_i>
 8003678:	e7eb      	b.n	8003652 <_svfiprintf_r+0x1c2>
 800367a:	bf00      	nop
 800367c:	08003c84 	.word	0x08003c84
 8003680:	08003c8e 	.word	0x08003c8e
 8003684:	00000000 	.word	0x00000000
 8003688:	080033d9 	.word	0x080033d9
 800368c:	08003c8a 	.word	0x08003c8a

08003690 <_printf_common>:
 8003690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003694:	4616      	mov	r6, r2
 8003696:	4699      	mov	r9, r3
 8003698:	688a      	ldr	r2, [r1, #8]
 800369a:	690b      	ldr	r3, [r1, #16]
 800369c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036a0:	4293      	cmp	r3, r2
 80036a2:	bfb8      	it	lt
 80036a4:	4613      	movlt	r3, r2
 80036a6:	6033      	str	r3, [r6, #0]
 80036a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036ac:	4607      	mov	r7, r0
 80036ae:	460c      	mov	r4, r1
 80036b0:	b10a      	cbz	r2, 80036b6 <_printf_common+0x26>
 80036b2:	3301      	adds	r3, #1
 80036b4:	6033      	str	r3, [r6, #0]
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	0699      	lsls	r1, r3, #26
 80036ba:	bf42      	ittt	mi
 80036bc:	6833      	ldrmi	r3, [r6, #0]
 80036be:	3302      	addmi	r3, #2
 80036c0:	6033      	strmi	r3, [r6, #0]
 80036c2:	6825      	ldr	r5, [r4, #0]
 80036c4:	f015 0506 	ands.w	r5, r5, #6
 80036c8:	d106      	bne.n	80036d8 <_printf_common+0x48>
 80036ca:	f104 0a19 	add.w	sl, r4, #25
 80036ce:	68e3      	ldr	r3, [r4, #12]
 80036d0:	6832      	ldr	r2, [r6, #0]
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	42ab      	cmp	r3, r5
 80036d6:	dc26      	bgt.n	8003726 <_printf_common+0x96>
 80036d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036dc:	1e13      	subs	r3, r2, #0
 80036de:	6822      	ldr	r2, [r4, #0]
 80036e0:	bf18      	it	ne
 80036e2:	2301      	movne	r3, #1
 80036e4:	0692      	lsls	r2, r2, #26
 80036e6:	d42b      	bmi.n	8003740 <_printf_common+0xb0>
 80036e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ec:	4649      	mov	r1, r9
 80036ee:	4638      	mov	r0, r7
 80036f0:	47c0      	blx	r8
 80036f2:	3001      	adds	r0, #1
 80036f4:	d01e      	beq.n	8003734 <_printf_common+0xa4>
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	68e5      	ldr	r5, [r4, #12]
 80036fa:	6832      	ldr	r2, [r6, #0]
 80036fc:	f003 0306 	and.w	r3, r3, #6
 8003700:	2b04      	cmp	r3, #4
 8003702:	bf08      	it	eq
 8003704:	1aad      	subeq	r5, r5, r2
 8003706:	68a3      	ldr	r3, [r4, #8]
 8003708:	6922      	ldr	r2, [r4, #16]
 800370a:	bf0c      	ite	eq
 800370c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003710:	2500      	movne	r5, #0
 8003712:	4293      	cmp	r3, r2
 8003714:	bfc4      	itt	gt
 8003716:	1a9b      	subgt	r3, r3, r2
 8003718:	18ed      	addgt	r5, r5, r3
 800371a:	2600      	movs	r6, #0
 800371c:	341a      	adds	r4, #26
 800371e:	42b5      	cmp	r5, r6
 8003720:	d11a      	bne.n	8003758 <_printf_common+0xc8>
 8003722:	2000      	movs	r0, #0
 8003724:	e008      	b.n	8003738 <_printf_common+0xa8>
 8003726:	2301      	movs	r3, #1
 8003728:	4652      	mov	r2, sl
 800372a:	4649      	mov	r1, r9
 800372c:	4638      	mov	r0, r7
 800372e:	47c0      	blx	r8
 8003730:	3001      	adds	r0, #1
 8003732:	d103      	bne.n	800373c <_printf_common+0xac>
 8003734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800373c:	3501      	adds	r5, #1
 800373e:	e7c6      	b.n	80036ce <_printf_common+0x3e>
 8003740:	18e1      	adds	r1, r4, r3
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	2030      	movs	r0, #48	; 0x30
 8003746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800374a:	4422      	add	r2, r4
 800374c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003754:	3302      	adds	r3, #2
 8003756:	e7c7      	b.n	80036e8 <_printf_common+0x58>
 8003758:	2301      	movs	r3, #1
 800375a:	4622      	mov	r2, r4
 800375c:	4649      	mov	r1, r9
 800375e:	4638      	mov	r0, r7
 8003760:	47c0      	blx	r8
 8003762:	3001      	adds	r0, #1
 8003764:	d0e6      	beq.n	8003734 <_printf_common+0xa4>
 8003766:	3601      	adds	r6, #1
 8003768:	e7d9      	b.n	800371e <_printf_common+0x8e>
	...

0800376c <_printf_i>:
 800376c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003770:	460c      	mov	r4, r1
 8003772:	4691      	mov	r9, r2
 8003774:	7e27      	ldrb	r7, [r4, #24]
 8003776:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003778:	2f78      	cmp	r7, #120	; 0x78
 800377a:	4680      	mov	r8, r0
 800377c:	469a      	mov	sl, r3
 800377e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003782:	d807      	bhi.n	8003794 <_printf_i+0x28>
 8003784:	2f62      	cmp	r7, #98	; 0x62
 8003786:	d80a      	bhi.n	800379e <_printf_i+0x32>
 8003788:	2f00      	cmp	r7, #0
 800378a:	f000 80d8 	beq.w	800393e <_printf_i+0x1d2>
 800378e:	2f58      	cmp	r7, #88	; 0x58
 8003790:	f000 80a3 	beq.w	80038da <_printf_i+0x16e>
 8003794:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800379c:	e03a      	b.n	8003814 <_printf_i+0xa8>
 800379e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037a2:	2b15      	cmp	r3, #21
 80037a4:	d8f6      	bhi.n	8003794 <_printf_i+0x28>
 80037a6:	a001      	add	r0, pc, #4	; (adr r0, 80037ac <_printf_i+0x40>)
 80037a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80037ac:	08003805 	.word	0x08003805
 80037b0:	08003819 	.word	0x08003819
 80037b4:	08003795 	.word	0x08003795
 80037b8:	08003795 	.word	0x08003795
 80037bc:	08003795 	.word	0x08003795
 80037c0:	08003795 	.word	0x08003795
 80037c4:	08003819 	.word	0x08003819
 80037c8:	08003795 	.word	0x08003795
 80037cc:	08003795 	.word	0x08003795
 80037d0:	08003795 	.word	0x08003795
 80037d4:	08003795 	.word	0x08003795
 80037d8:	08003925 	.word	0x08003925
 80037dc:	08003849 	.word	0x08003849
 80037e0:	08003907 	.word	0x08003907
 80037e4:	08003795 	.word	0x08003795
 80037e8:	08003795 	.word	0x08003795
 80037ec:	08003947 	.word	0x08003947
 80037f0:	08003795 	.word	0x08003795
 80037f4:	08003849 	.word	0x08003849
 80037f8:	08003795 	.word	0x08003795
 80037fc:	08003795 	.word	0x08003795
 8003800:	0800390f 	.word	0x0800390f
 8003804:	680b      	ldr	r3, [r1, #0]
 8003806:	1d1a      	adds	r2, r3, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	600a      	str	r2, [r1, #0]
 800380c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003814:	2301      	movs	r3, #1
 8003816:	e0a3      	b.n	8003960 <_printf_i+0x1f4>
 8003818:	6825      	ldr	r5, [r4, #0]
 800381a:	6808      	ldr	r0, [r1, #0]
 800381c:	062e      	lsls	r6, r5, #24
 800381e:	f100 0304 	add.w	r3, r0, #4
 8003822:	d50a      	bpl.n	800383a <_printf_i+0xce>
 8003824:	6805      	ldr	r5, [r0, #0]
 8003826:	600b      	str	r3, [r1, #0]
 8003828:	2d00      	cmp	r5, #0
 800382a:	da03      	bge.n	8003834 <_printf_i+0xc8>
 800382c:	232d      	movs	r3, #45	; 0x2d
 800382e:	426d      	negs	r5, r5
 8003830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003834:	485e      	ldr	r0, [pc, #376]	; (80039b0 <_printf_i+0x244>)
 8003836:	230a      	movs	r3, #10
 8003838:	e019      	b.n	800386e <_printf_i+0x102>
 800383a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800383e:	6805      	ldr	r5, [r0, #0]
 8003840:	600b      	str	r3, [r1, #0]
 8003842:	bf18      	it	ne
 8003844:	b22d      	sxthne	r5, r5
 8003846:	e7ef      	b.n	8003828 <_printf_i+0xbc>
 8003848:	680b      	ldr	r3, [r1, #0]
 800384a:	6825      	ldr	r5, [r4, #0]
 800384c:	1d18      	adds	r0, r3, #4
 800384e:	6008      	str	r0, [r1, #0]
 8003850:	0628      	lsls	r0, r5, #24
 8003852:	d501      	bpl.n	8003858 <_printf_i+0xec>
 8003854:	681d      	ldr	r5, [r3, #0]
 8003856:	e002      	b.n	800385e <_printf_i+0xf2>
 8003858:	0669      	lsls	r1, r5, #25
 800385a:	d5fb      	bpl.n	8003854 <_printf_i+0xe8>
 800385c:	881d      	ldrh	r5, [r3, #0]
 800385e:	4854      	ldr	r0, [pc, #336]	; (80039b0 <_printf_i+0x244>)
 8003860:	2f6f      	cmp	r7, #111	; 0x6f
 8003862:	bf0c      	ite	eq
 8003864:	2308      	moveq	r3, #8
 8003866:	230a      	movne	r3, #10
 8003868:	2100      	movs	r1, #0
 800386a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800386e:	6866      	ldr	r6, [r4, #4]
 8003870:	60a6      	str	r6, [r4, #8]
 8003872:	2e00      	cmp	r6, #0
 8003874:	bfa2      	ittt	ge
 8003876:	6821      	ldrge	r1, [r4, #0]
 8003878:	f021 0104 	bicge.w	r1, r1, #4
 800387c:	6021      	strge	r1, [r4, #0]
 800387e:	b90d      	cbnz	r5, 8003884 <_printf_i+0x118>
 8003880:	2e00      	cmp	r6, #0
 8003882:	d04d      	beq.n	8003920 <_printf_i+0x1b4>
 8003884:	4616      	mov	r6, r2
 8003886:	fbb5 f1f3 	udiv	r1, r5, r3
 800388a:	fb03 5711 	mls	r7, r3, r1, r5
 800388e:	5dc7      	ldrb	r7, [r0, r7]
 8003890:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003894:	462f      	mov	r7, r5
 8003896:	42bb      	cmp	r3, r7
 8003898:	460d      	mov	r5, r1
 800389a:	d9f4      	bls.n	8003886 <_printf_i+0x11a>
 800389c:	2b08      	cmp	r3, #8
 800389e:	d10b      	bne.n	80038b8 <_printf_i+0x14c>
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	07df      	lsls	r7, r3, #31
 80038a4:	d508      	bpl.n	80038b8 <_printf_i+0x14c>
 80038a6:	6923      	ldr	r3, [r4, #16]
 80038a8:	6861      	ldr	r1, [r4, #4]
 80038aa:	4299      	cmp	r1, r3
 80038ac:	bfde      	ittt	le
 80038ae:	2330      	movle	r3, #48	; 0x30
 80038b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038b4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80038b8:	1b92      	subs	r2, r2, r6
 80038ba:	6122      	str	r2, [r4, #16]
 80038bc:	f8cd a000 	str.w	sl, [sp]
 80038c0:	464b      	mov	r3, r9
 80038c2:	aa03      	add	r2, sp, #12
 80038c4:	4621      	mov	r1, r4
 80038c6:	4640      	mov	r0, r8
 80038c8:	f7ff fee2 	bl	8003690 <_printf_common>
 80038cc:	3001      	adds	r0, #1
 80038ce:	d14c      	bne.n	800396a <_printf_i+0x1fe>
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038d4:	b004      	add	sp, #16
 80038d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038da:	4835      	ldr	r0, [pc, #212]	; (80039b0 <_printf_i+0x244>)
 80038dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	680e      	ldr	r6, [r1, #0]
 80038e4:	061f      	lsls	r7, r3, #24
 80038e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80038ea:	600e      	str	r6, [r1, #0]
 80038ec:	d514      	bpl.n	8003918 <_printf_i+0x1ac>
 80038ee:	07d9      	lsls	r1, r3, #31
 80038f0:	bf44      	itt	mi
 80038f2:	f043 0320 	orrmi.w	r3, r3, #32
 80038f6:	6023      	strmi	r3, [r4, #0]
 80038f8:	b91d      	cbnz	r5, 8003902 <_printf_i+0x196>
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	f023 0320 	bic.w	r3, r3, #32
 8003900:	6023      	str	r3, [r4, #0]
 8003902:	2310      	movs	r3, #16
 8003904:	e7b0      	b.n	8003868 <_printf_i+0xfc>
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	f043 0320 	orr.w	r3, r3, #32
 800390c:	6023      	str	r3, [r4, #0]
 800390e:	2378      	movs	r3, #120	; 0x78
 8003910:	4828      	ldr	r0, [pc, #160]	; (80039b4 <_printf_i+0x248>)
 8003912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003916:	e7e3      	b.n	80038e0 <_printf_i+0x174>
 8003918:	065e      	lsls	r6, r3, #25
 800391a:	bf48      	it	mi
 800391c:	b2ad      	uxthmi	r5, r5
 800391e:	e7e6      	b.n	80038ee <_printf_i+0x182>
 8003920:	4616      	mov	r6, r2
 8003922:	e7bb      	b.n	800389c <_printf_i+0x130>
 8003924:	680b      	ldr	r3, [r1, #0]
 8003926:	6826      	ldr	r6, [r4, #0]
 8003928:	6960      	ldr	r0, [r4, #20]
 800392a:	1d1d      	adds	r5, r3, #4
 800392c:	600d      	str	r5, [r1, #0]
 800392e:	0635      	lsls	r5, r6, #24
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	d501      	bpl.n	8003938 <_printf_i+0x1cc>
 8003934:	6018      	str	r0, [r3, #0]
 8003936:	e002      	b.n	800393e <_printf_i+0x1d2>
 8003938:	0671      	lsls	r1, r6, #25
 800393a:	d5fb      	bpl.n	8003934 <_printf_i+0x1c8>
 800393c:	8018      	strh	r0, [r3, #0]
 800393e:	2300      	movs	r3, #0
 8003940:	6123      	str	r3, [r4, #16]
 8003942:	4616      	mov	r6, r2
 8003944:	e7ba      	b.n	80038bc <_printf_i+0x150>
 8003946:	680b      	ldr	r3, [r1, #0]
 8003948:	1d1a      	adds	r2, r3, #4
 800394a:	600a      	str	r2, [r1, #0]
 800394c:	681e      	ldr	r6, [r3, #0]
 800394e:	6862      	ldr	r2, [r4, #4]
 8003950:	2100      	movs	r1, #0
 8003952:	4630      	mov	r0, r6
 8003954:	f7fc fc44 	bl	80001e0 <memchr>
 8003958:	b108      	cbz	r0, 800395e <_printf_i+0x1f2>
 800395a:	1b80      	subs	r0, r0, r6
 800395c:	6060      	str	r0, [r4, #4]
 800395e:	6863      	ldr	r3, [r4, #4]
 8003960:	6123      	str	r3, [r4, #16]
 8003962:	2300      	movs	r3, #0
 8003964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003968:	e7a8      	b.n	80038bc <_printf_i+0x150>
 800396a:	6923      	ldr	r3, [r4, #16]
 800396c:	4632      	mov	r2, r6
 800396e:	4649      	mov	r1, r9
 8003970:	4640      	mov	r0, r8
 8003972:	47d0      	blx	sl
 8003974:	3001      	adds	r0, #1
 8003976:	d0ab      	beq.n	80038d0 <_printf_i+0x164>
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	079b      	lsls	r3, r3, #30
 800397c:	d413      	bmi.n	80039a6 <_printf_i+0x23a>
 800397e:	68e0      	ldr	r0, [r4, #12]
 8003980:	9b03      	ldr	r3, [sp, #12]
 8003982:	4298      	cmp	r0, r3
 8003984:	bfb8      	it	lt
 8003986:	4618      	movlt	r0, r3
 8003988:	e7a4      	b.n	80038d4 <_printf_i+0x168>
 800398a:	2301      	movs	r3, #1
 800398c:	4632      	mov	r2, r6
 800398e:	4649      	mov	r1, r9
 8003990:	4640      	mov	r0, r8
 8003992:	47d0      	blx	sl
 8003994:	3001      	adds	r0, #1
 8003996:	d09b      	beq.n	80038d0 <_printf_i+0x164>
 8003998:	3501      	adds	r5, #1
 800399a:	68e3      	ldr	r3, [r4, #12]
 800399c:	9903      	ldr	r1, [sp, #12]
 800399e:	1a5b      	subs	r3, r3, r1
 80039a0:	42ab      	cmp	r3, r5
 80039a2:	dcf2      	bgt.n	800398a <_printf_i+0x21e>
 80039a4:	e7eb      	b.n	800397e <_printf_i+0x212>
 80039a6:	2500      	movs	r5, #0
 80039a8:	f104 0619 	add.w	r6, r4, #25
 80039ac:	e7f5      	b.n	800399a <_printf_i+0x22e>
 80039ae:	bf00      	nop
 80039b0:	08003c95 	.word	0x08003c95
 80039b4:	08003ca6 	.word	0x08003ca6

080039b8 <memcpy>:
 80039b8:	440a      	add	r2, r1
 80039ba:	4291      	cmp	r1, r2
 80039bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80039c0:	d100      	bne.n	80039c4 <memcpy+0xc>
 80039c2:	4770      	bx	lr
 80039c4:	b510      	push	{r4, lr}
 80039c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039ce:	4291      	cmp	r1, r2
 80039d0:	d1f9      	bne.n	80039c6 <memcpy+0xe>
 80039d2:	bd10      	pop	{r4, pc}

080039d4 <memmove>:
 80039d4:	4288      	cmp	r0, r1
 80039d6:	b510      	push	{r4, lr}
 80039d8:	eb01 0402 	add.w	r4, r1, r2
 80039dc:	d902      	bls.n	80039e4 <memmove+0x10>
 80039de:	4284      	cmp	r4, r0
 80039e0:	4623      	mov	r3, r4
 80039e2:	d807      	bhi.n	80039f4 <memmove+0x20>
 80039e4:	1e43      	subs	r3, r0, #1
 80039e6:	42a1      	cmp	r1, r4
 80039e8:	d008      	beq.n	80039fc <memmove+0x28>
 80039ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039f2:	e7f8      	b.n	80039e6 <memmove+0x12>
 80039f4:	4402      	add	r2, r0
 80039f6:	4601      	mov	r1, r0
 80039f8:	428a      	cmp	r2, r1
 80039fa:	d100      	bne.n	80039fe <memmove+0x2a>
 80039fc:	bd10      	pop	{r4, pc}
 80039fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a06:	e7f7      	b.n	80039f8 <memmove+0x24>

08003a08 <_free_r>:
 8003a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a0a:	2900      	cmp	r1, #0
 8003a0c:	d048      	beq.n	8003aa0 <_free_r+0x98>
 8003a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a12:	9001      	str	r0, [sp, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f1a1 0404 	sub.w	r4, r1, #4
 8003a1a:	bfb8      	it	lt
 8003a1c:	18e4      	addlt	r4, r4, r3
 8003a1e:	f000 f8d3 	bl	8003bc8 <__malloc_lock>
 8003a22:	4a20      	ldr	r2, [pc, #128]	; (8003aa4 <_free_r+0x9c>)
 8003a24:	9801      	ldr	r0, [sp, #4]
 8003a26:	6813      	ldr	r3, [r2, #0]
 8003a28:	4615      	mov	r5, r2
 8003a2a:	b933      	cbnz	r3, 8003a3a <_free_r+0x32>
 8003a2c:	6063      	str	r3, [r4, #4]
 8003a2e:	6014      	str	r4, [r2, #0]
 8003a30:	b003      	add	sp, #12
 8003a32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a36:	f000 b8cd 	b.w	8003bd4 <__malloc_unlock>
 8003a3a:	42a3      	cmp	r3, r4
 8003a3c:	d90b      	bls.n	8003a56 <_free_r+0x4e>
 8003a3e:	6821      	ldr	r1, [r4, #0]
 8003a40:	1862      	adds	r2, r4, r1
 8003a42:	4293      	cmp	r3, r2
 8003a44:	bf04      	itt	eq
 8003a46:	681a      	ldreq	r2, [r3, #0]
 8003a48:	685b      	ldreq	r3, [r3, #4]
 8003a4a:	6063      	str	r3, [r4, #4]
 8003a4c:	bf04      	itt	eq
 8003a4e:	1852      	addeq	r2, r2, r1
 8003a50:	6022      	streq	r2, [r4, #0]
 8003a52:	602c      	str	r4, [r5, #0]
 8003a54:	e7ec      	b.n	8003a30 <_free_r+0x28>
 8003a56:	461a      	mov	r2, r3
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	b10b      	cbz	r3, 8003a60 <_free_r+0x58>
 8003a5c:	42a3      	cmp	r3, r4
 8003a5e:	d9fa      	bls.n	8003a56 <_free_r+0x4e>
 8003a60:	6811      	ldr	r1, [r2, #0]
 8003a62:	1855      	adds	r5, r2, r1
 8003a64:	42a5      	cmp	r5, r4
 8003a66:	d10b      	bne.n	8003a80 <_free_r+0x78>
 8003a68:	6824      	ldr	r4, [r4, #0]
 8003a6a:	4421      	add	r1, r4
 8003a6c:	1854      	adds	r4, r2, r1
 8003a6e:	42a3      	cmp	r3, r4
 8003a70:	6011      	str	r1, [r2, #0]
 8003a72:	d1dd      	bne.n	8003a30 <_free_r+0x28>
 8003a74:	681c      	ldr	r4, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	6053      	str	r3, [r2, #4]
 8003a7a:	4421      	add	r1, r4
 8003a7c:	6011      	str	r1, [r2, #0]
 8003a7e:	e7d7      	b.n	8003a30 <_free_r+0x28>
 8003a80:	d902      	bls.n	8003a88 <_free_r+0x80>
 8003a82:	230c      	movs	r3, #12
 8003a84:	6003      	str	r3, [r0, #0]
 8003a86:	e7d3      	b.n	8003a30 <_free_r+0x28>
 8003a88:	6825      	ldr	r5, [r4, #0]
 8003a8a:	1961      	adds	r1, r4, r5
 8003a8c:	428b      	cmp	r3, r1
 8003a8e:	bf04      	itt	eq
 8003a90:	6819      	ldreq	r1, [r3, #0]
 8003a92:	685b      	ldreq	r3, [r3, #4]
 8003a94:	6063      	str	r3, [r4, #4]
 8003a96:	bf04      	itt	eq
 8003a98:	1949      	addeq	r1, r1, r5
 8003a9a:	6021      	streq	r1, [r4, #0]
 8003a9c:	6054      	str	r4, [r2, #4]
 8003a9e:	e7c7      	b.n	8003a30 <_free_r+0x28>
 8003aa0:	b003      	add	sp, #12
 8003aa2:	bd30      	pop	{r4, r5, pc}
 8003aa4:	2000011c 	.word	0x2000011c

08003aa8 <_malloc_r>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	1ccd      	adds	r5, r1, #3
 8003aac:	f025 0503 	bic.w	r5, r5, #3
 8003ab0:	3508      	adds	r5, #8
 8003ab2:	2d0c      	cmp	r5, #12
 8003ab4:	bf38      	it	cc
 8003ab6:	250c      	movcc	r5, #12
 8003ab8:	2d00      	cmp	r5, #0
 8003aba:	4606      	mov	r6, r0
 8003abc:	db01      	blt.n	8003ac2 <_malloc_r+0x1a>
 8003abe:	42a9      	cmp	r1, r5
 8003ac0:	d903      	bls.n	8003aca <_malloc_r+0x22>
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	6033      	str	r3, [r6, #0]
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aca:	f000 f87d 	bl	8003bc8 <__malloc_lock>
 8003ace:	4921      	ldr	r1, [pc, #132]	; (8003b54 <_malloc_r+0xac>)
 8003ad0:	680a      	ldr	r2, [r1, #0]
 8003ad2:	4614      	mov	r4, r2
 8003ad4:	b99c      	cbnz	r4, 8003afe <_malloc_r+0x56>
 8003ad6:	4f20      	ldr	r7, [pc, #128]	; (8003b58 <_malloc_r+0xb0>)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	b923      	cbnz	r3, 8003ae6 <_malloc_r+0x3e>
 8003adc:	4621      	mov	r1, r4
 8003ade:	4630      	mov	r0, r6
 8003ae0:	f000 f862 	bl	8003ba8 <_sbrk_r>
 8003ae4:	6038      	str	r0, [r7, #0]
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f000 f85d 	bl	8003ba8 <_sbrk_r>
 8003aee:	1c43      	adds	r3, r0, #1
 8003af0:	d123      	bne.n	8003b3a <_malloc_r+0x92>
 8003af2:	230c      	movs	r3, #12
 8003af4:	6033      	str	r3, [r6, #0]
 8003af6:	4630      	mov	r0, r6
 8003af8:	f000 f86c 	bl	8003bd4 <__malloc_unlock>
 8003afc:	e7e3      	b.n	8003ac6 <_malloc_r+0x1e>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	1b5b      	subs	r3, r3, r5
 8003b02:	d417      	bmi.n	8003b34 <_malloc_r+0x8c>
 8003b04:	2b0b      	cmp	r3, #11
 8003b06:	d903      	bls.n	8003b10 <_malloc_r+0x68>
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	441c      	add	r4, r3
 8003b0c:	6025      	str	r5, [r4, #0]
 8003b0e:	e004      	b.n	8003b1a <_malloc_r+0x72>
 8003b10:	6863      	ldr	r3, [r4, #4]
 8003b12:	42a2      	cmp	r2, r4
 8003b14:	bf0c      	ite	eq
 8003b16:	600b      	streq	r3, [r1, #0]
 8003b18:	6053      	strne	r3, [r2, #4]
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	f000 f85a 	bl	8003bd4 <__malloc_unlock>
 8003b20:	f104 000b 	add.w	r0, r4, #11
 8003b24:	1d23      	adds	r3, r4, #4
 8003b26:	f020 0007 	bic.w	r0, r0, #7
 8003b2a:	1ac2      	subs	r2, r0, r3
 8003b2c:	d0cc      	beq.n	8003ac8 <_malloc_r+0x20>
 8003b2e:	1a1b      	subs	r3, r3, r0
 8003b30:	50a3      	str	r3, [r4, r2]
 8003b32:	e7c9      	b.n	8003ac8 <_malloc_r+0x20>
 8003b34:	4622      	mov	r2, r4
 8003b36:	6864      	ldr	r4, [r4, #4]
 8003b38:	e7cc      	b.n	8003ad4 <_malloc_r+0x2c>
 8003b3a:	1cc4      	adds	r4, r0, #3
 8003b3c:	f024 0403 	bic.w	r4, r4, #3
 8003b40:	42a0      	cmp	r0, r4
 8003b42:	d0e3      	beq.n	8003b0c <_malloc_r+0x64>
 8003b44:	1a21      	subs	r1, r4, r0
 8003b46:	4630      	mov	r0, r6
 8003b48:	f000 f82e 	bl	8003ba8 <_sbrk_r>
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	d1dd      	bne.n	8003b0c <_malloc_r+0x64>
 8003b50:	e7cf      	b.n	8003af2 <_malloc_r+0x4a>
 8003b52:	bf00      	nop
 8003b54:	2000011c 	.word	0x2000011c
 8003b58:	20000120 	.word	0x20000120

08003b5c <_realloc_r>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	4607      	mov	r7, r0
 8003b60:	4614      	mov	r4, r2
 8003b62:	460e      	mov	r6, r1
 8003b64:	b921      	cbnz	r1, 8003b70 <_realloc_r+0x14>
 8003b66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	f7ff bf9c 	b.w	8003aa8 <_malloc_r>
 8003b70:	b922      	cbnz	r2, 8003b7c <_realloc_r+0x20>
 8003b72:	f7ff ff49 	bl	8003a08 <_free_r>
 8003b76:	4625      	mov	r5, r4
 8003b78:	4628      	mov	r0, r5
 8003b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b7c:	f000 f830 	bl	8003be0 <_malloc_usable_size_r>
 8003b80:	42a0      	cmp	r0, r4
 8003b82:	d20f      	bcs.n	8003ba4 <_realloc_r+0x48>
 8003b84:	4621      	mov	r1, r4
 8003b86:	4638      	mov	r0, r7
 8003b88:	f7ff ff8e 	bl	8003aa8 <_malloc_r>
 8003b8c:	4605      	mov	r5, r0
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d0f2      	beq.n	8003b78 <_realloc_r+0x1c>
 8003b92:	4631      	mov	r1, r6
 8003b94:	4622      	mov	r2, r4
 8003b96:	f7ff ff0f 	bl	80039b8 <memcpy>
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	4638      	mov	r0, r7
 8003b9e:	f7ff ff33 	bl	8003a08 <_free_r>
 8003ba2:	e7e9      	b.n	8003b78 <_realloc_r+0x1c>
 8003ba4:	4635      	mov	r5, r6
 8003ba6:	e7e7      	b.n	8003b78 <_realloc_r+0x1c>

08003ba8 <_sbrk_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4d06      	ldr	r5, [pc, #24]	; (8003bc4 <_sbrk_r+0x1c>)
 8003bac:	2300      	movs	r3, #0
 8003bae:	4604      	mov	r4, r0
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	602b      	str	r3, [r5, #0]
 8003bb4:	f7fd f86e 	bl	8000c94 <_sbrk>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d102      	bne.n	8003bc2 <_sbrk_r+0x1a>
 8003bbc:	682b      	ldr	r3, [r5, #0]
 8003bbe:	b103      	cbz	r3, 8003bc2 <_sbrk_r+0x1a>
 8003bc0:	6023      	str	r3, [r4, #0]
 8003bc2:	bd38      	pop	{r3, r4, r5, pc}
 8003bc4:	200001a4 	.word	0x200001a4

08003bc8 <__malloc_lock>:
 8003bc8:	4801      	ldr	r0, [pc, #4]	; (8003bd0 <__malloc_lock+0x8>)
 8003bca:	f000 b811 	b.w	8003bf0 <__retarget_lock_acquire_recursive>
 8003bce:	bf00      	nop
 8003bd0:	200001ac 	.word	0x200001ac

08003bd4 <__malloc_unlock>:
 8003bd4:	4801      	ldr	r0, [pc, #4]	; (8003bdc <__malloc_unlock+0x8>)
 8003bd6:	f000 b80c 	b.w	8003bf2 <__retarget_lock_release_recursive>
 8003bda:	bf00      	nop
 8003bdc:	200001ac 	.word	0x200001ac

08003be0 <_malloc_usable_size_r>:
 8003be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003be4:	1f18      	subs	r0, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bfbc      	itt	lt
 8003bea:	580b      	ldrlt	r3, [r1, r0]
 8003bec:	18c0      	addlt	r0, r0, r3
 8003bee:	4770      	bx	lr

08003bf0 <__retarget_lock_acquire_recursive>:
 8003bf0:	4770      	bx	lr

08003bf2 <__retarget_lock_release_recursive>:
 8003bf2:	4770      	bx	lr

08003bf4 <_init>:
 8003bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf6:	bf00      	nop
 8003bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfa:	bc08      	pop	{r3}
 8003bfc:	469e      	mov	lr, r3
 8003bfe:	4770      	bx	lr

08003c00 <_fini>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	bf00      	nop
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr
