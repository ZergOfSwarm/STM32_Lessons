
GSM_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab4  08003ab4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ab4  08003ab4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ab4  08003ab4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ab8  08003ab8  00013ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000070  08003b2c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08003b2c  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c261  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e39  00000000  00000000  0002c2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002e138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  0002ecf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014a61  00000000  00000000  0002f7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b084  00000000  00000000  00044239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00072176  00000000  00000000  0004f2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c1433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a4  00000000  00000000  000c1488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080037cc 	.word	0x080037cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080037cc 	.word	0x080037cc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <replac_string>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart3;

///////////////////////// Функция для замены смволов \r и \n на пробелы ////////////////////////////
void replac_string(char *src)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(!src) return;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d013      	beq.n	8000192 <replac_string+0x36>

	for(;*src; src++)
 800016a:	e00d      	b.n	8000188 <replac_string+0x2c>
	{
		if(*src == '\n' || *src == '\r') *src = ' ';
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b0a      	cmp	r3, #10
 8000172:	d003      	beq.n	800017c <replac_string+0x20>
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	2b0d      	cmp	r3, #13
 800017a:	d102      	bne.n	8000182 <replac_string+0x26>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2220      	movs	r2, #32
 8000180:	701a      	strb	r2, [r3, #0]
	for(;*src; src++)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	3301      	adds	r3, #1
 8000186:	607b      	str	r3, [r7, #4]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d1ed      	bne.n	800016c <replac_string+0x10>
 8000190:	e000      	b.n	8000194 <replac_string+0x38>
	if(!src) return;
 8000192:	bf00      	nop
	}
}
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <set_comand>:

///////////////////////// Функция для отправки настроечных команд, в цикле лучше не использовать ////////////////////////////
void set_comand(char *buff)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b0ae      	sub	sp, #184	; 0xb8
 80001a0:	af02      	add	r7, sp, #8
 80001a2:	6078      	str	r0, [r7, #4]
	uint8_t count_err = 0;
 80001a4:	2300      	movs	r3, #0
 80001a6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	char str[SEND_STR_SIZE] = {0,};
 80001aa:	2300      	movs	r3, #0
 80001ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80001ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80001b2:	223c      	movs	r2, #60	; 0x3c
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f002 fe8e 	bl	8002ed8 <memset>
	snprintf(str, SEND_STR_SIZE, "%s\r\n", buff);
 80001bc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	4a88      	ldr	r2, [pc, #544]	; (80003e4 <set_comand+0x248>)
 80001c4:	2140      	movs	r1, #64	; 0x40
 80001c6:	f002 fe8f 	bl	8002ee8 <sniprintf>
	HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);
 80001ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80001ce:	4618      	mov	r0, r3
 80001d0:	f7ff ffbc 	bl	800014c <strlen>
 80001d4:	4603      	mov	r3, r0
 80001d6:	b29a      	uxth	r2, r3
 80001d8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	4881      	ldr	r0, [pc, #516]	; (80003e8 <set_comand+0x24c>)
 80001e2:	f002 fc92 	bl	8002b0a <HAL_UART_Transmit>
	HAL_Delay(200);
 80001e6:	20c8      	movs	r0, #200	; 0xc8
 80001e8:	f001 f9b6 	bl	8001558 <HAL_Delay>

	memset(str, 0, SEND_STR_SIZE);
 80001ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80001f0:	2240      	movs	r2, #64	; 0x40
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f002 fe6f 	bl	8002ed8 <memset>

	for(uint8_t i = 0; i < 30; i++)
 80001fa:	2300      	movs	r3, #0
 80001fc:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8000200:	e0c8      	b.n	8000394 <set_comand+0x1f8>
	{
		if(gsm_available()) //если модуль что-то прислал
 8000202:	f001 f895 	bl	8001330 <gsm_available>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	f000 80ba 	beq.w	8000382 <set_comand+0x1e6>
		{
			uint16_t i = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

			while(gsm_available())
 8000214:	e015      	b.n	8000242 <set_comand+0xa6>
			{
				str[i++] = gsm_read();
 8000216:	f001 f8a5 	bl	8001364 <gsm_read>
 800021a:	4603      	mov	r3, r0
 800021c:	4619      	mov	r1, r3
 800021e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	f8a7 20ac 	strh.w	r2, [r7, #172]	; 0xac
 8000228:	b2ca      	uxtb	r2, r1
 800022a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800022e:	440b      	add	r3, r1
 8000230:	f803 2c48 	strb.w	r2, [r3, #-72]
				if(i > SEND_STR_SIZE - 1) break;
 8000234:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8000238:	2b3f      	cmp	r3, #63	; 0x3f
 800023a:	d808      	bhi.n	800024e <set_comand+0xb2>
				HAL_Delay(1);
 800023c:	2001      	movs	r0, #1
 800023e:	f001 f98b 	bl	8001558 <HAL_Delay>
			while(gsm_available())
 8000242:	f001 f875 	bl	8001330 <gsm_available>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d1e4      	bne.n	8000216 <set_comand+0x7a>
 800024c:	e000      	b.n	8000250 <set_comand+0xb4>
				if(i > SEND_STR_SIZE - 1) break;
 800024e:	bf00      	nop
			}

			replac_string(str);
 8000250:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000254:	4618      	mov	r0, r3
 8000256:	f7ff ff81 	bl	800015c <replac_string>

			char *p = NULL;
 800025a:	2300      	movs	r3, #0
 800025c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

			if((p = strstr(str, "+CPAS:")) != NULL)
 8000260:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000264:	4961      	ldr	r1, [pc, #388]	; (80003ec <set_comand+0x250>)
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fe7f 	bl	8002f6a <strstr>
 800026c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8000270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000274:	2b00      	cmp	r3, #0
 8000276:	d029      	beq.n	80002cc <set_comand+0x130>
			{
				if(strstr(str, "0") == NULL)
 8000278:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800027c:	2130      	movs	r1, #48	; 0x30
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fe66 	bl	8002f50 <strchr>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d156      	bne.n	8000338 <set_comand+0x19c>
				{
					HAL_UART_Transmit(DEBUG, (uint8_t*)p, strlen(p), 1000);
 800028a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800028e:	f7ff ff5d 	bl	800014c <strlen>
 8000292:	4603      	mov	r3, r0
 8000294:	b29a      	uxth	r2, r3
 8000296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800029a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800029e:	4854      	ldr	r0, [pc, #336]	; (80003f0 <set_comand+0x254>)
 80002a0:	f002 fc33 	bl	8002b0a <HAL_UART_Transmit>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"\n+CPAS not ready, must be '0'\n", strlen("\n+CPAS not ready, must be '0'\n"), 1000);
 80002a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002a8:	221e      	movs	r2, #30
 80002aa:	4952      	ldr	r1, [pc, #328]	; (80003f4 <set_comand+0x258>)
 80002ac:	4850      	ldr	r0, [pc, #320]	; (80003f0 <set_comand+0x254>)
 80002ae:	f002 fc2c 	bl	8002b0a <HAL_UART_Transmit>

					while(1) // мигаем 5 секунд и ресетим плату
					{
						count_err++;
 80002b2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80002b6:	3301      	adds	r3, #1
 80002b8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
						HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
 80002bc:	2180      	movs	r1, #128	; 0x80
 80002be:	484e      	ldr	r0, [pc, #312]	; (80003f8 <set_comand+0x25c>)
 80002c0:	f001 fc18 	bl	8001af4 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 80002c4:	2064      	movs	r0, #100	; 0x64
 80002c6:	f001 f947 	bl	8001558 <HAL_Delay>
						count_err++;
 80002ca:	e7f2      	b.n	80002b2 <set_comand+0x116>
						//if(count_err > 49) HAL_NVIC_SystemReset();
					}
				}
			}
			else if((p = strstr(str, "+CREG:")) != NULL)
 80002cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80002d0:	494a      	ldr	r1, [pc, #296]	; (80003fc <set_comand+0x260>)
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fe49 	bl	8002f6a <strstr>
 80002d8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80002dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d029      	beq.n	8000338 <set_comand+0x19c>
			{
				if(strstr(str, "0,1") == NULL)
 80002e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80002e8:	4945      	ldr	r1, [pc, #276]	; (8000400 <set_comand+0x264>)
 80002ea:	4618      	mov	r0, r3
 80002ec:	f002 fe3d 	bl	8002f6a <strstr>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d120      	bne.n	8000338 <set_comand+0x19c>
				{
					HAL_UART_Transmit(DEBUG, (uint8_t*)p, strlen(p), 1000);
 80002f6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80002fa:	f7ff ff27 	bl	800014c <strlen>
 80002fe:	4603      	mov	r3, r0
 8000300:	b29a      	uxth	r2, r3
 8000302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000306:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800030a:	4839      	ldr	r0, [pc, #228]	; (80003f0 <set_comand+0x254>)
 800030c:	f002 fbfd 	bl	8002b0a <HAL_UART_Transmit>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"\n+CREG not ready, must be '0,1'\n", strlen("\n+CREG not ready, must be '0,1'\n"), 1000);
 8000310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000314:	2220      	movs	r2, #32
 8000316:	493b      	ldr	r1, [pc, #236]	; (8000404 <set_comand+0x268>)
 8000318:	4835      	ldr	r0, [pc, #212]	; (80003f0 <set_comand+0x254>)
 800031a:	f002 fbf6 	bl	8002b0a <HAL_UART_Transmit>

					while(1) // мигаем 5 секунд и ресетим плату
					{
						count_err++;
 800031e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000322:	3301      	adds	r3, #1
 8000324:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
						HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
 8000328:	2180      	movs	r1, #128	; 0x80
 800032a:	4833      	ldr	r0, [pc, #204]	; (80003f8 <set_comand+0x25c>)
 800032c:	f001 fbe2 	bl	8001af4 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 8000330:	2064      	movs	r0, #100	; 0x64
 8000332:	f001 f911 	bl	8001558 <HAL_Delay>
						count_err++;
 8000336:	e7f2      	b.n	800031e <set_comand+0x182>
					}
				}
			}


			p = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

			char dbg_str[SEND_STR_SIZE + 32] = {0,};
 800033e:	2300      	movs	r3, #0
 8000340:	60bb      	str	r3, [r7, #8]
 8000342:	f107 030c 	add.w	r3, r7, #12
 8000346:	225c      	movs	r2, #92	; 0x5c
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f002 fdc4 	bl	8002ed8 <memset>
			snprintf(dbg_str, SEND_STR_SIZE + 32, "Set %s %s\n", buff, str);
 8000350:	f107 0008 	add.w	r0, r7, #8
 8000354:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a2a      	ldr	r2, [pc, #168]	; (8000408 <set_comand+0x26c>)
 800035e:	2160      	movs	r1, #96	; 0x60
 8000360:	f002 fdc2 	bl	8002ee8 <sniprintf>
			HAL_UART_Transmit(DEBUG, (uint8_t*)dbg_str, strlen(dbg_str), 1000);
 8000364:	f107 0308 	add.w	r3, r7, #8
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff feef 	bl	800014c <strlen>
 800036e:	4603      	mov	r3, r0
 8000370:	b29a      	uxth	r2, r3
 8000372:	f107 0108 	add.w	r1, r7, #8
 8000376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037a:	481d      	ldr	r0, [pc, #116]	; (80003f0 <set_comand+0x254>)
 800037c:	f002 fbc5 	bl	8002b0a <HAL_UART_Transmit>

			return;
 8000380:	e02c      	b.n	80003dc <set_comand+0x240>
		}

		HAL_Delay(500);
 8000382:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000386:	f001 f8e7 	bl	8001558 <HAL_Delay>
	for(uint8_t i = 0; i < 30; i++)
 800038a:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800038e:	3301      	adds	r3, #1
 8000390:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8000394:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000398:	2b1d      	cmp	r3, #29
 800039a:	f67f af32 	bls.w	8000202 <set_comand+0x66>

	} // END for()

	HAL_UART_Transmit(DEBUG, (uint8_t*)"Not reply ", strlen("Not reply "), 1000);
 800039e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003a2:	220a      	movs	r2, #10
 80003a4:	4919      	ldr	r1, [pc, #100]	; (800040c <set_comand+0x270>)
 80003a6:	4812      	ldr	r0, [pc, #72]	; (80003f0 <set_comand+0x254>)
 80003a8:	f002 fbaf 	bl	8002b0a <HAL_UART_Transmit>
	HAL_UART_Transmit(DEBUG, (uint8_t*)buff, strlen(buff), 1000);
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f7ff fecd 	bl	800014c <strlen>
 80003b2:	4603      	mov	r3, r0
 80003b4:	b29a      	uxth	r2, r3
 80003b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ba:	6879      	ldr	r1, [r7, #4]
 80003bc:	480c      	ldr	r0, [pc, #48]	; (80003f0 <set_comand+0x254>)
 80003be:	f002 fba4 	bl	8002b0a <HAL_UART_Transmit>

	while(1) // мигаем 5 секунд и ресетим плату
	{
		count_err++;
 80003c2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80003c6:	3301      	adds	r3, #1
 80003c8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		HAL_GPIO_TogglePin(ER_LED_GPIO_Port, ER_LED_Pin);
 80003cc:	2180      	movs	r1, #128	; 0x80
 80003ce:	480a      	ldr	r0, [pc, #40]	; (80003f8 <set_comand+0x25c>)
 80003d0:	f001 fb90 	bl	8001af4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80003d4:	2064      	movs	r0, #100	; 0x64
 80003d6:	f001 f8bf 	bl	8001558 <HAL_Delay>
		count_err++;
 80003da:	e7f2      	b.n	80003c2 <set_comand+0x226>
		//if(count_err > 49) HAL_NVIC_SystemReset();
	}
}
 80003dc:	37b0      	adds	r7, #176	; 0xb0
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	080037e4 	.word	0x080037e4
 80003e8:	200001a4 	.word	0x200001a4
 80003ec:	080037ec 	.word	0x080037ec
 80003f0:	20000164 	.word	0x20000164
 80003f4:	080037f4 	.word	0x080037f4
 80003f8:	40010800 	.word	0x40010800
 80003fc:	08003814 	.word	0x08003814
 8000400:	0800381c 	.word	0x0800381c
 8000404:	08003820 	.word	0x08003820
 8000408:	08003844 	.word	0x08003844
 800040c:	08003850 	.word	0x08003850

08000410 <balance>:

/////////////////////// Функции для использования в цикле //////////////////////////
void balance(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
	char ATD[] = "ATD#100#;\r\n"; // баланс (бабло)
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <balance+0x30>)
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	ca07      	ldmia	r2, {r0, r1, r2}
 800041c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(GSM, (uint8_t*)ATD, strlen(ATD), 1000);
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff fe92 	bl	800014c <strlen>
 8000428:	4603      	mov	r3, r0
 800042a:	b29a      	uxth	r2, r3
 800042c:	1d39      	adds	r1, r7, #4
 800042e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000432:	4804      	ldr	r0, [pc, #16]	; (8000444 <balance+0x34>)
 8000434:	f002 fb69 	bl	8002b0a <HAL_UART_Transmit>
}
 8000438:	bf00      	nop
 800043a:	3710      	adds	r7, #16
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	0800385c 	.word	0x0800385c
 8000444:	200001a4 	.word	0x200001a4

08000448 <disable_connection>:

void disable_connection(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
	char ATH[] = "ATH\r\n"; // сбросить все соединения
 800044e:	4a0b      	ldr	r2, [pc, #44]	; (800047c <disable_connection+0x34>)
 8000450:	463b      	mov	r3, r7
 8000452:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000456:	6018      	str	r0, [r3, #0]
 8000458:	3304      	adds	r3, #4
 800045a:	8019      	strh	r1, [r3, #0]
	HAL_UART_Transmit(GSM, (uint8_t*)ATH, strlen(ATH), 1000);
 800045c:	463b      	mov	r3, r7
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff fe74 	bl	800014c <strlen>
 8000464:	4603      	mov	r3, r0
 8000466:	b29a      	uxth	r2, r3
 8000468:	4639      	mov	r1, r7
 800046a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800046e:	4804      	ldr	r0, [pc, #16]	; (8000480 <disable_connection+0x38>)
 8000470:	f002 fb4b 	bl	8002b0a <HAL_UART_Transmit>
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	08003868 	.word	0x08003868
 8000480:	200001a4 	.word	0x200001a4

08000484 <call>:

void call(void)
{
 8000484:	b5b0      	push	{r4, r5, r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
	//char ATD[] = "ATD+79819555551;\r\n"; // позвонить
	char ATD[] = "ATD+358468115905;\r\n"; // позвонить
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <call+0x34>)
 800048c:	1d3c      	adds	r4, r7, #4
 800048e:	461d      	mov	r5, r3
 8000490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000494:	682b      	ldr	r3, [r5, #0]
 8000496:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(GSM, (uint8_t*)ATD, strlen(ATD), 1000);
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff fe56 	bl	800014c <strlen>
 80004a0:	4603      	mov	r3, r0
 80004a2:	b29a      	uxth	r2, r3
 80004a4:	1d39      	adds	r1, r7, #4
 80004a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004aa:	4804      	ldr	r0, [pc, #16]	; (80004bc <call+0x38>)
 80004ac:	f002 fb2d 	bl	8002b0a <HAL_UART_Transmit>
}
 80004b0:	bf00      	nop
 80004b2:	3718      	adds	r7, #24
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bdb0      	pop	{r4, r5, r7, pc}
 80004b8:	08003870 	.word	0x08003870
 80004bc:	200001a4 	.word	0x200001a4

080004c0 <incoming_call>:

void incoming_call(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	char ATA[] = "ATA\r\n"; // принять звонок
 80004c6:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <incoming_call+0x34>)
 80004c8:	463b      	mov	r3, r7
 80004ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ce:	6018      	str	r0, [r3, #0]
 80004d0:	3304      	adds	r3, #4
 80004d2:	8019      	strh	r1, [r3, #0]
	HAL_UART_Transmit(GSM, (uint8_t*)ATA, strlen(ATA), 1000);
 80004d4:	463b      	mov	r3, r7
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff fe38 	bl	800014c <strlen>
 80004dc:	4603      	mov	r3, r0
 80004de:	b29a      	uxth	r2, r3
 80004e0:	4639      	mov	r1, r7
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	4804      	ldr	r0, [pc, #16]	; (80004f8 <incoming_call+0x38>)
 80004e8:	f002 fb0f 	bl	8002b0a <HAL_UART_Transmit>
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	08003884 	.word	0x08003884
 80004f8:	200001a4 	.word	0x200001a4

080004fc <clear_string>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/////////////////// удалить символы \r и \n из строки //////////////////////
static void clear_string(char *src)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d02f      	beq.n	800056e <clear_string+0x72>
	uint8_t i = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	e022      	b.n	800055e <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 8000518:	7afb      	ldrb	r3, [r7, #11]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d80b      	bhi.n	8000536 <clear_string+0x3a>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b0a      	cmp	r3, #10
 8000524:	d003      	beq.n	800052e <clear_string+0x32>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b0d      	cmp	r3, #13
 800052c:	d103      	bne.n	8000536 <clear_string+0x3a>
		{
			i++;
 800052e:	7afb      	ldrb	r3, [r7, #11]
 8000530:	3301      	adds	r3, #1
 8000532:	72fb      	strb	r3, [r7, #11]
			continue;
 8000534:	e010      	b.n	8000558 <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b0a      	cmp	r3, #10
 800053c:	d003      	beq.n	8000546 <clear_string+0x4a>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b0d      	cmp	r3, #13
 8000544:	d102      	bne.n	800054c <clear_string+0x50>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2220      	movs	r2, #32
 800054a:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	1c5a      	adds	r2, r3, #1
 8000550:	60fa      	str	r2, [r7, #12]
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	7812      	ldrb	r2, [r2, #0]
 8000556:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3301      	adds	r3, #1
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d1d8      	bne.n	8000518 <clear_string+0x1c>
	}

	*dst = 0;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
 800056c:	e000      	b.n	8000570 <clear_string+0x74>
	if(!src) return;
 800056e:	bf00      	nop
}
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <HAL_TIM_PeriodElapsedCallback>:

///////////////////// колбек таймера //////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a05      	ldr	r2, [pc, #20]	; (800059c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d102      	bne.n	8000590 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		flag = 1;
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800058c:	2201      	movs	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]
	}
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40000800 	.word	0x40000800
 80005a0:	2000008c 	.word	0x2000008c

080005a4 <chek_speed>:

//////////////// проверка и установка скорости 19200, нужна один раз /////////////////
void chek_speed(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b098      	sub	sp, #96	; 0x60
 80005a8:	af00      	add	r7, sp, #0
  for(uint8_t i = 0; i < 7; i++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80005b0:	e0c7      	b.n	8000742 <chek_speed+0x19e>
  {
	  uint32_t sp = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	65bb      	str	r3, [r7, #88]	; 0x58

	  if(i == 0) sp = 2400;
 80005b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d103      	bne.n	80005c6 <chek_speed+0x22>
 80005be:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80005c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80005c4:	e02e      	b.n	8000624 <chek_speed+0x80>
	  else if(i == 1) sp = 4800;
 80005c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d103      	bne.n	80005d6 <chek_speed+0x32>
 80005ce:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 80005d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80005d4:	e026      	b.n	8000624 <chek_speed+0x80>
	  else if(i == 2) sp = 9600;
 80005d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d103      	bne.n	80005e6 <chek_speed+0x42>
 80005de:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80005e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80005e4:	e01e      	b.n	8000624 <chek_speed+0x80>
	  else if(i == 3) sp = 19200;
 80005e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80005ea:	2b03      	cmp	r3, #3
 80005ec:	d103      	bne.n	80005f6 <chek_speed+0x52>
 80005ee:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80005f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80005f4:	e016      	b.n	8000624 <chek_speed+0x80>
	  else if(i == 4) sp = 38400;
 80005f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	d103      	bne.n	8000606 <chek_speed+0x62>
 80005fe:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000602:	65bb      	str	r3, [r7, #88]	; 0x58
 8000604:	e00e      	b.n	8000624 <chek_speed+0x80>
	  else if(i == 5) sp = 57600;
 8000606:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800060a:	2b05      	cmp	r3, #5
 800060c:	d103      	bne.n	8000616 <chek_speed+0x72>
 800060e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000612:	65bb      	str	r3, [r7, #88]	; 0x58
 8000614:	e006      	b.n	8000624 <chek_speed+0x80>
	  else if(i == 6) sp = 115200;
 8000616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800061a:	2b06      	cmp	r3, #6
 800061c:	d102      	bne.n	8000624 <chek_speed+0x80>
 800061e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000622:	65bb      	str	r3, [r7, #88]	; 0x58

	  huart1.Instance = USART1;
 8000624:	4b4c      	ldr	r3, [pc, #304]	; (8000758 <chek_speed+0x1b4>)
 8000626:	4a4d      	ldr	r2, [pc, #308]	; (800075c <chek_speed+0x1b8>)
 8000628:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = sp;
 800062a:	4a4b      	ldr	r2, [pc, #300]	; (8000758 <chek_speed+0x1b4>)
 800062c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800062e:	6053      	str	r3, [r2, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000630:	4b49      	ldr	r3, [pc, #292]	; (8000758 <chek_speed+0x1b4>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8000636:	4b48      	ldr	r3, [pc, #288]	; (8000758 <chek_speed+0x1b4>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 800063c:	4b46      	ldr	r3, [pc, #280]	; (8000758 <chek_speed+0x1b4>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8000642:	4b45      	ldr	r3, [pc, #276]	; (8000758 <chek_speed+0x1b4>)
 8000644:	220c      	movs	r2, #12
 8000646:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000648:	4b43      	ldr	r3, [pc, #268]	; (8000758 <chek_speed+0x1b4>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800064e:	4b42      	ldr	r3, [pc, #264]	; (8000758 <chek_speed+0x1b4>)
 8000650:	2200      	movs	r2, #0
 8000652:	61da      	str	r2, [r3, #28]

	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000654:	4840      	ldr	r0, [pc, #256]	; (8000758 <chek_speed+0x1b4>)
 8000656:	f002 fa0b 	bl	8002a70 <HAL_UART_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <chek_speed+0xc0>
	  {
		  Error_Handler();
 8000660:	f000 fc5e 	bl	8000f20 <Error_Handler>
	  }

	  char str[16] = {0,};
 8000664:	2300      	movs	r3, #0
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
 8000668:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
	  HAL_UART_Transmit(GSM, (uint8_t*)"AT\r\n", strlen("AT\r\n"), 1000);
 8000674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000678:	2204      	movs	r2, #4
 800067a:	4939      	ldr	r1, [pc, #228]	; (8000760 <chek_speed+0x1bc>)
 800067c:	4836      	ldr	r0, [pc, #216]	; (8000758 <chek_speed+0x1b4>)
 800067e:	f002 fa44 	bl	8002b0a <HAL_UART_Transmit>
	  HAL_Delay(300);
 8000682:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000686:	f000 ff67 	bl	8001558 <HAL_Delay>

	  if(gsm_available()) //если модуль что-то прислал
 800068a:	f000 fe51 	bl	8001330 <gsm_available>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d051      	beq.n	8000738 <chek_speed+0x194>
	  {
		  uint16_t i = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

		  while(gsm_available())
 800069a:	e015      	b.n	80006c8 <chek_speed+0x124>
		  {
			  str[i++] = gsm_read();
 800069c:	f000 fe62 	bl	8001364 <gsm_read>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4619      	mov	r1, r3
 80006a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 80006ae:	b2ca      	uxtb	r2, r1
 80006b0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80006b4:	440b      	add	r3, r1
 80006b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
			  if(i > 15) break;
 80006ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80006be:	2b0f      	cmp	r3, #15
 80006c0:	d808      	bhi.n	80006d4 <chek_speed+0x130>
			  HAL_Delay(1);
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 ff48 	bl	8001558 <HAL_Delay>
		  while(gsm_available())
 80006c8:	f000 fe32 	bl	8001330 <gsm_available>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1e4      	bne.n	800069c <chek_speed+0xf8>
 80006d2:	e000      	b.n	80006d6 <chek_speed+0x132>
			  if(i > 15) break;
 80006d4:	bf00      	nop
		  }

		  if(strstr(str, "OK") != NULL)
 80006d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006da:	4922      	ldr	r1, [pc, #136]	; (8000764 <chek_speed+0x1c0>)
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fc44 	bl	8002f6a <strstr>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d027      	beq.n	8000738 <chek_speed+0x194>
		  {
			  char buf[64] = {0,};
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	223c      	movs	r2, #60	; 0x3c
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fbef 	bl	8002ed8 <memset>
			  snprintf(buf, 64, "Uart modem was %lu, switched to 57600\n", huart1.Init.BaudRate);
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <chek_speed+0x1b4>)
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	1d38      	adds	r0, r7, #4
 8000700:	4a19      	ldr	r2, [pc, #100]	; (8000768 <chek_speed+0x1c4>)
 8000702:	2140      	movs	r1, #64	; 0x40
 8000704:	f002 fbf0 	bl	8002ee8 <sniprintf>
			  HAL_UART_Transmit(DEBUG, (uint8_t*)buf, strlen(buf), 100);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fd1e 	bl	800014c <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	b29a      	uxth	r2, r3
 8000714:	1d39      	adds	r1, r7, #4
 8000716:	2364      	movs	r3, #100	; 0x64
 8000718:	4814      	ldr	r0, [pc, #80]	; (800076c <chek_speed+0x1c8>)
 800071a:	f002 f9f6 	bl	8002b0a <HAL_UART_Transmit>
			  HAL_UART_Transmit(GSM, (uint8_t*)"AT+IPR=57600\r\n", strlen("AT+IPR=57600\r\n"), 1000);
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	220e      	movs	r2, #14
 8000724:	4912      	ldr	r1, [pc, #72]	; (8000770 <chek_speed+0x1cc>)
 8000726:	480c      	ldr	r0, [pc, #48]	; (8000758 <chek_speed+0x1b4>)
 8000728:	f002 f9ef 	bl	8002b0a <HAL_UART_Transmit>
			  HAL_Delay(250);
 800072c:	20fa      	movs	r0, #250	; 0xfa
 800072e:	f000 ff13 	bl	8001558 <HAL_Delay>
			  MX_USART1_UART_Init();
 8000732:	f000 fb57 	bl	8000de4 <MX_USART1_UART_Init>
			  break;
 8000736:	e00a      	b.n	800074e <chek_speed+0x1aa>
  for(uint8_t i = 0; i < 7; i++)
 8000738:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800073c:	3301      	adds	r3, #1
 800073e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000746:	2b06      	cmp	r3, #6
 8000748:	f67f af33 	bls.w	80005b2 <chek_speed+0xe>
		  }
	  }
  }
}
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	3760      	adds	r7, #96	; 0x60
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200001a4 	.word	0x200001a4
 800075c:	40013800 	.word	0x40013800
 8000760:	08003898 	.word	0x08003898
 8000764:	080038a0 	.word	0x080038a0
 8000768:	080038a4 	.word	0x080038a4
 800076c:	20000164 	.word	0x20000164
 8000770:	080038cc 	.word	0x080038cc

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b0ac      	sub	sp, #176	; 0xb0
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f000 fe8b 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 fa9d 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f000 fb83 	bl	8000e8c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000786:	f000 fb2d 	bl	8000de4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800078a:	f000 fadd 	bl	8000d48 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800078e:	f000 fb53 	bl	8000e38 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(1000);
    //HAL_GPIO_WritePin(ON_RELAY_GPIO_Port, ON_RELAY_Pin, GPIO_PIN_SET);
    HAL_Delay(5000); // задержка чтоб модем успел раздуплиться, если его включение происходит вместе с включением МК
 8000792:	f241 3088 	movw	r0, #5000	; 0x1388
 8000796:	f000 fedf 	bl	8001558 <HAL_Delay>

    __HAL_UART_ENABLE_IT(GSM, UART_IT_RXNE);
 800079a:	4bc5      	ldr	r3, [pc, #788]	; (8000ab0 <main+0x33c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	68da      	ldr	r2, [r3, #12]
 80007a0:	4bc3      	ldr	r3, [pc, #780]	; (8000ab0 <main+0x33c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f042 0220 	orr.w	r2, r2, #32
 80007a8:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(DEBUG, UART_IT_RXNE);
 80007aa:	4bc2      	ldr	r3, [pc, #776]	; (8000ab4 <main+0x340>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	68da      	ldr	r2, [r3, #12]
 80007b0:	4bc0      	ldr	r3, [pc, #768]	; (8000ab4 <main+0x340>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f042 0220 	orr.w	r2, r2, #32
 80007b8:	60da      	str	r2, [r3, #12]

    chek_speed(); // проверка и установка скорости 19200, нужна один раз
 80007ba:	f7ff fef3 	bl	80005a4 <chek_speed>

    ////////////////// настройка модема ///////////////////
    set_comand(ATCPAS);  // проверка статуса модема
 80007be:	48be      	ldr	r0, [pc, #760]	; (8000ab8 <main+0x344>)
 80007c0:	f7ff fcec 	bl	800019c <set_comand>
    set_comand(ATCREG);  // проверка регистрации в сети - должен вернуть  +CREG: 0,1
 80007c4:	48bd      	ldr	r0, [pc, #756]	; (8000abc <main+0x348>)
 80007c6:	f7ff fce9 	bl	800019c <set_comand>
    set_comand(ATCLIP1); // включить АОН
 80007ca:	48bd      	ldr	r0, [pc, #756]	; (8000ac0 <main+0x34c>)
 80007cc:	f7ff fce6 	bl	800019c <set_comand>
    set_comand(ATE);     // отключить «эхо»
 80007d0:	48bc      	ldr	r0, [pc, #752]	; (8000ac4 <main+0x350>)
 80007d2:	f7ff fce3 	bl	800019c <set_comand>
    set_comand(ATS);     // поднимать трубку только "вручную"
 80007d6:	48bc      	ldr	r0, [pc, #752]	; (8000ac8 <main+0x354>)
 80007d8:	f7ff fce0 	bl	800019c <set_comand>
    set_comand(ATDDET);  // включить DTMF
 80007dc:	48bb      	ldr	r0, [pc, #748]	; (8000acc <main+0x358>)
 80007de:	f7ff fcdd 	bl	800019c <set_comand>
    //set_comand(ATCCLKK); // установить дату/время

    /////////////////// настройки для работы с sms ////////////////
    set_comand(ATCMGF);    // устанавливает текстовый режим смс-сообщения
 80007e2:	48bb      	ldr	r0, [pc, #748]	; (8000ad0 <main+0x35c>)
 80007e4:	f7ff fcda 	bl	800019c <set_comand>
    set_comand(ATCPBS);    // открывает доступ к данным телефонной книги SIM-карты
 80007e8:	48ba      	ldr	r0, [pc, #744]	; (8000ad4 <main+0x360>)
 80007ea:	f7ff fcd7 	bl	800019c <set_comand>
    set_comand(ATCSCS);    // кодировка текста - GSM
 80007ee:	48ba      	ldr	r0, [pc, #744]	; (8000ad8 <main+0x364>)
 80007f0:	f7ff fcd4 	bl	800019c <set_comand>
    set_comand(ATCNMI);    // настройка вывода смс в консоль
 80007f4:	48b9      	ldr	r0, [pc, #740]	; (8000adc <main+0x368>)
 80007f6:	f7ff fcd1 	bl	800019c <set_comand>

    //////////////////// различная инфа /////////////////////
    set_comand(ATIPR);       // скорость usart'a модема
 80007fa:	48b9      	ldr	r0, [pc, #740]	; (8000ae0 <main+0x36c>)
 80007fc:	f7ff fcce 	bl	800019c <set_comand>
    set_comand(ATI);         // название и версия модуля
 8000800:	48b8      	ldr	r0, [pc, #736]	; (8000ae4 <main+0x370>)
 8000802:	f7ff fccb 	bl	800019c <set_comand>
    set_comand(ATCGSN);      // считывание IMEI из EEPROM
 8000806:	48b8      	ldr	r0, [pc, #736]	; (8000ae8 <main+0x374>)
 8000808:	f7ff fcc8 	bl	800019c <set_comand>
    set_comand(ATCSPN);      // оператор сети
 800080c:	48b7      	ldr	r0, [pc, #732]	; (8000aec <main+0x378>)
 800080e:	f7ff fcc5 	bl	800019c <set_comand>

    HAL_TIM_Base_Start_IT(&htim4);
 8000812:	48b7      	ldr	r0, [pc, #732]	; (8000af0 <main+0x37c>)
 8000814:	f001 fdcb 	bl	80023ae <HAL_TIM_Base_Start_IT>

    char buf[GSM_RX_BUFFER_SIZE] = {0,};
 8000818:	2300      	movs	r3, #0
 800081a:	667b      	str	r3, [r7, #100]	; 0x64
 800081c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000820:	223c      	movs	r2, #60	; 0x3c
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f002 fb57 	bl	8002ed8 <memset>
    char str[GSM_RX_BUFFER_SIZE] = {0,};
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
 800082e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000832:	223c      	movs	r2, #60	; 0x3c
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fb4e 	bl	8002ed8 <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
  	if(flag == 1)
 800083c:	4bad      	ldr	r3, [pc, #692]	; (8000af4 <main+0x380>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b01      	cmp	r3, #1
 8000844:	d102      	bne.n	800084c <main+0xd8>
  	{
  		flag = 0;
 8000846:	4bab      	ldr	r3, [pc, #684]	; (8000af4 <main+0x380>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
  		//get_date_time(); // будет раз в секунду выводить время
  	}


  	if(gsm_available()) //если модуль что-то прислал
 800084c:	f000 fd70 	bl	8001330 <gsm_available>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	f000 81dd 	beq.w	8000c12 <main+0x49e>
  	{
  		uint16_t i = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
  		uint8_t fdbg = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
  		memset(buf, 0, GSM_RX_BUFFER_SIZE);
 8000864:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000868:	2240      	movs	r2, #64	; 0x40
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f002 fb33 	bl	8002ed8 <memset>
  		HAL_Delay(50);
 8000872:	2032      	movs	r0, #50	; 0x32
 8000874:	f000 fe70 	bl	8001558 <HAL_Delay>

  		while(gsm_available())
 8000878:	e015      	b.n	80008a6 <main+0x132>
  		{
  			buf[i++] = gsm_read();
 800087a:	f000 fd73 	bl	8001364 <gsm_read>
 800087e:	4603      	mov	r3, r0
 8000880:	4619      	mov	r1, r3
 8000882:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 800088c:	b2ca      	uxtb	r2, r1
 800088e:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000892:	440b      	add	r3, r1
 8000894:	f803 2c4c 	strb.w	r2, [r3, #-76]
  			if(i > GSM_RX_BUFFER_SIZE - 1) break;
 8000898:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800089c:	2b3f      	cmp	r3, #63	; 0x3f
 800089e:	d808      	bhi.n	80008b2 <main+0x13e>
  			HAL_Delay(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 fe59 	bl	8001558 <HAL_Delay>
  		while(gsm_available())
 80008a6:	f000 fd43 	bl	8001330 <gsm_available>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d1e4      	bne.n	800087a <main+0x106>
 80008b0:	e000      	b.n	80008b4 <main+0x140>
  			if(i > GSM_RX_BUFFER_SIZE - 1) break;
 80008b2:	bf00      	nop
  		}

  		clear_string(buf); // очищаем строку от символов \r и \n
 80008b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fe1f 	bl	80004fc <clear_string>

  		/////////////////// НАЧИНАЕМ РАСПОЗНАВАТЬ ЧТО ПРИСЛАЛ МОДУЛЬ /////////////////////
  		if(strstr(buf, "RING") != NULL) // ЕСЛИ ЭТО ЗВОНОК
 80008be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008c2:	498d      	ldr	r1, [pc, #564]	; (8000af8 <main+0x384>)
 80008c4:	4618      	mov	r0, r3
 80008c6:	f002 fb50 	bl	8002f6a <strstr>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d01c      	beq.n	800090a <main+0x196>
  		{
  			//if(strstr(buf, "9834567891") != NULL) // если звонит нужный номер
  			if(strstr(buf, "358468115905") != NULL) // если звонит нужный номер
 80008d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008d4:	4989      	ldr	r1, [pc, #548]	; (8000afc <main+0x388>)
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fb47 	bl	8002f6a <strstr>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d009      	beq.n	80008f6 <main+0x182>
  			{
  				// что-то делаем
  				HAL_UART_Transmit(DEBUG, (uint8_t*)"My number\n", strlen("My number\n"), 1000);
 80008e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e6:	220a      	movs	r2, #10
 80008e8:	4985      	ldr	r1, [pc, #532]	; (8000b00 <main+0x38c>)
 80008ea:	4872      	ldr	r0, [pc, #456]	; (8000ab4 <main+0x340>)
 80008ec:	f002 f90d 	bl	8002b0a <HAL_UART_Transmit>
  				incoming_call(); // можно принять звонок
 80008f0:	f7ff fde6 	bl	80004c0 <incoming_call>
 80008f4:	e173      	b.n	8000bde <main+0x46a>
  				//disable_connection(); // сброс соединения
  			}
  			else
  			{
  				HAL_UART_Transmit(DEBUG, (uint8_t*)"Unknow number\n", strlen("Unknow number\n"), 1000);
 80008f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fa:	220e      	movs	r2, #14
 80008fc:	4981      	ldr	r1, [pc, #516]	; (8000b04 <main+0x390>)
 80008fe:	486d      	ldr	r0, [pc, #436]	; (8000ab4 <main+0x340>)
 8000900:	f002 f903 	bl	8002b0a <HAL_UART_Transmit>
  				disable_connection(); // сброс соединения
 8000904:	f7ff fda0 	bl	8000448 <disable_connection>
 8000908:	e169      	b.n	8000bde <main+0x46a>
  			}
  		}
  		else if(strstr(buf, "+CMT:") != NULL) // ЕСЛИ ЭТО SMS
 800090a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800090e:	497e      	ldr	r1, [pc, #504]	; (8000b08 <main+0x394>)
 8000910:	4618      	mov	r0, r3
 8000912:	f002 fb2a 	bl	8002f6a <strstr>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d041      	beq.n	80009a0 <main+0x22c>
  		{
  			//if(strstr(buf, "9815555596") != NULL) // проверяем от кого смс
  			if(strstr(buf, "358468115905") != NULL) // проверяем от кого смс
 800091c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000920:	4976      	ldr	r1, [pc, #472]	; (8000afc <main+0x388>)
 8000922:	4618      	mov	r0, r3
 8000924:	f002 fb21 	bl	8002f6a <strstr>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d030      	beq.n	8000990 <main+0x21c>
  			{
  				HAL_UART_Transmit(DEBUG, (uint8_t*)"Sms my number\n", strlen("Sms my number\n"), 1000);
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	220e      	movs	r2, #14
 8000934:	4975      	ldr	r1, [pc, #468]	; (8000b0c <main+0x398>)
 8000936:	485f      	ldr	r0, [pc, #380]	; (8000ab4 <main+0x340>)
 8000938:	f002 f8e7 	bl	8002b0a <HAL_UART_Transmit>

  				// что-то делаем или ищем какую-то строку, которую мы послали в смс, например слово "Hello"
  				if(strstr(buf, "Zerg") != NULL)
 800093c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000940:	4973      	ldr	r1, [pc, #460]	; (8000b10 <main+0x39c>)
 8000942:	4618      	mov	r0, r3
 8000944:	f002 fb11 	bl	8002f6a <strstr>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d007      	beq.n	800095e <main+0x1ea>
  				{
  					HAL_UART_Transmit(DEBUG, (uint8_t*)"Reciv Zerg\n", strlen("Reciv Zerg\n"), 1000);
 800094e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000952:	220b      	movs	r2, #11
 8000954:	496f      	ldr	r1, [pc, #444]	; (8000b14 <main+0x3a0>)
 8000956:	4857      	ldr	r0, [pc, #348]	; (8000ab4 <main+0x340>)
 8000958:	f002 f8d7 	bl	8002b0a <HAL_UART_Transmit>
 800095c:	e13f      	b.n	8000bde <main+0x46a>
  					// что-то делаем
  				}
  				else if(strstr(buf, "Call") != NULL) // если прилетело слово "Call" то звоним
 800095e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000962:	496d      	ldr	r1, [pc, #436]	; (8000b18 <main+0x3a4>)
 8000964:	4618      	mov	r0, r3
 8000966:	f002 fb00 	bl	8002f6a <strstr>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <main+0x202>
  				{
  					call(); // номер указать в файле gsm.c
 8000970:	f7ff fd88 	bl	8000484 <call>
 8000974:	e133      	b.n	8000bde <main+0x46a>
  				}
  				else if(strstr(buf, "Money") != NULL) // если отпрвить sms со словом "Money", то в ответ придёт смс с балансом (деньги) на модеме
 8000976:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800097a:	4968      	ldr	r1, [pc, #416]	; (8000b1c <main+0x3a8>)
 800097c:	4618      	mov	r0, r3
 800097e:	f002 faf4 	bl	8002f6a <strstr>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	f000 812a 	beq.w	8000bde <main+0x46a>
  				{
  					balance(); // посылаем команду узнать баланс (мтс)
 800098a:	f7ff fd41 	bl	8000410 <balance>
 800098e:	e126      	b.n	8000bde <main+0x46a>
  				}
  			}
  			else
  			{
  				HAL_UART_Transmit(DEBUG, (uint8_t*)"Unknow number sms\n", strlen("Unknow number sms\n"), 1000);
 8000990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000994:	2212      	movs	r2, #18
 8000996:	4962      	ldr	r1, [pc, #392]	; (8000b20 <main+0x3ac>)
 8000998:	4846      	ldr	r0, [pc, #280]	; (8000ab4 <main+0x340>)
 800099a:	f002 f8b6 	bl	8002b0a <HAL_UART_Transmit>
 800099e:	e11e      	b.n	8000bde <main+0x46a>
  			}
  		}
  		else if(strstr(buf, "+CUSD") != NULL)  // ЕСЛИ ЭТО СТРОКА С БАЛАНСОМ
 80009a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009a4:	495f      	ldr	r1, [pc, #380]	; (8000b24 <main+0x3b0>)
 80009a6:	4618      	mov	r0, r3
 80009a8:	f002 fadf 	bl	8002f6a <strstr>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d00b      	beq.n	80009ca <main+0x256>
  		{
  			char *p = NULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  			if((p = strstr(buf, "Balance")) != NULL) // ищем слово "Balance"
 80009b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009bc:	495a      	ldr	r1, [pc, #360]	; (8000b28 <main+0x3b4>)
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 fad3 	bl	8002f6a <strstr>
 80009c4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 80009c8:	e109      	b.n	8000bde <main+0x46a>
  				snprintf(str, GSM_RX_BUFFER_SIZE, "%c", (char)26); // символ ctrl-z
  				HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);*/
  				// блок закомментирован чтоб модуль не слал смски пока тестируете
  			}
  		}
  		else if(strstr(buf, "+DTMF") != NULL)  //ЕСЛИ ЭТО DTMF СИГНАЛ
 80009ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009ce:	4957      	ldr	r1, [pc, #348]	; (8000b2c <main+0x3b8>)
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 faca 	bl	8002f6a <strstr>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d023      	beq.n	8000a24 <main+0x2b0>
  		{
  			if(strstr(buf, "0") != NULL) // если пришёл сигнал кнопки 0
 80009dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009e0:	2130      	movs	r1, #48	; 0x30
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 fab4 	bl	8002f50 <strchr>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d007      	beq.n	80009fe <main+0x28a>
  			{
  				// что-то делаем
  				HAL_UART_Transmit(DEBUG, (uint8_t*)"DTMF Button 0\n", strlen("DTMF Button 0\n"), 1000);
 80009ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f2:	220e      	movs	r2, #14
 80009f4:	494e      	ldr	r1, [pc, #312]	; (8000b30 <main+0x3bc>)
 80009f6:	482f      	ldr	r0, [pc, #188]	; (8000ab4 <main+0x340>)
 80009f8:	f002 f887 	bl	8002b0a <HAL_UART_Transmit>
 80009fc:	e00f      	b.n	8000a1e <main+0x2aa>
  			}
  			else if(strstr(buf, "1") != NULL) // если пришёл сигнал кнопки 1
 80009fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a02:	2131      	movs	r1, #49	; 0x31
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 faa3 	bl	8002f50 <strchr>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d006      	beq.n	8000a1e <main+0x2aa>
  			{
  				// что-то делаем
  				HAL_UART_Transmit(DEBUG, (uint8_t*)"DTMF Button 1\n", strlen("DTMF Button 1\n"), 1000);
 8000a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a14:	220e      	movs	r2, #14
 8000a16:	4947      	ldr	r1, [pc, #284]	; (8000b34 <main+0x3c0>)
 8000a18:	4826      	ldr	r0, [pc, #152]	; (8000ab4 <main+0x340>)
 8000a1a:	f002 f876 	bl	8002b0a <HAL_UART_Transmit>
  			}
  			// и т.д.

  			disable_connection(); // разрываем соединение, или не разрываем (в зависимости от того, что вам нужно)
 8000a1e:	f7ff fd13 	bl	8000448 <disable_connection>
 8000a22:	e0dc      	b.n	8000bde <main+0x46a>
  		}
  		else if(strstr(buf, "+CCLK") != NULL)  // ЕСЛИ ЭТО ДАТА/ВРЕМЯ
 8000a24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a28:	4943      	ldr	r1, [pc, #268]	; (8000b38 <main+0x3c4>)
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 fa9d 	bl	8002f6a <strstr>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f000 80d3 	beq.w	8000bde <main+0x46a>
  		{
  			replac_string(buf);
 8000a38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fb8d 	bl	800015c <replac_string>
  			char res[32] = {0,};
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	615a      	str	r2, [r3, #20]
 8000a58:	619a      	str	r2, [r3, #24]

  			for(uint8_t i = 0; i < GSM_RX_BUFFER_SIZE; i++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8000a60:	e0a0      	b.n	8000ba4 <main+0x430>
  			{
  				if(buf[i] == '"')
 8000a62:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000a66:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000a6a:	4413      	add	r3, r2
 8000a6c:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8000a70:	2b22      	cmp	r3, #34	; 0x22
 8000a72:	f040 8092 	bne.w	8000b9a <main+0x426>
  				{
  					i++;
 8000a76:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
  					for(uint8_t j = 0; j < 20; i++, j++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8000a86:	e082      	b.n	8000b8e <main+0x41a>
  					{
  						if(buf[i] == '+')
 8000a88:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000a8c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000a90:	4413      	add	r3, r2
 8000a92:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8000a96:	2b2b      	cmp	r3, #43	; 0x2b
 8000a98:	d150      	bne.n	8000b3c <main+0x3c8>
  						{
  							buf[i] = 0;
 8000a9a:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000a9e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000aa2:	4413      	add	r3, r2
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f803 2c4c 	strb.w	r2, [r3, #-76]
  							break;
 8000aaa:	bf00      	nop

  						if(buf[i] == ',') buf[i] = ' ';
  						res[j] = buf[i];
  					}

  					break;
 8000aac:	e07f      	b.n	8000bae <main+0x43a>
 8000aae:	bf00      	nop
 8000ab0:	200001a4 	.word	0x200001a4
 8000ab4:	20000164 	.word	0x20000164
 8000ab8:	080038dc 	.word	0x080038dc
 8000abc:	080038e4 	.word	0x080038e4
 8000ac0:	080038f0 	.word	0x080038f0
 8000ac4:	080038fc 	.word	0x080038fc
 8000ac8:	08003904 	.word	0x08003904
 8000acc:	0800390c 	.word	0x0800390c
 8000ad0:	08003918 	.word	0x08003918
 8000ad4:	08003924 	.word	0x08003924
 8000ad8:	08003934 	.word	0x08003934
 8000adc:	08003944 	.word	0x08003944
 8000ae0:	08003958 	.word	0x08003958
 8000ae4:	08003960 	.word	0x08003960
 8000ae8:	08003964 	.word	0x08003964
 8000aec:	0800396c 	.word	0x0800396c
 8000af0:	20000124 	.word	0x20000124
 8000af4:	2000008c 	.word	0x2000008c
 8000af8:	08003978 	.word	0x08003978
 8000afc:	08003980 	.word	0x08003980
 8000b00:	08003990 	.word	0x08003990
 8000b04:	0800399c 	.word	0x0800399c
 8000b08:	080039ac 	.word	0x080039ac
 8000b0c:	080039b4 	.word	0x080039b4
 8000b10:	080039c4 	.word	0x080039c4
 8000b14:	080039cc 	.word	0x080039cc
 8000b18:	080039d8 	.word	0x080039d8
 8000b1c:	080039e0 	.word	0x080039e0
 8000b20:	080039e8 	.word	0x080039e8
 8000b24:	080039fc 	.word	0x080039fc
 8000b28:	08003a04 	.word	0x08003a04
 8000b2c:	08003a0c 	.word	0x08003a0c
 8000b30:	08003a14 	.word	0x08003a14
 8000b34:	08003a24 	.word	0x08003a24
 8000b38:	08003a34 	.word	0x08003a34
  						if(buf[i] == ',') buf[i] = ' ';
 8000b3c:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000b40:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000b44:	4413      	add	r3, r2
 8000b46:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8000b4a:	2b2c      	cmp	r3, #44	; 0x2c
 8000b4c:	d107      	bne.n	8000b5e <main+0x3ea>
 8000b4e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000b52:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000b56:	4413      	add	r3, r2
 8000b58:	2220      	movs	r2, #32
 8000b5a:	f803 2c4c 	strb.w	r2, [r3, #-76]
  						res[j] = buf[i];
 8000b5e:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8000b62:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000b66:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000b6a:	440a      	add	r2, r1
 8000b6c:	f812 2c4c 	ldrb.w	r2, [r2, #-76]
 8000b70:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000b74:	440b      	add	r3, r1
 8000b76:	f803 2cac 	strb.w	r2, [r3, #-172]
  					for(uint8_t j = 0; j < 20; i++, j++)
 8000b7a:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000b7e:	3301      	adds	r3, #1
 8000b80:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8000b84:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000b88:	3301      	adds	r3, #1
 8000b8a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8000b8e:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000b92:	2b13      	cmp	r3, #19
 8000b94:	f67f af78 	bls.w	8000a88 <main+0x314>
  					break;
 8000b98:	e009      	b.n	8000bae <main+0x43a>
  			for(uint8_t i = 0; i < GSM_RX_BUFFER_SIZE; i++)
 8000b9a:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8000ba4:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000ba8:	2b3f      	cmp	r3, #63	; 0x3f
 8000baa:	f67f af5a 	bls.w	8000a62 <main+0x2ee>
  				}
  			}

  			snprintf(str, GSM_RX_BUFFER_SIZE, "DateTime %s\n", res);
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000bb4:	4a3c      	ldr	r2, [pc, #240]	; (8000ca8 <main+0x534>)
 8000bb6:	2140      	movs	r1, #64	; 0x40
 8000bb8:	f002 f996 	bl	8002ee8 <sniprintf>
  			HAL_UART_Transmit(DEBUG, (uint8_t*)str, strlen(str), 1000);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fac3 	bl	800014c <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	4836      	ldr	r0, [pc, #216]	; (8000cac <main+0x538>)
 8000bd4:	f001 ff99 	bl	8002b0a <HAL_UART_Transmit>
  			fdbg = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
  		}

  		if(fdbg)
 8000bde:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d015      	beq.n	8000c12 <main+0x49e>
  		{
  			snprintf(str, GSM_RX_BUFFER_SIZE, "%s\n", buf);
 8000be6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000bee:	4a30      	ldr	r2, [pc, #192]	; (8000cb0 <main+0x53c>)
 8000bf0:	2140      	movs	r1, #64	; 0x40
 8000bf2:	f002 f979 	bl	8002ee8 <sniprintf>
  			HAL_UART_Transmit(DEBUG, (uint8_t*)str, strlen(str), 1000);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff faa6 	bl	800014c <strlen>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0c:	4827      	ldr	r0, [pc, #156]	; (8000cac <main+0x538>)
 8000c0e:	f001 ff7c 	bl	8002b0a <HAL_UART_Transmit>
  		}
  	}


  	////////////////////////////////////// DEBUG ////////////////////////////////////////
  	if(dbg_available()) //если послали в терминал какую-то команду, то она перенаправиться в модем
 8000c12:	f000 fbd3 	bl	80013bc <dbg_available>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f43f ae0f 	beq.w	800083c <main+0xc8>
  	{
  		uint16_t i = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
  		memset(buf, 0, GSM_RX_BUFFER_SIZE);
 8000c24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c28:	2240      	movs	r2, #64	; 0x40
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 f953 	bl	8002ed8 <memset>

  		while(dbg_available())
 8000c32:	e015      	b.n	8000c60 <main+0x4ec>
  		{
  			buf[i++] = dbg_read();
 8000c34:	f000 fbdc 	bl	80013f0 <dbg_read>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000c40:	1c5a      	adds	r2, r3, #1
 8000c42:	f8a7 20a8 	strh.w	r2, [r7, #168]	; 0xa8
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000c4c:	440b      	add	r3, r1
 8000c4e:	f803 2c4c 	strb.w	r2, [r3, #-76]
  			if(i > GSM_RX_BUFFER_SIZE - 1) break;
 8000c52:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000c56:	2b3f      	cmp	r3, #63	; 0x3f
 8000c58:	d808      	bhi.n	8000c6c <main+0x4f8>
  			HAL_Delay(1);
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f000 fc7c 	bl	8001558 <HAL_Delay>
  		while(dbg_available())
 8000c60:	f000 fbac 	bl	80013bc <dbg_available>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1e4      	bne.n	8000c34 <main+0x4c0>
 8000c6a:	e000      	b.n	8000c6e <main+0x4fa>
  			if(i > GSM_RX_BUFFER_SIZE - 1) break;
 8000c6c:	bf00      	nop
  		}

  		clear_string(buf);
 8000c6e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fc42 	bl	80004fc <clear_string>
  		snprintf(str, GSM_RX_BUFFER_SIZE, "%s\r\n", buf);
 8000c78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c7c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000c80:	4a0c      	ldr	r2, [pc, #48]	; (8000cb4 <main+0x540>)
 8000c82:	2140      	movs	r1, #64	; 0x40
 8000c84:	f002 f930 	bl	8002ee8 <sniprintf>
  		HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fa5d 	bl	800014c <strlen>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <main+0x544>)
 8000ca0:	f001 ff33 	bl	8002b0a <HAL_UART_Transmit>
  	if(flag == 1)
 8000ca4:	e5ca      	b.n	800083c <main+0xc8>
 8000ca6:	bf00      	nop
 8000ca8:	08003a3c 	.word	0x08003a3c
 8000cac:	20000164 	.word	0x20000164
 8000cb0:	08003a4c 	.word	0x08003a4c
 8000cb4:	08003a50 	.word	0x08003a50
 8000cb8:	200001a4 	.word	0x200001a4

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b090      	sub	sp, #64	; 0x40
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0318 	add.w	r3, r7, #24
 8000cc6:	2228      	movs	r2, #40	; 0x28
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 f904 	bl	8002ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cec:	2301      	movs	r3, #1
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cfa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d00:	f107 0318 	add.w	r3, r7, #24
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 ff0d 	bl	8001b24 <HAL_RCC_OscConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d10:	f000 f906 	bl	8000f20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d14:	230f      	movs	r3, #15
 8000d16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 f978 	bl	8002024 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d3a:	f000 f8f1 	bl	8000f20 <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3740      	adds	r7, #64	; 0x40
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000d66:	4a1e      	ldr	r2, [pc, #120]	; (8000de0 <MX_TIM4_Init+0x98>)
 8000d68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000d6c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000d70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000d7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d8c:	4813      	ldr	r0, [pc, #76]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000d8e:	f001 fae3 	bl	8002358 <HAL_TIM_Base_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000d98:	f000 f8c2 	bl	8000f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	4619      	mov	r1, r3
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000daa:	f001 fc2b 	bl	8002604 <HAL_TIM_ConfigClockSource>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000db4:	f000 f8b4 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_TIM4_Init+0x94>)
 8000dc6:	f001 fdfd 	bl	80029c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000dd0:	f000 f8a6 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000124 	.word	0x20000124
 8000de0:	40000800 	.word	0x40000800

08000de4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_USART1_UART_Init+0x4c>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <MX_USART1_UART_Init+0x50>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_USART1_UART_Init+0x4c>)
 8000df0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000df4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_USART1_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_USART1_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_USART1_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_USART1_UART_Init+0x4c>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_USART1_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_USART1_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_USART1_UART_Init+0x4c>)
 8000e1c:	f001 fe28 	bl	8002a70 <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e26:	f000 f87b 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200001a4 	.word	0x200001a4
 8000e34:	40013800 	.word	0x40013800

08000e38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <MX_USART3_UART_Init+0x50>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e44:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000e48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e70:	f001 fdfe 	bl	8002a70 <HAL_UART_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e7a:	f000 f851 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000164 	.word	0x20000164
 8000e88:	40004800 	.word	0x40004800

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 0310 	add.w	r3, r7, #16
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_GPIO_Init+0x8c>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <MX_GPIO_Init+0x8c>)
 8000ea6:	f043 0320 	orr.w	r3, r3, #32
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_GPIO_Init+0x8c>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0320 	and.w	r3, r3, #32
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_GPIO_Init+0x8c>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <MX_GPIO_Init+0x8c>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_GPIO_Init+0x8c>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_GPIO_Init+0x8c>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <MX_GPIO_Init+0x8c>)
 8000ed6:	f043 0308 	orr.w	r3, r3, #8
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_GPIO_Init+0x8c>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0308 	and.w	r3, r3, #8
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ON_RELAY_Pin|ER_LED_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2181      	movs	r1, #129	; 0x81
 8000eec:	480b      	ldr	r0, [pc, #44]	; (8000f1c <MX_GPIO_Init+0x90>)
 8000eee:	f000 fde9 	bl	8001ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ON_RELAY_Pin ER_LED_Pin */
  GPIO_InitStruct.Pin = ON_RELAY_Pin|ER_LED_Pin;
 8000ef2:	2381      	movs	r3, #129	; 0x81
 8000ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4619      	mov	r1, r3
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <MX_GPIO_Init+0x90>)
 8000f0a:	f000 fc57 	bl	80017bc <HAL_GPIO_Init>

}
 8000f0e:	bf00      	nop
 8000f10:	3720      	adds	r7, #32
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010800 	.word	0x40010800

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_MspInit+0x5c>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <HAL_MspInit+0x5c>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6193      	str	r3, [r2, #24]
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_MspInit+0x5c>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_MspInit+0x5c>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_MspInit+0x5c>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f54:	61d3      	str	r3, [r2, #28]
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_MspInit+0x5c>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_MspInit+0x60>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_MspInit+0x60>)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010000 	.word	0x40010000

08000f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <HAL_TIM_Base_MspInit+0x44>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d113      	bne.n	8000fca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_TIM_Base_MspInit+0x48>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <HAL_TIM_Base_MspInit+0x48>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_TIM_Base_MspInit+0x48>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 7, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2107      	movs	r1, #7
 8000fbe:	201e      	movs	r0, #30
 8000fc0:	f000 fbc5 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fc4:	201e      	movs	r0, #30
 8000fc6:	f000 fbde 	bl	8001786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40000800 	.word	0x40000800
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0318 	add.w	r3, r7, #24
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a40      	ldr	r2, [pc, #256]	; (80010f8 <HAL_UART_MspInit+0x11c>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d13a      	bne.n	8001072 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffc:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <HAL_UART_MspInit+0x120>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a3e      	ldr	r2, [pc, #248]	; (80010fc <HAL_UART_MspInit+0x120>)
 8001002:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <HAL_UART_MspInit+0x120>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b39      	ldr	r3, [pc, #228]	; (80010fc <HAL_UART_MspInit+0x120>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a38      	ldr	r2, [pc, #224]	; (80010fc <HAL_UART_MspInit+0x120>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <HAL_UART_MspInit+0x120>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800102c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	4619      	mov	r1, r3
 8001040:	482f      	ldr	r0, [pc, #188]	; (8001100 <HAL_UART_MspInit+0x124>)
 8001042:	f000 fbbb 	bl	80017bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	4619      	mov	r1, r3
 800105a:	4829      	ldr	r0, [pc, #164]	; (8001100 <HAL_UART_MspInit+0x124>)
 800105c:	f000 fbae 	bl	80017bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2105      	movs	r1, #5
 8001064:	2025      	movs	r0, #37	; 0x25
 8001066:	f000 fb72 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800106a:	2025      	movs	r0, #37	; 0x25
 800106c:	f000 fb8b 	bl	8001786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001070:	e03e      	b.n	80010f0 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a23      	ldr	r2, [pc, #140]	; (8001104 <HAL_UART_MspInit+0x128>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d139      	bne.n	80010f0 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <HAL_UART_MspInit+0x120>)
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <HAL_UART_MspInit+0x120>)
 8001082:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001086:	61d3      	str	r3, [r2, #28]
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_UART_MspInit+0x120>)
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_UART_MspInit+0x120>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a18      	ldr	r2, [pc, #96]	; (80010fc <HAL_UART_MspInit+0x120>)
 800109a:	f043 0308 	orr.w	r3, r3, #8
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_UART_MspInit+0x120>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 0318 	add.w	r3, r7, #24
 80010be:	4619      	mov	r1, r3
 80010c0:	4811      	ldr	r0, [pc, #68]	; (8001108 <HAL_UART_MspInit+0x12c>)
 80010c2:	f000 fb7b 	bl	80017bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0318 	add.w	r3, r7, #24
 80010d8:	4619      	mov	r1, r3
 80010da:	480b      	ldr	r0, [pc, #44]	; (8001108 <HAL_UART_MspInit+0x12c>)
 80010dc:	f000 fb6e 	bl	80017bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2106      	movs	r1, #6
 80010e4:	2027      	movs	r0, #39	; 0x27
 80010e6:	f000 fb32 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010ea:	2027      	movs	r0, #39	; 0x27
 80010ec:	f000 fb4b 	bl	8001786 <HAL_NVIC_EnableIRQ>
}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	; 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40013800 	.word	0x40013800
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010800 	.word	0x40010800
 8001104:	40004800 	.word	0x40004800
 8001108:	40010c00 	.word	0x40010c00

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <HardFault_Handler+0x4>

0800111e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <MemManage_Handler+0x4>

08001124 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <BusFault_Handler+0x4>

0800112a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <UsageFault_Handler+0x4>

08001130 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 f9e2 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <TIM4_IRQHandler+0x10>)
 8001166:	f001 f945 	bl	80023f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000124 	.word	0x20000124

08001174 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <USART1_IRQHandler+0x64>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	2b00      	cmp	r3, #0
 8001186:	d022      	beq.n	80011ce <USART1_IRQHandler+0x5a>
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <USART1_IRQHandler+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	f003 0320 	and.w	r3, r3, #32
 8001192:	2b00      	cmp	r3, #0
 8001194:	d01b      	beq.n	80011ce <USART1_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <USART1_IRQHandler+0x64>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <USART1_IRQHandler+0x68>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	3301      	adds	r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ac:	71bb      	strb	r3, [r7, #6]

		if(i != gsm_rx_buffer_tail)
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <USART1_IRQHandler+0x6c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	79ba      	ldrb	r2, [r7, #6]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d009      	beq.n	80011ce <USART1_IRQHandler+0x5a>
		{
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <USART1_IRQHandler+0x68>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4619      	mov	r1, r3
 80011c2:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <USART1_IRQHandler+0x70>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	5453      	strb	r3, [r2, r1]
			gsm_rx_buffer_head = i;
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <USART1_IRQHandler+0x68>)
 80011ca:	79bb      	ldrb	r3, [r7, #6]
 80011cc:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 80011ce:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	200001a4 	.word	0x200001a4
 80011dc:	20000094 	.word	0x20000094
 80011e0:	20000095 	.word	0x20000095
 80011e4:	20000098 	.word	0x20000098

080011e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if(((huart3.Instance->SR & USART_SR_RXNE) != RESET) && ((huart3.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <USART3_IRQHandler+0x64>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0320 	and.w	r3, r3, #32
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d022      	beq.n	8001242 <USART3_IRQHandler+0x5a>
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <USART3_IRQHandler+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	2b00      	cmp	r3, #0
 8001208:	d01b      	beq.n	8001242 <USART3_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart3.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <USART3_IRQHandler+0x64>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <USART3_IRQHandler+0x68>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	3301      	adds	r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001220:	71bb      	strb	r3, [r7, #6]

		if(i != dbg_rx_buffer_tail)
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <USART3_IRQHandler+0x6c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	79ba      	ldrb	r2, [r7, #6]
 800122a:	429a      	cmp	r2, r3
 800122c:	d009      	beq.n	8001242 <USART3_IRQHandler+0x5a>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <USART3_IRQHandler+0x68>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4619      	mov	r1, r3
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <USART3_IRQHandler+0x70>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <USART3_IRQHandler+0x68>)
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8001242:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	20000164 	.word	0x20000164
 8001250:	200000d8 	.word	0x200000d8
 8001254:	200000d9 	.word	0x200000d9
 8001258:	200000dc 	.word	0x200000dc

0800125c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001264:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <_sbrk+0x5c>)
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <_sbrk+0x60>)
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <_sbrk+0x64>)
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <_sbrk+0x68>)
 800127c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	429a      	cmp	r2, r3
 800128a:	d207      	bcs.n	800129c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800128c:	f001 fdfa 	bl	8002e84 <__errno>
 8001290:	4603      	mov	r3, r0
 8001292:	220c      	movs	r2, #12
 8001294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800129a:	e009      	b.n	80012b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <_sbrk+0x64>)
 80012ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20005000 	.word	0x20005000
 80012bc:	00000400 	.word	0x00000400
 80012c0:	20000090 	.word	0x20000090
 80012c4:	200001f8 	.word	0x200001f8

080012c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <SystemInit+0x5c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a14      	ldr	r2, [pc, #80]	; (8001324 <SystemInit+0x5c>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <SystemInit+0x5c>)
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	4911      	ldr	r1, [pc, #68]	; (8001324 <SystemInit+0x5c>)
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <SystemInit+0x60>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <SystemInit+0x5c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <SystemInit+0x5c>)
 80012ea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80012ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <SystemInit+0x5c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <SystemInit+0x5c>)
 80012fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <SystemInit+0x5c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <SystemInit+0x5c>)
 8001306:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800130a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <SystemInit+0x5c>)
 800130e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001312:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <SystemInit+0x64>)
 8001316:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800131a:	609a      	str	r2, [r3, #8]
#endif 
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000
 8001328:	f8ff0000 	.word	0xf8ff0000
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <gsm_available>:
volatile gsm_rx_buffer_index_t gsm_rx_buffer_head = 0;
volatile gsm_rx_buffer_index_t gsm_rx_buffer_tail = 0;
uint8_t gsm_rx_buffer[GSM_RX_BUFFER_SIZE] = {0,};

int16_t gsm_available(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
	return ((uint16_t)(GSM_RX_BUFFER_SIZE + gsm_rx_buffer_head - gsm_rx_buffer_tail)) % GSM_RX_BUFFER_SIZE;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <gsm_available+0x2c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	b29a      	uxth	r2, r3
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <gsm_available+0x30>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	b29b      	uxth	r3, r3
 8001348:	3340      	adds	r3, #64	; 0x40
 800134a:	b29b      	uxth	r3, r3
 800134c:	b21b      	sxth	r3, r3
 800134e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001352:	b21b      	sxth	r3, r3
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	20000094 	.word	0x20000094
 8001360:	20000095 	.word	0x20000095

08001364 <gsm_read>:

int16_t gsm_read(void)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
	if(gsm_rx_buffer_head == gsm_rx_buffer_tail)
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <gsm_read+0x4c>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <gsm_read+0x50>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	429a      	cmp	r2, r3
 8001378:	d102      	bne.n	8001380 <gsm_read+0x1c>
	{
		return -1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800137e:	e012      	b.n	80013a6 <gsm_read+0x42>
	}
	else
	{
		unsigned char c = gsm_rx_buffer[gsm_rx_buffer_tail];
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <gsm_read+0x50>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	461a      	mov	r2, r3
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <gsm_read+0x54>)
 800138a:	5c9b      	ldrb	r3, [r3, r2]
 800138c:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_tail = (gsm_rx_buffer_index_t)(gsm_rx_buffer_tail + 1) % GSM_RX_BUFFER_SIZE;
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <gsm_read+0x50>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	3301      	adds	r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <gsm_read+0x50>)
 80013a0:	701a      	strb	r2, [r3, #0]
		return c;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	b21b      	sxth	r3, r3
	}
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000094 	.word	0x20000094
 80013b4:	20000095 	.word	0x20000095
 80013b8:	20000098 	.word	0x20000098

080013bc <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <dbg_available+0x2c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <dbg_available+0x30>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	3340      	adds	r3, #64	; 0x40
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013de:	b21b      	sxth	r3, r3
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	200000d8 	.word	0x200000d8
 80013ec:	200000d9 	.word	0x200000d9

080013f0 <dbg_read>:

int16_t dbg_read(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <dbg_read+0x4c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b10      	ldr	r3, [pc, #64]	; (8001440 <dbg_read+0x50>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	429a      	cmp	r2, r3
 8001404:	d102      	bne.n	800140c <dbg_read+0x1c>
	{
		return -1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800140a:	e012      	b.n	8001432 <dbg_read+0x42>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <dbg_read+0x50>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <dbg_read+0x54>)
 8001416:	5c9b      	ldrb	r3, [r3, r2]
 8001418:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <dbg_read+0x50>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	3301      	adds	r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <dbg_read+0x50>)
 800142c:	701a      	strb	r2, [r3, #0]
		return c;
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	b21b      	sxth	r3, r3
	}
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	200000d8 	.word	0x200000d8
 8001440:	200000d9 	.word	0x200000d9
 8001444:	200000dc 	.word	0x200000dc

08001448 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001448:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800144a:	e003      	b.n	8001454 <LoopCopyDataInit>

0800144c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800144e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001450:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001452:	3104      	adds	r1, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001454:	480a      	ldr	r0, [pc, #40]	; (8001480 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001458:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800145a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800145c:	d3f6      	bcc.n	800144c <CopyDataInit>
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001460:	e002      	b.n	8001468 <LoopFillZerobss>

08001462 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001464:	f842 3b04 	str.w	r3, [r2], #4

08001468 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800146a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800146c:	d3f9      	bcc.n	8001462 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800146e:	f7ff ff2b 	bl	80012c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001472:	f001 fd0d 	bl	8002e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001476:	f7ff f97d 	bl	8000774 <main>
  bx lr
 800147a:	4770      	bx	lr
  ldr r3, =_sidata
 800147c:	08003abc 	.word	0x08003abc
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001484:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001488:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800148c:	200001f8 	.word	0x200001f8

08001490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_2_IRQHandler>
	...

08001494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_Init+0x28>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_Init+0x28>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 f947 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f000 f808 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff fd3c 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40022000 	.word	0x40022000

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f95f 	bl	80017a2 <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014fc:	f000 f927 	bl	800174e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000000 	.word	0x20000000
 8001518:	20000008 	.word	0x20000008
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_IncTick+0x1c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_IncTick+0x20>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a03      	ldr	r2, [pc, #12]	; (8001540 <HAL_IncTick+0x20>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	20000008 	.word	0x20000008
 8001540:	200001e4 	.word	0x200001e4

08001544 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b02      	ldr	r3, [pc, #8]	; (8001554 <HAL_GetTick+0x10>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	200001e4 	.word	0x200001e4

08001558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff fff0 	bl	8001544 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001570:	d005      	beq.n	800157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_Delay+0x44>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800157e:	bf00      	nop
 8001580:	f7ff ffe0 	bl	8001544 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8f7      	bhi.n	8001580 <HAL_Delay+0x28>
  {
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000008 	.word	0x20000008

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4906      	ldr	r1, [pc, #24]	; (8001638 <__NVIC_EnableIRQ+0x34>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100

0800163c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db0a      	blt.n	8001666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	490c      	ldr	r1, [pc, #48]	; (8001688 <__NVIC_SetPriority+0x4c>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	0112      	lsls	r2, r2, #4
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	440b      	add	r3, r1
 8001660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001664:	e00a      	b.n	800167c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4908      	ldr	r1, [pc, #32]	; (800168c <__NVIC_SetPriority+0x50>)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	3b04      	subs	r3, #4
 8001674:	0112      	lsls	r2, r2, #4
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	440b      	add	r3, r1
 800167a:	761a      	strb	r2, [r3, #24]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000e100 	.word	0xe000e100
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f1c3 0307 	rsb	r3, r3, #7
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	bf28      	it	cs
 80016ae:	2304      	movcs	r3, #4
 80016b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3304      	adds	r3, #4
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d902      	bls.n	80016c0 <NVIC_EncodePriority+0x30>
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3b03      	subs	r3, #3
 80016be:	e000      	b.n	80016c2 <NVIC_EncodePriority+0x32>
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	401a      	ands	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	43d9      	mvns	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	4313      	orrs	r3, r2
         );
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3724      	adds	r7, #36	; 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001704:	d301      	bcc.n	800170a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001706:	2301      	movs	r3, #1
 8001708:	e00f      	b.n	800172a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <SysTick_Config+0x40>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001712:	210f      	movs	r1, #15
 8001714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001718:	f7ff ff90 	bl	800163c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <SysTick_Config+0x40>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <SysTick_Config+0x40>)
 8001724:	2207      	movs	r2, #7
 8001726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	e000e010 	.word	0xe000e010

08001738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff2d 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001760:	f7ff ff42 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 8001764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	6978      	ldr	r0, [r7, #20]
 800176c:	f7ff ff90 	bl	8001690 <NVIC_EncodePriority>
 8001770:	4602      	mov	r2, r0
 8001772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff5f 	bl	800163c <__NVIC_SetPriority>
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff35 	bl	8001604 <__NVIC_EnableIRQ>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ffa2 	bl	80016f4 <SysTick_Config>
 80017b0:	4603      	mov	r3, r0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b480      	push	{r7}
 80017be:	b08b      	sub	sp, #44	; 0x2c
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ce:	e169      	b.n	8001aa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d0:	2201      	movs	r2, #1
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f040 8158 	bne.w	8001a9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4a9a      	ldr	r2, [pc, #616]	; (8001a5c <HAL_GPIO_Init+0x2a0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d05e      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 80017f8:	4a98      	ldr	r2, [pc, #608]	; (8001a5c <HAL_GPIO_Init+0x2a0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d875      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 80017fe:	4a98      	ldr	r2, [pc, #608]	; (8001a60 <HAL_GPIO_Init+0x2a4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d058      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 8001804:	4a96      	ldr	r2, [pc, #600]	; (8001a60 <HAL_GPIO_Init+0x2a4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d86f      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 800180a:	4a96      	ldr	r2, [pc, #600]	; (8001a64 <HAL_GPIO_Init+0x2a8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d052      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 8001810:	4a94      	ldr	r2, [pc, #592]	; (8001a64 <HAL_GPIO_Init+0x2a8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d869      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 8001816:	4a94      	ldr	r2, [pc, #592]	; (8001a68 <HAL_GPIO_Init+0x2ac>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d04c      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 800181c:	4a92      	ldr	r2, [pc, #584]	; (8001a68 <HAL_GPIO_Init+0x2ac>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d863      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 8001822:	4a92      	ldr	r2, [pc, #584]	; (8001a6c <HAL_GPIO_Init+0x2b0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d046      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 8001828:	4a90      	ldr	r2, [pc, #576]	; (8001a6c <HAL_GPIO_Init+0x2b0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d85d      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 800182e:	2b12      	cmp	r3, #18
 8001830:	d82a      	bhi.n	8001888 <HAL_GPIO_Init+0xcc>
 8001832:	2b12      	cmp	r3, #18
 8001834:	d859      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <HAL_GPIO_Init+0x80>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	080018b7 	.word	0x080018b7
 8001840:	08001891 	.word	0x08001891
 8001844:	080018a3 	.word	0x080018a3
 8001848:	080018e5 	.word	0x080018e5
 800184c:	080018eb 	.word	0x080018eb
 8001850:	080018eb 	.word	0x080018eb
 8001854:	080018eb 	.word	0x080018eb
 8001858:	080018eb 	.word	0x080018eb
 800185c:	080018eb 	.word	0x080018eb
 8001860:	080018eb 	.word	0x080018eb
 8001864:	080018eb 	.word	0x080018eb
 8001868:	080018eb 	.word	0x080018eb
 800186c:	080018eb 	.word	0x080018eb
 8001870:	080018eb 	.word	0x080018eb
 8001874:	080018eb 	.word	0x080018eb
 8001878:	080018eb 	.word	0x080018eb
 800187c:	080018eb 	.word	0x080018eb
 8001880:	08001899 	.word	0x08001899
 8001884:	080018ad 	.word	0x080018ad
 8001888:	4a79      	ldr	r2, [pc, #484]	; (8001a70 <HAL_GPIO_Init+0x2b4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800188e:	e02c      	b.n	80018ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e029      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	3304      	adds	r3, #4
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e024      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	3308      	adds	r3, #8
 80018a8:	623b      	str	r3, [r7, #32]
          break;
 80018aa:	e01f      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	330c      	adds	r3, #12
 80018b2:	623b      	str	r3, [r7, #32]
          break;
 80018b4:	e01a      	b.n	80018ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d102      	bne.n	80018c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018be:	2304      	movs	r3, #4
 80018c0:	623b      	str	r3, [r7, #32]
          break;
 80018c2:	e013      	b.n	80018ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d105      	bne.n	80018d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018cc:	2308      	movs	r3, #8
 80018ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	611a      	str	r2, [r3, #16]
          break;
 80018d6:	e009      	b.n	80018ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d8:	2308      	movs	r3, #8
 80018da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	615a      	str	r2, [r3, #20]
          break;
 80018e2:	e003      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e000      	b.n	80018ec <HAL_GPIO_Init+0x130>
          break;
 80018ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2bff      	cmp	r3, #255	; 0xff
 80018f0:	d801      	bhi.n	80018f6 <HAL_GPIO_Init+0x13a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	e001      	b.n	80018fa <HAL_GPIO_Init+0x13e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3304      	adds	r3, #4
 80018fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2bff      	cmp	r3, #255	; 0xff
 8001900:	d802      	bhi.n	8001908 <HAL_GPIO_Init+0x14c>
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	e002      	b.n	800190e <HAL_GPIO_Init+0x152>
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	3b08      	subs	r3, #8
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	210f      	movs	r1, #15
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	401a      	ands	r2, r3
 8001920:	6a39      	ldr	r1, [r7, #32]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	431a      	orrs	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 80b1 	beq.w	8001a9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800193c:	4b4d      	ldr	r3, [pc, #308]	; (8001a74 <HAL_GPIO_Init+0x2b8>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a4c      	ldr	r2, [pc, #304]	; (8001a74 <HAL_GPIO_Init+0x2b8>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <HAL_GPIO_Init+0x2b8>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001954:	4a48      	ldr	r2, [pc, #288]	; (8001a78 <HAL_GPIO_Init+0x2bc>)
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001960:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a40      	ldr	r2, [pc, #256]	; (8001a7c <HAL_GPIO_Init+0x2c0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d013      	beq.n	80019a8 <HAL_GPIO_Init+0x1ec>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a3f      	ldr	r2, [pc, #252]	; (8001a80 <HAL_GPIO_Init+0x2c4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00d      	beq.n	80019a4 <HAL_GPIO_Init+0x1e8>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a3e      	ldr	r2, [pc, #248]	; (8001a84 <HAL_GPIO_Init+0x2c8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d007      	beq.n	80019a0 <HAL_GPIO_Init+0x1e4>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a3d      	ldr	r2, [pc, #244]	; (8001a88 <HAL_GPIO_Init+0x2cc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d101      	bne.n	800199c <HAL_GPIO_Init+0x1e0>
 8001998:	2303      	movs	r3, #3
 800199a:	e006      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 800199c:	2304      	movs	r3, #4
 800199e:	e004      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 80019a0:	2302      	movs	r3, #2
 80019a2:	e002      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 80019a8:	2300      	movs	r3, #0
 80019aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ac:	f002 0203 	and.w	r2, r2, #3
 80019b0:	0092      	lsls	r2, r2, #2
 80019b2:	4093      	lsls	r3, r2
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ba:	492f      	ldr	r1, [pc, #188]	; (8001a78 <HAL_GPIO_Init+0x2bc>)
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	3302      	adds	r3, #2
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019d4:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	492c      	ldr	r1, [pc, #176]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019e2:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4928      	ldr	r1, [pc, #160]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019fc:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	4922      	ldr	r1, [pc, #136]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	491e      	ldr	r1, [pc, #120]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	4918      	ldr	r1, [pc, #96]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	4914      	ldr	r1, [pc, #80]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d021      	beq.n	8001a90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	490e      	ldr	r1, [pc, #56]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60cb      	str	r3, [r1, #12]
 8001a58:	e021      	b.n	8001a9e <HAL_GPIO_Init+0x2e2>
 8001a5a:	bf00      	nop
 8001a5c:	10320000 	.word	0x10320000
 8001a60:	10310000 	.word	0x10310000
 8001a64:	10220000 	.word	0x10220000
 8001a68:	10210000 	.word	0x10210000
 8001a6c:	10120000 	.word	0x10120000
 8001a70:	10110000 	.word	0x10110000
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010000 	.word	0x40010000
 8001a7c:	40010800 	.word	0x40010800
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	40011000 	.word	0x40011000
 8001a88:	40011400 	.word	0x40011400
 8001a8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_GPIO_Init+0x304>)
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	4909      	ldr	r1, [pc, #36]	; (8001ac0 <HAL_GPIO_Init+0x304>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f47f ae8e 	bne.w	80017d0 <HAL_GPIO_Init+0x14>
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	372c      	adds	r7, #44	; 0x2c
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	40010400 	.word	0x40010400

08001ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad4:	787b      	ldrb	r3, [r7, #1]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ae0:	e003      	b.n	8001aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ae2:	887b      	ldrh	r3, [r7, #2]
 8001ae4:	041a      	lsls	r2, r3, #16
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	611a      	str	r2, [r3, #16]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b0c:	887a      	ldrh	r2, [r7, #2]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001b12:	e002      	b.n	8001b1a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b14:	887a      	ldrh	r2, [r7, #2]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	611a      	str	r2, [r3, #16]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e26c      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 8087 	beq.w	8001c52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b44:	4b92      	ldr	r3, [pc, #584]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d00c      	beq.n	8001b6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b50:	4b8f      	ldr	r3, [pc, #572]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d112      	bne.n	8001b82 <HAL_RCC_OscConfig+0x5e>
 8001b5c:	4b8c      	ldr	r3, [pc, #560]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b68:	d10b      	bne.n	8001b82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6a:	4b89      	ldr	r3, [pc, #548]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d06c      	beq.n	8001c50 <HAL_RCC_OscConfig+0x12c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d168      	bne.n	8001c50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e246      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x76>
 8001b8c:	4b80      	ldr	r3, [pc, #512]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a7f      	ldr	r2, [pc, #508]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e02e      	b.n	8001bf8 <HAL_RCC_OscConfig+0xd4>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x98>
 8001ba2:	4b7b      	ldr	r3, [pc, #492]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a7a      	ldr	r2, [pc, #488]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b78      	ldr	r3, [pc, #480]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a77      	ldr	r2, [pc, #476]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e01d      	b.n	8001bf8 <HAL_RCC_OscConfig+0xd4>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0xbc>
 8001bc6:	4b72      	ldr	r3, [pc, #456]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a71      	ldr	r2, [pc, #452]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b6f      	ldr	r3, [pc, #444]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a6e      	ldr	r2, [pc, #440]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0xd4>
 8001be0:	4b6b      	ldr	r3, [pc, #428]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a6a      	ldr	r2, [pc, #424]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a67      	ldr	r2, [pc, #412]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff fca0 	bl	8001544 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff fc9c 	bl	8001544 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	; 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e1fa      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0xe4>
 8001c26:	e014      	b.n	8001c52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff fc8c 	bl	8001544 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff fc88 	bl	8001544 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e1e6      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x10c>
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d063      	beq.n	8001d26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00b      	beq.n	8001c82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c6a:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d11c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x18c>
 8001c76:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d116      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c82:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_RCC_OscConfig+0x176>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e1ba      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9a:	4b3d      	ldr	r3, [pc, #244]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4939      	ldr	r1, [pc, #228]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cae:	e03a      	b.n	8001d26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d020      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb8:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <HAL_RCC_OscConfig+0x270>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7ff fc41 	bl	8001544 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc6:	f7ff fc3d 	bl	8001544 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e19b      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4927      	ldr	r1, [pc, #156]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff fc20 	bl	8001544 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d08:	f7ff fc1c 	bl	8001544 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e17a      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d03a      	beq.n	8001da8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d019      	beq.n	8001d6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7ff fc00 	bl	8001544 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d48:	f7ff fbfc 	bl	8001544 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e15a      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f000 fad8 	bl	800231c <RCC_Delay>
 8001d6c:	e01c      	b.n	8001da8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d74:	f7ff fbe6 	bl	8001544 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7a:	e00f      	b.n	8001d9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7ff fbe2 	bl	8001544 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d908      	bls.n	8001d9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e140      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	42420000 	.word	0x42420000
 8001d98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	4b9e      	ldr	r3, [pc, #632]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1e9      	bne.n	8001d7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80a6 	beq.w	8001f02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dba:	4b97      	ldr	r3, [pc, #604]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10d      	bne.n	8001de2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4b94      	ldr	r3, [pc, #592]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4a93      	ldr	r2, [pc, #588]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	61d3      	str	r3, [r2, #28]
 8001dd2:	4b91      	ldr	r3, [pc, #580]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dde:	2301      	movs	r3, #1
 8001de0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de2:	4b8e      	ldr	r3, [pc, #568]	; (800201c <HAL_RCC_OscConfig+0x4f8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d118      	bne.n	8001e20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dee:	4b8b      	ldr	r3, [pc, #556]	; (800201c <HAL_RCC_OscConfig+0x4f8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a8a      	ldr	r2, [pc, #552]	; (800201c <HAL_RCC_OscConfig+0x4f8>)
 8001df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff fba3 	bl	8001544 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e02:	f7ff fb9f 	bl	8001544 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b64      	cmp	r3, #100	; 0x64
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0fd      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	4b81      	ldr	r3, [pc, #516]	; (800201c <HAL_RCC_OscConfig+0x4f8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x312>
 8001e28:	4b7b      	ldr	r3, [pc, #492]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a7a      	ldr	r2, [pc, #488]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6213      	str	r3, [r2, #32]
 8001e34:	e02d      	b.n	8001e92 <HAL_RCC_OscConfig+0x36e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x334>
 8001e3e:	4b76      	ldr	r3, [pc, #472]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a75      	ldr	r2, [pc, #468]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	4b73      	ldr	r3, [pc, #460]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a72      	ldr	r2, [pc, #456]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	6213      	str	r3, [r2, #32]
 8001e56:	e01c      	b.n	8001e92 <HAL_RCC_OscConfig+0x36e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d10c      	bne.n	8001e7a <HAL_RCC_OscConfig+0x356>
 8001e60:	4b6d      	ldr	r3, [pc, #436]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a6c      	ldr	r2, [pc, #432]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	f043 0304 	orr.w	r3, r3, #4
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	4b6a      	ldr	r3, [pc, #424]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a69      	ldr	r2, [pc, #420]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6213      	str	r3, [r2, #32]
 8001e78:	e00b      	b.n	8001e92 <HAL_RCC_OscConfig+0x36e>
 8001e7a:	4b67      	ldr	r3, [pc, #412]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a66      	ldr	r2, [pc, #408]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	6213      	str	r3, [r2, #32]
 8001e86:	4b64      	ldr	r3, [pc, #400]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	4a63      	ldr	r2, [pc, #396]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	f023 0304 	bic.w	r3, r3, #4
 8001e90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d015      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9a:	f7ff fb53 	bl	8001544 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7ff fb4f 	bl	8001544 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0ab      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	4b57      	ldr	r3, [pc, #348]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ee      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x37e>
 8001ec4:	e014      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec6:	f7ff fb3d 	bl	8001544 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7ff fb39 	bl	8001544 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e095      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee4:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1ee      	bne.n	8001ece <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d105      	bne.n	8001f02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef6:	4b48      	ldr	r3, [pc, #288]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4a47      	ldr	r2, [pc, #284]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8081 	beq.w	800200e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0c:	4b42      	ldr	r3, [pc, #264]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d061      	beq.n	8001fdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d146      	bne.n	8001fae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b3f      	ldr	r3, [pc, #252]	; (8002020 <HAL_RCC_OscConfig+0x4fc>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7ff fb0d 	bl	8001544 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7ff fb09 	bl	8001544 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e067      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	4b35      	ldr	r3, [pc, #212]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f54:	d108      	bne.n	8001f68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f56:	4b30      	ldr	r3, [pc, #192]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	492d      	ldr	r1, [pc, #180]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f68:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a19      	ldr	r1, [r3, #32]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	4927      	ldr	r1, [pc, #156]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_RCC_OscConfig+0x4fc>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7ff fadd 	bl	8001544 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8e:	f7ff fad9 	bl	8001544 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e037      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x46a>
 8001fac:	e02f      	b.n	800200e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fae:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <HAL_RCC_OscConfig+0x4fc>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fac6 	bl	8001544 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7ff fac2 	bl	8001544 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e020      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x498>
 8001fda:	e018      	b.n	800200e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e013      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d001      	beq.n	800200e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	40007000 	.word	0x40007000
 8002020:	42420060 	.word	0x42420060

08002024 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0d0      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002038:	4b6a      	ldr	r3, [pc, #424]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d910      	bls.n	8002068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b67      	ldr	r3, [pc, #412]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	4965      	ldr	r1, [pc, #404]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b63      	ldr	r3, [pc, #396]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0b8      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d020      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002080:	4b59      	ldr	r3, [pc, #356]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a58      	ldr	r2, [pc, #352]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800208a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002098:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a52      	ldr	r2, [pc, #328]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a4:	4b50      	ldr	r3, [pc, #320]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	494d      	ldr	r1, [pc, #308]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d040      	beq.n	8002144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d115      	bne.n	8002102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e07f      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e2:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d109      	bne.n	8002102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e073      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f2:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e06b      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002102:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f023 0203 	bic.w	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4936      	ldr	r1, [pc, #216]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002114:	f7ff fa16 	bl	8001544 <HAL_GetTick>
 8002118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211a:	e00a      	b.n	8002132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211c:	f7ff fa12 	bl	8001544 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	; 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e053      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 020c 	and.w	r2, r3, #12
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	429a      	cmp	r2, r3
 8002142:	d1eb      	bne.n	800211c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002144:	4b27      	ldr	r3, [pc, #156]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d210      	bcs.n	8002174 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 0207 	bic.w	r2, r3, #7
 800215a:	4922      	ldr	r1, [pc, #136]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e032      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4916      	ldr	r1, [pc, #88]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	490e      	ldr	r1, [pc, #56]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021b2:	f000 f821 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 80021b6:	4602      	mov	r2, r0
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	490a      	ldr	r1, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 80021c4:	5ccb      	ldrb	r3, [r1, r3]
 80021c6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ca:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1cc>)
 80021cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_RCC_ClockConfig+0x1d0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff f974 	bl	80014c0 <HAL_InitTick>

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40022000 	.word	0x40022000
 80021e8:	40021000 	.word	0x40021000
 80021ec:	08003a68 	.word	0x08003a68
 80021f0:	20000000 	.word	0x20000000
 80021f4:	20000004 	.word	0x20000004

080021f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f8:	b490      	push	{r4, r7}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021fe:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002200:	1d3c      	adds	r4, r7, #4
 8002202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002208:	f240 2301 	movw	r3, #513	; 0x201
 800220c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002222:	4b22      	ldr	r3, [pc, #136]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b04      	cmp	r3, #4
 8002230:	d002      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0x40>
 8002232:	2b08      	cmp	r3, #8
 8002234:	d003      	beq.n	800223e <HAL_RCC_GetSysClockFreq+0x46>
 8002236:	e02d      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800223a:	623b      	str	r3, [r7, #32]
      break;
 800223c:	e02d      	b.n	800229a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	0c9b      	lsrs	r3, r3, #18
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800224a:	4413      	add	r3, r2
 800224c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002250:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	0c5b      	lsrs	r3, r3, #17
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800226a:	4413      	add	r3, r2
 800226c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002270:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002276:	fb02 f203 	mul.w	r2, r2, r3
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	e004      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	623b      	str	r3, [r7, #32]
      break;
 8002292:	e002      	b.n	800229a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002296:	623b      	str	r3, [r7, #32]
      break;
 8002298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229a:	6a3b      	ldr	r3, [r7, #32]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3728      	adds	r7, #40	; 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc90      	pop	{r4, r7}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	08003a58 	.word	0x08003a58
 80022ac:	40021000 	.word	0x40021000
 80022b0:	007a1200 	.word	0x007a1200
 80022b4:	003d0900 	.word	0x003d0900

080022b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b02      	ldr	r3, [pc, #8]	; (80022c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	20000000 	.word	0x20000000

080022cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022d0:	f7ff fff2 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	4903      	ldr	r1, [pc, #12]	; (80022f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	08003a78 	.word	0x08003a78

080022f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022f8:	f7ff ffde 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	0adb      	lsrs	r3, r3, #11
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	4903      	ldr	r1, [pc, #12]	; (8002318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800230a:	5ccb      	ldrb	r3, [r1, r3]
 800230c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002310:	4618      	mov	r0, r3
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	08003a78 	.word	0x08003a78

0800231c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <RCC_Delay+0x34>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <RCC_Delay+0x38>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	0a5b      	lsrs	r3, r3, #9
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002338:	bf00      	nop
  }
  while (Delay --);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1e5a      	subs	r2, r3, #1
 800233e:	60fa      	str	r2, [r7, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f9      	bne.n	8002338 <RCC_Delay+0x1c>
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20000000 	.word	0x20000000
 8002354:	10624dd3 	.word	0x10624dd3

08002358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e01d      	b.n	80023a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7fe fe06 	bl	8000f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3304      	adds	r3, #4
 8002394:	4619      	mov	r1, r3
 8002396:	4610      	mov	r0, r2
 8002398:	f000 fa1c 	bl	80027d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0201 	orr.w	r2, r2, #1
 80023c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b06      	cmp	r3, #6
 80023d6:	d007      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b02      	cmp	r3, #2
 8002408:	d122      	bne.n	8002450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b02      	cmp	r3, #2
 8002416:	d11b      	bne.n	8002450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0202 	mvn.w	r2, #2
 8002420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f9b1 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 800243c:	e005      	b.n	800244a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f9a4 	bl	800278c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f9b3 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b04      	cmp	r3, #4
 800245c:	d122      	bne.n	80024a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b04      	cmp	r3, #4
 800246a:	d11b      	bne.n	80024a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0204 	mvn.w	r2, #4
 8002474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2202      	movs	r2, #2
 800247a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f987 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f97a 	bl	800278c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f989 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d122      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d11b      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0208 	mvn.w	r2, #8
 80024c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2204      	movs	r2, #4
 80024ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f95d 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 80024e4:	e005      	b.n	80024f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f950 	bl	800278c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f95f 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b10      	cmp	r3, #16
 8002504:	d122      	bne.n	800254c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b10      	cmp	r3, #16
 8002512:	d11b      	bne.n	800254c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0210 	mvn.w	r2, #16
 800251c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2208      	movs	r2, #8
 8002522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f933 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 8002538:	e005      	b.n	8002546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f926 	bl	800278c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f935 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d10e      	bne.n	8002578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d107      	bne.n	8002578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0201 	mvn.w	r2, #1
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe f800 	bl	8000578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002582:	2b80      	cmp	r3, #128	; 0x80
 8002584:	d10e      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002590:	2b80      	cmp	r3, #128	; 0x80
 8002592:	d107      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800259c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fa5d 	bl	8002a5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ae:	2b40      	cmp	r3, #64	; 0x40
 80025b0:	d10e      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025bc:	2b40      	cmp	r3, #64	; 0x40
 80025be:	d107      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f8f9 	bl	80027c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d10e      	bne.n	80025fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d107      	bne.n	80025fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0220 	mvn.w	r2, #32
 80025f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fa28 	bl	8002a4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_TIM_ConfigClockSource+0x18>
 8002618:	2302      	movs	r3, #2
 800261a:	e0b3      	b.n	8002784 <HAL_TIM_ConfigClockSource+0x180>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800263a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002642:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002654:	d03e      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0xd0>
 8002656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265a:	f200 8087 	bhi.w	800276c <HAL_TIM_ConfigClockSource+0x168>
 800265e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002662:	f000 8085 	beq.w	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266a:	d87f      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x168>
 800266c:	2b70      	cmp	r3, #112	; 0x70
 800266e:	d01a      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0xa2>
 8002670:	2b70      	cmp	r3, #112	; 0x70
 8002672:	d87b      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x168>
 8002674:	2b60      	cmp	r3, #96	; 0x60
 8002676:	d050      	beq.n	800271a <HAL_TIM_ConfigClockSource+0x116>
 8002678:	2b60      	cmp	r3, #96	; 0x60
 800267a:	d877      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x168>
 800267c:	2b50      	cmp	r3, #80	; 0x50
 800267e:	d03c      	beq.n	80026fa <HAL_TIM_ConfigClockSource+0xf6>
 8002680:	2b50      	cmp	r3, #80	; 0x50
 8002682:	d873      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x168>
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d058      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x136>
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	d86f      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x168>
 800268c:	2b30      	cmp	r3, #48	; 0x30
 800268e:	d064      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x156>
 8002690:	2b30      	cmp	r3, #48	; 0x30
 8002692:	d86b      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x168>
 8002694:	2b20      	cmp	r3, #32
 8002696:	d060      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x156>
 8002698:	2b20      	cmp	r3, #32
 800269a:	d867      	bhi.n	800276c <HAL_TIM_ConfigClockSource+0x168>
 800269c:	2b00      	cmp	r3, #0
 800269e:	d05c      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x156>
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d05a      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80026a4:	e062      	b.n	800276c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6899      	ldr	r1, [r3, #8]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f000 f966 	bl	8002986 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	609a      	str	r2, [r3, #8]
      break;
 80026d2:	e04e      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	6899      	ldr	r1, [r3, #8]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f000 f94f 	bl	8002986 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026f6:	609a      	str	r2, [r3, #8]
      break;
 80026f8:	e03b      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6859      	ldr	r1, [r3, #4]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	461a      	mov	r2, r3
 8002708:	f000 f8c6 	bl	8002898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2150      	movs	r1, #80	; 0x50
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f91d 	bl	8002952 <TIM_ITRx_SetConfig>
      break;
 8002718:	e02b      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	461a      	mov	r2, r3
 8002728:	f000 f8e4 	bl	80028f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2160      	movs	r1, #96	; 0x60
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f90d 	bl	8002952 <TIM_ITRx_SetConfig>
      break;
 8002738:	e01b      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	461a      	mov	r2, r3
 8002748:	f000 f8a6 	bl	8002898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2140      	movs	r1, #64	; 0x40
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f8fd 	bl	8002952 <TIM_ITRx_SetConfig>
      break;
 8002758:	e00b      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	4610      	mov	r0, r2
 8002766:	f000 f8f4 	bl	8002952 <TIM_ITRx_SetConfig>
      break;
 800276a:	e002      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800276c:	bf00      	nop
 800276e:	e000      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002770:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a29      	ldr	r2, [pc, #164]	; (800288c <TIM_Base_SetConfig+0xb8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00b      	beq.n	8002804 <TIM_Base_SetConfig+0x30>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f2:	d007      	beq.n	8002804 <TIM_Base_SetConfig+0x30>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a26      	ldr	r2, [pc, #152]	; (8002890 <TIM_Base_SetConfig+0xbc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d003      	beq.n	8002804 <TIM_Base_SetConfig+0x30>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a25      	ldr	r2, [pc, #148]	; (8002894 <TIM_Base_SetConfig+0xc0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d108      	bne.n	8002816 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a1c      	ldr	r2, [pc, #112]	; (800288c <TIM_Base_SetConfig+0xb8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00b      	beq.n	8002836 <TIM_Base_SetConfig+0x62>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002824:	d007      	beq.n	8002836 <TIM_Base_SetConfig+0x62>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a19      	ldr	r2, [pc, #100]	; (8002890 <TIM_Base_SetConfig+0xbc>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d003      	beq.n	8002836 <TIM_Base_SetConfig+0x62>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a18      	ldr	r2, [pc, #96]	; (8002894 <TIM_Base_SetConfig+0xc0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d108      	bne.n	8002848 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800283c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a07      	ldr	r2, [pc, #28]	; (800288c <TIM_Base_SetConfig+0xb8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d103      	bne.n	800287c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	615a      	str	r2, [r3, #20]
}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	40012c00 	.word	0x40012c00
 8002890:	40000400 	.word	0x40000400
 8002894:	40000800 	.word	0x40000800

08002898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f023 0201 	bic.w	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f023 030a 	bic.w	r3, r3, #10
 80028d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	621a      	str	r2, [r3, #32]
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f023 0210 	bic.w	r2, r3, #16
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800291e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	031b      	lsls	r3, r3, #12
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002930:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	621a      	str	r2, [r3, #32]
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002952:	b480      	push	{r7}
 8002954:	b085      	sub	sp, #20
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	f043 0307 	orr.w	r3, r3, #7
 8002974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	609a      	str	r2, [r3, #8]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002986:	b480      	push	{r7}
 8002988:	b087      	sub	sp, #28
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	021a      	lsls	r2, r3, #8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	609a      	str	r2, [r3, #8]
}
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029d8:	2302      	movs	r3, #2
 80029da:	e032      	b.n	8002a42 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a14:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e03f      	b.n	8002b02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe faa0 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2224      	movs	r2, #36	; 0x24
 8002aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f90b 	bl	8002cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b088      	sub	sp, #32
 8002b0e:	af02      	add	r7, sp, #8
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	603b      	str	r3, [r7, #0]
 8002b16:	4613      	mov	r3, r2
 8002b18:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	f040 8083 	bne.w	8002c32 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_UART_Transmit+0x2e>
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e07b      	b.n	8002c34 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_UART_Transmit+0x40>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e074      	b.n	8002c34 <HAL_UART_Transmit+0x12a>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2221      	movs	r2, #33	; 0x21
 8002b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002b60:	f7fe fcf0 	bl	8001544 <HAL_GetTick>
 8002b64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	88fa      	ldrh	r2, [r7, #6]
 8002b6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	88fa      	ldrh	r2, [r7, #6]
 8002b70:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b72:	e042      	b.n	8002bfa <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8a:	d122      	bne.n	8002bd2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2200      	movs	r2, #0
 8002b94:	2180      	movs	r1, #128	; 0x80
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f850 	bl	8002c3c <UART_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e046      	b.n	8002c34 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bb8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	e017      	b.n	8002bfa <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	e013      	b.n	8002bfa <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2180      	movs	r1, #128	; 0x80
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f82d 	bl	8002c3c <UART_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e023      	b.n	8002c34 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	60ba      	str	r2, [r7, #8]
 8002bf2:	781a      	ldrb	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1b7      	bne.n	8002b74 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2140      	movs	r1, #64	; 0x40
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f814 	bl	8002c3c <UART_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e00a      	b.n	8002c34 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e000      	b.n	8002c34 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002c32:	2302      	movs	r3, #2
  }
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c4c:	e02c      	b.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c54:	d028      	beq.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <UART_WaitOnFlagUntilTimeout+0x30>
 8002c5c:	f7fe fc72 	bl	8001544 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d21d      	bcs.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e00f      	b.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d0c3      	beq.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d0a:	f023 030c 	bic.w	r3, r3, #12
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	68f9      	ldr	r1, [r7, #12]
 8002d14:	430b      	orrs	r3, r1
 8002d16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a52      	ldr	r2, [pc, #328]	; (8002e7c <UART_SetConfig+0x1ac>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d14e      	bne.n	8002dd6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d38:	f7ff fadc 	bl	80022f4 <HAL_RCC_GetPCLK2Freq>
 8002d3c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	009a      	lsls	r2, r3, #2
 8002d48:	441a      	add	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d54:	4a4a      	ldr	r2, [pc, #296]	; (8002e80 <UART_SetConfig+0x1b0>)
 8002d56:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	0119      	lsls	r1, r3, #4
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	009a      	lsls	r2, r3, #2
 8002d68:	441a      	add	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d74:	4b42      	ldr	r3, [pc, #264]	; (8002e80 <UART_SetConfig+0x1b0>)
 8002d76:	fba3 0302 	umull	r0, r3, r3, r2
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	2064      	movs	r0, #100	; 0x64
 8002d7e:	fb00 f303 	mul.w	r3, r0, r3
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	3332      	adds	r3, #50	; 0x32
 8002d88:	4a3d      	ldr	r2, [pc, #244]	; (8002e80 <UART_SetConfig+0x1b0>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d94:	4419      	add	r1, r3
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009a      	lsls	r2, r3, #2
 8002da0:	441a      	add	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dac:	4b34      	ldr	r3, [pc, #208]	; (8002e80 <UART_SetConfig+0x1b0>)
 8002dae:	fba3 0302 	umull	r0, r3, r3, r2
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	2064      	movs	r0, #100	; 0x64
 8002db6:	fb00 f303 	mul.w	r3, r0, r3
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	3332      	adds	r3, #50	; 0x32
 8002dc0:	4a2f      	ldr	r2, [pc, #188]	; (8002e80 <UART_SetConfig+0x1b0>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	f003 020f 	and.w	r2, r3, #15
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	440a      	add	r2, r1
 8002dd2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002dd4:	e04d      	b.n	8002e72 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dd6:	f7ff fa79 	bl	80022cc <HAL_RCC_GetPCLK1Freq>
 8002dda:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	009a      	lsls	r2, r3, #2
 8002de6:	441a      	add	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df2:	4a23      	ldr	r2, [pc, #140]	; (8002e80 <UART_SetConfig+0x1b0>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	0119      	lsls	r1, r3, #4
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	009a      	lsls	r2, r3, #2
 8002e06:	441a      	add	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <UART_SetConfig+0x1b0>)
 8002e14:	fba3 0302 	umull	r0, r3, r3, r2
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	2064      	movs	r0, #100	; 0x64
 8002e1c:	fb00 f303 	mul.w	r3, r0, r3
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	3332      	adds	r3, #50	; 0x32
 8002e26:	4a16      	ldr	r2, [pc, #88]	; (8002e80 <UART_SetConfig+0x1b0>)
 8002e28:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e32:	4419      	add	r1, r3
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009a      	lsls	r2, r3, #2
 8002e3e:	441a      	add	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <UART_SetConfig+0x1b0>)
 8002e4c:	fba3 0302 	umull	r0, r3, r3, r2
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	2064      	movs	r0, #100	; 0x64
 8002e54:	fb00 f303 	mul.w	r3, r0, r3
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	3332      	adds	r3, #50	; 0x32
 8002e5e:	4a08      	ldr	r2, [pc, #32]	; (8002e80 <UART_SetConfig+0x1b0>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	f003 020f 	and.w	r2, r3, #15
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	440a      	add	r2, r1
 8002e70:	609a      	str	r2, [r3, #8]
}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40013800 	.word	0x40013800
 8002e80:	51eb851f 	.word	0x51eb851f

08002e84 <__errno>:
 8002e84:	4b01      	ldr	r3, [pc, #4]	; (8002e8c <__errno+0x8>)
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	2000000c 	.word	0x2000000c

08002e90 <__libc_init_array>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	2600      	movs	r6, #0
 8002e94:	4d0c      	ldr	r5, [pc, #48]	; (8002ec8 <__libc_init_array+0x38>)
 8002e96:	4c0d      	ldr	r4, [pc, #52]	; (8002ecc <__libc_init_array+0x3c>)
 8002e98:	1b64      	subs	r4, r4, r5
 8002e9a:	10a4      	asrs	r4, r4, #2
 8002e9c:	42a6      	cmp	r6, r4
 8002e9e:	d109      	bne.n	8002eb4 <__libc_init_array+0x24>
 8002ea0:	f000 fc94 	bl	80037cc <_init>
 8002ea4:	2600      	movs	r6, #0
 8002ea6:	4d0a      	ldr	r5, [pc, #40]	; (8002ed0 <__libc_init_array+0x40>)
 8002ea8:	4c0a      	ldr	r4, [pc, #40]	; (8002ed4 <__libc_init_array+0x44>)
 8002eaa:	1b64      	subs	r4, r4, r5
 8002eac:	10a4      	asrs	r4, r4, #2
 8002eae:	42a6      	cmp	r6, r4
 8002eb0:	d105      	bne.n	8002ebe <__libc_init_array+0x2e>
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb8:	4798      	blx	r3
 8002eba:	3601      	adds	r6, #1
 8002ebc:	e7ee      	b.n	8002e9c <__libc_init_array+0xc>
 8002ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec2:	4798      	blx	r3
 8002ec4:	3601      	adds	r6, #1
 8002ec6:	e7f2      	b.n	8002eae <__libc_init_array+0x1e>
 8002ec8:	08003ab4 	.word	0x08003ab4
 8002ecc:	08003ab4 	.word	0x08003ab4
 8002ed0:	08003ab4 	.word	0x08003ab4
 8002ed4:	08003ab8 	.word	0x08003ab8

08002ed8 <memset>:
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4402      	add	r2, r0
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d100      	bne.n	8002ee2 <memset+0xa>
 8002ee0:	4770      	bx	lr
 8002ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ee6:	e7f9      	b.n	8002edc <memset+0x4>

08002ee8 <sniprintf>:
 8002ee8:	b40c      	push	{r2, r3}
 8002eea:	b530      	push	{r4, r5, lr}
 8002eec:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <sniprintf+0x64>)
 8002eee:	1e0c      	subs	r4, r1, #0
 8002ef0:	681d      	ldr	r5, [r3, #0]
 8002ef2:	b09d      	sub	sp, #116	; 0x74
 8002ef4:	da08      	bge.n	8002f08 <sniprintf+0x20>
 8002ef6:	238b      	movs	r3, #139	; 0x8b
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002efc:	602b      	str	r3, [r5, #0]
 8002efe:	b01d      	add	sp, #116	; 0x74
 8002f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f04:	b002      	add	sp, #8
 8002f06:	4770      	bx	lr
 8002f08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002f0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002f10:	bf0c      	ite	eq
 8002f12:	4623      	moveq	r3, r4
 8002f14:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002f18:	9304      	str	r3, [sp, #16]
 8002f1a:	9307      	str	r3, [sp, #28]
 8002f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f20:	9002      	str	r0, [sp, #8]
 8002f22:	9006      	str	r0, [sp, #24]
 8002f24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002f28:	4628      	mov	r0, r5
 8002f2a:	ab21      	add	r3, sp, #132	; 0x84
 8002f2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002f2e:	a902      	add	r1, sp, #8
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	f000 f88d 	bl	8003050 <_svfiprintf_r>
 8002f36:	1c43      	adds	r3, r0, #1
 8002f38:	bfbc      	itt	lt
 8002f3a:	238b      	movlt	r3, #139	; 0x8b
 8002f3c:	602b      	strlt	r3, [r5, #0]
 8002f3e:	2c00      	cmp	r4, #0
 8002f40:	d0dd      	beq.n	8002efe <sniprintf+0x16>
 8002f42:	2200      	movs	r2, #0
 8002f44:	9b02      	ldr	r3, [sp, #8]
 8002f46:	701a      	strb	r2, [r3, #0]
 8002f48:	e7d9      	b.n	8002efe <sniprintf+0x16>
 8002f4a:	bf00      	nop
 8002f4c:	2000000c 	.word	0x2000000c

08002f50 <strchr>:
 8002f50:	4603      	mov	r3, r0
 8002f52:	b2c9      	uxtb	r1, r1
 8002f54:	4618      	mov	r0, r3
 8002f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f5a:	b112      	cbz	r2, 8002f62 <strchr+0x12>
 8002f5c:	428a      	cmp	r2, r1
 8002f5e:	d1f9      	bne.n	8002f54 <strchr+0x4>
 8002f60:	4770      	bx	lr
 8002f62:	2900      	cmp	r1, #0
 8002f64:	bf18      	it	ne
 8002f66:	2000      	movne	r0, #0
 8002f68:	4770      	bx	lr

08002f6a <strstr>:
 8002f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f6c:	780c      	ldrb	r4, [r1, #0]
 8002f6e:	b164      	cbz	r4, 8002f8a <strstr+0x20>
 8002f70:	4603      	mov	r3, r0
 8002f72:	781a      	ldrb	r2, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	1c5e      	adds	r6, r3, #1
 8002f78:	b90a      	cbnz	r2, 8002f7e <strstr+0x14>
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	e005      	b.n	8002f8a <strstr+0x20>
 8002f7e:	4294      	cmp	r4, r2
 8002f80:	d108      	bne.n	8002f94 <strstr+0x2a>
 8002f82:	460d      	mov	r5, r1
 8002f84:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8002f88:	b902      	cbnz	r2, 8002f8c <strstr+0x22>
 8002f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f8c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002f90:	4297      	cmp	r7, r2
 8002f92:	d0f7      	beq.n	8002f84 <strstr+0x1a>
 8002f94:	4633      	mov	r3, r6
 8002f96:	e7ec      	b.n	8002f72 <strstr+0x8>

08002f98 <__ssputs_r>:
 8002f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f9c:	688e      	ldr	r6, [r1, #8]
 8002f9e:	4682      	mov	sl, r0
 8002fa0:	429e      	cmp	r6, r3
 8002fa2:	460c      	mov	r4, r1
 8002fa4:	4690      	mov	r8, r2
 8002fa6:	461f      	mov	r7, r3
 8002fa8:	d838      	bhi.n	800301c <__ssputs_r+0x84>
 8002faa:	898a      	ldrh	r2, [r1, #12]
 8002fac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002fb0:	d032      	beq.n	8003018 <__ssputs_r+0x80>
 8002fb2:	6825      	ldr	r5, [r4, #0]
 8002fb4:	6909      	ldr	r1, [r1, #16]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	eba5 0901 	sub.w	r9, r5, r1
 8002fbc:	6965      	ldr	r5, [r4, #20]
 8002fbe:	444b      	add	r3, r9
 8002fc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fc8:	106d      	asrs	r5, r5, #1
 8002fca:	429d      	cmp	r5, r3
 8002fcc:	bf38      	it	cc
 8002fce:	461d      	movcc	r5, r3
 8002fd0:	0553      	lsls	r3, r2, #21
 8002fd2:	d531      	bpl.n	8003038 <__ssputs_r+0xa0>
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	f000 fb53 	bl	8003680 <_malloc_r>
 8002fda:	4606      	mov	r6, r0
 8002fdc:	b950      	cbnz	r0, 8002ff4 <__ssputs_r+0x5c>
 8002fde:	230c      	movs	r3, #12
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fe4:	f8ca 3000 	str.w	r3, [sl]
 8002fe8:	89a3      	ldrh	r3, [r4, #12]
 8002fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fee:	81a3      	strh	r3, [r4, #12]
 8002ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ff4:	464a      	mov	r2, r9
 8002ff6:	6921      	ldr	r1, [r4, #16]
 8002ff8:	f000 face 	bl	8003598 <memcpy>
 8002ffc:	89a3      	ldrh	r3, [r4, #12]
 8002ffe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003006:	81a3      	strh	r3, [r4, #12]
 8003008:	6126      	str	r6, [r4, #16]
 800300a:	444e      	add	r6, r9
 800300c:	6026      	str	r6, [r4, #0]
 800300e:	463e      	mov	r6, r7
 8003010:	6165      	str	r5, [r4, #20]
 8003012:	eba5 0509 	sub.w	r5, r5, r9
 8003016:	60a5      	str	r5, [r4, #8]
 8003018:	42be      	cmp	r6, r7
 800301a:	d900      	bls.n	800301e <__ssputs_r+0x86>
 800301c:	463e      	mov	r6, r7
 800301e:	4632      	mov	r2, r6
 8003020:	4641      	mov	r1, r8
 8003022:	6820      	ldr	r0, [r4, #0]
 8003024:	f000 fac6 	bl	80035b4 <memmove>
 8003028:	68a3      	ldr	r3, [r4, #8]
 800302a:	6822      	ldr	r2, [r4, #0]
 800302c:	1b9b      	subs	r3, r3, r6
 800302e:	4432      	add	r2, r6
 8003030:	2000      	movs	r0, #0
 8003032:	60a3      	str	r3, [r4, #8]
 8003034:	6022      	str	r2, [r4, #0]
 8003036:	e7db      	b.n	8002ff0 <__ssputs_r+0x58>
 8003038:	462a      	mov	r2, r5
 800303a:	f000 fb7b 	bl	8003734 <_realloc_r>
 800303e:	4606      	mov	r6, r0
 8003040:	2800      	cmp	r0, #0
 8003042:	d1e1      	bne.n	8003008 <__ssputs_r+0x70>
 8003044:	4650      	mov	r0, sl
 8003046:	6921      	ldr	r1, [r4, #16]
 8003048:	f000 face 	bl	80035e8 <_free_r>
 800304c:	e7c7      	b.n	8002fde <__ssputs_r+0x46>
	...

08003050 <_svfiprintf_r>:
 8003050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003054:	4698      	mov	r8, r3
 8003056:	898b      	ldrh	r3, [r1, #12]
 8003058:	4607      	mov	r7, r0
 800305a:	061b      	lsls	r3, r3, #24
 800305c:	460d      	mov	r5, r1
 800305e:	4614      	mov	r4, r2
 8003060:	b09d      	sub	sp, #116	; 0x74
 8003062:	d50e      	bpl.n	8003082 <_svfiprintf_r+0x32>
 8003064:	690b      	ldr	r3, [r1, #16]
 8003066:	b963      	cbnz	r3, 8003082 <_svfiprintf_r+0x32>
 8003068:	2140      	movs	r1, #64	; 0x40
 800306a:	f000 fb09 	bl	8003680 <_malloc_r>
 800306e:	6028      	str	r0, [r5, #0]
 8003070:	6128      	str	r0, [r5, #16]
 8003072:	b920      	cbnz	r0, 800307e <_svfiprintf_r+0x2e>
 8003074:	230c      	movs	r3, #12
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800307c:	e0d1      	b.n	8003222 <_svfiprintf_r+0x1d2>
 800307e:	2340      	movs	r3, #64	; 0x40
 8003080:	616b      	str	r3, [r5, #20]
 8003082:	2300      	movs	r3, #0
 8003084:	9309      	str	r3, [sp, #36]	; 0x24
 8003086:	2320      	movs	r3, #32
 8003088:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800308c:	2330      	movs	r3, #48	; 0x30
 800308e:	f04f 0901 	mov.w	r9, #1
 8003092:	f8cd 800c 	str.w	r8, [sp, #12]
 8003096:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800323c <_svfiprintf_r+0x1ec>
 800309a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800309e:	4623      	mov	r3, r4
 80030a0:	469a      	mov	sl, r3
 80030a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030a6:	b10a      	cbz	r2, 80030ac <_svfiprintf_r+0x5c>
 80030a8:	2a25      	cmp	r2, #37	; 0x25
 80030aa:	d1f9      	bne.n	80030a0 <_svfiprintf_r+0x50>
 80030ac:	ebba 0b04 	subs.w	fp, sl, r4
 80030b0:	d00b      	beq.n	80030ca <_svfiprintf_r+0x7a>
 80030b2:	465b      	mov	r3, fp
 80030b4:	4622      	mov	r2, r4
 80030b6:	4629      	mov	r1, r5
 80030b8:	4638      	mov	r0, r7
 80030ba:	f7ff ff6d 	bl	8002f98 <__ssputs_r>
 80030be:	3001      	adds	r0, #1
 80030c0:	f000 80aa 	beq.w	8003218 <_svfiprintf_r+0x1c8>
 80030c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030c6:	445a      	add	r2, fp
 80030c8:	9209      	str	r2, [sp, #36]	; 0x24
 80030ca:	f89a 3000 	ldrb.w	r3, [sl]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80a2 	beq.w	8003218 <_svfiprintf_r+0x1c8>
 80030d4:	2300      	movs	r3, #0
 80030d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030de:	f10a 0a01 	add.w	sl, sl, #1
 80030e2:	9304      	str	r3, [sp, #16]
 80030e4:	9307      	str	r3, [sp, #28]
 80030e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030ea:	931a      	str	r3, [sp, #104]	; 0x68
 80030ec:	4654      	mov	r4, sl
 80030ee:	2205      	movs	r2, #5
 80030f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030f4:	4851      	ldr	r0, [pc, #324]	; (800323c <_svfiprintf_r+0x1ec>)
 80030f6:	f000 fa41 	bl	800357c <memchr>
 80030fa:	9a04      	ldr	r2, [sp, #16]
 80030fc:	b9d8      	cbnz	r0, 8003136 <_svfiprintf_r+0xe6>
 80030fe:	06d0      	lsls	r0, r2, #27
 8003100:	bf44      	itt	mi
 8003102:	2320      	movmi	r3, #32
 8003104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003108:	0711      	lsls	r1, r2, #28
 800310a:	bf44      	itt	mi
 800310c:	232b      	movmi	r3, #43	; 0x2b
 800310e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003112:	f89a 3000 	ldrb.w	r3, [sl]
 8003116:	2b2a      	cmp	r3, #42	; 0x2a
 8003118:	d015      	beq.n	8003146 <_svfiprintf_r+0xf6>
 800311a:	4654      	mov	r4, sl
 800311c:	2000      	movs	r0, #0
 800311e:	f04f 0c0a 	mov.w	ip, #10
 8003122:	9a07      	ldr	r2, [sp, #28]
 8003124:	4621      	mov	r1, r4
 8003126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800312a:	3b30      	subs	r3, #48	; 0x30
 800312c:	2b09      	cmp	r3, #9
 800312e:	d94e      	bls.n	80031ce <_svfiprintf_r+0x17e>
 8003130:	b1b0      	cbz	r0, 8003160 <_svfiprintf_r+0x110>
 8003132:	9207      	str	r2, [sp, #28]
 8003134:	e014      	b.n	8003160 <_svfiprintf_r+0x110>
 8003136:	eba0 0308 	sub.w	r3, r0, r8
 800313a:	fa09 f303 	lsl.w	r3, r9, r3
 800313e:	4313      	orrs	r3, r2
 8003140:	46a2      	mov	sl, r4
 8003142:	9304      	str	r3, [sp, #16]
 8003144:	e7d2      	b.n	80030ec <_svfiprintf_r+0x9c>
 8003146:	9b03      	ldr	r3, [sp, #12]
 8003148:	1d19      	adds	r1, r3, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	9103      	str	r1, [sp, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	bfbb      	ittet	lt
 8003152:	425b      	neglt	r3, r3
 8003154:	f042 0202 	orrlt.w	r2, r2, #2
 8003158:	9307      	strge	r3, [sp, #28]
 800315a:	9307      	strlt	r3, [sp, #28]
 800315c:	bfb8      	it	lt
 800315e:	9204      	strlt	r2, [sp, #16]
 8003160:	7823      	ldrb	r3, [r4, #0]
 8003162:	2b2e      	cmp	r3, #46	; 0x2e
 8003164:	d10c      	bne.n	8003180 <_svfiprintf_r+0x130>
 8003166:	7863      	ldrb	r3, [r4, #1]
 8003168:	2b2a      	cmp	r3, #42	; 0x2a
 800316a:	d135      	bne.n	80031d8 <_svfiprintf_r+0x188>
 800316c:	9b03      	ldr	r3, [sp, #12]
 800316e:	3402      	adds	r4, #2
 8003170:	1d1a      	adds	r2, r3, #4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	9203      	str	r2, [sp, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	bfb8      	it	lt
 800317a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800317e:	9305      	str	r3, [sp, #20]
 8003180:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800324c <_svfiprintf_r+0x1fc>
 8003184:	2203      	movs	r2, #3
 8003186:	4650      	mov	r0, sl
 8003188:	7821      	ldrb	r1, [r4, #0]
 800318a:	f000 f9f7 	bl	800357c <memchr>
 800318e:	b140      	cbz	r0, 80031a2 <_svfiprintf_r+0x152>
 8003190:	2340      	movs	r3, #64	; 0x40
 8003192:	eba0 000a 	sub.w	r0, r0, sl
 8003196:	fa03 f000 	lsl.w	r0, r3, r0
 800319a:	9b04      	ldr	r3, [sp, #16]
 800319c:	3401      	adds	r4, #1
 800319e:	4303      	orrs	r3, r0
 80031a0:	9304      	str	r3, [sp, #16]
 80031a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031a6:	2206      	movs	r2, #6
 80031a8:	4825      	ldr	r0, [pc, #148]	; (8003240 <_svfiprintf_r+0x1f0>)
 80031aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031ae:	f000 f9e5 	bl	800357c <memchr>
 80031b2:	2800      	cmp	r0, #0
 80031b4:	d038      	beq.n	8003228 <_svfiprintf_r+0x1d8>
 80031b6:	4b23      	ldr	r3, [pc, #140]	; (8003244 <_svfiprintf_r+0x1f4>)
 80031b8:	bb1b      	cbnz	r3, 8003202 <_svfiprintf_r+0x1b2>
 80031ba:	9b03      	ldr	r3, [sp, #12]
 80031bc:	3307      	adds	r3, #7
 80031be:	f023 0307 	bic.w	r3, r3, #7
 80031c2:	3308      	adds	r3, #8
 80031c4:	9303      	str	r3, [sp, #12]
 80031c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031c8:	4433      	add	r3, r6
 80031ca:	9309      	str	r3, [sp, #36]	; 0x24
 80031cc:	e767      	b.n	800309e <_svfiprintf_r+0x4e>
 80031ce:	460c      	mov	r4, r1
 80031d0:	2001      	movs	r0, #1
 80031d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80031d6:	e7a5      	b.n	8003124 <_svfiprintf_r+0xd4>
 80031d8:	2300      	movs	r3, #0
 80031da:	f04f 0c0a 	mov.w	ip, #10
 80031de:	4619      	mov	r1, r3
 80031e0:	3401      	adds	r4, #1
 80031e2:	9305      	str	r3, [sp, #20]
 80031e4:	4620      	mov	r0, r4
 80031e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031ea:	3a30      	subs	r2, #48	; 0x30
 80031ec:	2a09      	cmp	r2, #9
 80031ee:	d903      	bls.n	80031f8 <_svfiprintf_r+0x1a8>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0c5      	beq.n	8003180 <_svfiprintf_r+0x130>
 80031f4:	9105      	str	r1, [sp, #20]
 80031f6:	e7c3      	b.n	8003180 <_svfiprintf_r+0x130>
 80031f8:	4604      	mov	r4, r0
 80031fa:	2301      	movs	r3, #1
 80031fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003200:	e7f0      	b.n	80031e4 <_svfiprintf_r+0x194>
 8003202:	ab03      	add	r3, sp, #12
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	462a      	mov	r2, r5
 8003208:	4638      	mov	r0, r7
 800320a:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <_svfiprintf_r+0x1f8>)
 800320c:	a904      	add	r1, sp, #16
 800320e:	f3af 8000 	nop.w
 8003212:	1c42      	adds	r2, r0, #1
 8003214:	4606      	mov	r6, r0
 8003216:	d1d6      	bne.n	80031c6 <_svfiprintf_r+0x176>
 8003218:	89ab      	ldrh	r3, [r5, #12]
 800321a:	065b      	lsls	r3, r3, #25
 800321c:	f53f af2c 	bmi.w	8003078 <_svfiprintf_r+0x28>
 8003220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003222:	b01d      	add	sp, #116	; 0x74
 8003224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003228:	ab03      	add	r3, sp, #12
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	462a      	mov	r2, r5
 800322e:	4638      	mov	r0, r7
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <_svfiprintf_r+0x1f8>)
 8003232:	a904      	add	r1, sp, #16
 8003234:	f000 f87c 	bl	8003330 <_printf_i>
 8003238:	e7eb      	b.n	8003212 <_svfiprintf_r+0x1c2>
 800323a:	bf00      	nop
 800323c:	08003a80 	.word	0x08003a80
 8003240:	08003a8a 	.word	0x08003a8a
 8003244:	00000000 	.word	0x00000000
 8003248:	08002f99 	.word	0x08002f99
 800324c:	08003a86 	.word	0x08003a86

08003250 <_printf_common>:
 8003250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003254:	4616      	mov	r6, r2
 8003256:	4699      	mov	r9, r3
 8003258:	688a      	ldr	r2, [r1, #8]
 800325a:	690b      	ldr	r3, [r1, #16]
 800325c:	4607      	mov	r7, r0
 800325e:	4293      	cmp	r3, r2
 8003260:	bfb8      	it	lt
 8003262:	4613      	movlt	r3, r2
 8003264:	6033      	str	r3, [r6, #0]
 8003266:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800326a:	460c      	mov	r4, r1
 800326c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003270:	b10a      	cbz	r2, 8003276 <_printf_common+0x26>
 8003272:	3301      	adds	r3, #1
 8003274:	6033      	str	r3, [r6, #0]
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	0699      	lsls	r1, r3, #26
 800327a:	bf42      	ittt	mi
 800327c:	6833      	ldrmi	r3, [r6, #0]
 800327e:	3302      	addmi	r3, #2
 8003280:	6033      	strmi	r3, [r6, #0]
 8003282:	6825      	ldr	r5, [r4, #0]
 8003284:	f015 0506 	ands.w	r5, r5, #6
 8003288:	d106      	bne.n	8003298 <_printf_common+0x48>
 800328a:	f104 0a19 	add.w	sl, r4, #25
 800328e:	68e3      	ldr	r3, [r4, #12]
 8003290:	6832      	ldr	r2, [r6, #0]
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	42ab      	cmp	r3, r5
 8003296:	dc28      	bgt.n	80032ea <_printf_common+0x9a>
 8003298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800329c:	1e13      	subs	r3, r2, #0
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	bf18      	it	ne
 80032a2:	2301      	movne	r3, #1
 80032a4:	0692      	lsls	r2, r2, #26
 80032a6:	d42d      	bmi.n	8003304 <_printf_common+0xb4>
 80032a8:	4649      	mov	r1, r9
 80032aa:	4638      	mov	r0, r7
 80032ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032b0:	47c0      	blx	r8
 80032b2:	3001      	adds	r0, #1
 80032b4:	d020      	beq.n	80032f8 <_printf_common+0xa8>
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	68e5      	ldr	r5, [r4, #12]
 80032ba:	f003 0306 	and.w	r3, r3, #6
 80032be:	2b04      	cmp	r3, #4
 80032c0:	bf18      	it	ne
 80032c2:	2500      	movne	r5, #0
 80032c4:	6832      	ldr	r2, [r6, #0]
 80032c6:	f04f 0600 	mov.w	r6, #0
 80032ca:	68a3      	ldr	r3, [r4, #8]
 80032cc:	bf08      	it	eq
 80032ce:	1aad      	subeq	r5, r5, r2
 80032d0:	6922      	ldr	r2, [r4, #16]
 80032d2:	bf08      	it	eq
 80032d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032d8:	4293      	cmp	r3, r2
 80032da:	bfc4      	itt	gt
 80032dc:	1a9b      	subgt	r3, r3, r2
 80032de:	18ed      	addgt	r5, r5, r3
 80032e0:	341a      	adds	r4, #26
 80032e2:	42b5      	cmp	r5, r6
 80032e4:	d11a      	bne.n	800331c <_printf_common+0xcc>
 80032e6:	2000      	movs	r0, #0
 80032e8:	e008      	b.n	80032fc <_printf_common+0xac>
 80032ea:	2301      	movs	r3, #1
 80032ec:	4652      	mov	r2, sl
 80032ee:	4649      	mov	r1, r9
 80032f0:	4638      	mov	r0, r7
 80032f2:	47c0      	blx	r8
 80032f4:	3001      	adds	r0, #1
 80032f6:	d103      	bne.n	8003300 <_printf_common+0xb0>
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003300:	3501      	adds	r5, #1
 8003302:	e7c4      	b.n	800328e <_printf_common+0x3e>
 8003304:	2030      	movs	r0, #48	; 0x30
 8003306:	18e1      	adds	r1, r4, r3
 8003308:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003312:	4422      	add	r2, r4
 8003314:	3302      	adds	r3, #2
 8003316:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800331a:	e7c5      	b.n	80032a8 <_printf_common+0x58>
 800331c:	2301      	movs	r3, #1
 800331e:	4622      	mov	r2, r4
 8003320:	4649      	mov	r1, r9
 8003322:	4638      	mov	r0, r7
 8003324:	47c0      	blx	r8
 8003326:	3001      	adds	r0, #1
 8003328:	d0e6      	beq.n	80032f8 <_printf_common+0xa8>
 800332a:	3601      	adds	r6, #1
 800332c:	e7d9      	b.n	80032e2 <_printf_common+0x92>
	...

08003330 <_printf_i>:
 8003330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003334:	460c      	mov	r4, r1
 8003336:	7e27      	ldrb	r7, [r4, #24]
 8003338:	4691      	mov	r9, r2
 800333a:	2f78      	cmp	r7, #120	; 0x78
 800333c:	4680      	mov	r8, r0
 800333e:	469a      	mov	sl, r3
 8003340:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003342:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003346:	d807      	bhi.n	8003358 <_printf_i+0x28>
 8003348:	2f62      	cmp	r7, #98	; 0x62
 800334a:	d80a      	bhi.n	8003362 <_printf_i+0x32>
 800334c:	2f00      	cmp	r7, #0
 800334e:	f000 80d9 	beq.w	8003504 <_printf_i+0x1d4>
 8003352:	2f58      	cmp	r7, #88	; 0x58
 8003354:	f000 80a4 	beq.w	80034a0 <_printf_i+0x170>
 8003358:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800335c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003360:	e03a      	b.n	80033d8 <_printf_i+0xa8>
 8003362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003366:	2b15      	cmp	r3, #21
 8003368:	d8f6      	bhi.n	8003358 <_printf_i+0x28>
 800336a:	a001      	add	r0, pc, #4	; (adr r0, 8003370 <_printf_i+0x40>)
 800336c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003370:	080033c9 	.word	0x080033c9
 8003374:	080033dd 	.word	0x080033dd
 8003378:	08003359 	.word	0x08003359
 800337c:	08003359 	.word	0x08003359
 8003380:	08003359 	.word	0x08003359
 8003384:	08003359 	.word	0x08003359
 8003388:	080033dd 	.word	0x080033dd
 800338c:	08003359 	.word	0x08003359
 8003390:	08003359 	.word	0x08003359
 8003394:	08003359 	.word	0x08003359
 8003398:	08003359 	.word	0x08003359
 800339c:	080034eb 	.word	0x080034eb
 80033a0:	0800340d 	.word	0x0800340d
 80033a4:	080034cd 	.word	0x080034cd
 80033a8:	08003359 	.word	0x08003359
 80033ac:	08003359 	.word	0x08003359
 80033b0:	0800350d 	.word	0x0800350d
 80033b4:	08003359 	.word	0x08003359
 80033b8:	0800340d 	.word	0x0800340d
 80033bc:	08003359 	.word	0x08003359
 80033c0:	08003359 	.word	0x08003359
 80033c4:	080034d5 	.word	0x080034d5
 80033c8:	680b      	ldr	r3, [r1, #0]
 80033ca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033ce:	1d1a      	adds	r2, r3, #4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	600a      	str	r2, [r1, #0]
 80033d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033d8:	2301      	movs	r3, #1
 80033da:	e0a4      	b.n	8003526 <_printf_i+0x1f6>
 80033dc:	6825      	ldr	r5, [r4, #0]
 80033de:	6808      	ldr	r0, [r1, #0]
 80033e0:	062e      	lsls	r6, r5, #24
 80033e2:	f100 0304 	add.w	r3, r0, #4
 80033e6:	d50a      	bpl.n	80033fe <_printf_i+0xce>
 80033e8:	6805      	ldr	r5, [r0, #0]
 80033ea:	600b      	str	r3, [r1, #0]
 80033ec:	2d00      	cmp	r5, #0
 80033ee:	da03      	bge.n	80033f8 <_printf_i+0xc8>
 80033f0:	232d      	movs	r3, #45	; 0x2d
 80033f2:	426d      	negs	r5, r5
 80033f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033f8:	230a      	movs	r3, #10
 80033fa:	485e      	ldr	r0, [pc, #376]	; (8003574 <_printf_i+0x244>)
 80033fc:	e019      	b.n	8003432 <_printf_i+0x102>
 80033fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003402:	6805      	ldr	r5, [r0, #0]
 8003404:	600b      	str	r3, [r1, #0]
 8003406:	bf18      	it	ne
 8003408:	b22d      	sxthne	r5, r5
 800340a:	e7ef      	b.n	80033ec <_printf_i+0xbc>
 800340c:	680b      	ldr	r3, [r1, #0]
 800340e:	6825      	ldr	r5, [r4, #0]
 8003410:	1d18      	adds	r0, r3, #4
 8003412:	6008      	str	r0, [r1, #0]
 8003414:	0628      	lsls	r0, r5, #24
 8003416:	d501      	bpl.n	800341c <_printf_i+0xec>
 8003418:	681d      	ldr	r5, [r3, #0]
 800341a:	e002      	b.n	8003422 <_printf_i+0xf2>
 800341c:	0669      	lsls	r1, r5, #25
 800341e:	d5fb      	bpl.n	8003418 <_printf_i+0xe8>
 8003420:	881d      	ldrh	r5, [r3, #0]
 8003422:	2f6f      	cmp	r7, #111	; 0x6f
 8003424:	bf0c      	ite	eq
 8003426:	2308      	moveq	r3, #8
 8003428:	230a      	movne	r3, #10
 800342a:	4852      	ldr	r0, [pc, #328]	; (8003574 <_printf_i+0x244>)
 800342c:	2100      	movs	r1, #0
 800342e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003432:	6866      	ldr	r6, [r4, #4]
 8003434:	2e00      	cmp	r6, #0
 8003436:	bfa8      	it	ge
 8003438:	6821      	ldrge	r1, [r4, #0]
 800343a:	60a6      	str	r6, [r4, #8]
 800343c:	bfa4      	itt	ge
 800343e:	f021 0104 	bicge.w	r1, r1, #4
 8003442:	6021      	strge	r1, [r4, #0]
 8003444:	b90d      	cbnz	r5, 800344a <_printf_i+0x11a>
 8003446:	2e00      	cmp	r6, #0
 8003448:	d04d      	beq.n	80034e6 <_printf_i+0x1b6>
 800344a:	4616      	mov	r6, r2
 800344c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003450:	fb03 5711 	mls	r7, r3, r1, r5
 8003454:	5dc7      	ldrb	r7, [r0, r7]
 8003456:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800345a:	462f      	mov	r7, r5
 800345c:	42bb      	cmp	r3, r7
 800345e:	460d      	mov	r5, r1
 8003460:	d9f4      	bls.n	800344c <_printf_i+0x11c>
 8003462:	2b08      	cmp	r3, #8
 8003464:	d10b      	bne.n	800347e <_printf_i+0x14e>
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	07df      	lsls	r7, r3, #31
 800346a:	d508      	bpl.n	800347e <_printf_i+0x14e>
 800346c:	6923      	ldr	r3, [r4, #16]
 800346e:	6861      	ldr	r1, [r4, #4]
 8003470:	4299      	cmp	r1, r3
 8003472:	bfde      	ittt	le
 8003474:	2330      	movle	r3, #48	; 0x30
 8003476:	f806 3c01 	strble.w	r3, [r6, #-1]
 800347a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800347e:	1b92      	subs	r2, r2, r6
 8003480:	6122      	str	r2, [r4, #16]
 8003482:	464b      	mov	r3, r9
 8003484:	4621      	mov	r1, r4
 8003486:	4640      	mov	r0, r8
 8003488:	f8cd a000 	str.w	sl, [sp]
 800348c:	aa03      	add	r2, sp, #12
 800348e:	f7ff fedf 	bl	8003250 <_printf_common>
 8003492:	3001      	adds	r0, #1
 8003494:	d14c      	bne.n	8003530 <_printf_i+0x200>
 8003496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800349a:	b004      	add	sp, #16
 800349c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034a0:	4834      	ldr	r0, [pc, #208]	; (8003574 <_printf_i+0x244>)
 80034a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034a6:	680e      	ldr	r6, [r1, #0]
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80034ae:	061f      	lsls	r7, r3, #24
 80034b0:	600e      	str	r6, [r1, #0]
 80034b2:	d514      	bpl.n	80034de <_printf_i+0x1ae>
 80034b4:	07d9      	lsls	r1, r3, #31
 80034b6:	bf44      	itt	mi
 80034b8:	f043 0320 	orrmi.w	r3, r3, #32
 80034bc:	6023      	strmi	r3, [r4, #0]
 80034be:	b91d      	cbnz	r5, 80034c8 <_printf_i+0x198>
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	f023 0320 	bic.w	r3, r3, #32
 80034c6:	6023      	str	r3, [r4, #0]
 80034c8:	2310      	movs	r3, #16
 80034ca:	e7af      	b.n	800342c <_printf_i+0xfc>
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	f043 0320 	orr.w	r3, r3, #32
 80034d2:	6023      	str	r3, [r4, #0]
 80034d4:	2378      	movs	r3, #120	; 0x78
 80034d6:	4828      	ldr	r0, [pc, #160]	; (8003578 <_printf_i+0x248>)
 80034d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034dc:	e7e3      	b.n	80034a6 <_printf_i+0x176>
 80034de:	065e      	lsls	r6, r3, #25
 80034e0:	bf48      	it	mi
 80034e2:	b2ad      	uxthmi	r5, r5
 80034e4:	e7e6      	b.n	80034b4 <_printf_i+0x184>
 80034e6:	4616      	mov	r6, r2
 80034e8:	e7bb      	b.n	8003462 <_printf_i+0x132>
 80034ea:	680b      	ldr	r3, [r1, #0]
 80034ec:	6826      	ldr	r6, [r4, #0]
 80034ee:	1d1d      	adds	r5, r3, #4
 80034f0:	6960      	ldr	r0, [r4, #20]
 80034f2:	600d      	str	r5, [r1, #0]
 80034f4:	0635      	lsls	r5, r6, #24
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	d501      	bpl.n	80034fe <_printf_i+0x1ce>
 80034fa:	6018      	str	r0, [r3, #0]
 80034fc:	e002      	b.n	8003504 <_printf_i+0x1d4>
 80034fe:	0671      	lsls	r1, r6, #25
 8003500:	d5fb      	bpl.n	80034fa <_printf_i+0x1ca>
 8003502:	8018      	strh	r0, [r3, #0]
 8003504:	2300      	movs	r3, #0
 8003506:	4616      	mov	r6, r2
 8003508:	6123      	str	r3, [r4, #16]
 800350a:	e7ba      	b.n	8003482 <_printf_i+0x152>
 800350c:	680b      	ldr	r3, [r1, #0]
 800350e:	1d1a      	adds	r2, r3, #4
 8003510:	600a      	str	r2, [r1, #0]
 8003512:	681e      	ldr	r6, [r3, #0]
 8003514:	2100      	movs	r1, #0
 8003516:	4630      	mov	r0, r6
 8003518:	6862      	ldr	r2, [r4, #4]
 800351a:	f000 f82f 	bl	800357c <memchr>
 800351e:	b108      	cbz	r0, 8003524 <_printf_i+0x1f4>
 8003520:	1b80      	subs	r0, r0, r6
 8003522:	6060      	str	r0, [r4, #4]
 8003524:	6863      	ldr	r3, [r4, #4]
 8003526:	6123      	str	r3, [r4, #16]
 8003528:	2300      	movs	r3, #0
 800352a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800352e:	e7a8      	b.n	8003482 <_printf_i+0x152>
 8003530:	4632      	mov	r2, r6
 8003532:	4649      	mov	r1, r9
 8003534:	4640      	mov	r0, r8
 8003536:	6923      	ldr	r3, [r4, #16]
 8003538:	47d0      	blx	sl
 800353a:	3001      	adds	r0, #1
 800353c:	d0ab      	beq.n	8003496 <_printf_i+0x166>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	079b      	lsls	r3, r3, #30
 8003542:	d413      	bmi.n	800356c <_printf_i+0x23c>
 8003544:	68e0      	ldr	r0, [r4, #12]
 8003546:	9b03      	ldr	r3, [sp, #12]
 8003548:	4298      	cmp	r0, r3
 800354a:	bfb8      	it	lt
 800354c:	4618      	movlt	r0, r3
 800354e:	e7a4      	b.n	800349a <_printf_i+0x16a>
 8003550:	2301      	movs	r3, #1
 8003552:	4632      	mov	r2, r6
 8003554:	4649      	mov	r1, r9
 8003556:	4640      	mov	r0, r8
 8003558:	47d0      	blx	sl
 800355a:	3001      	adds	r0, #1
 800355c:	d09b      	beq.n	8003496 <_printf_i+0x166>
 800355e:	3501      	adds	r5, #1
 8003560:	68e3      	ldr	r3, [r4, #12]
 8003562:	9903      	ldr	r1, [sp, #12]
 8003564:	1a5b      	subs	r3, r3, r1
 8003566:	42ab      	cmp	r3, r5
 8003568:	dcf2      	bgt.n	8003550 <_printf_i+0x220>
 800356a:	e7eb      	b.n	8003544 <_printf_i+0x214>
 800356c:	2500      	movs	r5, #0
 800356e:	f104 0619 	add.w	r6, r4, #25
 8003572:	e7f5      	b.n	8003560 <_printf_i+0x230>
 8003574:	08003a91 	.word	0x08003a91
 8003578:	08003aa2 	.word	0x08003aa2

0800357c <memchr>:
 800357c:	4603      	mov	r3, r0
 800357e:	b510      	push	{r4, lr}
 8003580:	b2c9      	uxtb	r1, r1
 8003582:	4402      	add	r2, r0
 8003584:	4293      	cmp	r3, r2
 8003586:	4618      	mov	r0, r3
 8003588:	d101      	bne.n	800358e <memchr+0x12>
 800358a:	2000      	movs	r0, #0
 800358c:	e003      	b.n	8003596 <memchr+0x1a>
 800358e:	7804      	ldrb	r4, [r0, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	428c      	cmp	r4, r1
 8003594:	d1f6      	bne.n	8003584 <memchr+0x8>
 8003596:	bd10      	pop	{r4, pc}

08003598 <memcpy>:
 8003598:	440a      	add	r2, r1
 800359a:	4291      	cmp	r1, r2
 800359c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80035a0:	d100      	bne.n	80035a4 <memcpy+0xc>
 80035a2:	4770      	bx	lr
 80035a4:	b510      	push	{r4, lr}
 80035a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035aa:	4291      	cmp	r1, r2
 80035ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035b0:	d1f9      	bne.n	80035a6 <memcpy+0xe>
 80035b2:	bd10      	pop	{r4, pc}

080035b4 <memmove>:
 80035b4:	4288      	cmp	r0, r1
 80035b6:	b510      	push	{r4, lr}
 80035b8:	eb01 0402 	add.w	r4, r1, r2
 80035bc:	d902      	bls.n	80035c4 <memmove+0x10>
 80035be:	4284      	cmp	r4, r0
 80035c0:	4623      	mov	r3, r4
 80035c2:	d807      	bhi.n	80035d4 <memmove+0x20>
 80035c4:	1e43      	subs	r3, r0, #1
 80035c6:	42a1      	cmp	r1, r4
 80035c8:	d008      	beq.n	80035dc <memmove+0x28>
 80035ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035d2:	e7f8      	b.n	80035c6 <memmove+0x12>
 80035d4:	4601      	mov	r1, r0
 80035d6:	4402      	add	r2, r0
 80035d8:	428a      	cmp	r2, r1
 80035da:	d100      	bne.n	80035de <memmove+0x2a>
 80035dc:	bd10      	pop	{r4, pc}
 80035de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035e6:	e7f7      	b.n	80035d8 <memmove+0x24>

080035e8 <_free_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	4605      	mov	r5, r0
 80035ec:	2900      	cmp	r1, #0
 80035ee:	d043      	beq.n	8003678 <_free_r+0x90>
 80035f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035f4:	1f0c      	subs	r4, r1, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bfb8      	it	lt
 80035fa:	18e4      	addlt	r4, r4, r3
 80035fc:	f000 f8d0 	bl	80037a0 <__malloc_lock>
 8003600:	4a1e      	ldr	r2, [pc, #120]	; (800367c <_free_r+0x94>)
 8003602:	6813      	ldr	r3, [r2, #0]
 8003604:	4610      	mov	r0, r2
 8003606:	b933      	cbnz	r3, 8003616 <_free_r+0x2e>
 8003608:	6063      	str	r3, [r4, #4]
 800360a:	6014      	str	r4, [r2, #0]
 800360c:	4628      	mov	r0, r5
 800360e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003612:	f000 b8cb 	b.w	80037ac <__malloc_unlock>
 8003616:	42a3      	cmp	r3, r4
 8003618:	d90a      	bls.n	8003630 <_free_r+0x48>
 800361a:	6821      	ldr	r1, [r4, #0]
 800361c:	1862      	adds	r2, r4, r1
 800361e:	4293      	cmp	r3, r2
 8003620:	bf01      	itttt	eq
 8003622:	681a      	ldreq	r2, [r3, #0]
 8003624:	685b      	ldreq	r3, [r3, #4]
 8003626:	1852      	addeq	r2, r2, r1
 8003628:	6022      	streq	r2, [r4, #0]
 800362a:	6063      	str	r3, [r4, #4]
 800362c:	6004      	str	r4, [r0, #0]
 800362e:	e7ed      	b.n	800360c <_free_r+0x24>
 8003630:	461a      	mov	r2, r3
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	b10b      	cbz	r3, 800363a <_free_r+0x52>
 8003636:	42a3      	cmp	r3, r4
 8003638:	d9fa      	bls.n	8003630 <_free_r+0x48>
 800363a:	6811      	ldr	r1, [r2, #0]
 800363c:	1850      	adds	r0, r2, r1
 800363e:	42a0      	cmp	r0, r4
 8003640:	d10b      	bne.n	800365a <_free_r+0x72>
 8003642:	6820      	ldr	r0, [r4, #0]
 8003644:	4401      	add	r1, r0
 8003646:	1850      	adds	r0, r2, r1
 8003648:	4283      	cmp	r3, r0
 800364a:	6011      	str	r1, [r2, #0]
 800364c:	d1de      	bne.n	800360c <_free_r+0x24>
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	4401      	add	r1, r0
 8003654:	6011      	str	r1, [r2, #0]
 8003656:	6053      	str	r3, [r2, #4]
 8003658:	e7d8      	b.n	800360c <_free_r+0x24>
 800365a:	d902      	bls.n	8003662 <_free_r+0x7a>
 800365c:	230c      	movs	r3, #12
 800365e:	602b      	str	r3, [r5, #0]
 8003660:	e7d4      	b.n	800360c <_free_r+0x24>
 8003662:	6820      	ldr	r0, [r4, #0]
 8003664:	1821      	adds	r1, r4, r0
 8003666:	428b      	cmp	r3, r1
 8003668:	bf01      	itttt	eq
 800366a:	6819      	ldreq	r1, [r3, #0]
 800366c:	685b      	ldreq	r3, [r3, #4]
 800366e:	1809      	addeq	r1, r1, r0
 8003670:	6021      	streq	r1, [r4, #0]
 8003672:	6063      	str	r3, [r4, #4]
 8003674:	6054      	str	r4, [r2, #4]
 8003676:	e7c9      	b.n	800360c <_free_r+0x24>
 8003678:	bd38      	pop	{r3, r4, r5, pc}
 800367a:	bf00      	nop
 800367c:	2000011c 	.word	0x2000011c

08003680 <_malloc_r>:
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003682:	1ccd      	adds	r5, r1, #3
 8003684:	f025 0503 	bic.w	r5, r5, #3
 8003688:	3508      	adds	r5, #8
 800368a:	2d0c      	cmp	r5, #12
 800368c:	bf38      	it	cc
 800368e:	250c      	movcc	r5, #12
 8003690:	2d00      	cmp	r5, #0
 8003692:	4606      	mov	r6, r0
 8003694:	db01      	blt.n	800369a <_malloc_r+0x1a>
 8003696:	42a9      	cmp	r1, r5
 8003698:	d903      	bls.n	80036a2 <_malloc_r+0x22>
 800369a:	230c      	movs	r3, #12
 800369c:	6033      	str	r3, [r6, #0]
 800369e:	2000      	movs	r0, #0
 80036a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a2:	f000 f87d 	bl	80037a0 <__malloc_lock>
 80036a6:	4921      	ldr	r1, [pc, #132]	; (800372c <_malloc_r+0xac>)
 80036a8:	680a      	ldr	r2, [r1, #0]
 80036aa:	4614      	mov	r4, r2
 80036ac:	b99c      	cbnz	r4, 80036d6 <_malloc_r+0x56>
 80036ae:	4f20      	ldr	r7, [pc, #128]	; (8003730 <_malloc_r+0xb0>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	b923      	cbnz	r3, 80036be <_malloc_r+0x3e>
 80036b4:	4621      	mov	r1, r4
 80036b6:	4630      	mov	r0, r6
 80036b8:	f000 f862 	bl	8003780 <_sbrk_r>
 80036bc:	6038      	str	r0, [r7, #0]
 80036be:	4629      	mov	r1, r5
 80036c0:	4630      	mov	r0, r6
 80036c2:	f000 f85d 	bl	8003780 <_sbrk_r>
 80036c6:	1c43      	adds	r3, r0, #1
 80036c8:	d123      	bne.n	8003712 <_malloc_r+0x92>
 80036ca:	230c      	movs	r3, #12
 80036cc:	4630      	mov	r0, r6
 80036ce:	6033      	str	r3, [r6, #0]
 80036d0:	f000 f86c 	bl	80037ac <__malloc_unlock>
 80036d4:	e7e3      	b.n	800369e <_malloc_r+0x1e>
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	1b5b      	subs	r3, r3, r5
 80036da:	d417      	bmi.n	800370c <_malloc_r+0x8c>
 80036dc:	2b0b      	cmp	r3, #11
 80036de:	d903      	bls.n	80036e8 <_malloc_r+0x68>
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	441c      	add	r4, r3
 80036e4:	6025      	str	r5, [r4, #0]
 80036e6:	e004      	b.n	80036f2 <_malloc_r+0x72>
 80036e8:	6863      	ldr	r3, [r4, #4]
 80036ea:	42a2      	cmp	r2, r4
 80036ec:	bf0c      	ite	eq
 80036ee:	600b      	streq	r3, [r1, #0]
 80036f0:	6053      	strne	r3, [r2, #4]
 80036f2:	4630      	mov	r0, r6
 80036f4:	f000 f85a 	bl	80037ac <__malloc_unlock>
 80036f8:	f104 000b 	add.w	r0, r4, #11
 80036fc:	1d23      	adds	r3, r4, #4
 80036fe:	f020 0007 	bic.w	r0, r0, #7
 8003702:	1ac2      	subs	r2, r0, r3
 8003704:	d0cc      	beq.n	80036a0 <_malloc_r+0x20>
 8003706:	1a1b      	subs	r3, r3, r0
 8003708:	50a3      	str	r3, [r4, r2]
 800370a:	e7c9      	b.n	80036a0 <_malloc_r+0x20>
 800370c:	4622      	mov	r2, r4
 800370e:	6864      	ldr	r4, [r4, #4]
 8003710:	e7cc      	b.n	80036ac <_malloc_r+0x2c>
 8003712:	1cc4      	adds	r4, r0, #3
 8003714:	f024 0403 	bic.w	r4, r4, #3
 8003718:	42a0      	cmp	r0, r4
 800371a:	d0e3      	beq.n	80036e4 <_malloc_r+0x64>
 800371c:	1a21      	subs	r1, r4, r0
 800371e:	4630      	mov	r0, r6
 8003720:	f000 f82e 	bl	8003780 <_sbrk_r>
 8003724:	3001      	adds	r0, #1
 8003726:	d1dd      	bne.n	80036e4 <_malloc_r+0x64>
 8003728:	e7cf      	b.n	80036ca <_malloc_r+0x4a>
 800372a:	bf00      	nop
 800372c:	2000011c 	.word	0x2000011c
 8003730:	20000120 	.word	0x20000120

08003734 <_realloc_r>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	4607      	mov	r7, r0
 8003738:	4614      	mov	r4, r2
 800373a:	460e      	mov	r6, r1
 800373c:	b921      	cbnz	r1, 8003748 <_realloc_r+0x14>
 800373e:	4611      	mov	r1, r2
 8003740:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003744:	f7ff bf9c 	b.w	8003680 <_malloc_r>
 8003748:	b922      	cbnz	r2, 8003754 <_realloc_r+0x20>
 800374a:	f7ff ff4d 	bl	80035e8 <_free_r>
 800374e:	4625      	mov	r5, r4
 8003750:	4628      	mov	r0, r5
 8003752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003754:	f000 f830 	bl	80037b8 <_malloc_usable_size_r>
 8003758:	42a0      	cmp	r0, r4
 800375a:	d20f      	bcs.n	800377c <_realloc_r+0x48>
 800375c:	4621      	mov	r1, r4
 800375e:	4638      	mov	r0, r7
 8003760:	f7ff ff8e 	bl	8003680 <_malloc_r>
 8003764:	4605      	mov	r5, r0
 8003766:	2800      	cmp	r0, #0
 8003768:	d0f2      	beq.n	8003750 <_realloc_r+0x1c>
 800376a:	4631      	mov	r1, r6
 800376c:	4622      	mov	r2, r4
 800376e:	f7ff ff13 	bl	8003598 <memcpy>
 8003772:	4631      	mov	r1, r6
 8003774:	4638      	mov	r0, r7
 8003776:	f7ff ff37 	bl	80035e8 <_free_r>
 800377a:	e7e9      	b.n	8003750 <_realloc_r+0x1c>
 800377c:	4635      	mov	r5, r6
 800377e:	e7e7      	b.n	8003750 <_realloc_r+0x1c>

08003780 <_sbrk_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	2300      	movs	r3, #0
 8003784:	4d05      	ldr	r5, [pc, #20]	; (800379c <_sbrk_r+0x1c>)
 8003786:	4604      	mov	r4, r0
 8003788:	4608      	mov	r0, r1
 800378a:	602b      	str	r3, [r5, #0]
 800378c:	f7fd fd66 	bl	800125c <_sbrk>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d102      	bne.n	800379a <_sbrk_r+0x1a>
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	b103      	cbz	r3, 800379a <_sbrk_r+0x1a>
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	bd38      	pop	{r3, r4, r5, pc}
 800379c:	200001e8 	.word	0x200001e8

080037a0 <__malloc_lock>:
 80037a0:	4801      	ldr	r0, [pc, #4]	; (80037a8 <__malloc_lock+0x8>)
 80037a2:	f000 b811 	b.w	80037c8 <__retarget_lock_acquire_recursive>
 80037a6:	bf00      	nop
 80037a8:	200001f0 	.word	0x200001f0

080037ac <__malloc_unlock>:
 80037ac:	4801      	ldr	r0, [pc, #4]	; (80037b4 <__malloc_unlock+0x8>)
 80037ae:	f000 b80c 	b.w	80037ca <__retarget_lock_release_recursive>
 80037b2:	bf00      	nop
 80037b4:	200001f0 	.word	0x200001f0

080037b8 <_malloc_usable_size_r>:
 80037b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037bc:	1f18      	subs	r0, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	bfbc      	itt	lt
 80037c2:	580b      	ldrlt	r3, [r1, r0]
 80037c4:	18c0      	addlt	r0, r0, r3
 80037c6:	4770      	bx	lr

080037c8 <__retarget_lock_acquire_recursive>:
 80037c8:	4770      	bx	lr

080037ca <__retarget_lock_release_recursive>:
 80037ca:	4770      	bx	lr

080037cc <_init>:
 80037cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ce:	bf00      	nop
 80037d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d2:	bc08      	pop	{r3}
 80037d4:	469e      	mov	lr, r3
 80037d6:	4770      	bx	lr

080037d8 <_fini>:
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	bf00      	nop
 80037dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037de:	bc08      	pop	{r3}
 80037e0:	469e      	mov	lr, r3
 80037e2:	4770      	bx	lr
